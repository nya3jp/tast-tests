{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4133ca0b_18b6fb9d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1400377
      },
      "writtenOn": "2021-02-09T20:21:21Z",
      "side": 1,
      "message": "This CL implements a login time tracker to read login time from system login-times file and record it in performance metric output file.",
      "revId": "650916a784f52d1cb0b31213468cf34d0bceb04b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e518e177_1633af23",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2021-02-09T21:52:07Z",
      "side": 1,
      "message": "lgtm % one nit\n\nPlease wait for mukai@.",
      "revId": "650916a784f52d1cb0b31213468cf34d0bceb04b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "35c5b6c0_6d8833b7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2021-02-09T22:24:32Z",
      "side": 1,
      "message": "Sorry, I flipped.",
      "revId": "650916a784f52d1cb0b31213468cf34d0bceb04b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3aa62c14_ee2eeb69",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1400377
      },
      "writtenOn": "2021-02-10T02:37:56Z",
      "side": 1,
      "message": "Thanks Xiyuan and Jun for your comments. We will merge the login-times file reading logic into the \"quick check\" cuj logic and get the login time for that test case only.\n\nI\u0027ll abandon this CL.",
      "revId": "650916a784f52d1cb0b31213468cf34d0bceb04b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5fa8a2e0_77090821",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/login_time_tracker.go",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2021-02-09T21:52:07Z",
      "side": 1,
      "message": "nit: Document the time unit, and maybe define login time more clearly.\n\ne.g.\n\n  // Login time from starting auth to showing user desktop in seconds.",
      "range": {
        "startLine": 28,
        "startChar": 22,
        "endLine": 28,
        "endChar": 32
      },
      "revId": "650916a784f52d1cb0b31213468cf34d0bceb04b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "364af900_31ca689a",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/login_time_tracker.go",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2021-02-10T01:57:09Z",
      "side": 1,
      "message": "I believe this Start/Stop/Record mechanism doesn\u0027t fit well with this type.\n\nIn my understanding, only one test will produce the data point for login.  You can simply write the code of reading login-time file as a part of that test case.",
      "revId": "650916a784f52d1cb0b31213468cf34d0bceb04b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7bd4c9ff_7ee3c727",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/login_time_tracker.go",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1400377
      },
      "writtenOn": "2021-02-10T02:37:56Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "364af900_31ca689a",
      "revId": "650916a784f52d1cb0b31213468cf34d0bceb04b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c571a826_06414b2d",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/recorder.go",
        "patchSetId": 2
      },
      "lineNbr": 297,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2021-02-09T22:24:32Z",
      "side": 1,
      "message": "I just realized that the Start/Stop inside cuj/Recorder might not always do the right thing. \n\nThe login-times file is only updated during login. However, cuj/Recorder could be used with Pre/Fixture, which does not always go through login. In such case, we are repeating the the login time of the Pre/Fixture. That is probably not what we want.\n\nSo I am not sure whether we should make this part of cuj/Recorder because it would easily use it wrong. The LoginTimeTracker should somewhat be more closer to where login happen, e.g. chrome.New().",
      "revId": "650916a784f52d1cb0b31213468cf34d0bceb04b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0f36d01_4a9406d5",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/recorder.go",
        "patchSetId": 2
      },
      "lineNbr": 297,
      "author": {
        "id": 1400377
      },
      "writtenOn": "2021-02-09T23:16:35Z",
      "side": 1,
      "message": "Thanks Xiyuan for bringup a good point. How about we check the existing login-times file in the Start() function, and check again in Stop() to make sure they are different files (with different timestamp)? We will not record if the login-files doesn\u0027t change between Start() and Stop(). This way we will be confident that we are not recording login time from pass login procedures.\n\nThere are cases that chrome could be restarted multiple times between Start() and Stop(), but we can add comments to indicate the time tracker only records the the time of the last login.\n\nHow do you think of this approach?",
      "parentUuid": "c571a826_06414b2d",
      "revId": "650916a784f52d1cb0b31213468cf34d0bceb04b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d286a827_bba3f1b4",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/recorder.go",
        "patchSetId": 2
      },
      "lineNbr": 297,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2021-02-10T00:20:20Z",
      "side": 1,
      "message": "Login is a somewhat heavy operation (taking seconds to finish). Pre/Fixture is added to reduce that overhead so that we don\u0027t do it for every tests.\n\nCUJ test scenarios probably are not really related to login. So it feels strange to do this inside cuj/Recorder and do it for all cuj tests.\n\nThe suggested way could work but it somewhat makes the test data tricky to read. That only one cuj test would have the login-times data and the rest would not. And this one cuj test depends on which one gets picked by tast as the first to run the Fixture.\n\nWhat do we plan to use with the login times data? If we want to cover the login performance, I think we should create dedicated test cases for that purpose and the LoginTimeTracker could be used there.",
      "parentUuid": "e0f36d01_4a9406d5",
      "revId": "650916a784f52d1cb0b31213468cf34d0bceb04b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8a5329b0_168462cc",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/recorder.go",
        "patchSetId": 2
      },
      "lineNbr": 297,
      "author": {
        "id": 1400377
      },
      "writtenOn": "2021-02-10T02:37:56Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d286a827_bba3f1b4",
      "revId": "650916a784f52d1cb0b31213468cf34d0bceb04b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}