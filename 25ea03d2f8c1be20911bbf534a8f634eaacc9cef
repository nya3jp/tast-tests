{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8fbe1bce_ba8a6fc8",
        "filename": "src/chromiumos/tast/common/policy/policy_blob.go",
        "patchSetId": 5
      },
      "lineNbr": 301,
      "author": {
        "id": 1153089
      },
      "writtenOn": "2022-11-02T19:20:20Z",
      "side": 1,
      "message": "This looks great. Can we do the same with MarshalJSON? To make it easy to relate functions using their names, I would call these functions `unmarshal...` instead of `set...` and then name corresponding functions extracted from MarshalJSON as \"marshal...\".",
      "range": {
        "startLine": 253,
        "startChar": 0,
        "endLine": 301,
        "endChar": 1
      },
      "revId": "25ea03d2f8c1be20911bbf534a8f634eaacc9cef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6eec99a_1dc43b7b",
        "filename": "src/chromiumos/tast/common/policy/policy_blob_test.go",
        "patchSetId": 5
      },
      "lineNbr": 24,
      "author": {
        "id": 1153089
      },
      "writtenOn": "2022-11-02T19:20:20Z",
      "side": 1,
      "message": "There is only one blob and one result json, do we really need to define this struct and run a loop over it? Why not just assign these to variables? Also not clear why you need `isErr`.\n\n```\nsrcBlob :\u003d Blob{\n  ...\n}\nexpectedJson :\u003d `...`\n\n// Test marshalling code.\nactualJson, err :\u003d srcBlob.MarshalJSON()\nif err !\u003d nil {\n  t.Errorf(\"Error marshalling the blob: %s\", err)\n}\nif string(b) !\u003d tc.result {\n  t.Errorf(\"unexpected comparison between %s and %v\", tc.result, string(b))\n}\n```\n\nFurthermore, you can test marshalling code compatibility with unmarshalling by continuing the test like so:\n\n```\n// Test unmarshalling code.\nvar pb Blob\nif err :\u003d pb.UnmarshalJSON([]byte(actualJson)); err !\u003d nil {\n  t.Errorf(\"Error unmarshalling the json into blob: %s\", err)\n}\nif diff :\u003d cmp.Diff(pb.PolicyUser, srcBlob.PolicyUser); diff !\u003d \"\" {\n  t.Errorf(\"unexpected PolicyUser difference:\\n%v\", diff)\n}\n...\n```\n\nThen you also don\u0027t need the test below.",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 24,
        "endChar": 3
      },
      "revId": "25ea03d2f8c1be20911bbf534a8f634eaacc9cef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}