{
  "comments": [
    {
      "key": {
        "uuid": "05d95f89_9c7866cf",
        "filename": "src/chromiumos/tast/common/pkcs11/pkcs11.go",
        "patchSetId": 36
      },
      "lineNbr": 280,
      "author": {
        "id": 1117055
      },
      "writtenOn": "2020-01-17T21:45:27Z",
      "side": 1,
      "message": "I assume we are panicking on failure here because we expect this to always be called with a constant that can be verified to have an entry in the table ahead of time, right?",
      "revId": "a22e551b9222d652146f07692d7da822d3daf835",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "809f5f24_c17a5849",
        "filename": "src/chromiumos/tast/common/pkcs11/pkcs11.go",
        "patchSetId": 36
      },
      "lineNbr": 280,
      "author": {
        "id": 1314760
      },
      "writtenOn": "2020-01-20T13:42:08Z",
      "side": 1,
      "message": "Yes, we pass string literals to this method. If the test succeeds for once, then it can be guaranteed that panic() cannot happen without changing the source code.\n\nNote that constants are not defined here because it\u0027ll run into the same naming problem. Previously each mechanism struct is returned by a function, but the function is very not readable because it\u0027s full of acronyms and we can\u0027t do it with CamelCase or underscore due to style guide.",
      "parentUuid": "05d95f89_9c7866cf",
      "revId": "a22e551b9222d652146f07692d7da822d3daf835",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bfb55c2e_4a7e4e79",
        "filename": "src/chromiumos/tast/local/bundles/cros/hwsec/chaps_pkcs1v15.go",
        "patchSetId": 36
      },
      "lineNbr": 52,
      "author": {
        "id": 1117055
      },
      "writtenOn": "2020-01-17T21:45:27Z",
      "side": 1,
      "message": "Do we have any way of verifying this ahead of time?",
      "revId": "a22e551b9222d652146f07692d7da822d3daf835",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9db1926e_83a4546f",
        "filename": "src/chromiumos/tast/local/bundles/cros/hwsec/chaps_pkcs1v15.go",
        "patchSetId": 36
      },
      "lineNbr": 52,
      "author": {
        "id": 1314760
      },
      "writtenOn": "2020-01-20T13:42:08Z",
      "side": 1,
      "message": "I don\u0027t think that is possible without an elaborate parsing of --list-object command. Previously we cleanup the keystore before the test run, but Andrey prefers that it happens at the end of the test.\n\nIf this is a concern, I think we can run the cleanup both before and after the test, assuming that we don\u0027t want to detect stray objects in the keystore before the test (I\u0027m in favour of this.)",
      "parentUuid": "bfb55c2e_4a7e4e79",
      "revId": "a22e551b9222d652146f07692d7da822d3daf835",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1b2a63a_d87d1710",
        "filename": "src/chromiumos/tast/local/bundles/cros/hwsec/chaps_pkcs1v15.go",
        "patchSetId": 36
      },
      "lineNbr": 52,
      "author": {
        "id": 1117055
      },
      "writtenOn": "2020-01-21T19:46:56Z",
      "side": 1,
      "message": "I think that can be picked up later if it ends up being a problem. Andrey can comment more on that if he wants.",
      "parentUuid": "9db1926e_83a4546f",
      "revId": "a22e551b9222d652146f07692d7da822d3daf835",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecda0e96_a160cf5e",
        "filename": "src/chromiumos/tast/local/bundles/cros/hwsec/chaps_pkcs1v15.go",
        "patchSetId": 36
      },
      "lineNbr": 52,
      "author": {
        "id": 1152319
      },
      "writtenOn": "2020-01-21T22:55:54Z",
      "side": 1,
      "message": "yes, I like the before-and-after thing. otherwise, if something goes wrong and DUT dies in the middle of the test, re-running the test will fail on this DUT until it is re-imaged or powerwashed (since the objects maybe already be there). there are enough tests that go through owner clear, so the keystore will probably be cleared pretty soon. but still there may be puzzling failures of this test before it does. can be done in a later CL.",
      "parentUuid": "a1b2a63a_d87d1710",
      "revId": "a22e551b9222d652146f07692d7da822d3daf835",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "668d343d_5773b02c",
        "filename": "src/chromiumos/tast/local/bundles/cros/hwsec/chaps_pkcs1v15.go",
        "patchSetId": 36
      },
      "lineNbr": 70,
      "author": {
        "id": 1117055
      },
      "writtenOn": "2020-01-17T21:45:27Z",
      "side": 1,
      "message": "nit: can also range over the names and call pkcs11.GetMechanism() when passing it to k.SignVerify() below, to prevent this line from growing so huge if we add more mechanisms",
      "revId": "a22e551b9222d652146f07692d7da822d3daf835",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef47d0bb_f16045c6",
        "filename": "src/chromiumos/tast/local/bundles/cros/hwsec/chaps_pkcs1v15.go",
        "patchSetId": 36
      },
      "lineNbr": 70,
      "author": {
        "id": 1314760
      },
      "writtenOn": "2020-01-20T13:42:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "668d343d_5773b02c",
      "revId": "a22e551b9222d652146f07692d7da822d3daf835",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0fadc3e9_b4119f8f",
        "filename": "src/chromiumos/tast/local/bundles/cros/hwsec/chaps_pkcs1v15.go",
        "patchSetId": 36
      },
      "lineNbr": 72,
      "author": {
        "id": 1117055
      },
      "writtenOn": "2020-01-17T21:45:27Z",
      "side": 1,
      "message": "If we Fatal, then an error on one might hide an error on the other as well -- is there any reason we should Fatal instead of Error here?",
      "revId": "a22e551b9222d652146f07692d7da822d3daf835",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5d6a729_9f679ca9",
        "filename": "src/chromiumos/tast/local/bundles/cros/hwsec/chaps_pkcs1v15.go",
        "patchSetId": 36
      },
      "lineNbr": 72,
      "author": {
        "id": 1314760
      },
      "writtenOn": "2020-01-20T13:42:08Z",
      "side": 1,
      "message": "No, changed to Error.",
      "parentUuid": "0fadc3e9_b4119f8f",
      "revId": "a22e551b9222d652146f07692d7da822d3daf835",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}