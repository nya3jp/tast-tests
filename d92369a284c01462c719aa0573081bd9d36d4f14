{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2804a158_0c7364c8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003168
      },
      "writtenOn": "2022-03-30T03:11:31Z",
      "side": 1,
      "message": "Please review.",
      "revId": "d92369a284c01462c719aa0573081bd9d36d4f14",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1dd0636a_6c936839",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/recorder.go",
        "patchSetId": 1
      },
      "lineNbr": 205,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2022-03-30T16:40:35Z",
      "side": 1,
      "message": "Think we would need to take the returned cancel func and defer call it.",
      "range": {
        "startLine": 205,
        "startChar": 29,
        "endLine": 205,
        "endChar": 30
      },
      "revId": "d92369a284c01462c719aa0573081bd9d36d4f14",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a9e3b305_294f2b93",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/recorder.go",
        "patchSetId": 1
      },
      "lineNbr": 205,
      "author": {
        "id": 1003168
      },
      "writtenOn": "2022-04-06T23:38:25Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1dd0636a_6c936839",
      "range": {
        "startLine": 205,
        "startChar": 29,
        "endLine": 205,
        "endChar": 30
      },
      "revId": "d92369a284c01462c719aa0573081bd9d36d4f14",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f7da239_1a14b535",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/recorder.go",
        "patchSetId": 1
      },
      "lineNbr": 205,
      "author": {
        "id": 1003168
      },
      "writtenOn": "2022-04-06T23:39:26Z",
      "side": 1,
      "message": "Not done yet (I haven\u0027t uploaded the new change).",
      "parentUuid": "a9e3b305_294f2b93",
      "range": {
        "startLine": 205,
        "startChar": 29,
        "endLine": 205,
        "endChar": 30
      },
      "revId": "d92369a284c01462c719aa0573081bd9d36d4f14",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9cc15d80_274d8685",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/recorder.go",
        "patchSetId": 1
      },
      "lineNbr": 206,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2022-03-30T16:40:35Z",
      "side": 1,
      "message": "Would `LoginPerf` know which TestConn to use? If so, let\u0027s create a `NewRecorderWithTestConn` to take it as an arg.\n\nThe existing `NewRecorder` could call the new `NewRecorderWithTestConn` with `cr.TestAPIConn` to minimize the change.",
      "revId": "d92369a284c01462c719aa0573081bd9d36d4f14",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e2f2344e_59606380",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/recorder.go",
        "patchSetId": 1
      },
      "lineNbr": 206,
      "author": {
        "id": 1003168
      },
      "writtenOn": "2022-04-06T23:38:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9cc15d80_274d8685",
      "revId": "d92369a284c01462c719aa0573081bd9d36d4f14",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df35c6e4_d4b008f3",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/recorder.go",
        "patchSetId": 1
      },
      "lineNbr": 206,
      "author": {
        "id": 1003168
      },
      "writtenOn": "2022-04-06T23:39:26Z",
      "side": 1,
      "message": "Not done yet (I haven\u0027t uploaded the new change).",
      "parentUuid": "e2f2344e_59606380",
      "revId": "d92369a284c01462c719aa0573081bd9d36d4f14",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1887e1f1_16784574",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/login_perf.go",
        "patchSetId": 1
      },
      "lineNbr": 433,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2022-03-30T16:40:35Z",
      "side": 1,
      "message": "We could potentially drop `metrics.RunAndWaitAll` and just use `cujRecorder.Run`.  Recorder\u0027s `mr` member does the histogram diff and collection. \n\nThe missing piece is `WaitAll` since `cujRecorder.Run` does not wait. We could probably add a `WaitAll` method to `Recorder` to call `WaitAll` for all its `mr`.",
      "revId": "d92369a284c01462c719aa0573081bd9d36d4f14",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e800f32f_d8cbf98b",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/login_perf.go",
        "patchSetId": 1
      },
      "lineNbr": 433,
      "author": {
        "id": 1003168
      },
      "writtenOn": "2022-04-06T23:38:25Z",
      "side": 1,
      "message": "The issue is that metrics.RunAndWaitAll() here waits for the different set of metrics than the cuj recorder.\n\nWe could potentially add another set of metrics to the potential `cujRecorder.RunAndWaitAll()` but looking at how `cujrecoder.Run` works: https://source.chromium.org/chromiumos/chromiumos/codesearch/+/main:src/platform/tast-tests/src/chromiumos/tast/local/bundles/cros/ui/cuj/recorder.go;l\u003d527-544 it seems that we would need to check the metrics before the `stopRecording()` call.\n\nWhich means that we could either expose `StopRecording` method and stop using `cujrecorder.Run()` here, or we could move the wrapper around `metrics.RunAndWaitAll()` inside the `stopRecording()`.\n\nThe relatively simple way be to implement \"wait for additional metrics\" while always waiting for all the `mr`. But this raises questions whether we should require all the tests to fail on missing metrics.\n\nWDYT?",
      "parentUuid": "1887e1f1_16784574",
      "revId": "d92369a284c01462c719aa0573081bd9d36d4f14",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b390dd0b_7e618bc0",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/login_perf.go",
        "patchSetId": 1
      },
      "lineNbr": 433,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2022-04-07T17:23:12Z",
      "side": 1,
      "message": "\u003e The issue is that metrics.RunAndWaitAll() here waits for the different set of metrics than the cuj recorder.\n\nCould we use one set of metrics? The difference seems quite small, only `ensureWorkVisibleHistogram*`, right?\n\nI don\u0027t think we could make `cujRecorder.Run()` to wait for all histogram since many CUJs are not expecting all of their histograms to have data, esp. the ones using `cuj/common_metrics.go`. Adding a `cujRecorder.RunAndWaitAll()` for tests that expect all histograms sounds good to me.\n\nMy intention is to make code simpler and easier to read. Having nested `metrics.RunAndWaitAll()` in `Run` is a bit difficult to follow IMHO. But if this comment requires a big refactoring, let\u0027s forget about it and keep what we have. It is out of scope of the CL and we could do it separately.",
      "parentUuid": "e800f32f_d8cbf98b",
      "revId": "d92369a284c01462c719aa0573081bd9d36d4f14",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "219f59e0_23177ee9",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/login_perf.go",
        "patchSetId": 1
      },
      "lineNbr": 433,
      "author": {
        "id": 1003168
      },
      "writtenOn": "2022-04-07T22:35:40Z",
      "side": 1,
      "message": "\u003e I don\u0027t think we could make  cujRecorder.Run()  to wait for all histogram\n\u003e since many CUJs are not expecting all of their histograms to have data, esp.\n\u003e the ones using  cuj/common_metrics.go . Adding a  cujRecorder.RunAndWaitAll()\n\u003e for tests that expect all histograms sounds good to me.\n\nBut I was just about to add  `common_metrics` reporting to this test ðŸ˜Š . So it\u0027s again a question of waiting for separate set of metrics, regardless of whether we report them to the CUJ or not.\n\nOr maybe we can require that all the metrics that we wait should be reported and add a flag to the `MetricConfig` to wait for it. This way `cujRecorder.RunAndWaitAll()` will wait only for the `mr`s that have this flag and we do not need to wait for the extra metrics.\n\nWDYT?",
      "parentUuid": "b390dd0b_7e618bc0",
      "revId": "d92369a284c01462c719aa0573081bd9d36d4f14",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcef6e01_038da8db",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/login_perf.go",
        "patchSetId": 1
      },
      "lineNbr": 455,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2022-03-30T16:40:35Z",
      "side": 1,
      "message": "Why having this `if` to only do `cujRecorder.Record` and `cujRunPerfValues.MergeWithSuffix` once? Should we do that for every `cujRecorder.Run` ?",
      "revId": "d92369a284c01462c719aa0573081bd9d36d4f14",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}