{
  "comments": [
    {
      "key": {
        "uuid": "449a9f93_bd016068",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1324920
      },
      "writtenOn": "2020-07-10T03:33:38Z",
      "side": 1,
      "message": "+tast owners for tast review",
      "revId": "518df827125a24a1fee29db32f3205f3fb930ae5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "994f8403_6500a5e1",
        "filename": "src/chromiumos/tast/local/bundles/cros/crostini/mouse_perf.go",
        "patchSetId": 6
      },
      "lineNbr": 55,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2020-07-10T17:15:11Z",
      "side": 1,
      "message": "I am not quite sure what this statistics measures.  This would be mostly 1 millisecond (the wait) + duration of writing mouse event (access to the device file) + jitter -- that would be a performance of Go runtime?",
      "revId": "518df827125a24a1fee29db32f3205f3fb930ae5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cac1ffd1_77a9f646",
        "filename": "src/chromiumos/tast/local/bundles/cros/crostini/mouse_perf.go",
        "patchSetId": 6
      },
      "lineNbr": 55,
      "author": {
        "id": 1108834
      },
      "writtenOn": "2020-07-10T17:28:56Z",
      "side": 1,
      "message": "This entire test is meant to measure issues with input latency (eventually at high cpu/system load).  In general sleep doesn\u0027t have guarantees on upper bounds of how long the sleep will take, just minimum bounds.  At some point, if the test is getting starved out, then the jitter could become substantial and should be measured.",
      "parentUuid": "994f8403_6500a5e1",
      "revId": "518df827125a24a1fee29db32f3205f3fb930ae5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a3b2dc1_c4828c72",
        "filename": "src/chromiumos/tast/local/bundles/cros/crostini/mouse_perf.go",
        "patchSetId": 6
      },
      "lineNbr": 55,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2020-07-10T17:51:38Z",
      "side": 1,
      "message": "Ack\n\nI guess what you actually wanted here would be the timestamp of when Chrome UI reads the mouse event, which should be stored in ui::Event::time_stamp() in Chrome. It would be ideal to track that timestamp, though it is not available from Tast (at least for now).  Maybe you can add some testing API to chrome (or exosphere/wayland) if that\u0027s the wanted data.\n\nBut this would be also fine.",
      "parentUuid": "cac1ffd1_77a9f646",
      "revId": "518df827125a24a1fee29db32f3205f3fb930ae5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84ce151a_e1923e4e",
        "filename": "src/chromiumos/tast/local/bundles/cros/crostini/mouse_perf.go",
        "patchSetId": 6
      },
      "lineNbr": 69,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2020-07-10T17:15:11Z",
      "side": 1,
      "message": "Please add a check of error: (if err :\u003d testing.Sleep(ctx, ...); err !\u003d nil { ... })\n\nBy the way, 1 millisecond looks a bit short. Do you have some knowledge of how much should it wait?\nFor the comparison, Swipe for touchscreen uses 5msecs frequency (https://chromium.googlesource.com/chromiumos/platform/tast-tests.git/+/refs/heads/master/src/chromiumos/tast/local/input/touch.go#57).",
      "range": {
        "startLine": 69,
        "startChar": 3,
        "endLine": 69,
        "endChar": 41
      },
      "revId": "518df827125a24a1fee29db32f3205f3fb930ae5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2e6e79a_9b6fa837",
        "filename": "src/chromiumos/tast/local/bundles/cros/crostini/mouse_perf.go",
        "patchSetId": 6
      },
      "lineNbr": 69,
      "author": {
        "id": 1108834
      },
      "writtenOn": "2020-07-10T17:28:56Z",
      "side": 1,
      "message": "1ms is deliberate to avoid 5ms potentially smoothing out and hiding what we\u0027re trying to measure.  Gamers will run with their mouse up to 1000Hz and we want to ensure smooth performance within the VM.",
      "parentUuid": "84ce151a_e1923e4e",
      "range": {
        "startLine": 69,
        "startChar": 3,
        "endLine": 69,
        "endChar": 41
      },
      "revId": "518df827125a24a1fee29db32f3205f3fb930ae5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dca38495_e2065c04",
        "filename": "src/chromiumos/tast/local/bundles/cros/crostini/mouse_perf.go",
        "patchSetId": 6
      },
      "lineNbr": 69,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2020-07-10T17:51:38Z",
      "side": 1,
      "message": "Ack for the frequency (though I\u0027m not sure if crostini can serve 1000hz input frequency).\n\nStill this needs to check the error.",
      "parentUuid": "e2e6e79a_9b6fa837",
      "range": {
        "startLine": 69,
        "startChar": 3,
        "endLine": 69,
        "endChar": 41
      },
      "revId": "518df827125a24a1fee29db32f3205f3fb930ae5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6842de03_fb90ab75",
        "filename": "src/chromiumos/tast/local/bundles/cros/crostini/mouse_perf.go",
        "patchSetId": 6
      },
      "lineNbr": 69,
      "author": {
        "id": 1324920
      },
      "writtenOn": "2020-07-13T01:39:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dca38495_e2065c04",
      "range": {
        "startLine": 69,
        "startChar": 3,
        "endLine": 69,
        "endChar": 41
      },
      "revId": "518df827125a24a1fee29db32f3205f3fb930ae5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4b079e3_0a24a723",
        "filename": "src/chromiumos/tast/local/bundles/cros/crostini/mouse_perf.go",
        "patchSetId": 6
      },
      "lineNbr": 70,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2020-07-10T17:15:11Z",
      "side": 1,
      "message": "What does this mean by multiplying a nanosecond?   Duration / time.Millisecond should return a value in millisecond.\n\nI think this should also use a standard time functions, i.e.\n  startTime :\u003d time.Now()\n  ...\n  float64(time.Now().Sub(startTime)) / float64(time.Millisecond)",
      "range": {
        "startLine": 70,
        "startChar": 33,
        "endLine": 70,
        "endChar": 58
      },
      "revId": "518df827125a24a1fee29db32f3205f3fb930ae5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88691a81_8e1a29af",
        "filename": "src/chromiumos/tast/local/bundles/cros/crostini/mouse_perf.go",
        "patchSetId": 6
      },
      "lineNbr": 70,
      "author": {
        "id": 1324920
      },
      "writtenOn": "2020-07-13T01:39:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c4b079e3_0a24a723",
      "range": {
        "startLine": 70,
        "startChar": 33,
        "endLine": 70,
        "endChar": 58
      },
      "revId": "518df827125a24a1fee29db32f3205f3fb930ae5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48b3e569_ea424c30",
        "filename": "src/chromiumos/tast/local/bundles/cros/crostini/mouse_perf.go",
        "patchSetId": 6
      },
      "lineNbr": 140,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2020-07-10T17:15:11Z",
      "side": 1,
      "message": "nit: \"stats\", \"processStats\", \"recordStats\" sound a bit too generic. Maybe I\u0027m too nervous, but keep in mind that these types/functions are shared among packages (i.e. the files in the same directory) and their names can\u0027t conflict with each other.\n\nI\u0027d recommend to:\n- use some prefix to all of them (i.e. mouseStats, processMouseStats etc)\n- or make them internal to the test case function\n- or create its own package (i.e. local/bundles/cros/crostini/mouse package) and put there",
      "revId": "518df827125a24a1fee29db32f3205f3fb930ae5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e64f7877_adbb0fb6",
        "filename": "src/chromiumos/tast/local/bundles/cros/crostini/mouse_perf.go",
        "patchSetId": 6
      },
      "lineNbr": 140,
      "author": {
        "id": 1324920
      },
      "writtenOn": "2020-07-13T01:39:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "48b3e569_ea424c30",
      "revId": "518df827125a24a1fee29db32f3205f3fb930ae5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a659347_a45fb10c",
        "filename": "src/chromiumos/tast/local/bundles/cros/crostini/mouse_perf.go",
        "patchSetId": 6
      },
      "lineNbr": 171,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2020-07-10T17:15:11Z",
      "side": 1,
      "message": "Just curious: no need to record average?",
      "revId": "518df827125a24a1fee29db32f3205f3fb930ae5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06c6a996_3baa507c",
        "filename": "src/chromiumos/tast/local/bundles/cros/crostini/mouse_perf.go",
        "patchSetId": 6
      },
      "lineNbr": 171,
      "author": {
        "id": 1324920
      },
      "writtenOn": "2020-07-13T01:39:46Z",
      "side": 1,
      "message": "indeed.\n\nthis test is mainly concerned with consistency. We send 400 events over a 400ms window, and most of those events are received within a window of roughly that duration, so average doesn\u0027t work out to be particularly interesting.\n\nWe mainly target variance: high variance in the receive times indicates that events are being bunched up or delivered inconsistently. We record the consistency of the send times in order to discount that from the inconsistency of receive. Observations on my DUT put recieve\u0027s stdev at an order of magnitude larger than send\u0027s, and its bounds at 1-6ms (as opposed to 1-1.4ms for send)",
      "parentUuid": "0a659347_a45fb10c",
      "revId": "518df827125a24a1fee29db32f3205f3fb930ae5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}