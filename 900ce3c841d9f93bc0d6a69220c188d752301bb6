{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "de568f9a_bea74141",
        "filename": "src/chromiumos/tast/local/bundles/cros/printer/test_ppds.go",
        "patchSetId": 13
      },
      "lineNbr": 42,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-11-11T04:17:34Z",
      "side": 1,
      "message": "How did you decide this number? Why is it irrelevant to the number of CPUs?",
      "range": {
        "startLine": 42,
        "startChar": 1,
        "endLine": 42,
        "endChar": 16
      },
      "revId": "900ce3c841d9f93bc0d6a69220c188d752301bb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a359fd70_88fd70ee",
        "filename": "src/chromiumos/tast/local/bundles/cros/printer/test_ppds.go",
        "patchSetId": 13
      },
      "lineNbr": 57,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-11-11T04:17:34Z",
      "side": 1,
      "message": "Can you construct this value in a test and pass it as a function argument, rather than making it global?\n\nMutable global variables are really tricky to use. Search web by [mutable global variables] for plenty of references...",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 57,
        "endChar": 25
      },
      "revId": "900ce3c841d9f93bc0d6a69220c188d752301bb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c73caae_ea7a56f3",
        "filename": "src/chromiumos/tast/local/bundles/cros/printer/test_ppds.go",
        "patchSetId": 13
      },
      "lineNbr": 83,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-11-11T04:17:34Z",
      "side": 1,
      "message": "What is this command for? Can you add a brief comment?",
      "range": {
        "startLine": 83,
        "startChar": 1,
        "endLine": 83,
        "endChar": 82
      },
      "revId": "900ce3c841d9f93bc0d6a69220c188d752301bb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7ccf80d_6de5ac3e",
        "filename": "src/chromiumos/tast/local/bundles/cros/printer/test_ppds.go",
        "patchSetId": 13
      },
      "lineNbr": 89,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-11-11T04:17:34Z",
      "side": 1,
      "message": "Is it okay to skip unmatched PPD files silently?",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 89,
        "endChar": 2
      },
      "revId": "900ce3c841d9f93bc0d6a69220c188d752301bb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19859f25_adac9f29",
        "filename": "src/chromiumos/tast/local/bundles/cros/printer/test_ppds.go",
        "patchSetId": 13
      },
      "lineNbr": 90,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-11-11T04:17:34Z",
      "side": 1,
      "message": "FindAllStrings to return results as []string.",
      "range": {
        "startLine": 90,
        "startChar": 16,
        "endLine": 90,
        "endChar": 23
      },
      "revId": "900ce3c841d9f93bc0d6a69220c188d752301bb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0fa3c272_6466d7e7",
        "filename": "src/chromiumos/tast/local/bundles/cros/printer/test_ppds.go",
        "patchSetId": 13
      },
      "lineNbr": 118,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-11-11T04:17:34Z",
      "side": 1,
      "message": "This can be done without using pipes and starting a goroutine:\n\n cmd.Stdin \u003d bytes.NewBuffer(pdf)",
      "range": {
        "startLine": 111,
        "startChar": 1,
        "endLine": 118,
        "endChar": 4
      },
      "revId": "900ce3c841d9f93bc0d6a69220c188d752301bb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4893f744_56adddca",
        "filename": "src/chromiumos/tast/local/bundles/cros/printer/test_ppds.go",
        "patchSetId": 13
      },
      "lineNbr": 128,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-11-11T04:17:34Z",
      "side": 1,
      "message": "The recommended way in Tast to wrap an error is to use errors.Wrap. It comes with better stack traces on failures.\n\n errors.Wrap(err, \"foomatic-rip\")",
      "range": {
        "startLine": 128,
        "startChar": 37,
        "endLine": 128,
        "endChar": 40
      },
      "revId": "900ce3c841d9f93bc0d6a69220c188d752301bb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4c3fbfd_f479b5ad",
        "filename": "src/chromiumos/tast/local/bundles/cros/printer/test_ppds.go",
        "patchSetId": 13
      },
      "lineNbr": 139,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-11-11T04:17:34Z",
      "side": 1,
      "message": "While this should work fine, I\u0027m afraid it\u0027s a bit fragile to use the same name \"err\" for this variable and \"err\" from buf.Close in the inner scope. I recommend naming it differently, e.g.\n\n ppd, readErr :\u003d ioutil.ReadAll(buf)",
      "range": {
        "startLine": 139,
        "startChar": 6,
        "endLine": 139,
        "endChar": 9
      },
      "revId": "900ce3c841d9f93bc0d6a69220c188d752301bb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d856e1bd_ad4faf8c",
        "filename": "src/chromiumos/tast/local/bundles/cros/printer/test_ppds.go",
        "patchSetId": 13
      },
      "lineNbr": 151,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-11-11T04:17:34Z",
      "side": 1,
      "message": "Let us clarify sending/receiving ends of channels.\n\n files \u003c-chan string\n errors chan\u003c- []fileError",
      "range": {
        "startLine": 151,
        "startChar": 46,
        "endLine": 151,
        "endChar": 89
      },
      "revId": "900ce3c841d9f93bc0d6a69220c188d752301bb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ac464f9_a29f81f9",
        "filename": "src/chromiumos/tast/local/bundles/cros/printer/test_ppds.go",
        "patchSetId": 13
      },
      "lineNbr": 158,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-11-11T04:17:34Z",
      "side": 1,
      "message": "IIUC this is len(\".gz\"). Can you define a constant and avoid this magic number?\n\n const gzExt \u003d \".gz\"\n\n if filepath.Ext(file) \u003d\u003d gzExt {\n   ...\n   file \u003d file[:len(file)-len(gzExt)]\n }",
      "range": {
        "startLine": 158,
        "startChar": 26,
        "endLine": 158,
        "endChar": 27
      },
      "revId": "900ce3c841d9f93bc0d6a69220c188d752301bb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "140eb8c7_bde6948a",
        "filename": "src/chromiumos/tast/local/bundles/cros/printer/test_ppds.go",
        "patchSetId": 13
      },
      "lineNbr": 165,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-11-11T04:17:34Z",
      "side": 1,
      "message": "style: Can you indent error flows?\nhttps://github.com/golang/go/wiki/CodeReviewComments#indent-error-flow\n\nA typical pattern is to use a closure here.\n\n for file :\u003d range files {\n   if err :\u003d func() error {\n     ppd, err :\u003d ioutil.ReadFile(...)\n     if err !\u003d nil {\n       return err\n     }\n     if filepath.Ext(file) \u003d\u003d \".gz\" {\n       ppd, err \u003d extractPPD(ctx, ppd)\n       if err !\u003d nil {\n         return err\n       }\n       file \u003d ...\n     }\n     ...\n     return nil\n   }(); err !\u003d nil {\n     errs \u003d append(errs, ...)\n   }\n }",
      "range": {
        "startLine": 156,
        "startChar": 2,
        "endLine": 165,
        "endChar": 3
      },
      "revId": "900ce3c841d9f93bc0d6a69220c188d752301bb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "180cfaa2_afeb72a4",
        "filename": "src/chromiumos/tast/local/bundles/cros/printer/test_ppds.go",
        "patchSetId": 13
      },
      "lineNbr": 189,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-11-11T04:17:34Z",
      "side": 1,
      "message": "I recommend setting the channel capacity to len(files) so that sending values to them never block.\n\n make(chan string, len(files))\n\nditto for errors.",
      "range": {
        "startLine": 189,
        "startChar": 1,
        "endLine": 189,
        "endChar": 27
      },
      "revId": "900ce3c841d9f93bc0d6a69220c188d752301bb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "edcb559e_90948bb4",
        "filename": "src/chromiumos/tast/local/bundles/cros/printer/test_ppds.go",
        "patchSetId": 13
      },
      "lineNbr": 190,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-11-11T04:17:34Z",
      "side": 1,
      "message": "Optional: I personally recommend sending fileError instead of []fileError and sending it regardless of whether a case succeeded or failed. Then the input channel and the output channel are symmetric. But I don\u0027t have strong opinion, it\u0027s up to you...",
      "range": {
        "startLine": 190,
        "startChar": 16,
        "endLine": 190,
        "endChar": 32
      },
      "revId": "900ce3c841d9f93bc0d6a69220c188d752301bb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "710ae263_3e67e31b",
        "filename": "src/chromiumos/tast/local/bundles/cros/printer/test_ppds.go",
        "patchSetId": 13
      },
      "lineNbr": 191,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-11-11T04:17:34Z",
      "side": 1,
      "message": "We don\u0027t need WaitGroup since we wait for results values over a channel anyway.",
      "range": {
        "startLine": 191,
        "startChar": 1,
        "endLine": 191,
        "endChar": 22
      },
      "revId": "900ce3c841d9f93bc0d6a69220c188d752301bb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f5093d3_d3d8320c",
        "filename": "src/chromiumos/tast/local/bundles/cros/printer/test_ppds.go",
        "patchSetId": 13
      },
      "lineNbr": 199,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-11-11T04:17:34Z",
      "side": 1,
      "message": "What\u0027s the reason of this check? How did you decide the number 100?\n\nSuch magic numbers must be explained for someone (likely not you) has to rewrite this test in the future.",
      "range": {
        "startLine": 197,
        "startChar": 1,
        "endLine": 199,
        "endChar": 2
      },
      "revId": "900ce3c841d9f93bc0d6a69220c188d752301bb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e249cc3e_ede7eacb",
        "filename": "src/chromiumos/tast/local/bundles/cros/printer/test_ppds.go",
        "patchSetId": 13
      },
      "lineNbr": 200,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-11-11T04:17:34Z",
      "side": 1,
      "message": "In general, inline comments should describe why we do it, not what it does. In this case \"ensuring n is odd\" is clear from the code, but it\u0027s less clear why we do it.\n\nPlease also make sure to include in the comment that 64 below must be a power of two.",
      "range": {
        "startLine": 200,
        "startChar": 1,
        "endLine": 200,
        "endChar": 20
      },
      "revId": "900ce3c841d9f93bc0d6a69220c188d752301bb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a0a8d25_741bf816",
        "filename": "src/chromiumos/tast/local/bundles/cros/printer/test_ppds.go",
        "patchSetId": 13
      },
      "lineNbr": 219,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-11-11T04:17:34Z",
      "side": 1,
      "message": "Please use the name \"err\" for error values only. In Go err is too famous for error values.",
      "range": {
        "startLine": 219,
        "startChar": 8,
        "endLine": 219,
        "endChar": 11
      },
      "revId": "900ce3c841d9f93bc0d6a69220c188d752301bb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}