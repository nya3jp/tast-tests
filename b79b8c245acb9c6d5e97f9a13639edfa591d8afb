{
  "comments": [
    {
      "key": {
        "uuid": "7c1db8bc_9f1aebc4",
        "filename": "src/chromiumos/tast/local/bundles/cros/security/selinux_audit_sanity.go",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2019-05-20T20:48:14Z",
      "side": 1,
      "message": "instead of this comment, please add a log message so it\u0027s clear what the test is doing, e.g.\n\n  s.Log(\"Waiting for auditd job to be running\")",
      "revId": "b79b8c245acb9c6d5e97f9a13639edfa591d8afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec1414b5_936d6060",
        "filename": "src/chromiumos/tast/local/bundles/cros/security/selinux_audit_sanity.go",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 1137124
      },
      "writtenOn": "2019-05-21T04:31:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c1db8bc_9f1aebc4",
      "revId": "b79b8c245acb9c6d5e97f9a13639edfa591d8afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07b64582_b4d61fe0",
        "filename": "src/chromiumos/tast/local/bundles/cros/security/selinux_audit_sanity.go",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2019-05-20T20:48:14Z",
      "side": 1,
      "message": "instead of all of this, can you just use ioutil.TempDir?\n\nplease also defer a delete statement so you don\u0027t leave stale files on the DUT.",
      "revId": "b79b8c245acb9c6d5e97f9a13639edfa591d8afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b0413bb_d44076d8",
        "filename": "src/chromiumos/tast/local/bundles/cros/security/selinux_audit_sanity.go",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 1137124
      },
      "writtenOn": "2019-05-21T04:31:46Z",
      "side": 1,
      "message": "the directory name must be cros_selinux_audit_sanity_test (consistent with the policy) under tmpfs to trigger an audit event for this test-only (but not adding other audit spams when other tests are creating tmpfiles)",
      "parentUuid": "07b64582_b4d61fe0",
      "revId": "b79b8c245acb9c6d5e97f9a13639edfa591d8afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db0ab65a_33823186",
        "filename": "src/chromiumos/tast/local/bundles/cros/security/selinux_audit_sanity.go",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-05-21T06:47:57Z",
      "side": 1,
      "message": "Should it be a dir directly under tmpfs root? Does indirect dir work, such as /tmp/tmpdirfoo.12345/cros_selinux_audit_sanity_test?\n\n td, err :\u003d ioutil.TempDir(\"/tmp\", \"tast.security.SELinuxAuditSanity.\")\n if err !\u003d nil { ... }\n if err :\u003d os.Mkdir(filepath.Join(td, markerDirName), 0700); err !\u003d nil { ... }\n\nGenerally we want to avoid writing a temporary file to a fixed path to avoid possible interference between repeated tests.\n\nThat said, if using a randomly-named dir is difficult, please leave a comment here about the constraint.",
      "parentUuid": "7b0413bb_d44076d8",
      "revId": "b79b8c245acb9c6d5e97f9a13639edfa591d8afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf4e8a1b_5b68225b",
        "filename": "src/chromiumos/tast/local/bundles/cros/security/selinux_audit_sanity.go",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 1137124
      },
      "writtenOn": "2019-05-21T07:06:01Z",
      "side": 1,
      "message": "indirect work as long as the parent inherits from tmpfs.",
      "parentUuid": "db0ab65a_33823186",
      "revId": "b79b8c245acb9c6d5e97f9a13639edfa591d8afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61c6b9ea_75760cc5",
        "filename": "src/chromiumos/tast/local/bundles/cros/security/selinux_audit_sanity.go",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2019-05-20T20:48:14Z",
      "side": 1,
      "message": "nit: please move this down below the error check\n\nalso, so you don\u0027t need to load all of this into memory, how about making the command write to a pipe and using bufio.Scanner? then you probably also don\u0027t need a regexp, as i assume you can just use strings.Contains instead.",
      "revId": "b79b8c245acb9c6d5e97f9a13639edfa591d8afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d61ed97a_b8570d65",
        "filename": "src/chromiumos/tast/local/bundles/cros/security/selinux_audit_sanity.go",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-05-21T04:15:04Z",
      "side": 1,
      "message": "Also, can we just use strings.Contains(string(content), fileName) instead of regexp?",
      "range": {
        "startLine": 55,
        "startChar": 44,
        "endLine": 55,
        "endChar": 52
      },
      "revId": "b79b8c245acb9c6d5e97f9a13639edfa591d8afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63965cb9_42dcacb4",
        "filename": "src/chromiumos/tast/local/bundles/cros/security/selinux_audit_sanity.go",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 1137124
      },
      "writtenOn": "2019-05-21T04:31:46Z",
      "side": 1,
      "message": "Done with move.\n\nit\u0027s not loading everything. --grep already greped by journalctl. see below on why contains check is still needed.",
      "parentUuid": "61c6b9ea_75760cc5",
      "revId": "b79b8c245acb9c6d5e97f9a13639edfa591d8afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5552a26c_82bf3d24",
        "filename": "src/chromiumos/tast/local/bundles/cros/security/selinux_audit_sanity.go",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 1137124
      },
      "writtenOn": "2019-05-21T04:31:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d61ed97a_b8570d65",
      "range": {
        "startLine": 55,
        "startChar": 44,
        "endLine": 55,
        "endChar": 52
      },
      "revId": "b79b8c245acb9c6d5e97f9a13639edfa591d8afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a4872a9_cb389dd3",
        "filename": "src/chromiumos/tast/local/bundles/cros/security/selinux_audit_sanity.go",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2019-05-20T20:48:14Z",
      "side": 1,
      "message": "this could result in an extremely long error message. with the above scanning suggestion, i think it should be easy to just include the offending line here.",
      "revId": "b79b8c245acb9c6d5e97f9a13639edfa591d8afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe96e244_a7b80d34",
        "filename": "src/chromiumos/tast/local/bundles/cros/security/selinux_audit_sanity.go",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 1137124
      },
      "writtenOn": "2019-05-21T04:31:46Z",
      "side": 1,
      "message": "actually content is already the offending line(s) since --grep in journalctl command line.\nthe regexp is just because journalctl output is not empty but have a line says no result found even it\u0027s not hit.",
      "parentUuid": "5a4872a9_cb389dd3",
      "revId": "b79b8c245acb9c6d5e97f9a13639edfa591d8afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97e2967a_a7874eca",
        "filename": "src/chromiumos/tast/local/bundles/cros/security/selinux_audit_sanity.go",
        "patchSetId": 4
      },
      "lineNbr": 63,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2019-05-20T20:48:14Z",
      "side": 1,
      "message": "it doesn\u0027t look like you\u0027re using this variable.\n\ninstead of shelling out to grep, how about just adding a helper function that iterates over an io.Reader using bufio.NewScanner as suggested above? then you can you that both to check the pipe connected to the journalctl command above and to check this file (after using os.Open). e.g.\n\n  // Returns an empty string if the line was not found.\n  findFirstMatchedLine :\u003d func(r io.Reader, re *regexp.Regexp) (string, error) {\n      ...",
      "range": {
        "startLine": 63,
        "startChar": 1,
        "endLine": 63,
        "endChar": 8
      },
      "revId": "b79b8c245acb9c6d5e97f9a13639edfa591d8afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a77c96f_44dbe42f",
        "filename": "src/chromiumos/tast/local/bundles/cros/security/selinux_audit_sanity.go",
        "patchSetId": 4
      },
      "lineNbr": 63,
      "author": {
        "id": 1137124
      },
      "writtenOn": "2019-05-21T04:31:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "97e2967a_a7874eca",
      "range": {
        "startLine": 63,
        "startChar": 1,
        "endLine": 63,
        "endChar": 8
      },
      "revId": "b79b8c245acb9c6d5e97f9a13639edfa591d8afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}