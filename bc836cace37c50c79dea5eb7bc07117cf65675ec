{
  "comments": [
    {
      "key": {
        "uuid": "e50dcfca_8be7f8e2",
        "filename": "src/chromiumos/tast/common/network/iw/runner.go",
        "patchSetId": 1
      },
      "lineNbr": 518,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2020-03-25T06:45:32Z",
      "side": 1,
      "message": "So. m[0] should be either \"managed\" or \"monitor\", right?\nIf so, Could you update the regex pattern at L513 to ensure it?\n\n`\\s*type (managed|monitor)`\n\nIf not, could you explicitly comment about there\u0027s outliers in the type/enum constant definition?",
      "revId": "bc836cace37c50c79dea5eb7bc07117cf65675ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a3958e3_c5a635da",
        "filename": "src/chromiumos/tast/common/network/iw/runner.go",
        "patchSetId": 1
      },
      "lineNbr": 518,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2020-03-25T18:36:53Z",
      "side": 1,
      "message": "I was wondering the same actually, but ended up deciding not to mention it.\n\nIf we do that, we should at least make the logging clearer about why we rejected the ifType.\n\nHere\u0027s the available types:\nhttps://git.kernel.org/pub/scm/linux/kernel/git/jberg/iw.git/tree/util.c?h\u003dv5.4#n124\n\nwe don\u0027t expect any of the others, I don\u0027t think, except maybe \"AP\" (a \"managed\" interface will convert to \"AP\" once it\u0027s actually running an AP daemon) and possibly the \"P2P*\" [1] types, but it wouldn\u0027t hurt to add them. It *would* hurt if we start failing tests because we start to have unexpected (but otherwise unrelated and non-harmful) interfaces showing up, so we should try to be forgiving/inclusive if we can.\n\n[1] Old versions of the mwifiex driver would actually instantiate P2P devices by default, IIRC, and we would just ignore them. That version of the driver has been retired now, but it\u0027s still a reminder of a possible pitfall.",
      "parentUuid": "e50dcfca_8be7f8e2",
      "revId": "bc836cace37c50c79dea5eb7bc07117cf65675ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3d7875f_4ed79080",
        "filename": "src/chromiumos/tast/common/network/iw/runner.go",
        "patchSetId": 1
      },
      "lineNbr": 518,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2020-03-26T01:06:04Z",
      "side": 1,
      "message": "Thank you for explanation.\n\nCould you clarify that there can be more types, but these are only expected ones in our use cases clearly in the IfType type/enum definition above?\nWhen I read, it was only values the type can take, so I made the recommendation, but there\u0027re more actually.",
      "parentUuid": "2a3958e3_c5a635da",
      "revId": "bc836cace37c50c79dea5eb7bc07117cf65675ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e419799e_42f02d82",
        "filename": "src/chromiumos/tast/common/network/iw/runner.go",
        "patchSetId": 1
      },
      "lineNbr": 518,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-03-26T01:29:51Z",
      "side": 1,
      "message": "Thanks for the suggestion and Brian\u0027s explanation. Comment added before the enum values.",
      "parentUuid": "b3d7875f_4ed79080",
      "revId": "bc836cace37c50c79dea5eb7bc07117cf65675ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cfe49f2b_b1a60091",
        "filename": "src/chromiumos/tast/common/network/iw/runner.go",
        "patchSetId": 1
      },
      "lineNbr": 518,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2020-03-26T09:41:01Z",
      "side": 1,
      "message": "Hidehiko, so in Golang, it does not have a strict enum type, right? Any string can convert to a string enum type. Based on this, what\u0027s the purpose of defining a string enum type?",
      "parentUuid": "e419799e_42f02d82",
      "revId": "bc836cace37c50c79dea5eb7bc07117cf65675ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa7a8068_e49da374",
        "filename": "src/chromiumos/tast/common/network/iw/runner.go",
        "patchSetId": 1
      },
      "lineNbr": 518,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2020-03-26T15:32:05Z",
      "side": 1,
      "message": "Could you clarify what \"strict\" did you mean in detail?\n\nIf we write `type Foo string`, any string value can be converted to Foo, as you said. Though, there\u0027s some benefit still.\n\n1) Type checking\nstring and Foo are different type. So:\n\nfunc Bar(foo Foo) { ... }\n\nfunc main() {\n  Bar(\"abc\")\n}\n\nwill cause compile error, since string literal passed to Bar is not typed Foo.\n\n2) Adding method.\nWe can add a new method for Foo. E.g.: https://play.golang.org/p/7NmCwb_Oz-E",
      "parentUuid": "cfe49f2b_b1a60091",
      "revId": "bc836cace37c50c79dea5eb7bc07117cf65675ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "33e662b6_7e3b913c",
        "filename": "src/chromiumos/tast/common/network/iw/runner.go",
        "patchSetId": 1
      },
      "lineNbr": 518,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2020-03-26T17:13:51Z",
      "side": 1,
      "message": "Maybe getting toward what Dean wants: we could have IfType be a non-string enum, and just supply conversion functions (that would return errors for unrecognized strings). I don\u0027t have strong opinions though.",
      "parentUuid": "aa7a8068_e49da374",
      "revId": "bc836cace37c50c79dea5eb7bc07117cf65675ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7bca0695_79ee9732",
        "filename": "src/chromiumos/tast/common/network/iw/runner.go",
        "patchSetId": 1
      },
      "lineNbr": 518,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2020-03-27T03:53:02Z",
      "side": 1,
      "message": "Hidehiko, \nFor strict enum type, I mean like C++ enum class. The variable of the enum type can hold values within the enum definition. \n\nFor type checking that\u0027s what I\u0027m confused. I just tried your example on play.golang.org. It works\nhttps://play.golang.org/p/KXmIfGB4Ljr\n\nI don\u0027t have strong opinion for strict type checking. I\u0027m just curious if the enum pattern:\n\ntype Foo string\nconst (\n\tFooValue1 Foo \u003d \"f1\"\n\tFooValue2 Foo \u003d \"f2\"\n)\n\ncan really confine the value of Foo variable (answer is no). For me it is looks like just a contract among programmers.\n\nBrian,\nIf we want an enum type which can hold only the predefined values, we have to make it a struct with methods like Set(), Value() and String(). However, this might be overkill. We have more than a few string enum in our code base now.",
      "parentUuid": "33e662b6_7e3b913c",
      "revId": "bc836cace37c50c79dea5eb7bc07117cf65675ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}