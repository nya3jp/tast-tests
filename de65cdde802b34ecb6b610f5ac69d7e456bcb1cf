{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c1ff3e01_87d747ef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1401350
      },
      "writtenOn": "2021-05-04T13:50:15Z",
      "side": 1,
      "message": "Mohamed as the owner of the original functionality with the old UI library.\nOleh as Tast reviewer.",
      "revId": "de65cdde802b34ecb6b610f5ac69d7e456bcb1cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3998704c_a6611fb1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2021-05-04T15:14:01Z",
      "side": 1,
      "message": "I am against storing context inside struct, at least because it hides places where context is used. Check documentation:\nhttps://golang.org/pkg/context/\n\n```\nDo not store Contexts inside a struct type; instead, pass a Context explicitly to each function that needs it. The Context should be the first parameter, typically named ctx:\n```\n\nOf course there are some exceptions where we cannot avoid that, but I think this is not such case.\n\n\nWDYT about using functional options pattern instead?\nhttps://www.sohamkamani.com/golang/options-pattern/\n\nWe also can think about supporting multiple nodes verification when there will be such use case.",
      "revId": "de65cdde802b34ecb6b610f5ac69d7e456bcb1cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9d8fa604_73bf5466",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1401350
      },
      "writtenOn": "2021-05-05T11:25:51Z",
      "side": 1,
      "message": "I have no problem adding ctx to SelectNode.\n\nUsing functional options pattern would result in a longer call, e.g:\n\u003e  if err :\u003d policyutil.SettingsPage(ctx, cr, \"chrome://settings/passwords\").\n\u003e  \tSelectNode(nodewith.\n\u003e  \t\tName(\"Offer to save passwords\").\n\u003e  \t\tRole(role.ToggleButton)).\n\u003e  \tVerify(\n\u003e  \t\tpolicyutil.Restriction(param.wantRestriction),\n\u003e  \t\tpolicyutil.Checked(param.wantChecked),\n\u003e\t); err !\u003d nil {\n\u003e  \ts.Error(\"Unexpected settings state: \", err)\n\u003e  }\nSo policyutil would there 3 times.",
      "parentUuid": "3998704c_a6611fb1",
      "revId": "de65cdde802b34ecb6b610f5ac69d7e456bcb1cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e6b98de_ec93562f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2021-05-06T10:11:11Z",
      "side": 1,
      "message": "I have another idea: extend uiauto functionality instead. It\u0027s pretty common that once you found Node you what it to match specific conditions.\n\nHere is how it can be used (MatchSettingsPage takes list of Match rules from uiauto):\n\n```\nif err :\u003d policyutil.MatchSettingsPage(\n    ctx, cr, \"chrome://settings/passwords\",\n    uiauto.Match(\n        nodewith\n            .Name(\"Offer to save passwords\")\n            .Role(role.ToggleButton),   // search\n        nodematchwith\n            .Restriction(param.wantRestriction)\n            .Checked(param.wantChecked) // match target\n    ),\n    uiauto.Match(\n        nodewith\n            .Name(\"Another match name node\")\n            .Role(role.ToggleButton),   // search\n        nodematchwith\n            .Checked(param.wantChecked) // match target\n    )\n); err !\u003d nil {\n   ...\n}\n```\n\nHuge benefit is that we will have less repetitive code across tests.",
      "parentUuid": "9d8fa604_73bf5466",
      "revId": "de65cdde802b34ecb6b610f5ac69d7e456bcb1cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}