{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "28411a5a_422de09d",
        "filename": "src/chromiumos/tast/local/benchmark/benchmark.go",
        "patchSetId": 5
      },
      "lineNbr": 60,
      "author": {
        "id": 1459973
      },
      "writtenOn": "2021-11-03T13:47:18Z",
      "side": 1,
      "message": "looks like some lines go over 80 characters. Please wrap them.",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 60,
        "endChar": 109
      },
      "revId": "d6c75a297fbfb3e0c82f140224a3cd772ab2a2fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "918fab46_603b6eb8",
        "filename": "src/chromiumos/tast/local/benchmark/benchmark.go",
        "patchSetId": 5
      },
      "lineNbr": 60,
      "author": {
        "id": 1001646
      },
      "writtenOn": "2021-11-03T14:16:04Z",
      "side": 1,
      "message": "Done.\n\nDo we have some style guide for when/how to wrap when a line goes over 80 characters? It seems to me that we don\u0027t have a explicit line length limit for golang. I see that some existing code have comments/code over 80 characters in one line.",
      "parentUuid": "28411a5a_422de09d",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 60,
        "endChar": 109
      },
      "revId": "d6c75a297fbfb3e0c82f140224a3cd772ab2a2fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce958148_f7f280fc",
        "filename": "src/chromiumos/tast/local/benchmark/benchmark.go",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 1459973
      },
      "writtenOn": "2021-11-03T13:47:18Z",
      "side": 1,
      "message": "This and ExtraArgs options are not used in the implemented test. Are there more tests coming that will use those options?",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 94,
        "endChar": 1
      },
      "revId": "d6c75a297fbfb3e0c82f140224a3cd772ab2a2fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5bcd254c_aad05750",
        "filename": "src/chromiumos/tast/local/benchmark/benchmark.go",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 1001646
      },
      "writtenOn": "2021-11-03T14:16:04Z",
      "side": 1,
      "message": "Not at the moment for the project I\u0027m currently working on. Google Benchmark [1] is like Gtest and is a benchmark library widely used within google. These options are added for posterity since I foresee they will be needed some day. We can also remove them now if that\u0027s what we normally do.\n\n[1]: https://github.com/google/benchmark",
      "parentUuid": "ce958148_f7f280fc",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 94,
        "endChar": 1
      },
      "revId": "d6c75a297fbfb3e0c82f140224a3cd772ab2a2fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0be33d76_a66dd38a",
        "filename": "src/chromiumos/tast/local/bundles/cros/camera/hdrnet_processor_benchmark.go",
        "patchSetId": 5
      },
      "lineNbr": 33,
      "author": {
        "id": 1459973
      },
      "writtenOn": "2021-11-03T13:47:18Z",
      "side": 1,
      "message": "is that binary available on every image?\nShouldn\u0027t that be a software dependency?",
      "range": {
        "startLine": 33,
        "startChar": 1,
        "endLine": 33,
        "endChar": 42
      },
      "revId": "d6c75a297fbfb3e0c82f140224a3cd772ab2a2fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af3d7a4a_8810e3bb",
        "filename": "src/chromiumos/tast/local/bundles/cros/camera/hdrnet_processor_benchmark.go",
        "patchSetId": 5
      },
      "lineNbr": 33,
      "author": {
        "id": 1001646
      },
      "writtenOn": "2021-11-03T14:16:04Z",
      "side": 1,
      "message": "It should be available on the boards specified in the hwdep.Platform() HardwareDeps. If not then it\u0027s a bug and we should fix it in the image.",
      "parentUuid": "0be33d76_a66dd38a",
      "range": {
        "startLine": 33,
        "startChar": 1,
        "endLine": 33,
        "endChar": 42
      },
      "revId": "d6c75a297fbfb3e0c82f140224a3cd772ab2a2fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd4dbb30_4b362bb8",
        "filename": "src/chromiumos/tast/local/bundles/cros/camera/hdrnet_processor_benchmark.go",
        "patchSetId": 5
      },
      "lineNbr": 66,
      "author": {
        "id": 1459973
      },
      "writtenOn": "2021-11-03T13:47:18Z",
      "side": 1,
      "message": "will there be more tests using that parsing logic?\n\nIt does not fit the level of abstraction in the test body. \nThere is nice beginning with \"benchmark.New()\" and then parsing values with code exposed here. Maybe at least it could be moved to the function so the test reads:\n1. run benchmark\n2. parse results\n3. save perf values\n\nWDYT?",
      "range": {
        "startLine": 46,
        "startChar": 0,
        "endLine": 66,
        "endChar": 2
      },
      "revId": "d6c75a297fbfb3e0c82f140224a3cd772ab2a2fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6bed3338_5c7e3102",
        "filename": "src/chromiumos/tast/local/bundles/cros/camera/hdrnet_processor_benchmark.go",
        "patchSetId": 5
      },
      "lineNbr": 66,
      "author": {
        "id": 1001646
      },
      "writtenOn": "2021-11-03T14:16:04Z",
      "side": 1,
      "message": "The names can be different in different benchmark implementations. The format of the name is like: BM_\u003cbenchmark_function_name\u003e/\u003cbenchmark_arg1\u003e/\u003cbenchmark_arg2\u003e/.../. In our case here the args happens to correspond to the buffer size, so we can format it as \u003cwidth\u003ex\u003cheight\u003e. Other benchmarks may have different args and they\u0027d want to format the metrics names differently.\n\nAlso in this benchmark we\u0027re interested in the CpuTime and RealTime only. Other benchmark can have other output that they want to write into the perf values.",
      "parentUuid": "bd4dbb30_4b362bb8",
      "range": {
        "startLine": 46,
        "startChar": 0,
        "endLine": 66,
        "endChar": 2
      },
      "revId": "d6c75a297fbfb3e0c82f140224a3cd772ab2a2fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}