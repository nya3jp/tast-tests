{
  "comments": [
    {
      "key": {
        "uuid": "f27322fc_923052ab",
        "filename": "src/chromiumos/tast/common/wifi/security/wpa/config.go",
        "patchSetId": 13
      },
      "lineNbr": 131,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2020-05-06T23:44:32Z",
      "side": 1,
      "message": "nit: int() is not necessary (cf. https://play.golang.org/p/_J0lwieJFRI)",
      "range": {
        "startLine": 131,
        "startChar": 42,
        "endLine": 131,
        "endChar": 45
      },
      "revId": "d20202626d6984c715aa84fa28d30e6c75ec3a7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab04907b_d94fc009",
        "filename": "src/chromiumos/tast/common/wifi/security/wpa/config.go",
        "patchSetId": 13
      },
      "lineNbr": 181,
      "author": {
        "id": 1117055
      },
      "writtenOn": "2020-05-06T18:41:30Z",
      "side": 1,
      "message": "Is this not equivalent to\n\n strings.Join(ciphers, \" \")\n\nsince Cipher is a type alias of string?",
      "range": {
        "startLine": 171,
        "startChar": 0,
        "endLine": 181,
        "endChar": 1
      },
      "revId": "d20202626d6984c715aa84fa28d30e6c75ec3a7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9581edb_a56d61a8",
        "filename": "src/chromiumos/tast/common/wifi/security/wpa/config.go",
        "patchSetId": 13
      },
      "lineNbr": 181,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2020-05-06T23:44:32Z",
      "side": 1,
      "message": "I don\u0027t think so; Cipher is not a type alias but a new type, strings.Join won\u0027t work (https://play.golang.org/p/oVZZ-HZ1xMU)",
      "parentUuid": "ab04907b_d94fc009",
      "range": {
        "startLine": 171,
        "startChar": 0,
        "endLine": 181,
        "endChar": 1
      },
      "revId": "d20202626d6984c715aa84fa28d30e6c75ec3a7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8cbd3ef1_9b1a1c4e",
        "filename": "src/chromiumos/tast/common/wifi/security/wpa/config.go",
        "patchSetId": 13
      },
      "lineNbr": 181,
      "author": {
        "id": 1117055
      },
      "writtenOn": "2020-05-07T00:54:05Z",
      "side": 1,
      "message": "unfortunate. It would be nice not to have to reimplement this.\n\n(For reference, the reason is not actually that Cipher is considered a distinct type for type-checking purposes, but that []Cipher\u0027s \"underlying type\" is just its slice type, and the Cipher\u003c-\u003estring equivalence doesn\u0027t affect that calculation because it is not considered recursively. So golang just compares []Cipher and []string, decides they are different types, and thus does not allow []Cipher to be used for []string arguments. see https://play.golang.org/p/BmvPg_Cn1E6 for an instance of a type alias being substituted for its underlying type normally.)",
      "parentUuid": "e9581edb_a56d61a8",
      "range": {
        "startLine": 171,
        "startChar": 0,
        "endLine": 181,
        "endChar": 1
      },
      "revId": "d20202626d6984c715aa84fa28d30e6c75ec3a7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9512df44_13fc551d",
        "filename": "src/chromiumos/tast/common/wifi/security/wpa/config.go",
        "patchSetId": 13
      },
      "lineNbr": 181,
      "author": {
        "id": 1117055
      },
      "writtenOn": "2020-05-07T00:59:34Z",
      "side": 1,
      "message": "/also this is why it\u0027s normal to do bitwise operations on declared enum types, like we do here in the definitions of ModeMixed and FTModeMixed.",
      "parentUuid": "8cbd3ef1_9b1a1c4e",
      "range": {
        "startLine": 171,
        "startChar": 0,
        "endLine": 181,
        "endChar": 1
      },
      "revId": "d20202626d6984c715aa84fa28d30e6c75ec3a7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}