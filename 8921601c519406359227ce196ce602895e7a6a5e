{
  "comments": [
    {
      "key": {
        "uuid": "69d3afd3_a060d4dd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1273836
      },
      "writtenOn": "2019-06-19T04:31:14Z",
      "side": 1,
      "message": "Hmm, I don\u0027t get the point about this. Which case do you mean here?",
      "range": {
        "startLine": 19,
        "startChar": 45,
        "endLine": 20,
        "endChar": 54
      },
      "revId": "8921601c519406359227ce196ce602895e7a6a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76766997_0fd31174",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1288602
      },
      "writtenOn": "2019-06-19T07:48:01Z",
      "side": 1,
      "message": "IMHO it might not make sense for SetUpBenchmark to return a context. We might already need to create a shorter context earlier for other purposes such as restarting the UI job.\n\nSetUpBenchmark will make sure to leave enough time internally to clean up if it fails. But in general, clean up and leaving enough time for clean up, should be managed by the testcase that calls this function.",
      "parentUuid": "69d3afd3_a060d4dd",
      "range": {
        "startLine": 19,
        "startChar": 45,
        "endLine": 20,
        "endChar": 54
      },
      "revId": "8921601c519406359227ce196ce602895e7a6a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e4d5516_f3e4305f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1273836
      },
      "writtenOn": "2019-06-20T02:31:04Z",
      "side": 1,
      "message": "\u003e But in general, clean up and leaving enough time for clean up, should be managed by the testcase that calls this function.\n\nHmm, the SetUpBenchmark only knows how long cleanup time is needed, doesn\u0027t it? So, I think |cleanupTime| should be defined inside of SetupBenchmark. If so, it\u0027d make sense to return a context.\n\nWDYT?",
      "parentUuid": "76766997_0fd31174",
      "range": {
        "startLine": 19,
        "startChar": 45,
        "endLine": 20,
        "endChar": 54
      },
      "revId": "8921601c519406359227ce196ce602895e7a6a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "562d982d_df911e34",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1288602
      },
      "writtenOn": "2019-06-20T03:01:54Z",
      "side": 1,
      "message": "Cleaning up the benchmark doesn\u0027t need that much time. And I think the context will only be used for logging anyway. The problem is that I want to avoid each function shorting the context even more. I\u0027ve seen cases where the context is shortened multiple times, so the test would timeout almost immediately without having done anything yet.\n\nI think it makes more sense for \u0027setup\u0027 functions to return a cleanup function that takes a context. So the test can create a shorter context once, and use the longer one for all cleanup operations.",
      "parentUuid": "1e4d5516_f3e4305f",
      "range": {
        "startLine": 19,
        "startChar": 45,
        "endLine": 20,
        "endChar": 54
      },
      "revId": "8921601c519406359227ce196ce602895e7a6a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f996507_4be18c48",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2019-06-20T06:31:44Z",
      "side": 1,
      "message": "There are pros and cons returning shortCtx for SetUpBenchmark().\n\nPros is that test code don\u0027t need to aware how long a clean-up takes.\nCons is that test should run other long running tasks (like command execution) with shortCtx.\n\nAs long as we are going to split SetUpBenchmark() from MeasureProcessCPU(), we assume each test runs SetUpBenchmark() only once. I would prefer SetUpBenchmark() returns shortCtx.",
      "parentUuid": "562d982d_df911e34",
      "range": {
        "startLine": 19,
        "startChar": 45,
        "endLine": 20,
        "endChar": 54
      },
      "revId": "8921601c519406359227ce196ce602895e7a6a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "676db128_d0947c3d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1288602
      },
      "writtenOn": "2019-06-20T07:53:34Z",
      "side": 1,
      "message": "Personally I prefer the test creating a single shorter context for all non-cleanup operations.\n\nE.g. looking at: https://chromium-review.googlesource.com/c/chromiumos/platform/tast-tests/+/1668868/2/src/chromiumos/tast/local/bundles/cros/video/decode/accel_video.go\n\nWe first create a shorter context, and use that for shutting down the UI, setting up benchmark mode and waiting for the CPU to become idle. The alternative is having each function that needs cleanup return a shorter context? In general cleanup should be really fast (\u003c second). If we really have cleanup operations that are so heavy they take more than 5-10s, we can always revisit this.\n\nIMHO this is not the responsibility of the setup function, but of the testcase.",
      "parentUuid": "6f996507_4be18c48",
      "range": {
        "startLine": 19,
        "startChar": 45,
        "endLine": 20,
        "endChar": 54
      },
      "revId": "8921601c519406359227ce196ce602895e7a6a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "baf0574b_d7c5951e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2019-06-20T09:37:51Z",
      "side": 1,
      "message": "In practice, we can ask test (user) to reserve some time for clean-ups.\nHowever, I still think it should be function\u0027s responsibility to reserve a certain period of time for its cleanup action. For SetUpBenchmark, we may just leave a short time, say one second, for clean-up.\n\ncleanUpA, shortCtxA :\u003d SetUpA(ctx, ...)\ndefer cleanUpA()\ncleanUpB, shortCtxB :\u003d SetUpB(shortCtxA, ...)\ndefer cleanUpB()\n// do something with shortCtxB.\n\nHidehiko, what do you think?",
      "parentUuid": "676db128_d0947c3d",
      "range": {
        "startLine": 19,
        "startChar": 45,
        "endLine": 20,
        "endChar": 54
      },
      "revId": "8921601c519406359227ce196ce602895e7a6a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47df132b_086c7ba5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2019-06-20T16:04:25Z",
      "side": 1,
      "message": "Strictly speaking, I don\u0027t think neither testside nor SetUp function knows precisely how much time is needed for tearing down, because both setup and test main scenario could do arbitrary things so that teardown task would depend on the situation.\n\nIn the sense, I don\u0027t have very strong opinion from that perspective. I think securing some time in test code (i.e. David\u0027s approach) is relatively often seen approach in Tast, though.\n\nBTW, stepping back, we do not much take care of de-initialization.\nhttps://chromium.googlesource.com/chromiumos/platform/tast/+/HEAD/docs/writing_tests.md#startup-and-shutdown\nInstead, setup needs to take care about the situation more often than usual testing framework, IMHO.\nThe core concept here is;\n- Any previous test could fail, and there is no guarantee that all the setup is properly cleaned (e.g., timed out).\n- In some cases, a test can reuse some environment set up by another test ran previously. It\u0027s better for whole test run performance. E.g., we share the logged-in Chrome across tests by precondition.\n- In some cases, leaving the test set up sometimes help to diagnose failures. E.g., we take screenshot in case of failure after test completion.",
      "parentUuid": "baf0574b_d7c5951e",
      "range": {
        "startLine": 19,
        "startChar": 45,
        "endLine": 20,
        "endChar": 54
      },
      "revId": "8921601c519406359227ce196ce602895e7a6a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f56a35a1_ff909f65",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1288602
      },
      "writtenOn": "2019-06-21T00:42:04Z",
      "side": 1,
      "message": "Thanks for all the helpful feedback! I\u0027ve thought about it a lot, and still prefer the responsibility to lie with the testcase, rather than the setup method:\n- I find the example code with shortCtxA and shortCtxB not very readable. You could give them names like shortCtx and shorterCtx, but let\u0027s not do that as it makes the code hard to read, and it\u0027s not clear anymore which context should be used. Even if they have names such as teardownBenchmarkCtx and cleanupUICtx it\u0027s not clear what to use anymore.\n- The flow of the code is much easier to follow if we create a shorter context once for all setup.\n- Cleanup time is pretty neglectable anyway. At least now it\u0027s immediately clear from the test case how much time their will be reserved for cleanup, and how much time there will be left for running the test.",
      "parentUuid": "47df132b_086c7ba5",
      "range": {
        "startLine": 19,
        "startChar": 45,
        "endLine": 20,
        "endChar": 54
      },
      "revId": "8921601c519406359227ce196ce602895e7a6a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a055852d_80bca874",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2019-06-20T09:37:51Z",
      "side": 1,
      "message": "DisableCPUFrequencyScaling and DisableThermalThrottling are made private,",
      "range": {
        "startLine": 22,
        "startChar": 2,
        "endLine": 22,
        "endChar": 28
      },
      "revId": "8921601c519406359227ce196ce602895e7a6a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ffea8d79_367179db",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1288602
      },
      "writtenOn": "2019-06-21T00:42:04Z",
      "side": 1,
      "message": "Adapted, also removed the part about improving the logic, as it\u0027s no longer true.",
      "parentUuid": "a055852d_80bca874",
      "range": {
        "startLine": 22,
        "startChar": 2,
        "endLine": 22,
        "endChar": 28
      },
      "revId": "8921601c519406359227ce196ce602895e7a6a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7cd178ee_1ea3068d",
        "filename": "src/chromiumos/tast/local/bundles/cros/camera/encode_accel_jpeg_perf.go",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1273836
      },
      "writtenOn": "2019-06-19T04:31:14Z",
      "side": 1,
      "message": "nit: this undo function is called \"cleanupBenchmark\" in some test cases. Why not use same name across test cases?\nsame for others.",
      "range": {
        "startLine": 55,
        "startChar": 1,
        "endLine": 55,
        "endChar": 18
      },
      "revId": "8921601c519406359227ce196ce602895e7a6a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b4c539b_6cef0b1b",
        "filename": "src/chromiumos/tast/local/bundles/cros/camera/encode_accel_jpeg_perf.go",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1288602
      },
      "writtenOn": "2019-06-19T07:48:01Z",
      "side": 1,
      "message": "I was suggested to name this function \u0027tearDownBenchmark\u0027, which is fine by me. I missed one occurrence, but they should all have been adapted now.",
      "parentUuid": "7cd178ee_1ea3068d",
      "range": {
        "startLine": 55,
        "startChar": 1,
        "endLine": 55,
        "endChar": 18
      },
      "revId": "8921601c519406359227ce196ce602895e7a6a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0d65af5_62a28663",
        "filename": "src/chromiumos/tast/local/bundles/cros/camera/encode_accel_jpeg_perf.go",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1273836
      },
      "writtenOn": "2019-06-20T02:31:04Z",
      "side": 1,
      "message": "Thanks. Both \u0027cleanupBenchmark\u0027 and \u0027tearDownBenchmark\u0027 are fine as long as every test uses the same name.",
      "parentUuid": "5b4c539b_6cef0b1b",
      "range": {
        "startLine": 55,
        "startChar": 1,
        "endLine": 55,
        "endChar": 18
      },
      "revId": "8921601c519406359227ce196ce602895e7a6a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a00129f_936551cf",
        "filename": "src/chromiumos/tast/local/bundles/cros/video/encode/accel_video.go",
        "patchSetId": 2
      },
      "lineNbr": 145,
      "author": {
        "id": 1273836
      },
      "writtenOn": "2019-06-19T04:31:14Z",
      "side": 1,
      "message": "+akahuang@, FYI",
      "range": {
        "startLine": 145,
        "startChar": 11,
        "endLine": 145,
        "endChar": 19
      },
      "revId": "8921601c519406359227ce196ce602895e7a6a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ee3d323_db6f0dc5",
        "filename": "src/chromiumos/tast/local/bundles/cros/video/encode/accel_video.go",
        "patchSetId": 2
      },
      "lineNbr": 329,
      "author": {
        "id": 1273836
      },
      "writtenOn": "2019-06-19T04:31:14Z",
      "side": 1,
      "message": "How about having this value as a constant? MeasureProcessCPU in cpu.go does so.",
      "range": {
        "startLine": 329,
        "startChar": 37,
        "endLine": 329,
        "endChar": 50
      },
      "revId": "8921601c519406359227ce196ce602895e7a6a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46e898e0_3d50f275",
        "filename": "src/chromiumos/tast/local/bundles/cros/video/encode/accel_video.go",
        "patchSetId": 2
      },
      "lineNbr": 329,
      "author": {
        "id": 1288602
      },
      "writtenOn": "2019-06-19T07:48:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4ee3d323_db6f0dc5",
      "range": {
        "startLine": 329,
        "startChar": 37,
        "endLine": 329,
        "endChar": 50
      },
      "revId": "8921601c519406359227ce196ce602895e7a6a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6a978cc_9978d5f0",
        "filename": "src/chromiumos/tast/local/bundles/cros/video/encode/accel_video.go",
        "patchSetId": 2
      },
      "lineNbr": 369,
      "author": {
        "id": 1273836
      },
      "writtenOn": "2019-06-19T04:31:14Z",
      "side": 1,
      "message": "ditto.\nAlso same for others.",
      "range": {
        "startLine": 369,
        "startChar": 20,
        "endLine": 369,
        "endChar": 36
      },
      "revId": "8921601c519406359227ce196ce602895e7a6a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0ebe6b6_86d78077",
        "filename": "src/chromiumos/tast/local/bundles/cros/video/encode/accel_video.go",
        "patchSetId": 2
      },
      "lineNbr": 369,
      "author": {
        "id": 1288602
      },
      "writtenOn": "2019-06-19T07:48:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b6a978cc_9978d5f0",
      "range": {
        "startLine": 369,
        "startChar": 20,
        "endLine": 369,
        "endChar": 36
      },
      "revId": "8921601c519406359227ce196ce602895e7a6a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba0cfc18_bdffb847",
        "filename": "src/chromiumos/tast/local/bundles/cros/video/mediarecorder/media_recorder.go",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 1273836
      },
      "writtenOn": "2019-06-19T04:31:14Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 150,
        "startChar": 41,
        "endLine": 150,
        "endChar": 56
      },
      "revId": "8921601c519406359227ce196ce602895e7a6a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62b22bba_f95456a3",
        "filename": "src/chromiumos/tast/local/bundles/cros/video/mediarecorder/media_recorder.go",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 1288602
      },
      "writtenOn": "2019-06-19T07:48:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ba0cfc18_bdffb847",
      "range": {
        "startLine": 150,
        "startChar": 41,
        "endLine": 150,
        "endChar": 56
      },
      "revId": "8921601c519406359227ce196ce602895e7a6a5e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}