{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d7798875_b7620a2e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1319142
      },
      "writtenOn": "2022-04-22T21:26:18Z",
      "side": 1,
      "message": "nit: No `.`\nSee https://cbea.ms/git-commit/",
      "range": {
        "startLine": 7,
        "startChar": 51,
        "endLine": 7,
        "endChar": 52
      },
      "revId": "fc1327c0eee1c5863f19be15388a6d25373c5289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1984f89f_7a338f72",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1540282
      },
      "writtenOn": "2022-04-22T21:51:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d7798875_b7620a2e",
      "range": {
        "startLine": 7,
        "startChar": 51,
        "endLine": 7,
        "endChar": 52
      },
      "revId": "fc1327c0eee1c5863f19be15388a6d25373c5289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2bd451e1_af5fed03",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1540282
      },
      "writtenOn": "2022-04-21T22:23:09Z",
      "side": 1,
      "message": "Please review adding runtime metrics for CUJ tests, thank you!",
      "revId": "fc1327c0eee1c5863f19be15388a6d25373c5289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e73a6986_57f38699",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1540282
      },
      "writtenOn": "2022-04-22T20:42:19Z",
      "side": 1,
      "message": "Please review!",
      "revId": "fc1327c0eee1c5863f19be15388a6d25373c5289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f81d3c8_83d19f49",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1319142
      },
      "writtenOn": "2022-04-22T21:26:18Z",
      "side": 1,
      "message": "Tests should be able to make multiple calls to `Run` and multiple calls to `RunFor`, all intermixed. There may not be any actual tests that do it, but I think we should still support it. You can initialize `testCyclesCount` to `0` in `StartRecording`, increment it in `Run`, and make another adjustment in `RunFor`.",
      "revId": "fc1327c0eee1c5863f19be15388a6d25373c5289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2cb8d2a_6b643184",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1540282
      },
      "writtenOn": "2022-04-22T21:51:25Z",
      "side": 1,
      "message": "If a test was calling Run / RunFor separately, wouldn\u0027t there be independent calls to Start and stop recording for each Run/RunFor call? My understanding of cycles was how many times the test was called in between start and stop, but maybe that idea itself is flawed.",
      "parentUuid": "2f81d3c8_83d19f49",
      "revId": "fc1327c0eee1c5863f19be15388a6d25373c5289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b744ab1_e3f1e656",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1319142
      },
      "writtenOn": "2022-04-22T22:15:09Z",
      "side": 1,
      "message": "`duration` is updated in this line of code in `StopRecording`:\n\tr.duration +\u003d time.Now().Sub(r.startedAtTm)\n\nNotice it uses `+\u003d`, not `\u003d`. That means multiple calls to `StartRecording` and `StopRecording` will contribute to one big `duration` value which your CL reports to TestMetrics.TotalTestRunTime. So I would define TestMetrics.TestCyclesCount consistent with that.\n\nHowever, I realize I have said one thing wrong. Do not initialize `testCyclesCount` to `0` in `StartRecording`. Just never initialize it at all. It will default to `0` when the struct is created, and I think that is exactly the behavior you need.",
      "parentUuid": "c2cb8d2a_6b643184",
      "revId": "fc1327c0eee1c5863f19be15388a6d25373c5289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "736e644d_3d41dede",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/recorder.go",
        "patchSetId": 2
      },
      "lineNbr": 732,
      "author": {
        "id": 1319142
      },
      "writtenOn": "2022-04-22T21:26:18Z",
      "side": 1,
      "message": "nit: `perf.BiggerIsBetter` because longer runtime correlates to better performance data.",
      "range": {
        "startLine": 732,
        "startChar": 13,
        "endLine": 732,
        "endChar": 33
      },
      "revId": "fc1327c0eee1c5863f19be15388a6d25373c5289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1a85e94b_d2ebbb7d",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/recorder.go",
        "patchSetId": 2
      },
      "lineNbr": 732,
      "author": {
        "id": 1540282
      },
      "writtenOn": "2022-04-22T21:51:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "736e644d_3d41dede",
      "range": {
        "startLine": 732,
        "startChar": 13,
        "endLine": 732,
        "endChar": 33
      },
      "revId": "fc1327c0eee1c5863f19be15388a6d25373c5289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}