{
  "comments": [
    {
      "key": {
        "uuid": "810a5c6b_524d1e8a",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/existing_user_login.go",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1118689
      },
      "writtenOn": "2020-07-28T03:17:27Z",
      "side": 1,
      "message": "So we don\u0027t actually click the user pod before typing the password. Can you add that to make this test a bit more explicit",
      "range": {
        "startLine": 84,
        "startChar": 17,
        "endLine": 84,
        "endChar": 37
      },
      "revId": "c08a0772dd8602bddd024d4d10d5e1a1fd4dd7b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc54b751_8b7fe9ee",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/existing_user_login.go",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1390967
      },
      "writtenOn": "2020-07-29T19:18:39Z",
      "side": 1,
      "message": "Since there\u0027s only one user at this point, clicking the user pod doesn\u0027t do anything. I was thinking to add a similar test with 2 users, so we can test clicking between the user pods and making sure we sign in to the right one. Maybe a real GAIA user and the test user, so we can verify the wrong-password case by clicking on the test account\u0027s user pod and trying to sign in, and then click on the real user pod and sign in successfully.",
      "parentUuid": "810a5c6b_524d1e8a",
      "range": {
        "startLine": 84,
        "startChar": 17,
        "endLine": 84,
        "endChar": 37
      },
      "revId": "c08a0772dd8602bddd024d4d10d5e1a1fd4dd7b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "851d0fce_7ab7c7e7",
        "filename": "src/chromiumos/tast/local/chrome/ui/login/login.go",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1358595
      },
      "writtenOn": "2020-07-28T00:00:11Z",
      "side": 1,
      "message": "Can you just put this directly in WaitForPasswordField? No need for it to be separate?\n\nAlso, can this be more specific? How do you know it this isn\u0027t the username text field for example?",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 21,
        "endChar": 1
      },
      "revId": "c08a0772dd8602bddd024d4d10d5e1a1fd4dd7b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0fa894f_49654dcb",
        "filename": "src/chromiumos/tast/local/chrome/ui/login/login.go",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1390967
      },
      "writtenOn": "2020-07-29T19:18:39Z",
      "side": 1,
      "message": "Done, also made it more specific by checking the name attribute. The password field\u0027s name attribute includes the username, so the new check should be useful for future tests that have multiple user pods on the login screen as well.",
      "parentUuid": "851d0fce_7ab7c7e7",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 21,
        "endChar": 1
      },
      "revId": "c08a0772dd8602bddd024d4d10d5e1a1fd4dd7b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb4a7fbd_fd8f2c8a",
        "filename": "src/chromiumos/tast/local/chrome/ui/login/login.go",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1358595
      },
      "writtenOn": "2020-07-28T00:00:11Z",
      "side": 1,
      "message": "mention crbug/1109381 here so that other people will know the issue if they use this library.",
      "revId": "c08a0772dd8602bddd024d4d10d5e1a1fd4dd7b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf1aa342_5fb49eb8",
        "filename": "src/chromiumos/tast/local/chrome/ui/login/login.go",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1358595
      },
      "writtenOn": "2020-07-28T00:00:11Z",
      "side": 1,
      "message": "nit: ReadyForPassword just to make it more specific since it may be ready for something else even if it is not ready for password.",
      "range": {
        "startLine": 28,
        "startChar": 1,
        "endLine": 28,
        "endChar": 6
      },
      "revId": "c08a0772dd8602bddd024d4d10d5e1a1fd4dd7b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee0db05b_3afcc674",
        "filename": "src/chromiumos/tast/local/chrome/ui/login/login.go",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1390967
      },
      "writtenOn": "2020-07-29T19:18:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cf1aa342_5fb49eb8",
      "range": {
        "startLine": 28,
        "startChar": 1,
        "endLine": 28,
        "endChar": 6
      },
      "revId": "c08a0772dd8602bddd024d4d10d5e1a1fd4dd7b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "439f09d2_9065f4a3",
        "filename": "src/chromiumos/tast/local/chrome/ui/login/login.go",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1390967
      },
      "writtenOn": "2020-07-29T19:18:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eb4a7fbd_fd8f2c8a",
      "revId": "c08a0772dd8602bddd024d4d10d5e1a1fd4dd7b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dfd92d04_9eda6676",
        "filename": "src/chromiumos/tast/local/chrome/ui/login/login.go",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1118689
      },
      "writtenOn": "2020-07-28T03:17:27Z",
      "side": 1,
      "message": "What does this string contain?",
      "range": {
        "startLine": 34,
        "startChar": 1,
        "endLine": 34,
        "endChar": 10
      },
      "revId": "c08a0772dd8602bddd024d4d10d5e1a1fd4dd7b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee50d21c_174c6476",
        "filename": "src/chromiumos/tast/local/chrome/ui/login/login.go",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1390967
      },
      "writtenOn": "2020-07-29T19:18:39Z",
      "side": 1,
      "message": "I\u0027m not 100% sure how it\u0027s used, it\u0027ll be either \u0027file\u0027, \u0027profile\u0027, or a number, according to the comment:\nhttps://source.chromium.org/chromium/chromium/src/+/master:chrome/common/extensions/api/autotest_private.idl;l\u003d133;drc\u003ddd1bd07ba7b95cdbe6ea191ca8a1aace40528c69?originalUrl\u003dhttps:%2F%2Fcs.chromium.org%2F",
      "parentUuid": "dfd92d04_9eda6676",
      "range": {
        "startLine": 34,
        "startChar": 1,
        "endLine": 34,
        "endChar": 10
      },
      "revId": "c08a0772dd8602bddd024d4d10d5e1a1fd4dd7b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd05fba8_b3819eb8",
        "filename": "src/chromiumos/tast/local/chrome/ui/login/login.go",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1118689
      },
      "writtenOn": "2020-07-28T03:17:27Z",
      "side": 1,
      "message": "Is there a better name for this?",
      "range": {
        "startLine": 37,
        "startChar": 3,
        "endLine": 37,
        "endChar": 13
      },
      "revId": "c08a0772dd8602bddd024d4d10d5e1a1fd4dd7b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48c3d48b_f8670968",
        "filename": "src/chromiumos/tast/local/chrome/ui/login/login.go",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1390967
      },
      "writtenOn": "2020-07-29T19:18:39Z",
      "side": 1,
      "message": "\"WaitForStatus\" maybe?",
      "parentUuid": "cd05fba8_b3819eb8",
      "range": {
        "startLine": 37,
        "startChar": 3,
        "endLine": 37,
        "endChar": 13
      },
      "revId": "c08a0772dd8602bddd024d4d10d5e1a1fd4dd7b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87059a33_c644841f",
        "filename": "src/chromiumos/tast/local/chrome/ui/login/login.go",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1358595
      },
      "writtenOn": "2020-07-28T00:00:11Z",
      "side": 1,
      "message": "nit: This is probably more complex than it needs to be on the user side. I think it would be nicer to only look at the boolean fields and make an enum. Make the function call be:\n\nfunc WaitStatus(ctx context.Context, tconn *chrome.TestConn, statusType StatusType, wanted bool, timeout time.Duration) (Status, error)\n\nThen a call would be:\n\nlogin.WaitStatus(ctx, tconn, login.Ready, true, 30*time.Second)\nlogin.WaitStatus(ctx, tconn, login.Guest, false, 30*time.Second)\n\nThis may not be reasonable depending on how it is used in other places, but look into it. If most cases are simple, probably just switch it.",
      "range": {
        "startLine": 39,
        "startChar": 61,
        "endLine": 39,
        "endChar": 91
      },
      "revId": "c08a0772dd8602bddd024d4d10d5e1a1fd4dd7b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49703043_b5fe9a15",
        "filename": "src/chromiumos/tast/local/chrome/ui/login/login.go",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1118689
      },
      "writtenOn": "2020-07-28T03:17:27Z",
      "side": 1,
      "message": "Can you add another function just to get the status?",
      "range": {
        "startLine": 39,
        "startChar": 5,
        "endLine": 39,
        "endChar": 15
      },
      "revId": "c08a0772dd8602bddd024d4d10d5e1a1fd4dd7b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09209409_d8b055ec",
        "filename": "src/chromiumos/tast/local/chrome/ui/login/login.go",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1390967
      },
      "writtenOn": "2020-07-28T04:54:51Z",
      "side": 1,
      "message": "Sounds good, just a bit confused about how to go about associating the Status struct with the proposed enum. I got something working by doing away with the struct and unpacking the json into a map, like:\n\n  type StatusType string\n  const (\n\tLoggedIn    StatusType \u003d \"isLoggedIn\"\n\tOwner       StatusType \u003d \"isOwner\"\n\t...\n  )\n  ...\n  var st map[StatusType]interface{}\n  tconn.EvalPromise(ctx, `tast.promisify(chrome.autotestPrivate.loginStatus)()`, \u0026st)\n  // check if st[statusType] \u003d\u003d wanted\n\nThis gets it working in the way you described, but it seems better to use a struct to hold the output of EvalPromise since we explicitly know the fields and their types. I also got it working by adding an intermediate step to make a map out of the struct:\n  var st Status\n  tconn.EvalPromise(ctx, `tast.promisify(chrome.autotestPrivate.loginStatus)()`, \u0026st)\n  map[StatusType]bool \u003d {\n    LoggedIn: st.LoggedIn,\n    Owner:    st.Owner,\n    ...\n  }\n  // check if stmap[statusType] \u003d\u003d wanted\n\nIt seems kind of convoluted, though. Is there a better way that I\u0027m missing?",
      "parentUuid": "87059a33_c644841f",
      "range": {
        "startLine": 39,
        "startChar": 61,
        "endLine": 39,
        "endChar": 91
      },
      "revId": "c08a0772dd8602bddd024d4d10d5e1a1fd4dd7b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c492eb9a_4933b07c",
        "filename": "src/chromiumos/tast/local/chrome/ui/login/login.go",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1390967
      },
      "writtenOn": "2020-07-29T19:18:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "49703043_b5fe9a15",
      "range": {
        "startLine": 39,
        "startChar": 5,
        "endLine": 39,
        "endChar": 15
      },
      "revId": "c08a0772dd8602bddd024d4d10d5e1a1fd4dd7b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c52dbce_c4008cb0",
        "filename": "src/chromiumos/tast/local/chrome/ui/login/login.go",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1390967
      },
      "writtenOn": "2020-07-29T19:18:39Z",
      "side": 1,
      "message": "I went with the second option, let me know if there\u0027s any better way to do things though.",
      "parentUuid": "09209409_d8b055ec",
      "range": {
        "startLine": 39,
        "startChar": 61,
        "endLine": 39,
        "endChar": 91
      },
      "revId": "c08a0772dd8602bddd024d4d10d5e1a1fd4dd7b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "242ad382_20fbce6c",
        "filename": "src/chromiumos/tast/local/chrome/ui/login/login.go",
        "patchSetId": 3
      },
      "lineNbr": 42,
      "author": {
        "id": 1358595
      },
      "writtenOn": "2020-07-28T00:00:11Z",
      "side": 1,
      "message": "Can you update the other couple of tests that use this to autotestPrivate function to use this method?",
      "range": {
        "startLine": 42,
        "startChar": 51,
        "endLine": 42,
        "endChar": 85
      },
      "revId": "c08a0772dd8602bddd024d4d10d5e1a1fd4dd7b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d50f580a_6bd4343c",
        "filename": "src/chromiumos/tast/local/chrome/ui/login/login.go",
        "patchSetId": 3
      },
      "lineNbr": 42,
      "author": {
        "id": 1390967
      },
      "writtenOn": "2020-07-29T19:18:39Z",
      "side": 1,
      "message": "That\u0027s the plan, I\u0027ll do it in a follow-up CL.",
      "parentUuid": "242ad382_20fbce6c",
      "range": {
        "startLine": 42,
        "startChar": 51,
        "endLine": 42,
        "endChar": 85
      },
      "revId": "c08a0772dd8602bddd024d4d10d5e1a1fd4dd7b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4a17042_a80b3f3a",
        "filename": "src/chromiumos/tast/local/chrome/ui/login/login.go",
        "patchSetId": 3
      },
      "lineNbr": 42,
      "author": {
        "id": 1390967
      },
      "writtenOn": "2020-07-29T22:01:30Z",
      "side": 1,
      "message": "Actually, I just noticed this CL from a couple days ago:\nhttps://chromium-review.googlesource.com/c/chromiumos/platform/tast-tests/+/2313196\n\nI guess lockscreen.go is the right place for most of this stuff now, but we can still update their WaitStatus method to be a little more user-friendly.",
      "parentUuid": "d50f580a_6bd4343c",
      "range": {
        "startLine": 42,
        "startChar": 51,
        "endLine": 42,
        "endChar": 85
      },
      "revId": "c08a0772dd8602bddd024d4d10d5e1a1fd4dd7b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}