{
  "comments": [
    {
      "key": {
        "uuid": "000bf98c_d90a0e78",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/accessibility_event.go",
        "patchSetId": 8
      },
      "lineNbr": 108,
      "author": {
        "id": 1121230
      },
      "writtenOn": "2019-01-18T01:13:45Z",
      "side": 1,
      "message": "nit: specified",
      "range": {
        "startLine": 108,
        "startChar": 61,
        "endLine": 108,
        "endChar": 70
      },
      "revId": "3769b05cb63d289f287d3909d60dc76a1f07edb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c06e523_4a73ae64",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/accessibility_event.go",
        "patchSetId": 8
      },
      "lineNbr": 108,
      "author": {
        "id": 1001986
      },
      "writtenOn": "2019-01-18T17:00:13Z",
      "side": 1,
      "message": "I\u0027d much rather we don\u0027t poll if not needed. \n\nYou can install a listener\ne.g.\nchrome.automation.getDesktop((desktop) \u003d\u003e {\n  desktop.addEventListener(chrome.automation.EventType.FOCUS, (evt) \u003d\u003e {\n...\n  });\n});\n\nThis is much more in the spirit of how ChromeVox works anyway.",
      "revId": "3769b05cb63d289f287d3909d60dc76a1f07edb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6413b2f_83c92e86",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/accessibility_event.go",
        "patchSetId": 8
      },
      "lineNbr": 108,
      "author": {
        "id": 1121230
      },
      "writtenOn": "2019-01-21T07:52:42Z",
      "side": 1,
      "message": "I think there should be many ways to use event listeners for this.\nBut I think polling would be easier option for testing.\n\nFor testing, we will do\n\n1. Do some action from test code.\n2. Confirm that state becomes expected one.\n\nIf we want to confirm focus change with using listeners, one way would be\n\n0. Register event listener. The event listener will put received events in the pool.\n1. Do some action from test code.\n2. Confirm that expected event would appear in the pool.\n\nWDYT?",
      "parentUuid": "4c06e523_4a73ae64",
      "revId": "3769b05cb63d289f287d3909d60dc76a1f07edb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "872ef214_f367289a",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/accessibility_event.go",
        "patchSetId": 8
      },
      "lineNbr": 108,
      "author": {
        "id": 1001986
      },
      "writtenOn": "2019-01-24T16:51:49Z",
      "side": 1,
      "message": "I don\u0027t want to change these tests since I\u0027m not too familiar with the capabilities, but we have taken both approaches in the past (polling vs async event based). Tl;dr, the polling tests are significantly less reliable and more flakey.\n\nThe async tests center around what ChromeVox speaks; you can see the central class here:\nchrome/browser/resources/chromeos/chromevox/testing/mock_feedback.js.\n\nSample tests are under:\n.../chromevox/cvox2/background/*.extjs\n\n\nThe strategy is to write a test like:\nmockFeedback.call(doSomeAction)\n   .expectSpeech(\u0027hello\u0027)\n   .call(doSomeOtherAction)\n   ...\nmockFeedback.replay();\n\n|mockFeedback| keeps a queue of pending actions and executes each in turn. For the expected* methods, it only continues processing the queue once the expectation is satisified. The test passes once the queue is empty. Replay() starts processing the queue.\n\nIn contrast, \nChromeVox has some C++ tests written in the style of polling.\nchrome/browser/chromeos/accessibility/spoken_feedback_browsertests.cc.\n\nThese are important as well, but are far more flakey and difficult to debug.\n\nUltimately, I\u0027ll leave it up to you, Sara, but I wanted to give some background.",
      "parentUuid": "e6413b2f_83c92e86",
      "revId": "3769b05cb63d289f287d3909d60dc76a1f07edb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b55afb73_1bce7da5",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/accessibility_event.go",
        "patchSetId": 8
      },
      "lineNbr": 108,
      "author": {
        "id": 1274627
      },
      "writtenOn": "2019-02-01T06:32:41Z",
      "side": 1,
      "message": "I think they are both valid points, and I agree with both of your perspectives.\nI\u0027ve tried working with David\u0027s suggestions, but I think for the case of testing, the current implementation of polling is easier.",
      "parentUuid": "872ef214_f367289a",
      "revId": "3769b05cb63d289f287d3909d60dc76a1f07edb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14bd83c0_c1818ff9",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/accessibility_event.go",
        "patchSetId": 8
      },
      "lineNbr": 129,
      "author": {
        "id": 1121230
      },
      "writtenOn": "2019-01-18T01:13:45Z",
      "side": 1,
      "message": "optional: Maybe it\u0027s nice to log that this error is caused by timeout.\n\ne.g. \"Timeout: failed to check...\"",
      "range": {
        "startLine": 129,
        "startChar": 27,
        "endLine": 129,
        "endChar": 68
      },
      "revId": "3769b05cb63d289f287d3909d60dc76a1f07edb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0643bf0_cf7e434d",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/accessibility_event.go",
        "patchSetId": 8
      },
      "lineNbr": 129,
      "author": {
        "id": 1274627
      },
      "writtenOn": "2019-02-01T06:32:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "14bd83c0_c1818ff9",
      "range": {
        "startLine": 129,
        "startChar": 27,
        "endLine": 129,
        "endChar": 68
      },
      "revId": "3769b05cb63d289f287d3909d60dc76a1f07edb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "572f4749_148b604f",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/accessibility_event.go",
        "patchSetId": 8
      },
      "lineNbr": 159,
      "author": {
        "id": 1121230
      },
      "writtenOn": "2019-01-18T01:13:45Z",
      "side": 1,
      "message": "I think this can be an optional arg (additional check) from method name.",
      "range": {
        "startLine": 159,
        "startChar": 70,
        "endLine": 159,
        "endChar": 82
      },
      "revId": "3769b05cb63d289f287d3909d60dc76a1f07edb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac1a8cdf_5095596b",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/accessibility_event.go",
        "patchSetId": 8
      },
      "lineNbr": 159,
      "author": {
        "id": 1274627
      },
      "writtenOn": "2019-02-01T06:32:41Z",
      "side": 1,
      "message": "n/a go doesnt support optional",
      "parentUuid": "572f4749_148b604f",
      "range": {
        "startLine": 159,
        "startChar": 70,
        "endLine": 159,
        "endChar": 82
      },
      "revId": "3769b05cb63d289f287d3909d60dc76a1f07edb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ffad8f4_bebf0992",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/accessibility_event.go",
        "patchSetId": 8
      },
      "lineNbr": 172,
      "author": {
        "id": 1121230
      },
      "writtenOn": "2019-01-18T01:13:45Z",
      "side": 1,
      "message": "This is very similar to waitForValueFocused. How about to structure them in the following way?\n\ngetValueForFocusedElement(ctx, chromeVoxConn, elementClass) -\u003e same with what we are doing with getSeekBarValue.\nwaitValueForFocusedElement(ctx, chromeVoxConn, value, elementClass) -\u003e use getValueForFocusedElement inside with testing.pool.",
      "range": {
        "startLine": 160,
        "startChar": 1,
        "endLine": 172,
        "endChar": 25
      },
      "revId": "3769b05cb63d289f287d3909d60dc76a1f07edb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff721c7a_b5df2799",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/accessibility_event.go",
        "patchSetId": 8
      },
      "lineNbr": 172,
      "author": {
        "id": 1274627
      },
      "writtenOn": "2019-02-01T06:32:41Z",
      "side": 1,
      "message": "Done, thanks",
      "parentUuid": "4ffad8f4_bebf0992",
      "range": {
        "startLine": 160,
        "startChar": 1,
        "endLine": 172,
        "endChar": 25
      },
      "revId": "3769b05cb63d289f287d3909d60dc76a1f07edb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e9ef558_d615e35e",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/accessibility_event.go",
        "patchSetId": 8
      },
      "lineNbr": 184,
      "author": {
        "id": 1121230
      },
      "writtenOn": "2019-01-18T01:13:45Z",
      "side": 1,
      "message": "This might have been already discussed in the previous CLs code review. Why do we write this out to a file instead of simply logging out to stdout?",
      "range": {
        "startLine": 184,
        "startChar": 29,
        "endLine": 184,
        "endChar": 43
      },
      "revId": "3769b05cb63d289f287d3909d60dc76a1f07edb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c73f61d3_43f0a526",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/accessibility_event.go",
        "patchSetId": 8
      },
      "lineNbr": 184,
      "author": {
        "id": 1274627
      },
      "writtenOn": "2019-02-01T06:32:41Z",
      "side": 1,
      "message": "the difference might be large, so it was preferred to output diff to a file instead.\n\ncontext: see last comment (https://chromium-review.googlesource.com/c/chromiumos/platform/tast-tests/+/1347650/4/src/chromiumos/tast/local/bundles/cros/arcapp/accessibility_event.go#156)",
      "parentUuid": "2e9ef558_d615e35e",
      "range": {
        "startLine": 184,
        "startChar": 29,
        "endLine": 184,
        "endChar": 43
      },
      "revId": "3769b05cb63d289f287d3909d60dc76a1f07edb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3f3019a_5be6f1b0",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/accessibility_event.go",
        "patchSetId": 8
      },
      "lineNbr": 212,
      "author": {
        "id": 1121230
      },
      "writtenOn": "2019-01-18T01:13:45Z",
      "side": 1,
      "message": "It\u0027s better to write a comment about why you do it (intention) instead of what the code is doing.\n\ne.g. Make sure that slider is focused with an expected initial value.",
      "range": {
        "startLine": 212,
        "startChar": 4,
        "endLine": 212,
        "endChar": 66
      },
      "revId": "3769b05cb63d289f287d3909d60dc76a1f07edb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa683320_80c2945c",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/accessibility_event.go",
        "patchSetId": 8
      },
      "lineNbr": 212,
      "author": {
        "id": 1274627
      },
      "writtenOn": "2019-02-01T06:32:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e3f3019a_5be6f1b0",
      "range": {
        "startLine": 212,
        "startChar": 4,
        "endLine": 212,
        "endChar": 66
      },
      "revId": "3769b05cb63d289f287d3909d60dc76a1f07edb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96a09fb2_d8291df0",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/accessibility_event.go",
        "patchSetId": 8
      },
      "lineNbr": 225,
      "author": {
        "id": 1121230
      },
      "writtenOn": "2019-01-18T01:13:45Z",
      "side": 1,
      "message": "Wouldn\u0027t this be done with the above waitForValueFocused?",
      "range": {
        "startLine": 217,
        "startChar": 1,
        "endLine": 225,
        "endChar": 2
      },
      "revId": "3769b05cb63d289f287d3909d60dc76a1f07edb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "787bc049_c18e742d",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/accessibility_event.go",
        "patchSetId": 8
      },
      "lineNbr": 225,
      "author": {
        "id": 1274627
      },
      "writtenOn": "2019-02-01T06:32:41Z",
      "side": 1,
      "message": "Done, thanks. Yep it would be done with the above!.",
      "parentUuid": "96a09fb2_d8291df0",
      "range": {
        "startLine": 217,
        "startChar": 1,
        "endLine": 225,
        "endChar": 2
      },
      "revId": "3769b05cb63d289f287d3909d60dc76a1f07edb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "844dddbd_c2d4de65",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/accessibility_event.go",
        "patchSetId": 8
      },
      "lineNbr": 227,
      "author": {
        "id": 1121230
      },
      "writtenOn": "2019-01-18T01:13:45Z",
      "side": 1,
      "message": "nit: maybe worth to say that this is done by ChromeVox.\n\ne.g. Increment value of seekbar by ChromeVox key combo.",
      "range": {
        "startLine": 227,
        "startChar": 4,
        "endLine": 227,
        "endChar": 30
      },
      "revId": "3769b05cb63d289f287d3909d60dc76a1f07edb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c4116a8_d17272a6",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/accessibility_event.go",
        "patchSetId": 8
      },
      "lineNbr": 227,
      "author": {
        "id": 1001986
      },
      "writtenOn": "2019-01-24T16:51:49Z",
      "side": 1,
      "message": "I\u0027m not sure I understand how this increments the slider; ChromeVox doesn\u0027t have any such key combination to do so.",
      "parentUuid": "844dddbd_c2d4de65",
      "range": {
        "startLine": 227,
        "startChar": 4,
        "endLine": 227,
        "endChar": 30
      },
      "revId": "3769b05cb63d289f287d3909d60dc76a1f07edb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c191a03b_cb262531",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/accessibility_event.go",
        "patchSetId": 8
      },
      "lineNbr": 227,
      "author": {
        "id": 1274627
      },
      "writtenOn": "2019-02-01T06:32:41Z",
      "side": 1,
      "message": "Using the equal\u0027s sign, when the slider has focus increments the value.\nIs there a specific key combination I should use instead?",
      "parentUuid": "844dddbd_c2d4de65",
      "range": {
        "startLine": 227,
        "startChar": 4,
        "endLine": 227,
        "endChar": 30
      },
      "revId": "3769b05cb63d289f287d3909d60dc76a1f07edb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0ba442e_78d608b3",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/accessibility_event.go",
        "patchSetId": 8
      },
      "lineNbr": 281,
      "author": {
        "id": 1121230
      },
      "writtenOn": "2019-01-18T01:13:45Z",
      "side": 1,
      "message": "We can remove this now.",
      "range": {
        "startLine": 277,
        "startChar": 1,
        "endLine": 281,
        "endChar": 2
      },
      "revId": "3769b05cb63d289f287d3909d60dc76a1f07edb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d13cf7c_174ac9e6",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/accessibility_event.go",
        "patchSetId": 8
      },
      "lineNbr": 281,
      "author": {
        "id": 1274627
      },
      "writtenOn": "2019-02-01T06:32:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e0ba442e_78d608b3",
      "range": {
        "startLine": 277,
        "startChar": 1,
        "endLine": 281,
        "endChar": 2
      },
      "revId": "3769b05cb63d289f287d3909d60dc76a1f07edb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be111552_37d74915",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/accessibility_event.go",
        "patchSetId": 8
      },
      "lineNbr": 452,
      "author": {
        "id": 1121230
      },
      "writtenOn": "2019-01-18T01:13:45Z",
      "side": 1,
      "message": "question: don\u0027t we get an event for seekbar value update, e.g. valueChanged event?\n\nI think what we want to test in focusAndIncrementElement would be\n\n- Value is correctly updated in the a11y tree (this will be checked via chrome.automation.getFocus call)\n- Event is correctly dispatched for the update (this will be checked via event log output)",
      "range": {
        "startLine": 447,
        "startChar": 1,
        "endLine": 452,
        "endChar": 2
      },
      "revId": "3769b05cb63d289f287d3909d60dc76a1f07edb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d8300c1_715d1105",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/accessibility_event.go",
        "patchSetId": 8
      },
      "lineNbr": 452,
      "author": {
        "id": 1274627
      },
      "writtenOn": "2019-02-01T06:32:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "be111552_37d74915",
      "range": {
        "startLine": 447,
        "startChar": 1,
        "endLine": 452,
        "endChar": 2
      },
      "revId": "3769b05cb63d289f287d3909d60dc76a1f07edb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}