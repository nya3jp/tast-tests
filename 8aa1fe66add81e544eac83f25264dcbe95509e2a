{
  "comments": [
    {
      "key": {
        "uuid": "977597f0_ee221266",
        "filename": "src/chromiumos/tast/local/bundles/cros/platform/root_partitions_not_mounted.go",
        "patchSetId": 6
      },
      "lineNbr": 52,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2019-06-04T15:56:11Z",
      "side": 1,
      "message": "With careful reading, I found this could cause a flakiness, because the process PID can be terminated between processList() invocation and mountedDevices().\n\nCould you change this to s.Logf(...) and continue?\n\nif err !\u003d nil {\n  s.Logf(\"Failed to get mounted devices for PID %d. The process looks terminated: %v\", ...)\n  continue\n}\n\nWDYT?",
      "range": {
        "startLine": 52,
        "startChar": 5,
        "endLine": 52,
        "endChar": 11
      },
      "revId": "8aa1fe66add81e544eac83f25264dcbe95509e2a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f5032d8_d7e3440a",
        "filename": "src/chromiumos/tast/local/bundles/cros/platform/root_partitions_not_mounted.go",
        "patchSetId": 6
      },
      "lineNbr": 52,
      "author": {
        "id": 1337146
      },
      "writtenOn": "2019-06-05T15:53:04Z",
      "side": 1,
      "message": "while this resolves the flakiness, it brings to question what we are really testing here. Since we do not control what processes are running while running the test, are we just trying out how lucky we are to find a process that maybe using a root partition?\nIt looks more and more like we should simply remove this test or get a list of processes that must be running during the test.\n\nI will fix the error, but I think we should refrain from checking in the test until we get some clarity on what it is doing. I will check with the original authors.\n.",
      "parentUuid": "977597f0_ee221266",
      "range": {
        "startLine": 52,
        "startChar": 5,
        "endLine": 52,
        "endChar": 11
      },
      "revId": "8aa1fe66add81e544eac83f25264dcbe95509e2a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3cdfe252_a172fb4a",
        "filename": "src/chromiumos/tast/local/bundles/cros/platform/root_partitions_not_mounted.go",
        "patchSetId": 6
      },
      "lineNbr": 52,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2019-06-05T16:28:00Z",
      "side": 1,
      "message": "Off topic: My understanding is;\nI agreed with you that it\u0027s not perfect. But, I think this is a kind of best-effort.\nIIUC, what we\u0027d like to check with this test is \"any process does not have root partitions mounted\". IMHO, it\u0027s impossible to check it *perfectly*, because Chrome OS runs various processes at any time, and there\u0027s no guarantee that the process can keep running during this test. Instead, this test assumes \"in most cases\" processes keep running during the test.\n\nOn the other hand, in edge cases, some process could be terminated even in the \"correct\" situation, and my recommendation is to avoid false negative, because when promoted to CQ it prohibits sane CLs to be landed.\n\n+1 to re-check with the original authors, but to move forward, I\u0027d also +1 to submit and watch its result trajectory, in parallel. WDYT?",
      "parentUuid": "1f5032d8_d7e3440a",
      "range": {
        "startLine": 52,
        "startChar": 5,
        "endLine": 52,
        "endChar": 11
      },
      "revId": "8aa1fe66add81e544eac83f25264dcbe95509e2a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "656fd341_e2608f7c",
        "filename": "src/chromiumos/tast/local/bundles/cros/platform/root_partitions_not_mounted.go",
        "patchSetId": 6
      },
      "lineNbr": 52,
      "author": {
        "id": 1337146
      },
      "writtenOn": "2019-06-05T16:38:32Z",
      "side": 1,
      "message": "sgtm.",
      "parentUuid": "3cdfe252_a172fb4a",
      "range": {
        "startLine": 52,
        "startChar": 5,
        "endLine": 52,
        "endChar": 11
      },
      "revId": "8aa1fe66add81e544eac83f25264dcbe95509e2a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70e97edc_0463edca",
        "filename": "src/chromiumos/tast/local/bundles/cros/platform/root_partitions_not_mounted.go",
        "patchSetId": 6
      },
      "lineNbr": 52,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-06-06T00:04:41Z",
      "side": 1,
      "message": "SGTM too. It\u0027s almost impossible to write perfect (that is, no false positive *and* no false negative) integration tests. IMO, if we have to choose either one, we should choose no false positives (\u003d avoid blaming innocent CLs) over no false negatives (\u003d overlooking bad CLs), so ignoring this error sounds fine.",
      "parentUuid": "656fd341_e2608f7c",
      "range": {
        "startLine": 52,
        "startChar": 5,
        "endLine": 52,
        "endChar": 11
      },
      "revId": "8aa1fe66add81e544eac83f25264dcbe95509e2a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e646d393_529e4a6f",
        "filename": "src/chromiumos/tast/local/bundles/cros/platform/root_partitions_not_mounted.go",
        "patchSetId": 6
      },
      "lineNbr": 83,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2019-06-04T15:56:11Z",
      "side": 1,
      "message": "Conceptually, you\u0027re trying to make a set, right?\n\nIn the case, could you use map[string]struct{}?\nEmpty struct is optimized into zero byte.\nNOte: This is common practice in go, AFAIK.",
      "range": {
        "startLine": 83,
        "startChar": 41,
        "endLine": 83,
        "endChar": 44
      },
      "revId": "8aa1fe66add81e544eac83f25264dcbe95509e2a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0aa323a1_7ec77220",
        "filename": "src/chromiumos/tast/local/bundles/cros/platform/root_partitions_not_mounted.go",
        "patchSetId": 6
      },
      "lineNbr": 83,
      "author": {
        "id": 1337146
      },
      "writtenOn": "2019-06-05T15:53:04Z",
      "side": 1,
      "message": "thanks, I was wondering how to do that,",
      "parentUuid": "e646d393_529e4a6f",
      "range": {
        "startLine": 83,
        "startChar": 41,
        "endLine": 83,
        "endChar": 44
      },
      "revId": "8aa1fe66add81e544eac83f25264dcbe95509e2a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49aae770_e3d81adc",
        "filename": "src/chromiumos/tast/local/bundles/cros/platform/root_partitions_not_mounted.go",
        "patchSetId": 6
      },
      "lineNbr": 83,
      "author": {
        "id": 1150179
      },
      "writtenOn": "2019-06-06T04:26:41Z",
      "side": 1,
      "message": "nit: Effective Go would suggest using map[string]bool\nhttps://golang.org/doc/effective_go.html#maps\n\nThis way, you can rewrite (in L55)\nif _, present :\u003d devices[part]; !present {\nto\nif devices[part] {",
      "parentUuid": "0aa323a1_7ec77220",
      "range": {
        "startLine": 83,
        "startChar": 41,
        "endLine": 83,
        "endChar": 44
      },
      "revId": "8aa1fe66add81e544eac83f25264dcbe95509e2a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}