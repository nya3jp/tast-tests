{
  "comments": [
    {
      "key": {
        "uuid": "6d900232_ccec7cae",
        "filename": "src/chromiumos/tast/local/bundles/cros/audio/alsa_conformance.go",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-01-15T06:55:38Z",
      "side": 1,
      "message": "This assumes CRAS is running at the start of the test, right? Do we want to call upstart.EnsureJobRunning?",
      "revId": "b8911c7d3cda97b4667fb46e951f2db530a2977b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56ec69af_a2cdd25e",
        "filename": "src/chromiumos/tast/local/bundles/cros/audio/alsa_conformance.go",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1269379
      },
      "writtenOn": "2019-01-14T09:19:06Z",
      "side": 1,
      "message": "I\u0027m curious about why we need to run this defer function after canceling ctx.\nBesides, if I add sleep in the test to make it timeout purposely, the defer function will not be run and CRAS will still be disable. It seems it just make the deadline time earlier. How can I run defer function even if it is timeout? Thanks.",
      "revId": "b8911c7d3cda97b4667fb46e951f2db530a2977b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a1c2150_d27090b0",
        "filename": "src/chromiumos/tast/local/bundles/cros/audio/alsa_conformance.go",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2019-01-14T09:31:41Z",
      "side": 1,
      "message": "i might be misunderstanding your question, but the cancel function isn\u0027t being called here. rather, this defer statement is saying that cancel() will be invoked just before the ALSAConformance function returns.\n\nif you\u0027re just adding a time.Sleep(time.Hour) or something similar to this test, then yes, EnsureJobRunning won\u0027t be called since this function is waiting an hour to return. but tests shouldn\u0027t be doing that. :-)\n\ninstead, try adding something like the following at the end of ALSAConformance:\n\n  select {\n  \u003c-ctx.Done():\n  }\n\nthat will block until the shortened ctx expires five seconds before the test\u0027s timeout. you should see the deferred EnsureJobRunning call be executed (using the original ctx) at that point.\n\nplease see the following:\n\nhttps://blog.golang.org/context\nhttps://blog.golang.org/go-concurrency-patterns-timing-out-and",
      "parentUuid": "56ec69af_a2cdd25e",
      "revId": "b8911c7d3cda97b4667fb46e951f2db530a2977b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53b3993f_8d1da5cd",
        "filename": "src/chromiumos/tast/local/bundles/cros/audio/alsa_conformance.go",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1269379
      },
      "writtenOn": "2019-01-15T03:02:53Z",
      "side": 1,
      "message": "I got it now! Thank you very much :)\nWe can upload this CL right now.\nI really learned a lot from you!",
      "parentUuid": "0a1c2150_d27090b0",
      "revId": "b8911c7d3cda97b4667fb46e951f2db530a2977b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}