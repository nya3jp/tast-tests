{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ef0efdd4_bf5fdbef",
        "filename": "src/chromiumos/tast/remote/bundles/cros/platform/fixtures/services_on_boot_fixt.go",
        "patchSetId": 4
      },
      "lineNbr": 61,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2022-09-29T19:16:05Z",
      "side": 1,
      "message": "Is this only because of limitations of log demarkation? See below about croslog.\n\nBut I guess another problem is if a lot of tests have run before this fixture, they might have purposely induced service failures, which would cause this test to flake.\n\nSo maybe you need this reboot either way, but if so, you should document it.",
      "range": {
        "startLine": 58,
        "startChar": 0,
        "endLine": 61,
        "endChar": 2
      },
      "revId": "f252fc90bdd32e17b999bebfd7d4d9d93e7be40e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "881c1849_a407ff46",
        "filename": "src/chromiumos/tast/remote/bundles/cros/platform/fixtures/services_on_boot_fixt.go",
        "patchSetId": 4
      },
      "lineNbr": 61,
      "author": {
        "id": 1512777
      },
      "writtenOn": "2022-09-29T20:46:13Z",
      "side": 1,
      "message": "Yes, I want to detect service failures and race conditions on boot, and I personally find it undesirable to have events happen before the test starts to have an impact on the test result, hence a reboot.",
      "parentUuid": "ef0efdd4_bf5fdbef",
      "range": {
        "startLine": 58,
        "startChar": 0,
        "endLine": 61,
        "endChar": 2
      },
      "revId": "f252fc90bdd32e17b999bebfd7d4d9d93e7be40e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f498eca_68df8b36",
        "filename": "src/chromiumos/tast/remote/bundles/cros/platform/fixtures/services_on_boot_fixt.go",
        "patchSetId": 4
      },
      "lineNbr": 61,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2022-09-29T22:26:16Z",
      "side": 1,
      "message": "Sure. Could have a comment for that?",
      "parentUuid": "881c1849_a407ff46",
      "range": {
        "startLine": 58,
        "startChar": 0,
        "endLine": 61,
        "endChar": 2
      },
      "revId": "f252fc90bdd32e17b999bebfd7d4d9d93e7be40e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc97d87b_0623d34b",
        "filename": "src/chromiumos/tast/remote/bundles/cros/platform/fixtures/services_on_boot_fixt.go",
        "patchSetId": 4
      },
      "lineNbr": 82,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2022-09-29T19:16:05Z",
      "side": 1,
      "message": "this seems pretty suspect, per:\n\nhttps://chromium.googlesource.com/chromiumos/platform/tast/+/HEAD/docs/writing_tests.md#contexts-and-timeouts\n\n\"Sleeping without polling for a condition is discouraged, since it makes tests flakier (when the sleep duration isn\u0027t long enough) or slower (when the duration is too long).\"\n\nIs there something specific we can wait for? Maybe one of the \"wait for CPU activity to subside\" helpers? I think most of those check for temperature (WaitUntilCoolDown()), although I\u0027m not sure if that\u0027s a great fit.",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 82,
        "endChar": 34
      },
      "revId": "f252fc90bdd32e17b999bebfd7d4d9d93e7be40e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85d9272d_73968b2c",
        "filename": "src/chromiumos/tast/remote/bundles/cros/platform/fixtures/services_on_boot_fixt.go",
        "patchSetId": 4
      },
      "lineNbr": 82,
      "author": {
        "id": 1512777
      },
      "writtenOn": "2022-09-29T20:46:13Z",
      "side": 1,
      "message": "IMO, the doc for polling applies to the opposite case: in the happy path the polling condition is satisfied shortly. In the sad path we also waited long enough to be confident to fail the test for the timeout.\n\nHere I don\u0027t think we have a good way to tell if a service has finished its initialization sequence. So we wait for services to _fail_ instead. In the happy path we would be waiting for the _timeout_ and declare that the service is running successfully only if we find nothing wrong after _timeout_ passed. The happy path is either slow or flaky. Polling would make the sad path faster, which I don\u0027t find useful.\n\nAgree this is a code smell, I should probably put this into the comment.\n\n\u003e Maybe one of the \"wait for CPU activity to subside\"\n\nFrom my experiences CPU activity fluctuates a lot: my hatch devices\u0027 CPUs seem to be busy for a long while on boot, compared to other platforms.",
      "parentUuid": "cc97d87b_0623d34b",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 82,
        "endChar": 34
      },
      "revId": "f252fc90bdd32e17b999bebfd7d4d9d93e7be40e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b315137_c8eebdc8",
        "filename": "src/chromiumos/tast/remote/bundles/cros/platform/fixtures/services_on_boot_fixt.go",
        "patchSetId": 4
      },
      "lineNbr": 82,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2022-09-29T22:26:16Z",
      "side": 1,
      "message": "\u003e IMO, the doc for polling applies to the opposite case: in the happy path the polling condition is satisfied shortly. In the sad path we also waited long enough to be confident to fail the test for the timeout.\n\nI\u0027d say this feels exactly like that comment. If the sleep is long, the test is excessively slow. If the sleep is short, it\u0027s flaky (erring on the side of passing, but that\u0027s still bad -- we\u0027re missing errors, and the flake may be exposed by arbitrary other actions, like somebody\u0027s CL that makes things boot faster).\n\n\u003e Here I don\u0027t think we have a good way to tell if a service has finished its initialization sequence. [...]\n\nThat\u0027s mostly right. You could possibly look for anything that\u0027s not in a steady state, via \u0027initctl list\u0027:\n\nhttps://upstart.ubuntu.com/cookbook/#job-states\n\n(so, anything in \"starting\", \"stopping\", etc.)\n\nBut that\u0027s still not quite right, since failing services tend to fail soon after they\u0027ve reached steady state (because the process exits with a failure code).\n\n\u003e From my experiences CPU activity fluctuates a lot: my hatch devices\u0027 CPUs seem to be busy for a long while on boot, compared to other platforms.\n\nYeah, it\u0027s not a great one. I just wanted to brainstorm something that\u0027s better than an arbitrary \"wait 30 seconds.\"\n\nMaybe we don\u0027t have anything better. Or maybe we could look at \u0027initctl list\u0027 and still have a short sleep afterward.",
      "parentUuid": "85d9272d_73968b2c",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 82,
        "endChar": 34
      },
      "revId": "f252fc90bdd32e17b999bebfd7d4d9d93e7be40e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "002dcd7d_35becf1d",
        "filename": "src/chromiumos/tast/remote/bundles/cros/platform/fixtures/services_on_boot_fixt.go",
        "patchSetId": 4
      },
      "lineNbr": 86,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2022-09-29T19:16:05Z",
      "side": 1,
      "message": "dmesg doesn\u0027t have a very large ring buffer, so it wouldn\u0027t be unheard of for this to cycle out pretty quick. It also *requires* you to reboot, since it very well might have been cleared (see above notes).\n\nHow about using croslog, which tracks reboots nicely, and collates a few different log sources?\n\ne.g.:\n\n```\nlocalhost ~ # start early-failure\nstart: Job failed to start\nlocalhost ~ # croslog --boot --identifier\u003dkernel | grep \u0027init: .* process\u0027\n2022-09-29T01:22:21.381381Z WARNING kernel: [    1.083212] init: early-failure main process (250) terminated with status 124\n2022-09-29T01:22:25.733729Z WARNING kernel: [    7.592595] init: failsafe-delay main process (863) killed by TERM signal\n2022-09-29T01:22:28.541788Z WARNING kernel: [   10.401191] init: ac-only pre-start process (3129) terminated with status 1\n2022-09-29T01:22:35.886785Z WARNING kernel: [   17.745797] init: send-uptime-metrics main process (2106) terminated with status 2\n2022-09-29T01:29:23.233098Z WARNING kernel: [  425.091912] init: ml-service (mojo_service) post-start process (5212) terminated with status 2\n2022-09-29T18:22:58.275848Z WARNING kernel: [61240.132419] init: early-failure main process (9870) terminated with status 124\n```\n\nThen you don\u0027t really *have* to reboot at all. (Or if you want a clean reboot still, you could have a fixture that only ensures a fresh/clean reboot, and the rest of this test could be a local test.)\n\n+yoshiki",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 86,
        "endChar": 33
      },
      "revId": "f252fc90bdd32e17b999bebfd7d4d9d93e7be40e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5054b17a_ab346ded",
        "filename": "src/chromiumos/tast/remote/bundles/cros/platform/fixtures/services_on_boot_fixt.go",
        "patchSetId": 4
      },
      "lineNbr": 86,
      "author": {
        "id": 1512777
      },
      "writtenOn": "2022-09-29T20:46:13Z",
      "side": 1,
      "message": "I think a reboot is still needed (see above), but the suggestion of croslog and remote fixture + local test sounds interesting.",
      "parentUuid": "002dcd7d_35becf1d",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 86,
        "endChar": 33
      },
      "revId": "f252fc90bdd32e17b999bebfd7d4d9d93e7be40e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a1dbfb8_365cb485",
        "filename": "src/chromiumos/tast/remote/bundles/cros/platform/services_on_boot.go",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2022-09-29T19:16:05Z",
      "side": 1,
      "message": "I\u0027ll defer to Tast owners, but this \"fixture\" doesn\u0027t really feel like a fixture. It\u0027s actually the meat of your test, and it makes some pretty important assumptions about tests (for example, that they don\u0027t reboot, or induce any other service failures). And I doubt it\u0027s reusable beyond this test.\n\nIs there a reason you don\u0027t just import the fixture logic into this test? I don\u0027t even think there\u0027s all that much value in making these sub-cases (\u003ctest-name\u003e.smoke, \u003ctest-name\u003e.cras, etc.). Can\u0027t they simply be line items in a single test?\n\nI guess one reason not to combine: if different services are likely to have different levels of reliability, and need to be disabled/exonerated/marked-informational individually over time.",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 24,
        "endChar": 44
      },
      "revId": "f252fc90bdd32e17b999bebfd7d4d9d93e7be40e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c400499c_e1ea75ef",
        "filename": "src/chromiumos/tast/remote/bundles/cros/platform/services_on_boot.go",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1512777
      },
      "writtenOn": "2022-09-29T20:46:13Z",
      "side": 1,
      "message": "\u003e I guess one reason not to combine: if different services are likely to have different levels of reliability, and need to be disabled/exonerated/marked-informational individually over time.\n\nExactly, I wanted the ability to have different services owned by different teams to be tracked and fixed separately.\n\n\u003e this \"fixture\" doesn\u0027t really feel like a fixture. \n\nYeah, I admit this is a weird use of fixtures. The fixture is not really reusable out of this test. \n\nTo sum up previous comments, the goals in my mind were:\n1. Do not test events before the test is run \u003d\u003d\u003e Reboot\n2. Track different services individually \u003d\u003d\u003e Sub-tests\n3. Achieve 1 and 2 \u003d\u003d\u003e Weird use of fixtures to share the \"Rebooted and slept for 30 seconds\" status\n\nIf we give up any of the points above then we don\u0027t need the fixture.\n\nOTOH, I think this use of fixtures is dangerous as fixtures don\u0027t guarantee that there are not `some.OtherEvilTest` messing up with service statuses.",
      "parentUuid": "7a1dbfb8_365cb485",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 24,
        "endChar": 44
      },
      "revId": "f252fc90bdd32e17b999bebfd7d4d9d93e7be40e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "843e8208_be9edcd0",
        "filename": "src/chromiumos/tast/remote/bundles/cros/platform/services_on_boot.go",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2022-09-29T22:26:16Z",
      "side": 1,
      "message": "(Sorry, perhaps a comment like this should have had a clearer direction/AI on it.) Your 3 points/goals are reasonable, and I guess what I was hoping for was simply clarification.\n\nMaybe that also deserves a comment, if this \"weird use of fixtures\" is the best solution.",
      "parentUuid": "c400499c_e1ea75ef",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 24,
        "endChar": 44
      },
      "revId": "f252fc90bdd32e17b999bebfd7d4d9d93e7be40e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d058194d_ed57f71b",
        "filename": "src/chromiumos/tast/remote/bundles/cros/platform/services_on_boot.go",
        "patchSetId": 4
      },
      "lineNbr": 27,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2022-09-29T19:16:05Z",
      "side": 1,
      "message": "you\u0027ve done all this nice work on parsing out every service; would it be useful to make a case that checks that *nothing* unexpected fails? We really shouldn\u0027t have arbitrary jobs failing, and they are the source of all kinds of problems (not to mention log spam, which adds mental burden on developers). That\u0027s also more likely to prevent all kinds of future issues, with services we\u0027re not paying special attention to.",
      "range": {
        "startLine": 27,
        "startChar": 2,
        "endLine": 27,
        "endChar": 8
      },
      "revId": "f252fc90bdd32e17b999bebfd7d4d9d93e7be40e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5aa8af4_75df1d08",
        "filename": "src/chromiumos/tast/remote/bundles/cros/platform/services_on_boot.go",
        "patchSetId": 4
      },
      "lineNbr": 27,
      "author": {
        "id": 1512777
      },
      "writtenOn": "2022-09-29T20:46:13Z",
      "side": 1,
      "message": "Sounds like a good idea. I would expect this catch all sub-test to fail, but that would gives us something actionable.",
      "parentUuid": "d058194d_ed57f71b",
      "range": {
        "startLine": 27,
        "startChar": 2,
        "endLine": 27,
        "endChar": 8
      },
      "revId": "f252fc90bdd32e17b999bebfd7d4d9d93e7be40e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd76da27_1228de36",
        "filename": "src/chromiumos/tast/remote/bundles/cros/platform/services_on_boot.go",
        "patchSetId": 4
      },
      "lineNbr": 27,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2022-09-29T22:26:16Z",
      "side": 1,
      "message": "Simple example: this already caused me to pay attention to this one:\n\nhttps://chromium-review.googlesource.com/c/chromiumos/platform2/+/3928609\n\nHere\u0027s another older one, with some real impacts: https://b.corp.google.com/issues/240492701\n\nThere\u0027s a constant stream of new services like this (or new buggy shell logic added to old ones), and I think it would be good to pay attention to them. There are real bugs hiding in many of those.\n\nWe\u0027d likely need an allow-list for some things (e.g., you already noticed \u0027failsafe-delay\u0027), but I suspect we could get it stable, after which it should provide long-term value.",
      "parentUuid": "c5aa8af4_75df1d08",
      "range": {
        "startLine": 27,
        "startChar": 2,
        "endLine": 27,
        "endChar": 8
      },
      "revId": "f252fc90bdd32e17b999bebfd7d4d9d93e7be40e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2b4043a_13558e3e",
        "filename": "src/chromiumos/tast/remote/bundles/cros/platform/services_on_boot.go",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1358673
      },
      "writtenOn": "2022-09-27T01:58:08Z",
      "side": 1,
      "message": "Does it means that after sound_card_init finished successfully it should come to WaitingState?\nThanks!",
      "range": {
        "startLine": 43,
        "startChar": 80,
        "endLine": 43,
        "endChar": 92
      },
      "revId": "f252fc90bdd32e17b999bebfd7d4d9d93e7be40e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b1250404_b69684dc",
        "filename": "src/chromiumos/tast/remote/bundles/cros/platform/services_on_boot.go",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1512777
      },
      "writtenOn": "2022-09-27T02:08:28Z",
      "side": 1,
      "message": "Yes, AFAIK when it completes it becomes stopped/waiting.\nThis can be observed by `initctl status sound_card_init`.",
      "parentUuid": "c2b4043a_13558e3e",
      "range": {
        "startLine": 43,
        "startChar": 80,
        "endLine": 43,
        "endChar": 92
      },
      "revId": "f252fc90bdd32e17b999bebfd7d4d9d93e7be40e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}