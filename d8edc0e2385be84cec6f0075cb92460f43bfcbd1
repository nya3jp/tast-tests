{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0c4eb292_2463c89f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1432127
      },
      "writtenOn": "2021-08-14T02:04:07Z",
      "side": 1,
      "message": "I will add a cl later in the stack that migrates out the testfixture utilities.",
      "revId": "d8edc0e2385be84cec6f0075cb92460f43bfcbd1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "adb74b31_f4e2f939",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2021-08-17T06:41:15Z",
      "side": 1,
      "message": "Thanks for also moving legacy_router.go from router to router/legacyrouter folder. However, what\u0027s the reason to extract some router code to common.go and moved to router/common? Can\u0027t the content of common.go stay in router/router.go (or another file in router/)?  Also, package name \"common\" should be avoided (see go/go-style/decisions#package-names).\n\n\n",
      "revId": "d8edc0e2385be84cec6f0075cb92460f43bfcbd1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec0d20eb_f7c2ed9b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1432127
      },
      "writtenOn": "2021-08-20T22:57:19Z",
      "side": 1,
      "message": "i have moved the package to sharedrouter after reading the style guidelines.\n\nThe reason why the content could not stay in router.go was due to an import cycle issue which is also what is making the testfixture refactor a bit more difficult.\n\nrouter.go (A) has all the interface composition definitions and some of those definitions depend on structures defined in legacy_router and ax_router (B). (B) does not know about the interface defintions, thus only (A) depends on (B) or A\u003c-B. legacy_router and ax_router have some shared code, this has been isolated to sharedrouter.go (previously common.go) (C). Thus B\u003c-C. This common code does not depend on anything thus we do not have a import loop. A\u003c-B\u003c-C.\n\nIf C was merged into A, then we have an import cycle with A\u003c-\u003eB",
      "parentUuid": "adb74b31_f4e2f939",
      "revId": "d8edc0e2385be84cec6f0075cb92460f43bfcbd1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9bf2bf89_3a8d9fa7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2021-08-24T09:15:17Z",
      "side": 1,
      "message": "Thanks for your explanation. Let\u0027s put the explanation on sharedrouter/doc.go",
      "parentUuid": "ec0d20eb_f7c2ed9b",
      "revId": "d8edc0e2385be84cec6f0075cb92460f43bfcbd1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8774497_6c282043",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2021-08-24T17:46:06Z",
      "side": 1,
      "message": "Think again. Could this because we make a mistake that a base package router/router.go depends on axrouter? The base package should not depend on its child package.\n\nWhat\u0027s the reason we define Ax interface in router/router.go? It is the source that makes the base package depends on axrouter subpackage. If we move the interface to axrouter subpackage, do we solve the problem and the code in sharedrouter can be placed back in the router package. Please correct me if I\u0027m too naive.",
      "parentUuid": "9bf2bf89_3a8d9fa7",
      "revId": "d8edc0e2385be84cec6f0075cb92460f43bfcbd1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e3aed75c_c51c5ff0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1432127
      },
      "writtenOn": "2021-08-24T23:34:33Z",
      "side": 1,
      "message": "Done. I think it\u0027s reasonable to separate the interfaces out if it allows us to break the import cycle.",
      "parentUuid": "f8774497_6c282043",
      "revId": "d8edc0e2385be84cec6f0075cb92460f43bfcbd1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e33a7651_4eaf6907",
        "filename": "src/chromiumos/tast/remote/wificell/router/axrouter/ax_router.go",
        "patchSetId": 8
      },
      "lineNbr": 105,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2021-08-24T09:15:17Z",
      "side": 1,
      "message": "After seeing the caller, how about naming it as RetrieveConfig?\n\nWhen we say \"save configuration on some device\", it often means the configuration is applied and stored to the device.",
      "revId": "d8edc0e2385be84cec6f0075cb92460f43bfcbd1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7af0100_d1a072f4",
        "filename": "src/chromiumos/tast/remote/wificell/router/axrouter/ax_router.go",
        "patchSetId": 8
      },
      "lineNbr": 114,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2021-08-24T09:15:17Z",
      "side": 1,
      "message": "saves and applies the configuration to the router",
      "range": {
        "startLine": 114,
        "startChar": 24,
        "endLine": 114,
        "endChar": 108
      },
      "revId": "d8edc0e2385be84cec6f0075cb92460f43bfcbd1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "94c2bcb5_f323cda6",
        "filename": "src/chromiumos/tast/remote/wificell/router/axrouter/ax_router.go",
        "patchSetId": 8
      },
      "lineNbr": 114,
      "author": {
        "id": 1432127
      },
      "writtenOn": "2021-08-24T23:34:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b7af0100_d1a072f4",
      "range": {
        "startLine": 114,
        "startChar": 24,
        "endLine": 114,
        "endChar": 108
      },
      "revId": "d8edc0e2385be84cec6f0075cb92460f43bfcbd1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d295d5f_98d5b479",
        "filename": "src/chromiumos/tast/remote/wificell/router/axrouter/ax_router.go",
        "patchSetId": 8
      },
      "lineNbr": 115,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2021-08-24T09:15:17Z",
      "side": 1,
      "message": "UpdateConfig() or just Update() as caller knows what to be updated according to the parameter type.",
      "range": {
        "startLine": 115,
        "startChar": 25,
        "endLine": 115,
        "endChar": 45
      },
      "revId": "d8edc0e2385be84cec6f0075cb92460f43bfcbd1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e0cd7aa_7cf1faaf",
        "filename": "src/chromiumos/tast/remote/wificell/router/axrouter/ax_router.go",
        "patchSetId": 8
      },
      "lineNbr": 115,
      "author": {
        "id": 1432127
      },
      "writtenOn": "2021-08-24T23:34:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7d295d5f_98d5b479",
      "range": {
        "startLine": 115,
        "startChar": 25,
        "endLine": 115,
        "endChar": 45
      },
      "revId": "d8edc0e2385be84cec6f0075cb92460f43bfcbd1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}