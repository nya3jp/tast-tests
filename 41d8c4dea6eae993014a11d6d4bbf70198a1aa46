{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4ca8cb17_bb46e441",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1540282
      },
      "writtenOn": "2022-10-03T23:23:04Z",
      "side": 1,
      "message": "Please review, thanks!",
      "revId": "41d8c4dea6eae993014a11d6d4bbf70198a1aa46",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "67060747_62a88d9a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000623
      },
      "writtenOn": "2022-10-04T00:56:17Z",
      "side": 1,
      "message": "xiyuan for thoughts",
      "revId": "41d8c4dea6eae993014a11d6d4bbf70198a1aa46",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eebdc373_c680af4d",
        "filename": "src/chromiumos/tast/local/chrome/cuj/get_drive_url.go",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1319142
      },
      "writtenOn": "2022-10-04T20:55:09Z",
      "side": 1,
      "message": "End with a period.",
      "range": {
        "startLine": 23,
        "startChar": 38,
        "endLine": 23,
        "endChar": 44
      },
      "revId": "41d8c4dea6eae993014a11d6d4bbf70198a1aa46",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "895a6227_bd4cc4ff",
        "filename": "src/chromiumos/tast/local/chrome/cuj/get_drive_url.go",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1319142
      },
      "writtenOn": "2022-10-04T20:55:09Z",
      "side": 1,
      "message": "const (\n\t\t// DriveTypeDocs represents Google Docs.\n\t\tDriveTypeDocs DriveType \u003d \"document\"\n\n\t\t// DriveTypeSlides represents Google Slides.\n\t\tDriveTypeSlides DriveType \u003d \"presentation\"\n\n\t\t// DriveTypeSheets represents Google Sheets.\n\t\tDriveTypeSheets DriveType \u003d \"spreadsheets\"\n\t)\n\n\t// driveFile contains blah blah blah\n\ttype driveFile struct {\n\t\tfileType DriveType\n\t\tids      []string\n\t}\nThis way, `GetDriveURL` can simply pass `dt` directly to `fmt.Sprintf`.",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 36,
        "endChar": 1
      },
      "revId": "41d8c4dea6eae993014a11d6d4bbf70198a1aa46",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "291b374e_b9325def",
        "filename": "src/chromiumos/tast/local/chrome/cuj/get_drive_url.go",
        "patchSetId": 2
      },
      "lineNbr": 110,
      "author": {
        "id": 1000623
      },
      "writtenOn": "2022-10-04T00:56:17Z",
      "side": 1,
      "message": "I know this isn\u0027t new code, but I wonder if we can use some pseudo random algorithm instead, like hashing the device name. Randomness could add flake instead of persistent failures if something goes wrong with 1 copy perhaps?\n\nA stable pseudo-random number generator function would be generally useful as well.",
      "revId": "41d8c4dea6eae993014a11d6d4bbf70198a1aa46",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09b7312e_2ced72d4",
        "filename": "src/chromiumos/tast/local/chrome/cuj/get_drive_url.go",
        "patchSetId": 2
      },
      "lineNbr": 110,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2022-10-04T16:49:13Z",
      "side": 1,
      "message": "Agree. Let\u0027s make this deterministic instead of random. One possibility is that we hash (md5, or sha) on sku (or model), convert that into an int (e.g. using `binary.BigEndian.Uint64`, then mod by `len(file.ids)` .\n\nsku-id via crosconfig, not sure whether sku-id is the same as sku string though.\nhttps://source.corp.google.com/chromeos_public/src/platform/dev/src/chromiumos/test/dut/internal/dutidentity.go;rcl\u003d8b0fc37c66d7260fab6f2e8f1b57bedb4b6cc253;l\u003d45\n\nsku_number from vpd:\nhttps://source.corp.google.com/chromeos_public/src/platform/tast-tests/src/chromiumos/tast/local/bundles/cros/telemetryextension/hp_compliance.go;rcl\u003d268acae4a21843a4944af5feff733bfb325c8b72;l\u003d64\n\nmodel from crosconfig\nhttps://source.corp.google.com/chromeos_public/src/platform/tast-tests/src/chromiumos/tast/local/bundles/cros/audio/alsa_conformance.go;rcl\u003d6067a81d6dd8795353b8e831d9e3f4a7996c88ae;l\u003d74\n\n\ncrosconfig doc in case we want to check what else could be used:\nhttps://chromium.googlesource.com/chromiumos/platform2/+/HEAD/chromeos-config/README.md",
      "parentUuid": "291b374e_b9325def",
      "revId": "41d8c4dea6eae993014a11d6d4bbf70198a1aa46",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c24d89db_e1f5340d",
        "filename": "src/chromiumos/tast/local/chrome/cuj/get_drive_url.go",
        "patchSetId": 2
      },
      "lineNbr": 110,
      "author": {
        "id": 1319142
      },
      "writtenOn": "2022-10-04T20:38:55Z",
      "side": 1,
      "message": "If you simply mod by `len(file.ids)` then I don\u0027t think the probability distribution will be exactly uniform. It may be better to use the sku/model hash to seed a random number generator and then use it to generate a random index into `file.ids`. That would still be deterministic, always producing the same result for each device (which I think is a good idea).",
      "parentUuid": "09b7312e_2ced72d4",
      "revId": "41d8c4dea6eae993014a11d6d4bbf70198a1aa46",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "423a83e1_f4f8c637",
        "filename": "src/chromiumos/tast/local/chrome/cuj/get_drive_url.go",
        "patchSetId": 2
      },
      "lineNbr": 110,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2022-10-04T20:52:41Z",
      "side": 1,
      "message": "I would think that hash such as md5, sha256 should have uniformity. Otherwise, they would have good chance to be broken that people could use the unbalanced distribution to reverse something have the same hash.\n\nIt is not necessary to go through a random number generator when we would only use it to generate only one number.",
      "parentUuid": "c24d89db_e1f5340d",
      "revId": "41d8c4dea6eae993014a11d6d4bbf70198a1aa46",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1b82a95_aec33bb2",
        "filename": "src/chromiumos/tast/local/chrome/cuj/get_drive_url.go",
        "patchSetId": 2
      },
      "lineNbr": 110,
      "author": {
        "id": 1319142
      },
      "writtenOn": "2022-10-04T20:55:09Z",
      "side": 1,
      "message": "But imagine you have a uniform random number between 0 and 9 and then you mod it by 7. Do you get a uniform random number between 0 and 6?",
      "parentUuid": "423a83e1_f4f8c637",
      "revId": "41d8c4dea6eae993014a11d6d4bbf70198a1aa46",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}