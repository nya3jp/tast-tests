{
  "comments": [
    {
      "key": {
        "uuid": "e6f1b4bf_5820fdd3",
        "filename": "src/chromiumos/tast/local/graphics/utils.go",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-07-24T00:27:06Z",
      "side": 1,
      "message": "nit: i\u0027d put this on the end of the previous line to make the code easier to read. not sure if you saw my comment on an earlier change, but go doesn\u0027t have any line-length limits and encourages making lines longer if it improves readability.",
      "revId": "d90284372e1698d7a3b86c123fdc1af9f2beb025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22664c13_52346d78",
        "filename": "src/chromiumos/tast/local/graphics/utils.go",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1273510
      },
      "writtenOn": "2018-07-24T01:57:41Z",
      "side": 1,
      "message": "Done. I was just afraid of it looking bad in Gerrit.",
      "parentUuid": "e6f1b4bf_5820fdd3",
      "revId": "d90284372e1698d7a3b86c123fdc1af9f2beb025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fb89fcd0_1e1723dc",
        "filename": "src/chromiumos/tast/local/graphics/utils.go",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-07-24T05:19:02Z",
      "side": 1,
      "message": "it\u0027ll probably be read more times later in devs\u0027 editors than the once that i look at it in gerrit :-)",
      "parentUuid": "22664c13_52346d78",
      "revId": "d90284372e1698d7a3b86c123fdc1af9f2beb025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9c26557_6d6d0c05",
        "filename": "src/chromiumos/tast/local/graphics/utils.go",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-07-24T00:27:06Z",
      "side": 1,
      "message": "if you\u0027re trying to check if it exists, please use os.Stat:\n\n  if _, err :\u003d os.Stat(...); err \u003d\u003d nil {\n      hasVulkan \u003d true\n      break\n  } else if !os.IsNotExist(err) {\n      return false, fmt.Errorf(...)\n  }",
      "revId": "d90284372e1698d7a3b86c123fdc1af9f2beb025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "216fe396_b4696acb",
        "filename": "src/chromiumos/tast/local/graphics/utils.go",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1273510
      },
      "writtenOn": "2018-07-24T01:57:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b9c26557_6d6d0c05",
      "revId": "d90284372e1698d7a3b86c123fdc1af9f2beb025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3284b5c7_5310ac9e",
        "filename": "src/chromiumos/tast/local/graphics/utils.go",
        "patchSetId": 1
      },
      "lineNbr": 130,
      "author": {
        "id": 1273510
      },
      "writtenOn": "2018-07-23T19:01:17Z",
      "side": 1,
      "message": "Would it be worth mocking the filesystem as in https://stackoverflow.com/a/16742530 to test this function?",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 130,
        "endChar": 1
      },
      "revId": "d90284372e1698d7a3b86c123fdc1af9f2beb025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87f4ba99_c607465f",
        "filename": "src/chromiumos/tast/local/graphics/utils.go",
        "patchSetId": 1
      },
      "lineNbr": 130,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-07-24T00:27:06Z",
      "side": 1,
      "message": "i think it\u0027s probably overkill. iterating over a list of paths is pretty straightforward and seems unlikely to break. if you really want to test it, you could move the code that iterates into an unexported function that additionally takes a root path, and then pass \u0027/\u0027 when calling it from SupportsVulkan and pass a temp dir when calling it from your unit tests",
      "parentUuid": "3284b5c7_5310ac9e",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 130,
        "endChar": 1
      },
      "revId": "d90284372e1698d7a3b86c123fdc1af9f2beb025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf9ec2d4_8ed6baaa",
        "filename": "src/chromiumos/tast/local/graphics/utils.go",
        "patchSetId": 1
      },
      "lineNbr": 130,
      "author": {
        "id": 1273510
      },
      "writtenOn": "2018-07-24T01:57:41Z",
      "side": 1,
      "message": "You\u0027re right. It seems overkill. I\u0027ll leave it as-is.",
      "parentUuid": "87f4ba99_c607465f",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 130,
        "endChar": 1
      },
      "revId": "d90284372e1698d7a3b86c123fdc1af9f2beb025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de107ad1_5513d287",
        "filename": "src/chromiumos/tast/local/graphics/utils.go",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-07-24T00:27:06Z",
      "side": 1,
      "message": "what\u0027s going to consume the api names? if the callers won\u0027t treat them as opaque values that get passed somewhere else (e.g. back into this package), i\u0027d recommend exporting them either as constants or as enums (as described in the earlier change, i think)",
      "revId": "d90284372e1698d7a3b86c123fdc1af9f2beb025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49b51b6c_71166813",
        "filename": "src/chromiumos/tast/local/graphics/utils.go",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 1273510
      },
      "writtenOn": "2018-07-24T01:57:41Z",
      "side": 1,
      "message": "I\u0027ve exported it as enums. The identifiers are not opaque. For example, in graphics_dEQP.py, we must get the API from the name of the test. Then, we must check if what we get is in the list of supported APIs (returned here).",
      "parentUuid": "de107ad1_5513d287",
      "revId": "d90284372e1698d7a3b86c123fdc1af9f2beb025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ede196a_5dabf6cb",
        "filename": "src/chromiumos/tast/local/graphics/utils.go",
        "patchSetId": 1
      },
      "lineNbr": 137,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-07-24T00:27:06Z",
      "side": 1,
      "message": "nit: i\u0027d avoid allocating the slice until you actually need it. you can change this to:\n\n  var apis []string{}\n\n, which is nil by default. if the caller calls len() on a nil slice, they\u0027ll get 0.",
      "revId": "d90284372e1698d7a3b86c123fdc1af9f2beb025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0b2f91d_ba0cbc7c",
        "filename": "src/chromiumos/tast/local/graphics/utils.go",
        "patchSetId": 1
      },
      "lineNbr": 137,
      "author": {
        "id": 1273510
      },
      "writtenOn": "2018-07-24T01:57:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7ede196a_5dabf6cb",
      "revId": "d90284372e1698d7a3b86c123fdc1af9f2beb025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "33babafc_ae9fdb4c",
        "filename": "src/chromiumos/tast/local/graphics/utils.go",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-07-24T00:27:06Z",
      "side": 1,
      "message": "if this is just used internally, please don\u0027t export it: deqpExecutable\n\nbut since this is just a map lookup, you don\u0027t need a function. instead, declare the map as a global and index into it as needed:\n\n  var deqpExecutableMap map[string]string \u003d map[string]string {\n      ...\n  }\n\nor even put this directly into SupportsVulkanForDEQP if that\u0027s going to be the only user",
      "range": {
        "startLine": 156,
        "startChar": 5,
        "endLine": 156,
        "endChar": 19
      },
      "revId": "d90284372e1698d7a3b86c123fdc1af9f2beb025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb4c1873_aa7640eb",
        "filename": "src/chromiumos/tast/local/graphics/utils.go",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 1273510
      },
      "writtenOn": "2018-07-24T01:57:41Z",
      "side": 1,
      "message": "It\u0027s not just used internally: the DEQP test suite needs to get the right executable. That said, I like the map idea.",
      "parentUuid": "33babafc_ae9fdb4c",
      "range": {
        "startLine": 156,
        "startChar": 5,
        "endLine": 156,
        "endChar": 19
      },
      "revId": "d90284372e1698d7a3b86c123fdc1af9f2beb025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ebfe99f_c2cbb05c",
        "filename": "src/chromiumos/tast/local/graphics/utils_test.go",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-07-24T00:27:06Z",
      "side": 1,
      "message": "nit: just write the function call directly:\n\n  t.Errorf(\"SupportedAPIs(%v, %v, %v) \u003d %v; want %v\", ...)",
      "range": {
        "startLine": 157,
        "startChar": 15,
        "endLine": 157,
        "endChar": 44
      },
      "revId": "d90284372e1698d7a3b86c123fdc1af9f2beb025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "798dd0a6_66febbbb",
        "filename": "src/chromiumos/tast/local/graphics/utils_test.go",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 1273510
      },
      "writtenOn": "2018-07-24T01:57:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0ebfe99f_c2cbb05c",
      "range": {
        "startLine": 157,
        "startChar": 15,
        "endLine": 157,
        "endChar": 44
      },
      "revId": "d90284372e1698d7a3b86c123fdc1af9f2beb025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9207d2c_797c169f",
        "filename": "src/chromiumos/tast/local/graphics/utils_test.go",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-07-24T00:27:06Z",
      "side": 1,
      "message": "nit: same here\n\nbut you probably don\u0027t need this case, right? you can treat a nil return value the same as an empty slice.",
      "revId": "d90284372e1698d7a3b86c123fdc1af9f2beb025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "523b94ac_edb50a8a",
        "filename": "src/chromiumos/tast/local/graphics/utils_test.go",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 1273510
      },
      "writtenOn": "2018-07-24T01:57:41Z",
      "side": 1,
      "message": "My problem when I don\u0027t handle nil separately is that %v doesn\u0027t show nil like I would like it to. For example, if SupportedAPIs returns an empty non-nil slice and the expected is a nil, then I would see the following in go test -v:\n\nSupportedAPIs(1, 0, false) \u003d []; want []\n\nWhich is misleading. What\u0027s the best way to solve this? I could create a function to transform an expected slice into a string.",
      "parentUuid": "d9207d2c_797c169f",
      "revId": "d90284372e1698d7a3b86c123fdc1af9f2beb025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f18e5a01_8352856c",
        "filename": "src/chromiumos/tast/local/graphics/utils_test.go",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-07-24T05:19:02Z",
      "side": 1,
      "message": "in general, i wouldn\u0027t worry about testing whether a function returns nil vs. an empty slice. if a caller iterates over it with \u0027range\u0027 or calls len(), the behavior will be the same in either case.\n\ni guess that the issue that you\u0027re running into here is that the test uses reflect.DeepEqual, which doesn\u0027t treat the two as equivalent, right? i\u0027d maybe just do something hacky like:\n\n  if len(expected) \u003d\u003d 0 {\n      expected \u003d nil\n  }\n\nto match the function\u0027s behavior here -- that feels a bit cleaner to me than adding an additional assertion to handle the nil case.\n\nother approaches include:\n- switch test case struct to contain []string{}; then you can expect either empty slices or nil as needed\n- for the comparison, use strings.Join(actual, \" \") !\u003d expected",
      "parentUuid": "523b94ac_edb50a8a",
      "revId": "d90284372e1698d7a3b86c123fdc1af9f2beb025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}