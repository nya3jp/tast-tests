{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bcd48099_d4eb7240",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1310383
      },
      "writtenOn": "2022-11-09T00:00:16Z",
      "side": 1,
      "message": "Overall this is LGTM, just have a couple questions whenever you have a moment! :)",
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d39310b_3909da34",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1310383
      },
      "writtenOn": "2022-11-09T00:30:22Z",
      "side": 1,
      "message": "LGTM with just these last nits/comments!",
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fee5ccc1_e5be584e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1310383
      },
      "writtenOn": "2022-11-09T16:07:08Z",
      "side": 1,
      "message": "Adding a couple comments to some of the open questions :) please let me know if anything is unclear!",
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43d70ba1_028b92d8",
        "filename": "src/chromiumos/tast/local/bundles/cros/oobe/hid_screen_service.go",
        "patchSetId": 14
      },
      "lineNbr": 34,
      "author": {
        "id": 1431492
      },
      "writtenOn": "2022-11-09T00:44:45Z",
      "side": 1,
      "message": "My question was \"why\"? Why can\u0027t we just a new one for all API call? Also, if we have to have one for all APIs, the service should have APIs responsible for create and destroy.",
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfe7677a_61477887",
        "filename": "src/chromiumos/tast/local/bundles/cros/oobe/hid_screen_service.go",
        "patchSetId": 14
      },
      "lineNbr": 34,
      "author": {
        "id": 1310383
      },
      "writtenOn": "2022-11-09T16:07:08Z",
      "side": 1,
      "message": "The reason we have to use `sharedObject` here is that we are not instantiating Chrome and without this reference I don\u0027t believe that we would be able to access the running instance of Chrome. We had opted to use the existing ChromeService [1] for instantiating Chrome and go this route after observing other services doing similar things [2]. I think that if we went the route of having this service instantiate/destroy Chrome we would end up duplicating the logic for managing Chrome-- WDYT?\n\n[1] https://source.chromium.org/chromiumos/chromiumos/codesearch/+/main:src/platform/tast-tests/src/chromiumos/tast/local/bundles/cros/ui/chrome_service.go\n[2] https://source.chromium.org/search?q\u003dfile:_service.go%20%22sharedObject%20*common.SharedObjectsForService%22\u0026sq\u003d\u0026ss\u003dchromiumos%2Fchromiumos%2Fcodesearch:src%2Fplatform%2Ftast-tests%2Fsrc%2Fchromiumos%2Ftast%2Flocal%2F",
      "parentUuid": "43d70ba1_028b92d8",
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5224fdd7_066ec726",
        "filename": "src/chromiumos/tast/local/bundles/cros/oobe/hid_screen_service.go",
        "patchSetId": 14
      },
      "lineNbr": 38,
      "author": {
        "id": 1431492
      },
      "writtenOn": "2022-11-09T01:07:16Z",
      "side": 1,
      "message": "Can we do \n\n```\ncr, err :\u003d chrome.New(ctx, ..)\ndefer cr.Close(ctx)\n```\n\nhere and yield the desired result?",
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a708bd7f_c4df9176",
        "filename": "src/chromiumos/tast/local/bundles/cros/oobe/hid_screen_service.go",
        "patchSetId": 14
      },
      "lineNbr": 38,
      "author": {
        "id": 1310383
      },
      "writtenOn": "2022-11-09T16:07:08Z",
      "side": 1,
      "message": "Would this result in Chrome being instantiated/destroyed with each of these method calls? Since these will be called multiple times in a single test this might be a significant slowdown compared to instantiating once and re-using (via ChromeService).",
      "parentUuid": "5224fdd7_066ec726",
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f98ec9ba_b8c20130",
        "filename": "src/chromiumos/tast/local/bundles/cros/oobe/hid_screen_service.go",
        "patchSetId": 14
      },
      "lineNbr": 46,
      "author": {
        "id": 1310383
      },
      "writtenOn": "2022-11-09T00:00:16Z",
      "side": 1,
      "message": "Can we move this logic into a simple helper method (can define this method on line 36) and use it here and in the other methods?\n\n    func (svc *HidScreenService) getOOBEConnection(ctx context.Context) (*chrome.Conn, error) {\n        cr :\u003d svc.sharedObject.Chrome\n        if cr \u003d\u003d nil {\n            return nil, errors.New(\"Chrome is not instantiated\")\n        }\n        return cr.WaitForOOBEConnection(ctx)\n    }\n        \n    ...\n    \n    oobeConn, err :\u003d svc.getOOBEConnection(ctx)\n    if err !\u003d nil {\n        return \u0026empty.Empty{}, errors.Wrap(err, \"failed to create OOBE connection\")\n    }",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 46,
        "endChar": 2
      },
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "167a7a5a_beb8f311",
        "filename": "src/chromiumos/tast/local/bundles/cros/oobe/hid_screen_service.go",
        "patchSetId": 14
      },
      "lineNbr": 86,
      "author": {
        "id": 1310383
      },
      "writtenOn": "2022-11-09T00:00:16Z",
      "side": 1,
      "message": "Will this create a new mouse, or does it actually find the previously created mouse? If it creates a new mouse it seems like we might hit a situation where we cannot close a mouse opened via `ConnectAndVerifyMouse`?",
      "range": {
        "startLine": 86,
        "startChar": 1,
        "endLine": 86,
        "endChar": 34
      },
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c503dc50_3c0bad7d",
        "filename": "src/chromiumos/tast/local/bundles/cros/oobe/hid_screen_service.go",
        "patchSetId": 14
      },
      "lineNbr": 86,
      "author": {
        "id": 1310383
      },
      "writtenOn": "2022-11-09T00:30:22Z",
      "side": 1,
      "message": "As discussed offline I was thinking we had wanted them to be left open in some of the methods, but since we added the checks we would have performed had they been left open we are able to close before returning.",
      "parentUuid": "167a7a5a_beb8f311",
      "range": {
        "startLine": 86,
        "startChar": 1,
        "endLine": 86,
        "endChar": 34
      },
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92c59fce_a6520c23",
        "filename": "src/chromiumos/tast/local/bundles/cros/oobe/hid_screen_service.go",
        "patchSetId": 14
      },
      "lineNbr": 90,
      "author": {
        "id": 1310383
      },
      "writtenOn": "2022-11-09T00:30:22Z",
      "side": 1,
      "message": "Nit: Remove since we explicitly close on line 100.",
      "range": {
        "startLine": 90,
        "startChar": 1,
        "endLine": 90,
        "endChar": 23
      },
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "525bcf85_3e83920b",
        "filename": "src/chromiumos/tast/local/bundles/cros/oobe/hid_screen_service.go",
        "patchSetId": 14
      },
      "lineNbr": 166,
      "author": {
        "id": 1310383
      },
      "writtenOn": "2022-11-09T00:30:22Z",
      "side": 1,
      "message": "Nit: Same as above.",
      "range": {
        "startLine": 166,
        "startChar": 1,
        "endLine": 166,
        "endChar": 26
      },
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07ba127a_aff84321",
        "filename": "src/chromiumos/tast/services/cros/oobe/hid_screen_service.proto",
        "patchSetId": 14
      },
      "lineNbr": 34,
      "author": {
        "id": 1310383
      },
      "writtenOn": "2022-11-09T00:00:16Z",
      "side": 1,
      "message": "Nit: Remove extra line here and on line 14.",
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}