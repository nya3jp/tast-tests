{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bcd48099_d4eb7240",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1310383
      },
      "writtenOn": "2022-11-09T00:00:16Z",
      "side": 1,
      "message": "Overall this is LGTM, just have a couple questions whenever you have a moment! :)",
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d39310b_3909da34",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1310383
      },
      "writtenOn": "2022-11-09T00:30:22Z",
      "side": 1,
      "message": "LGTM with just these last nits/comments!",
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fee5ccc1_e5be584e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1310383
      },
      "writtenOn": "2022-11-09T16:07:08Z",
      "side": 1,
      "message": "Adding a couple comments to some of the open questions :) please let me know if anything is unclear!",
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dad925a1_41ebec3f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1431492
      },
      "writtenOn": "2022-11-09T19:59:27Z",
      "side": 1,
      "message": "I have a chat with Theo on Nov 8th to discuss this test. First thing I want to mention is that I misunderstood what the test was for at the beginning. I thought the test would simulation a hibernation for the DUT which would make the DUT to be disconnected for a period of time. That\u0027s why I have suggested to use a remote test at the beginning because a local test is running on the DUT and any disruption will make the test fail. However, Theo clarified the objective of the test and I realized that I misunstood the nature of the test. Sorry about it.\n\nNow, come back the discussion of various topic regarding this test.\n\n1. Remote Test vs Local Test\n\nA remote test is inside a remote test bundle which is running on the drone/desktop/cloudtop which is in the same machine where you run Tast. A local test is inside a local test bundle which is running on DUT.\n\nhttps://docs.google.com/presentation/d/17SIeaC-8XhGD-NjcYCiv7DuPLMKR0LgdEeIK335BiZc/preview?slide\u003did.g142b8b30304_1_293\n\nWe usually prefer to write local test because it can have direct access to the Chrome and DUT. Also, it can be run with minimal network latency. We usually use remote tests when there is a possible disruption in the connectivity of the DUT. One good example is that a test requires a DUT to be reboot. Since local tests are running in a local bundle process which will be terminated during reboot. Therefore, remote tests are the only option in case like this.\n\n2. GRPC services\n\nIn many cases, remote tests have to run some Go functions on the DUT, possibly calling some support libraries for local tests (e.g. the chrome package). For this purpose, Tast supports defining, implementing, and calling into gRPC services.\n\nhttps://chromium.googlesource.com/chromiumos/platform/tast/+/HEAD/docs/writing_tests.md#remote-procedure-calls-with-grpc\n\nSince each GRPC api call requires sending of a request to the DUT and waiting for a response, it can be volunerable to the network disruption and latency. Therefore, IMHO, we should limit the number of GRPC calls. If a remote test wants the DUT to do 10 things, it is will better to have a GRPC API to do 10 things instead of making 10 GPRC calls to do 10 things.\n\n3. Stateless vs Stateful\n\nA GRPC server can serve multiple clients. It will be much better to make the API to be stateless. Let use this CL as an example. If the APIs are stateful, we need to consider following questions. Which test/fixture is going to create the Chrome connection? Who is going to do the cleanup? What happen if the service crash in the middle? Let\u0027s say we have 5 tests depending on this service and they are running one after another. If the service crash and test fail, who is going to take care of the clean and restart. Also, what happen to those tests running after these 5 tests? If the chrome session does not clean up correctly, will it affect those tests to get consistent result.\n\nAfter my discussion with Theo, I think making this test local would avoid a lot of issues that we need to deal with. Also, it will make the test less flaky.\n\nWe can have a meeting to discuss further.\n\nI also CC @jessemcguire@google.com and @nya@chromium.org just in case they have any opinions. Thanks.",
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "df1db5cb_2503a2dd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1394700
      },
      "writtenOn": "2022-11-11T17:15:20Z",
      "side": 1,
      "message": "Thanks for the clarification i went ahead and updated this cl to use a remote fixture!",
      "parentUuid": "dad925a1_41ebec3f",
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43d70ba1_028b92d8",
        "filename": "src/chromiumos/tast/local/bundles/cros/oobe/hid_screen_service.go",
        "patchSetId": 14
      },
      "lineNbr": 34,
      "author": {
        "id": 1431492
      },
      "writtenOn": "2022-11-09T00:44:45Z",
      "side": 1,
      "message": "My question was \"why\"? Why can\u0027t we just a new one for all API call? Also, if we have to have one for all APIs, the service should have APIs responsible for create and destroy.",
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfe7677a_61477887",
        "filename": "src/chromiumos/tast/local/bundles/cros/oobe/hid_screen_service.go",
        "patchSetId": 14
      },
      "lineNbr": 34,
      "author": {
        "id": 1310383
      },
      "writtenOn": "2022-11-09T16:07:08Z",
      "side": 1,
      "message": "The reason we have to use `sharedObject` here is that we are not instantiating Chrome and without this reference I don\u0027t believe that we would be able to access the running instance of Chrome. We had opted to use the existing ChromeService [1] for instantiating Chrome and go this route after observing other services doing similar things [2]. I think that if we went the route of having this service instantiate/destroy Chrome we would end up duplicating the logic for managing Chrome-- WDYT?\n\n[1] https://source.chromium.org/chromiumos/chromiumos/codesearch/+/main:src/platform/tast-tests/src/chromiumos/tast/local/bundles/cros/ui/chrome_service.go\n[2] https://source.chromium.org/search?q\u003dfile:_service.go%20%22sharedObject%20*common.SharedObjectsForService%22\u0026sq\u003d\u0026ss\u003dchromiumos%2Fchromiumos%2Fcodesearch:src%2Fplatform%2Ftast-tests%2Fsrc%2Fchromiumos%2Ftast%2Flocal%2F",
      "parentUuid": "43d70ba1_028b92d8",
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5d93b340_f02e1baf",
        "filename": "src/chromiumos/tast/local/bundles/cros/oobe/hid_screen_service.go",
        "patchSetId": 14
      },
      "lineNbr": 34,
      "author": {
        "id": 1394700
      },
      "writtenOn": "2022-11-11T17:15:20Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "dfe7677a_61477887",
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5224fdd7_066ec726",
        "filename": "src/chromiumos/tast/local/bundles/cros/oobe/hid_screen_service.go",
        "patchSetId": 14
      },
      "lineNbr": 38,
      "author": {
        "id": 1431492
      },
      "writtenOn": "2022-11-09T01:07:16Z",
      "side": 1,
      "message": "Can we do \n\n```\ncr, err :\u003d chrome.New(ctx, ..)\ndefer cr.Close(ctx)\n```\n\nhere and yield the desired result?",
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a708bd7f_c4df9176",
        "filename": "src/chromiumos/tast/local/bundles/cros/oobe/hid_screen_service.go",
        "patchSetId": 14
      },
      "lineNbr": 38,
      "author": {
        "id": 1310383
      },
      "writtenOn": "2022-11-09T16:07:08Z",
      "side": 1,
      "message": "Would this result in Chrome being instantiated/destroyed with each of these method calls? Since these will be called multiple times in a single test this might be a significant slowdown compared to instantiating once and re-using (via ChromeService).",
      "parentUuid": "5224fdd7_066ec726",
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dbceaa78_2de73e31",
        "filename": "src/chromiumos/tast/local/bundles/cros/oobe/hid_screen_service.go",
        "patchSetId": 14
      },
      "lineNbr": 38,
      "author": {
        "id": 1394700
      },
      "writtenOn": "2022-11-11T17:15:20Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a708bd7f_c4df9176",
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f98ec9ba_b8c20130",
        "filename": "src/chromiumos/tast/local/bundles/cros/oobe/hid_screen_service.go",
        "patchSetId": 14
      },
      "lineNbr": 46,
      "author": {
        "id": 1310383
      },
      "writtenOn": "2022-11-09T00:00:16Z",
      "side": 1,
      "message": "Can we move this logic into a simple helper method (can define this method on line 36) and use it here and in the other methods?\n\n    func (svc *HidScreenService) getOOBEConnection(ctx context.Context) (*chrome.Conn, error) {\n        cr :\u003d svc.sharedObject.Chrome\n        if cr \u003d\u003d nil {\n            return nil, errors.New(\"Chrome is not instantiated\")\n        }\n        return cr.WaitForOOBEConnection(ctx)\n    }\n        \n    ...\n    \n    oobeConn, err :\u003d svc.getOOBEConnection(ctx)\n    if err !\u003d nil {\n        return \u0026empty.Empty{}, errors.Wrap(err, \"failed to create OOBE connection\")\n    }",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 46,
        "endChar": 2
      },
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9b943935_00866bbf",
        "filename": "src/chromiumos/tast/local/bundles/cros/oobe/hid_screen_service.go",
        "patchSetId": 14
      },
      "lineNbr": 46,
      "author": {
        "id": 1394700
      },
      "writtenOn": "2022-11-11T21:59:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f98ec9ba_b8c20130",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 46,
        "endChar": 2
      },
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "167a7a5a_beb8f311",
        "filename": "src/chromiumos/tast/local/bundles/cros/oobe/hid_screen_service.go",
        "patchSetId": 14
      },
      "lineNbr": 86,
      "author": {
        "id": 1310383
      },
      "writtenOn": "2022-11-09T00:00:16Z",
      "side": 1,
      "message": "Will this create a new mouse, or does it actually find the previously created mouse? If it creates a new mouse it seems like we might hit a situation where we cannot close a mouse opened via `ConnectAndVerifyMouse`?",
      "range": {
        "startLine": 86,
        "startChar": 1,
        "endLine": 86,
        "endChar": 34
      },
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c503dc50_3c0bad7d",
        "filename": "src/chromiumos/tast/local/bundles/cros/oobe/hid_screen_service.go",
        "patchSetId": 14
      },
      "lineNbr": 86,
      "author": {
        "id": 1310383
      },
      "writtenOn": "2022-11-09T00:30:22Z",
      "side": 1,
      "message": "As discussed offline I was thinking we had wanted them to be left open in some of the methods, but since we added the checks we would have performed had they been left open we are able to close before returning.",
      "parentUuid": "167a7a5a_beb8f311",
      "range": {
        "startLine": 86,
        "startChar": 1,
        "endLine": 86,
        "endChar": 34
      },
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92c59fce_a6520c23",
        "filename": "src/chromiumos/tast/local/bundles/cros/oobe/hid_screen_service.go",
        "patchSetId": 14
      },
      "lineNbr": 90,
      "author": {
        "id": 1310383
      },
      "writtenOn": "2022-11-09T00:30:22Z",
      "side": 1,
      "message": "Nit: Remove since we explicitly close on line 100.",
      "range": {
        "startLine": 90,
        "startChar": 1,
        "endLine": 90,
        "endChar": 23
      },
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "46548517_6d5b4af7",
        "filename": "src/chromiumos/tast/local/bundles/cros/oobe/hid_screen_service.go",
        "patchSetId": 14
      },
      "lineNbr": 90,
      "author": {
        "id": 1394700
      },
      "writtenOn": "2022-11-11T21:59:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "92c59fce_a6520c23",
      "range": {
        "startLine": 90,
        "startChar": 1,
        "endLine": 90,
        "endChar": 23
      },
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "525bcf85_3e83920b",
        "filename": "src/chromiumos/tast/local/bundles/cros/oobe/hid_screen_service.go",
        "patchSetId": 14
      },
      "lineNbr": 166,
      "author": {
        "id": 1310383
      },
      "writtenOn": "2022-11-09T00:30:22Z",
      "side": 1,
      "message": "Nit: Same as above.",
      "range": {
        "startLine": 166,
        "startChar": 1,
        "endLine": 166,
        "endChar": 26
      },
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1a8208e5_b4c31a62",
        "filename": "src/chromiumos/tast/local/bundles/cros/oobe/hid_screen_service.go",
        "patchSetId": 14
      },
      "lineNbr": 166,
      "author": {
        "id": 1394700
      },
      "writtenOn": "2022-11-11T21:59:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "525bcf85_3e83920b",
      "range": {
        "startLine": 166,
        "startChar": 1,
        "endLine": 166,
        "endChar": 26
      },
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07ba127a_aff84321",
        "filename": "src/chromiumos/tast/services/cros/oobe/hid_screen_service.proto",
        "patchSetId": 14
      },
      "lineNbr": 34,
      "author": {
        "id": 1310383
      },
      "writtenOn": "2022-11-09T00:00:16Z",
      "side": 1,
      "message": "Nit: Remove extra line here and on line 14.",
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2adc48ee_be0704d9",
        "filename": "src/chromiumos/tast/services/cros/oobe/hid_screen_service.proto",
        "patchSetId": 14
      },
      "lineNbr": 34,
      "author": {
        "id": 1394700
      },
      "writtenOn": "2022-11-11T21:59:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "07ba127a_aff84321",
      "revId": "4838114a9de8e5972e265ef5873f470edd111cca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}