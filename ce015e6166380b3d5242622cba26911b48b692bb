{
  "comments": [
    {
      "key": {
        "uuid": "4bbeb631_93a1ad09",
        "filename": "src/chromiumos/tast/local/shill/property.go",
        "patchSetId": 4
      },
      "lineNbr": 175,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-09-21T03:37:12Z",
      "side": 1,
      "message": "When writing the example in the other comment, I suddenly find that this is not wrapping... Should be errors.Wrap(ctx.Err(), \"didn\u0027t receive PropertyChanged signal\") for better convenience...",
      "range": {
        "startLine": 175,
        "startChar": 21,
        "endLine": 175,
        "endChar": 90
      },
      "revId": "ce015e6166380b3d5242622cba26911b48b692bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d65414c_2e990dff",
        "filename": "src/chromiumos/tast/local/shill/property.go",
        "patchSetId": 4
      },
      "lineNbr": 205,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-09-21T03:37:12Z",
      "side": 1,
      "message": "This seems to duplicate the logic in Wait. Would be nice to extract shared function. Also, I wonder if we can use Wait directly here. Like:\n\n  done :\u003d make(chan error, 1)\n  bgCtx, cancel :\u003d context.WithCancel(ctx)\n  stop :\u003d func() ([]interface{}, error) {\n    cancel()\n    if err :\u003d \u003c-done; err !\u003d nil \u0026\u0026 !errors.Is(err, bgCtx.Err()) {\n      return nil, err\n    }\n    return propChanges, nil\n  }\n\n  go func(ctx context.Context) {\n    defer close(done)\n    done \u003c- func() error {\n      for {\n        val, err :\u003d pw.WaitAll(ctx, property)\n        if err !\u003d nil {\n          return err\n        }\n        propChanges \u003d append(propChanges, val)\n      }\n    }()\n  }(bgCtx)",
      "range": {
        "startLine": 188,
        "startChar": 1,
        "endLine": 205,
        "endChar": 2
      },
      "revId": "ce015e6166380b3d5242622cba26911b48b692bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5eeec64f_10d0f7a0",
        "filename": "src/chromiumos/tast/remote/wificell/test_fixture.go",
        "patchSetId": 4
      },
      "lineNbr": 952,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-09-21T03:37:12Z",
      "side": 1,
      "message": "Hmm... Can you also include the expected usage of this function (in RoamAPGone, I guess)? This function seems to have a potential misuse/race, for example, the following case:\n\nIn testbody:\n\n  1. Start MonitorShillProperty\n  2. Do something that might emit PropertyChanged\n  2.1. service emit the change\n  2.2. dbus catches the change and return to watcher.\n  3. Stop monitor and check the result.\n\nAssume 2 and 2.1 are synchronous. However, the order of 2.2 and 3 is still unknown so it is possible that we missed the signal just because we stop a little earlier.",
      "revId": "ce015e6166380b3d5242622cba26911b48b692bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}