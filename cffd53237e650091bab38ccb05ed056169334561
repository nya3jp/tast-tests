{
  "comments": [
    {
      "key": {
        "uuid": "cea12118_02fe2bd0",
        "filename": "src/chromiumos/tast/local/graphics/utils_test.go",
        "patchSetId": 7
      },
      "lineNbr": 34,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-07-20T19:23:59Z",
      "side": 1,
      "message": "i suspect that USE flags can\u0027t (and at the very least, shouldn\u0027t) contain whitespace, so i don\u0027t know that testing this makes sense.\n\nif you don\u0027t permit whitespace, then you could change flagsSliceToMap to use strings.Fields() to split a string like \"abc def\" that\u0027s passed to it, which would allow you to just list strings here and get rid of the ugly []string{}s",
      "revId": "cffd53237e650091bab38ccb05ed056169334561",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3adfa26b_4a933c4f",
        "filename": "src/chromiumos/tast/local/graphics/utils_test.go",
        "patchSetId": 7
      },
      "lineNbr": 34,
      "author": {
        "id": 1273510
      },
      "writtenOn": "2018-07-20T20:20:04Z",
      "side": 1,
      "message": "Done, but should I detect/remove spaces in the actual parseUIUseFlags function? It looks like in the Python version, they use strip (not trim), so it would remove all spaces, but it seems to me that that\u0027s too much responsibility for the function?",
      "parentUuid": "cea12118_02fe2bd0",
      "revId": "cffd53237e650091bab38ccb05ed056169334561",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bbba112e_2c4fdfe6",
        "filename": "src/chromiumos/tast/local/graphics/utils_test.go",
        "patchSetId": 7
      },
      "lineNbr": 34,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-07-20T21:46:00Z",
      "side": 1,
      "message": "this file exists for session_manager, so the format is defined by the code at http://cs/chromeos_public/src/platform2/libchromeos-ui/chromeos/ui/chromium_command_builder.cc?l\u003d141 (and the code that writes it). :-P\n\ni guess that that code allows embedded whitespace and doesn\u0027t even trim whitespace at the beginning and ending of each line. feel free to match it here if you want, but there\u0027s no reason to match the python code.\n\n(the file also has a big comment at the top saying that only session_manager should be using it, but people ignore comments and i probably didn\u0027t argue as hard as i should\u0027ve to not use it in other places. :-/)",
      "parentUuid": "3adfa26b_4a933c4f",
      "revId": "cffd53237e650091bab38ccb05ed056169334561",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26cc59e2_33965b6d",
        "filename": "src/chromiumos/tast/local/graphics/utils_test.go",
        "patchSetId": 7
      },
      "lineNbr": 42,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-07-20T19:23:59Z",
      "side": 1,
      "message": "huge nit, but test cases are often inlined into a single loop:\n\n  for _, tc :\u003d range []struct {\n    // struct definition above goes here\n  }{\n    // test cases go here\n  } {\n    // body goes here\n  }\n\nbut feel free to keep what you have here if the syntax feels to tricky",
      "revId": "cffd53237e650091bab38ccb05ed056169334561",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5574fd6_18d46d30",
        "filename": "src/chromiumos/tast/local/graphics/utils_test.go",
        "patchSetId": 7
      },
      "lineNbr": 42,
      "author": {
        "id": 1273510
      },
      "writtenOn": "2018-07-20T20:20:04Z",
      "side": 1,
      "message": "I like it. Done.",
      "parentUuid": "26cc59e2_33965b6d",
      "revId": "cffd53237e650091bab38ccb05ed056169334561",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1233e1e6_93dfd2a8",
        "filename": "src/chromiumos/tast/local/graphics/utils_test.go",
        "patchSetId": 7
      },
      "lineNbr": 43,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-07-20T19:23:59Z",
      "side": 1,
      "message": "i haven\u0027t seen Run used before. does it make a difference here in terms of running time?",
      "revId": "cffd53237e650091bab38ccb05ed056169334561",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd50b86e_f7a865dc",
        "filename": "src/chromiumos/tast/local/graphics/utils_test.go",
        "patchSetId": 7
      },
      "lineNbr": 43,
      "author": {
        "id": 1273510
      },
      "writtenOn": "2018-07-20T20:20:04Z",
      "side": 1,
      "message": "There is not a significant difference in running time, but when using Run, I can run go test -v and see the subtests as shown below. Also, https://blog.golang.org/subtests gave me the impression that this is the idiomatic way of doing table-driven subtests. Apparently, you can filter for specific tests, e.g., go test -v -run TestParseUIUseFlags/EmptyConf. Nonetheless, if desired, for consistency, I can remove the usage of Run.\n\n\u003d\u003d\u003d RUN   TestParseUIUseFlags\n\u003d\u003d\u003d RUN   TestParseUIUseFlags/EmptyConf\n\u003d\u003d\u003d RUN   TestParseUIUseFlags/SingleFlag\n\u003d\u003d\u003d RUN   TestParseUIUseFlags/MultipleFlags\n\u003d\u003d\u003d RUN   TestParseUIUseFlags/EmptyLines\n\u003d\u003d\u003d RUN   TestParseUIUseFlags/ExtraWhitespace\n\u003d\u003d\u003d RUN   TestParseUIUseFlags/CommentLines\n\u003d\u003d\u003d RUN   TestParseUIUseFlags/OnlyComments\n\u003d\u003d\u003d RUN   TestParseUIUseFlags/OnlyWhitespace\n--- PASS: TestParseUIUseFlags (0.00s)\n    --- PASS: TestParseUIUseFlags/EmptyConf (0.00s)\n    --- PASS: TestParseUIUseFlags/SingleFlag (0.00s)\n    --- PASS: TestParseUIUseFlags/MultipleFlags (0.00s)\n    --- PASS: TestParseUIUseFlags/EmptyLines (0.00s)\n    --- PASS: TestParseUIUseFlags/ExtraWhitespace (0.00s)\n    --- PASS: TestParseUIUseFlags/CommentLines (0.00s)\n    --- PASS: TestParseUIUseFlags/OnlyComments (0.00s)\n    --- PASS: TestParseUIUseFlags/OnlyWhitespace (0.00s)\nPASS\nok  \tchromiumos/tast/local/graphics\t0.011s",
      "parentUuid": "1233e1e6_93dfd2a8",
      "revId": "cffd53237e650091bab38ccb05ed056169334561",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "32d67fa1_a57f2b1b",
        "filename": "src/chromiumos/tast/local/graphics/utils_test.go",
        "patchSetId": 7
      },
      "lineNbr": 43,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-07-20T21:46:00Z",
      "side": 1,
      "message": "thanks for the detail. this seems fine to me!",
      "parentUuid": "cd50b86e_f7a865dc",
      "revId": "cffd53237e650091bab38ccb05ed056169334561",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "95a2c8d8_2afaa84e",
        "filename": "src/chromiumos/tast/local/graphics/utils_test.go",
        "patchSetId": 7
      },
      "lineNbr": 48,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-07-20T19:23:59Z",
      "side": 1,
      "message": "add\n\n  defer os.Remove(f.Name())\n\nhere and then remove the os.Remove call at the end; otherwise you leak the file with earlier Fatal calls.\n\ndeferred code runs when the function exits (including by panicking), so you can use it here since this is all in a function that\u0027s passed to t.Run.",
      "revId": "cffd53237e650091bab38ccb05ed056169334561",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3acbc905_e578b0ad",
        "filename": "src/chromiumos/tast/local/graphics/utils_test.go",
        "patchSetId": 7
      },
      "lineNbr": 48,
      "author": {
        "id": 1273510
      },
      "writtenOn": "2018-07-20T20:20:04Z",
      "side": 1,
      "message": "Done, although I still want to show an error if the file can\u0027t be deleted.\n\nAlso, I would still be leaking if the test process gets a signal, right?",
      "parentUuid": "95a2c8d8_2afaa84e",
      "revId": "cffd53237e650091bab38ccb05ed056169334561",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "527b7c13_4f2cca14",
        "filename": "src/chromiumos/tast/local/graphics/utils_test.go",
        "patchSetId": 7
      },
      "lineNbr": 53,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-07-20T19:23:59Z",
      "side": 1,
      "message": "f.Close() here?",
      "revId": "cffd53237e650091bab38ccb05ed056169334561",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e22c9569_9e8abd12",
        "filename": "src/chromiumos/tast/local/graphics/utils_test.go",
        "patchSetId": 7
      },
      "lineNbr": 53,
      "author": {
        "id": 1273510
      },
      "writtenOn": "2018-07-20T20:20:04Z",
      "side": 1,
      "message": "Done. I wasn\u0027t sure if f.WriteString would flush automatically.",
      "parentUuid": "527b7c13_4f2cca14",
      "revId": "cffd53237e650091bab38ccb05ed056169334561",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca905430_4117917c",
        "filename": "src/chromiumos/tast/local/graphics/utils_test.go",
        "patchSetId": 7
      },
      "lineNbr": 53,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-07-20T21:46:00Z",
      "side": 1,
      "message": "the most common pattern is to use \"defer f.Close()\" right after creating/opening succeeds, but yeah, that doesn\u0027t help if you want to read the file before then. using ioutil.WriteFile might feel cleaner",
      "parentUuid": "e22c9569_9e8abd12",
      "revId": "cffd53237e650091bab38ccb05ed056169334561",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1a9db36_bcf9ed03",
        "filename": "src/chromiumos/tast/local/graphics/utils_test.go",
        "patchSetId": 7
      },
      "lineNbr": 60,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-07-20T19:23:59Z",
      "side": 1,
      "message": "reflect.DeepEqual handles nil, doesn\u0027t it? if so, i think you can just do this instead:\n\n  if !reflect.DeepEqual(actual, expected) {\n      t.Errorf(\"parseUIUseFlags on %q \u003d %v; want %v\", tc.conf, actual, expected)\n  }\n\n(see test string guidelines at https://github.com/golang/go/wiki/CodeReviewComments#useful-test-failures)",
      "revId": "cffd53237e650091bab38ccb05ed056169334561",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3eddaaa_c1b8d3ee",
        "filename": "src/chromiumos/tast/local/graphics/utils_test.go",
        "patchSetId": 7
      },
      "lineNbr": 60,
      "author": {
        "id": 1273510
      },
      "writtenOn": "2018-07-20T20:20:04Z",
      "side": 1,
      "message": "reflect.DeepEqual does handle nil, but if I do it like this, I can get something like\n\nparseUIUseFlags on \"\" \u003d map[]; want map[]\n\nwhen parseUIUseFlags returns nil. I wanted to explicitly show nil and didn\u0027t find a less verbose way of doing it.",
      "parentUuid": "c1a9db36_bcf9ed03",
      "revId": "cffd53237e650091bab38ccb05ed056169334561",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "09f8dea5_0f8f364b",
        "filename": "src/chromiumos/tast/local/graphics/utils_test.go",
        "patchSetId": 7
      },
      "lineNbr": 60,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-07-20T21:46:00Z",
      "side": 1,
      "message": "got it; makes sense",
      "parentUuid": "b3eddaaa_c1b8d3ee",
      "revId": "cffd53237e650091bab38ccb05ed056169334561",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "924a4fa7_f30ee899",
        "filename": "src/chromiumos/tast/local/graphics/utils_test.go",
        "patchSetId": 7
      },
      "lineNbr": 68,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-07-20T19:23:59Z",
      "side": 1,
      "message": "delete this in favor of using defer",
      "revId": "cffd53237e650091bab38ccb05ed056169334561",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c0c210b_e6bb63af",
        "filename": "src/chromiumos/tast/local/graphics/utils_test.go",
        "patchSetId": 7
      },
      "lineNbr": 68,
      "author": {
        "id": 1273510
      },
      "writtenOn": "2018-07-20T20:20:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "924a4fa7_f30ee899",
      "revId": "cffd53237e650091bab38ccb05ed056169334561",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}