{
  "comments": [
    {
      "key": {
        "uuid": "ac91acfd_90f596cc",
        "filename": "src/chromiumos/tast/local/shill/manager.go",
        "patchSetId": 13
      },
      "lineNbr": 133,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2019-12-03T21:35:59Z",
      "side": 1,
      "message": "do we need a better timeout on this loop? Previously, we would only wait for a non-empty Services list, check it, and give either an error or a \"match\" result. Because we didn\u0027t tend to have an empty Services list for long, that was OK. But now, you\u0027ve fixed this loop so that we properly wait for a matching Service, which is more precise, but also may not happen (if the test is going to fail, for instance). So you\u0027ll just fall back to the deadline for the entire test.\n\nSeems like it would be wise to wrap the ctx in a reasonable timeout here? A few seconds?",
      "range": {
        "startLine": 133,
        "startChar": 1,
        "endLine": 133,
        "endChar": 4
      },
      "revId": "d4365280d08ee0ce744688d0e50304fd62714944",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41d812b6_328de92c",
        "filename": "src/chromiumos/tast/local/shill/manager.go",
        "patchSetId": 13
      },
      "lineNbr": 133,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2019-12-04T05:28:53Z",
      "side": 1,
      "message": "Timeout added. However, that reminds me a scenario: would it be the case that service is added but the service\u0027s property is not ready yet? If so, the current algorithm does not work: it checks services again to find a match after a service list is changed. If there\u0027s no further service list change, then the expected service property change after the first check will not be captured.\n\nNot sure if I\u0027m thinking too much.",
      "parentUuid": "ac91acfd_90f596cc",
      "range": {
        "startLine": 133,
        "startChar": 1,
        "endLine": 133,
        "endChar": 4
      },
      "revId": "d4365280d08ee0ce744688d0e50304fd62714944",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df432aa4_5080326c",
        "filename": "src/chromiumos/tast/local/shill/manager.go",
        "patchSetId": 13
      },
      "lineNbr": 133,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2019-12-04T06:51:57Z",
      "side": 1,
      "message": "I suppose it\u0027s possible to have such a case, but that really depends on what exactly the calling test is looking for. If we\u0027re looking for properties present at Service creation, then you don\u0027t have that problem. But if you are looking for dynamically-set properties, then you might.\n\nLooking at callers, I think all use cases are for present-at-Service-creation properties.\n\nSo your problem may be theoretical now, but it does still make for a little awkward of an API.\n\nAlso, haven\u0027t we nearly converged such that FindMatchingService() and WaitForServiceProperties() are nearly the same thing, depending on the timeout? That seems a little superfluous. Can we reconcile that?",
      "parentUuid": "41d812b6_328de92c",
      "range": {
        "startLine": 133,
        "startChar": 1,
        "endLine": 133,
        "endChar": 4
      },
      "revId": "d4365280d08ee0ce744688d0e50304fd62714944",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dbe80b47_6e0eace2",
        "filename": "src/chromiumos/tast/local/shill/manager.go",
        "patchSetId": 13
      },
      "lineNbr": 133,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2019-12-04T16:56:54Z",
      "side": 1,
      "message": "Thanks for pointing this out. After looking at the use case of FindMatchingService() and FindMatchingAnyService(), I propose:\n\n1. Let WaitForServiceProperties() returns (dbus.ObjectPath, error).\n2. Create WaitForAnyServiceProperties(), which polls FindMatchingAnyService(). \n3. Use WaitForServiceProperties() and WaitForAnyServiceProperties() to replace the use of FindMatchingService() and FindMatchingAnyService(), respectively. \n4. FindMatchingService() can be private and no longer poll for matching service. Also, it does not need to wait for a non-empty service list because external user calls WaitForServiceProperties(), which polls findMatchingService().\n\nWDYT?",
      "parentUuid": "df432aa4_5080326c",
      "range": {
        "startLine": 133,
        "startChar": 1,
        "endLine": 133,
        "endChar": 4
      },
      "revId": "d4365280d08ee0ce744688d0e50304fd62714944",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2004d5f7_0bb6f836",
        "filename": "src/chromiumos/tast/local/shill/manager.go",
        "patchSetId": 13
      },
      "lineNbr": 133,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2019-12-04T17:49:42Z",
      "side": 1,
      "message": "\u003e Thanks for pointing this out. After looking at the use case of FindMatchingService() and FindMatchingAnyService(), I propose:\n\u003e \n\u003e 1. Let WaitForServiceProperties() returns (dbus.ObjectPath, error).\n\u003e 2. Create WaitForAnyServiceProperties(), which polls FindMatchingAnyService(). \n\u003e 3. Use WaitForServiceProperties() and WaitForAnyServiceProperties() to replace the use of FindMatchingService() and FindMatchingAnyService(), respectively. \n\u003e 4. FindMatchingService() can be private and no longer poll for matching service. Also, it does not need to wait for a non-empty service list because external user calls WaitForServiceProperties(), which polls findMatchingService().\n\u003e \n\u003e WDYT?\n\nI\u0027m not sure if I\u0027m grokking all the details (it\u0027s just an outline, after all), but this sounds reasonable I think.",
      "parentUuid": "dbe80b47_6e0eace2",
      "range": {
        "startLine": 133,
        "startChar": 1,
        "endLine": 133,
        "endChar": 4
      },
      "revId": "d4365280d08ee0ce744688d0e50304fd62714944",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}