{
  "comments": [
    {
      "key": {
        "uuid": "e3064a41_19ba49d7",
        "filename": "src/chromiumos/tast/local/wpr/wpr.go",
        "patchSetId": 11
      },
      "lineNbr": 128,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-02-21T09:55:02Z",
      "side": 1,
      "message": "In this case proc must be killed and waited.",
      "range": {
        "startLine": 128,
        "startChar": 59,
        "endLine": 128,
        "endChar": 71
      },
      "revId": "857d778f95b5ac605f2a691dc8a9b1cd36ea2c14",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c673cbf3_9a6dc84e",
        "filename": "src/chromiumos/tast/local/wpr/wpr.go",
        "patchSetId": 11
      },
      "lineNbr": 128,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2020-02-21T16:00:13Z",
      "side": 1,
      "message": "Done.\n\nAdded a deferred close after proc.Start() successfully.",
      "parentUuid": "e3064a41_19ba49d7",
      "range": {
        "startLine": 128,
        "startChar": 59,
        "endLine": 128,
        "endChar": 71
      },
      "revId": "857d778f95b5ac605f2a691dc8a9b1cd36ea2c14",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3e5c7ac_b20ce766",
        "filename": "src/chromiumos/tast/local/wpr/wpr.go",
        "patchSetId": 11
      },
      "lineNbr": 165,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-02-21T09:55:02Z",
      "side": 1,
      "message": "Sorry for the bug in my snippet, but this is a data race; the original goroutine writes to w.proc while this goroutine reads it.\n\nInstead you can assign w.proc to a local variable temporarily.\n\n proc :\u003d w.proc\n go func() {\n   \u003c-ctx.Done()\n   proc.Signal(syscall.SIGKILL)\n }()\n\n ...\n w.proc \u003d nil",
      "range": {
        "startLine": 165,
        "startChar": 6,
        "endLine": 165,
        "endChar": 21
      },
      "revId": "857d778f95b5ac605f2a691dc8a9b1cd36ea2c14",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "257f94df_93f64626",
        "filename": "src/chromiumos/tast/local/wpr/wpr.go",
        "patchSetId": 11
      },
      "lineNbr": 165,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2020-02-21T16:00:13Z",
      "side": 1,
      "message": "Done.\n\nOut of curiosity, why do we need to kill it even after w.proc.Wait() returns? Shouldn\u0027t w.proc exit after Wait() returns?",
      "parentUuid": "c3e5c7ac_b20ce766",
      "range": {
        "startLine": 165,
        "startChar": 6,
        "endLine": 165,
        "endChar": 21
      },
      "revId": "857d778f95b5ac605f2a691dc8a9b1cd36ea2c14",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "98b2682c_f58c9e48",
        "filename": "src/chromiumos/tast/local/wpr/wpr.go",
        "patchSetId": 11
      },
      "lineNbr": 165,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-02-21T16:37:03Z",
      "side": 1,
      "message": "No, we don\u0027t need to kill the process if Wait succeeds. Actually in that case Kill will fail because there\u0027s no matching process.\n\nThe problem is that, as far as I know, there\u0027s no way to cancel sending sigkill without race. We can notify the killer goroutine to skip sending the signal after successful Wait, but in a race condition where Wait succeeds at the almost same time as context deadline, the goroutine goes ahead with sending the signal. So this code simply gives up cancellation, assuming that PID is not reused very soon.",
      "parentUuid": "257f94df_93f64626",
      "range": {
        "startLine": 165,
        "startChar": 6,
        "endLine": 165,
        "endChar": 21
      },
      "revId": "857d778f95b5ac605f2a691dc8a9b1cd36ea2c14",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}