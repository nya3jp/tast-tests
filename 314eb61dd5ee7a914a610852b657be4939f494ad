{
  "comments": [
    {
      "key": {
        "uuid": "1e1f6d7d_e4333707",
        "filename": "src/chromiumos/tast/local/chrome/cdputil/conn.go",
        "patchSetId": 11
      },
      "lineNbr": 144,
      "author": {
        "id": 1002858
      },
      "writtenOn": "2019-11-21T05:02:28Z",
      "side": 1,
      "message": "I\u0027d rather you explicitly handle the error and add the functionDeclaration context to the error",
      "range": {
        "startLine": 144,
        "startChar": 14,
        "endLine": 144,
        "endChar": 28
      },
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d52af75_ebad665d",
        "filename": "src/chromiumos/tast/local/chrome/cdputil/conn.go",
        "patchSetId": 11
      },
      "lineNbr": 144,
      "author": {
        "id": 1358595
      },
      "writtenOn": "2019-11-21T18:38:12Z",
      "side": 1,
      "message": "I like the idea, but 2 things:\n1) I was talking with shuhei recently and he said that errors should not contain new lines\n2) the function declaration could technically be an 100 or 1000 line javascript function. My examples just all happen to be short.\n\nI think adding the function to the error is not specifically necessary because the error will give you a line number and the line number will point you to the javascript function/where it was executed. Thoughts?",
      "parentUuid": "1e1f6d7d_e4333707",
      "range": {
        "startLine": 144,
        "startChar": 14,
        "endLine": 144,
        "endChar": 28
      },
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "898b3580_e36a7af4",
        "filename": "src/chromiumos/tast/local/chrome/cdputil/conn.go",
        "patchSetId": 11
      },
      "lineNbr": 144,
      "author": {
        "id": 1358595
      },
      "writtenOn": "2019-11-25T20:34:39Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0d52af75_ebad665d",
      "range": {
        "startLine": 144,
        "startChar": 14,
        "endLine": 144,
        "endChar": 28
      },
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b1afafa_2bbd91b1",
        "filename": "src/chromiumos/tast/local/chrome/ui/automation.go",
        "patchSetId": 11
      },
      "lineNbr": 25,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2019-11-20T23:08:40Z",
      "side": 1,
      "message": "Please add link to the definition in the chromium tree like https://chromium.googlesource.com/chromiumos/platform/tast-tests.git/+/refs/heads/master/src/chromiumos/tast/local/chrome/ash/wm.go#112",
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c5aab3b_318b157a",
        "filename": "src/chromiumos/tast/local/chrome/ui/automation.go",
        "patchSetId": 11
      },
      "lineNbr": 25,
      "author": {
        "id": 1358595
      },
      "writtenOn": "2019-11-22T00:28:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3b1afafa_2bbd91b1",
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "162740de_87fff51e",
        "filename": "src/chromiumos/tast/local/chrome/ui/automation.go",
        "patchSetId": 11
      },
      "lineNbr": 27,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2019-11-20T23:08:40Z",
      "side": 1,
      "message": "Role would be a RoleType, I guess it\u0027s clearer to define a custom type with constants here.",
      "range": {
        "startLine": 27,
        "startChar": 12,
        "endLine": 27,
        "endChar": 18
      },
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a59ba33_a37ef672",
        "filename": "src/chromiumos/tast/local/chrome/ui/automation.go",
        "patchSetId": 11
      },
      "lineNbr": 27,
      "author": {
        "id": 1358595
      },
      "writtenOn": "2019-11-22T00:28:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "162740de_87fff51e",
      "range": {
        "startLine": 27,
        "startChar": 12,
        "endLine": 27,
        "endChar": 18
      },
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be95c2cc_604f9780",
        "filename": "src/chromiumos/tast/local/chrome/ui/automation.go",
        "patchSetId": 11
      },
      "lineNbr": 31,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2019-11-20T23:08:40Z",
      "side": 1,
      "message": "As I see the idl file, the key should be limited to some enums. It would be better to define a custom type for that (see https://chromium.googlesource.com/chromiumos/platform/tast-tests.git/+/refs/heads/master/src/chromiumos/tast/local/chrome/ash/wm.go#28)",
      "range": {
        "startLine": 31,
        "startChar": 16,
        "endLine": 31,
        "endChar": 22
      },
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d100caa5_8cd9fcc2",
        "filename": "src/chromiumos/tast/local/chrome/ui/automation.go",
        "patchSetId": 11
      },
      "lineNbr": 31,
      "author": {
        "id": 1358595
      },
      "writtenOn": "2019-11-22T00:28:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "be95c2cc_604f9780",
      "range": {
        "startLine": 31,
        "startChar": 16,
        "endLine": 31,
        "endChar": 22
      },
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db44008e_9978eaec",
        "filename": "src/chromiumos/tast/local/chrome/ui/automation.go",
        "patchSetId": 11
      },
      "lineNbr": 34,
      "author": {
        "id": 1002858
      },
      "writtenOn": "2019-11-21T05:02:28Z",
      "side": 1,
      "message": "I\u0027m confused about why this is needed.  I can see verifying that the values aren\u0027t set twice (or just documenting that you\u0027ll ignore one in favor of the other), but it seems easier to implement a MarshalJSON() function on FindParams and then just call json.Marshal()\n\nI\u0027ll swing by tomorrow to chat about the marshaling",
      "range": {
        "startLine": 34,
        "startChar": 3,
        "endLine": 34,
        "endChar": 20
      },
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a3e68b5_0562eb26",
        "filename": "src/chromiumos/tast/local/chrome/ui/automation.go",
        "patchSetId": 11
      },
      "lineNbr": 34,
      "author": {
        "id": 1358595
      },
      "writtenOn": "2019-11-25T20:34:39Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "db44008e_9978eaec",
      "range": {
        "startLine": 34,
        "startChar": 3,
        "endLine": 34,
        "endChar": 20
      },
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "603ca58b_7f7272f4",
        "filename": "src/chromiumos/tast/local/chrome/ui/automation.go",
        "patchSetId": 11
      },
      "lineNbr": 49,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2019-11-20T23:08:40Z",
      "side": 1,
      "message": "The FindParams in the idl has \u0027role\u0027 field, while this code is setting it into attributes. Why not using \u0027role\u0027 field?",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 49,
        "endChar": 2
      },
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3ad23cc_fb9f4086",
        "filename": "src/chromiumos/tast/local/chrome/ui/automation.go",
        "patchSetId": 11
      },
      "lineNbr": 49,
      "author": {
        "id": 1358595
      },
      "writtenOn": "2019-11-22T00:28:29Z",
      "side": 1,
      "message": "Both are equivalent. Also, either way, we should check for duplicates because you may want to pass Role to attributes in order to use it as a Regex.",
      "parentUuid": "603ca58b_7f7272f4",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 49,
        "endChar": 2
      },
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f292640b_4a823602",
        "filename": "src/chromiumos/tast/local/chrome/ui/automation.go",
        "patchSetId": 11
      },
      "lineNbr": 49,
      "author": {
        "id": 1358595
      },
      "writtenOn": "2019-11-25T20:34:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c3ad23cc_fb9f4086",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 49,
        "endChar": 2
      },
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "076a591b_556a9837",
        "filename": "src/chromiumos/tast/local/chrome/ui/automation.go",
        "patchSetId": 11
      },
      "lineNbr": 71,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2019-11-20T23:08:40Z",
      "side": 1,
      "message": "nit: use strings.Builder (https://golang.org/pkg/strings/#Builder) with fmt.Fprintf ?",
      "range": {
        "startLine": 71,
        "startChar": 1,
        "endLine": 71,
        "endChar": 12
      },
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f7360e2_35e8e4ed",
        "filename": "src/chromiumos/tast/local/chrome/ui/automation.go",
        "patchSetId": 11
      },
      "lineNbr": 71,
      "author": {
        "id": 1358595
      },
      "writtenOn": "2019-11-22T00:28:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "076a591b_556a9837",
      "range": {
        "startLine": 71,
        "startChar": 1,
        "endLine": 71,
        "endChar": 12
      },
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a9f4cd9b_4f80a39f",
        "filename": "src/chromiumos/tast/local/chrome/ui/automation.go",
        "patchSetId": 11
      },
      "lineNbr": 100,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2019-11-20T23:08:40Z",
      "side": 1,
      "message": "Any specific reasons why it is a reference?  Most of other API users define types which actually copies the properties.\n\nSee https://chromium.googlesource.com/chromiumos/platform/tast-tests.git/+/refs/heads/master/src/chromiumos/tast/local/chrome/display/display.go#54 for example. I believe you should follow this style unless there\u0027s specific reasons; AutomationNode struct with well-defined properties.\n(and if there\u0027s specific reasons, please note them as comment).\n\nI think it needs the reference to invoke some methods defined for AutomationNode, but that does not mean you can\u0027t copy the properties.\n\n\nCurrently, all of those node data have to be accessed through \u0027attributes\u0027 strings, which return map[string]interface{}. I am afraid that this is too cumbersome and needs too much extra works for Go developers who want to use this, they need to look carefully throughout automation.idl for what\u0027s expected, and everything needs to be type-casted properly. I hope you will define helpers to translate them properly which can address this concern in a type-safe manner.",
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d444b57a_5a6137a5",
        "filename": "src/chromiumos/tast/local/chrome/ui/automation.go",
        "patchSetId": 11
      },
      "lineNbr": 100,
      "author": {
        "id": 1358595
      },
      "writtenOn": "2019-11-21T18:38:12Z",
      "side": 1,
      "message": "The reference is needed for calling methods on the object without having to search for it again.\n\nThe original reason for the decision to use getAttr instead of a giant struct is that Automation nodes have 80+ properties that the average user for the most part will never use. If they really care about a property, they can request the singular property and cast it to the correct type. Maybe it will be cleaner and more future proof to just create the giant struct.",
      "parentUuid": "a9f4cd9b_4f80a39f",
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73e2bce3_e563f1b9",
        "filename": "src/chromiumos/tast/local/chrome/ui/automation.go",
        "patchSetId": 11
      },
      "lineNbr": 100,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2019-11-22T00:34:07Z",
      "side": 1,
      "message": "The implementation of GetAttributes() made me nervous actually and that is why I put the original comment.\n\nI am afraid that GetAttributes() is not quite helpful to access some attributes with this APIs, especially when the returned attributes are structured.\n\nFor example, let\u0027s say my test code wants to know the location of a node. Here would be the expected code:\n\nattrs, err :\u003d node.GetAttributes(ctx, []string{\"location\"})\nloc :\u003d attrs[\"location\"]\n\nBut the problem is, the loc is map[string]interface{} while it should be a certain struct, Rect. Do you think all of the users need to validate/parse/handle this map[string]interface{} to some Rect struct by themselves? I am really afraid that this is very hard to use and bad for such users. I hope some solution to address such situations.\n\nAnd the same thing will be applied to other structural attributes (and enums, since I think type-with-constant would be better).\n\nI believe you don\u0027t have to have all of those 80+ attributes for now, but I hope this CL declares some struct where I (or someone else) can easily add new properties for my (their) use cases. I mean, if I need a location, maybe all I have to do should be just adding a line like\nLocation Rect  `json:\"location\"`",
      "parentUuid": "d444b57a_5a6137a5",
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a2ff4eb_0db4ae02",
        "filename": "src/chromiumos/tast/local/chrome/ui/automation.go",
        "patchSetId": 11
      },
      "lineNbr": 100,
      "author": {
        "id": 1358595
      },
      "writtenOn": "2019-11-22T23:43:05Z",
      "side": 1,
      "message": "Just a side note about AutomationNodes that is annoying. I don\u0027t fully know why, but if I try to marshal an AutomationNode to a struct, it will return \"{}\" and just marshal all nil values. I have to explicitly extract attributes in order for them to be returned.\n\nie: \n\"return node\" will give all nil struct\n\"return {name: node.name, location: node.location, etc}\" will properly marshal to a struct\n\nEver run into something like this?",
      "parentUuid": "73e2bce3_e563f1b9",
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9fcf2231_1a9f54dd",
        "filename": "src/chromiumos/tast/local/chrome/ui/automation.go",
        "patchSetId": 11
      },
      "lineNbr": 100,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2019-11-23T00:50:23Z",
      "side": 1,
      "message": "I am not entirely sure the problem you encountered, but I believe you should deal with the problem rather than avoiding it.\n\nOne possibility would be the decoding marshal into a struct with unexported fields -- encoding/json cares only about the exported fields (starting with a capital character) and ignore everything else (see https://play.golang.org/p/RbckzbC0Shr)",
      "parentUuid": "1a2ff4eb_0db4ae02",
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1b3944f_d87dc562",
        "filename": "src/chromiumos/tast/local/chrome/ui/automation.go",
        "patchSetId": 11
      },
      "lineNbr": 100,
      "author": {
        "id": 1358595
      },
      "writtenOn": "2019-11-25T20:34:39Z",
      "side": 1,
      "message": "Added a number of common parameters to node. More can be added as needed. Still left the methods in case users want to get very uncommon parameters or parameters from multiple nodes.",
      "parentUuid": "9fcf2231_1a9f54dd",
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8be3f94d_85da2cbc",
        "filename": "src/chromiumos/tast/local/chrome/ui/automation.go",
        "patchSetId": 11
      },
      "lineNbr": 111,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2019-11-20T23:08:40Z",
      "side": 1,
      "message": "Maybe DoDefault() would be a better name.",
      "range": {
        "startLine": 111,
        "startChar": 3,
        "endLine": 111,
        "endChar": 12
      },
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10de14e5_8c4e9d42",
        "filename": "src/chromiumos/tast/local/chrome/ui/automation.go",
        "patchSetId": 11
      },
      "lineNbr": 111,
      "author": {
        "id": 1358595
      },
      "writtenOn": "2019-11-21T18:38:12Z",
      "side": 1,
      "message": "The plan is to switch to mouse clicks eventually. Don\u0027t want to limit it by calling this method DoDefault().",
      "parentUuid": "8be3f94d_85da2cbc",
      "range": {
        "startLine": 111,
        "startChar": 3,
        "endLine": 111,
        "endChar": 12
      },
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "742a88f5_550c7c76",
        "filename": "src/chromiumos/tast/local/chrome/ui/automation.go",
        "patchSetId": 11
      },
      "lineNbr": 111,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2019-11-22T00:34:07Z",
      "side": 1,
      "message": "Note that I\u0027ve already added mouse features to autotest API which you can use now: https://chromium.googlesource.com/chromiumos/platform/tast-tests.git/+/refs/heads/master/src/chromiumos/tast/local/chrome/ash/mouse.go#37",
      "parentUuid": "10de14e5_8c4e9d42",
      "range": {
        "startLine": 111,
        "startChar": 3,
        "endLine": 111,
        "endChar": 12
      },
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b061b2d0_5f7a13a9",
        "filename": "src/chromiumos/tast/local/chrome/ui/automation.go",
        "patchSetId": 11
      },
      "lineNbr": 118,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2019-11-20T23:08:40Z",
      "side": 1,
      "message": "I personally prefer naming ShowContextMenu(). RightClick does sound like emitting mouse button.",
      "range": {
        "startLine": 118,
        "startChar": 3,
        "endLine": 118,
        "endChar": 13
      },
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87d01ba5_e1bed8e2",
        "filename": "src/chromiumos/tast/local/chrome/ui/automation.go",
        "patchSetId": 11
      },
      "lineNbr": 118,
      "author": {
        "id": 1358595
      },
      "writtenOn": "2019-11-21T18:38:12Z",
      "side": 1,
      "message": "The plan is to switch to mouse clicks eventually. Don\u0027t want to limit it by calling this method ShowContextMenu().",
      "parentUuid": "b061b2d0_5f7a13a9",
      "range": {
        "startLine": 118,
        "startChar": 3,
        "endLine": 118,
        "endChar": 13
      },
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "40cde1e5_50078997",
        "filename": "src/chromiumos/tast/local/chrome/ui/automation.go",
        "patchSetId": 11
      },
      "lineNbr": 172,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2019-11-20T23:08:40Z",
      "side": 1,
      "message": "Maybe, this can return the found descendant as a part of return value. That would be easier for users to code.",
      "range": {
        "startLine": 172,
        "startChar": 15,
        "endLine": 172,
        "endChar": 37
      },
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2c4a8d3_e088a567",
        "filename": "src/chromiumos/tast/local/chrome/ui/automation.go",
        "patchSetId": 11
      },
      "lineNbr": 172,
      "author": {
        "id": 1358595
      },
      "writtenOn": "2019-11-21T18:38:12Z",
      "side": 1,
      "message": "If you need the descendant, that is what GetDescendantWithTimeout() is for. This is for if you just want to check if something exists.",
      "parentUuid": "40cde1e5_50078997",
      "range": {
        "startLine": 172,
        "startChar": 15,
        "endLine": 172,
        "endChar": 37
      },
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7a6b674_8395de03",
        "filename": "src/chromiumos/tast/local/chrome/ui/automation.go",
        "patchSetId": 11
      },
      "lineNbr": 209,
      "author": {
        "id": 1002858
      },
      "writtenOn": "2019-11-21T05:02:28Z",
      "side": 1,
      "message": "format this string as one line instead",
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07aed62c_df8a9c0c",
        "filename": "src/chromiumos/tast/local/chrome/ui/automation.go",
        "patchSetId": 11
      },
      "lineNbr": 209,
      "author": {
        "id": 1358595
      },
      "writtenOn": "2019-11-22T00:28:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c7a6b674_8395de03",
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c323cbe8_be6817ec",
        "filename": "src/chromiumos/tast/local/chrome/ui/automation.go",
        "patchSetId": 11
      },
      "lineNbr": 225,
      "author": {
        "id": 1002858
      },
      "writtenOn": "2019-11-21T05:02:28Z",
      "side": 1,
      "message": "same here",
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d72df449_2be8b2a3",
        "filename": "src/chromiumos/tast/local/chrome/ui/automation.go",
        "patchSetId": 11
      },
      "lineNbr": 225,
      "author": {
        "id": 1358595
      },
      "writtenOn": "2019-11-22T00:28:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c323cbe8_be6817ec",
      "revId": "314eb61dd5ee7a914a610852b657be4939f494ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}