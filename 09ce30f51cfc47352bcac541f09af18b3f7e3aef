{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4eb2df0c_64dd298f",
        "filename": "src/chromiumos/tast/local/procutil/find.go",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2021-09-14T05:42:38Z",
      "side": 1,
      "message": "Nice to mention that Matcher represents a condition to be matched against a process.",
      "revId": "09ce30f51cfc47352bcac541f09af18b3f7e3aef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d54f79ba_21194850",
        "filename": "src/chromiumos/tast/local/procutil/find.go",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2021-09-14T10:05:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4eb2df0c_64dd298f",
      "revId": "09ce30f51cfc47352bcac541f09af18b3f7e3aef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "305b5722_3ad08553",
        "filename": "src/chromiumos/tast/local/procutil/find.go",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2021-09-14T05:42:38Z",
      "side": 1,
      "message": "s/conditions/matchers/g",
      "range": {
        "startLine": 21,
        "startChar": 3,
        "endLine": 21,
        "endChar": 13
      },
      "revId": "09ce30f51cfc47352bcac541f09af18b3f7e3aef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "85a3534d_57f42fd3",
        "filename": "src/chromiumos/tast/local/procutil/find.go",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2021-09-14T10:05:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "305b5722_3ad08553",
      "range": {
        "startLine": 21,
        "startChar": 3,
        "endLine": 21,
        "endChar": 13
      },
      "revId": "09ce30f51cfc47352bcac541f09af18b3f7e3aef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1e1cc27_1a63085d",
        "filename": "src/chromiumos/tast/local/procutil/find.go",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2021-09-14T05:42:38Z",
      "side": 1,
      "message": "So it is expected that all users of Find are trying to find exactly one process.\n\nDid you consider returning an error if there are two or more matching processes?",
      "revId": "09ce30f51cfc47352bcac541f09af18b3f7e3aef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d165840d_eab6e70b",
        "filename": "src/chromiumos/tast/local/procutil/find.go",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2021-09-14T10:05:23Z",
      "side": 1,
      "message": "Yes, I was thinking it, then I introduced Find(any)() as a first step, because of the compatibility of the existing code.\n\nThough, with more taking a look at existing code, I find actually \"finding exact one process\" is common intention but not written so, and so I changed my mind.\n\nInstead, at the latest PS, I introduced FindUnique(), which returns an error if there\u0027s no process or multiple processes.\n\nAny thoughts?",
      "parentUuid": "b1e1cc27_1a63085d",
      "revId": "09ce30f51cfc47352bcac541f09af18b3f7e3aef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a287cbe_6c73cacf",
        "filename": "src/chromiumos/tast/local/procutil/find.go",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2021-09-15T02:46:57Z",
      "side": 1,
      "message": "SGTM, thanks!",
      "parentUuid": "d165840d_eab6e70b",
      "revId": "09ce30f51cfc47352bcac541f09af18b3f7e3aef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be037a0a_8273ba3b",
        "filename": "src/chromiumos/tast/local/procutil/find.go",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2021-09-14T05:42:38Z",
      "side": 1,
      "message": "I would name this \"FindAny\" to clarify that it can return arbitrary matching process.",
      "range": {
        "startLine": 33,
        "startChar": 5,
        "endLine": 33,
        "endChar": 9
      },
      "revId": "09ce30f51cfc47352bcac541f09af18b3f7e3aef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cabd877d_4cb89ae3",
        "filename": "src/chromiumos/tast/local/procutil/find.go",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2021-09-14T05:42:38Z",
      "side": 1,
      "message": "I think you intentionally required at least one matcher in the signature, but do we really need the requirement?\n\nI\u0027m slight afraid that this signature is a bit cumbersome when passing a varible number of matchers, e.g.\n\n matchers :\u003d []procutil.Matcher{...}\n if something {\n   matcher \u003d append(matchers, ...)\n }\n proc, err :\u003d procutil.Find(matchers[0], matchers[1:]...) // ouch",
      "range": {
        "startLine": 33,
        "startChar": 10,
        "endLine": 33,
        "endChar": 34
      },
      "revId": "09ce30f51cfc47352bcac541f09af18b3f7e3aef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a82d4c0b_8ef339a0",
        "filename": "src/chromiumos/tast/local/procutil/find.go",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2021-09-14T10:05:23Z",
      "side": 1,
      "message": "Yes, I thought the case, too, but I still think we want to guarantee one matcher at least, otherwise\n1) FindUnique would return an error always (because I expect more than one process is running)\n2) FindAll would be equivalent with process.Processes().\n\nSo, it sounds likely programming errors.\nIndeed FindUnique(matchers[0], matchers[1]...) looks a bit syntax-ish noise, but we still see it in other places, such as command execution etc, and common pattern in Go.\nRather, I\u0027d like to capture it at earlier stage, e.g. build time, or in worst case (i.e. above array case) on accessing matchers[0] to nil array.\n\nWDYT?",
      "parentUuid": "cabd877d_4cb89ae3",
      "range": {
        "startLine": 33,
        "startChar": 10,
        "endLine": 33,
        "endChar": 34
      },
      "revId": "09ce30f51cfc47352bcac541f09af18b3f7e3aef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6bae0e3_3477c442",
        "filename": "src/chromiumos/tast/local/procutil/find.go",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2021-09-14T10:05:23Z",
      "side": 1,
      "message": "Ack. +1 for FindAny, but anyways I replace this with FindUnique.\nI\u0027ll keep it in my mind and will use the name if we need actually FindAny function in the future.",
      "parentUuid": "be037a0a_8273ba3b",
      "range": {
        "startLine": 33,
        "startChar": 5,
        "endLine": 33,
        "endChar": 9
      },
      "revId": "09ce30f51cfc47352bcac541f09af18b3f7e3aef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e65d741_e366cb4d",
        "filename": "src/chromiumos/tast/local/procutil/find.go",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2021-09-15T02:46:57Z",
      "side": 1,
      "message": "I agree that it\u0027s likely a programming error if no matcher is passed to FindUnique, but I\u0027m skeptical about FindAll.\n\nFor example we may want to create a general utility class to measure CPU usage of certain processes on the system. We can pass Chrome matcher to measure Chrome CPU usage, or empty matcher to measure all processes on the system.\n\nAs for the example of exec.Command, it\u0027s reasonable because it\u0027s 100% wrong to specify no executable. But it\u0027s different from FindAll which has a valid semantics for empty matcher (\u003d equal to process.Processes()).",
      "parentUuid": "a82d4c0b_8ef339a0",
      "range": {
        "startLine": 33,
        "startChar": 10,
        "endLine": 33,
        "endChar": 34
      },
      "revId": "09ce30f51cfc47352bcac541f09af18b3f7e3aef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fc997f32_54f8d6a2",
        "filename": "src/chromiumos/tast/local/procutil/find.go",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2021-09-15T02:46:57Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d6bae0e3_3477c442",
      "range": {
        "startLine": 33,
        "startChar": 5,
        "endLine": 33,
        "endChar": 9
      },
      "revId": "09ce30f51cfc47352bcac541f09af18b3f7e3aef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f64d387e_488e320a",
        "filename": "src/chromiumos/tast/local/procutil/find.go",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2021-09-17T14:52:19Z",
      "side": 1,
      "message": "Fixed per offline discussion.\n- Changed Find{Unique,All} to take only one matcher.\n- Introduced And() with giving up the compile-time size check.",
      "parentUuid": "3e65d741_e366cb4d",
      "range": {
        "startLine": 33,
        "startChar": 10,
        "endLine": 33,
        "endChar": 34
      },
      "revId": "09ce30f51cfc47352bcac541f09af18b3f7e3aef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1549fca_7337e7b0",
        "filename": "src/chromiumos/tast/local/procutil/find.go",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2021-09-14T05:42:38Z",
      "side": 1,
      "message": "It\u0027s not obvious to me if it\u0027s right to return ErrNotFound when no process matches. Did you consider returning success in this case?",
      "range": {
        "startLine": 69,
        "startChar": 2,
        "endLine": 69,
        "endChar": 25
      },
      "revId": "09ce30f51cfc47352bcac541f09af18b3f7e3aef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45355087_6e133518",
        "filename": "src/chromiumos/tast/local/procutil/find.go",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2021-09-14T10:05:23Z",
      "side": 1,
      "message": "Yes, and handling \"no-processes\" as an error looks common pattern in the existing code.\nI do not have strong opinion about it, as long as it is explicitly documented.\n\nThough, in some callers need to have the same pattern like:\ntesting.Poll(... {\n  ps, err :\u003d procutil.FindAll(...)\n  if err !\u003d nil {\n    return err\n  }\n  if len(ps) \u003d\u003d 0 {\n    return errors.New(\"processes X are not yet running\")\n  }\n  return nil\n} ...)\n\nor something.\n\nWDYT?",
      "parentUuid": "f1549fca_7337e7b0",
      "range": {
        "startLine": 69,
        "startChar": 2,
        "endLine": 69,
        "endChar": 25
      },
      "revId": "09ce30f51cfc47352bcac541f09af18b3f7e3aef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11ebd25b_38dcd0cc",
        "filename": "src/chromiumos/tast/local/procutil/find.go",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2021-09-15T02:46:57Z",
      "side": 1,
      "message": "I slightly prefer to return no error when FindAll matches no process, but I don\u0027t have strong opinion.\n\nBut if we do so, please define and export \"process not found\" error so that callers can distinguish the case from other runtime errors.",
      "parentUuid": "45355087_6e133518",
      "range": {
        "startLine": 69,
        "startChar": 2,
        "endLine": 69,
        "endChar": 25
      },
      "revId": "09ce30f51cfc47352bcac541f09af18b3f7e3aef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58177d9f_df1edf3a",
        "filename": "src/chromiumos/tast/local/procutil/find.go",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2021-09-17T14:52:19Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "11ebd25b_38dcd0cc",
      "range": {
        "startLine": 69,
        "startChar": 2,
        "endLine": 69,
        "endChar": 25
      },
      "revId": "09ce30f51cfc47352bcac541f09af18b3f7e3aef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}