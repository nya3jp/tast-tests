{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "08f9e1c5_c367c5d4",
        "filename": "src/chromiumos/tast/local/arc/optin/optin.go",
        "patchSetId": 4
      },
      "lineNbr": 85,
      "author": {
        "id": 1398801
      },
      "writtenOn": "2022-02-17T11:14:19Z",
      "side": 1,
      "message": "I do not think you need this one. Instead, you could the following:\n1. Make waitForTerms and waitForOptin return action.Action\n2. Create a func (say pressButton) returnning action.Action and running: \n\nif err :\u003d conn.Eval(ctx, \"appWindow.contentWindow.document.getElementById(\u0027button-retry\u0027).click()\", nil); err !\u003d nil {\n    return errors.Wrap(err, \"failed to press the retry button\")\n}\n\n3. Replace calling withRetry with:\nuiauto.Retry(n, uiauto.Combine(action, sleep, pressButton))",
      "range": {
        "startLine": 85,
        "startChar": 5,
        "endLine": 85,
        "endChar": 14
      },
      "revId": "be27c108554e9320dd5d58a73be33d67871c7d1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13e2081b_e2bfa45f",
        "filename": "src/chromiumos/tast/local/arc/optin/optin.go",
        "patchSetId": 4
      },
      "lineNbr": 85,
      "author": {
        "id": 1526108
      },
      "writtenOn": "2022-02-17T13:26:17Z",
      "side": 1,
      "message": "Could you please help me understand the semantics of `uiauto.Combine` (I\u0027m struggling to find comprehensive docs and the comments are lacking the details)? I.e. what happens, if one of the actions returns an error?\nCurrent flow looks like this:\n```\n1. perform action\n1.1 if successful, continue with the flow\n1.2 else\n1.2.1 if attempts number is exceeded, fail\n1.2.2 else sleep, pressButton, increase attempt counter and repeat from #1\n```\n\nThe way I would expect `uiauto.Combine` to work is following: once an action in the sequence fails, the subsequent actions are skipped and an error is returned. If this is the case, we could potentially skip the `sleep, pressButton` part of sequence, which is essential in our case.\nAlternatively, if it performs all the actions in the sequence, even if there are errors, we will always run `sleep, pressButton`, even when sleep is not required (and we\u0027ll need to adjust `pressButton` to not fail, if no button is found).\n\nNeither of these options I see fit us, hence, the question in the beginning :) .",
      "parentUuid": "08f9e1c5_c367c5d4",
      "range": {
        "startLine": 85,
        "startChar": 5,
        "endLine": 85,
        "endChar": 14
      },
      "revId": "be27c108554e9320dd5d58a73be33d67871c7d1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2985e69_123f690f",
        "filename": "src/chromiumos/tast/local/arc/optin/optin.go",
        "patchSetId": 4
      },
      "lineNbr": 85,
      "author": {
        "id": 1399098
      },
      "writtenOn": "2022-02-17T14:07:59Z",
      "side": 1,
      "message": "```\n// Combine combines a list of functions from Context to error into one function.\n// Combine adds the name of the operation into the error message to clarify the step.\n// It is recommended to start the name of operations with a verb, e.g.,\n//     \"open Downloads and right click a folder\"\n// Then the failure msg would be like:\n//     \"failed to open Downloads and right click a folder on step ...\"\nfunc Combine(name string, steps ...Action) Action {\n\treturn func(ctx context.Context) error {\n\t\tfor i, f :\u003d range steps {\n\t\t\tif err :\u003d f(ctx); err !\u003d nil {\n\t\t\t\treturn errors.Wrapf(err, \"failed to %s on step %d\", name, i+1)\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t}\n}\n```\n\nSo it skips executing the second function if the first one fails.",
      "parentUuid": "13e2081b_e2bfa45f",
      "range": {
        "startLine": 85,
        "startChar": 5,
        "endLine": 85,
        "endChar": 14
      },
      "revId": "be27c108554e9320dd5d58a73be33d67871c7d1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50938821_90cdf91e",
        "filename": "src/chromiumos/tast/local/arc/optin/optin.go",
        "patchSetId": 4
      },
      "lineNbr": 85,
      "author": {
        "id": 1526108
      },
      "writtenOn": "2022-02-17T14:27:15Z",
      "side": 1,
      "message": "Thank you for confirming it Muhammad Hasan. Sorry, I should have kept navigating through the code a bit further.",
      "parentUuid": "e2985e69_123f690f",
      "range": {
        "startLine": 85,
        "startChar": 5,
        "endLine": 85,
        "endChar": 14
      },
      "revId": "be27c108554e9320dd5d58a73be33d67871c7d1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "805df78e_e79e407f",
        "filename": "src/chromiumos/tast/local/arc/optin/optin.go",
        "patchSetId": 4
      },
      "lineNbr": 85,
      "author": {
        "id": 1526108
      },
      "writtenOn": "2022-02-17T15:36:28Z",
      "side": 1,
      "message": "After some thoughts, the combine approach could have worked, if there was a `uiauto.Either` monad available. Something like that: `uiauto.Retry(uiauto.Either(action, uiauto.Combine(pressButton, sleep, ui.False())))` where `ui.False` returns an action, that always returns an error.\nNot sure, if we need to go down that path in this CL, but I\u0027m more than happy to create another one, if it sounds promising.",
      "parentUuid": "50938821_90cdf91e",
      "range": {
        "startLine": 85,
        "startChar": 5,
        "endLine": 85,
        "endChar": 14
      },
      "revId": "be27c108554e9320dd5d58a73be33d67871c7d1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba01b21d_ba16747d",
        "filename": "src/chromiumos/tast/local/arc/optin/optin.go",
        "patchSetId": 4
      },
      "lineNbr": 85,
      "author": {
        "id": 1399098
      },
      "writtenOn": "2022-02-17T15:40:00Z",
      "side": 1,
      "message": "I think this CL is fine as it is given the utility function doesn\u0027t meet all the requirements. I think combining different function utilities to get the same effect will be confusing for the reader. It would be much simpler if the Retry() method also accepted another function to execute onError but I don\u0027t think such refactoring is necessary.",
      "parentUuid": "805df78e_e79e407f",
      "range": {
        "startLine": 85,
        "startChar": 5,
        "endLine": 85,
        "endChar": 14
      },
      "revId": "be27c108554e9320dd5d58a73be33d67871c7d1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c637714c_a12cad87",
        "filename": "src/chromiumos/tast/local/arc/optin/optin.go",
        "patchSetId": 4
      },
      "lineNbr": 85,
      "author": {
        "id": 1398801
      },
      "writtenOn": "2022-02-17T22:02:55Z",
      "side": 1,
      "message": "Sorry, I did not notice that inside the withRety, it returns immediately if the first action succeeds. There is a IfSuccessThen in uiauto: https://osscs.corp.google.com/chromiumos/chromiumos/codesearch/+/main:src/platform/tast-tests/src/chromiumos/tast/local/chrome/uiauto/automation.go;l\u003d727\n\nI\u0027d suggest we add a func like IfFailThen to uiauto so that it could be reused.",
      "parentUuid": "ba01b21d_ba16747d",
      "range": {
        "startLine": 85,
        "startChar": 5,
        "endLine": 85,
        "endChar": 14
      },
      "revId": "be27c108554e9320dd5d58a73be33d67871c7d1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}