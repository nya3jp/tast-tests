{
  "comments": [
    {
      "key": {
        "uuid": "bd890c37_a30fd952",
        "filename": "src/chromiumos/tast/local/shill/device.go",
        "patchSetId": 2
      },
      "lineNbr": 97,
      "author": {
        "id": 1002858
      },
      "writtenOn": "2019-10-16T20:43:18Z",
      "side": 1,
      "message": "are you planning to add more members to this struct?  You could also define this without the struct.\ntype DevicePropertyWatcher dbusutil.SignalWatcher",
      "revId": "6a7ae6e74b3721f4acf971d2ef1881aced05bff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2dec7709_7f7a5cdd",
        "filename": "src/chromiumos/tast/local/shill/device.go",
        "patchSetId": 2
      },
      "lineNbr": 97,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-10-17T14:36:31Z",
      "side": 1,
      "message": "Yeah, there will be *Device",
      "parentUuid": "bd890c37_a30fd952",
      "revId": "6a7ae6e74b3721f4acf971d2ef1881aced05bff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "905a63f7_0e5f2275",
        "filename": "src/chromiumos/tast/local/shill/device.go",
        "patchSetId": 2
      },
      "lineNbr": 116,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2019-10-14T18:37:08Z",
      "side": 1,
      "message": "Food for thought: is this really a generally desirable property? Do you think we\u0027re more likely to want to look for *exactly* one property change, or just looking for the expected change to happen \"eventually\"?\n\nIn your particular case (MAC address change), you probably only want exactly 1 change, but I can imagine for other similar constructs (e.g., watching Service state), we just want to look for the eventual goal, even if we move through various intermediate states. But then, Service may be a different beast than Device.",
      "range": {
        "startLine": 115,
        "startChar": 0,
        "endLine": 116,
        "endChar": 95
      },
      "revId": "6a7ae6e74b3721f4acf971d2ef1881aced05bff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44375dce_816019be",
        "filename": "src/chromiumos/tast/local/shill/device.go",
        "patchSetId": 2
      },
      "lineNbr": 116,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-10-14T19:24:00Z",
      "side": 1,
      "message": "in my case I am waiting for 2 changes: 1) MAC address 2) USB MAC address source.\n\nYeah, it\u0027s really open question, whether we need wait for expected value.\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nFor about next design:\n* WatchPropertyChanged subscribes for one property only\n* DevicePropertyWatcher has two functions:\n  1) Wait() waits first signal\n  2) WaitForExpected() waits first signal and checks with expected value ?\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nAlso, I was thinking about updating device properties on the background if we received PropertyChanged signal. WDYT?",
      "parentUuid": "905a63f7_0e5f2275",
      "range": {
        "startLine": 115,
        "startChar": 0,
        "endLine": 116,
        "endChar": 95
      },
      "revId": "6a7ae6e74b3721f4acf971d2ef1881aced05bff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae5f8303_42f97d39",
        "filename": "src/chromiumos/tast/local/shill/device.go",
        "patchSetId": 2
      },
      "lineNbr": 116,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2019-10-14T20:26:09Z",
      "side": 1,
      "message": "\u003e in my case I am waiting for 2 changes: 1) MAC address 2) USB MAC address source.\n\nAh, right. Doesn\u0027t really change my question much though.\n\n\u003e Yeah, it\u0027s really open question, whether we need wait for expected value.\n\u003e \n\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\u003e For about next design:\n\u003e * WatchPropertyChanged subscribes for one property only\n\nYou mean DevicePropertyWatcher? Not sure if the Watcher object should subscribe to only 1 property, or if each Wait...() should only subscribe to 1 property, but either way, that concept seems good to me.\n\n\u003e * DevicePropertyWatcher has two functions:\n\u003e   1) Wait() waits first signal\n\u003e   2) WaitForExpected() waits first signal and checks with expected value ?\n\u003e \n\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nDo you even need WaitForExpected()? Wait() would really be enough -- the caller can verify the expected value, especially if you do the update below. (Or, if you\u0027re waiting for a single property, you can return the value to the caller directly.)\n\n\u003e Also, I was thinking about updating device properties on the background if we received PropertyChanged signal. WDYT?\n\nThat seems OK to me. We don\u0027t exactly have a clear story on exposing d.props right now, but I think it\u0027s reasonable to update them when we have the info.",
      "parentUuid": "44375dce_816019be",
      "range": {
        "startLine": 115,
        "startChar": 0,
        "endLine": 116,
        "endChar": 95
      },
      "revId": "6a7ae6e74b3721f4acf971d2ef1881aced05bff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57c0f39d_5985fdea",
        "filename": "src/chromiumos/tast/local/shill/device.go",
        "patchSetId": 2
      },
      "lineNbr": 116,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-10-17T14:36:31Z",
      "side": 1,
      "message": "I would like to have WaitForExpected since it will simplify all callers.\n\nOtherwise in each caller to need to handle it manually.",
      "parentUuid": "ae5f8303_42f97d39",
      "range": {
        "startLine": 115,
        "startChar": 0,
        "endLine": 116,
        "endChar": 95
      },
      "revId": "6a7ae6e74b3721f4acf971d2ef1881aced05bff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0ee96ce_87cf2dba",
        "filename": "src/chromiumos/tast/local/shill/device.go",
        "patchSetId": 2
      },
      "lineNbr": 138,
      "author": {
        "id": 1002858
      },
      "writtenOn": "2019-10-16T20:43:18Z",
      "side": 1,
      "message": "not a huge fan of this name - I would assume that it watches for a changed property, not returns a watcher",
      "range": {
        "startLine": 138,
        "startChar": 17,
        "endLine": 138,
        "endChar": 37
      },
      "revId": "6a7ae6e74b3721f4acf971d2ef1881aced05bff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d005ca7e_81332fe3",
        "filename": "src/chromiumos/tast/local/shill/device.go",
        "patchSetId": 2
      },
      "lineNbr": 138,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-10-17T14:36:31Z",
      "side": 1,
      "message": "Rename to `CreatePropertyChangedWatcher`.",
      "parentUuid": "d0ee96ce_87cf2dba",
      "range": {
        "startLine": 138,
        "startChar": 17,
        "endLine": 138,
        "endChar": 37
      },
      "revId": "6a7ae6e74b3721f4acf971d2ef1881aced05bff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}