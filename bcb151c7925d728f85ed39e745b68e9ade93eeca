{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "42e90aa7_005083ae",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1349779
      },
      "writtenOn": "2020-11-17T09:41:10Z",
      "side": 1,
      "message": "gabormagda@ FYI",
      "revId": "bcb151c7925d728f85ed39e745b68e9ade93eeca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f656db1_69e5d8b1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1349779
      },
      "writtenOn": "2020-11-17T09:56:53Z",
      "side": 1,
      "message": "alexanderhartl@ FYI",
      "revId": "bcb151c7925d728f85ed39e745b68e9ade93eeca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5068e78_6b0fab19",
        "filename": "src/chromiumos/tast/local/bundles/cros/policy/default_search_provider_enabled.go",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1411065
      },
      "writtenOn": "2020-11-17T16:36:00Z",
      "side": 1,
      "message": "Add a little in the description what the test is actually doing, i.e.:\n\"Behavior of DefaultSearchProviderEnabled policy: check if a search provider is being automatically used\"",
      "range": {
        "startLine": 23,
        "startChar": 9,
        "endLine": 23,
        "endChar": 56
      },
      "revId": "bcb151c7925d728f85ed39e745b68e9ade93eeca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5a12882_b425dcfc",
        "filename": "src/chromiumos/tast/local/bundles/cros/policy/default_search_provider_enabled.go",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1411065
      },
      "writtenOn": "2020-11-17T16:36:00Z",
      "side": 1,
      "message": "remove as it is not used",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 37,
        "endChar": 84
      },
      "revId": "bcb151c7925d728f85ed39e745b68e9ade93eeca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c38cb53_148c95df",
        "filename": "src/chromiumos/tast/local/bundles/cros/policy/default_search_provider_enabled.go",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1411065
      },
      "writtenOn": "2020-11-17T16:36:00Z",
      "side": 1,
      "message": "nit: write this and the two following comments inline with the variable definition.",
      "range": {
        "startLine": 57,
        "startChar": 2,
        "endLine": 57,
        "endChar": 30
      },
      "revId": "bcb151c7925d728f85ed39e745b68e9ade93eeca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f97030c1_91124883",
        "filename": "src/chromiumos/tast/local/bundles/cros/policy/default_search_provider_enabled.go",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 1411065
      },
      "writtenOn": "2020-11-17T16:36:00Z",
      "side": 1,
      "message": "You need to clear the browser history, otherwise the previous search results can interfere with the test.\nYou can do it with these lines:\n\n// Clear the browser history.\nif err :\u003d tconn.Eval(ctx, `tast.promisify(chrome.browsingData.removeHistory({\"since\": 0}))`, nil); err !\u003d nil {\n\ts.Fatal(\"Failed to clear browsing history: \", err)\n}",
      "revId": "bcb151c7925d728f85ed39e745b68e9ade93eeca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71bfff98_8304188c",
        "filename": "src/chromiumos/tast/local/bundles/cros/policy/default_search_provider_enabled.go",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1349779
      },
      "writtenOn": "2020-11-16T15:09:56Z",
      "side": 1,
      "message": "Do we need to wait for page to load before calling \u0027conn.Eval\u0027 ?",
      "range": {
        "startLine": 107,
        "startChar": 3,
        "endLine": 109,
        "endChar": 4
      },
      "revId": "bcb151c7925d728f85ed39e745b68e9ade93eeca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29bd4e1d_dd20523c",
        "filename": "src/chromiumos/tast/local/bundles/cros/policy/default_search_provider_enabled.go",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1411065
      },
      "writtenOn": "2020-11-17T16:36:00Z",
      "side": 1,
      "message": "Yes, we need to wait for the load as we have a race condition here. You can do it with this function:\n\nif err :\u003d ui.WaitForLocationChangeCompleted(ctx, tconn); err !\u003d nil {\n\ts.Fatal(\"Failed to wait for location change: \", err)\n}",
      "parentUuid": "71bfff98_8304188c",
      "range": {
        "startLine": 107,
        "startChar": 3,
        "endLine": 109,
        "endChar": 4
      },
      "revId": "bcb151c7925d728f85ed39e745b68e9ade93eeca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95ed60c5_fd333f56",
        "filename": "src/chromiumos/tast/local/bundles/cros/policy/default_search_provider_enabled.go",
        "patchSetId": 2
      },
      "lineNbr": 116,
      "author": {
        "id": 1411065
      },
      "writtenOn": "2020-11-17T16:55:46Z",
      "side": 1,
      "message": "We cannot assume the DuT to always have a connection to the internet so we need to consider that case too.\nYou can do it by checking whether the location variable is set to chrome-error://chromewebdata/ and if it is you can use the ui tree to check if a the default search provider was used by checking the name of the rootWebArea.\n\n// If we cannot connect to www.google.com the location will be set\n// to \"chrome-error://chromewebdata/\".\n// In that case we have to check the ui tree for the \"rootWebArea\".\nif strings.Contains(location, chrome-error://chromewebdata/) {\n\tparams :\u003d ui.FindParams{\n\t\tRole: \"rootWebArea\",\n\t}\n\tnode, err :\u003d ui.FindWithTimeout(ctx, tconn, params, 10*time.Second)\n\tif err !\u003d nil {\n\t\ts.Fatal(\"Failed to find rootWebArea: \", err)\n\t}\n\tdefer node.Release(ctx)\n\tlocation \u003d node.Name\n}",
      "revId": "bcb151c7925d728f85ed39e745b68e9ade93eeca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94e355f1_6d28dc97",
        "filename": "src/chromiumos/tast/local/bundles/cros/policy/default_search_provider_enabled.go",
        "patchSetId": 2
      },
      "lineNbr": 118,
      "author": {
        "id": 1411065
      },
      "writtenOn": "2020-11-17T16:36:00Z",
      "side": 1,
      "message": "Fatalf is needed here to use formatting directives.",
      "range": {
        "startLine": 118,
        "startChar": 6,
        "endLine": 118,
        "endChar": 11
      },
      "revId": "bcb151c7925d728f85ed39e745b68e9ade93eeca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}