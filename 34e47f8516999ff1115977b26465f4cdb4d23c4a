{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d620c802_96fd716b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1431492
      },
      "writtenOn": "2022-01-21T01:57:08Z",
      "side": 1,
      "message": "LGTM",
      "revId": "34e47f8516999ff1115977b26465f4cdb4d23c4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c999a55_e637e050",
        "filename": "src/chromiumos/tast/local/bundles/cros/inputs/keyboard_service.go",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1528158
      },
      "writtenOn": "2022-01-21T19:03:44Z",
      "side": 1,
      "message": "seems a relative low level API(similar for other APIs), wondering what\u0027s the trade-off we chose to sync on this level?",
      "range": {
        "startLine": 44,
        "startChar": 28,
        "endLine": 44,
        "endChar": 32
      },
      "revId": "34e47f8516999ff1115977b26465f4cdb4d23c4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4b7ac59_d8182ad4",
        "filename": "src/chromiumos/tast/local/bundles/cros/inputs/keyboard_service.go",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1496803
      },
      "writtenOn": "2022-01-27T01:31:54Z",
      "side": 1,
      "message": "On the UIAuto and keyboard side, the paradigm is based on composition of these smaller building block with uiauto.Combine.  \n\nCurrently with the GRPC interface, while we can\u0027t replicate the uiauto.Combine right now because it requires a common instance across all actions, I am leaning towards keeping the granularity of the building blocks the same as the underlying functions.  The rationale is that people have familiarity with these building blocks and it is easier to find code snippet for high order functions.\n\nTo be honest, I do not have too much exposure to writing test to have a sense of where new functionalities could be useful. Definitely I am open to the higher level APIs that can bring more value.",
      "parentUuid": "5c999a55_e637e050",
      "range": {
        "startLine": 44,
        "startChar": 28,
        "endLine": 44,
        "endChar": 32
      },
      "revId": "34e47f8516999ff1115977b26465f4cdb4d23c4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab195487_639c9dce",
        "filename": "src/chromiumos/tast/local/bundles/cros/inputs/keyboard_service.go",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1431492
      },
      "writtenOn": "2022-01-27T02:01:25Z",
      "side": 1,
      "message": "Not sure if I understand about the term common instance here? \n\nHow about this? \n\n```\nservice KeyboardService {\n  rpc Actions(ActionsRequest) return (google.protobuf.Empty) {}\n}\n\nmessage ActionsRequest {\n  repeat Action action \u003d 1;\n}\n\nmessage Action {\n\n  oneof request {\n  \n     TypeRequest type_req \u003d 1;\n     AccelRequest accel_req \u003d 2;\n     AccelPressRequest accel_press_req \u003d 3;\n     AccelReleaseRequest accel_release_req \u003d 4; \n  }\n}\n\n```\n\nThen, the request will include in sequence of actions instead of one single action.\n\nIf the users just want an atomic action, they can pass in a list of one single item.\n\nI just bring it up for discussion sake.",
      "parentUuid": "d4b7ac59_d8182ad4",
      "range": {
        "startLine": 44,
        "startChar": 28,
        "endLine": 44,
        "endChar": 32
      },
      "revId": "34e47f8516999ff1115977b26465f4cdb4d23c4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cb87a3c_5f05e7fd",
        "filename": "src/chromiumos/tast/local/bundles/cros/inputs/keyboard_service.go",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1496803
      },
      "writtenOn": "2022-01-27T17:06:47Z",
      "side": 1,
      "message": "Thanks Seewai for the suggestion. I think that does open up more food for thought. I also have been thinking about how we can expose the Action interface for UIAuto and Keyboard in a fashion like UIAuto.Combine does it. Perhaps where I struggled was how it would manifest across different actions across proto files, where the proto construct does not provide some flavor of inheritance.",
      "parentUuid": "ab195487_639c9dce",
      "range": {
        "startLine": 44,
        "startChar": 28,
        "endLine": 44,
        "endChar": 32
      },
      "revId": "34e47f8516999ff1115977b26465f4cdb4d23c4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5670147f_46e97f0b",
        "filename": "src/chromiumos/tast/local/bundles/cros/inputs/keyboard_service.go",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1431492
      },
      "writtenOn": "2022-01-27T17:32:03Z",
      "side": 1,
      "message": "How about we just have one uiauto proto. We still need other proto, but we don\u0027t need the service. Just need the message.\n\nuiauto.proto\n```\nimport \".../keyboard.proto\"\nimport \".../mouse.proto\"\n...\n\nservice UIService {\n  rpc Actions(ActionsRequest) return (google.protobuf.Empty) {}\n}\n\nmessage ActionsRequest {\n  repeat Action action \u003d 1;\n}\n\nmessage Action {\n\n  oneof request {\n  \n     KeyboardRequest keyboard_req \u003d 1;\n     MouseRequest    mouse_req \u003d 2;\n     ...\n  }\n\n```\n\nkeyboard.proto\n```\nmessage KeyboardRequest {\n  enum KeyType {\n      TYPE \u003d 0;\n      ACCEL \u003d 1;\n      ACCELPRESS \u003d 2;\n      ACCELRELEASE \u003d 3;\n  \n  }\n  KeyType key_type \u003d 0;\n  string key \u003d 1;\n \n}\n\n```\nI just want to illustrate the idea. The syntax may be wrong. Please take a look and see if it is what you want. Thanks.\n\nAgain, it is only for discussion sake. Thanks.",
      "parentUuid": "8cb87a3c_5f05e7fd",
      "range": {
        "startLine": 44,
        "startChar": 28,
        "endLine": 44,
        "endChar": 32
      },
      "revId": "34e47f8516999ff1115977b26465f4cdb4d23c4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd86969a_eee619b6",
        "filename": "src/chromiumos/tast/local/bundles/cros/inputs/keyboard_service.go",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1496803
      },
      "writtenOn": "2022-01-27T18:23:34Z",
      "side": 1,
      "message": "Thanks Seewai.  Let me put together a quick prototype who hopefully a basis for us to iterate on the idea.",
      "parentUuid": "5670147f_46e97f0b",
      "range": {
        "startLine": 44,
        "startChar": 28,
        "endLine": 44,
        "endChar": 32
      },
      "revId": "34e47f8516999ff1115977b26465f4cdb4d23c4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b65a28e0_90b70ee6",
        "filename": "src/chromiumos/tast/local/bundles/cros/inputs/keyboard_service.go",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1528158
      },
      "writtenOn": "2022-01-27T18:37:58Z",
      "side": 1,
      "message": "Sorry I may not made my question clear, though the discussion on the proto design was also good one!\nWhat I wanted to learn more is the synchronization on low level APIs vs. synchronization on high level APIs, in some cases sync on low level API leads to unnecessary overhead and slows down things if they are invoked very often. An example is the StringBuilder vs. StringBuffer in java. I don\u0027t exactly know which one is better for our use case, just bring this to you.",
      "parentUuid": "fd86969a_eee619b6",
      "range": {
        "startLine": 44,
        "startChar": 28,
        "endLine": 44,
        "endChar": 32
      },
      "revId": "34e47f8516999ff1115977b26465f4cdb4d23c4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2ee3060_e49c5400",
        "filename": "src/chromiumos/tast/local/bundles/cros/inputs/keyboard_service.go",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1496803
      },
      "writtenOn": "2022-01-27T21:55:01Z",
      "side": 1,
      "message": "Hi Hengxiang, thanks again for clarifying. Sorry I misunderstood your question in the first place.\n\nThe UI automation library uses Automation Accessibility tree APIs to interact with the UI objects. Upon performing an action on the UI, the UI updates and the accessibility tree also updates with a delay. In previous incarnation of the UI automation API, there were fair amount of flakiness resulting of performing the next action when accessibility is still being updated. Therefore, in the current version of the UI automation lib, most methods have a location stability precondition check to verify that the UI tree has finished updating. The location stability check polls at 300ms to make sure that the ui element of interest stays in the same location in the UI Tree between 2 subsequent UI tree fetch calls. \n\nOn top of that, it is not uncommon to have UI updates that takes much longer than that (like a few seconds), with calls like uiauto.WaitUntilExists (element) or a simply sleep() with various duration to ensure that the UI change indeed complete before moving to the next. \n\nYou might notice in general the UI automation library or test code is not optimized for performance, but instead it is more geared towards correctness and repeatability. My conjecture is that such optimization savings is likely 2 orders of magnitudes smaller(e.g. LAN network roundtrip in 1ms, golang mutex in microseconds) that it is unlikely to have much impact on the overall execution.",
      "parentUuid": "b65a28e0_90b70ee6",
      "range": {
        "startLine": 44,
        "startChar": 28,
        "endLine": 44,
        "endChar": 32
      },
      "revId": "34e47f8516999ff1115977b26465f4cdb4d23c4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "396b607e_52b0bdde",
        "filename": "src/chromiumos/tast/local/bundles/cros/inputs/keyboard_service.go",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1529897
      },
      "writtenOn": "2022-01-28T00:15:33Z",
      "side": 1,
      "message": "(just realized somehow my personal gmail account was used above, that\u0027s wired.)\nThis thread becomes long, I have a few small questions and we can take it offline, thanks",
      "parentUuid": "a2ee3060_e49c5400",
      "range": {
        "startLine": 44,
        "startChar": 28,
        "endLine": 44,
        "endChar": 32
      },
      "revId": "34e47f8516999ff1115977b26465f4cdb4d23c4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1f4e5e6_0ae9cf3a",
        "filename": "src/chromiumos/tast/remote/bundles/cros/inputs/keyboard_service_grpc.go",
        "patchSetId": 5
      },
      "lineNbr": 173,
      "author": {
        "id": 1528158
      },
      "writtenOn": "2022-01-21T19:03:44Z",
      "side": 1,
      "message": "possible to make it an argument? (ideally should remove such statement in the future)",
      "range": {
        "startLine": 173,
        "startChar": 20,
        "endLine": 173,
        "endChar": 41
      },
      "revId": "34e47f8516999ff1115977b26465f4cdb4d23c4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4919f4d8_721e9481",
        "filename": "src/chromiumos/tast/remote/bundles/cros/inputs/keyboard_service_grpc.go",
        "patchSetId": 5
      },
      "lineNbr": 173,
      "author": {
        "id": 1496803
      },
      "writtenOn": "2022-01-27T01:31:54Z",
      "side": 1,
      "message": "Thanks. Replace some instances of the sleep function to explicit  searching/polling for the next required UI element.\nFor the remaining 2 usages, change to wait time to be a const of 500ms which should be enough for the UI to react.",
      "parentUuid": "b1f4e5e6_0ae9cf3a",
      "range": {
        "startLine": 173,
        "startChar": 20,
        "endLine": 173,
        "endChar": 41
      },
      "revId": "34e47f8516999ff1115977b26465f4cdb4d23c4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}