{
  "comments": [
    {
      "key": {
        "uuid": "461d11f4_6a00de1f",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/window_manager_cuj.go",
        "patchSetId": 3
      },
      "lineNbr": 114,
      "author": {
        "id": 1398964
      },
      "writtenOn": "2020-06-04T23:54:45Z",
      "side": 1,
      "message": "This was changed by mistake in https://chromium-review.googlesource.com/c/chromiumos/platform/tast-tests/+/2213183, rolling it back to the orignial.",
      "range": {
        "startLine": 114,
        "startChar": 31,
        "endLine": 114,
        "endChar": 38
      },
      "revId": "931f4ad0abc1aa7e59f957b6b6ea141f87767159",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56d51113_ee4205f6",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/wm/window_manager_helper.go",
        "patchSetId": 3
      },
      "lineNbr": 135,
      "author": {
        "id": 1202079
      },
      "writtenOn": "2020-06-05T01:12:15Z",
      "side": 1,
      "message": "nit, style (here and below):\nsorry, missed it before.\nWhen reporting errors in Go write the message like this:\n\n\"invalid ...., got %s, want: %s\"",
      "range": {
        "startLine": 135,
        "startChar": 47,
        "endLine": 135,
        "endChar": 100
      },
      "revId": "931f4ad0abc1aa7e59f957b6b6ea141f87767159",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "005aa1d6_4aafb567",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/wm_nonresizable_clamshell.go",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2020-06-05T00:44:47Z",
      "side": 1,
      "message": "With WaitForARCAppWindowState, I believe you don\u0027t need testing.Poll. Basically my comment and Ricardo\u0027s were pointing the same thing -- wm.ToggleFullscreen() doesn\u0027t wait for the window to be fullscreen -- but proposed different solutions.\n\nMy one suggests ash.WaitForARCAppWindowState, which internally invokes testing.Poll to make sure that the window is in fullscreen state.  After that, |windowInfoFullscreen| must be in fullscreen state.\n\nWhile Ricardo\u0027s suggestion looks like using testing.Poll explicitly to make the verification repeatedly, so it doesn\u0027t have to have WaitFor... logic.\n\nI believe either works well, but please don\u0027t do both. Sorry that we didn\u0027t see comments each other.",
      "revId": "931f4ad0abc1aa7e59f957b6b6ea141f87767159",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "667cff2b_b13a7fc0",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/wm_nonresizable_clamshell.go",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 1398964
      },
      "writtenOn": "2020-06-05T01:11:38Z",
      "side": 1,
      "message": "Ricardo and I had a quick talk about that, he thinks there might be some animation that can cause flaky results, For example WaitForARCAppWindowState may return while animation is not done yet and GetARCAppWindowInfo may get maximize window info instead of fullscreen. \nIf you know that this is not the case then I can remove Poll(). Please advise.",
      "parentUuid": "005aa1d6_4aafb567",
      "revId": "931f4ad0abc1aa7e59f957b6b6ea141f87767159",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "658e660e_bd448e9b",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/wm_nonresizable_clamshell.go",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 1202079
      },
      "writtenOn": "2020-06-05T01:12:15Z",
      "side": 1,
      "message": "I discussed this with Armen offline.\nI asked him to keep both because I thought of this scenario:\n\n - WaitForARCAppWindowState() returns (meaning that the window is fullscreen... at least the state says that)\n - but the window is still animating, so the bounds are not fullscreen yet\n - the tests checks the bounds, and fails.\n\nJun: Would you know if that scenario is possible?\n\nArmen: If not, then, yes, please, do as Jun says.",
      "parentUuid": "005aa1d6_4aafb567",
      "revId": "931f4ad0abc1aa7e59f957b6b6ea141f87767159",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f3d24c9_d40381ea",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/wm_nonresizable_clamshell.go",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2020-06-05T01:21:10Z",
      "side": 1,
      "message": "Oh, interesting. I am really not sure, but yeah potentially that is possible.\n\nIn that case, you can use ash.WaitForCondition to wait for both window state and animation as:\n\n  if err :\u003d ash.WaitForCondition(ctx, tconn, func(w *ash.Window) bool {\n    return w.ARCPackageName \u003d\u003d wm.Pkg24 \u0026\u0026 !w.IsAnimating \u0026\u0026 w.State \u003d\u003d ash.WindowStateFullscreen\n  }, \u0026testing.PollOption{Timeout: 10*time.Second}); err !\u003d { ... }\n\n\nBut I\u0027m fine with testing.Poll as Ricardo\u0027s suggestion. My point is, if you use testing.Poll, you really don\u0027t need to have waiting.",
      "parentUuid": "658e660e_bd448e9b",
      "revId": "931f4ad0abc1aa7e59f957b6b6ea141f87767159",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "606d409e_d9ec912a",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/wm_nonresizable_clamshell.go",
        "patchSetId": 3
      },
      "lineNbr": 147,
      "author": {
        "id": 1202079
      },
      "writtenOn": "2020-06-05T01:12:15Z",
      "side": 1,
      "message": "nit: it is safe to move this outside the poll.",
      "range": {
        "startLine": 145,
        "startChar": 2,
        "endLine": 147,
        "endChar": 3
      },
      "revId": "931f4ad0abc1aa7e59f957b6b6ea141f87767159",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}