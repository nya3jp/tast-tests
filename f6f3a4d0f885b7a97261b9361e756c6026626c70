{
  "comments": [
    {
      "key": {
        "uuid": "8f91f378_30946085",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/wifi_service.go",
        "patchSetId": 6
      },
      "lineNbr": 81,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2019-12-06T06:51:33Z",
      "side": 1,
      "message": "Per discussion, we may public m.findMatchingService() and rescan if match is not found.\n\nAlso, we may consider exponential backoff poll interval.",
      "revId": "f6f3a4d0f885b7a97261b9361e756c6026626c70",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f359e0a_54a59d32",
        "filename": "src/chromiumos/tast/local/network/iw/iw_runner.go",
        "patchSetId": 6
      },
      "lineNbr": 15,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-12-06T10:22:12Z",
      "side": 1,
      "message": "May I ask you to avoid depending on the dut package since this is under local/?\n\nIn this case I recommend to introduce three packages.\n\n- chromiumos/tast/local/iw for local tests\n- chromiumos/tast/remote/iw for remote tests\n- chromiumos/tast/common/iw for common impl (it is not directly used from tests, only from the two packages above)\n\nFor example:\n\n1. chromiumos/tast/common/iw\n\n type CmdRunner interface {\n   Run(ctx context.Context, name string, args ...string) error\n   Output(ctx context.Context, name string, args ...string) ([]byte, error)\n }\n\n type Runner struct {\n   r CmdRunner\n }\n\n func NewRunner(r CmdRunner) *Runner {\n   return \u0026Runner{r}\n }\n\n2. chromiumos/tast/local/iw\n\n type localCmdRunner struct{}\n\n func (r *localCmdRunner) Run(ctx context.Context, name string, args ...string) error { ... }\n func (r *localCmdRunner) Output(ctx context.Context, name string, args ...string) ([]byte, error) { ... }\n\n type Runner \u003d iw.Runner\n\n func NewRunner() *Runner {\n   return iw.NewRunner(\u0026localCmdRunner{})\n }\n\n3. chromiumos/tast/remote/iw\n\n type remoteCmdRunner struct {\n   d *dut.DUT\n }\n\n func (r *remoteCmdRunner) Run(ctx context.Context, name string, args ...string) error { ... }\n func (r *remoteCmdRunner) Output(ctx context.Context, name string, args ...string) ([]byte, error) { ... }\n\n type Runner \u003d iw.Runner\n\n func NewRunner(d *dut.DUT) *Runner {\n   return iw.NewRunner(\u0026remoteCmdRunner{d})\n }",
      "range": {
        "startLine": 15,
        "startChar": 1,
        "endLine": 15,
        "endChar": 22
      },
      "revId": "f6f3a4d0f885b7a97261b9361e756c6026626c70",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "701b1f8f_0bcba005",
        "filename": "src/chromiumos/tast/local/network/iw/iw_runner.go",
        "patchSetId": 6
      },
      "lineNbr": 15,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2019-12-10T03:15:18Z",
      "side": 1,
      "message": "Sure, thanks for the suggestion! I think the CmdRunner interface may later be used by more tools (e.g. ping, ip...) so I\u0027m considering to export CmdRunner-s in a cmd package with similar layout. Not sure if this is still a good design. Any suggestion?\n\nFor example:\n\n1. chromiumos/tast/common/cmd:\n\n type Runner interface {\n   Run(ctx context.Context, name string, args ...string) error\n   Output(ctx context.Context, name string, args ...string) ([]byte, error)\n }\n\n2. chromiumos/tast/local/cmd:\n\n import chromiumos/tast/common/cmd\n\n type Runner struct{}\n func NewRunner() cmd.Runner { return \u0026Runner{} }\n func (r *Runner) Run(...) {...}\n func (r *Runner) Output(...) {...}\n\n3. chromiumos/tast/remote/cmd:\n\n import chromiumos/tast/common/cmd\n\n type Runner struct{\n   dut *dut.DUT\n }\n func NewRunner(d *dut.DUT) cmd.Runner { return \u0026Runner{ dut: d } }\n func (r *Runner) Run(...) {...}\n func (r *Runner) Output(...) {...}",
      "parentUuid": "1f359e0a_54a59d32",
      "range": {
        "startLine": 15,
        "startChar": 1,
        "endLine": 15,
        "endChar": 22
      },
      "revId": "f6f3a4d0f885b7a97261b9361e756c6026626c70",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ade0e8f_95e2a0ab",
        "filename": "src/chromiumos/tast/local/network/iw/iw_runner.go",
        "patchSetId": 6
      },
      "lineNbr": 15,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-12-10T06:19:12Z",
      "side": 1,
      "message": "I\u0027m hesitant to introduce a generic package like chromiumos/tast/common/cmd at this momen. The current interface satisfies iw\u0027s needs but is not very generic (e.g. it does not allow feeding stdin).",
      "parentUuid": "701b1f8f_0bcba005",
      "range": {
        "startLine": 15,
        "startChar": 1,
        "endLine": 15,
        "endChar": 22
      },
      "revId": "f6f3a4d0f885b7a97261b9361e756c6026626c70",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}