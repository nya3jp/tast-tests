{
  "comments": [
    {
      "key": {
        "uuid": "85072ca8_5c84d794",
        "filename": "src/chromiumos/tast/local/bundles/cros/platform/user_crash.go",
        "patchSetId": 13
      },
      "lineNbr": 102,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-01-10T08:11:21Z",
      "side": 1,
      "message": "typo: unstashLeaveCore",
      "range": {
        "startLine": 102,
        "startChar": 3,
        "endLine": 102,
        "endChar": 19
      },
      "revId": "06bfd7af972dc71fc6d983f907903cad37137859",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c168a3d_e4d6c928",
        "filename": "src/chromiumos/tast/local/bundles/cros/platform/user_crash.go",
        "patchSetId": 13
      },
      "lineNbr": 116,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-01-10T08:11:21Z",
      "side": 1,
      "message": "Usual convention in Go is to revert any side effects when a function returns non-nil error. How about something like this:\n\n func stashLeaveCore(...) (retErr error) {\n   ...\n   defer func() {\n     if retErr !\u003d nil {\n       unstashLeaveCore(ctx)\n     }\n   }()\n   ...\n }",
      "range": {
        "startLine": 116,
        "startChar": 9,
        "endLine": 116,
        "endChar": 13
      },
      "revId": "06bfd7af972dc71fc6d983f907903cad37137859",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec494079_108e4371",
        "filename": "src/chromiumos/tast/local/bundles/cros/platform/user_crash.go",
        "patchSetId": 13
      },
      "lineNbr": 116,
      "author": {
        "id": 1166720
      },
      "writtenOn": "2020-01-10T08:24:59Z",
      "side": 1,
      "message": "IIUC, if we want longer deadline for this unstashing than other set-up operation in this function, we would need either:\n- Create a new context with longer timeout (which needs to be kept consistent with the caller\u0027s)\n- Receive 2 contexts for setup and cleanup (which is forbidden by the linter, because Context is allowed only at the first item of parameter list)\n- Return boolean and let caller do cleanup (this)\nWhich option sounds the best for you?",
      "parentUuid": "5c168a3d_e4d6c928",
      "range": {
        "startLine": 116,
        "startChar": 9,
        "endLine": 116,
        "endChar": 13
      },
      "revId": "06bfd7af972dc71fc6d983f907903cad37137859",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "282ed2f3_056a81c0",
        "filename": "src/chromiumos/tast/local/bundles/cros/platform/user_crash.go",
        "patchSetId": 13
      },
      "lineNbr": 116,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-01-14T07:26:48Z",
      "side": 1,
      "message": "I see. Though it is a bit unfortunate, how about creating shorter-lived context in two places (stashLeaveCore and testCoreFileRemovedInProduction)?\n\n func stashLeaveCore(ctx context.Context, ...) (retErr error) {\n   fullCtx :\u003d ctx\n   ctx, cancel :\u003d ctxutil.Shorten(ctx, ...)\n   defer cancel()\n\n   ...\n\n   defer func() {\n     if retErr !\u003d nil {\n       unstashLeaveCore(fullCtx)\n     }\n   }()\n   ...\n }\n\n func testCoreFileRemovedInProduction(ctx context.Context, ...) {\n   fullCtx :\u003d ctx\n   ctx, cancel :\u003d ctxutil.Shorten(ctx, ...)\n   defer cancel()\n\n   if err :\u003d stashLeaveCore(ctx, ...); err !\u003d nil {\n     ...\n   }\n   defer unstashLeaveCore(fullCtx)\n   ...\n }",
      "parentUuid": "ec494079_108e4371",
      "range": {
        "startLine": 116,
        "startChar": 9,
        "endLine": 116,
        "endChar": 13
      },
      "revId": "06bfd7af972dc71fc6d983f907903cad37137859",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b8da0eb_dc8c6541",
        "filename": "src/chromiumos/tast/local/bundles/cros/platform/user_crash.go",
        "patchSetId": 13
      },
      "lineNbr": 178,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-01-10T08:11:21Z",
      "side": 1,
      "message": "remove?",
      "range": {
        "startLine": 178,
        "startChar": 1,
        "endLine": 178,
        "endChar": 51
      },
      "revId": "06bfd7af972dc71fc6d983f907903cad37137859",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}