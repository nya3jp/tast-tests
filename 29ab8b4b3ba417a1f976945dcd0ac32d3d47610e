{
  "comments": [
    {
      "key": {
        "uuid": "d1e35804_7cb5091d",
        "filename": "src/chromiumos/tast/local/network/dhcp_test_server.go",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1307765
      },
      "writtenOn": "2019-11-05T07:37:02Z",
      "side": 1,
      "message": "Personally I would probably try to restructure things differently to avoid all the atomics and make it more clear what is responsible for what.\n\nSome thoughts:\n\n(1) NewServer should not only create the object but also does everything in your StartServer does except run anything. this way you know the thing is good when it\u0027s returned.\n\n(2) It seems that your basic idea is to get the run loop going, assign from conditions/rules, do a bunch of stuff, wait for it finish or timeout, then shut it down. To that end, I might change StartTest(rules, timeout) to RunTest and\n  (a) use a context to capture the deadline, it\u0027s more idiomatic and a let\u0027s you integrate with a test runner/framework that is doing so already\n  (b) pass in the test function to make the TestFoo() body cleaner and easier to read\n  (c) have it be synchronous and return an error.\ne.g.\nRunTest(ctx, rules, testFunc) error {\n  // use an errgroup to hide a bunch of boiler plate\n  g, ctx :\u003d errgroup.WithContext(ctx)\n  // start your processing loop\n  g.Go(runLoop);\n  // run your test func into which you pass the rules\n  g.Go(func() error {\n    return testFunc(rules)\n  })\n  // return the first error from either go routine or nil if both the run loop and test are ok\n  return g.Wait()\n}\n\nrunloop changes slightly to run forever (ust use for {...}) or if you really want to delay a little the canonical way is to to use select:\n\nselect {\n  case \u003c-time.After(...):\n    do stuff\n  case \u003c-ctx.Done():\n    // context timed out return error...\n}\n\nalso you might find system.EpollWait helpful as well.\n\nanyway then your TestFoo looks sort of like:\n\nTestFoo() {\n   config\n   svr \u003d NewServer(config)\n   func testFooXYZ(rules) {\n      ...\n   }\n   ctx, cancel \u003d context.WithDeadline(...) (or WithTimeout)\n   defer cancel()\n   err :\u003d svr.RunTest(ctx, rules, testFooXYZ)\n   ...\n}\n\nApologies if I missed a key design point that this doesn\u0027t address. HTH.",
      "range": {
        "startLine": 17,
        "startChar": 5,
        "endLine": 17,
        "endChar": 19
      },
      "revId": "29ab8b4b3ba417a1f976945dcd0ac32d3d47610e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "574e426c_14ee6573",
        "filename": "src/chromiumos/tast/local/network/dhcp_test_server.go",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1307765
      },
      "writtenOn": "2019-11-05T07:37:02Z",
      "side": 1,
      "message": "go prefers short var names, especially in limited scope, so probably prefer s/ingressAddress/inAddr, etc\n\nalso, in go you can group params by type, so if you like you can change to:\n(iface string, inAddr, bAddr net.IP, inPort, bPort int)",
      "range": {
        "startLine": 35,
        "startChar": 37,
        "endLine": 35,
        "endChar": 51
      },
      "revId": "29ab8b4b3ba417a1f976945dcd0ac32d3d47610e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b964d02c_ccc2c4ea",
        "filename": "src/chromiumos/tast/local/network/dhcp_test_server.go",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1238096
      },
      "writtenOn": "2019-11-05T04:05:13Z",
      "side": 1,
      "message": "I think go will let you do directly \"return \u0026DHCPTestServer{ ...\"",
      "range": {
        "startLine": 37,
        "startChar": 1,
        "endLine": 37,
        "endChar": 15
      },
      "revId": "29ab8b4b3ba417a1f976945dcd0ac32d3d47610e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a77cdd11_9bd59b2f",
        "filename": "src/chromiumos/tast/local/network/dhcp_test_server.go",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1307765
      },
      "writtenOn": "2019-11-05T07:37:02Z",
      "side": 1,
      "message": "you can just return \u0026DHCPTestServer{...} and skip the tmp var",
      "range": {
        "startLine": 36,
        "startChar": 1,
        "endLine": 37,
        "endChar": 15
      },
      "revId": "29ab8b4b3ba417a1f976945dcd0ac32d3d47610e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c6f2235_a168af48",
        "filename": "src/chromiumos/tast/local/network/dhcp_test_server.go",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1307765
      },
      "writtenOn": "2019-11-05T07:37:02Z",
      "side": 1,
      "message": "idiomatically we usually use a short receiver name, like 1 letter short. I\u0027d go with just \u0027s\u0027 here, or maybe \u0027svr\u0027 or \u0027srv\u0027 if you really want.",
      "range": {
        "startLine": 40,
        "startChar": 6,
        "endLine": 40,
        "endChar": 12
      },
      "revId": "29ab8b4b3ba417a1f976945dcd0ac32d3d47610e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef43fbe3_03b1e927",
        "filename": "src/chromiumos/tast/local/network/dhcp_test_server.go",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1238096
      },
      "writtenOn": "2019-11-05T04:05:13Z",
      "side": 1,
      "message": "All these locks are probably not needed for \"atomic semantics\" since setting .alive is already an atomic operation at the machine code lvl.\n\nIf locking semantics is needed for forcing other threads to see the chance, I would move the locks to the caller and remove the setters.",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 42,
        "endChar": 28
      },
      "revId": "29ab8b4b3ba417a1f976945dcd0ac32d3d47610e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1313de6_3253d5a7",
        "filename": "src/chromiumos/tast/local/network/dhcp_test_server.go",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1307765
      },
      "writtenOn": "2019-11-05T07:37:02Z",
      "side": 1,
      "message": "why do you need all these to be protected with a mutex? there is an atomic package btw, you could just use that if you really needed but without seeing any usage i\u0027m not sure it\u0027s even necessary?",
      "revId": "29ab8b4b3ba417a1f976945dcd0ac32d3d47610e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea5fa88f_0b57cb4f",
        "filename": "src/chromiumos/tast/local/network/dhcp_test_server.go",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1307765
      },
      "writtenOn": "2019-11-05T07:37:02Z",
      "side": 1,
      "message": "do you need/want to start the server more than once? if not, maybe just do this in the New func above? or maybe do it in the run method so you can scope start and stop and not have callers worry about it?",
      "range": {
        "startLine": 76,
        "startChar": 30,
        "endLine": 76,
        "endChar": 41
      },
      "revId": "29ab8b4b3ba417a1f976945dcd0ac32d3d47610e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11a863ec_9969cc94",
        "filename": "src/chromiumos/tast/local/network/dhcp_test_server.go",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 1238096
      },
      "writtenOn": "2019-11-05T04:05:13Z",
      "side": 1,
      "message": "Can we move this value as a package constant ?",
      "range": {
        "startLine": 92,
        "startChar": 0,
        "endLine": 92,
        "endChar": 36
      },
      "revId": "29ab8b4b3ba417a1f976945dcd0ac32d3d47610e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65f209ba_64957ffd",
        "filename": "src/chromiumos/tast/local/network/dhcp_test_server.go",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 1238096
      },
      "writtenOn": "2019-11-05T04:05:13Z",
      "side": 1,
      "message": "Isn\u0027t this going to potentially prevent the run() inner func from closing the correct channel ?\n\nNormally we should not have to \"nil\" a channel var. It is fine to read from a closed channel, so instead the writer should have the responsibility of closing it when the writer is exiting.",
      "range": {
        "startLine": 118,
        "startChar": 0,
        "endLine": 118,
        "endChar": 29
      },
      "revId": "29ab8b4b3ba417a1f976945dcd0ac32d3d47610e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7fae190_ee8e1efe",
        "filename": "src/chromiumos/tast/local/network/dhcp_test_server.go",
        "patchSetId": 1
      },
      "lineNbr": 134,
      "author": {
        "id": 1238096
      },
      "writtenOn": "2019-11-05T04:05:13Z",
      "side": 1,
      "message": "You don\u0027t need a select if you reed from just one channel. You should be able to directly do the \u003c- read in the for loop.",
      "range": {
        "startLine": 134,
        "startChar": 2,
        "endLine": 134,
        "endChar": 10
      },
      "revId": "29ab8b4b3ba417a1f976945dcd0ac32d3d47610e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f4ba16b_03a572b5",
        "filename": "src/chromiumos/tast/local/network/dhcp_test_server.go",
        "patchSetId": 1
      },
      "lineNbr": 138,
      "author": {
        "id": 1307765
      },
      "writtenOn": "2019-11-05T07:37:02Z",
      "side": 1,
      "message": "rm else, the previous condition returns. \n(applies throughout this cl)",
      "range": {
        "startLine": 138,
        "startChar": 5,
        "endLine": 138,
        "endChar": 9
      },
      "revId": "29ab8b4b3ba417a1f976945dcd0ac32d3d47610e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b53caef8_a215ac19",
        "filename": "src/chromiumos/tast/local/network/dhcp_test_server.go",
        "patchSetId": 1
      },
      "lineNbr": 139,
      "author": {
        "id": 1238096
      },
      "writtenOn": "2019-11-05T04:05:13Z",
      "side": 1,
      "message": "Isn\u0027t this going to only return the last error ?\n\nI would suggest to accumulate a slice of error and return the whole slice when more \u003d\u003d false",
      "range": {
        "startLine": 139,
        "startChar": 0,
        "endLine": 139,
        "endChar": 13
      },
      "revId": "29ab8b4b3ba417a1f976945dcd0ac32d3d47610e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac7e46f7_94679f0f",
        "filename": "src/chromiumos/tast/local/network/dhcp_test_server.go",
        "patchSetId": 1
      },
      "lineNbr": 143,
      "author": {
        "id": 1238096
      },
      "writtenOn": "2019-11-05T04:05:13Z",
      "side": 1,
      "message": "Is this needed to make the compiler happy ? If not let\u0027s try to remove it. The \"for {\" clearly indicates a potential infinite loop.",
      "range": {
        "startLine": 143,
        "startChar": 0,
        "endLine": 143,
        "endChar": 11
      },
      "revId": "29ab8b4b3ba417a1f976945dcd0ac32d3d47610e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "810e036d_f43a4cc8",
        "filename": "src/chromiumos/tast/local/network/dhcp_test_server.go",
        "patchSetId": 1
      },
      "lineNbr": 155,
      "author": {
        "id": 1307765
      },
      "writtenOn": "2019-11-05T07:37:02Z",
      "side": 1,
      "message": "you don\u0027t need to do this... that being said, you should hide any errors, at least log it.",
      "range": {
        "startLine": 155,
        "startChar": 1,
        "endLine": 155,
        "endChar": 4
      },
      "revId": "29ab8b4b3ba417a1f976945dcd0ac32d3d47610e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a9393c3_a4e5c741",
        "filename": "src/chromiumos/tast/local/network/dhcp_test_server.go",
        "patchSetId": 1
      },
      "lineNbr": 172,
      "author": {
        "id": 1238096
      },
      "writtenOn": "2019-11-05T04:05:13Z",
      "side": 1,
      "message": "Can\u0027t we just directly create a byte[] instead of having to create an intermediary string ?",
      "range": {
        "startLine": 172,
        "startChar": 0,
        "endLine": 172,
        "endChar": 41
      },
      "revId": "29ab8b4b3ba417a1f976945dcd0ac32d3d47610e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d8ecc85_5537d348",
        "filename": "src/chromiumos/tast/local/network/dhcp_test_server.go",
        "patchSetId": 1
      },
      "lineNbr": 180,
      "author": {
        "id": 1238096
      },
      "writtenOn": "2019-11-05T04:05:13Z",
      "side": 1,
      "message": "Nit: can we move the scope of \"err\" to the if block ?",
      "range": {
        "startLine": 179,
        "startChar": 1,
        "endLine": 180,
        "endChar": 16
      },
      "revId": "29ab8b4b3ba417a1f976945dcd0ac32d3d47610e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5dbb720b_97753234",
        "filename": "src/chromiumos/tast/local/network/dhcp_test_server.go",
        "patchSetId": 1
      },
      "lineNbr": 180,
      "author": {
        "id": 1307765
      },
      "writtenOn": "2019-11-05T07:37:02Z",
      "side": 1,
      "message": "if err \u003d ...; err !\u003d nil {\n  ...\n}",
      "range": {
        "startLine": 179,
        "startChar": 1,
        "endLine": 180,
        "endChar": 8
      },
      "revId": "29ab8b4b3ba417a1f976945dcd0ac32d3d47610e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6820ad3_66a4dc21",
        "filename": "src/chromiumos/tast/local/network/dhcp_test_server.go",
        "patchSetId": 1
      },
      "lineNbr": 193,
      "author": {
        "id": 1238096
      },
      "writtenOn": "2019-11-05T04:05:13Z",
      "side": 1,
      "message": "for DHCP this is fine but we might want to use a buffer larger than the typical ~1500 MTU value.",
      "range": {
        "startLine": 193,
        "startChar": 24,
        "endLine": 193,
        "endChar": 28
      },
      "revId": "29ab8b4b3ba417a1f976945dcd0ac32d3d47610e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6879b4e_b21c419a",
        "filename": "src/chromiumos/tast/local/network/dhcp_test_server.go",
        "patchSetId": 1
      },
      "lineNbr": 229,
      "author": {
        "id": 1307765
      },
      "writtenOn": "2019-11-05T07:37:02Z",
      "side": 1,
      "message": "if this is an error, don\u0027t hide it, handle it",
      "range": {
        "startLine": 229,
        "startChar": 13,
        "endLine": 229,
        "endChar": 14
      },
      "revId": "29ab8b4b3ba417a1f976945dcd0ac32d3d47610e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1f9aacc_97a34701",
        "filename": "src/chromiumos/tast/local/network/dhcp_test_server.go",
        "patchSetId": 1
      },
      "lineNbr": 250,
      "author": {
        "id": 1238096
      },
      "writtenOn": "2019-11-05T04:05:13Z",
      "side": 1,
      "message": "It would more idiomatic Go to have the caller do \"go server.run()\" rather than run() do it under the hood.",
      "range": {
        "startLine": 250,
        "startChar": 0,
        "endLine": 250,
        "endChar": 37
      },
      "revId": "29ab8b4b3ba417a1f976945dcd0ac32d3d47610e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7963531_ee872deb",
        "filename": "src/chromiumos/tast/local/network/dhcp_test_server.go",
        "patchSetId": 1
      },
      "lineNbr": 252,
      "author": {
        "id": 1307765
      },
      "writtenOn": "2019-11-05T07:37:02Z",
      "side": 1,
      "message": "For this kind of pattern, it\u0027s almost always preferred to not bake in any concurrency assumptions. Just write the function and let the caller decide if they want to run it in a go routine.",
      "range": {
        "startLine": 252,
        "startChar": 3,
        "endLine": 252,
        "endChar": 4
      },
      "revId": "29ab8b4b3ba417a1f976945dcd0ac32d3d47610e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}