{
  "comments": [
    {
      "key": {
        "uuid": "c4d50e7a_a9f03e40",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/pip.go",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1179631
      },
      "writtenOn": "2019-03-25T07:08:06Z",
      "side": 1,
      "message": "In the future, does it make sense to write a general mechanism to wait for an Activity / Stack to appear and use that? - e.g. polling am state",
      "revId": "144930ba3461ac34c5b01e6ea23b4909b3ee81fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2b71bd4_3ebc6d21",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/pip.go",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1202079
      },
      "writtenOn": "2019-03-25T15:57:38Z",
      "side": 1,
      "message": "Good point.\nwaitForIdle() and/or waitForUpdate() are the ones we should use, but they only work with \"current\" activities.  But PiP activity is never \"current\", so waitForIdle() / waitForUpdate() will just return immediately... or at least they will run on the \"current\" activity, which might be arc.Dummy.\n\nI\u0027ll try with \"am  state\". thanks.",
      "parentUuid": "c4d50e7a_a9f03e40",
      "revId": "144930ba3461ac34c5b01e6ea23b4909b3ee81fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67c6a0cd_56ab7f3c",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/pip.go",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1179631
      },
      "writtenOn": "2019-03-27T09:04:09Z",
      "side": 1,
      "message": "Thanks~!",
      "parentUuid": "c2b71bd4_3ebc6d21",
      "revId": "144930ba3461ac34c5b01e6ea23b4909b3ee81fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5fd7e41f_c21e19b1",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/pip.go",
        "patchSetId": 5
      },
      "lineNbr": 448,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2019-03-29T16:37:20Z",
      "side": 1,
      "message": "|act| is not documented and it is not clear to me what that is? I\u0027m assuming it\u0027s the pip window?",
      "revId": "144930ba3461ac34c5b01e6ea23b4909b3ee81fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4a2438a_6bb41ec6",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/pip.go",
        "patchSetId": 5
      },
      "lineNbr": 456,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2019-03-29T16:37:20Z",
      "side": 1,
      "message": "It seems like we could just store the initial bounds as a reference point here. We could also test that the right edge of the PiP is within some reasonable margin of the display edge, if that is something we want to test.",
      "revId": "144930ba3461ac34c5b01e6ea23b4909b3ee81fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b28995de_798b6166",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/pip.go",
        "patchSetId": 5
      },
      "lineNbr": 456,
      "author": {
        "id": 1202079
      },
      "writtenOn": "2019-03-29T17:48:22Z",
      "side": 1,
      "message": "yes, thanks. what I should check is that the PiP is in the expected initial position.",
      "parentUuid": "f4a2438a_6bb41ec6",
      "revId": "144930ba3461ac34c5b01e6ea23b4909b3ee81fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f5d9d86_ec2968ff",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/pip.go",
        "patchSetId": 5
      },
      "lineNbr": 474,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2019-03-29T16:37:20Z",
      "side": 1,
      "message": "Here we can just test that the bounds moved more than some reasonable threshold, i.e. a minimum width for the system menu.",
      "revId": "144930ba3461ac34c5b01e6ea23b4909b3ee81fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "865703ae_b3c85fad",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/pip.go",
        "patchSetId": 5
      },
      "lineNbr": 474,
      "author": {
        "id": 1202079
      },
      "writtenOn": "2019-03-29T17:48:22Z",
      "side": 1,
      "message": "Thanks, I could do that. But the drawback is that the test won\u0027t be able to verify that the PiP window is not occluded by the system status area. \nAnd also I\u0027d like to verify that the PiP window doesn\u0027t go too much to the left (I\u0027m not testing that now, but I\u0027d like to add that as well).",
      "parentUuid": "7f5d9d86_ec2968ff",
      "revId": "144930ba3461ac34c5b01e6ea23b4909b3ee81fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39690381_97a7fa65",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/pip.go",
        "patchSetId": 5
      },
      "lineNbr": 474,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2019-03-29T17:54:12Z",
      "side": 1,
      "message": "If we really care that the status tray is not occluded at all, we should have test methods that test that, i.e. query the bounds of both windows and make sure they do not overlap. Testing against a constant is fragile and in my experience no more helpful than testing against an arbitrary delta.",
      "parentUuid": "865703ae_b3c85fad",
      "revId": "144930ba3461ac34c5b01e6ea23b4909b3ee81fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32147fba_78f799fd",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/pip.go",
        "patchSetId": 5
      },
      "lineNbr": 544,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2019-03-29T16:37:20Z",
      "side": 1,
      "message": "Again, here we can just query the initial position. We don\u0027t need to know the shelf size, just that the window moves when the shelf is hidden. (It might be more clear to start with the shelf hidden and test that the window moves up, but either way, the amount that the window moves is less interesting than whether or not it moved).",
      "revId": "144930ba3461ac34c5b01e6ea23b4909b3ee81fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1410a610_1d6492df",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/pip.go",
        "patchSetId": 5
      },
      "lineNbr": 544,
      "author": {
        "id": 1202079
      },
      "writtenOn": "2019-03-29T17:48:22Z",
      "side": 1,
      "message": "thanks, and yes, I could do that. Although the test would not be as complete.",
      "parentUuid": "32147fba_78f799fd",
      "revId": "144930ba3461ac34c5b01e6ea23b4909b3ee81fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}