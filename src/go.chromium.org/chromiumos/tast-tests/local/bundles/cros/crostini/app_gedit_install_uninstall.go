// Copyright 2022 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"context"
	"regexp"
	"strconv"
	"time"

	"go.chromium.org/chromiumos/tast-tests/common/testexec"
	"go.chromium.org/chromiumos/tast/ctxutil"
	"go.chromium.org/chromiumos/tast/errors"
	"go.chromium.org/chromiumos/tast-tests/local/chrome/uiauto"
	"go.chromium.org/chromiumos/tast-tests/local/chrome/uiauto/faillog"
	"go.chromium.org/chromiumos/tast-tests/local/chrome/uiauto/launcher"
	"go.chromium.org/chromiumos/tast-tests/local/chrome/uiauto/nodewith"
	"go.chromium.org/chromiumos/tast-tests/local/chrome/uiauto/role"
	"go.chromium.org/chromiumos/tast-tests/local/chrome/vmc"
	"go.chromium.org/chromiumos/tast-tests/local/crostini"
	"go.chromium.org/chromiumos/tast-tests/local/crostini/ui/settings"
	"go.chromium.org/chromiumos/tast-tests/local/crostini/ui/terminalapp"
	"go.chromium.org/chromiumos/tast-tests/local/screenshot"
	"go.chromium.org/chromiumos/tast-tests/local/uidetection"
	"go.chromium.org/chromiumos/tast/testing"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         AppGeditInstallUninstall,
		LacrosStatus: testing.LacrosVariantUnneeded,
		Desc:         "Install Gedit, check rendering, icons, saving and uninstall behavior",
		Contacts:     []string{"zubinpratap@google.com", "cros-containers-dev@google.com"},
		Attr:         []string{"group:mainline", "informational"},
		Vars:         screenshot.ScreenDiffVars,
		SoftwareDeps: []string{"chrome", "vm_host"},
		Params: []testing.Param{
			// Parameters generated by params_test.go. DO NOT EDIT.
			{
				Name:              "stable",
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Fixture:           "crostiniBuster",
				Timeout:           12 * time.Minute,
			}, {
				Name:              "unstable",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Fixture:           "crostiniBuster",
				Timeout:           12 * time.Minute,
			},
		},
	})
}
func AppGeditInstallUninstall(ctx context.Context, s *testing.State) {
	tconn := s.FixtValue().(crostini.FixtureData).Tconn
	keyboard := s.FixtValue().(crostini.FixtureData).KB
	cont := s.FixtValue().(crostini.FixtureData).Cont

	// Use a shortened context for test operations to reserve time for cleanup.
	cleanupCtx := ctx
	ctx, cancel := ctxutil.Shorten(ctx, 5*time.Second)
	defer cancel()
	defer faillog.DumpUITreeOnError(cleanupCtx, s.OutDir(), s.HasError, tconn)

	// Check VM size before Gedit install.
	sizeBytesBeforeGedit, err := getVMSizeInBytes(ctx)
	if err != nil {
		s.Fatal("Failed to get VM size before installing Gedit: ", err)
	}

	// Install Gedit.
	s.Log("Installing Gedit")
	if err := cont.Command(ctx, "sudo", "apt-get", "update").Run(testexec.DumpLogOnError); err != nil {
		s.Fatal("Failed to run apt-update: ", err)
	}
	if err := cont.Command(ctx, "sudo", "apt-get", "-y", "install", "gedit").Run(testexec.DumpLogOnError); err != nil {
		s.Fatal("Failed to install Gedit: ", err)
	}

	// Check VM size after Gedit install.
	sizeBytesAfterGedit, err := getVMSizeInBytes(ctx)
	if err != nil {
		s.Fatal("Failed to get VM size after installing Gedit: ", err)
	}
	if err := assertGBSizeUnchanged(ctx, sizeBytesBeforeGedit, sizeBytesAfterGedit); err != nil {
		s.Fatal("VM size has changed unexpectedly after installing gedit: ", err)
	}

	// Launch and test Gedit.
	s.Log("Launching Gedit from launcher")
	if err := launcher.SearchAndLaunchWithQuery(tconn, keyboard, "t", "Text Editor")(ctx); err != nil {
		s.Fatal("Failed to launch gedit: ", err)
	}

	ud := uidetection.NewDefault(tconn)
	ui := uiauto.New(tconn)
	geditWindow := nodewith.NameRegex(regexp.MustCompile(`.* - gedit`)).Role(role.Window).First()
	if err := uiauto.Combine("wait for gedit window to appear",
		ui.WaitUntilExists(geditWindow),
		ud.WaitUntilExists(uidetection.Word("Open").WithinA11yNode(geditWindow)),
	)(ctx); err != nil {
		s.Fatal("Failed to find Gedit window: ", err)
	}

	geditSaveAsWindow := nodewith.Name("Save As").Role(role.Window).First()
	if err := uiauto.Combine("edit file and save",
		keyboard.TypeAction("Hello, gedit!"),
		keyboard.AccelAction("ctrl+S"), // Bring up the save window
		ud.LeftClick(uidetection.Word("Save").WithinA11yNode(geditSaveAsWindow)),
		// Press ctrl+W twice to exit window.
		keyboard.AccelAction("ctrl+W"),
		keyboard.AccelAction("ctrl+W"),
	)(ctx); err != nil {
		s.Fatal("Failed to edit and save the Gedit file: ", err)
	}

	s.Log("Uninstall Gedit from Terminal")
	ta, err := terminalapp.Launch(ctx, tconn)
	if err != nil {
		s.Fatal("Failed to launch terminal: ", err)
	}

	if err = ta.RunCommand(keyboard, "sudo apt-get -y remove gedit")(ctx); err != nil {
		s.Fatal("Failed to run command in Terminal window: ", err)
	}

	// Check VM size again.
	sizeBytesAfterGeditRemoved, err := getVMSizeInBytes(ctx)
	if err != nil {
		s.Fatal("Failed to get VM size after removing Gedit: ", err)
	}
	if err := assertGBSizeUnchanged(ctx, sizeBytesBeforeGedit, sizeBytesAfterGeditRemoved); err != nil {
		s.Fatal("VM size has changed unexpectedly after removing gedit: ", err)
	}

	// Close terminal.
	if err := uiauto.Combine("close Terminal window",
		ta.WaitForPrompt(), // Wait until Gedit uninstall streams finish printing.
		ta.Exit(keyboard),
	)(ctx); err != nil {
		s.Fatal("Failed to close terminal: ", err)
	}
}

func getVMSizeInBytes(ctx context.Context) (int64, error) {
	hash, err := vmc.UserIDHash(ctx)
	if err != nil {
		return 0, errors.Wrap(err, "failed to get CROS_USER_ID_HASH")
		// s.Fatal("Failed to get CROS_USER_ID_HASH: ", err)
	}
	cmdOut, err := vmc.Command(ctx, hash, "list").Output()
	if err != nil {
		return 0, errors.Wrap(err, "failed to run 'vmc list'")
		// s.Fatal("Failed to run 'vmc list': ", err)
	}
	testing.ContextLog(ctx, "Here is the result of 'vmc list': ", string(cmdOut))

	// 'vmc list' produces an output like
	// 'termina (10737434624 bytes, min shrinkable size 2723151872 bytes, raw)
	// Total Size (bytes): 10737434624'
	// Note the first and third ints are the same. We extract all digits
	// from the string with the regex pattern.
	re := regexp.MustCompile(`[-]?\d[\d,]*[\.]?[\d{2}]*`)
	matches := re.FindAllString(string(cmdOut), -1)

	// Tests that the output has the expected structure - first and third sizes must be the same.
	if matches[0] != matches[2] {
		return 0, errors.Errorf("expected termina VM sizes to match, but got two values - %s and %s", matches[0], matches[2])
	}

	return strconv.ParseInt(matches[0], 10, 64)
}

func assertGBSizeUnchanged(ctx context.Context, before, after int64) error {
	// Convert to GB and floating point.
	beforeSizeGB := float64(before / settings.SizeGB)
	afterSizeGB := float64(after / settings.SizeGB)

	if beforeSizeGB != afterSizeGB {
		return errors.Errorf("Termina VM of unexpected size- want %fGB but got %fGB", beforeSizeGB, afterSizeGB)
	}

	return nil
}
