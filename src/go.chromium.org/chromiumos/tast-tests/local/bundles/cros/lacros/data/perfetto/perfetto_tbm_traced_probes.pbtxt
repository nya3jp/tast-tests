# This is inspired from the internal config: go/perfetto-aot-merged-config

# Enable periodic flushing of the trace buffer into the output file.
write_into_file: true

# Writes the userspace buffer into the file every 2.5 seconds.
file_write_period_ms: 2500

# We need to guarantee that events stay within some defined sorting window (for the importer).
flush_period_ms: 30000

# Buffer 0: for process stats.
buffers {
    size_kb: 4096
    fill_policy: RING_BUFFER
}

# Buffer 1: Small buffer for meminfo and procfs scans
buffers {
    size_kb: 128
    fill_policy: RING_BUFFER
}

# Buffer 2: for ftrace, frame timeline, rss_stat, GPU memory.
buffers {
    size_kb: 28608
    fill_policy: RING_BUFFER
}

buffers {
    size_kb: 63488
    fill_policy: DISCARD
}

data_sources {
    config {
        name: "linux.process_stats"
        target_buffer: 0
        process_stats_config {
            scan_all_processes_on_start: true
        }
    }
}

data_sources: {
    config {
        name: "linux.sys_stats"
        target_buffer: 1
        sys_stats_config {
            meminfo_period_ms: 5000
            meminfo_counters: MEMINFO_MEM_FREE
            meminfo_counters: MEMINFO_SWAP_FREE
            meminfo_counters: MEMINFO_SLAB
            meminfo_counters: MEMINFO_SLAB_UNRECLAIMABLE
            meminfo_counters: MEMINFO_KERNEL_STACK
        }
    }
}

data_sources {
    config {
        name: "linux.process_stats"
        target_buffer: 1
        process_stats_config {
            proc_stats_poll_ms: 30000 # 30 seconds
            quirks: DISABLE_ON_DEMAND
        }
    }
}

data_sources {
    config {
        name: "linux.ftrace"
        target_buffer: 2
        ftrace_config {
            symbolize_ksyms: true

            # os.Trace markers:
            ftrace_events: "ftrace/print"

            # RSS and ION buffer events:
            ftrace_events: "gpu_mem/gpu_mem_total"
            ftrace_events: "dmabuf_heap/dma_heap_stat"
            ftrace_events: "ion/ion_stat"
            ftrace_events: "kmem/ion_heap_grow"
            ftrace_events: "kmem/ion_heap_shrink"
            ftrace_events: "rss_stat"

            # Scheduling information & process tracking. Useful for:
            # - what is happening on each CPU at each moment
            # - why a thread was descheduled
            # - parent/child relationships between processes and threads.
            ftrace_events: "power/suspend_resume"
            ftrace_events: "sched/sched_blocked_reason"
            ftrace_events: "sched/sched_process_free"
            ftrace_events: "sched/sched_switch"
            ftrace_events: "task/task_newtask"
            ftrace_events: "task/task_rename"

            # Wakeup info. Allows you to compute how long a task was
            # blocked due to CPU contention.
            ftrace_events: "sched/sched_waking"
            ftrace_events: "sched/sched_wakeup_new"

            # Workqueue events.
            ftrace_events: "workqueue/workqueue_activate_work"
            ftrace_events: "workqueue/workqueue_execute_end"
            ftrace_events: "workqueue/workqueue_execute_start"
            ftrace_events: "workqueue/workqueue_queue_work"

            # vmscan and mm_compaction events.
            ftrace_events: "vmscan/mm_vmscan_kswapd_wake"
            ftrace_events: "vmscan/mm_vmscan_kswapd_sleep"
            ftrace_events: "vmscan/mm_vmscan_direct_reclaim_begin"
            ftrace_events: "vmscan/mm_vmscan_direct_reclaim_end"
            ftrace_events: "compaction/mm_compaction_begin"
            ftrace_events: "compaction/mm_compaction_end"

            # cpu events.
            ftrace_events: "power/cpu_frequency"
            ftrace_events: "power/cpu_idle"

            compact_sched {
                enabled: true
            }
        }
    }
}

data_sources: {
  config: {
    name: "org.chromium.trace_event"
    target_buffer: 3
    trace_duration_ms: 0
    tracing_session_id: 0
    chrome_config: {
        trace_config: "{\"record_mode\":\"record-until-full\",\"included_categories\":[\"toplevel\",\"sequence_manager\",\"disabled-by-default-toplevel.flow\",\"disabled-by-default-ipc.flow\",\"mojom\",\"v8\",\"blink\",\"cc\",\"gpu\",\"viz\",\"ui\",\"views\",\"benchmark\",\"evdev\",\"input\",\"loading\",\"net\",\"netlog\",\"navigation\",\"browser\"],\"memory_dump_config\":{}}"
        privacy_filtering_enabled: false
        convert_to_legacy_json: false
        client_priority: UNKNOWN
    }
    legacy_config: ""
  }
}

data_sources: {
  config: {
    name: "org.chromium.trace_metadata"
    target_buffer: 3
    trace_duration_ms: 0
    tracing_session_id: 0
    chrome_config: {
      trace_config: "{\"record_mode\":\"record-until-full\",\"included_categories\":[\"toplevel\",\"sequence_manager\",\"disabled-by-default-toplevel.flow\",\"disabled-by-default-ipc.flow\",\"mojom\",\"v8\",\"blink\",\"cc\",\"gpu\",\"viz\",\"ui\",\"views\",\"benchmark\",\"evdev\",\"input\",\"loading\",\"net\",\"netlog\",\"navigation\",\"browser\"],\"memory_dump_config\":{}}"
      privacy_filtering_enabled: false
      convert_to_legacy_json: false
      client_priority: UNKNOWN
    }
    legacy_config: ""
  }
}

duration_ms: 10000

