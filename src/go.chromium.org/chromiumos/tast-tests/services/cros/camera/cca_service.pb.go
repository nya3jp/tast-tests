// Copyright 2022 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: cca_service.proto

package camera

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CameraMode int32

const (
	CameraMode_PHOTO CameraMode = 0
	CameraMode_VIDEO CameraMode = 1
)

// Enum value maps for CameraMode.
var (
	CameraMode_name = map[int32]string{
		0: "PHOTO",
		1: "VIDEO",
	}
	CameraMode_value = map[string]int32{
		"PHOTO": 0,
		"VIDEO": 1,
	}
)

func (x CameraMode) Enum() *CameraMode {
	p := new(CameraMode)
	*p = x
	return p
}

func (x CameraMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CameraMode) Descriptor() protoreflect.EnumDescriptor {
	return file_cca_service_proto_enumTypes[0].Descriptor()
}

func (CameraMode) Type() protoreflect.EnumType {
	return &file_cca_service_proto_enumTypes[0]
}

func (x CameraMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CameraMode.Descriptor instead.
func (CameraMode) EnumDescriptor() ([]byte, []int) {
	return file_cca_service_proto_rawDescGZIP(), []int{0}
}

type Facing int32

const (
	Facing_FACING_UNSET Facing = 0
	// DUT's environment facing camera.
	Facing_FACING_BACK Facing = 1
	// DUT's user facing camera.
	Facing_FACING_FRONT Facing = 2
)

// Enum value maps for Facing.
var (
	Facing_name = map[int32]string{
		0: "FACING_UNSET",
		1: "FACING_BACK",
		2: "FACING_FRONT",
	}
	Facing_value = map[string]int32{
		"FACING_UNSET": 0,
		"FACING_BACK":  1,
		"FACING_FRONT": 2,
	}
)

func (x Facing) Enum() *Facing {
	p := new(Facing)
	*p = x
	return p
}

func (x Facing) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Facing) Descriptor() protoreflect.EnumDescriptor {
	return file_cca_service_proto_enumTypes[1].Descriptor()
}

func (Facing) Type() protoreflect.EnumType {
	return &file_cca_service_proto_enumTypes[1]
}

func (x Facing) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Facing.Descriptor instead.
func (Facing) EnumDescriptor() ([]byte, []int) {
	return file_cca_service_proto_rawDescGZIP(), []int{1}
}

type TestResult int32

const (
	TestResult_TEST_RESULT_UNSET TestResult = 0
	// Test is passed.
	TestResult_TEST_RESULT_PASSED TestResult = 1
	// Test is failed.
	TestResult_TEST_RESULT_FAILED TestResult = 2
)

// Enum value maps for TestResult.
var (
	TestResult_name = map[int32]string{
		0: "TEST_RESULT_UNSET",
		1: "TEST_RESULT_PASSED",
		2: "TEST_RESULT_FAILED",
	}
	TestResult_value = map[string]int32{
		"TEST_RESULT_UNSET":  0,
		"TEST_RESULT_PASSED": 1,
		"TEST_RESULT_FAILED": 2,
	}
)

func (x TestResult) Enum() *TestResult {
	p := new(TestResult)
	*p = x
	return p
}

func (x TestResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestResult) Descriptor() protoreflect.EnumDescriptor {
	return file_cca_service_proto_enumTypes[2].Descriptor()
}

func (TestResult) Type() protoreflect.EnumType {
	return &file_cca_service_proto_enumTypes[2]
}

func (x TestResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestResult.Descriptor instead.
func (TestResult) EnumDescriptor() ([]byte, []int) {
	return file_cca_service_proto_rawDescGZIP(), []int{2}
}

type CameraTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mode of camera to be run.
	Mode CameraMode `protobuf:"varint,1,opt,name=mode,proto3,enum=tast.cros.camera.CameraMode" json:"mode,omitempty"`
	// Facing of camera to be tested.
	Facing Facing `protobuf:"varint,2,opt,name=facing,proto3,enum=tast.cros.camera.Facing" json:"facing,omitempty"`
	// Script contents which should be loaded when initializing CCA instance.
	ScriptContents [][]byte `protobuf:"bytes,3,rep,name=script_contents,json=scriptContents,proto3" json:"script_contents,omitempty"`
}

func (x *CameraTestRequest) Reset() {
	*x = CameraTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cca_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraTestRequest) ProtoMessage() {}

func (x *CameraTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cca_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraTestRequest.ProtoReflect.Descriptor instead.
func (*CameraTestRequest) Descriptor() ([]byte, []int) {
	return file_cca_service_proto_rawDescGZIP(), []int{0}
}

func (x *CameraTestRequest) GetMode() CameraMode {
	if x != nil {
		return x.Mode
	}
	return CameraMode_PHOTO
}

func (x *CameraTestRequest) GetFacing() Facing {
	if x != nil {
		return x.Facing
	}
	return Facing_FACING_UNSET
}

func (x *CameraTestRequest) GetScriptContents() [][]byte {
	if x != nil {
		return x.ScriptContents
	}
	return nil
}

type CameraTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result TestResult `protobuf:"varint,1,opt,name=result,proto3,enum=tast.cros.camera.TestResult" json:"result,omitempty"`
	// Error message from running test.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CameraTestResponse) Reset() {
	*x = CameraTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cca_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraTestResponse) ProtoMessage() {}

func (x *CameraTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cca_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraTestResponse.ProtoReflect.Descriptor instead.
func (*CameraTestResponse) Descriptor() ([]byte, []int) {
	return file_cca_service_proto_rawDescGZIP(), []int{1}
}

func (x *CameraTestResponse) GetResult() TestResult {
	if x != nil {
		return x.Result
	}
	return TestResult_TEST_RESULT_UNSET
}

func (x *CameraTestResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_cca_service_proto protoreflect.FileDescriptor

var file_cca_service_proto_rawDesc = []byte{
	0x0a, 0x11, 0x63, 0x63, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x10, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa0, 0x01, 0x0a, 0x11, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72,
	0x6f, 0x73, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x73,
	0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x46, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x66, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x60, 0x0a, 0x12, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x61,
	0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2a, 0x22, 0x0a, 0x0a, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x01, 0x2a, 0x3d, 0x0a, 0x06, 0x46,
	0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x41, 0x43, 0x49, 0x4e, 0x47, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x41, 0x43, 0x49, 0x4e,
	0x47, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x41, 0x43, 0x49,
	0x4e, 0x47, 0x5f, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x10, 0x02, 0x2a, 0x53, 0x0a, 0x0a, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x45, 0x53, 0x54,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x50,
	0x41, 0x53, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x45, 0x53, 0x54, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x32,
	0xdc, 0x04, 0x0a, 0x0a, 0x43, 0x43, 0x41, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d,
	0x0a, 0x09, 0x4e, 0x65, 0x77, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a,
	0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f,
	0x0a, 0x0b, 0x52, 0x65, 0x75, 0x73, 0x65, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x59, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12, 0x23, 0x2e,
	0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0b, 0x54,
	0x61, 0x6b, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x24, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0b, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x24, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x11, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72,
	0x6f, 0x73, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x26,
	0x5a, 0x24, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x61, 0x73,
	0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cca_service_proto_rawDescOnce sync.Once
	file_cca_service_proto_rawDescData = file_cca_service_proto_rawDesc
)

func file_cca_service_proto_rawDescGZIP() []byte {
	file_cca_service_proto_rawDescOnce.Do(func() {
		file_cca_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_cca_service_proto_rawDescData)
	})
	return file_cca_service_proto_rawDescData
}

var file_cca_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_cca_service_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_cca_service_proto_goTypes = []interface{}{
	(CameraMode)(0),            // 0: tast.cros.camera.CameraMode
	(Facing)(0),                // 1: tast.cros.camera.Facing
	(TestResult)(0),            // 2: tast.cros.camera.TestResult
	(*CameraTestRequest)(nil),  // 3: tast.cros.camera.CameraTestRequest
	(*CameraTestResponse)(nil), // 4: tast.cros.camera.CameraTestResponse
	(*empty.Empty)(nil),        // 5: google.protobuf.Empty
}
var file_cca_service_proto_depIdxs = []int32{
	0,  // 0: tast.cros.camera.CameraTestRequest.mode:type_name -> tast.cros.camera.CameraMode
	1,  // 1: tast.cros.camera.CameraTestRequest.facing:type_name -> tast.cros.camera.Facing
	2,  // 2: tast.cros.camera.CameraTestResponse.result:type_name -> tast.cros.camera.TestResult
	5,  // 3: tast.cros.camera.CCAService.NewChrome:input_type -> google.protobuf.Empty
	5,  // 4: tast.cros.camera.CCAService.CloseChrome:input_type -> google.protobuf.Empty
	5,  // 5: tast.cros.camera.CCAService.ReuseChrome:input_type -> google.protobuf.Empty
	3,  // 6: tast.cros.camera.CCAService.OpenCamera:input_type -> tast.cros.camera.CameraTestRequest
	5,  // 7: tast.cros.camera.CCAService.CloseCamera:input_type -> google.protobuf.Empty
	5,  // 8: tast.cros.camera.CCAService.TakePicture:input_type -> google.protobuf.Empty
	5,  // 9: tast.cros.camera.CCAService.RecordVideo:input_type -> google.protobuf.Empty
	5,  // 10: tast.cros.camera.CCAService.CheckCameraExists:input_type -> google.protobuf.Empty
	5,  // 11: tast.cros.camera.CCAService.NewChrome:output_type -> google.protobuf.Empty
	5,  // 12: tast.cros.camera.CCAService.CloseChrome:output_type -> google.protobuf.Empty
	5,  // 13: tast.cros.camera.CCAService.ReuseChrome:output_type -> google.protobuf.Empty
	4,  // 14: tast.cros.camera.CCAService.OpenCamera:output_type -> tast.cros.camera.CameraTestResponse
	5,  // 15: tast.cros.camera.CCAService.CloseCamera:output_type -> google.protobuf.Empty
	4,  // 16: tast.cros.camera.CCAService.TakePicture:output_type -> tast.cros.camera.CameraTestResponse
	4,  // 17: tast.cros.camera.CCAService.RecordVideo:output_type -> tast.cros.camera.CameraTestResponse
	4,  // 18: tast.cros.camera.CCAService.CheckCameraExists:output_type -> tast.cros.camera.CameraTestResponse
	11, // [11:19] is the sub-list for method output_type
	3,  // [3:11] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_cca_service_proto_init() }
func file_cca_service_proto_init() {
	if File_cca_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cca_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CameraTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cca_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CameraTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cca_service_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cca_service_proto_goTypes,
		DependencyIndexes: file_cca_service_proto_depIdxs,
		EnumInfos:         file_cca_service_proto_enumTypes,
		MessageInfos:      file_cca_service_proto_msgTypes,
	}.Build()
	File_cca_service_proto = out.File
	file_cca_service_proto_rawDesc = nil
	file_cca_service_proto_goTypes = nil
	file_cca_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CCAServiceClient is the client API for CCAService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CCAServiceClient interface {
	// NewChrome logs into a Chrome session as a user. CloseChrome must be called later
	// to clean up the associated resources.
	NewChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// CloseChrome releases the resources obtained by NewChrome.
	CloseChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// ReuseChrome passes an Option to New to make Chrome reuse the existing login session.
	ReuseChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// OpenCamera launches the specific camera with photo or video mode.
	// CloseCamera must be called later to clean up the associated resources.
	OpenCamera(ctx context.Context, in *CameraTestRequest, opts ...grpc.CallOption) (*CameraTestResponse, error)
	// CloseCamera releases the resources obtained by OpenCamera.
	CloseCamera(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// TakePicture captures a photo using the camera.
	TakePicture(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CameraTestResponse, error)
	// RecordVideo records a video using the camera.
	RecordVideo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CameraTestResponse, error)
	// CheckCameraExists checks if the camera instance exists.
	CheckCameraExists(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CameraTestResponse, error)
}

type cCAServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCCAServiceClient(cc grpc.ClientConnInterface) CCAServiceClient {
	return &cCAServiceClient{cc}
}

func (c *cCAServiceClient) NewChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.camera.CCAService/NewChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCAServiceClient) CloseChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.camera.CCAService/CloseChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCAServiceClient) ReuseChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.camera.CCAService/ReuseChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCAServiceClient) OpenCamera(ctx context.Context, in *CameraTestRequest, opts ...grpc.CallOption) (*CameraTestResponse, error) {
	out := new(CameraTestResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.camera.CCAService/OpenCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCAServiceClient) CloseCamera(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.camera.CCAService/CloseCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCAServiceClient) TakePicture(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CameraTestResponse, error) {
	out := new(CameraTestResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.camera.CCAService/TakePicture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCAServiceClient) RecordVideo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CameraTestResponse, error) {
	out := new(CameraTestResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.camera.CCAService/RecordVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCAServiceClient) CheckCameraExists(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CameraTestResponse, error) {
	out := new(CameraTestResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.camera.CCAService/CheckCameraExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CCAServiceServer is the server API for CCAService service.
type CCAServiceServer interface {
	// NewChrome logs into a Chrome session as a user. CloseChrome must be called later
	// to clean up the associated resources.
	NewChrome(context.Context, *empty.Empty) (*empty.Empty, error)
	// CloseChrome releases the resources obtained by NewChrome.
	CloseChrome(context.Context, *empty.Empty) (*empty.Empty, error)
	// ReuseChrome passes an Option to New to make Chrome reuse the existing login session.
	ReuseChrome(context.Context, *empty.Empty) (*empty.Empty, error)
	// OpenCamera launches the specific camera with photo or video mode.
	// CloseCamera must be called later to clean up the associated resources.
	OpenCamera(context.Context, *CameraTestRequest) (*CameraTestResponse, error)
	// CloseCamera releases the resources obtained by OpenCamera.
	CloseCamera(context.Context, *empty.Empty) (*empty.Empty, error)
	// TakePicture captures a photo using the camera.
	TakePicture(context.Context, *empty.Empty) (*CameraTestResponse, error)
	// RecordVideo records a video using the camera.
	RecordVideo(context.Context, *empty.Empty) (*CameraTestResponse, error)
	// CheckCameraExists checks if the camera instance exists.
	CheckCameraExists(context.Context, *empty.Empty) (*CameraTestResponse, error)
}

// UnimplementedCCAServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCCAServiceServer struct {
}

func (*UnimplementedCCAServiceServer) NewChrome(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewChrome not implemented")
}
func (*UnimplementedCCAServiceServer) CloseChrome(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseChrome not implemented")
}
func (*UnimplementedCCAServiceServer) ReuseChrome(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReuseChrome not implemented")
}
func (*UnimplementedCCAServiceServer) OpenCamera(context.Context, *CameraTestRequest) (*CameraTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenCamera not implemented")
}
func (*UnimplementedCCAServiceServer) CloseCamera(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseCamera not implemented")
}
func (*UnimplementedCCAServiceServer) TakePicture(context.Context, *empty.Empty) (*CameraTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakePicture not implemented")
}
func (*UnimplementedCCAServiceServer) RecordVideo(context.Context, *empty.Empty) (*CameraTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordVideo not implemented")
}
func (*UnimplementedCCAServiceServer) CheckCameraExists(context.Context, *empty.Empty) (*CameraTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCameraExists not implemented")
}

func RegisterCCAServiceServer(s *grpc.Server, srv CCAServiceServer) {
	s.RegisterService(&_CCAService_serviceDesc, srv)
}

func _CCAService_NewChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCAServiceServer).NewChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.camera.CCAService/NewChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCAServiceServer).NewChrome(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCAService_CloseChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCAServiceServer).CloseChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.camera.CCAService/CloseChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCAServiceServer).CloseChrome(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCAService_ReuseChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCAServiceServer).ReuseChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.camera.CCAService/ReuseChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCAServiceServer).ReuseChrome(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCAService_OpenCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CameraTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCAServiceServer).OpenCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.camera.CCAService/OpenCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCAServiceServer).OpenCamera(ctx, req.(*CameraTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCAService_CloseCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCAServiceServer).CloseCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.camera.CCAService/CloseCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCAServiceServer).CloseCamera(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCAService_TakePicture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCAServiceServer).TakePicture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.camera.CCAService/TakePicture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCAServiceServer).TakePicture(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCAService_RecordVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCAServiceServer).RecordVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.camera.CCAService/RecordVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCAServiceServer).RecordVideo(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCAService_CheckCameraExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCAServiceServer).CheckCameraExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.camera.CCAService/CheckCameraExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCAServiceServer).CheckCameraExists(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _CCAService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.camera.CCAService",
	HandlerType: (*CCAServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewChrome",
			Handler:    _CCAService_NewChrome_Handler,
		},
		{
			MethodName: "CloseChrome",
			Handler:    _CCAService_CloseChrome_Handler,
		},
		{
			MethodName: "ReuseChrome",
			Handler:    _CCAService_ReuseChrome_Handler,
		},
		{
			MethodName: "OpenCamera",
			Handler:    _CCAService_OpenCamera_Handler,
		},
		{
			MethodName: "CloseCamera",
			Handler:    _CCAService_CloseCamera_Handler,
		},
		{
			MethodName: "TakePicture",
			Handler:    _CCAService_TakePicture_Handler,
		},
		{
			MethodName: "RecordVideo",
			Handler:    _CCAService_RecordVideo_Handler,
		},
		{
			MethodName: "CheckCameraExists",
			Handler:    _CCAService_CheckCameraExists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cca_service.proto",
}
