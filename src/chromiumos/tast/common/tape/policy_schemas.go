// Copyright 2021 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by generate_policy_schemas.py. DO NOT EDIT.
// Edit the generator in gen/generate_policy_schemas.py instead.

package tape

import (
	"encoding/json"
)

type requests struct {
	PolicyTargetKey policyTargetKey `json:"policyTargetKey"`

	PolicyValue policyValue `json:"policyValue"`
	UpdateMask  updateMask  `json:"updateMask"`
}

type policyTargetKey struct {
	TargetResource string `json:"targetResource"`
}

type policyValue struct {
	PolicySchema string `json:"policySchema"`
	Value        value  `json:"value"`
}

type value interface {
}

type updateMask struct {
	Paths []string `json:"paths"`
}

///////////////////////////////////////////////////////////////////////////////
// AllowForUsers
///////////////////////////////////////////////////////////////////////////////

type AllowForUsers struct {
	AllowForUsers bool `json:"allowForUsers"`
}

func (p *AllowForUsers) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.printers.AllowForUsers",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"allowForUsers"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// AllowForDevices
///////////////////////////////////////////////////////////////////////////////

type AllowForDevices struct {
	AllowForDevices bool `json:"allowForDevices"`
}

func (p *AllowForDevices) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.printers.AllowForDevices",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"allowForDevices"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// AllowForManagedGuest
///////////////////////////////////////////////////////////////////////////////

type AllowForManagedGuest struct {
	AllowForManagedGuest bool `json:"allowForManagedGuest"`
}

func (p *AllowForManagedGuest) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.printers.AllowForManagedGuest",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"allowForManagedGuest"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// SessionLength
///////////////////////////////////////////////////////////////////////////////

type SessionLength struct {
	SessionDurationLimit NullableDuration `json:"sessionDurationLimit"`
}
type NullableDuration struct {
	Duration Duration `json:"duration"`
}
type Duration struct {
	Seconds int64 `json:"seconds"`
	Nanos   int   `json:"nanos"`
}

func (p *SessionLength) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.SessionLength",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"sessionDurationLimit"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// Avatar
///////////////////////////////////////////////////////////////////////////////

type Avatar struct {
	UserAvatarImage UploadedFile `json:"userAvatarImage"`
}
type UploadedFile struct {
	DownloadUri string `json:"downloadUri"`
}

func (p *Avatar) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.Avatar",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"userAvatarImage"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// Wallpaper
///////////////////////////////////////////////////////////////////////////////

type Wallpaper struct {
	WallpaperImage UploadedFile `json:"wallpaperImage"`
}

func (p *Wallpaper) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.Wallpaper",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"wallpaperImage"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// BrowserThemeColor
///////////////////////////////////////////////////////////////////////////////

type BrowserThemeColor struct {
	BrowserThemeColor string `json:"browserThemeColor"`
}

func (p *BrowserThemeColor) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.BrowserThemeColor",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"browserThemeColor"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// BrowserSignin
///////////////////////////////////////////////////////////////////////////////

type BrowserSignin struct {
	BrowserSignin BrowserSigninModeEnum `json:"browserSignin"`
}
type BrowserSigninModeEnum int

const (
	BROWSER_SIGNIN_MODE_ENUM_UNSPECIFIED BrowserSigninModeEnum = iota // 0
	BROWSER_SIGNIN_MODE_ENUM_DISABLE                                  // 1
	BROWSER_SIGNIN_MODE_ENUM_ENABLE                                   // 2
	BROWSER_SIGNIN_MODE_ENUM_FORCE                                    // 3
)

func (p *BrowserSignin) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.BrowserSignin",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"browserSignin"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// RestrictSigninToPattern
///////////////////////////////////////////////////////////////////////////////

type RestrictSigninToPattern struct {
	RestrictSigninToPattern string `json:"restrictSigninToPattern"`
}

func (p *RestrictSigninToPattern) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.RestrictSigninToPattern",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"restrictSigninToPattern"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// SigninInterceptionEnabled
///////////////////////////////////////////////////////////////////////////////

type SigninInterceptionEnabled struct {
	SigninInterceptionEnabled bool `json:"signinInterceptionEnabled"`
}

func (p *SigninInterceptionEnabled) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.SigninInterceptionEnabled",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"signinInterceptionEnabled"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// LoginDisplayPasswordButtonEnabled
///////////////////////////////////////////////////////////////////////////////

type LoginDisplayPasswordButtonEnabled struct {
	LoginDisplayPasswordButtonEnabled bool `json:"loginDisplayPasswordButtonEnabled"`
}

func (p *LoginDisplayPasswordButtonEnabled) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.LoginDisplayPasswordButtonEnabled",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"loginDisplayPasswordButtonEnabled"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// MobileManagement
///////////////////////////////////////////////////////////////////////////////

type MobileManagement struct {
	EnableMobileChromePolicies bool `json:"enableMobileChromePolicies"`
}

func (p *MobileManagement) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.MobileManagement",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"enableMobileChromePolicies"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// DeviceEnrollment
///////////////////////////////////////////////////////////////////////////////

type DeviceEnrollment struct {
	AutoDevicePlacementEnabled bool `json:"autoDevicePlacementEnabled"`
}

func (p *DeviceEnrollment) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.DeviceEnrollment",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"autoDevicePlacementEnabled"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// AllowPopulateAssetIdentifier
///////////////////////////////////////////////////////////////////////////////

type AllowPopulateAssetIdentifier struct {
	AllowToUpdateDeviceAttribute bool `json:"allowToUpdateDeviceAttribute"`
}

func (p *AllowPopulateAssetIdentifier) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.AllowPopulateAssetIdentifier",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"allowToUpdateDeviceAttribute"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// EnrollPermission
///////////////////////////////////////////////////////////////////////////////

type EnrollPermission struct {
	DeviceEnrollPermission AllowToEnrollDevicesEnum `json:"deviceEnrollPermission"`
}
type AllowToEnrollDevicesEnum int

const (
	ALLOW_TO_ENROLL_DEVICES_ENUM_UNSPECIFIED               AllowToEnrollDevicesEnum = iota // 0
	ALLOW_TO_ENROLL_DEVICES_ENUM_ALLOW_ENROLL_RE_ENROLL                                    // 1
	ALLOW_TO_ENROLL_DEVICES_ENUM_ALLOW_RE_ENROLL                                           // 2
	ALLOW_TO_ENROLL_DEVICES_ENUM_DISALLOW_ENROLL_RE_ENROLL                                 // 3
)

func (p *EnrollPermission) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.EnrollPermission",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"deviceEnrollPermission"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// TaskManager
///////////////////////////////////////////////////////////////////////////////

type TaskManager struct {
	TaskManagerEndProcessEnabled bool `json:"taskManagerEndProcessEnabled"`
}

func (p *TaskManager) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.TaskManager",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"taskManagerEndProcessEnabled"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// SiteIsolationBrowser
///////////////////////////////////////////////////////////////////////////////

type SiteIsolationBrowser struct {
	IsolateOrigins []string `json:"isolateOrigins"`
	SitePerProcess bool     `json:"sitePerProcess"`
}

func (p *SiteIsolationBrowser) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.SiteIsolationBrowser",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"isolateOrigins", "sitePerProcess"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// SiteIsolationAndroid
///////////////////////////////////////////////////////////////////////////////

type SiteIsolationAndroid struct {
	SitePerProcessAndroid NullableBoolean `json:"sitePerProcessAndroid"`
	IsolateOriginsAndroid []string        `json:"isolateOriginsAndroid"`
}
type NullableBoolean int

const (
	NULLABLE_BOOLEAN_UNSPECIFIED NullableBoolean = iota // 0
	UNSET                                               // 1
	FALSE                                               // 2
	TRUE                                                // 3
)

func (p *SiteIsolationAndroid) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.SiteIsolationAndroid",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"sitePerProcessAndroid", "isolateOriginsAndroid"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// PasswordManager
///////////////////////////////////////////////////////////////////////////////

type PasswordManager struct {
	PasswordManagerEnabled NullableBoolean `json:"passwordManagerEnabled"`
}

func (p *PasswordManager) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.PasswordManager",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"passwordManagerEnabled"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// LockScreen
///////////////////////////////////////////////////////////////////////////////

type LockScreen struct {
	AllowScreenLock bool `json:"allowScreenLock"`
}

func (p *LockScreen) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.LockScreen",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"allowScreenLock"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// QuickUnlockModeAllowlist
///////////////////////////////////////////////////////////////////////////////

type QuickUnlockModeAllowlist struct {
	QuickUnlockModeAllowlist []string `json:"quickUnlockModeAllowlist"`
}

func (p *QuickUnlockModeAllowlist) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.QuickUnlockModeAllowlist",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"quickUnlockModeAllowlist"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// PinUnlockAutosubmitEnabled
///////////////////////////////////////////////////////////////////////////////

type PinUnlockAutosubmitEnabled struct {
	PinUnlockAutosubmitEnabled bool `json:"pinUnlockAutosubmitEnabled"`
}

func (p *PinUnlockAutosubmitEnabled) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.PinUnlockAutosubmitEnabled",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"pinUnlockAutosubmitEnabled"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// LockScreenMediaPlaybackEnabled
///////////////////////////////////////////////////////////////////////////////

type LockScreenMediaPlaybackEnabled struct {
	LockScreenMediaPlaybackEnabled bool `json:"lockScreenMediaPlaybackEnabled"`
}

func (p *LockScreenMediaPlaybackEnabled) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.LockScreenMediaPlaybackEnabled",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"lockScreenMediaPlaybackEnabled"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// IdleSettings
///////////////////////////////////////////////////////////////////////////////

type IdleSettings struct {
	IdleTimeoutMinutes string                 `json:"idleTimeoutMinutes"`
	ActionOnDeviceIdle ActionOnDeviceIdleEnum `json:"actionOnDeviceIdle"`
	ActionOnLidClose   ActionOnLidCloseEnum   `json:"actionOnLidClose"`
	LockOnSleep        NullableBoolean        `json:"lockOnSleep"`
}
type ActionOnDeviceIdleEnum int

const (
	ACTION_ON_DEVICE_IDLE_ENUM_UNSPECIFIED ActionOnDeviceIdleEnum = iota // 0
	ACTION_ON_DEVICE_IDLE_ENUM_SLEEP                                     // 1
	ACTION_ON_DEVICE_IDLE_ENUM_LOGOUT                                    // 2
	ACTION_ON_DEVICE_IDLE_ENUM_LOCK                                      // 3
)

type ActionOnLidCloseEnum int

const (
	ACTION_ON_LID_CLOSE_ENUM_UNSPECIFIED ActionOnLidCloseEnum = iota // 0
	ACTION_ON_LID_CLOSE_ENUM_SLEEP                                   // 1
	ACTION_ON_LID_CLOSE_ENUM_LOGOUT                                  // 2
)

func (p *IdleSettings) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.IdleSettings",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"idleTimeoutMinutes", "actionOnDeviceIdle", "actionOnLidClose", "lockOnSleep"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// IncognitoMode
///////////////////////////////////////////////////////////////////////////////

type IncognitoMode struct {
	IncognitoModeAvailability IncognitoModeAvailabilityEnum `json:"incognitoModeAvailability"`
}
type IncognitoModeAvailabilityEnum int

const (
	INCOGNITO_MODE_AVAILABILITY_ENUM_UNSPECIFIED IncognitoModeAvailabilityEnum = iota // 0
	INCOGNITO_MODE_AVAILABILITY_ENUM_AVAILABLE                                        // 1
	INCOGNITO_MODE_AVAILABILITY_ENUM_UNAVAILABLE                                      // 2
)

func (p *IncognitoMode) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.IncognitoMode",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"incognitoModeAvailability"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// BrowserHistory
///////////////////////////////////////////////////////////////////////////////

type BrowserHistory struct {
	SavingBrowserHistoryDisabled bool `json:"savingBrowserHistoryDisabled"`
}

func (p *BrowserHistory) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.BrowserHistory",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"savingBrowserHistoryDisabled"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// ClearBrowserHistory
///////////////////////////////////////////////////////////////////////////////

type ClearBrowserHistory struct {
	AllowDeletingBrowserHistory bool `json:"allowDeletingBrowserHistory"`
}

func (p *ClearBrowserHistory) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.ClearBrowserHistory",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"allowDeletingBrowserHistory"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// ForceEphemeralMode
///////////////////////////////////////////////////////////////////////////////

type ForceEphemeralMode struct {
	ForceEphemeralProfiles bool `json:"forceEphemeralProfiles"`
}

func (p *ForceEphemeralMode) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.ForceEphemeralMode",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"forceEphemeralProfiles"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// OnlineRevocationChecks
///////////////////////////////////////////////////////////////////////////////

type OnlineRevocationChecks struct {
	EnableOnlineRevocationChecks bool `json:"enableOnlineRevocationChecks"`
}

func (p *OnlineRevocationChecks) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.OnlineRevocationChecks",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"enableOnlineRevocationChecks"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// Geolocation
///////////////////////////////////////////////////////////////////////////////

type Geolocation struct {
	DefaultGeolocationSetting GeolocationSettingEnum `json:"defaultGeolocationSetting"`
}
type GeolocationSettingEnum int

const (
	GEOLOCATION_SETTING_ENUM_UNSPECIFIED       GeolocationSettingEnum = iota // 0
	GEOLOCATION_SETTING_ENUM_ALLOW_GEOLOCATION                               // 1
	GEOLOCATION_SETTING_ENUM_BLOCK_GEOLOCATION                               // 2
	GEOLOCATION_SETTING_ENUM_ASK_GEOLOCATION                                 // 3
	GEOLOCATION_SETTING_ENUM_USER_CHOICE                                     // 4
)

func (p *Geolocation) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.Geolocation",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"defaultGeolocationSetting"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// SingleSignOn
///////////////////////////////////////////////////////////////////////////////

type SingleSignOn struct {
	IdpRedirectEnabled bool `json:"idpRedirectEnabled"`
}

func (p *SingleSignOn) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.SingleSignOn",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"idpRedirectEnabled"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// SingleSignOnLoginFrequency
///////////////////////////////////////////////////////////////////////////////

type SingleSignOnLoginFrequency struct {
	SamlOfflineSigninTimeLimit SamlSigninTimeLimitEnum `json:"samlOfflineSigninTimeLimit"`
}
type SamlSigninTimeLimitEnum int

const (
	SAML_SIGNIN_TIME_LIMIT_ENUM_UNSPECIFIED      SamlSigninTimeLimitEnum = iota // 0
	SAML_SIGNIN_TIME_LIMIT_ENUM_SAML_ONE_DAY                                    // 1
	SAML_SIGNIN_TIME_LIMIT_ENUM_SAML_THREE_DAYS                                 // 2
	SAML_SIGNIN_TIME_LIMIT_ENUM_SAML_ONE_WEEK                                   // 3
	SAML_SIGNIN_TIME_LIMIT_ENUM_SAML_TWO_WEEKS                                  // 4
	SAML_SIGNIN_TIME_LIMIT_ENUM_SAML_THREE_WEEKS                                // 5
	SAML_SIGNIN_TIME_LIMIT_ENUM_SAML_FOUR_WEEKS                                 // 6
	SAML_SIGNIN_TIME_LIMIT_ENUM_EVERY_TIME                                      // 7
	SAML_SIGNIN_TIME_LIMIT_ENUM_SAML_NEVER                                      // 8
)

func (p *SingleSignOnLoginFrequency) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.SingleSignOnLoginFrequency",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"samlOfflineSigninTimeLimit"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// CertificateTransparencyEnforcementDisabledForUrls
///////////////////////////////////////////////////////////////////////////////

type CertificateTransparencyEnforcementDisabledForUrls struct {
	CertificateTransparencyEnforcementDisabledForUrls []string `json:"certificateTransparencyEnforcementDisabledForUrls"`
}

func (p *CertificateTransparencyEnforcementDisabledForUrls) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.CertificateTransparencyEnforcementDisabledForUrls",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"certificateTransparencyEnforcementDisabledForUrls"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// CertTransparencyCas
///////////////////////////////////////////////////////////////////////////////

type CertTransparencyCas struct {
	CertificateTransparencyEnforcementDisabledForCas []string `json:"certificateTransparencyEnforcementDisabledForCas"`
}

func (p *CertTransparencyCas) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.CertTransparencyCas",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"certificateTransparencyEnforcementDisabledForCas"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// CertTransparencyLegacyCas
///////////////////////////////////////////////////////////////////////////////

type CertTransparencyLegacyCas struct {
	CertificateTransparencyEnforcementDisabledForLegacyCas []string `json:"certificateTransparencyEnforcementDisabledForLegacyCas"`
}

func (p *CertTransparencyLegacyCas) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.CertTransparencyLegacyCas",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"certificateTransparencyEnforcementDisabledForLegacyCas"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// CaCertificateManagementAllowed
///////////////////////////////////////////////////////////////////////////////

type CaCertificateManagementAllowed struct {
	CaCertificateManagementAllowed CACertificateManagementAllowedEnum `json:"caCertificateManagementAllowed"`
}
type CACertificateManagementAllowedEnum int

const (
	CA_CERTIFICATE_MANAGEMENT_ALLOWED_ENUM_UNSPECIFIED CACertificateManagementAllowedEnum = iota // 0
	CA_CERTIFICATE_MANAGEMENT_ALLOWED_ENUM_ALL                                                   // 1
	CA_CERTIFICATE_MANAGEMENT_ALLOWED_ENUM_USER_ONLY                                             // 2
	CA_CERTIFICATE_MANAGEMENT_ALLOWED_ENUM_NONE                                                  // 3
)

func (p *CaCertificateManagementAllowed) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.CaCertificateManagementAllowed",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"caCertificateManagementAllowed"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// ClientCertificateManagementAllowed
///////////////////////////////////////////////////////////////////////////////

type ClientCertificateManagementAllowed struct {
	ClientCertificateManagementAllowed ClientCertificateManagementAllowedEnum `json:"clientCertificateManagementAllowed"`
}
type ClientCertificateManagementAllowedEnum int

const (
	CLIENT_CERTIFICATE_MANAGEMENT_ALLOWED_ENUM_UNSPECIFIED ClientCertificateManagementAllowedEnum = iota // 0
	CLIENT_CERTIFICATE_MANAGEMENT_ALLOWED_ENUM_ALL                                                       // 1
	CLIENT_CERTIFICATE_MANAGEMENT_ALLOWED_ENUM_USER_ONLY                                                 // 2
	CLIENT_CERTIFICATE_MANAGEMENT_ALLOWED_ENUM_NONE                                                      // 3
)

func (p *ClientCertificateManagementAllowed) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.ClientCertificateManagementAllowed",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"clientCertificateManagementAllowed"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// CpuTaskScheduler
///////////////////////////////////////////////////////////////////////////////

type CpuTaskScheduler struct {
	SchedulerConfiguration SchedulerConfigurationEnum `json:"schedulerConfiguration"`
}
type SchedulerConfigurationEnum int

const (
	SCHEDULER_CONFIGURATION_ENUM_UNSPECIFIED  SchedulerConfigurationEnum = iota // 0
	SCHEDULER_CONFIGURATION_ENUM_USER_CHOICE                                    // 1
	SCHEDULER_CONFIGURATION_ENUM_CONSERVATIVE                                   // 2
	SCHEDULER_CONFIGURATION_ENUM_PERFORMANCE                                    // 3
)

func (p *CpuTaskScheduler) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.CpuTaskScheduler",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"schedulerConfiguration"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// RendererCodeIntegrityEnabled
///////////////////////////////////////////////////////////////////////////////

type RendererCodeIntegrityEnabled struct {
	RendererCodeIntegrityEnabled bool `json:"rendererCodeIntegrityEnabled"`
}

func (p *RendererCodeIntegrityEnabled) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.RendererCodeIntegrityEnabled",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"rendererCodeIntegrityEnabled"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// PasswordLeakDetection
///////////////////////////////////////////////////////////////////////////////

type PasswordLeakDetection struct {
	PasswordLeakDetection NullableBoolean `json:"passwordLeakDetection"`
}

func (p *PasswordLeakDetection) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.PasswordLeakDetection",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"passwordLeakDetection"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// AmbientAuthenticationInPrivateModesEnabled
///////////////////////////////////////////////////////////////////////////////

type AmbientAuthenticationInPrivateModesEnabled struct {
	AmbientAuthenticationInPrivateModesEnabled AmbientAuthenticationInPrivateModesEnabledEnum `json:"ambientAuthenticationInPrivateModesEnabled"`
}
type AmbientAuthenticationInPrivateModesEnabledEnum int

const (
	AMBIENT_AUTHENTICATION_IN_PRIVATE_MODES_ENABLED_ENUM_UNSPECIFIED           AmbientAuthenticationInPrivateModesEnabledEnum = iota // 0
	AMBIENT_AUTHENTICATION_IN_PRIVATE_MODES_ENABLED_ENUM_UNSET                                                                       // 1
	AMBIENT_AUTHENTICATION_IN_PRIVATE_MODES_ENABLED_ENUM_REGULAR_ONLY                                                                // 2
	AMBIENT_AUTHENTICATION_IN_PRIVATE_MODES_ENABLED_ENUM_INCOGNITO_AND_REGULAR                                                       // 3
	AMBIENT_AUTHENTICATION_IN_PRIVATE_MODES_ENABLED_ENUM_GUEST_AND_REGULAR                                                           // 4
	AMBIENT_AUTHENTICATION_IN_PRIVATE_MODES_ENABLED_ENUM_ALL                                                                         // 5
)

func (p *AmbientAuthenticationInPrivateModesEnabled) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.AmbientAuthenticationInPrivateModesEnabled",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"ambientAuthenticationInPrivateModesEnabled"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// ChromeCleanupEnabled
///////////////////////////////////////////////////////////////////////////////

type ChromeCleanupEnabled struct {
	ChromeCleanupEnabled          bool            `json:"chromeCleanupEnabled"`
	ChromeCleanupReportingEnabled NullableBoolean `json:"chromeCleanupReportingEnabled"`
}

func (p *ChromeCleanupEnabled) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.ChromeCleanupEnabled",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"chromeCleanupEnabled", "chromeCleanupReportingEnabled"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// ThirdPartyBlockingEnabled
///////////////////////////////////////////////////////////////////////////////

type ThirdPartyBlockingEnabled struct {
	ThirdPartyBlockingEnabled bool `json:"thirdPartyBlockingEnabled"`
}

func (p *ThirdPartyBlockingEnabled) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.ThirdPartyBlockingEnabled",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"thirdPartyBlockingEnabled"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// AudioSandboxEnabled
///////////////////////////////////////////////////////////////////////////////

type AudioSandboxEnabled struct {
	AudioSandboxEnabled NullableBoolean `json:"audioSandboxEnabled"`
}

func (p *AudioSandboxEnabled) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.AudioSandboxEnabled",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"audioSandboxEnabled"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// SuppressUnsupportedOsWarning
///////////////////////////////////////////////////////////////////////////////

type SuppressUnsupportedOsWarning struct {
	SuppressUnsupportedOsWarning bool `json:"suppressUnsupportedOsWarning"`
}

func (p *SuppressUnsupportedOsWarning) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.SuppressUnsupportedOsWarning",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"suppressUnsupportedOsWarning"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// AdvancedProtectionAllowed
///////////////////////////////////////////////////////////////////////////////

type AdvancedProtectionAllowed struct {
	AdvancedProtectionAllowed bool `json:"advancedProtectionAllowed"`
}

func (p *AdvancedProtectionAllowed) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.AdvancedProtectionAllowed",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"advancedProtectionAllowed"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// OverrideSecurityRestrictionsOnInsecureOrigin
///////////////////////////////////////////////////////////////////////////////

type OverrideSecurityRestrictionsOnInsecureOrigin struct {
	OverrideSecurityRestrictionsOnInsecureOrigin []string `json:"overrideSecurityRestrictionsOnInsecureOrigin"`
}

func (p *OverrideSecurityRestrictionsOnInsecureOrigin) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.OverrideSecurityRestrictionsOnInsecureOrigin",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"overrideSecurityRestrictionsOnInsecureOrigin"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// CommandLineFlagSecurityWarningsEnabled
///////////////////////////////////////////////////////////////////////////////

type CommandLineFlagSecurityWarningsEnabled struct {
	CommandLineFlagSecurityWarningsEnabled bool `json:"commandLineFlagSecurityWarningsEnabled"`
}

func (p *CommandLineFlagSecurityWarningsEnabled) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.CommandLineFlagSecurityWarningsEnabled",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"commandLineFlagSecurityWarningsEnabled"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// TargetBlankImpliesNoOpener
///////////////////////////////////////////////////////////////////////////////

type TargetBlankImpliesNoOpener struct {
	TargetBlankImpliesNoOpener bool `json:"targetBlankImpliesNoOpener"`
}

func (p *TargetBlankImpliesNoOpener) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.TargetBlankImpliesNoOpener",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"targetBlankImpliesNoOpener"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// SecurityTokenSessionSettings
///////////////////////////////////////////////////////////////////////////////

type SecurityTokenSessionSettings struct {
	SecurityTokenSessionBehavior            SecurityTokenSessionBehaviorEnum `json:"securityTokenSessionBehavior"`
	SecurityTokenSessionNotificationSeconds NullableDuration                 `json:"securityTokenSessionNotificationSeconds"`
}
type SecurityTokenSessionBehaviorEnum int

const (
	SECURITY_TOKEN_SESSION_BEHAVIOR_ENUM_UNSPECIFIED SecurityTokenSessionBehaviorEnum = iota // 0
	SECURITY_TOKEN_SESSION_BEHAVIOR_ENUM_IGNORE                                              // 1
	SECURITY_TOKEN_SESSION_BEHAVIOR_ENUM_LOGOUT                                              // 2
	SECURITY_TOKEN_SESSION_BEHAVIOR_ENUM_LOCK                                                // 3
)

func (p *SecurityTokenSessionSettings) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.SecurityTokenSessionSettings",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"securityTokenSessionBehavior", "securityTokenSessionNotificationSeconds"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// AllowSystemNotifications
///////////////////////////////////////////////////////////////////////////////

type AllowSystemNotifications struct {
	AllowSystemNotifications bool `json:"allowSystemNotifications"`
}

func (p *AllowSystemNotifications) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.AllowSystemNotifications",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"allowSystemNotifications"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// RemoteAccessHostClientDomainList
///////////////////////////////////////////////////////////////////////////////

type RemoteAccessHostClientDomainList struct {
	RemoteAccessHostClientDomainList []string `json:"remoteAccessHostClientDomainList"`
}

func (p *RemoteAccessHostClientDomainList) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.RemoteAccessHostClientDomainList",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"remoteAccessHostClientDomainList"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// RemoteAccessHostDomainList
///////////////////////////////////////////////////////////////////////////////

type RemoteAccessHostDomainList struct {
	RemoteAccessHostDomainList []string `json:"remoteAccessHostDomainList"`
}

func (p *RemoteAccessHostDomainList) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.RemoteAccessHostDomainList",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"remoteAccessHostDomainList"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// RemoteAccessHostFirewallTraversal
///////////////////////////////////////////////////////////////////////////////

type RemoteAccessHostFirewallTraversal struct {
	RemoteAccessHostFirewallTraversal      bool   `json:"remoteAccessHostFirewallTraversal"`
	RemoteAccessHostAllowRelayedConnection bool   `json:"remoteAccessHostAllowRelayedConnection"`
	RemoteAccessHostUdpPortRange           string `json:"remoteAccessHostUdpPortRange"`
}

func (p *RemoteAccessHostFirewallTraversal) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.RemoteAccessHostFirewallTraversal",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"remoteAccessHostFirewallTraversal", "remoteAccessHostAllowRelayedConnection", "remoteAccessHostUdpPortRange"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// ShowLogoutButton
///////////////////////////////////////////////////////////////////////////////

type ShowLogoutButton struct {
	ShowLogoutButtonInTray bool `json:"showLogoutButtonInTray"`
}

func (p *ShowLogoutButton) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.ShowLogoutButton",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"showLogoutButtonInTray"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// KerberosTickets
///////////////////////////////////////////////////////////////////////////////

type KerberosTickets struct {
	KerberosEnabled                    bool     `json:"kerberosEnabled"`
	KerberosPrincipal                  string   `json:"kerberosPrincipal"`
	KerberosConfiguration              []string `json:"kerberosConfiguration"`
	KerberosAutoAccountEnabled         bool     `json:"kerberosAutoAccountEnabled"`
	KerberosCustomConfigurationEnabled bool     `json:"kerberosCustomConfigurationEnabled"`
}

func (p *KerberosTickets) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.KerberosTickets",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"kerberosEnabled", "kerberosPrincipal", "kerberosConfiguration", "kerberosAutoAccountEnabled", "kerberosCustomConfigurationEnabled"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// KerberosRememberPasswordEnabled
///////////////////////////////////////////////////////////////////////////////

type KerberosRememberPasswordEnabled struct {
	KerberosRememberPasswordEnabled bool `json:"kerberosRememberPasswordEnabled"`
}

func (p *KerberosRememberPasswordEnabled) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.KerberosRememberPasswordEnabled",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"kerberosRememberPasswordEnabled"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// KerberosAddAccountsAllowed
///////////////////////////////////////////////////////////////////////////////

type KerberosAddAccountsAllowed struct {
	KerberosAddAccountsAllowed bool `json:"kerberosAddAccountsAllowed"`
}

func (p *KerberosAddAccountsAllowed) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.KerberosAddAccountsAllowed",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"kerberosAddAccountsAllowed"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// SimpleProxySettings
///////////////////////////////////////////////////////////////////////////////

type SimpleProxySettings struct {
	SimpleProxyMode      ProxyModeEnum `json:"simpleProxyMode"`
	SimpleProxyServerUrl string        `json:"simpleProxyServerUrl"`
	SimpleProxyPacUrl    string        `json:"simpleProxyPacUrl"`
	ProxyBypassList      []string      `json:"proxyBypassList"`
}
type ProxyModeEnum int

const (
	PROXY_MODE_ENUM_UNSPECIFIED     ProxyModeEnum = iota // 0
	PROXY_MODE_ENUM_USER_CONFIGURED                      // 1
	PROXY_MODE_ENUM_DIRECT                               // 2
	PROXY_MODE_ENUM_AUTO_DETECT                          // 3
	PROXY_MODE_ENUM_FIXED_SERVERS                        // 4
	PROXY_MODE_ENUM_PAC_SCRIPT                           // 5
)

func (p *SimpleProxySettings) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.SimpleProxySettings",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"simpleProxyMode", "simpleProxyServerUrl", "simpleProxyPacUrl", "proxyBypassList"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// CaptivePortalAuthenticationIgnoresProxy
///////////////////////////////////////////////////////////////////////////////

type CaptivePortalAuthenticationIgnoresProxy struct {
	CaptivePortalAuthenticationIgnoresProxy bool `json:"captivePortalAuthenticationIgnoresProxy"`
}

func (p *CaptivePortalAuthenticationIgnoresProxy) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.CaptivePortalAuthenticationIgnoresProxy",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"captivePortalAuthenticationIgnoresProxy"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// AuthSchemes
///////////////////////////////////////////////////////////////////////////////

type AuthSchemes struct {
	AuthSchemes []string `json:"authSchemes"`
}

func (p *AuthSchemes) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.AuthSchemes",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"authSchemes"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// BasicAuthOverHttpEnabled
///////////////////////////////////////////////////////////////////////////////

type BasicAuthOverHttpEnabled struct {
	BasicAuthOverHttpEnabled bool `json:"basicAuthOverHttpEnabled"`
}

func (p *BasicAuthOverHttpEnabled) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.BasicAuthOverHttpEnabled",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"basicAuthOverHttpEnabled"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// NtlmV2Enabled
///////////////////////////////////////////////////////////////////////////////

type NtlmV2Enabled struct {
	NtlmV2Enabled bool `json:"ntlmV2Enabled"`
}

func (p *NtlmV2Enabled) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.NtlmV2Enabled",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"ntlmV2Enabled"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// SslVersionMin
///////////////////////////////////////////////////////////////////////////////

type SslVersionMin struct {
	SslVersionMin SSLVersionMinEnum `json:"sslVersionMin"`
}
type SSLVersionMinEnum int

const (
	SSL_VERSION_MIN_ENUM_UNSPECIFIED SSLVersionMinEnum = iota // 0
	SSL_VERSION_MIN_ENUM_TL_SV_1                              // 1
	SSL_VERSION_MIN_ENUM_TL_SV_1_1                            // 2
	SSL_VERSION_MIN_ENUM_TL_SV_1_2                            // 3
	SSL_VERSION_MIN_ENUM_SSL_V_3                              // 4
)

func (p *SslVersionMin) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.SslVersionMin",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"sslVersionMin"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// SslErrorOverrideAllowed
///////////////////////////////////////////////////////////////////////////////

type SslErrorOverrideAllowed struct {
	SslErrorOverrideAllowed bool `json:"sslErrorOverrideAllowed"`
}

func (p *SslErrorOverrideAllowed) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.SslErrorOverrideAllowed",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"sslErrorOverrideAllowed"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// SslErrorOverrideAllowedForOrigins
///////////////////////////////////////////////////////////////////////////////

type SslErrorOverrideAllowedForOrigins struct {
	SslErrorOverrideAllowedForOrigins []string `json:"sslErrorOverrideAllowedForOrigins"`
}

func (p *SslErrorOverrideAllowedForOrigins) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.SslErrorOverrideAllowedForOrigins",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"sslErrorOverrideAllowedForOrigins"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// DataCompressionProxy
///////////////////////////////////////////////////////////////////////////////

type DataCompressionProxy struct {
	DataCompressionProxyEnabled NullableBoolean `json:"dataCompressionProxyEnabled"`
}

func (p *DataCompressionProxy) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.DataCompressionProxy",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"dataCompressionProxyEnabled"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// WebRtcUdpPortRange
///////////////////////////////////////////////////////////////////////////////

type WebRtcUdpPortRange struct {
	WebRtcUdpPortsEnabled bool  `json:"webRtcUdpPortsEnabled"`
	WebRtcUdpPortsMin     int64 `json:"webRtcUdpPortsMin"`
	WebRtcUdpPortsMax     int64 `json:"webRtcUdpPortsMax"`
}

func (p *WebRtcUdpPortRange) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.WebRtcUdpPortRange",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"webRtcUdpPortsEnabled", "webRtcUdpPortsMin", "webRtcUdpPortsMax"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// WebRtcLocalIpsAllowedUrls
///////////////////////////////////////////////////////////////////////////////

type WebRtcLocalIpsAllowedUrls struct {
	WebRtcLocalIpsAllowedUrls []string `json:"webRtcLocalIpsAllowedUrls"`
}

func (p *WebRtcLocalIpsAllowedUrls) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.WebRtcLocalIpsAllowedUrls",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"webRtcLocalIpsAllowedUrls"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// QuicProtocol
///////////////////////////////////////////////////////////////////////////////

type QuicProtocol struct {
	QuicAllowed bool `json:"quicAllowed"`
}

func (p *QuicProtocol) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.QuicProtocol",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"quicAllowed"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// WebRtcIpHandling
///////////////////////////////////////////////////////////////////////////////

type WebRtcIpHandling struct {
	WebRtcIpHandling WebRtcIPHandlingEnum `json:"webRtcIpHandling"`
}
type WebRtcIPHandlingEnum int

const (
	WEB_RTC_IP_HANDLING_ENUM_UNSPECIFIED                           WebRtcIPHandlingEnum = iota // 0
	WEB_RTC_IP_HANDLING_ENUM_DEFAULT                                                           // 1
	WEB_RTC_IP_HANDLING_ENUM_DEFAULT_PUBLIC_AND_PRIVATE_INTERFACES                             // 2
	WEB_RTC_IP_HANDLING_ENUM_DEFAULT_PUBLIC_INTERFACE_ONLY                                     // 3
	WEB_RTC_IP_HANDLING_ENUM_DISABLE_NON_PROXIED_UDP                                           // 4
)

func (p *WebRtcIpHandling) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.WebRtcIpHandling",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"webRtcIpHandling"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// DnsOverHttpsModeExtended
///////////////////////////////////////////////////////////////////////////////

type DnsOverHttpsModeExtended struct {
	DnsOverHttpsModeExtended      DnsOverHttpsModeExtendedEnum `json:"dnsOverHttpsModeExtended"`
	DnsOverHttpsTemplatesExtended []string                     `json:"dnsOverHttpsTemplatesExtended"`
}
type DnsOverHttpsModeExtendedEnum int

const (
	DNS_OVER_HTTPS_MODE_EXTENDED_ENUM_UNSPECIFIED DnsOverHttpsModeExtendedEnum = iota // 0
	DNS_OVER_HTTPS_MODE_EXTENDED_ENUM_OFF                                             // 1
	DNS_OVER_HTTPS_MODE_EXTENDED_ENUM_AUTOMATIC                                       // 2
	DNS_OVER_HTTPS_MODE_EXTENDED_ENUM_SECURE                                          // 3
	DNS_OVER_HTTPS_MODE_EXTENDED_ENUM_UNSET                                           // 4
)

func (p *DnsOverHttpsModeExtended) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.DnsOverHttpsModeExtended",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"dnsOverHttpsModeExtended", "dnsOverHttpsTemplatesExtended"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// BuiltInDnsClientEnabled
///////////////////////////////////////////////////////////////////////////////

type BuiltInDnsClientEnabled struct {
	BuiltInDnsClientEnabled NullableBoolean `json:"builtInDnsClientEnabled"`
}

func (p *BuiltInDnsClientEnabled) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.BuiltInDnsClientEnabled",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"builtInDnsClientEnabled"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// AlwaysOnVpn
///////////////////////////////////////////////////////////////////////////////

type AlwaysOnVpn struct {
	AlwaysOnVpnApp   string `json:"alwaysOnVpnApp"`
	VpnConfigAllowed bool   `json:"vpnConfigAllowed"`
}

func (p *AlwaysOnVpn) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.AlwaysOnVpn",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"alwaysOnVpnApp", "vpnConfigAllowed"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// AuthenticationServerAllowlist
///////////////////////////////////////////////////////////////////////////////

type AuthenticationServerAllowlist struct {
	AuthServerAllowlist []string `json:"authServerAllowlist"`
}

func (p *AuthenticationServerAllowlist) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.AuthenticationServerAllowlist",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"authServerAllowlist"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// AuthenticationServerDelegationAllowlist
///////////////////////////////////////////////////////////////////////////////

type AuthenticationServerDelegationAllowlist struct {
	AuthNegotiateDelegateAllowlist []string `json:"authNegotiateDelegateAllowlist"`
}

func (p *AuthenticationServerDelegationAllowlist) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.AuthenticationServerDelegationAllowlist",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"authNegotiateDelegateAllowlist"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// KerberosTicketDelegation
///////////////////////////////////////////////////////////////////////////////

type KerberosTicketDelegation struct {
	AuthNegotiateDelegateByKdcPolicy bool `json:"authNegotiateDelegateByKdcPolicy"`
}

func (p *KerberosTicketDelegation) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.KerberosTicketDelegation",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"authNegotiateDelegateByKdcPolicy"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// KerberosServicePrincipalName
///////////////////////////////////////////////////////////////////////////////

type KerberosServicePrincipalName struct {
	DisableAuthNegotiateCnameLookup bool `json:"disableAuthNegotiateCnameLookup"`
}

func (p *KerberosServicePrincipalName) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.KerberosServicePrincipalName",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"disableAuthNegotiateCnameLookup"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// KerberosSpnPort
///////////////////////////////////////////////////////////////////////////////

type KerberosSpnPort struct {
	EnableAuthNegotiatePort bool `json:"enableAuthNegotiatePort"`
}

func (p *KerberosSpnPort) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.KerberosSpnPort",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"enableAuthNegotiatePort"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// CrossOriginAuthentication
///////////////////////////////////////////////////////////////////////////////

type CrossOriginAuthentication struct {
	AllowCrossOriginAuthPrompt bool `json:"allowCrossOriginAuthPrompt"`
}

func (p *CrossOriginAuthentication) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.CrossOriginAuthentication",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"allowCrossOriginAuthPrompt"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// SharedArrayBufferUnrestrictedAccessAllowed
///////////////////////////////////////////////////////////////////////////////

type SharedArrayBufferUnrestrictedAccessAllowed struct {
	SharedArrayBufferUnrestrictedAccessAllowed bool `json:"sharedArrayBufferUnrestrictedAccessAllowed"`
}

func (p *SharedArrayBufferUnrestrictedAccessAllowed) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.SharedArrayBufferUnrestrictedAccessAllowed",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"sharedArrayBufferUnrestrictedAccessAllowed"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// UserAgentClientHintsEnabled
///////////////////////////////////////////////////////////////////////////////

type UserAgentClientHintsEnabled struct {
	UserAgentClientHintsEnabled bool `json:"userAgentClientHintsEnabled"`
}

func (p *UserAgentClientHintsEnabled) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.UserAgentClientHintsEnabled",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"userAgentClientHintsEnabled"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// SignedHttpExchangeEnabled
///////////////////////////////////////////////////////////////////////////////

type SignedHttpExchangeEnabled struct {
	SignedHttpExchangeEnabled bool `json:"signedHttpExchangeEnabled"`
}

func (p *SignedHttpExchangeEnabled) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.SignedHttpExchangeEnabled",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"signedHttpExchangeEnabled"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// GloballyScopeHttpAuthCacheEnabled
///////////////////////////////////////////////////////////////////////////////

type GloballyScopeHttpAuthCacheEnabled struct {
	GloballyScopeHttpAuthCacheEnabled bool `json:"globallyScopeHttpAuthCacheEnabled"`
}

func (p *GloballyScopeHttpAuthCacheEnabled) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.GloballyScopeHttpAuthCacheEnabled",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"globallyScopeHttpAuthCacheEnabled"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// RequireOnlineRevocationChecksForLocalAnchors
///////////////////////////////////////////////////////////////////////////////

type RequireOnlineRevocationChecksForLocalAnchors struct {
	RequireOnlineRevocationChecksForLocalAnchors bool `json:"requireOnlineRevocationChecksForLocalAnchors"`
}

func (p *RequireOnlineRevocationChecksForLocalAnchors) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.RequireOnlineRevocationChecksForLocalAnchors",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"requireOnlineRevocationChecksForLocalAnchors"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// MaxConnectionsPerProxy
///////////////////////////////////////////////////////////////////////////////

type MaxConnectionsPerProxy struct {
	MaxConnectionsPerProxy int64 `json:"maxConnectionsPerProxy"`
}

func (p *MaxConnectionsPerProxy) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.MaxConnectionsPerProxy",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"maxConnectionsPerProxy"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// GssapiLibraryName
///////////////////////////////////////////////////////////////////////////////

type GssapiLibraryName struct {
	GssapiLibraryName string `json:"gssapiLibraryName"`
}

func (p *GssapiLibraryName) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.GssapiLibraryName",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"gssapiLibraryName"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// HstsPolicyBypassList
///////////////////////////////////////////////////////////////////////////////

type HstsPolicyBypassList struct {
	HstsPolicyBypassList []string `json:"hstsPolicyBypassList"`
}

func (p *HstsPolicyBypassList) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.HstsPolicyBypassList",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"hstsPolicyBypassList"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// AuthAndroidNegotiateAccountType
///////////////////////////////////////////////////////////////////////////////

type AuthAndroidNegotiateAccountType struct {
	AuthAndroidNegotiateAccountType string `json:"authAndroidNegotiateAccountType"`
}

func (p *AuthAndroidNegotiateAccountType) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.AuthAndroidNegotiateAccountType",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"authAndroidNegotiateAccountType"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// DnsInterceptionChecksEnabled
///////////////////////////////////////////////////////////////////////////////

type DnsInterceptionChecksEnabled struct {
	DnsInterceptionChecksEnabled bool `json:"dnsInterceptionChecksEnabled"`
}

func (p *DnsInterceptionChecksEnabled) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.DnsInterceptionChecksEnabled",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"dnsInterceptionChecksEnabled"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// IntranetRedirectBehavior
///////////////////////////////////////////////////////////////////////////////

type IntranetRedirectBehavior struct {
	IntranetRedirectBehavior IntranetRedirectBehaviorEnum `json:"intranetRedirectBehavior"`
}
type IntranetRedirectBehaviorEnum int

const (
	INTRANET_REDIRECT_BEHAVIOR_ENUM_UNSPECIFIED                                 IntranetRedirectBehaviorEnum = iota // 0
	INTRANET_REDIRECT_BEHAVIOR_ENUM_DEFAULT                                                                         // 1
	INTRANET_REDIRECT_BEHAVIOR_ENUM_DISABLE_INTERCEPTION_CHECKS_DISABLE_INFOBAR                                     // 2
	INTRANET_REDIRECT_BEHAVIOR_ENUM_DISABLE_INTERCEPTION_CHECKS_ENABLE_INFOBAR                                      // 3
	INTRANET_REDIRECT_BEHAVIOR_ENUM_ENABLE_INTERCEPTION_CHECKS_ENABLE_INFOBAR                                       // 4
)

func (p *IntranetRedirectBehavior) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.IntranetRedirectBehavior",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"intranetRedirectBehavior"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// WebRtcAllowLegacyTlsProtocolsCategoryItem
///////////////////////////////////////////////////////////////////////////////

type WebRtcAllowLegacyTlsProtocolsCategoryItem struct {
	WebRtcAllowLegacyTlsProtocols bool `json:"webRtcAllowLegacyTlsProtocols"`
}

func (p *WebRtcAllowLegacyTlsProtocolsCategoryItem) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.WebRtcAllowLegacyTlsProtocolsCategoryItem",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"webRtcAllowLegacyTlsProtocols"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// WpadQuickCheckEnabled
///////////////////////////////////////////////////////////////////////////////

type WpadQuickCheckEnabled struct {
	WpadQuickCheckEnabled bool `json:"wpadQuickCheckEnabled"`
}

func (p *WpadQuickCheckEnabled) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.WpadQuickCheckEnabled",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"wpadQuickCheckEnabled"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// IntegratedWebAuthenticationAllowed
///////////////////////////////////////////////////////////////////////////////

type IntegratedWebAuthenticationAllowed struct {
	IntegratedWebAuthenticationAllowed bool `json:"integratedWebAuthenticationAllowed"`
}

func (p *IntegratedWebAuthenticationAllowed) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.IntegratedWebAuthenticationAllowed",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"integratedWebAuthenticationAllowed"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// ExplicitlyAllowedNetworkPorts
///////////////////////////////////////////////////////////////////////////////

type ExplicitlyAllowedNetworkPorts struct {
	ExplicitlyAllowedNetworkPorts []string `json:"explicitlyAllowedNetworkPorts"`
}

func (p *ExplicitlyAllowedNetworkPorts) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.ExplicitlyAllowedNetworkPorts",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"explicitlyAllowedNetworkPorts"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// Cecpq2Enabled
///////////////////////////////////////////////////////////////////////////////

type Cecpq2Enabled struct {
	Cecpq2Enabled bool `json:"cecpq2Enabled"`
}

func (p *Cecpq2Enabled) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.Cecpq2Enabled",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"cecpq2Enabled"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// AndroidBackupRestoreServiceEnabled
///////////////////////////////////////////////////////////////////////////////

type AndroidBackupRestoreServiceEnabled struct {
	ArcBackupRestoreServiceEnabled ArcBackupRestoreServiceEnum `json:"arcBackupRestoreServiceEnabled"`
}
type ArcBackupRestoreServiceEnum int

const (
	ARC_BACKUP_RESTORE_SERVICE_ENUM_UNSPECIFIED                           ArcBackupRestoreServiceEnum = iota // 0
	ARC_BACKUP_RESTORE_SERVICE_ENUM_BACKUP_AND_RESTORE_DISABLED                                              // 1
	ARC_BACKUP_RESTORE_SERVICE_ENUM_BACKUP_AND_RESTORE_UNDER_USER_CONTROL                                    // 2
)

func (p *AndroidBackupRestoreServiceEnabled) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.AndroidBackupRestoreServiceEnabled",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"arcBackupRestoreServiceEnabled"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// AndroidGoogleLocationServicesEnabled
///////////////////////////////////////////////////////////////////////////////

type AndroidGoogleLocationServicesEnabled struct {
	ArcGoogleLocationServicesEnabled ArcGoogleLocationServicesEnum `json:"arcGoogleLocationServicesEnabled"`
}
type ArcGoogleLocationServicesEnum int

const (
	ARC_GOOGLE_LOCATION_SERVICES_ENUM_UNSPECIFIED        ArcGoogleLocationServicesEnum = iota // 0
	ARC_GOOGLE_LOCATION_SERVICES_ENUM_DISABLED                                                // 1
	ARC_GOOGLE_LOCATION_SERVICES_ENUM_UNDER_USER_CONTROL                                      // 2
)

func (p *AndroidGoogleLocationServicesEnabled) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.AndroidGoogleLocationServicesEnabled",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"arcGoogleLocationServicesEnabled"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// CertificateSynchronization
///////////////////////////////////////////////////////////////////////////////

type CertificateSynchronization struct {
	ArcCertificatesSyncMode ArcCertificatesSyncModeEnum `json:"arcCertificatesSyncMode"`
}
type ArcCertificatesSyncModeEnum int

const (
	ARC_CERTIFICATES_SYNC_MODE_ENUM_UNSPECIFIED   ArcCertificatesSyncModeEnum = iota // 0
	ARC_CERTIFICATES_SYNC_MODE_ENUM_SYNC_DISABLED                                    // 1
	ARC_CERTIFICATES_SYNC_MODE_ENUM_COPY_CA_CERTS                                    // 2
)

func (p *CertificateSynchronization) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.CertificateSynchronization",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"arcCertificatesSyncMode"},
			},
		},
	})
}

///////////////////////////////////////////////////////////////////////////////
// HomeButton
///////////////////////////////////////////////////////////////////////////////

type HomeButton struct {
	ShowHomeButton NullableBoolean `json:"showHomeButton"`
}

func (p *HomeButton) MarshalJSON(orgunit string) ([]byte, error) {
	return json.Marshal(&struct {
		Requests requests `json:"requests"`
	}{
		Requests: requests{
			PolicyTargetKey: policyTargetKey{
				TargetResource: "orgunits/" + orgunit,
			},
			PolicyValue: policyValue{
				PolicySchema: "chrome.users.HomeButton",
				Value:        p,
			},
			UpdateMask: updateMask{
				Paths: []string{"showHomeButton"},
			},
		},
	})
}
