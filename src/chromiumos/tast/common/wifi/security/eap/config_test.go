// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package eap

import (
	"reflect"
	"testing"
)

func TestEAP(t *testing.T) {
	// Calling without option to check default values.
	if _, err := NewConfigFactory("CA", "Cert", "Key").Gen(); err != nil {
		t.Error("failed to Gen with default values")
	}

	fac := NewConfigFactory(
		"ServerCACert", "ServerCert", "ServerKey",
		FileSuffix("FileSuffix"),
		Identity("testing"),
		ServerEAPUsers("\"example user\" TLS"),
		ClientCACert("ClientCACert"),
		ClientCert("ClientCert"),
		ClientKey("ClientKey"),
		ClientCertID("8888"),
		ClientKeyID("9999"),
	)
	expectedConf := &Config{
		fileSuffix:     "FileSuffix",
		identity:       "testing",
		serverCACert:   "ServerCACert",
		serverCert:     "ServerCert",
		serverKey:      "ServerKey",
		serverEAPUsers: "\"example user\" TLS",
		clientCACert:   "ClientCACert",
		clientCert:     "ClientCert",
		clientKey:      "ClientKey",
		clientCertID:   "8888",
		clientKeyID:    "9999",
	}
	expectedHostapdConfig := map[string]string{
		"ieee8021x":     "1",
		"eap_server":    "1",
		"ca_cert":       "/tmp/server_ca_cert_file",
		"server_cert":   "/tmp/server_cert_file",
		"private_key":   "/tmp/server_key_file",
		"eap_user_file": "/tmp/server_eap_user_cert_file",
	}
	expectedShillProperties := map[string]interface{}{
		"EAP.Identity":  "testing",
		"EAP.PIN":       "77777",
		"EAP.CACertPEM": []string{"ClientCACert"},
		"EAP.CertID":    "2:8888",
		"EAP.KeyID":     "2:9999",
	}

	confInterface, err := fac.Gen()
	if err != nil {
		t.Error("failed to Gen Config")
	}
	conf := confInterface.(*Config)
	if !reflect.DeepEqual(conf, expectedConf) {
		t.Errorf("got %v, want %v", conf, expectedConf)
	}

	// Calling HostapdConfig before InstallRouterCredentials should failed.
	if _, err := conf.HostapdConfig(); err == nil {
		t.Error("expect failure due to calling HostapdConfig without InstallRouterCredentials")
	}

	// Normally, these should be generated by conf.InstallRouterCredentials().
	conf.ServerCACertFile = "/tmp/server_ca_cert_file"
	conf.ServerCertFile = "/tmp/server_cert_file"
	conf.ServerKeyFile = "/tmp/server_key_file"
	conf.ServerEAPUsersFile = "/tmp/server_eap_user_cert_file"

	// Check hostapd config.
	hostapdConfig, err := conf.HostapdConfig()
	if err != nil {
		t.Error("failed to generate hostapd config")
	}
	if !reflect.DeepEqual(hostapdConfig, expectedHostapdConfig) {
		t.Errorf("got %v, want %v", hostapdConfig, expectedHostapdConfig)
	}

	// Calling ShillServiceProperties before InstallClientCredentials should failed.
	if _, err := conf.ShillServiceProperties(); err == nil {
		t.Error("expect failure due to calling ShillServiceProperties without InstallClientCredentials")
	}

	// Normally, these should be generated by conf.InstallClientCredentials().
	conf.Pin = "77777"
	conf.ClientSlotID = 2

	// Check shill properties.
	shillProperties, err := conf.ShillServiceProperties()
	if err != nil {
		t.Error("failed to generate shill properties")
	}
	if !reflect.DeepEqual(shillProperties, expectedShillProperties) {
		t.Errorf("got %v, want %v", shillProperties, expectedShillProperties)
	}
}
