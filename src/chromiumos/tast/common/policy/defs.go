// Copyright 2019 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by policy_tast_struct_creator.py. DO NOT EDIT.
// Edit the generator in policy/gen/ instead.

package policy

import (
	"encoding/json"

	"github.com/google/go-cmp/cmp"

	"chromiumos/tast/errors"
)

// TODO(crbug.com/1101928): fix template to use URLDenyList and URLBlacklist.
type URLDenylist = URLBlacklist
type URLAllowlist = URLWhitelist

///////////////////////////////////////////////////////////////////////////////
// 1. HomepageLocation
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type HomepageLocation struct {
	Stat Status
	Val  string
}

func (p *HomepageLocation) Name() string          { return "HomepageLocation" }
func (p *HomepageLocation) Field() string         { return "" }
func (p *HomepageLocation) Scope() Scope          { return ScopeUser }
func (p *HomepageLocation) Status() Status        { return p.Stat }
func (p *HomepageLocation) UntypedV() interface{} { return p.Val }
func (p *HomepageLocation) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *HomepageLocation) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 2. HomepageIsNewTabPage
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type HomepageIsNewTabPage struct {
	Stat Status
	Val  bool
}

func (p *HomepageIsNewTabPage) Name() string          { return "HomepageIsNewTabPage" }
func (p *HomepageIsNewTabPage) Field() string         { return "" }
func (p *HomepageIsNewTabPage) Scope() Scope          { return ScopeUser }
func (p *HomepageIsNewTabPage) Status() Status        { return p.Stat }
func (p *HomepageIsNewTabPage) UntypedV() interface{} { return p.Val }
func (p *HomepageIsNewTabPage) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *HomepageIsNewTabPage) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 5. AlternateErrorPagesEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AlternateErrorPagesEnabled struct {
	Stat Status
	Val  bool
}

func (p *AlternateErrorPagesEnabled) Name() string          { return "AlternateErrorPagesEnabled" }
func (p *AlternateErrorPagesEnabled) Field() string         { return "" }
func (p *AlternateErrorPagesEnabled) Scope() Scope          { return ScopeUser }
func (p *AlternateErrorPagesEnabled) Status() Status        { return p.Stat }
func (p *AlternateErrorPagesEnabled) UntypedV() interface{} { return p.Val }
func (p *AlternateErrorPagesEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AlternateErrorPagesEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 6. SearchSuggestEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SearchSuggestEnabled struct {
	Stat Status
	Val  bool
}

func (p *SearchSuggestEnabled) Name() string          { return "SearchSuggestEnabled" }
func (p *SearchSuggestEnabled) Field() string         { return "" }
func (p *SearchSuggestEnabled) Scope() Scope          { return ScopeUser }
func (p *SearchSuggestEnabled) Status() Status        { return p.Stat }
func (p *SearchSuggestEnabled) UntypedV() interface{} { return p.Val }
func (p *SearchSuggestEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SearchSuggestEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 9. JavascriptEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type JavascriptEnabled struct {
	Stat Status
	Val  bool
}

func (p *JavascriptEnabled) Name() string          { return "JavascriptEnabled" }
func (p *JavascriptEnabled) Field() string         { return "" }
func (p *JavascriptEnabled) Scope() Scope          { return ScopeUser }
func (p *JavascriptEnabled) Status() Status        { return p.Stat }
func (p *JavascriptEnabled) UntypedV() interface{} { return p.Val }
func (p *JavascriptEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *JavascriptEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 10. IncognitoEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type IncognitoEnabled struct {
	Stat Status
	Val  bool
}

func (p *IncognitoEnabled) Name() string          { return "IncognitoEnabled" }
func (p *IncognitoEnabled) Field() string         { return "" }
func (p *IncognitoEnabled) Scope() Scope          { return ScopeUser }
func (p *IncognitoEnabled) Status() Status        { return p.Stat }
func (p *IncognitoEnabled) UntypedV() interface{} { return p.Val }
func (p *IncognitoEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *IncognitoEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 11. SavingBrowserHistoryDisabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SavingBrowserHistoryDisabled struct {
	Stat Status
	Val  bool
}

func (p *SavingBrowserHistoryDisabled) Name() string          { return "SavingBrowserHistoryDisabled" }
func (p *SavingBrowserHistoryDisabled) Field() string         { return "" }
func (p *SavingBrowserHistoryDisabled) Scope() Scope          { return ScopeUser }
func (p *SavingBrowserHistoryDisabled) Status() Status        { return p.Stat }
func (p *SavingBrowserHistoryDisabled) UntypedV() interface{} { return p.Val }
func (p *SavingBrowserHistoryDisabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SavingBrowserHistoryDisabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 12. PrintingEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintingEnabled struct {
	Stat Status
	Val  bool
}

func (p *PrintingEnabled) Name() string          { return "PrintingEnabled" }
func (p *PrintingEnabled) Field() string         { return "" }
func (p *PrintingEnabled) Scope() Scope          { return ScopeUser }
func (p *PrintingEnabled) Status() Status        { return p.Stat }
func (p *PrintingEnabled) UntypedV() interface{} { return p.Val }
func (p *PrintingEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PrintingEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 14. SafeBrowsingEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SafeBrowsingEnabled struct {
	Stat Status
	Val  bool
}

func (p *SafeBrowsingEnabled) Name() string          { return "SafeBrowsingEnabled" }
func (p *SafeBrowsingEnabled) Field() string         { return "" }
func (p *SafeBrowsingEnabled) Scope() Scope          { return ScopeUser }
func (p *SafeBrowsingEnabled) Status() Status        { return p.Stat }
func (p *SafeBrowsingEnabled) UntypedV() interface{} { return p.Val }
func (p *SafeBrowsingEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SafeBrowsingEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 16. PasswordManagerEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PasswordManagerEnabled struct {
	Stat Status
	Val  bool
}

func (p *PasswordManagerEnabled) Name() string          { return "PasswordManagerEnabled" }
func (p *PasswordManagerEnabled) Field() string         { return "" }
func (p *PasswordManagerEnabled) Scope() Scope          { return ScopeUser }
func (p *PasswordManagerEnabled) Status() Status        { return p.Stat }
func (p *PasswordManagerEnabled) UntypedV() interface{} { return p.Val }
func (p *PasswordManagerEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PasswordManagerEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 18. AutoFillEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AutoFillEnabled struct {
	Stat Status
	Val  bool
}

func (p *AutoFillEnabled) Name() string          { return "AutoFillEnabled" }
func (p *AutoFillEnabled) Field() string         { return "" }
func (p *AutoFillEnabled) Scope() Scope          { return ScopeUser }
func (p *AutoFillEnabled) Status() Status        { return p.Stat }
func (p *AutoFillEnabled) UntypedV() interface{} { return p.Val }
func (p *AutoFillEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AutoFillEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 19. DisabledPlugins
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DisabledPlugins struct {
	Stat Status
	Val  []string
}

func (p *DisabledPlugins) Name() string          { return "DisabledPlugins" }
func (p *DisabledPlugins) Field() string         { return "" }
func (p *DisabledPlugins) Scope() Scope          { return ScopeUser }
func (p *DisabledPlugins) Status() Status        { return p.Stat }
func (p *DisabledPlugins) UntypedV() interface{} { return p.Val }
func (p *DisabledPlugins) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DisabledPlugins) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 20. SyncDisabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SyncDisabled struct {
	Stat Status
	Val  bool
}

func (p *SyncDisabled) Name() string          { return "SyncDisabled" }
func (p *SyncDisabled) Field() string         { return "" }
func (p *SyncDisabled) Scope() Scope          { return ScopeUser }
func (p *SyncDisabled) Status() Status        { return p.Stat }
func (p *SyncDisabled) UntypedV() interface{} { return p.Val }
func (p *SyncDisabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SyncDisabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 21. ProxyMode
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ProxyMode struct {
	Stat Status
	Val  string
}

func (p *ProxyMode) Name() string          { return "ProxyMode" }
func (p *ProxyMode) Field() string         { return "" }
func (p *ProxyMode) Scope() Scope          { return ScopeUser }
func (p *ProxyMode) Status() Status        { return p.Stat }
func (p *ProxyMode) UntypedV() interface{} { return p.Val }
func (p *ProxyMode) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *ProxyMode) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 22. ProxyServerMode
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ProxyServerMode struct {
	Stat Status
	Val  int
}

func (p *ProxyServerMode) Name() string          { return "ProxyServerMode" }
func (p *ProxyServerMode) Field() string         { return "" }
func (p *ProxyServerMode) Scope() Scope          { return ScopeUser }
func (p *ProxyServerMode) Status() Status        { return p.Stat }
func (p *ProxyServerMode) UntypedV() interface{} { return p.Val }
func (p *ProxyServerMode) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ProxyServerMode) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 23. ProxyServer
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ProxyServer struct {
	Stat Status
	Val  string
}

func (p *ProxyServer) Name() string          { return "ProxyServer" }
func (p *ProxyServer) Field() string         { return "" }
func (p *ProxyServer) Scope() Scope          { return ScopeUser }
func (p *ProxyServer) Status() Status        { return p.Stat }
func (p *ProxyServer) UntypedV() interface{} { return p.Val }
func (p *ProxyServer) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *ProxyServer) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 24. ProxyPacUrl
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ProxyPacUrl struct {
	Stat Status
	Val  string
}

func (p *ProxyPacUrl) Name() string          { return "ProxyPacUrl" }
func (p *ProxyPacUrl) Field() string         { return "" }
func (p *ProxyPacUrl) Scope() Scope          { return ScopeUser }
func (p *ProxyPacUrl) Status() Status        { return p.Stat }
func (p *ProxyPacUrl) UntypedV() interface{} { return p.Val }
func (p *ProxyPacUrl) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *ProxyPacUrl) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 25. ProxyBypassList
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ProxyBypassList struct {
	Stat Status
	Val  string
}

func (p *ProxyBypassList) Name() string          { return "ProxyBypassList" }
func (p *ProxyBypassList) Field() string         { return "" }
func (p *ProxyBypassList) Scope() Scope          { return ScopeUser }
func (p *ProxyBypassList) Status() Status        { return p.Stat }
func (p *ProxyBypassList) UntypedV() interface{} { return p.Val }
func (p *ProxyBypassList) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *ProxyBypassList) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 26. AuthSchemes
///////////////////////////////////////////////////////////////////////////////
type AuthSchemes struct {
	Stat Status
	Val  string
}

func (p *AuthSchemes) Name() string          { return "AuthSchemes" }
func (p *AuthSchemes) Field() string         { return "" }
func (p *AuthSchemes) Scope() Scope          { return ScopeUser }
func (p *AuthSchemes) Status() Status        { return p.Stat }
func (p *AuthSchemes) UntypedV() interface{} { return p.Val }
func (p *AuthSchemes) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *AuthSchemes) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 27. DisableAuthNegotiateCnameLookup
///////////////////////////////////////////////////////////////////////////////
type DisableAuthNegotiateCnameLookup struct {
	Stat Status
	Val  bool
}

func (p *DisableAuthNegotiateCnameLookup) Name() string          { return "DisableAuthNegotiateCnameLookup" }
func (p *DisableAuthNegotiateCnameLookup) Field() string         { return "" }
func (p *DisableAuthNegotiateCnameLookup) Scope() Scope          { return ScopeUser }
func (p *DisableAuthNegotiateCnameLookup) Status() Status        { return p.Stat }
func (p *DisableAuthNegotiateCnameLookup) UntypedV() interface{} { return p.Val }
func (p *DisableAuthNegotiateCnameLookup) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DisableAuthNegotiateCnameLookup) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 28. EnableAuthNegotiatePort
///////////////////////////////////////////////////////////////////////////////
type EnableAuthNegotiatePort struct {
	Stat Status
	Val  bool
}

func (p *EnableAuthNegotiatePort) Name() string          { return "EnableAuthNegotiatePort" }
func (p *EnableAuthNegotiatePort) Field() string         { return "" }
func (p *EnableAuthNegotiatePort) Scope() Scope          { return ScopeUser }
func (p *EnableAuthNegotiatePort) Status() Status        { return p.Stat }
func (p *EnableAuthNegotiatePort) UntypedV() interface{} { return p.Val }
func (p *EnableAuthNegotiatePort) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *EnableAuthNegotiatePort) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 29. AuthServerWhitelist
///////////////////////////////////////////////////////////////////////////////
type AuthServerWhitelist struct {
	Stat Status
	Val  string
}

func (p *AuthServerWhitelist) Name() string          { return "AuthServerWhitelist" }
func (p *AuthServerWhitelist) Field() string         { return "" }
func (p *AuthServerWhitelist) Scope() Scope          { return ScopeUser }
func (p *AuthServerWhitelist) Status() Status        { return p.Stat }
func (p *AuthServerWhitelist) UntypedV() interface{} { return p.Val }
func (p *AuthServerWhitelist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *AuthServerWhitelist) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 30. AuthNegotiateDelegateWhitelist
///////////////////////////////////////////////////////////////////////////////
type AuthNegotiateDelegateWhitelist struct {
	Stat Status
	Val  string
}

func (p *AuthNegotiateDelegateWhitelist) Name() string          { return "AuthNegotiateDelegateWhitelist" }
func (p *AuthNegotiateDelegateWhitelist) Field() string         { return "" }
func (p *AuthNegotiateDelegateWhitelist) Scope() Scope          { return ScopeUser }
func (p *AuthNegotiateDelegateWhitelist) Status() Status        { return p.Stat }
func (p *AuthNegotiateDelegateWhitelist) UntypedV() interface{} { return p.Val }
func (p *AuthNegotiateDelegateWhitelist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *AuthNegotiateDelegateWhitelist) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 32. ExtensionInstallBlacklist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ExtensionInstallBlacklist struct {
	Stat Status
	Val  []string
}

func (p *ExtensionInstallBlacklist) Name() string          { return "ExtensionInstallBlacklist" }
func (p *ExtensionInstallBlacklist) Field() string         { return "" }
func (p *ExtensionInstallBlacklist) Scope() Scope          { return ScopeUser }
func (p *ExtensionInstallBlacklist) Status() Status        { return p.Stat }
func (p *ExtensionInstallBlacklist) UntypedV() interface{} { return p.Val }
func (p *ExtensionInstallBlacklist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *ExtensionInstallBlacklist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 33. ExtensionInstallWhitelist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ExtensionInstallWhitelist struct {
	Stat Status
	Val  []string
}

func (p *ExtensionInstallWhitelist) Name() string          { return "ExtensionInstallWhitelist" }
func (p *ExtensionInstallWhitelist) Field() string         { return "" }
func (p *ExtensionInstallWhitelist) Scope() Scope          { return ScopeUser }
func (p *ExtensionInstallWhitelist) Status() Status        { return p.Stat }
func (p *ExtensionInstallWhitelist) UntypedV() interface{} { return p.Val }
func (p *ExtensionInstallWhitelist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *ExtensionInstallWhitelist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 34. ExtensionInstallForcelist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ExtensionInstallForcelist struct {
	Stat Status
	Val  []string
}

func (p *ExtensionInstallForcelist) Name() string          { return "ExtensionInstallForcelist" }
func (p *ExtensionInstallForcelist) Field() string         { return "" }
func (p *ExtensionInstallForcelist) Scope() Scope          { return ScopeUser }
func (p *ExtensionInstallForcelist) Status() Status        { return p.Stat }
func (p *ExtensionInstallForcelist) UntypedV() interface{} { return p.Val }
func (p *ExtensionInstallForcelist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *ExtensionInstallForcelist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 35. ShowHomeButton
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ShowHomeButton struct {
	Stat Status
	Val  bool
}

func (p *ShowHomeButton) Name() string          { return "ShowHomeButton" }
func (p *ShowHomeButton) Field() string         { return "" }
func (p *ShowHomeButton) Scope() Scope          { return ScopeUser }
func (p *ShowHomeButton) Status() Status        { return p.Stat }
func (p *ShowHomeButton) UntypedV() interface{} { return p.Val }
func (p *ShowHomeButton) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ShowHomeButton) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 36. DeveloperToolsDisabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeveloperToolsDisabled struct {
	Stat Status
	Val  bool
}

func (p *DeveloperToolsDisabled) Name() string          { return "DeveloperToolsDisabled" }
func (p *DeveloperToolsDisabled) Field() string         { return "" }
func (p *DeveloperToolsDisabled) Scope() Scope          { return ScopeUser }
func (p *DeveloperToolsDisabled) Status() Status        { return p.Stat }
func (p *DeveloperToolsDisabled) UntypedV() interface{} { return p.Val }
func (p *DeveloperToolsDisabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeveloperToolsDisabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 37. RestoreOnStartup
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RestoreOnStartup struct {
	Stat Status
	Val  int
}

func (p *RestoreOnStartup) Name() string          { return "RestoreOnStartup" }
func (p *RestoreOnStartup) Field() string         { return "" }
func (p *RestoreOnStartup) Scope() Scope          { return ScopeUser }
func (p *RestoreOnStartup) Status() Status        { return p.Stat }
func (p *RestoreOnStartup) UntypedV() interface{} { return p.Val }
func (p *RestoreOnStartup) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *RestoreOnStartup) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 38. RestoreOnStartupURLs
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RestoreOnStartupURLs struct {
	Stat Status
	Val  []string
}

func (p *RestoreOnStartupURLs) Name() string          { return "RestoreOnStartupURLs" }
func (p *RestoreOnStartupURLs) Field() string         { return "" }
func (p *RestoreOnStartupURLs) Scope() Scope          { return ScopeUser }
func (p *RestoreOnStartupURLs) Status() Status        { return p.Stat }
func (p *RestoreOnStartupURLs) UntypedV() interface{} { return p.Val }
func (p *RestoreOnStartupURLs) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *RestoreOnStartupURLs) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 39. BlockThirdPartyCookies
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type BlockThirdPartyCookies struct {
	Stat Status
	Val  bool
}

func (p *BlockThirdPartyCookies) Name() string          { return "BlockThirdPartyCookies" }
func (p *BlockThirdPartyCookies) Field() string         { return "" }
func (p *BlockThirdPartyCookies) Scope() Scope          { return ScopeUser }
func (p *BlockThirdPartyCookies) Status() Status        { return p.Stat }
func (p *BlockThirdPartyCookies) UntypedV() interface{} { return p.Val }
func (p *BlockThirdPartyCookies) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *BlockThirdPartyCookies) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 40. DefaultSearchProviderEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultSearchProviderEnabled struct {
	Stat Status
	Val  bool
}

func (p *DefaultSearchProviderEnabled) Name() string          { return "DefaultSearchProviderEnabled" }
func (p *DefaultSearchProviderEnabled) Field() string         { return "" }
func (p *DefaultSearchProviderEnabled) Scope() Scope          { return ScopeUser }
func (p *DefaultSearchProviderEnabled) Status() Status        { return p.Stat }
func (p *DefaultSearchProviderEnabled) UntypedV() interface{} { return p.Val }
func (p *DefaultSearchProviderEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DefaultSearchProviderEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 41. DefaultSearchProviderName
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultSearchProviderName struct {
	Stat Status
	Val  string
}

func (p *DefaultSearchProviderName) Name() string          { return "DefaultSearchProviderName" }
func (p *DefaultSearchProviderName) Field() string         { return "" }
func (p *DefaultSearchProviderName) Scope() Scope          { return ScopeUser }
func (p *DefaultSearchProviderName) Status() Status        { return p.Stat }
func (p *DefaultSearchProviderName) UntypedV() interface{} { return p.Val }
func (p *DefaultSearchProviderName) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DefaultSearchProviderName) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 42. DefaultSearchProviderKeyword
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultSearchProviderKeyword struct {
	Stat Status
	Val  string
}

func (p *DefaultSearchProviderKeyword) Name() string          { return "DefaultSearchProviderKeyword" }
func (p *DefaultSearchProviderKeyword) Field() string         { return "" }
func (p *DefaultSearchProviderKeyword) Scope() Scope          { return ScopeUser }
func (p *DefaultSearchProviderKeyword) Status() Status        { return p.Stat }
func (p *DefaultSearchProviderKeyword) UntypedV() interface{} { return p.Val }
func (p *DefaultSearchProviderKeyword) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DefaultSearchProviderKeyword) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 43. DefaultSearchProviderSearchURL
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultSearchProviderSearchURL struct {
	Stat Status
	Val  string
}

func (p *DefaultSearchProviderSearchURL) Name() string          { return "DefaultSearchProviderSearchURL" }
func (p *DefaultSearchProviderSearchURL) Field() string         { return "" }
func (p *DefaultSearchProviderSearchURL) Scope() Scope          { return ScopeUser }
func (p *DefaultSearchProviderSearchURL) Status() Status        { return p.Stat }
func (p *DefaultSearchProviderSearchURL) UntypedV() interface{} { return p.Val }
func (p *DefaultSearchProviderSearchURL) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DefaultSearchProviderSearchURL) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 44. DefaultSearchProviderSuggestURL
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultSearchProviderSuggestURL struct {
	Stat Status
	Val  string
}

func (p *DefaultSearchProviderSuggestURL) Name() string          { return "DefaultSearchProviderSuggestURL" }
func (p *DefaultSearchProviderSuggestURL) Field() string         { return "" }
func (p *DefaultSearchProviderSuggestURL) Scope() Scope          { return ScopeUser }
func (p *DefaultSearchProviderSuggestURL) Status() Status        { return p.Stat }
func (p *DefaultSearchProviderSuggestURL) UntypedV() interface{} { return p.Val }
func (p *DefaultSearchProviderSuggestURL) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DefaultSearchProviderSuggestURL) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 46. DefaultSearchProviderIconURL
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultSearchProviderIconURL struct {
	Stat Status
	Val  string
}

func (p *DefaultSearchProviderIconURL) Name() string          { return "DefaultSearchProviderIconURL" }
func (p *DefaultSearchProviderIconURL) Field() string         { return "" }
func (p *DefaultSearchProviderIconURL) Scope() Scope          { return ScopeUser }
func (p *DefaultSearchProviderIconURL) Status() Status        { return p.Stat }
func (p *DefaultSearchProviderIconURL) UntypedV() interface{} { return p.Val }
func (p *DefaultSearchProviderIconURL) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DefaultSearchProviderIconURL) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 47. DefaultSearchProviderEncodings
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultSearchProviderEncodings struct {
	Stat Status
	Val  []string
}

func (p *DefaultSearchProviderEncodings) Name() string          { return "DefaultSearchProviderEncodings" }
func (p *DefaultSearchProviderEncodings) Field() string         { return "" }
func (p *DefaultSearchProviderEncodings) Scope() Scope          { return ScopeUser }
func (p *DefaultSearchProviderEncodings) Status() Status        { return p.Stat }
func (p *DefaultSearchProviderEncodings) UntypedV() interface{} { return p.Val }
func (p *DefaultSearchProviderEncodings) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DefaultSearchProviderEncodings) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 48. DefaultCookiesSetting
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultCookiesSetting struct {
	Stat Status
	Val  int
}

func (p *DefaultCookiesSetting) Name() string          { return "DefaultCookiesSetting" }
func (p *DefaultCookiesSetting) Field() string         { return "" }
func (p *DefaultCookiesSetting) Scope() Scope          { return ScopeUser }
func (p *DefaultCookiesSetting) Status() Status        { return p.Stat }
func (p *DefaultCookiesSetting) UntypedV() interface{} { return p.Val }
func (p *DefaultCookiesSetting) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DefaultCookiesSetting) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 49. DefaultImagesSetting
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultImagesSetting struct {
	Stat Status
	Val  int
}

func (p *DefaultImagesSetting) Name() string          { return "DefaultImagesSetting" }
func (p *DefaultImagesSetting) Field() string         { return "" }
func (p *DefaultImagesSetting) Scope() Scope          { return ScopeUser }
func (p *DefaultImagesSetting) Status() Status        { return p.Stat }
func (p *DefaultImagesSetting) UntypedV() interface{} { return p.Val }
func (p *DefaultImagesSetting) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DefaultImagesSetting) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 50. DefaultJavaScriptSetting
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultJavaScriptSetting struct {
	Stat Status
	Val  int
}

func (p *DefaultJavaScriptSetting) Name() string          { return "DefaultJavaScriptSetting" }
func (p *DefaultJavaScriptSetting) Field() string         { return "" }
func (p *DefaultJavaScriptSetting) Scope() Scope          { return ScopeUser }
func (p *DefaultJavaScriptSetting) Status() Status        { return p.Stat }
func (p *DefaultJavaScriptSetting) UntypedV() interface{} { return p.Val }
func (p *DefaultJavaScriptSetting) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DefaultJavaScriptSetting) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 51. DefaultPluginsSetting
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultPluginsSetting struct {
	Stat Status
	Val  int
}

func (p *DefaultPluginsSetting) Name() string          { return "DefaultPluginsSetting" }
func (p *DefaultPluginsSetting) Field() string         { return "" }
func (p *DefaultPluginsSetting) Scope() Scope          { return ScopeUser }
func (p *DefaultPluginsSetting) Status() Status        { return p.Stat }
func (p *DefaultPluginsSetting) UntypedV() interface{} { return p.Val }
func (p *DefaultPluginsSetting) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DefaultPluginsSetting) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 52. DefaultPopupsSetting
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultPopupsSetting struct {
	Stat Status
	Val  int
}

func (p *DefaultPopupsSetting) Name() string          { return "DefaultPopupsSetting" }
func (p *DefaultPopupsSetting) Field() string         { return "" }
func (p *DefaultPopupsSetting) Scope() Scope          { return ScopeUser }
func (p *DefaultPopupsSetting) Status() Status        { return p.Stat }
func (p *DefaultPopupsSetting) UntypedV() interface{} { return p.Val }
func (p *DefaultPopupsSetting) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DefaultPopupsSetting) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 53. DefaultNotificationsSetting
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultNotificationsSetting struct {
	Stat Status
	Val  int
}

func (p *DefaultNotificationsSetting) Name() string          { return "DefaultNotificationsSetting" }
func (p *DefaultNotificationsSetting) Field() string         { return "" }
func (p *DefaultNotificationsSetting) Scope() Scope          { return ScopeUser }
func (p *DefaultNotificationsSetting) Status() Status        { return p.Stat }
func (p *DefaultNotificationsSetting) UntypedV() interface{} { return p.Val }
func (p *DefaultNotificationsSetting) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DefaultNotificationsSetting) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 54. DefaultGeolocationSetting
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultGeolocationSetting struct {
	Stat Status
	Val  int
}

func (p *DefaultGeolocationSetting) Name() string          { return "DefaultGeolocationSetting" }
func (p *DefaultGeolocationSetting) Field() string         { return "" }
func (p *DefaultGeolocationSetting) Scope() Scope          { return ScopeUser }
func (p *DefaultGeolocationSetting) Status() Status        { return p.Stat }
func (p *DefaultGeolocationSetting) UntypedV() interface{} { return p.Val }
func (p *DefaultGeolocationSetting) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DefaultGeolocationSetting) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 55. Disable3DAPIs
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type Disable3DAPIs struct {
	Stat Status
	Val  bool
}

func (p *Disable3DAPIs) Name() string          { return "Disable3DAPIs" }
func (p *Disable3DAPIs) Field() string         { return "" }
func (p *Disable3DAPIs) Scope() Scope          { return ScopeUser }
func (p *Disable3DAPIs) Status() Status        { return p.Stat }
func (p *Disable3DAPIs) UntypedV() interface{} { return p.Val }
func (p *Disable3DAPIs) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *Disable3DAPIs) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 56. PolicyRefreshRate
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PolicyRefreshRate struct {
	Stat Status
	Val  int
}

func (p *PolicyRefreshRate) Name() string          { return "PolicyRefreshRate" }
func (p *PolicyRefreshRate) Field() string         { return "" }
func (p *PolicyRefreshRate) Scope() Scope          { return ScopeUser }
func (p *PolicyRefreshRate) Status() Status        { return p.Stat }
func (p *PolicyRefreshRate) UntypedV() interface{} { return p.Val }
func (p *PolicyRefreshRate) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *PolicyRefreshRate) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 61. ChromeOsLockOnIdleSuspend
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ChromeOsLockOnIdleSuspend struct {
	Stat Status
	Val  bool
}

func (p *ChromeOsLockOnIdleSuspend) Name() string          { return "ChromeOsLockOnIdleSuspend" }
func (p *ChromeOsLockOnIdleSuspend) Field() string         { return "" }
func (p *ChromeOsLockOnIdleSuspend) Scope() Scope          { return ScopeUser }
func (p *ChromeOsLockOnIdleSuspend) Status() Status        { return p.Stat }
func (p *ChromeOsLockOnIdleSuspend) UntypedV() interface{} { return p.Val }
func (p *ChromeOsLockOnIdleSuspend) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ChromeOsLockOnIdleSuspend) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 64. DownloadDirectory
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DownloadDirectory struct {
	Stat Status
	Val  string
}

func (p *DownloadDirectory) Name() string          { return "DownloadDirectory" }
func (p *DownloadDirectory) Field() string         { return "" }
func (p *DownloadDirectory) Scope() Scope          { return ScopeUser }
func (p *DownloadDirectory) Status() Status        { return p.Stat }
func (p *DownloadDirectory) UntypedV() interface{} { return p.Val }
func (p *DownloadDirectory) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DownloadDirectory) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 67. CookiesBlockedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CookiesBlockedForUrls struct {
	Stat Status
	Val  []string
}

func (p *CookiesBlockedForUrls) Name() string          { return "CookiesBlockedForUrls" }
func (p *CookiesBlockedForUrls) Field() string         { return "" }
func (p *CookiesBlockedForUrls) Scope() Scope          { return ScopeUser }
func (p *CookiesBlockedForUrls) Status() Status        { return p.Stat }
func (p *CookiesBlockedForUrls) UntypedV() interface{} { return p.Val }
func (p *CookiesBlockedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *CookiesBlockedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 68. CookiesSessionOnlyForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CookiesSessionOnlyForUrls struct {
	Stat Status
	Val  []string
}

func (p *CookiesSessionOnlyForUrls) Name() string          { return "CookiesSessionOnlyForUrls" }
func (p *CookiesSessionOnlyForUrls) Field() string         { return "" }
func (p *CookiesSessionOnlyForUrls) Scope() Scope          { return ScopeUser }
func (p *CookiesSessionOnlyForUrls) Status() Status        { return p.Stat }
func (p *CookiesSessionOnlyForUrls) UntypedV() interface{} { return p.Val }
func (p *CookiesSessionOnlyForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *CookiesSessionOnlyForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 69. ImagesAllowedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ImagesAllowedForUrls struct {
	Stat Status
	Val  []string
}

func (p *ImagesAllowedForUrls) Name() string          { return "ImagesAllowedForUrls" }
func (p *ImagesAllowedForUrls) Field() string         { return "" }
func (p *ImagesAllowedForUrls) Scope() Scope          { return ScopeUser }
func (p *ImagesAllowedForUrls) Status() Status        { return p.Stat }
func (p *ImagesAllowedForUrls) UntypedV() interface{} { return p.Val }
func (p *ImagesAllowedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *ImagesAllowedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 70. ImagesBlockedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ImagesBlockedForUrls struct {
	Stat Status
	Val  []string
}

func (p *ImagesBlockedForUrls) Name() string          { return "ImagesBlockedForUrls" }
func (p *ImagesBlockedForUrls) Field() string         { return "" }
func (p *ImagesBlockedForUrls) Scope() Scope          { return ScopeUser }
func (p *ImagesBlockedForUrls) Status() Status        { return p.Stat }
func (p *ImagesBlockedForUrls) UntypedV() interface{} { return p.Val }
func (p *ImagesBlockedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *ImagesBlockedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 71. JavaScriptAllowedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type JavaScriptAllowedForUrls struct {
	Stat Status
	Val  []string
}

func (p *JavaScriptAllowedForUrls) Name() string          { return "JavaScriptAllowedForUrls" }
func (p *JavaScriptAllowedForUrls) Field() string         { return "" }
func (p *JavaScriptAllowedForUrls) Scope() Scope          { return ScopeUser }
func (p *JavaScriptAllowedForUrls) Status() Status        { return p.Stat }
func (p *JavaScriptAllowedForUrls) UntypedV() interface{} { return p.Val }
func (p *JavaScriptAllowedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *JavaScriptAllowedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 72. JavaScriptBlockedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type JavaScriptBlockedForUrls struct {
	Stat Status
	Val  []string
}

func (p *JavaScriptBlockedForUrls) Name() string          { return "JavaScriptBlockedForUrls" }
func (p *JavaScriptBlockedForUrls) Field() string         { return "" }
func (p *JavaScriptBlockedForUrls) Scope() Scope          { return ScopeUser }
func (p *JavaScriptBlockedForUrls) Status() Status        { return p.Stat }
func (p *JavaScriptBlockedForUrls) UntypedV() interface{} { return p.Val }
func (p *JavaScriptBlockedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *JavaScriptBlockedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 73. PluginsAllowedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PluginsAllowedForUrls struct {
	Stat Status
	Val  []string
}

func (p *PluginsAllowedForUrls) Name() string          { return "PluginsAllowedForUrls" }
func (p *PluginsAllowedForUrls) Field() string         { return "" }
func (p *PluginsAllowedForUrls) Scope() Scope          { return ScopeUser }
func (p *PluginsAllowedForUrls) Status() Status        { return p.Stat }
func (p *PluginsAllowedForUrls) UntypedV() interface{} { return p.Val }
func (p *PluginsAllowedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *PluginsAllowedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 74. PluginsBlockedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PluginsBlockedForUrls struct {
	Stat Status
	Val  []string
}

func (p *PluginsBlockedForUrls) Name() string          { return "PluginsBlockedForUrls" }
func (p *PluginsBlockedForUrls) Field() string         { return "" }
func (p *PluginsBlockedForUrls) Scope() Scope          { return ScopeUser }
func (p *PluginsBlockedForUrls) Status() Status        { return p.Stat }
func (p *PluginsBlockedForUrls) UntypedV() interface{} { return p.Val }
func (p *PluginsBlockedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *PluginsBlockedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 75. PopupsAllowedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PopupsAllowedForUrls struct {
	Stat Status
	Val  []string
}

func (p *PopupsAllowedForUrls) Name() string          { return "PopupsAllowedForUrls" }
func (p *PopupsAllowedForUrls) Field() string         { return "" }
func (p *PopupsAllowedForUrls) Scope() Scope          { return ScopeUser }
func (p *PopupsAllowedForUrls) Status() Status        { return p.Stat }
func (p *PopupsAllowedForUrls) UntypedV() interface{} { return p.Val }
func (p *PopupsAllowedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *PopupsAllowedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 76. PopupsBlockedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PopupsBlockedForUrls struct {
	Stat Status
	Val  []string
}

func (p *PopupsBlockedForUrls) Name() string          { return "PopupsBlockedForUrls" }
func (p *PopupsBlockedForUrls) Field() string         { return "" }
func (p *PopupsBlockedForUrls) Scope() Scope          { return ScopeUser }
func (p *PopupsBlockedForUrls) Status() Status        { return p.Stat }
func (p *PopupsBlockedForUrls) UntypedV() interface{} { return p.Val }
func (p *PopupsBlockedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *PopupsBlockedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 77. CookiesAllowedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CookiesAllowedForUrls struct {
	Stat Status
	Val  []string
}

func (p *CookiesAllowedForUrls) Name() string          { return "CookiesAllowedForUrls" }
func (p *CookiesAllowedForUrls) Field() string         { return "" }
func (p *CookiesAllowedForUrls) Scope() Scope          { return ScopeUser }
func (p *CookiesAllowedForUrls) Status() Status        { return p.Stat }
func (p *CookiesAllowedForUrls) UntypedV() interface{} { return p.Val }
func (p *CookiesAllowedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *CookiesAllowedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 78. EnabledPlugins
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type EnabledPlugins struct {
	Stat Status
	Val  []string
}

func (p *EnabledPlugins) Name() string          { return "EnabledPlugins" }
func (p *EnabledPlugins) Field() string         { return "" }
func (p *EnabledPlugins) Scope() Scope          { return ScopeUser }
func (p *EnabledPlugins) Status() Status        { return p.Stat }
func (p *EnabledPlugins) UntypedV() interface{} { return p.Val }
func (p *EnabledPlugins) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *EnabledPlugins) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 79. DisabledPluginsExceptions
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DisabledPluginsExceptions struct {
	Stat Status
	Val  []string
}

func (p *DisabledPluginsExceptions) Name() string          { return "DisabledPluginsExceptions" }
func (p *DisabledPluginsExceptions) Field() string         { return "" }
func (p *DisabledPluginsExceptions) Scope() Scope          { return ScopeUser }
func (p *DisabledPluginsExceptions) Status() Status        { return p.Stat }
func (p *DisabledPluginsExceptions) UntypedV() interface{} { return p.Val }
func (p *DisabledPluginsExceptions) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DisabledPluginsExceptions) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 80. TranslateEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type TranslateEnabled struct {
	Stat Status
	Val  bool
}

func (p *TranslateEnabled) Name() string          { return "TranslateEnabled" }
func (p *TranslateEnabled) Field() string         { return "" }
func (p *TranslateEnabled) Scope() Scope          { return ScopeUser }
func (p *TranslateEnabled) Status() Status        { return p.Stat }
func (p *TranslateEnabled) UntypedV() interface{} { return p.Val }
func (p *TranslateEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *TranslateEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 81. AllowOutdatedPlugins
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AllowOutdatedPlugins struct {
	Stat Status
	Val  bool
}

func (p *AllowOutdatedPlugins) Name() string          { return "AllowOutdatedPlugins" }
func (p *AllowOutdatedPlugins) Field() string         { return "" }
func (p *AllowOutdatedPlugins) Scope() Scope          { return ScopeUser }
func (p *AllowOutdatedPlugins) Status() Status        { return p.Stat }
func (p *AllowOutdatedPlugins) UntypedV() interface{} { return p.Val }
func (p *AllowOutdatedPlugins) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AllowOutdatedPlugins) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 82. BookmarkBarEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type BookmarkBarEnabled struct {
	Stat Status
	Val  bool
}

func (p *BookmarkBarEnabled) Name() string          { return "BookmarkBarEnabled" }
func (p *BookmarkBarEnabled) Field() string         { return "" }
func (p *BookmarkBarEnabled) Scope() Scope          { return ScopeUser }
func (p *BookmarkBarEnabled) Status() Status        { return p.Stat }
func (p *BookmarkBarEnabled) UntypedV() interface{} { return p.Val }
func (p *BookmarkBarEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *BookmarkBarEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 83. EditBookmarksEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type EditBookmarksEnabled struct {
	Stat Status
	Val  bool
}

func (p *EditBookmarksEnabled) Name() string          { return "EditBookmarksEnabled" }
func (p *EditBookmarksEnabled) Field() string         { return "" }
func (p *EditBookmarksEnabled) Scope() Scope          { return ScopeUser }
func (p *EditBookmarksEnabled) Status() Status        { return p.Stat }
func (p *EditBookmarksEnabled) UntypedV() interface{} { return p.Val }
func (p *EditBookmarksEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *EditBookmarksEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 85. DisabledSchemes
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DisabledSchemes struct {
	Stat Status
	Val  []string
}

func (p *DisabledSchemes) Name() string          { return "DisabledSchemes" }
func (p *DisabledSchemes) Field() string         { return "" }
func (p *DisabledSchemes) Scope() Scope          { return ScopeUser }
func (p *DisabledSchemes) Status() Status        { return p.Stat }
func (p *DisabledSchemes) UntypedV() interface{} { return p.Val }
func (p *DisabledSchemes) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DisabledSchemes) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 89. AllowCrossOriginAuthPrompt
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AllowCrossOriginAuthPrompt struct {
	Stat Status
	Val  bool
}

func (p *AllowCrossOriginAuthPrompt) Name() string          { return "AllowCrossOriginAuthPrompt" }
func (p *AllowCrossOriginAuthPrompt) Field() string         { return "" }
func (p *AllowCrossOriginAuthPrompt) Scope() Scope          { return ScopeUser }
func (p *AllowCrossOriginAuthPrompt) Status() Status        { return p.Stat }
func (p *AllowCrossOriginAuthPrompt) UntypedV() interface{} { return p.Val }
func (p *AllowCrossOriginAuthPrompt) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AllowCrossOriginAuthPrompt) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 90. DevicePolicyRefreshRate
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DevicePolicyRefreshRate struct {
	Stat Status
	Val  int
}

func (p *DevicePolicyRefreshRate) Name() string { return "DevicePolicyRefreshRate" }
func (p *DevicePolicyRefreshRate) Field() string {
	return "device_policy_refresh_rate.device_policy_refresh_rate"
}
func (p *DevicePolicyRefreshRate) Scope() Scope          { return ScopeDevice }
func (p *DevicePolicyRefreshRate) Status() Status        { return p.Stat }
func (p *DevicePolicyRefreshRate) UntypedV() interface{} { return p.Val }
func (p *DevicePolicyRefreshRate) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DevicePolicyRefreshRate) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 91. ChromeOsReleaseChannel
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ChromeOsReleaseChannel struct {
	Stat Status
	Val  string
}

func (p *ChromeOsReleaseChannel) Name() string          { return "ChromeOsReleaseChannel" }
func (p *ChromeOsReleaseChannel) Field() string         { return "release_channel.release_channel" }
func (p *ChromeOsReleaseChannel) Scope() Scope          { return ScopeDevice }
func (p *ChromeOsReleaseChannel) Status() Status        { return p.Stat }
func (p *ChromeOsReleaseChannel) UntypedV() interface{} { return p.Val }
func (p *ChromeOsReleaseChannel) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *ChromeOsReleaseChannel) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 93. IncognitoModeAvailability
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type IncognitoModeAvailability struct {
	Stat Status
	Val  int
}

func (p *IncognitoModeAvailability) Name() string          { return "IncognitoModeAvailability" }
func (p *IncognitoModeAvailability) Field() string         { return "" }
func (p *IncognitoModeAvailability) Scope() Scope          { return ScopeUser }
func (p *IncognitoModeAvailability) Status() Status        { return p.Stat }
func (p *IncognitoModeAvailability) UntypedV() interface{} { return p.Val }
func (p *IncognitoModeAvailability) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *IncognitoModeAvailability) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 95. RemoteAccessHostFirewallTraversal
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RemoteAccessHostFirewallTraversal struct {
	Stat Status
	Val  bool
}

func (p *RemoteAccessHostFirewallTraversal) Name() string          { return "RemoteAccessHostFirewallTraversal" }
func (p *RemoteAccessHostFirewallTraversal) Field() string         { return "" }
func (p *RemoteAccessHostFirewallTraversal) Scope() Scope          { return ScopeUser }
func (p *RemoteAccessHostFirewallTraversal) Status() Status        { return p.Stat }
func (p *RemoteAccessHostFirewallTraversal) UntypedV() interface{} { return p.Val }
func (p *RemoteAccessHostFirewallTraversal) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *RemoteAccessHostFirewallTraversal) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 102. AutoSelectCertificateForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AutoSelectCertificateForUrls struct {
	Stat Status
	Val  []string
}

func (p *AutoSelectCertificateForUrls) Name() string          { return "AutoSelectCertificateForUrls" }
func (p *AutoSelectCertificateForUrls) Field() string         { return "" }
func (p *AutoSelectCertificateForUrls) Scope() Scope          { return ScopeUser }
func (p *AutoSelectCertificateForUrls) Status() Status        { return p.Stat }
func (p *AutoSelectCertificateForUrls) UntypedV() interface{} { return p.Val }
func (p *AutoSelectCertificateForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *AutoSelectCertificateForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 103. URLBlacklist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type URLBlacklist struct {
	Stat Status
	Val  []string
}

func (p *URLBlacklist) Name() string          { return "URLBlacklist" }
func (p *URLBlacklist) Field() string         { return "" }
func (p *URLBlacklist) Scope() Scope          { return ScopeUser }
func (p *URLBlacklist) Status() Status        { return p.Stat }
func (p *URLBlacklist) UntypedV() interface{} { return p.Val }
func (p *URLBlacklist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *URLBlacklist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 104. URLWhitelist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type URLWhitelist struct {
	Stat Status
	Val  []string
}

func (p *URLWhitelist) Name() string          { return "URLWhitelist" }
func (p *URLWhitelist) Field() string         { return "" }
func (p *URLWhitelist) Scope() Scope          { return ScopeUser }
func (p *URLWhitelist) Status() Status        { return p.Stat }
func (p *URLWhitelist) UntypedV() interface{} { return p.Val }
func (p *URLWhitelist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *URLWhitelist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 105. NotificationsAllowedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type NotificationsAllowedForUrls struct {
	Stat Status
	Val  []string
}

func (p *NotificationsAllowedForUrls) Name() string          { return "NotificationsAllowedForUrls" }
func (p *NotificationsAllowedForUrls) Field() string         { return "" }
func (p *NotificationsAllowedForUrls) Scope() Scope          { return ScopeUser }
func (p *NotificationsAllowedForUrls) Status() Status        { return p.Stat }
func (p *NotificationsAllowedForUrls) UntypedV() interface{} { return p.Val }
func (p *NotificationsAllowedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *NotificationsAllowedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 106. NotificationsBlockedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type NotificationsBlockedForUrls struct {
	Stat Status
	Val  []string
}

func (p *NotificationsBlockedForUrls) Name() string          { return "NotificationsBlockedForUrls" }
func (p *NotificationsBlockedForUrls) Field() string         { return "" }
func (p *NotificationsBlockedForUrls) Scope() Scope          { return ScopeUser }
func (p *NotificationsBlockedForUrls) Status() Status        { return p.Stat }
func (p *NotificationsBlockedForUrls) UntypedV() interface{} { return p.Val }
func (p *NotificationsBlockedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *NotificationsBlockedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 107. OpenNetworkConfiguration
// This policy can be modified without rebooting.
// See https://chromium.googlesource.com/chromium/src/+/master/components/onc/docs/onc_spec.md for full schema.
///////////////////////////////////////////////////////////////////////////////
type OpenNetworkConfiguration struct {
	Stat Status
	Val  string
}

func (p *OpenNetworkConfiguration) Name() string          { return "OpenNetworkConfiguration" }
func (p *OpenNetworkConfiguration) Field() string         { return "" }
func (p *OpenNetworkConfiguration) Scope() Scope          { return ScopeUser }
func (p *OpenNetworkConfiguration) Status() Status        { return p.Stat }
func (p *OpenNetworkConfiguration) UntypedV() interface{} { return p.Val }
func (p *OpenNetworkConfiguration) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *OpenNetworkConfiguration) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 108. DeviceOpenNetworkConfiguration
// This policy can be modified without rebooting.
// See https://chromium.googlesource.com/chromium/src/+/master/components/onc/docs/onc_spec.md for full schema.
///////////////////////////////////////////////////////////////////////////////
type DeviceOpenNetworkConfiguration struct {
	Stat Status
	Val  string
}

func (p *DeviceOpenNetworkConfiguration) Name() string { return "DeviceOpenNetworkConfiguration" }
func (p *DeviceOpenNetworkConfiguration) Field() string {
	return "open_network_configuration.open_network_configuration"
}
func (p *DeviceOpenNetworkConfiguration) Scope() Scope          { return ScopeDevice }
func (p *DeviceOpenNetworkConfiguration) Status() Status        { return p.Stat }
func (p *DeviceOpenNetworkConfiguration) UntypedV() interface{} { return p.Val }
func (p *DeviceOpenNetworkConfiguration) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DeviceOpenNetworkConfiguration) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 116. ProxySettings
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ProxySettings struct {
	Stat Status
	Val  *ProxySettingsValue
}

type ProxySettingsValue struct {
	ProxyBypassList string `json:"ProxyBypassList"`
	ProxyMode       string `json:"ProxyMode"`
	ProxyPacUrl     string `json:"ProxyPacUrl"`
	ProxyServer     string `json:"ProxyServer"`
	ProxyServerMode int    `json:"ProxyServerMode"`
}

func (p *ProxySettings) Name() string          { return "ProxySettings" }
func (p *ProxySettings) Field() string         { return "" }
func (p *ProxySettings) Scope() Scope          { return ScopeUser }
func (p *ProxySettings) Status() Status        { return p.Stat }
func (p *ProxySettings) UntypedV() interface{} { return p.Val }
func (p *ProxySettings) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *ProxySettingsValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *ProxySettingsValue", m)
	}
	return v, nil
}
func (p *ProxySettings) Equal(iface interface{}) bool {
	v, ok := iface.(*ProxySettingsValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 119. ReportDeviceVersionInfo
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceVersionInfo struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceVersionInfo) Name() string          { return "ReportDeviceVersionInfo" }
func (p *ReportDeviceVersionInfo) Field() string         { return "device_reporting.report_version_info" }
func (p *ReportDeviceVersionInfo) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceVersionInfo) Status() Status        { return p.Stat }
func (p *ReportDeviceVersionInfo) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceVersionInfo) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceVersionInfo) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 120. ReportDeviceActivityTimes
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceActivityTimes struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceActivityTimes) Name() string          { return "ReportDeviceActivityTimes" }
func (p *ReportDeviceActivityTimes) Field() string         { return "device_reporting.report_activity_times" }
func (p *ReportDeviceActivityTimes) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceActivityTimes) Status() Status        { return p.Stat }
func (p *ReportDeviceActivityTimes) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceActivityTimes) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceActivityTimes) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 121. ReportDeviceBootMode
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceBootMode struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceBootMode) Name() string          { return "ReportDeviceBootMode" }
func (p *ReportDeviceBootMode) Field() string         { return "device_reporting.report_boot_mode" }
func (p *ReportDeviceBootMode) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceBootMode) Status() Status        { return p.Stat }
func (p *ReportDeviceBootMode) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceBootMode) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceBootMode) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 122. DeviceUserWhitelist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceUserWhitelist struct {
	Stat Status
	Val  []string
}

func (p *DeviceUserWhitelist) Name() string          { return "DeviceUserWhitelist" }
func (p *DeviceUserWhitelist) Field() string         { return "user_whitelist.user_whitelist" }
func (p *DeviceUserWhitelist) Scope() Scope          { return ScopeDevice }
func (p *DeviceUserWhitelist) Status() Status        { return p.Stat }
func (p *DeviceUserWhitelist) UntypedV() interface{} { return p.Val }
func (p *DeviceUserWhitelist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DeviceUserWhitelist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	sensitive := p.Val
	for i := range sensitive {
		sensitive[i] = "********"
	}
	return cmp.Equal(sensitive, v)
}

///////////////////////////////////////////////////////////////////////////////
// 123. DeviceAllowNewUsers
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceAllowNewUsers struct {
	Stat Status
	Val  bool
}

func (p *DeviceAllowNewUsers) Name() string          { return "DeviceAllowNewUsers" }
func (p *DeviceAllowNewUsers) Field() string         { return "allow_new_users.allow_new_users" }
func (p *DeviceAllowNewUsers) Scope() Scope          { return ScopeDevice }
func (p *DeviceAllowNewUsers) Status() Status        { return p.Stat }
func (p *DeviceAllowNewUsers) UntypedV() interface{} { return p.Val }
func (p *DeviceAllowNewUsers) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceAllowNewUsers) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 124. DeviceGuestModeEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceGuestModeEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceGuestModeEnabled) Name() string          { return "DeviceGuestModeEnabled" }
func (p *DeviceGuestModeEnabled) Field() string         { return "guest_mode_enabled.guest_mode_enabled" }
func (p *DeviceGuestModeEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceGuestModeEnabled) Status() Status        { return p.Stat }
func (p *DeviceGuestModeEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceGuestModeEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceGuestModeEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 125. DeviceShowUserNamesOnSignin
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceShowUserNamesOnSignin struct {
	Stat Status
	Val  bool
}

func (p *DeviceShowUserNamesOnSignin) Name() string          { return "DeviceShowUserNamesOnSignin" }
func (p *DeviceShowUserNamesOnSignin) Field() string         { return "show_user_names.show_user_names" }
func (p *DeviceShowUserNamesOnSignin) Scope() Scope          { return ScopeDevice }
func (p *DeviceShowUserNamesOnSignin) Status() Status        { return p.Stat }
func (p *DeviceShowUserNamesOnSignin) UntypedV() interface{} { return p.Val }
func (p *DeviceShowUserNamesOnSignin) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceShowUserNamesOnSignin) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 126. DeviceDataRoamingEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceDataRoamingEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceDataRoamingEnabled) Name() string          { return "DeviceDataRoamingEnabled" }
func (p *DeviceDataRoamingEnabled) Field() string         { return "data_roaming_enabled.data_roaming_enabled" }
func (p *DeviceDataRoamingEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceDataRoamingEnabled) Status() Status        { return p.Stat }
func (p *DeviceDataRoamingEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceDataRoamingEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceDataRoamingEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 127. DeviceMetricsReportingEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceMetricsReportingEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceMetricsReportingEnabled) Name() string          { return "DeviceMetricsReportingEnabled" }
func (p *DeviceMetricsReportingEnabled) Field() string         { return "metrics_enabled.metrics_enabled" }
func (p *DeviceMetricsReportingEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceMetricsReportingEnabled) Status() Status        { return p.Stat }
func (p *DeviceMetricsReportingEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceMetricsReportingEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceMetricsReportingEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 128. DeviceEphemeralUsersEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceEphemeralUsersEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceEphemeralUsersEnabled) Name() string { return "DeviceEphemeralUsersEnabled" }
func (p *DeviceEphemeralUsersEnabled) Field() string {
	return "ephemeral_users_enabled.ephemeral_users_enabled"
}
func (p *DeviceEphemeralUsersEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceEphemeralUsersEnabled) Status() Status        { return p.Stat }
func (p *DeviceEphemeralUsersEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceEphemeralUsersEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceEphemeralUsersEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 129. EnableOnlineRevocationChecks
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type EnableOnlineRevocationChecks struct {
	Stat Status
	Val  bool
}

func (p *EnableOnlineRevocationChecks) Name() string          { return "EnableOnlineRevocationChecks" }
func (p *EnableOnlineRevocationChecks) Field() string         { return "" }
func (p *EnableOnlineRevocationChecks) Scope() Scope          { return ScopeUser }
func (p *EnableOnlineRevocationChecks) Status() Status        { return p.Stat }
func (p *EnableOnlineRevocationChecks) UntypedV() interface{} { return p.Val }
func (p *EnableOnlineRevocationChecks) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *EnableOnlineRevocationChecks) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 134. ChromeOsReleaseChannelDelegated
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ChromeOsReleaseChannelDelegated struct {
	Stat Status
	Val  bool
}

func (p *ChromeOsReleaseChannelDelegated) Name() string { return "ChromeOsReleaseChannelDelegated" }
func (p *ChromeOsReleaseChannelDelegated) Field() string {
	return "release_channel.release_channel_delegated"
}
func (p *ChromeOsReleaseChannelDelegated) Scope() Scope          { return ScopeDevice }
func (p *ChromeOsReleaseChannelDelegated) Status() Status        { return p.Stat }
func (p *ChromeOsReleaseChannelDelegated) UntypedV() interface{} { return p.Val }
func (p *ChromeOsReleaseChannelDelegated) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ChromeOsReleaseChannelDelegated) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 136. DeviceAutoUpdateDisabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceAutoUpdateDisabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceAutoUpdateDisabled) Name() string          { return "DeviceAutoUpdateDisabled" }
func (p *DeviceAutoUpdateDisabled) Field() string         { return "auto_update_settings.update_disabled" }
func (p *DeviceAutoUpdateDisabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceAutoUpdateDisabled) Status() Status        { return p.Stat }
func (p *DeviceAutoUpdateDisabled) UntypedV() interface{} { return p.Val }
func (p *DeviceAutoUpdateDisabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceAutoUpdateDisabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 139. DriveDisabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DriveDisabled struct {
	Stat Status
	Val  bool
}

func (p *DriveDisabled) Name() string          { return "DriveDisabled" }
func (p *DriveDisabled) Field() string         { return "" }
func (p *DriveDisabled) Scope() Scope          { return ScopeUser }
func (p *DriveDisabled) Status() Status        { return p.Stat }
func (p *DriveDisabled) UntypedV() interface{} { return p.Val }
func (p *DriveDisabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DriveDisabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 140. DriveDisabledOverCellular
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DriveDisabledOverCellular struct {
	Stat Status
	Val  bool
}

func (p *DriveDisabledOverCellular) Name() string          { return "DriveDisabledOverCellular" }
func (p *DriveDisabledOverCellular) Field() string         { return "" }
func (p *DriveDisabledOverCellular) Scope() Scope          { return ScopeUser }
func (p *DriveDisabledOverCellular) Status() Status        { return p.Stat }
func (p *DriveDisabledOverCellular) UntypedV() interface{} { return p.Val }
func (p *DriveDisabledOverCellular) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DriveDisabledOverCellular) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 142. DeviceTargetVersionPrefix
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceTargetVersionPrefix struct {
	Stat Status
	Val  string
}

func (p *DeviceTargetVersionPrefix) Name() string { return "DeviceTargetVersionPrefix" }
func (p *DeviceTargetVersionPrefix) Field() string {
	return "auto_update_settings.target_version_prefix"
}
func (p *DeviceTargetVersionPrefix) Scope() Scope          { return ScopeDevice }
func (p *DeviceTargetVersionPrefix) Status() Status        { return p.Stat }
func (p *DeviceTargetVersionPrefix) UntypedV() interface{} { return p.Val }
func (p *DeviceTargetVersionPrefix) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DeviceTargetVersionPrefix) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 143. ReportDeviceLocation
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceLocation struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceLocation) Name() string          { return "ReportDeviceLocation" }
func (p *ReportDeviceLocation) Field() string         { return "device_reporting.report_location" }
func (p *ReportDeviceLocation) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceLocation) Status() Status        { return p.Stat }
func (p *ReportDeviceLocation) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceLocation) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceLocation) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 144. PinnedLauncherApps
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PinnedLauncherApps struct {
	Stat Status
	Val  []string
}

func (p *PinnedLauncherApps) Name() string          { return "PinnedLauncherApps" }
func (p *PinnedLauncherApps) Field() string         { return "" }
func (p *PinnedLauncherApps) Scope() Scope          { return ScopeUser }
func (p *PinnedLauncherApps) Status() Status        { return p.Stat }
func (p *PinnedLauncherApps) UntypedV() interface{} { return p.Val }
func (p *PinnedLauncherApps) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *PinnedLauncherApps) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 145. DeviceUpdateScatterFactor
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceUpdateScatterFactor struct {
	Stat Status
	Val  int
}

func (p *DeviceUpdateScatterFactor) Name() string { return "DeviceUpdateScatterFactor" }
func (p *DeviceUpdateScatterFactor) Field() string {
	return "auto_update_settings.scatter_factor_in_seconds"
}
func (p *DeviceUpdateScatterFactor) Scope() Scope          { return ScopeDevice }
func (p *DeviceUpdateScatterFactor) Status() Status        { return p.Stat }
func (p *DeviceUpdateScatterFactor) UntypedV() interface{} { return p.Val }
func (p *DeviceUpdateScatterFactor) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceUpdateScatterFactor) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 146. DeviceUpdateAllowedConnectionTypes
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceUpdateAllowedConnectionTypes struct {
	Stat Status
	Val  []string
}

func (p *DeviceUpdateAllowedConnectionTypes) Name() string {
	return "DeviceUpdateAllowedConnectionTypes"
}
func (p *DeviceUpdateAllowedConnectionTypes) Field() string {
	return "auto_update_settings.allowed_connection_types"
}
func (p *DeviceUpdateAllowedConnectionTypes) Scope() Scope          { return ScopeDevice }
func (p *DeviceUpdateAllowedConnectionTypes) Status() Status        { return p.Stat }
func (p *DeviceUpdateAllowedConnectionTypes) UntypedV() interface{} { return p.Val }
func (p *DeviceUpdateAllowedConnectionTypes) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DeviceUpdateAllowedConnectionTypes) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 148. ExtensionInstallSources
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ExtensionInstallSources struct {
	Stat Status
	Val  []string
}

func (p *ExtensionInstallSources) Name() string          { return "ExtensionInstallSources" }
func (p *ExtensionInstallSources) Field() string         { return "" }
func (p *ExtensionInstallSources) Scope() Scope          { return ScopeUser }
func (p *ExtensionInstallSources) Status() Status        { return p.Stat }
func (p *ExtensionInstallSources) UntypedV() interface{} { return p.Val }
func (p *ExtensionInstallSources) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *ExtensionInstallSources) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 149. DefaultMediaStreamSetting
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultMediaStreamSetting struct {
	Stat Status
	Val  int
}

func (p *DefaultMediaStreamSetting) Name() string          { return "DefaultMediaStreamSetting" }
func (p *DefaultMediaStreamSetting) Field() string         { return "" }
func (p *DefaultMediaStreamSetting) Scope() Scope          { return ScopeUser }
func (p *DefaultMediaStreamSetting) Status() Status        { return p.Stat }
func (p *DefaultMediaStreamSetting) UntypedV() interface{} { return p.Val }
func (p *DefaultMediaStreamSetting) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DefaultMediaStreamSetting) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 150. DisableSafeBrowsingProceedAnyway
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DisableSafeBrowsingProceedAnyway struct {
	Stat Status
	Val  bool
}

func (p *DisableSafeBrowsingProceedAnyway) Name() string          { return "DisableSafeBrowsingProceedAnyway" }
func (p *DisableSafeBrowsingProceedAnyway) Field() string         { return "" }
func (p *DisableSafeBrowsingProceedAnyway) Scope() Scope          { return ScopeUser }
func (p *DisableSafeBrowsingProceedAnyway) Status() Status        { return p.Stat }
func (p *DisableSafeBrowsingProceedAnyway) UntypedV() interface{} { return p.Val }
func (p *DisableSafeBrowsingProceedAnyway) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DisableSafeBrowsingProceedAnyway) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 151. SpellCheckServiceEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SpellCheckServiceEnabled struct {
	Stat Status
	Val  bool
}

func (p *SpellCheckServiceEnabled) Name() string          { return "SpellCheckServiceEnabled" }
func (p *SpellCheckServiceEnabled) Field() string         { return "" }
func (p *SpellCheckServiceEnabled) Scope() Scope          { return ScopeUser }
func (p *SpellCheckServiceEnabled) Status() Status        { return p.Stat }
func (p *SpellCheckServiceEnabled) UntypedV() interface{} { return p.Val }
func (p *SpellCheckServiceEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SpellCheckServiceEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 152. ExternalStorageDisabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ExternalStorageDisabled struct {
	Stat Status
	Val  bool
}

func (p *ExternalStorageDisabled) Name() string          { return "ExternalStorageDisabled" }
func (p *ExternalStorageDisabled) Field() string         { return "" }
func (p *ExternalStorageDisabled) Scope() Scope          { return ScopeUser }
func (p *ExternalStorageDisabled) Status() Status        { return p.Stat }
func (p *ExternalStorageDisabled) UntypedV() interface{} { return p.Val }
func (p *ExternalStorageDisabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ExternalStorageDisabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 153. DisableScreenshots
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DisableScreenshots struct {
	Stat Status
	Val  bool
}

func (p *DisableScreenshots) Name() string          { return "DisableScreenshots" }
func (p *DisableScreenshots) Field() string         { return "" }
func (p *DisableScreenshots) Scope() Scope          { return ScopeUser }
func (p *DisableScreenshots) Status() Status        { return p.Stat }
func (p *DisableScreenshots) UntypedV() interface{} { return p.Val }
func (p *DisableScreenshots) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DisableScreenshots) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 154. RemoteAccessHostDomain
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RemoteAccessHostDomain struct {
	Stat Status
	Val  string
}

func (p *RemoteAccessHostDomain) Name() string          { return "RemoteAccessHostDomain" }
func (p *RemoteAccessHostDomain) Field() string         { return "" }
func (p *RemoteAccessHostDomain) Scope() Scope          { return ScopeUser }
func (p *RemoteAccessHostDomain) Status() Status        { return p.Stat }
func (p *RemoteAccessHostDomain) UntypedV() interface{} { return p.Val }
func (p *RemoteAccessHostDomain) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *RemoteAccessHostDomain) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 157. RemoteAccessHostRequireCurtain
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RemoteAccessHostRequireCurtain struct {
	Stat Status
	Val  bool
}

func (p *RemoteAccessHostRequireCurtain) Name() string          { return "RemoteAccessHostRequireCurtain" }
func (p *RemoteAccessHostRequireCurtain) Field() string         { return "" }
func (p *RemoteAccessHostRequireCurtain) Scope() Scope          { return ScopeUser }
func (p *RemoteAccessHostRequireCurtain) Status() Status        { return p.Stat }
func (p *RemoteAccessHostRequireCurtain) UntypedV() interface{} { return p.Val }
func (p *RemoteAccessHostRequireCurtain) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *RemoteAccessHostRequireCurtain) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 158. SystemTimezone
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SystemTimezone struct {
	Stat Status
	Val  string
}

func (p *SystemTimezone) Name() string          { return "SystemTimezone" }
func (p *SystemTimezone) Field() string         { return "system_timezone.timezone" }
func (p *SystemTimezone) Scope() Scope          { return ScopeDevice }
func (p *SystemTimezone) Status() Status        { return p.Stat }
func (p *SystemTimezone) UntypedV() interface{} { return p.Val }
func (p *SystemTimezone) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *SystemTimezone) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 159. AudioOutputAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AudioOutputAllowed struct {
	Stat Status
	Val  bool
}

func (p *AudioOutputAllowed) Name() string          { return "AudioOutputAllowed" }
func (p *AudioOutputAllowed) Field() string         { return "" }
func (p *AudioOutputAllowed) Scope() Scope          { return ScopeUser }
func (p *AudioOutputAllowed) Status() Status        { return p.Stat }
func (p *AudioOutputAllowed) UntypedV() interface{} { return p.Val }
func (p *AudioOutputAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AudioOutputAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 160. AudioCaptureAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AudioCaptureAllowed struct {
	Stat Status
	Val  bool
}

func (p *AudioCaptureAllowed) Name() string          { return "AudioCaptureAllowed" }
func (p *AudioCaptureAllowed) Field() string         { return "" }
func (p *AudioCaptureAllowed) Scope() Scope          { return ScopeUser }
func (p *AudioCaptureAllowed) Status() Status        { return p.Stat }
func (p *AudioCaptureAllowed) UntypedV() interface{} { return p.Val }
func (p *AudioCaptureAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AudioCaptureAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 161. DefaultSearchProviderAlternateURLs
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultSearchProviderAlternateURLs struct {
	Stat Status
	Val  []string
}

func (p *DefaultSearchProviderAlternateURLs) Name() string {
	return "DefaultSearchProviderAlternateURLs"
}
func (p *DefaultSearchProviderAlternateURLs) Field() string         { return "" }
func (p *DefaultSearchProviderAlternateURLs) Scope() Scope          { return ScopeUser }
func (p *DefaultSearchProviderAlternateURLs) Status() Status        { return p.Stat }
func (p *DefaultSearchProviderAlternateURLs) UntypedV() interface{} { return p.Val }
func (p *DefaultSearchProviderAlternateURLs) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DefaultSearchProviderAlternateURLs) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 162. ForceSafeSearch
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ForceSafeSearch struct {
	Stat Status
	Val  bool
}

func (p *ForceSafeSearch) Name() string          { return "ForceSafeSearch" }
func (p *ForceSafeSearch) Field() string         { return "" }
func (p *ForceSafeSearch) Scope() Scope          { return ScopeUser }
func (p *ForceSafeSearch) Status() Status        { return p.Stat }
func (p *ForceSafeSearch) UntypedV() interface{} { return p.Val }
func (p *ForceSafeSearch) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ForceSafeSearch) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 163. DeviceLocalAccounts
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLocalAccounts struct {
	Stat Status
	Val  []string
}

func (p *DeviceLocalAccounts) Name() string          { return "DeviceLocalAccounts" }
func (p *DeviceLocalAccounts) Field() string         { return "device_local_accounts.account" }
func (p *DeviceLocalAccounts) Scope() Scope          { return ScopeDevice }
func (p *DeviceLocalAccounts) Status() Status        { return p.Stat }
func (p *DeviceLocalAccounts) UntypedV() interface{} { return p.Val }
func (p *DeviceLocalAccounts) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DeviceLocalAccounts) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 164. ShowLogoutButtonInTray
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ShowLogoutButtonInTray struct {
	Stat Status
	Val  bool
}

func (p *ShowLogoutButtonInTray) Name() string          { return "ShowLogoutButtonInTray" }
func (p *ShowLogoutButtonInTray) Field() string         { return "" }
func (p *ShowLogoutButtonInTray) Scope() Scope          { return ScopeUser }
func (p *ShowLogoutButtonInTray) Status() Status        { return p.Stat }
func (p *ShowLogoutButtonInTray) UntypedV() interface{} { return p.Val }
func (p *ShowLogoutButtonInTray) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ShowLogoutButtonInTray) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 166. ShelfAutoHideBehavior
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ShelfAutoHideBehavior struct {
	Stat Status
	Val  string
}

func (p *ShelfAutoHideBehavior) Name() string          { return "ShelfAutoHideBehavior" }
func (p *ShelfAutoHideBehavior) Field() string         { return "" }
func (p *ShelfAutoHideBehavior) Scope() Scope          { return ScopeUser }
func (p *ShelfAutoHideBehavior) Status() Status        { return p.Stat }
func (p *ShelfAutoHideBehavior) UntypedV() interface{} { return p.Val }
func (p *ShelfAutoHideBehavior) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *ShelfAutoHideBehavior) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 167. VideoCaptureAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type VideoCaptureAllowed struct {
	Stat Status
	Val  bool
}

func (p *VideoCaptureAllowed) Name() string          { return "VideoCaptureAllowed" }
func (p *VideoCaptureAllowed) Field() string         { return "" }
func (p *VideoCaptureAllowed) Scope() Scope          { return ScopeUser }
func (p *VideoCaptureAllowed) Status() Status        { return p.Stat }
func (p *VideoCaptureAllowed) UntypedV() interface{} { return p.Val }
func (p *VideoCaptureAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *VideoCaptureAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 168. ExtensionAllowedTypes
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ExtensionAllowedTypes struct {
	Stat Status
	Val  []string
}

func (p *ExtensionAllowedTypes) Name() string          { return "ExtensionAllowedTypes" }
func (p *ExtensionAllowedTypes) Field() string         { return "" }
func (p *ExtensionAllowedTypes) Scope() Scope          { return ScopeUser }
func (p *ExtensionAllowedTypes) Status() Status        { return p.Stat }
func (p *ExtensionAllowedTypes) UntypedV() interface{} { return p.Val }
func (p *ExtensionAllowedTypes) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *ExtensionAllowedTypes) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 169. UserDisplayName
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type UserDisplayName struct {
	Stat Status
	Val  string
}

func (p *UserDisplayName) Name() string          { return "UserDisplayName" }
func (p *UserDisplayName) Field() string         { return "" }
func (p *UserDisplayName) Scope() Scope          { return ScopeUser }
func (p *UserDisplayName) Status() Status        { return p.Stat }
func (p *UserDisplayName) UntypedV() interface{} { return p.Val }
func (p *UserDisplayName) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *UserDisplayName) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 170. SessionLengthLimit
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SessionLengthLimit struct {
	Stat Status
	Val  int
}

func (p *SessionLengthLimit) Name() string          { return "SessionLengthLimit" }
func (p *SessionLengthLimit) Field() string         { return "" }
func (p *SessionLengthLimit) Scope() Scope          { return ScopeUser }
func (p *SessionLengthLimit) Status() Status        { return p.Stat }
func (p *SessionLengthLimit) UntypedV() interface{} { return p.Val }
func (p *SessionLengthLimit) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *SessionLengthLimit) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 172. ScreenDimDelayAC
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ScreenDimDelayAC struct {
	Stat Status
	Val  int
}

func (p *ScreenDimDelayAC) Name() string          { return "ScreenDimDelayAC" }
func (p *ScreenDimDelayAC) Field() string         { return "" }
func (p *ScreenDimDelayAC) Scope() Scope          { return ScopeUser }
func (p *ScreenDimDelayAC) Status() Status        { return p.Stat }
func (p *ScreenDimDelayAC) UntypedV() interface{} { return p.Val }
func (p *ScreenDimDelayAC) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ScreenDimDelayAC) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 173. ScreenOffDelayAC
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ScreenOffDelayAC struct {
	Stat Status
	Val  int
}

func (p *ScreenOffDelayAC) Name() string          { return "ScreenOffDelayAC" }
func (p *ScreenOffDelayAC) Field() string         { return "" }
func (p *ScreenOffDelayAC) Scope() Scope          { return ScopeUser }
func (p *ScreenOffDelayAC) Status() Status        { return p.Stat }
func (p *ScreenOffDelayAC) UntypedV() interface{} { return p.Val }
func (p *ScreenOffDelayAC) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ScreenOffDelayAC) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 174. ScreenLockDelayAC
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ScreenLockDelayAC struct {
	Stat Status
	Val  int
}

func (p *ScreenLockDelayAC) Name() string          { return "ScreenLockDelayAC" }
func (p *ScreenLockDelayAC) Field() string         { return "" }
func (p *ScreenLockDelayAC) Scope() Scope          { return ScopeUser }
func (p *ScreenLockDelayAC) Status() Status        { return p.Stat }
func (p *ScreenLockDelayAC) UntypedV() interface{} { return p.Val }
func (p *ScreenLockDelayAC) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ScreenLockDelayAC) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 175. IdleDelayAC
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type IdleDelayAC struct {
	Stat Status
	Val  int
}

func (p *IdleDelayAC) Name() string          { return "IdleDelayAC" }
func (p *IdleDelayAC) Field() string         { return "" }
func (p *IdleDelayAC) Scope() Scope          { return ScopeUser }
func (p *IdleDelayAC) Status() Status        { return p.Stat }
func (p *IdleDelayAC) UntypedV() interface{} { return p.Val }
func (p *IdleDelayAC) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *IdleDelayAC) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 176. ScreenDimDelayBattery
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ScreenDimDelayBattery struct {
	Stat Status
	Val  int
}

func (p *ScreenDimDelayBattery) Name() string          { return "ScreenDimDelayBattery" }
func (p *ScreenDimDelayBattery) Field() string         { return "" }
func (p *ScreenDimDelayBattery) Scope() Scope          { return ScopeUser }
func (p *ScreenDimDelayBattery) Status() Status        { return p.Stat }
func (p *ScreenDimDelayBattery) UntypedV() interface{} { return p.Val }
func (p *ScreenDimDelayBattery) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ScreenDimDelayBattery) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 177. ScreenOffDelayBattery
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ScreenOffDelayBattery struct {
	Stat Status
	Val  int
}

func (p *ScreenOffDelayBattery) Name() string          { return "ScreenOffDelayBattery" }
func (p *ScreenOffDelayBattery) Field() string         { return "" }
func (p *ScreenOffDelayBattery) Scope() Scope          { return ScopeUser }
func (p *ScreenOffDelayBattery) Status() Status        { return p.Stat }
func (p *ScreenOffDelayBattery) UntypedV() interface{} { return p.Val }
func (p *ScreenOffDelayBattery) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ScreenOffDelayBattery) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 178. ScreenLockDelayBattery
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ScreenLockDelayBattery struct {
	Stat Status
	Val  int
}

func (p *ScreenLockDelayBattery) Name() string          { return "ScreenLockDelayBattery" }
func (p *ScreenLockDelayBattery) Field() string         { return "" }
func (p *ScreenLockDelayBattery) Scope() Scope          { return ScopeUser }
func (p *ScreenLockDelayBattery) Status() Status        { return p.Stat }
func (p *ScreenLockDelayBattery) UntypedV() interface{} { return p.Val }
func (p *ScreenLockDelayBattery) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ScreenLockDelayBattery) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 179. IdleDelayBattery
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type IdleDelayBattery struct {
	Stat Status
	Val  int
}

func (p *IdleDelayBattery) Name() string          { return "IdleDelayBattery" }
func (p *IdleDelayBattery) Field() string         { return "" }
func (p *IdleDelayBattery) Scope() Scope          { return ScopeUser }
func (p *IdleDelayBattery) Status() Status        { return p.Stat }
func (p *IdleDelayBattery) UntypedV() interface{} { return p.Val }
func (p *IdleDelayBattery) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *IdleDelayBattery) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 180. IdleAction
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type IdleAction struct {
	Stat Status
	Val  int
}

func (p *IdleAction) Name() string          { return "IdleAction" }
func (p *IdleAction) Field() string         { return "" }
func (p *IdleAction) Scope() Scope          { return ScopeUser }
func (p *IdleAction) Status() Status        { return p.Stat }
func (p *IdleAction) UntypedV() interface{} { return p.Val }
func (p *IdleAction) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *IdleAction) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 181. LidCloseAction
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type LidCloseAction struct {
	Stat Status
	Val  int
}

func (p *LidCloseAction) Name() string          { return "LidCloseAction" }
func (p *LidCloseAction) Field() string         { return "" }
func (p *LidCloseAction) Scope() Scope          { return ScopeUser }
func (p *LidCloseAction) Status() Status        { return p.Stat }
func (p *LidCloseAction) UntypedV() interface{} { return p.Val }
func (p *LidCloseAction) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *LidCloseAction) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 182. PowerManagementUsesAudioActivity
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PowerManagementUsesAudioActivity struct {
	Stat Status
	Val  bool
}

func (p *PowerManagementUsesAudioActivity) Name() string          { return "PowerManagementUsesAudioActivity" }
func (p *PowerManagementUsesAudioActivity) Field() string         { return "" }
func (p *PowerManagementUsesAudioActivity) Scope() Scope          { return ScopeUser }
func (p *PowerManagementUsesAudioActivity) Status() Status        { return p.Stat }
func (p *PowerManagementUsesAudioActivity) UntypedV() interface{} { return p.Val }
func (p *PowerManagementUsesAudioActivity) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PowerManagementUsesAudioActivity) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 183. PowerManagementUsesVideoActivity
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PowerManagementUsesVideoActivity struct {
	Stat Status
	Val  bool
}

func (p *PowerManagementUsesVideoActivity) Name() string          { return "PowerManagementUsesVideoActivity" }
func (p *PowerManagementUsesVideoActivity) Field() string         { return "" }
func (p *PowerManagementUsesVideoActivity) Scope() Scope          { return ScopeUser }
func (p *PowerManagementUsesVideoActivity) Status() Status        { return p.Stat }
func (p *PowerManagementUsesVideoActivity) UntypedV() interface{} { return p.Val }
func (p *PowerManagementUsesVideoActivity) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PowerManagementUsesVideoActivity) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 185. DeviceAllowRedeemChromeOsRegistrationOffers
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceAllowRedeemChromeOsRegistrationOffers struct {
	Stat Status
	Val  bool
}

func (p *DeviceAllowRedeemChromeOsRegistrationOffers) Name() string {
	return "DeviceAllowRedeemChromeOsRegistrationOffers"
}
func (p *DeviceAllowRedeemChromeOsRegistrationOffers) Field() string {
	return "allow_redeem_offers.allow_redeem_offers"
}
func (p *DeviceAllowRedeemChromeOsRegistrationOffers) Scope() Scope          { return ScopeDevice }
func (p *DeviceAllowRedeemChromeOsRegistrationOffers) Status() Status        { return p.Stat }
func (p *DeviceAllowRedeemChromeOsRegistrationOffers) UntypedV() interface{} { return p.Val }
func (p *DeviceAllowRedeemChromeOsRegistrationOffers) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceAllowRedeemChromeOsRegistrationOffers) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 186. TermsOfServiceURL
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type TermsOfServiceURL struct {
	Stat Status
	Val  string
}

func (p *TermsOfServiceURL) Name() string          { return "TermsOfServiceURL" }
func (p *TermsOfServiceURL) Field() string         { return "" }
func (p *TermsOfServiceURL) Scope() Scope          { return ScopeUser }
func (p *TermsOfServiceURL) Status() Status        { return p.Stat }
func (p *TermsOfServiceURL) UntypedV() interface{} { return p.Val }
func (p *TermsOfServiceURL) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *TermsOfServiceURL) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 187. AllowDeletingBrowserHistory
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AllowDeletingBrowserHistory struct {
	Stat Status
	Val  bool
}

func (p *AllowDeletingBrowserHistory) Name() string          { return "AllowDeletingBrowserHistory" }
func (p *AllowDeletingBrowserHistory) Field() string         { return "" }
func (p *AllowDeletingBrowserHistory) Scope() Scope          { return ScopeUser }
func (p *AllowDeletingBrowserHistory) Status() Status        { return p.Stat }
func (p *AllowDeletingBrowserHistory) UntypedV() interface{} { return p.Val }
func (p *AllowDeletingBrowserHistory) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AllowDeletingBrowserHistory) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 188. ShowAccessibilityOptionsInSystemTrayMenu
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ShowAccessibilityOptionsInSystemTrayMenu struct {
	Stat Status
	Val  bool
}

func (p *ShowAccessibilityOptionsInSystemTrayMenu) Name() string {
	return "ShowAccessibilityOptionsInSystemTrayMenu"
}
func (p *ShowAccessibilityOptionsInSystemTrayMenu) Field() string         { return "" }
func (p *ShowAccessibilityOptionsInSystemTrayMenu) Scope() Scope          { return ScopeUser }
func (p *ShowAccessibilityOptionsInSystemTrayMenu) Status() Status        { return p.Stat }
func (p *ShowAccessibilityOptionsInSystemTrayMenu) UntypedV() interface{} { return p.Val }
func (p *ShowAccessibilityOptionsInSystemTrayMenu) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ShowAccessibilityOptionsInSystemTrayMenu) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 189. HideWebStoreIcon
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type HideWebStoreIcon struct {
	Stat Status
	Val  bool
}

func (p *HideWebStoreIcon) Name() string          { return "HideWebStoreIcon" }
func (p *HideWebStoreIcon) Field() string         { return "" }
func (p *HideWebStoreIcon) Scope() Scope          { return ScopeUser }
func (p *HideWebStoreIcon) Status() Status        { return p.Stat }
func (p *HideWebStoreIcon) UntypedV() interface{} { return p.Val }
func (p *HideWebStoreIcon) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *HideWebStoreIcon) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 192. UptimeLimit
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type UptimeLimit struct {
	Stat Status
	Val  int
}

func (p *UptimeLimit) Name() string          { return "UptimeLimit" }
func (p *UptimeLimit) Field() string         { return "uptime_limit.uptime_limit" }
func (p *UptimeLimit) Scope() Scope          { return ScopeDevice }
func (p *UptimeLimit) Status() Status        { return p.Stat }
func (p *UptimeLimit) UntypedV() interface{} { return p.Val }
func (p *UptimeLimit) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *UptimeLimit) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 193. RebootAfterUpdate
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RebootAfterUpdate struct {
	Stat Status
	Val  bool
}

func (p *RebootAfterUpdate) Name() string          { return "RebootAfterUpdate" }
func (p *RebootAfterUpdate) Field() string         { return "auto_update_settings.reboot_after_update" }
func (p *RebootAfterUpdate) Scope() Scope          { return ScopeDevice }
func (p *RebootAfterUpdate) Status() Status        { return p.Stat }
func (p *RebootAfterUpdate) UntypedV() interface{} { return p.Val }
func (p *RebootAfterUpdate) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *RebootAfterUpdate) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 194. DeviceLocalAccountAutoLoginId
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLocalAccountAutoLoginId struct {
	Stat Status
	Val  string
}

func (p *DeviceLocalAccountAutoLoginId) Name() string          { return "DeviceLocalAccountAutoLoginId" }
func (p *DeviceLocalAccountAutoLoginId) Field() string         { return "device_local_accounts.auto_login_id" }
func (p *DeviceLocalAccountAutoLoginId) Scope() Scope          { return ScopeDevice }
func (p *DeviceLocalAccountAutoLoginId) Status() Status        { return p.Stat }
func (p *DeviceLocalAccountAutoLoginId) UntypedV() interface{} { return p.Val }
func (p *DeviceLocalAccountAutoLoginId) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DeviceLocalAccountAutoLoginId) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 195. DeviceLocalAccountAutoLoginDelay
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLocalAccountAutoLoginDelay struct {
	Stat Status
	Val  int
}

func (p *DeviceLocalAccountAutoLoginDelay) Name() string { return "DeviceLocalAccountAutoLoginDelay" }
func (p *DeviceLocalAccountAutoLoginDelay) Field() string {
	return "device_local_accounts.auto_login_delay"
}
func (p *DeviceLocalAccountAutoLoginDelay) Scope() Scope          { return ScopeDevice }
func (p *DeviceLocalAccountAutoLoginDelay) Status() Status        { return p.Stat }
func (p *DeviceLocalAccountAutoLoginDelay) UntypedV() interface{} { return p.Val }
func (p *DeviceLocalAccountAutoLoginDelay) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceLocalAccountAutoLoginDelay) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 197. IdleWarningDelayAC
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type IdleWarningDelayAC struct {
	Stat Status
	Val  int
}

func (p *IdleWarningDelayAC) Name() string          { return "IdleWarningDelayAC" }
func (p *IdleWarningDelayAC) Field() string         { return "" }
func (p *IdleWarningDelayAC) Scope() Scope          { return ScopeUser }
func (p *IdleWarningDelayAC) Status() Status        { return p.Stat }
func (p *IdleWarningDelayAC) UntypedV() interface{} { return p.Val }
func (p *IdleWarningDelayAC) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *IdleWarningDelayAC) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 198. IdleWarningDelayBattery
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type IdleWarningDelayBattery struct {
	Stat Status
	Val  int
}

func (p *IdleWarningDelayBattery) Name() string          { return "IdleWarningDelayBattery" }
func (p *IdleWarningDelayBattery) Field() string         { return "" }
func (p *IdleWarningDelayBattery) Scope() Scope          { return ScopeUser }
func (p *IdleWarningDelayBattery) Status() Status        { return p.Stat }
func (p *IdleWarningDelayBattery) UntypedV() interface{} { return p.Val }
func (p *IdleWarningDelayBattery) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *IdleWarningDelayBattery) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 199. DeviceVariationsRestrictParameter
///////////////////////////////////////////////////////////////////////////////
type DeviceVariationsRestrictParameter struct {
	Stat Status
	Val  string
}

func (p *DeviceVariationsRestrictParameter) Name() string          { return "DeviceVariationsRestrictParameter" }
func (p *DeviceVariationsRestrictParameter) Field() string         { return "variations_parameter.parameter" }
func (p *DeviceVariationsRestrictParameter) Scope() Scope          { return ScopeDevice }
func (p *DeviceVariationsRestrictParameter) Status() Status        { return p.Stat }
func (p *DeviceVariationsRestrictParameter) UntypedV() interface{} { return p.Val }
func (p *DeviceVariationsRestrictParameter) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DeviceVariationsRestrictParameter) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 200. AttestationEnabledForUser
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AttestationEnabledForUser struct {
	Stat Status
	Val  bool
}

func (p *AttestationEnabledForUser) Name() string          { return "AttestationEnabledForUser" }
func (p *AttestationEnabledForUser) Field() string         { return "" }
func (p *AttestationEnabledForUser) Scope() Scope          { return ScopeUser }
func (p *AttestationEnabledForUser) Status() Status        { return p.Stat }
func (p *AttestationEnabledForUser) UntypedV() interface{} { return p.Val }
func (p *AttestationEnabledForUser) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AttestationEnabledForUser) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 201. AttestationExtensionWhitelist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AttestationExtensionWhitelist struct {
	Stat Status
	Val  []string
}

func (p *AttestationExtensionWhitelist) Name() string          { return "AttestationExtensionWhitelist" }
func (p *AttestationExtensionWhitelist) Field() string         { return "" }
func (p *AttestationExtensionWhitelist) Scope() Scope          { return ScopeUser }
func (p *AttestationExtensionWhitelist) Status() Status        { return p.Stat }
func (p *AttestationExtensionWhitelist) UntypedV() interface{} { return p.Val }
func (p *AttestationExtensionWhitelist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *AttestationExtensionWhitelist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 202. DeviceLocalAccountAutoLoginBailoutEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLocalAccountAutoLoginBailoutEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLocalAccountAutoLoginBailoutEnabled) Name() string {
	return "DeviceLocalAccountAutoLoginBailoutEnabled"
}
func (p *DeviceLocalAccountAutoLoginBailoutEnabled) Field() string {
	return "device_local_accounts.enable_auto_login_bailout"
}
func (p *DeviceLocalAccountAutoLoginBailoutEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLocalAccountAutoLoginBailoutEnabled) Status() Status        { return p.Stat }
func (p *DeviceLocalAccountAutoLoginBailoutEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLocalAccountAutoLoginBailoutEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLocalAccountAutoLoginBailoutEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 203. AllowScreenWakeLocks
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AllowScreenWakeLocks struct {
	Stat Status
	Val  bool
}

func (p *AllowScreenWakeLocks) Name() string          { return "AllowScreenWakeLocks" }
func (p *AllowScreenWakeLocks) Field() string         { return "" }
func (p *AllowScreenWakeLocks) Scope() Scope          { return ScopeUser }
func (p *AllowScreenWakeLocks) Status() Status        { return p.Stat }
func (p *AllowScreenWakeLocks) UntypedV() interface{} { return p.Val }
func (p *AllowScreenWakeLocks) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AllowScreenWakeLocks) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 204. ContentPackDefaultFilteringBehavior
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ContentPackDefaultFilteringBehavior struct {
	Stat Status
	Val  int
}

func (p *ContentPackDefaultFilteringBehavior) Name() string {
	return "ContentPackDefaultFilteringBehavior"
}
func (p *ContentPackDefaultFilteringBehavior) Field() string         { return "" }
func (p *ContentPackDefaultFilteringBehavior) Scope() Scope          { return ScopeUser }
func (p *ContentPackDefaultFilteringBehavior) Status() Status        { return p.Stat }
func (p *ContentPackDefaultFilteringBehavior) UntypedV() interface{} { return p.Val }
func (p *ContentPackDefaultFilteringBehavior) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ContentPackDefaultFilteringBehavior) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 205. ContentPackManualBehaviorHosts
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ContentPackManualBehaviorHosts struct {
	Stat Status
	Val  map[string]bool
}

func (p *ContentPackManualBehaviorHosts) Name() string          { return "ContentPackManualBehaviorHosts" }
func (p *ContentPackManualBehaviorHosts) Field() string         { return "" }
func (p *ContentPackManualBehaviorHosts) Scope() Scope          { return ScopeUser }
func (p *ContentPackManualBehaviorHosts) Status() Status        { return p.Stat }
func (p *ContentPackManualBehaviorHosts) UntypedV() interface{} { return p.Val }
func (p *ContentPackManualBehaviorHosts) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v map[string]bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as map[string]bool", m)
	}
	return v, nil
}
func (p *ContentPackManualBehaviorHosts) Equal(iface interface{}) bool {
	v, ok := iface.(map[string]bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 206. ContentPackManualBehaviorURLs
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ContentPackManualBehaviorURLs struct {
	Stat Status
	Val  map[string]bool
}

func (p *ContentPackManualBehaviorURLs) Name() string          { return "ContentPackManualBehaviorURLs" }
func (p *ContentPackManualBehaviorURLs) Field() string         { return "" }
func (p *ContentPackManualBehaviorURLs) Scope() Scope          { return ScopeUser }
func (p *ContentPackManualBehaviorURLs) Status() Status        { return p.Stat }
func (p *ContentPackManualBehaviorURLs) UntypedV() interface{} { return p.Val }
func (p *ContentPackManualBehaviorURLs) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v map[string]bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as map[string]bool", m)
	}
	return v, nil
}
func (p *ContentPackManualBehaviorURLs) Equal(iface interface{}) bool {
	v, ok := iface.(map[string]bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 207. AttestationEnabledForDevice
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AttestationEnabledForDevice struct {
	Stat Status
	Val  bool
}

func (p *AttestationEnabledForDevice) Name() string { return "AttestationEnabledForDevice" }
func (p *AttestationEnabledForDevice) Field() string {
	return "attestation_settings.attestation_enabled"
}
func (p *AttestationEnabledForDevice) Scope() Scope          { return ScopeDevice }
func (p *AttestationEnabledForDevice) Status() Status        { return p.Stat }
func (p *AttestationEnabledForDevice) UntypedV() interface{} { return p.Val }
func (p *AttestationEnabledForDevice) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AttestationEnabledForDevice) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 208. AudioCaptureAllowedUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AudioCaptureAllowedUrls struct {
	Stat Status
	Val  []string
}

func (p *AudioCaptureAllowedUrls) Name() string          { return "AudioCaptureAllowedUrls" }
func (p *AudioCaptureAllowedUrls) Field() string         { return "" }
func (p *AudioCaptureAllowedUrls) Scope() Scope          { return ScopeUser }
func (p *AudioCaptureAllowedUrls) Status() Status        { return p.Stat }
func (p *AudioCaptureAllowedUrls) UntypedV() interface{} { return p.Val }
func (p *AudioCaptureAllowedUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *AudioCaptureAllowedUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 209. VideoCaptureAllowedUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type VideoCaptureAllowedUrls struct {
	Stat Status
	Val  []string
}

func (p *VideoCaptureAllowedUrls) Name() string          { return "VideoCaptureAllowedUrls" }
func (p *VideoCaptureAllowedUrls) Field() string         { return "" }
func (p *VideoCaptureAllowedUrls) Scope() Scope          { return ScopeUser }
func (p *VideoCaptureAllowedUrls) Status() Status        { return p.Stat }
func (p *VideoCaptureAllowedUrls) UntypedV() interface{} { return p.Val }
func (p *VideoCaptureAllowedUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *VideoCaptureAllowedUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 210. UserActivityScreenDimDelayScale
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type UserActivityScreenDimDelayScale struct {
	Stat Status
	Val  int
}

func (p *UserActivityScreenDimDelayScale) Name() string          { return "UserActivityScreenDimDelayScale" }
func (p *UserActivityScreenDimDelayScale) Field() string         { return "" }
func (p *UserActivityScreenDimDelayScale) Scope() Scope          { return ScopeUser }
func (p *UserActivityScreenDimDelayScale) Status() Status        { return p.Stat }
func (p *UserActivityScreenDimDelayScale) UntypedV() interface{} { return p.Val }
func (p *UserActivityScreenDimDelayScale) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *UserActivityScreenDimDelayScale) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 211. LargeCursorEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type LargeCursorEnabled struct {
	Stat Status
	Val  bool
}

func (p *LargeCursorEnabled) Name() string          { return "LargeCursorEnabled" }
func (p *LargeCursorEnabled) Field() string         { return "" }
func (p *LargeCursorEnabled) Scope() Scope          { return ScopeUser }
func (p *LargeCursorEnabled) Status() Status        { return p.Stat }
func (p *LargeCursorEnabled) UntypedV() interface{} { return p.Val }
func (p *LargeCursorEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *LargeCursorEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 212. SpokenFeedbackEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SpokenFeedbackEnabled struct {
	Stat Status
	Val  bool
}

func (p *SpokenFeedbackEnabled) Name() string          { return "SpokenFeedbackEnabled" }
func (p *SpokenFeedbackEnabled) Field() string         { return "" }
func (p *SpokenFeedbackEnabled) Scope() Scope          { return ScopeUser }
func (p *SpokenFeedbackEnabled) Status() Status        { return p.Stat }
func (p *SpokenFeedbackEnabled) UntypedV() interface{} { return p.Val }
func (p *SpokenFeedbackEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SpokenFeedbackEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 213. HighContrastEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type HighContrastEnabled struct {
	Stat Status
	Val  bool
}

func (p *HighContrastEnabled) Name() string          { return "HighContrastEnabled" }
func (p *HighContrastEnabled) Field() string         { return "" }
func (p *HighContrastEnabled) Scope() Scope          { return ScopeUser }
func (p *HighContrastEnabled) Status() Status        { return p.Stat }
func (p *HighContrastEnabled) UntypedV() interface{} { return p.Val }
func (p *HighContrastEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *HighContrastEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 214. ScreenMagnifierType
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ScreenMagnifierType struct {
	Stat Status
	Val  int
}

func (p *ScreenMagnifierType) Name() string          { return "ScreenMagnifierType" }
func (p *ScreenMagnifierType) Field() string         { return "" }
func (p *ScreenMagnifierType) Scope() Scope          { return ScopeUser }
func (p *ScreenMagnifierType) Status() Status        { return p.Stat }
func (p *ScreenMagnifierType) UntypedV() interface{} { return p.Val }
func (p *ScreenMagnifierType) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ScreenMagnifierType) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 215. DeviceLoginScreenDefaultLargeCursorEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenDefaultLargeCursorEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenDefaultLargeCursorEnabled) Name() string {
	return "DeviceLoginScreenDefaultLargeCursorEnabled"
}
func (p *DeviceLoginScreenDefaultLargeCursorEnabled) Field() string {
	return "accessibility_settings.login_screen_default_large_cursor_enabled"
}
func (p *DeviceLoginScreenDefaultLargeCursorEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenDefaultLargeCursorEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenDefaultLargeCursorEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenDefaultLargeCursorEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenDefaultLargeCursorEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 216. DeviceLoginScreenDefaultSpokenFeedbackEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenDefaultSpokenFeedbackEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenDefaultSpokenFeedbackEnabled) Name() string {
	return "DeviceLoginScreenDefaultSpokenFeedbackEnabled"
}
func (p *DeviceLoginScreenDefaultSpokenFeedbackEnabled) Field() string {
	return "accessibility_settings.login_screen_default_spoken_feedback_enabled"
}
func (p *DeviceLoginScreenDefaultSpokenFeedbackEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenDefaultSpokenFeedbackEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenDefaultSpokenFeedbackEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenDefaultSpokenFeedbackEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenDefaultSpokenFeedbackEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 217. DeviceLoginScreenDefaultHighContrastEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenDefaultHighContrastEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenDefaultHighContrastEnabled) Name() string {
	return "DeviceLoginScreenDefaultHighContrastEnabled"
}
func (p *DeviceLoginScreenDefaultHighContrastEnabled) Field() string {
	return "accessibility_settings.login_screen_default_high_contrast_enabled"
}
func (p *DeviceLoginScreenDefaultHighContrastEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenDefaultHighContrastEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenDefaultHighContrastEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenDefaultHighContrastEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenDefaultHighContrastEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 218. DeviceLoginScreenDefaultScreenMagnifierType
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenDefaultScreenMagnifierType struct {
	Stat Status
	Val  int
}

func (p *DeviceLoginScreenDefaultScreenMagnifierType) Name() string {
	return "DeviceLoginScreenDefaultScreenMagnifierType"
}
func (p *DeviceLoginScreenDefaultScreenMagnifierType) Field() string {
	return "accessibility_settings.login_screen_default_screen_magnifier_type"
}
func (p *DeviceLoginScreenDefaultScreenMagnifierType) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenDefaultScreenMagnifierType) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenDefaultScreenMagnifierType) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenDefaultScreenMagnifierType) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenDefaultScreenMagnifierType) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 220. PresentationScreenDimDelayScale
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PresentationScreenDimDelayScale struct {
	Stat Status
	Val  int
}

func (p *PresentationScreenDimDelayScale) Name() string          { return "PresentationScreenDimDelayScale" }
func (p *PresentationScreenDimDelayScale) Field() string         { return "" }
func (p *PresentationScreenDimDelayScale) Scope() Scope          { return ScopeUser }
func (p *PresentationScreenDimDelayScale) Status() Status        { return p.Stat }
func (p *PresentationScreenDimDelayScale) UntypedV() interface{} { return p.Val }
func (p *PresentationScreenDimDelayScale) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *PresentationScreenDimDelayScale) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 222. IdleActionBattery
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type IdleActionBattery struct {
	Stat Status
	Val  int
}

func (p *IdleActionBattery) Name() string          { return "IdleActionBattery" }
func (p *IdleActionBattery) Field() string         { return "" }
func (p *IdleActionBattery) Scope() Scope          { return ScopeUser }
func (p *IdleActionBattery) Status() Status        { return p.Stat }
func (p *IdleActionBattery) UntypedV() interface{} { return p.Val }
func (p *IdleActionBattery) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *IdleActionBattery) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 224. ReportDeviceNetworkInterfaces
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceNetworkInterfaces struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceNetworkInterfaces) Name() string { return "ReportDeviceNetworkInterfaces" }
func (p *ReportDeviceNetworkInterfaces) Field() string {
	return "device_reporting.report_network_interfaces"
}
func (p *ReportDeviceNetworkInterfaces) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceNetworkInterfaces) Status() Status        { return p.Stat }
func (p *ReportDeviceNetworkInterfaces) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceNetworkInterfaces) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceNetworkInterfaces) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 225. DeviceLoginScreenPowerManagement
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenPowerManagement struct {
	Stat Status
	Val  *DeviceLoginScreenPowerManagementValue
}

type DeviceLoginScreenPowerManagementValue struct {
	AC                              *RefDeviceLoginScreenPowerSettings `json:"AC"`
	Battery                         *RefDeviceLoginScreenPowerSettings `json:"Battery"`
	LidCloseAction                  string                             `json:"LidCloseAction"`
	UserActivityScreenDimDelayScale int                                `json:"UserActivityScreenDimDelayScale"`
}

func (p *DeviceLoginScreenPowerManagement) Name() string { return "DeviceLoginScreenPowerManagement" }
func (p *DeviceLoginScreenPowerManagement) Field() string {
	return "login_screen_power_management.login_screen_power_management"
}
func (p *DeviceLoginScreenPowerManagement) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenPowerManagement) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenPowerManagement) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenPowerManagement) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *DeviceLoginScreenPowerManagementValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *DeviceLoginScreenPowerManagementValue", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenPowerManagement) Equal(iface interface{}) bool {
	v, ok := iface.(*DeviceLoginScreenPowerManagementValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 226. IdleActionAC
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type IdleActionAC struct {
	Stat Status
	Val  int
}

func (p *IdleActionAC) Name() string          { return "IdleActionAC" }
func (p *IdleActionAC) Field() string         { return "" }
func (p *IdleActionAC) Scope() Scope          { return ScopeUser }
func (p *IdleActionAC) Status() Status        { return p.Stat }
func (p *IdleActionAC) UntypedV() interface{} { return p.Val }
func (p *IdleActionAC) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *IdleActionAC) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 227. ManagedBookmarks
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ManagedBookmarks struct {
	Stat Status
	Val  []*RefBookmarkType
}

func (p *ManagedBookmarks) Name() string          { return "ManagedBookmarks" }
func (p *ManagedBookmarks) Field() string         { return "" }
func (p *ManagedBookmarks) Scope() Scope          { return ScopeUser }
func (p *ManagedBookmarks) Status() Status        { return p.Stat }
func (p *ManagedBookmarks) UntypedV() interface{} { return p.Val }
func (p *ManagedBookmarks) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*RefBookmarkType
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*RefBookmarkType", m)
	}
	return v, nil
}
func (p *ManagedBookmarks) Equal(iface interface{}) bool {
	v, ok := iface.([]*RefBookmarkType)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 228. MaxInvalidationFetchDelay
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type MaxInvalidationFetchDelay struct {
	Stat Status
	Val  int
}

func (p *MaxInvalidationFetchDelay) Name() string          { return "MaxInvalidationFetchDelay" }
func (p *MaxInvalidationFetchDelay) Field() string         { return "" }
func (p *MaxInvalidationFetchDelay) Scope() Scope          { return ScopeUser }
func (p *MaxInvalidationFetchDelay) Status() Status        { return p.Stat }
func (p *MaxInvalidationFetchDelay) UntypedV() interface{} { return p.Val }
func (p *MaxInvalidationFetchDelay) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *MaxInvalidationFetchDelay) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 229. DefaultSearchProviderImageURL
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultSearchProviderImageURL struct {
	Stat Status
	Val  string
}

func (p *DefaultSearchProviderImageURL) Name() string          { return "DefaultSearchProviderImageURL" }
func (p *DefaultSearchProviderImageURL) Field() string         { return "" }
func (p *DefaultSearchProviderImageURL) Scope() Scope          { return ScopeUser }
func (p *DefaultSearchProviderImageURL) Status() Status        { return p.Stat }
func (p *DefaultSearchProviderImageURL) UntypedV() interface{} { return p.Val }
func (p *DefaultSearchProviderImageURL) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DefaultSearchProviderImageURL) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 230. DefaultSearchProviderSearchURLPostParams
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultSearchProviderSearchURLPostParams struct {
	Stat Status
	Val  string
}

func (p *DefaultSearchProviderSearchURLPostParams) Name() string {
	return "DefaultSearchProviderSearchURLPostParams"
}
func (p *DefaultSearchProviderSearchURLPostParams) Field() string         { return "" }
func (p *DefaultSearchProviderSearchURLPostParams) Scope() Scope          { return ScopeUser }
func (p *DefaultSearchProviderSearchURLPostParams) Status() Status        { return p.Stat }
func (p *DefaultSearchProviderSearchURLPostParams) UntypedV() interface{} { return p.Val }
func (p *DefaultSearchProviderSearchURLPostParams) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DefaultSearchProviderSearchURLPostParams) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 231. DefaultSearchProviderSuggestURLPostParams
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultSearchProviderSuggestURLPostParams struct {
	Stat Status
	Val  string
}

func (p *DefaultSearchProviderSuggestURLPostParams) Name() string {
	return "DefaultSearchProviderSuggestURLPostParams"
}
func (p *DefaultSearchProviderSuggestURLPostParams) Field() string         { return "" }
func (p *DefaultSearchProviderSuggestURLPostParams) Scope() Scope          { return ScopeUser }
func (p *DefaultSearchProviderSuggestURLPostParams) Status() Status        { return p.Stat }
func (p *DefaultSearchProviderSuggestURLPostParams) UntypedV() interface{} { return p.Val }
func (p *DefaultSearchProviderSuggestURLPostParams) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DefaultSearchProviderSuggestURLPostParams) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 233. DefaultSearchProviderImageURLPostParams
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultSearchProviderImageURLPostParams struct {
	Stat Status
	Val  string
}

func (p *DefaultSearchProviderImageURLPostParams) Name() string {
	return "DefaultSearchProviderImageURLPostParams"
}
func (p *DefaultSearchProviderImageURLPostParams) Field() string         { return "" }
func (p *DefaultSearchProviderImageURLPostParams) Scope() Scope          { return ScopeUser }
func (p *DefaultSearchProviderImageURLPostParams) Status() Status        { return p.Stat }
func (p *DefaultSearchProviderImageURLPostParams) UntypedV() interface{} { return p.Val }
func (p *DefaultSearchProviderImageURLPostParams) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DefaultSearchProviderImageURLPostParams) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 234. RemoteAccessHostAllowClientPairing
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RemoteAccessHostAllowClientPairing struct {
	Stat Status
	Val  bool
}

func (p *RemoteAccessHostAllowClientPairing) Name() string {
	return "RemoteAccessHostAllowClientPairing"
}
func (p *RemoteAccessHostAllowClientPairing) Field() string         { return "" }
func (p *RemoteAccessHostAllowClientPairing) Scope() Scope          { return ScopeUser }
func (p *RemoteAccessHostAllowClientPairing) Status() Status        { return p.Stat }
func (p *RemoteAccessHostAllowClientPairing) UntypedV() interface{} { return p.Val }
func (p *RemoteAccessHostAllowClientPairing) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *RemoteAccessHostAllowClientPairing) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 235. RequireOnlineRevocationChecksForLocalAnchors
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RequireOnlineRevocationChecksForLocalAnchors struct {
	Stat Status
	Val  bool
}

func (p *RequireOnlineRevocationChecksForLocalAnchors) Name() string {
	return "RequireOnlineRevocationChecksForLocalAnchors"
}
func (p *RequireOnlineRevocationChecksForLocalAnchors) Field() string         { return "" }
func (p *RequireOnlineRevocationChecksForLocalAnchors) Scope() Scope          { return ScopeUser }
func (p *RequireOnlineRevocationChecksForLocalAnchors) Status() Status        { return p.Stat }
func (p *RequireOnlineRevocationChecksForLocalAnchors) UntypedV() interface{} { return p.Val }
func (p *RequireOnlineRevocationChecksForLocalAnchors) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *RequireOnlineRevocationChecksForLocalAnchors) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 236. SystemUse24HourClock
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SystemUse24HourClock struct {
	Stat Status
	Val  bool
}

func (p *SystemUse24HourClock) Name() string          { return "SystemUse24HourClock" }
func (p *SystemUse24HourClock) Field() string         { return "use_24hour_clock.use_24hour_clock" }
func (p *SystemUse24HourClock) Scope() Scope          { return ScopeDevice }
func (p *SystemUse24HourClock) Status() Status        { return p.Stat }
func (p *SystemUse24HourClock) UntypedV() interface{} { return p.Val }
func (p *SystemUse24HourClock) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SystemUse24HourClock) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 237. DefaultSearchProviderNewTabURL
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultSearchProviderNewTabURL struct {
	Stat Status
	Val  string
}

func (p *DefaultSearchProviderNewTabURL) Name() string          { return "DefaultSearchProviderNewTabURL" }
func (p *DefaultSearchProviderNewTabURL) Field() string         { return "" }
func (p *DefaultSearchProviderNewTabURL) Scope() Scope          { return ScopeUser }
func (p *DefaultSearchProviderNewTabURL) Status() Status        { return p.Stat }
func (p *DefaultSearchProviderNewTabURL) UntypedV() interface{} { return p.Val }
func (p *DefaultSearchProviderNewTabURL) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DefaultSearchProviderNewTabURL) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 239. AttestationForContentProtectionEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AttestationForContentProtectionEnabled struct {
	Stat Status
	Val  bool
}

func (p *AttestationForContentProtectionEnabled) Name() string {
	return "AttestationForContentProtectionEnabled"
}
func (p *AttestationForContentProtectionEnabled) Field() string {
	return "attestation_settings.content_protection_enabled"
}
func (p *AttestationForContentProtectionEnabled) Scope() Scope          { return ScopeDevice }
func (p *AttestationForContentProtectionEnabled) Status() Status        { return p.Stat }
func (p *AttestationForContentProtectionEnabled) UntypedV() interface{} { return p.Val }
func (p *AttestationForContentProtectionEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AttestationForContentProtectionEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 240. FullscreenAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type FullscreenAllowed struct {
	Stat Status
	Val  bool
}

func (p *FullscreenAllowed) Name() string          { return "FullscreenAllowed" }
func (p *FullscreenAllowed) Field() string         { return "" }
func (p *FullscreenAllowed) Scope() Scope          { return ScopeUser }
func (p *FullscreenAllowed) Status() Status        { return p.Stat }
func (p *FullscreenAllowed) UntypedV() interface{} { return p.Val }
func (p *FullscreenAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *FullscreenAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 242. DeviceAutoUpdateP2PEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceAutoUpdateP2PEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceAutoUpdateP2PEnabled) Name() string          { return "DeviceAutoUpdateP2PEnabled" }
func (p *DeviceAutoUpdateP2PEnabled) Field() string         { return "auto_update_settings.p2p_enabled" }
func (p *DeviceAutoUpdateP2PEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceAutoUpdateP2PEnabled) Status() Status        { return p.Stat }
func (p *DeviceAutoUpdateP2PEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceAutoUpdateP2PEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceAutoUpdateP2PEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 243. DeviceUpdateHttpDownloadsEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceUpdateHttpDownloadsEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceUpdateHttpDownloadsEnabled) Name() string { return "DeviceUpdateHttpDownloadsEnabled" }
func (p *DeviceUpdateHttpDownloadsEnabled) Field() string {
	return "auto_update_settings.http_downloads_enabled"
}
func (p *DeviceUpdateHttpDownloadsEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceUpdateHttpDownloadsEnabled) Status() Status        { return p.Stat }
func (p *DeviceUpdateHttpDownloadsEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceUpdateHttpDownloadsEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceUpdateHttpDownloadsEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 244. ChromeOsMultiProfileUserBehavior
// This policy has a default value of primary-only.
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ChromeOsMultiProfileUserBehavior struct {
	Stat Status
	Val  string
}

func (p *ChromeOsMultiProfileUserBehavior) Name() string          { return "ChromeOsMultiProfileUserBehavior" }
func (p *ChromeOsMultiProfileUserBehavior) Field() string         { return "" }
func (p *ChromeOsMultiProfileUserBehavior) Scope() Scope          { return ScopeUser }
func (p *ChromeOsMultiProfileUserBehavior) Status() Status        { return p.Stat }
func (p *ChromeOsMultiProfileUserBehavior) UntypedV() interface{} { return p.Val }
func (p *ChromeOsMultiProfileUserBehavior) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *ChromeOsMultiProfileUserBehavior) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 247. WaitForInitialUserActivity
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type WaitForInitialUserActivity struct {
	Stat Status
	Val  bool
}

func (p *WaitForInitialUserActivity) Name() string          { return "WaitForInitialUserActivity" }
func (p *WaitForInitialUserActivity) Field() string         { return "" }
func (p *WaitForInitialUserActivity) Scope() Scope          { return ScopeUser }
func (p *WaitForInitialUserActivity) Status() Status        { return p.Stat }
func (p *WaitForInitialUserActivity) UntypedV() interface{} { return p.Val }
func (p *WaitForInitialUserActivity) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *WaitForInitialUserActivity) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 248. ReportDeviceUsers
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceUsers struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceUsers) Name() string          { return "ReportDeviceUsers" }
func (p *ReportDeviceUsers) Field() string         { return "device_reporting.report_users" }
func (p *ReportDeviceUsers) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceUsers) Status() Status        { return p.Stat }
func (p *ReportDeviceUsers) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceUsers) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceUsers) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 249. UserAvatarImage
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type UserAvatarImage struct {
	Stat Status
	Val  *UserAvatarImageValue
}

type UserAvatarImageValue struct {
	Hash string `json:"hash"`
	Url  string `json:"url"`
}

func (p *UserAvatarImage) Name() string          { return "UserAvatarImage" }
func (p *UserAvatarImage) Field() string         { return "" }
func (p *UserAvatarImage) Scope() Scope          { return ScopeUser }
func (p *UserAvatarImage) Status() Status        { return p.Stat }
func (p *UserAvatarImage) UntypedV() interface{} { return p.Val }
func (p *UserAvatarImage) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *UserAvatarImageValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *UserAvatarImageValue", m)
	}
	return v, nil
}
func (p *UserAvatarImage) Equal(iface interface{}) bool {
	v, ok := iface.(*UserAvatarImageValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 250. DeviceLocalAccountPromptForNetworkWhenOffline
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLocalAccountPromptForNetworkWhenOffline struct {
	Stat Status
	Val  bool
}

func (p *DeviceLocalAccountPromptForNetworkWhenOffline) Name() string {
	return "DeviceLocalAccountPromptForNetworkWhenOffline"
}
func (p *DeviceLocalAccountPromptForNetworkWhenOffline) Field() string {
	return "device_local_accounts.prompt_for_network_when_offline"
}
func (p *DeviceLocalAccountPromptForNetworkWhenOffline) Scope() Scope          { return ScopeDevice }
func (p *DeviceLocalAccountPromptForNetworkWhenOffline) Status() Status        { return p.Stat }
func (p *DeviceLocalAccountPromptForNetworkWhenOffline) UntypedV() interface{} { return p.Val }
func (p *DeviceLocalAccountPromptForNetworkWhenOffline) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLocalAccountPromptForNetworkWhenOffline) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 254. SAMLOfflineSigninTimeLimit
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SAMLOfflineSigninTimeLimit struct {
	Stat Status
	Val  int
}

func (p *SAMLOfflineSigninTimeLimit) Name() string          { return "SAMLOfflineSigninTimeLimit" }
func (p *SAMLOfflineSigninTimeLimit) Field() string         { return "" }
func (p *SAMLOfflineSigninTimeLimit) Scope() Scope          { return ScopeUser }
func (p *SAMLOfflineSigninTimeLimit) Status() Status        { return p.Stat }
func (p *SAMLOfflineSigninTimeLimit) UntypedV() interface{} { return p.Val }
func (p *SAMLOfflineSigninTimeLimit) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *SAMLOfflineSigninTimeLimit) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 255. VirtualKeyboardEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type VirtualKeyboardEnabled struct {
	Stat Status
	Val  bool
}

func (p *VirtualKeyboardEnabled) Name() string          { return "VirtualKeyboardEnabled" }
func (p *VirtualKeyboardEnabled) Field() string         { return "" }
func (p *VirtualKeyboardEnabled) Scope() Scope          { return ScopeUser }
func (p *VirtualKeyboardEnabled) Status() Status        { return p.Stat }
func (p *VirtualKeyboardEnabled) UntypedV() interface{} { return p.Val }
func (p *VirtualKeyboardEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *VirtualKeyboardEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 256. DeviceLoginScreenDefaultVirtualKeyboardEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenDefaultVirtualKeyboardEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenDefaultVirtualKeyboardEnabled) Name() string {
	return "DeviceLoginScreenDefaultVirtualKeyboardEnabled"
}
func (p *DeviceLoginScreenDefaultVirtualKeyboardEnabled) Field() string {
	return "accessibility_settings.login_screen_default_virtual_keyboard_enabled"
}
func (p *DeviceLoginScreenDefaultVirtualKeyboardEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenDefaultVirtualKeyboardEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenDefaultVirtualKeyboardEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenDefaultVirtualKeyboardEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenDefaultVirtualKeyboardEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 257. RemoteAccessHostAllowGnubbyAuth
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RemoteAccessHostAllowGnubbyAuth struct {
	Stat Status
	Val  bool
}

func (p *RemoteAccessHostAllowGnubbyAuth) Name() string          { return "RemoteAccessHostAllowGnubbyAuth" }
func (p *RemoteAccessHostAllowGnubbyAuth) Field() string         { return "" }
func (p *RemoteAccessHostAllowGnubbyAuth) Scope() Scope          { return ScopeUser }
func (p *RemoteAccessHostAllowGnubbyAuth) Status() Status        { return p.Stat }
func (p *RemoteAccessHostAllowGnubbyAuth) UntypedV() interface{} { return p.Val }
func (p *RemoteAccessHostAllowGnubbyAuth) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *RemoteAccessHostAllowGnubbyAuth) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 258. PowerManagementIdleSettings
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PowerManagementIdleSettings struct {
	Stat Status
	Val  *PowerManagementIdleSettingsValue
}

type PowerManagementIdleSettingsValue struct {
	AC      *RefPowerManagementDelays `json:"AC"`
	Battery *RefPowerManagementDelays `json:"Battery"`
}

func (p *PowerManagementIdleSettings) Name() string          { return "PowerManagementIdleSettings" }
func (p *PowerManagementIdleSettings) Field() string         { return "" }
func (p *PowerManagementIdleSettings) Scope() Scope          { return ScopeUser }
func (p *PowerManagementIdleSettings) Status() Status        { return p.Stat }
func (p *PowerManagementIdleSettings) UntypedV() interface{} { return p.Val }
func (p *PowerManagementIdleSettings) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *PowerManagementIdleSettingsValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *PowerManagementIdleSettingsValue", m)
	}
	return v, nil
}
func (p *PowerManagementIdleSettings) Equal(iface interface{}) bool {
	v, ok := iface.(*PowerManagementIdleSettingsValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 259. ScreenLockDelays
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ScreenLockDelays struct {
	Stat Status
	Val  *ScreenLockDelaysValue
}

type ScreenLockDelaysValue struct {
	AC      int `json:"AC"`
	Battery int `json:"Battery"`
}

func (p *ScreenLockDelays) Name() string          { return "ScreenLockDelays" }
func (p *ScreenLockDelays) Field() string         { return "" }
func (p *ScreenLockDelays) Scope() Scope          { return ScopeUser }
func (p *ScreenLockDelays) Status() Status        { return p.Stat }
func (p *ScreenLockDelays) UntypedV() interface{} { return p.Val }
func (p *ScreenLockDelays) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *ScreenLockDelaysValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *ScreenLockDelaysValue", m)
	}
	return v, nil
}
func (p *ScreenLockDelays) Equal(iface interface{}) bool {
	v, ok := iface.(*ScreenLockDelaysValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 260. KeyboardDefaultToFunctionKeys
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type KeyboardDefaultToFunctionKeys struct {
	Stat Status
	Val  bool
}

func (p *KeyboardDefaultToFunctionKeys) Name() string          { return "KeyboardDefaultToFunctionKeys" }
func (p *KeyboardDefaultToFunctionKeys) Field() string         { return "" }
func (p *KeyboardDefaultToFunctionKeys) Scope() Scope          { return ScopeUser }
func (p *KeyboardDefaultToFunctionKeys) Status() Status        { return p.Stat }
func (p *KeyboardDefaultToFunctionKeys) UntypedV() interface{} { return p.Val }
func (p *KeyboardDefaultToFunctionKeys) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *KeyboardDefaultToFunctionKeys) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 261. WPADQuickCheckEnabled
///////////////////////////////////////////////////////////////////////////////
type WPADQuickCheckEnabled struct {
	Stat Status
	Val  bool
}

func (p *WPADQuickCheckEnabled) Name() string          { return "WPADQuickCheckEnabled" }
func (p *WPADQuickCheckEnabled) Field() string         { return "" }
func (p *WPADQuickCheckEnabled) Scope() Scope          { return ScopeUser }
func (p *WPADQuickCheckEnabled) Status() Status        { return p.Stat }
func (p *WPADQuickCheckEnabled) UntypedV() interface{} { return p.Val }
func (p *WPADQuickCheckEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *WPADQuickCheckEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 262. WallpaperImage
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type WallpaperImage struct {
	Stat Status
	Val  *WallpaperImageValue
}

type WallpaperImageValue struct {
	Hash string `json:"hash"`
	Url  string `json:"url"`
}

func (p *WallpaperImage) Name() string          { return "WallpaperImage" }
func (p *WallpaperImage) Field() string         { return "" }
func (p *WallpaperImage) Scope() Scope          { return ScopeUser }
func (p *WallpaperImage) Status() Status        { return p.Stat }
func (p *WallpaperImage) UntypedV() interface{} { return p.Val }
func (p *WallpaperImage) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *WallpaperImageValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *WallpaperImageValue", m)
	}
	return v, nil
}
func (p *WallpaperImage) Equal(iface interface{}) bool {
	v, ok := iface.(*WallpaperImageValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 263. RemoteAccessHostAllowRelayedConnection
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RemoteAccessHostAllowRelayedConnection struct {
	Stat Status
	Val  bool
}

func (p *RemoteAccessHostAllowRelayedConnection) Name() string {
	return "RemoteAccessHostAllowRelayedConnection"
}
func (p *RemoteAccessHostAllowRelayedConnection) Field() string         { return "" }
func (p *RemoteAccessHostAllowRelayedConnection) Scope() Scope          { return ScopeUser }
func (p *RemoteAccessHostAllowRelayedConnection) Status() Status        { return p.Stat }
func (p *RemoteAccessHostAllowRelayedConnection) UntypedV() interface{} { return p.Val }
func (p *RemoteAccessHostAllowRelayedConnection) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *RemoteAccessHostAllowRelayedConnection) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 264. RemoteAccessHostUdpPortRange
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RemoteAccessHostUdpPortRange struct {
	Stat Status
	Val  string
}

func (p *RemoteAccessHostUdpPortRange) Name() string          { return "RemoteAccessHostUdpPortRange" }
func (p *RemoteAccessHostUdpPortRange) Field() string         { return "" }
func (p *RemoteAccessHostUdpPortRange) Scope() Scope          { return ScopeUser }
func (p *RemoteAccessHostUdpPortRange) Status() Status        { return p.Stat }
func (p *RemoteAccessHostUdpPortRange) UntypedV() interface{} { return p.Val }
func (p *RemoteAccessHostUdpPortRange) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *RemoteAccessHostUdpPortRange) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 266. DeviceBlockDevmode
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceBlockDevmode struct {
	Stat Status
	Val  bool
}

func (p *DeviceBlockDevmode) Name() string          { return "DeviceBlockDevmode" }
func (p *DeviceBlockDevmode) Field() string         { return "system_settings.block_devmode" }
func (p *DeviceBlockDevmode) Scope() Scope          { return ScopeDevice }
func (p *DeviceBlockDevmode) Status() Status        { return p.Stat }
func (p *DeviceBlockDevmode) UntypedV() interface{} { return p.Val }
func (p *DeviceBlockDevmode) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceBlockDevmode) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 268. RegisteredProtocolHandlers
///////////////////////////////////////////////////////////////////////////////
type RegisteredProtocolHandlers struct {
	Stat Status
	Val  []*RegisteredProtocolHandlersValue
}

type RegisteredProtocolHandlersValue struct {
	Default  bool   `json:"default"`
	Protocol string `json:"protocol"`
	Url      string `json:"url"`
}

func (p *RegisteredProtocolHandlers) Name() string          { return "RegisteredProtocolHandlers" }
func (p *RegisteredProtocolHandlers) Field() string         { return "" }
func (p *RegisteredProtocolHandlers) Scope() Scope          { return ScopeUser }
func (p *RegisteredProtocolHandlers) Status() Status        { return p.Stat }
func (p *RegisteredProtocolHandlers) UntypedV() interface{} { return p.Val }
func (p *RegisteredProtocolHandlers) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*RegisteredProtocolHandlersValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*RegisteredProtocolHandlersValue", m)
	}
	return v, nil
}
func (p *RegisteredProtocolHandlers) Equal(iface interface{}) bool {
	v, ok := iface.([]*RegisteredProtocolHandlersValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 269. TouchVirtualKeyboardEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type TouchVirtualKeyboardEnabled struct {
	Stat Status
	Val  bool
}

func (p *TouchVirtualKeyboardEnabled) Name() string          { return "TouchVirtualKeyboardEnabled" }
func (p *TouchVirtualKeyboardEnabled) Field() string         { return "" }
func (p *TouchVirtualKeyboardEnabled) Scope() Scope          { return ScopeUser }
func (p *TouchVirtualKeyboardEnabled) Status() Status        { return p.Stat }
func (p *TouchVirtualKeyboardEnabled) UntypedV() interface{} { return p.Val }
func (p *TouchVirtualKeyboardEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *TouchVirtualKeyboardEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 270. EnableDeprecatedWebPlatformFeatures
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type EnableDeprecatedWebPlatformFeatures struct {
	Stat Status
	Val  []string
}

func (p *EnableDeprecatedWebPlatformFeatures) Name() string {
	return "EnableDeprecatedWebPlatformFeatures"
}
func (p *EnableDeprecatedWebPlatformFeatures) Field() string         { return "" }
func (p *EnableDeprecatedWebPlatformFeatures) Scope() Scope          { return ScopeUser }
func (p *EnableDeprecatedWebPlatformFeatures) Status() Status        { return p.Stat }
func (p *EnableDeprecatedWebPlatformFeatures) UntypedV() interface{} { return p.Val }
func (p *EnableDeprecatedWebPlatformFeatures) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *EnableDeprecatedWebPlatformFeatures) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 271. DeviceTransferSAMLCookies
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceTransferSAMLCookies struct {
	Stat Status
	Val  bool
}

func (p *DeviceTransferSAMLCookies) Name() string          { return "DeviceTransferSAMLCookies" }
func (p *DeviceTransferSAMLCookies) Field() string         { return "saml_settings.transfer_saml_cookies" }
func (p *DeviceTransferSAMLCookies) Scope() Scope          { return ScopeDevice }
func (p *DeviceTransferSAMLCookies) Status() Status        { return p.Stat }
func (p *DeviceTransferSAMLCookies) UntypedV() interface{} { return p.Val }
func (p *DeviceTransferSAMLCookies) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceTransferSAMLCookies) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 272. EasyUnlockAllowed
// This policy has a default value of False.
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type EasyUnlockAllowed struct {
	Stat Status
	Val  bool
}

func (p *EasyUnlockAllowed) Name() string          { return "EasyUnlockAllowed" }
func (p *EasyUnlockAllowed) Field() string         { return "" }
func (p *EasyUnlockAllowed) Scope() Scope          { return ScopeUser }
func (p *EasyUnlockAllowed) Status() Status        { return p.Stat }
func (p *EasyUnlockAllowed) UntypedV() interface{} { return p.Val }
func (p *EasyUnlockAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *EasyUnlockAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 273. NetworkPredictionOptions
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type NetworkPredictionOptions struct {
	Stat Status
	Val  int
}

func (p *NetworkPredictionOptions) Name() string          { return "NetworkPredictionOptions" }
func (p *NetworkPredictionOptions) Field() string         { return "" }
func (p *NetworkPredictionOptions) Scope() Scope          { return ScopeUser }
func (p *NetworkPredictionOptions) Status() Status        { return p.Stat }
func (p *NetworkPredictionOptions) UntypedV() interface{} { return p.Val }
func (p *NetworkPredictionOptions) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *NetworkPredictionOptions) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 274. SessionLocales
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SessionLocales struct {
	Stat Status
	Val  []string
}

func (p *SessionLocales) Name() string          { return "SessionLocales" }
func (p *SessionLocales) Field() string         { return "" }
func (p *SessionLocales) Scope() Scope          { return ScopeUser }
func (p *SessionLocales) Status() Status        { return p.Stat }
func (p *SessionLocales) UntypedV() interface{} { return p.Val }
func (p *SessionLocales) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *SessionLocales) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 278. ExtensionSettings
// This policy can be modified without rebooting.
// See https://www.chromium.org/administrators/policy-list-3/extension-settings-full for full schema.
///////////////////////////////////////////////////////////////////////////////
type ExtensionSettings struct {
	Stat Status
	Val  map[string]*ExtensionSettingsValue
}

type ExtensionSettingsValue struct {
	AllowedTypes          []string `json:"allowed_types"`
	BlockedInstallMessage string   `json:"blocked_install_message"`
	BlockedPermissions    []string `json:"blocked_permissions"`
	InstallSources        []string `json:"install_sources"`
	InstallationMode      string   `json:"installation_mode"`
	RuntimeAllowedHosts   []string `json:"runtime_allowed_hosts"`
	RuntimeBlockedHosts   []string `json:"runtime_blocked_hosts"`
}

func (p *ExtensionSettings) Name() string          { return "ExtensionSettings" }
func (p *ExtensionSettings) Field() string         { return "" }
func (p *ExtensionSettings) Scope() Scope          { return ScopeUser }
func (p *ExtensionSettings) Status() Status        { return p.Stat }
func (p *ExtensionSettings) UntypedV() interface{} { return p.Val }
func (p *ExtensionSettings) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v map[string]*ExtensionSettingsValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as map[string]*ExtensionSettingsValue", m)
	}
	return v, nil
}
func (p *ExtensionSettings) Equal(iface interface{}) bool {
	v, ok := iface.(map[string]*ExtensionSettingsValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 279. SSLVersionMin
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SSLVersionMin struct {
	Stat Status
	Val  string
}

func (p *SSLVersionMin) Name() string          { return "SSLVersionMin" }
func (p *SSLVersionMin) Field() string         { return "" }
func (p *SSLVersionMin) Scope() Scope          { return ScopeUser }
func (p *SSLVersionMin) Status() Status        { return p.Stat }
func (p *SSLVersionMin) UntypedV() interface{} { return p.Val }
func (p *SSLVersionMin) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *SSLVersionMin) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 282. ForceGoogleSafeSearch
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ForceGoogleSafeSearch struct {
	Stat Status
	Val  bool
}

func (p *ForceGoogleSafeSearch) Name() string          { return "ForceGoogleSafeSearch" }
func (p *ForceGoogleSafeSearch) Field() string         { return "" }
func (p *ForceGoogleSafeSearch) Scope() Scope          { return ScopeUser }
func (p *ForceGoogleSafeSearch) Status() Status        { return p.Stat }
func (p *ForceGoogleSafeSearch) UntypedV() interface{} { return p.Val }
func (p *ForceGoogleSafeSearch) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ForceGoogleSafeSearch) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 283. ForceYouTubeSafetyMode
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ForceYouTubeSafetyMode struct {
	Stat Status
	Val  bool
}

func (p *ForceYouTubeSafetyMode) Name() string          { return "ForceYouTubeSafetyMode" }
func (p *ForceYouTubeSafetyMode) Field() string         { return "" }
func (p *ForceYouTubeSafetyMode) Scope() Scope          { return ScopeUser }
func (p *ForceYouTubeSafetyMode) Status() Status        { return p.Stat }
func (p *ForceYouTubeSafetyMode) UntypedV() interface{} { return p.Val }
func (p *ForceYouTubeSafetyMode) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ForceYouTubeSafetyMode) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 284. DeviceRebootOnShutdown
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceRebootOnShutdown struct {
	Stat Status
	Val  bool
}

func (p *DeviceRebootOnShutdown) Name() string          { return "DeviceRebootOnShutdown" }
func (p *DeviceRebootOnShutdown) Field() string         { return "reboot_on_shutdown.reboot_on_shutdown" }
func (p *DeviceRebootOnShutdown) Scope() Scope          { return ScopeDevice }
func (p *DeviceRebootOnShutdown) Status() Status        { return p.Stat }
func (p *DeviceRebootOnShutdown) UntypedV() interface{} { return p.Val }
func (p *DeviceRebootOnShutdown) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceRebootOnShutdown) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 285. RemoteAccessHostMatchUsername
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RemoteAccessHostMatchUsername struct {
	Stat Status
	Val  bool
}

func (p *RemoteAccessHostMatchUsername) Name() string          { return "RemoteAccessHostMatchUsername" }
func (p *RemoteAccessHostMatchUsername) Field() string         { return "" }
func (p *RemoteAccessHostMatchUsername) Scope() Scope          { return ScopeUser }
func (p *RemoteAccessHostMatchUsername) Status() Status        { return p.Stat }
func (p *RemoteAccessHostMatchUsername) UntypedV() interface{} { return p.Val }
func (p *RemoteAccessHostMatchUsername) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *RemoteAccessHostMatchUsername) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 286. RemoteAccessHostTokenUrl
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RemoteAccessHostTokenUrl struct {
	Stat Status
	Val  string
}

func (p *RemoteAccessHostTokenUrl) Name() string          { return "RemoteAccessHostTokenUrl" }
func (p *RemoteAccessHostTokenUrl) Field() string         { return "" }
func (p *RemoteAccessHostTokenUrl) Scope() Scope          { return ScopeUser }
func (p *RemoteAccessHostTokenUrl) Status() Status        { return p.Stat }
func (p *RemoteAccessHostTokenUrl) UntypedV() interface{} { return p.Val }
func (p *RemoteAccessHostTokenUrl) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *RemoteAccessHostTokenUrl) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 287. RemoteAccessHostTokenValidationUrl
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RemoteAccessHostTokenValidationUrl struct {
	Stat Status
	Val  string
}

func (p *RemoteAccessHostTokenValidationUrl) Name() string {
	return "RemoteAccessHostTokenValidationUrl"
}
func (p *RemoteAccessHostTokenValidationUrl) Field() string         { return "" }
func (p *RemoteAccessHostTokenValidationUrl) Scope() Scope          { return ScopeUser }
func (p *RemoteAccessHostTokenValidationUrl) Status() Status        { return p.Stat }
func (p *RemoteAccessHostTokenValidationUrl) UntypedV() interface{} { return p.Val }
func (p *RemoteAccessHostTokenValidationUrl) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *RemoteAccessHostTokenValidationUrl) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 288. RemoteAccessHostTokenValidationCertificateIssuer
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RemoteAccessHostTokenValidationCertificateIssuer struct {
	Stat Status
	Val  string
}

func (p *RemoteAccessHostTokenValidationCertificateIssuer) Name() string {
	return "RemoteAccessHostTokenValidationCertificateIssuer"
}
func (p *RemoteAccessHostTokenValidationCertificateIssuer) Field() string         { return "" }
func (p *RemoteAccessHostTokenValidationCertificateIssuer) Scope() Scope          { return ScopeUser }
func (p *RemoteAccessHostTokenValidationCertificateIssuer) Status() Status        { return p.Stat }
func (p *RemoteAccessHostTokenValidationCertificateIssuer) UntypedV() interface{} { return p.Val }
func (p *RemoteAccessHostTokenValidationCertificateIssuer) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *RemoteAccessHostTokenValidationCertificateIssuer) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 290. ReportDeviceHardwareStatus
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceHardwareStatus struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceHardwareStatus) Name() string          { return "ReportDeviceHardwareStatus" }
func (p *ReportDeviceHardwareStatus) Field() string         { return "device_reporting.report_hardware_status" }
func (p *ReportDeviceHardwareStatus) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceHardwareStatus) Status() Status        { return p.Stat }
func (p *ReportDeviceHardwareStatus) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceHardwareStatus) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceHardwareStatus) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 291. ReportDeviceSessionStatus
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceSessionStatus struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceSessionStatus) Name() string          { return "ReportDeviceSessionStatus" }
func (p *ReportDeviceSessionStatus) Field() string         { return "device_reporting.report_session_status" }
func (p *ReportDeviceSessionStatus) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceSessionStatus) Status() Status        { return p.Stat }
func (p *ReportDeviceSessionStatus) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceSessionStatus) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceSessionStatus) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 292. ReportUploadFrequency
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportUploadFrequency struct {
	Stat Status
	Val  int
}

func (p *ReportUploadFrequency) Name() string          { return "ReportUploadFrequency" }
func (p *ReportUploadFrequency) Field() string         { return "device_reporting.device_status_frequency" }
func (p *ReportUploadFrequency) Scope() Scope          { return ScopeDevice }
func (p *ReportUploadFrequency) Status() Status        { return p.Stat }
func (p *ReportUploadFrequency) UntypedV() interface{} { return p.Val }
func (p *ReportUploadFrequency) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ReportUploadFrequency) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 293. HeartbeatEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type HeartbeatEnabled struct {
	Stat Status
	Val  bool
}

func (p *HeartbeatEnabled) Name() string          { return "HeartbeatEnabled" }
func (p *HeartbeatEnabled) Field() string         { return "device_heartbeat_settings.heartbeat_enabled" }
func (p *HeartbeatEnabled) Scope() Scope          { return ScopeDevice }
func (p *HeartbeatEnabled) Status() Status        { return p.Stat }
func (p *HeartbeatEnabled) UntypedV() interface{} { return p.Val }
func (p *HeartbeatEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *HeartbeatEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 294. HeartbeatFrequency
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type HeartbeatFrequency struct {
	Stat Status
	Val  int
}

func (p *HeartbeatFrequency) Name() string          { return "HeartbeatFrequency" }
func (p *HeartbeatFrequency) Field() string         { return "device_heartbeat_settings.heartbeat_frequency" }
func (p *HeartbeatFrequency) Scope() Scope          { return ScopeDevice }
func (p *HeartbeatFrequency) Status() Status        { return p.Stat }
func (p *HeartbeatFrequency) UntypedV() interface{} { return p.Val }
func (p *HeartbeatFrequency) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *HeartbeatFrequency) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 295. CaptivePortalAuthenticationIgnoresProxy
// This policy has a default value of False.
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CaptivePortalAuthenticationIgnoresProxy struct {
	Stat Status
	Val  bool
}

func (p *CaptivePortalAuthenticationIgnoresProxy) Name() string {
	return "CaptivePortalAuthenticationIgnoresProxy"
}
func (p *CaptivePortalAuthenticationIgnoresProxy) Field() string         { return "" }
func (p *CaptivePortalAuthenticationIgnoresProxy) Scope() Scope          { return ScopeUser }
func (p *CaptivePortalAuthenticationIgnoresProxy) Status() Status        { return p.Stat }
func (p *CaptivePortalAuthenticationIgnoresProxy) UntypedV() interface{} { return p.Val }
func (p *CaptivePortalAuthenticationIgnoresProxy) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *CaptivePortalAuthenticationIgnoresProxy) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 296. ExtensionCacheSize
///////////////////////////////////////////////////////////////////////////////
type ExtensionCacheSize struct {
	Stat Status
	Val  int
}

func (p *ExtensionCacheSize) Name() string          { return "ExtensionCacheSize" }
func (p *ExtensionCacheSize) Field() string         { return "extension_cache_size.extension_cache_size" }
func (p *ExtensionCacheSize) Scope() Scope          { return ScopeDevice }
func (p *ExtensionCacheSize) Status() Status        { return p.Stat }
func (p *ExtensionCacheSize) UntypedV() interface{} { return p.Val }
func (p *ExtensionCacheSize) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ExtensionCacheSize) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 297. DeviceLoginScreenDomainAutoComplete
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenDomainAutoComplete struct {
	Stat Status
	Val  string
}

func (p *DeviceLoginScreenDomainAutoComplete) Name() string {
	return "DeviceLoginScreenDomainAutoComplete"
}
func (p *DeviceLoginScreenDomainAutoComplete) Field() string {
	return "login_screen_domain_auto_complete.login_screen_domain_auto_complete"
}
func (p *DeviceLoginScreenDomainAutoComplete) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenDomainAutoComplete) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenDomainAutoComplete) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenDomainAutoComplete) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenDomainAutoComplete) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 298. ForceMaximizeOnFirstRun
///////////////////////////////////////////////////////////////////////////////
type ForceMaximizeOnFirstRun struct {
	Stat Status
	Val  bool
}

func (p *ForceMaximizeOnFirstRun) Name() string          { return "ForceMaximizeOnFirstRun" }
func (p *ForceMaximizeOnFirstRun) Field() string         { return "" }
func (p *ForceMaximizeOnFirstRun) Scope() Scope          { return ScopeUser }
func (p *ForceMaximizeOnFirstRun) Status() Status        { return p.Stat }
func (p *ForceMaximizeOnFirstRun) UntypedV() interface{} { return p.Val }
func (p *ForceMaximizeOnFirstRun) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ForceMaximizeOnFirstRun) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 299. SafeBrowsingExtendedReportingOptInAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SafeBrowsingExtendedReportingOptInAllowed struct {
	Stat Status
	Val  bool
}

func (p *SafeBrowsingExtendedReportingOptInAllowed) Name() string {
	return "SafeBrowsingExtendedReportingOptInAllowed"
}
func (p *SafeBrowsingExtendedReportingOptInAllowed) Field() string         { return "" }
func (p *SafeBrowsingExtendedReportingOptInAllowed) Scope() Scope          { return ScopeUser }
func (p *SafeBrowsingExtendedReportingOptInAllowed) Status() Status        { return p.Stat }
func (p *SafeBrowsingExtendedReportingOptInAllowed) UntypedV() interface{} { return p.Val }
func (p *SafeBrowsingExtendedReportingOptInAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SafeBrowsingExtendedReportingOptInAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 300. SSLErrorOverrideAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SSLErrorOverrideAllowed struct {
	Stat Status
	Val  bool
}

func (p *SSLErrorOverrideAllowed) Name() string          { return "SSLErrorOverrideAllowed" }
func (p *SSLErrorOverrideAllowed) Field() string         { return "" }
func (p *SSLErrorOverrideAllowed) Scope() Scope          { return ScopeUser }
func (p *SSLErrorOverrideAllowed) Status() Status        { return p.Stat }
func (p *SSLErrorOverrideAllowed) UntypedV() interface{} { return p.Val }
func (p *SSLErrorOverrideAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SSLErrorOverrideAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 301. QuicAllowed
///////////////////////////////////////////////////////////////////////////////
type QuicAllowed struct {
	Stat Status
	Val  bool
}

func (p *QuicAllowed) Name() string          { return "QuicAllowed" }
func (p *QuicAllowed) Field() string         { return "" }
func (p *QuicAllowed) Scope() Scope          { return ScopeUser }
func (p *QuicAllowed) Status() Status        { return p.Stat }
func (p *QuicAllowed) UntypedV() interface{} { return p.Val }
func (p *QuicAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *QuicAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 302. KeyPermissions
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type KeyPermissions struct {
	Stat Status
	Val  map[string]*KeyPermissionsValue
}

type KeyPermissionsValue struct {
	AllowCorporateKeyUsage bool `json:"allowCorporateKeyUsage"`
}

func (p *KeyPermissions) Name() string          { return "KeyPermissions" }
func (p *KeyPermissions) Field() string         { return "" }
func (p *KeyPermissions) Scope() Scope          { return ScopeUser }
func (p *KeyPermissions) Status() Status        { return p.Stat }
func (p *KeyPermissions) UntypedV() interface{} { return p.Val }
func (p *KeyPermissions) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v map[string]*KeyPermissionsValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as map[string]*KeyPermissionsValue", m)
	}
	return v, nil
}
func (p *KeyPermissions) Equal(iface interface{}) bool {
	v, ok := iface.(map[string]*KeyPermissionsValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 306. LogUploadEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type LogUploadEnabled struct {
	Stat Status
	Val  bool
}

func (p *LogUploadEnabled) Name() string { return "LogUploadEnabled" }
func (p *LogUploadEnabled) Field() string {
	return "device_log_upload_settings.system_log_upload_enabled"
}
func (p *LogUploadEnabled) Scope() Scope          { return ScopeDevice }
func (p *LogUploadEnabled) Status() Status        { return p.Stat }
func (p *LogUploadEnabled) UntypedV() interface{} { return p.Val }
func (p *LogUploadEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *LogUploadEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 307. UnifiedDesktopEnabledByDefault
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type UnifiedDesktopEnabledByDefault struct {
	Stat Status
	Val  bool
}

func (p *UnifiedDesktopEnabledByDefault) Name() string          { return "UnifiedDesktopEnabledByDefault" }
func (p *UnifiedDesktopEnabledByDefault) Field() string         { return "" }
func (p *UnifiedDesktopEnabledByDefault) Scope() Scope          { return ScopeUser }
func (p *UnifiedDesktopEnabledByDefault) Status() Status        { return p.Stat }
func (p *UnifiedDesktopEnabledByDefault) UntypedV() interface{} { return p.Val }
func (p *UnifiedDesktopEnabledByDefault) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *UnifiedDesktopEnabledByDefault) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 308. DefaultPrinterSelection
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultPrinterSelection struct {
	Stat Status
	Val  string
}

func (p *DefaultPrinterSelection) Name() string          { return "DefaultPrinterSelection" }
func (p *DefaultPrinterSelection) Field() string         { return "" }
func (p *DefaultPrinterSelection) Scope() Scope          { return ScopeUser }
func (p *DefaultPrinterSelection) Status() Status        { return p.Stat }
func (p *DefaultPrinterSelection) UntypedV() interface{} { return p.Val }
func (p *DefaultPrinterSelection) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DefaultPrinterSelection) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 309. AllowDinosaurEasterEgg
// This policy has a default value of False.
///////////////////////////////////////////////////////////////////////////////
type AllowDinosaurEasterEgg struct {
	Stat Status
	Val  bool
}

func (p *AllowDinosaurEasterEgg) Name() string          { return "AllowDinosaurEasterEgg" }
func (p *AllowDinosaurEasterEgg) Field() string         { return "" }
func (p *AllowDinosaurEasterEgg) Scope() Scope          { return ScopeUser }
func (p *AllowDinosaurEasterEgg) Status() Status        { return p.Stat }
func (p *AllowDinosaurEasterEgg) UntypedV() interface{} { return p.Val }
func (p *AllowDinosaurEasterEgg) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AllowDinosaurEasterEgg) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 311. DisplayRotationDefault
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DisplayRotationDefault struct {
	Stat Status
	Val  int
}

func (p *DisplayRotationDefault) Name() string { return "DisplayRotationDefault" }
func (p *DisplayRotationDefault) Field() string {
	return "display_rotation_default.display_rotation_default"
}
func (p *DisplayRotationDefault) Scope() Scope          { return ScopeDevice }
func (p *DisplayRotationDefault) Status() Status        { return p.Stat }
func (p *DisplayRotationDefault) UntypedV() interface{} { return p.Val }
func (p *DisplayRotationDefault) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DisplayRotationDefault) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 316. RemoteAccessHostClientDomain
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RemoteAccessHostClientDomain struct {
	Stat Status
	Val  string
}

func (p *RemoteAccessHostClientDomain) Name() string          { return "RemoteAccessHostClientDomain" }
func (p *RemoteAccessHostClientDomain) Field() string         { return "" }
func (p *RemoteAccessHostClientDomain) Scope() Scope          { return ScopeUser }
func (p *RemoteAccessHostClientDomain) Status() Status        { return p.Stat }
func (p *RemoteAccessHostClientDomain) UntypedV() interface{} { return p.Val }
func (p *RemoteAccessHostClientDomain) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *RemoteAccessHostClientDomain) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 317. ArcEnabled
// This policy has a default value of False.
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ArcEnabled struct {
	Stat Status
	Val  bool
}

func (p *ArcEnabled) Name() string          { return "ArcEnabled" }
func (p *ArcEnabled) Field() string         { return "" }
func (p *ArcEnabled) Scope() Scope          { return ScopeUser }
func (p *ArcEnabled) Status() Status        { return p.Stat }
func (p *ArcEnabled) UntypedV() interface{} { return p.Val }
func (p *ArcEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ArcEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 318. ArcPolicy
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ArcPolicy struct {
	Stat Status
	Val  *ArcPolicyValue
}

type Application struct {
	PackageName             string `json:"packageName"`
	InstallType             string `json:"installType"`
	DefaultPermissionPolicy string `json:"defaultPermissionPolicy"`
	ManagedConfiguration    string `json:"managedConfiguration"`
}

type ArcPolicyValue struct {
	Applications []Application `json:"applications"`
}

func (p *ArcPolicy) Name() string          { return "ArcPolicy" }
func (p *ArcPolicy) Field() string         { return "" }
func (p *ArcPolicy) Scope() Scope          { return ScopeUser }
func (p *ArcPolicy) Status() Status        { return p.Stat }
func (p *ArcPolicy) UntypedV() interface{} { return p.Val }
func (p *ArcPolicy) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	var value ArcPolicyValue
	if err := json.Unmarshal([]byte(v), &value); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as ArcPolicyValue", m)
	}
	return value, nil
}
func (p *ArcPolicy) Equal(iface interface{}) bool {
	v, ok := iface.(*ArcPolicyValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 319. AllowKioskAppControlChromeVersion
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AllowKioskAppControlChromeVersion struct {
	Stat Status
	Val  bool
}

func (p *AllowKioskAppControlChromeVersion) Name() string { return "AllowKioskAppControlChromeVersion" }
func (p *AllowKioskAppControlChromeVersion) Field() string {
	return "allow_kiosk_app_control_chrome_version.allow_kiosk_app_control_chrome_version"
}
func (p *AllowKioskAppControlChromeVersion) Scope() Scope          { return ScopeDevice }
func (p *AllowKioskAppControlChromeVersion) Status() Status        { return p.Stat }
func (p *AllowKioskAppControlChromeVersion) UntypedV() interface{} { return p.Val }
func (p *AllowKioskAppControlChromeVersion) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AllowKioskAppControlChromeVersion) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 320. DefaultWebBluetoothGuardSetting
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultWebBluetoothGuardSetting struct {
	Stat Status
	Val  int
}

func (p *DefaultWebBluetoothGuardSetting) Name() string          { return "DefaultWebBluetoothGuardSetting" }
func (p *DefaultWebBluetoothGuardSetting) Field() string         { return "" }
func (p *DefaultWebBluetoothGuardSetting) Scope() Scope          { return ScopeUser }
func (p *DefaultWebBluetoothGuardSetting) Status() Status        { return p.Stat }
func (p *DefaultWebBluetoothGuardSetting) UntypedV() interface{} { return p.Val }
func (p *DefaultWebBluetoothGuardSetting) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DefaultWebBluetoothGuardSetting) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 321. LoginAuthenticationBehavior
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type LoginAuthenticationBehavior struct {
	Stat Status
	Val  int
}

func (p *LoginAuthenticationBehavior) Name() string { return "LoginAuthenticationBehavior" }
func (p *LoginAuthenticationBehavior) Field() string {
	return "login_authentication_behavior.login_authentication_behavior"
}
func (p *LoginAuthenticationBehavior) Scope() Scope          { return ScopeDevice }
func (p *LoginAuthenticationBehavior) Status() Status        { return p.Stat }
func (p *LoginAuthenticationBehavior) UntypedV() interface{} { return p.Val }
func (p *LoginAuthenticationBehavior) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *LoginAuthenticationBehavior) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 322. UsbDetachableWhitelist
///////////////////////////////////////////////////////////////////////////////
type UsbDetachableWhitelist struct {
	Stat Status
	Val  []*RefUsbDeviceId
}

func (p *UsbDetachableWhitelist) Name() string          { return "UsbDetachableWhitelist" }
func (p *UsbDetachableWhitelist) Field() string         { return "usb_detachable_whitelist.id" }
func (p *UsbDetachableWhitelist) Scope() Scope          { return ScopeDevice }
func (p *UsbDetachableWhitelist) Status() Status        { return p.Stat }
func (p *UsbDetachableWhitelist) UntypedV() interface{} { return p.Val }
func (p *UsbDetachableWhitelist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*RefUsbDeviceId
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*RefUsbDeviceId", m)
	}
	return v, nil
}
func (p *UsbDetachableWhitelist) Equal(iface interface{}) bool {
	v, ok := iface.([]*RefUsbDeviceId)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 323. DeviceAllowBluetooth
///////////////////////////////////////////////////////////////////////////////
type DeviceAllowBluetooth struct {
	Stat Status
	Val  bool
}

func (p *DeviceAllowBluetooth) Name() string          { return "DeviceAllowBluetooth" }
func (p *DeviceAllowBluetooth) Field() string         { return "allow_bluetooth.allow_bluetooth" }
func (p *DeviceAllowBluetooth) Scope() Scope          { return ScopeDevice }
func (p *DeviceAllowBluetooth) Status() Status        { return p.Stat }
func (p *DeviceAllowBluetooth) UntypedV() interface{} { return p.Val }
func (p *DeviceAllowBluetooth) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceAllowBluetooth) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 324. SuppressUnsupportedOSWarning
///////////////////////////////////////////////////////////////////////////////
type SuppressUnsupportedOSWarning struct {
	Stat Status
	Val  bool
}

func (p *SuppressUnsupportedOSWarning) Name() string          { return "SuppressUnsupportedOSWarning" }
func (p *SuppressUnsupportedOSWarning) Field() string         { return "" }
func (p *SuppressUnsupportedOSWarning) Scope() Scope          { return ScopeUser }
func (p *SuppressUnsupportedOSWarning) Status() Status        { return p.Stat }
func (p *SuppressUnsupportedOSWarning) UntypedV() interface{} { return p.Val }
func (p *SuppressUnsupportedOSWarning) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SuppressUnsupportedOSWarning) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 325. DeviceQuirksDownloadEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceQuirksDownloadEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceQuirksDownloadEnabled) Name() string { return "DeviceQuirksDownloadEnabled" }
func (p *DeviceQuirksDownloadEnabled) Field() string {
	return "quirks_download_enabled.quirks_download_enabled"
}
func (p *DeviceQuirksDownloadEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceQuirksDownloadEnabled) Status() Status        { return p.Stat }
func (p *DeviceQuirksDownloadEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceQuirksDownloadEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceQuirksDownloadEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 326. SystemTimezoneAutomaticDetection
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SystemTimezoneAutomaticDetection struct {
	Stat Status
	Val  int
}

func (p *SystemTimezoneAutomaticDetection) Name() string { return "SystemTimezoneAutomaticDetection" }
func (p *SystemTimezoneAutomaticDetection) Field() string {
	return "system_timezone.timezone_detection_type"
}
func (p *SystemTimezoneAutomaticDetection) Scope() Scope          { return ScopeDevice }
func (p *SystemTimezoneAutomaticDetection) Status() Status        { return p.Stat }
func (p *SystemTimezoneAutomaticDetection) UntypedV() interface{} { return p.Val }
func (p *SystemTimezoneAutomaticDetection) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *SystemTimezoneAutomaticDetection) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 327. TaskManagerEndProcessEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type TaskManagerEndProcessEnabled struct {
	Stat Status
	Val  bool
}

func (p *TaskManagerEndProcessEnabled) Name() string          { return "TaskManagerEndProcessEnabled" }
func (p *TaskManagerEndProcessEnabled) Field() string         { return "" }
func (p *TaskManagerEndProcessEnabled) Scope() Scope          { return ScopeUser }
func (p *TaskManagerEndProcessEnabled) Status() Status        { return p.Stat }
func (p *TaskManagerEndProcessEnabled) UntypedV() interface{} { return p.Val }
func (p *TaskManagerEndProcessEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *TaskManagerEndProcessEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 328. LoginVideoCaptureAllowedUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type LoginVideoCaptureAllowedUrls struct {
	Stat Status
	Val  []string
}

func (p *LoginVideoCaptureAllowedUrls) Name() string          { return "LoginVideoCaptureAllowedUrls" }
func (p *LoginVideoCaptureAllowedUrls) Field() string         { return "login_video_capture_allowed_urls.urls" }
func (p *LoginVideoCaptureAllowedUrls) Scope() Scope          { return ScopeDevice }
func (p *LoginVideoCaptureAllowedUrls) Status() Status        { return p.Stat }
func (p *LoginVideoCaptureAllowedUrls) UntypedV() interface{} { return p.Val }
func (p *LoginVideoCaptureAllowedUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *LoginVideoCaptureAllowedUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 329. AllowScreenLock
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AllowScreenLock struct {
	Stat Status
	Val  bool
}

func (p *AllowScreenLock) Name() string          { return "AllowScreenLock" }
func (p *AllowScreenLock) Field() string         { return "" }
func (p *AllowScreenLock) Scope() Scope          { return ScopeUser }
func (p *AllowScreenLock) Status() Status        { return p.Stat }
func (p *AllowScreenLock) UntypedV() interface{} { return p.Val }
func (p *AllowScreenLock) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AllowScreenLock) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 330. ArcCertificatesSyncMode
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ArcCertificatesSyncMode struct {
	Stat Status
	Val  int
}

func (p *ArcCertificatesSyncMode) Name() string          { return "ArcCertificatesSyncMode" }
func (p *ArcCertificatesSyncMode) Field() string         { return "" }
func (p *ArcCertificatesSyncMode) Scope() Scope          { return ScopeUser }
func (p *ArcCertificatesSyncMode) Status() Status        { return p.Stat }
func (p *ArcCertificatesSyncMode) UntypedV() interface{} { return p.Val }
func (p *ArcCertificatesSyncMode) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ArcCertificatesSyncMode) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 331. AllowedDomainsForApps
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AllowedDomainsForApps struct {
	Stat Status
	Val  string
}

func (p *AllowedDomainsForApps) Name() string          { return "AllowedDomainsForApps" }
func (p *AllowedDomainsForApps) Field() string         { return "" }
func (p *AllowedDomainsForApps) Scope() Scope          { return ScopeUser }
func (p *AllowedDomainsForApps) Status() Status        { return p.Stat }
func (p *AllowedDomainsForApps) UntypedV() interface{} { return p.Val }
func (p *AllowedDomainsForApps) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *AllowedDomainsForApps) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 333. EnableMediaRouter
///////////////////////////////////////////////////////////////////////////////
type EnableMediaRouter struct {
	Stat Status
	Val  bool
}

func (p *EnableMediaRouter) Name() string          { return "EnableMediaRouter" }
func (p *EnableMediaRouter) Field() string         { return "" }
func (p *EnableMediaRouter) Scope() Scope          { return ScopeUser }
func (p *EnableMediaRouter) Status() Status        { return p.Stat }
func (p *EnableMediaRouter) UntypedV() interface{} { return p.Val }
func (p *EnableMediaRouter) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *EnableMediaRouter) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 335. CertificateTransparencyEnforcementDisabledForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CertificateTransparencyEnforcementDisabledForUrls struct {
	Stat Status
	Val  []string
}

func (p *CertificateTransparencyEnforcementDisabledForUrls) Name() string {
	return "CertificateTransparencyEnforcementDisabledForUrls"
}
func (p *CertificateTransparencyEnforcementDisabledForUrls) Field() string         { return "" }
func (p *CertificateTransparencyEnforcementDisabledForUrls) Scope() Scope          { return ScopeUser }
func (p *CertificateTransparencyEnforcementDisabledForUrls) Status() Status        { return p.Stat }
func (p *CertificateTransparencyEnforcementDisabledForUrls) UntypedV() interface{} { return p.Val }
func (p *CertificateTransparencyEnforcementDisabledForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *CertificateTransparencyEnforcementDisabledForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 336. DeviceLoginScreenExtensions
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenExtensions struct {
	Stat Status
	Val  []string
}

func (p *DeviceLoginScreenExtensions) Name() string { return "DeviceLoginScreenExtensions" }
func (p *DeviceLoginScreenExtensions) Field() string {
	return "device_login_screen_extensions.device_login_screen_extensions"
}
func (p *DeviceLoginScreenExtensions) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenExtensions) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenExtensions) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenExtensions) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenExtensions) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 339. WebRtcUdpPortRange
///////////////////////////////////////////////////////////////////////////////
type WebRtcUdpPortRange struct {
	Stat Status
	Val  string
}

func (p *WebRtcUdpPortRange) Name() string          { return "WebRtcUdpPortRange" }
func (p *WebRtcUdpPortRange) Field() string         { return "" }
func (p *WebRtcUdpPortRange) Scope() Scope          { return ScopeUser }
func (p *WebRtcUdpPortRange) Status() Status        { return p.Stat }
func (p *WebRtcUdpPortRange) UntypedV() interface{} { return p.Val }
func (p *WebRtcUdpPortRange) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *WebRtcUdpPortRange) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 342. ComponentUpdatesEnabled
///////////////////////////////////////////////////////////////////////////////
type ComponentUpdatesEnabled struct {
	Stat Status
	Val  bool
}

func (p *ComponentUpdatesEnabled) Name() string          { return "ComponentUpdatesEnabled" }
func (p *ComponentUpdatesEnabled) Field() string         { return "" }
func (p *ComponentUpdatesEnabled) Scope() Scope          { return ScopeUser }
func (p *ComponentUpdatesEnabled) Status() Status        { return p.Stat }
func (p *ComponentUpdatesEnabled) UntypedV() interface{} { return p.Val }
func (p *ComponentUpdatesEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ComponentUpdatesEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 343. ExternalStorageReadOnly
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ExternalStorageReadOnly struct {
	Stat Status
	Val  bool
}

func (p *ExternalStorageReadOnly) Name() string          { return "ExternalStorageReadOnly" }
func (p *ExternalStorageReadOnly) Field() string         { return "" }
func (p *ExternalStorageReadOnly) Scope() Scope          { return ScopeUser }
func (p *ExternalStorageReadOnly) Status() Status        { return p.Stat }
func (p *ExternalStorageReadOnly) UntypedV() interface{} { return p.Val }
func (p *ExternalStorageReadOnly) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ExternalStorageReadOnly) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 348. ForceYouTubeRestrict
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ForceYouTubeRestrict struct {
	Stat Status
	Val  int
}

func (p *ForceYouTubeRestrict) Name() string          { return "ForceYouTubeRestrict" }
func (p *ForceYouTubeRestrict) Field() string         { return "" }
func (p *ForceYouTubeRestrict) Scope() Scope          { return ScopeUser }
func (p *ForceYouTubeRestrict) Status() Status        { return p.Stat }
func (p *ForceYouTubeRestrict) UntypedV() interface{} { return p.Val }
func (p *ForceYouTubeRestrict) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ForceYouTubeRestrict) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 349. ReportArcStatusEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportArcStatusEnabled struct {
	Stat Status
	Val  bool
}

func (p *ReportArcStatusEnabled) Name() string          { return "ReportArcStatusEnabled" }
func (p *ReportArcStatusEnabled) Field() string         { return "" }
func (p *ReportArcStatusEnabled) Scope() Scope          { return ScopeUser }
func (p *ReportArcStatusEnabled) Status() Status        { return p.Stat }
func (p *ReportArcStatusEnabled) UntypedV() interface{} { return p.Val }
func (p *ReportArcStatusEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportArcStatusEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 350. NativePrinters
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type NativePrinters struct {
	Stat Status
	Val  []string
}

func (p *NativePrinters) Name() string          { return "NativePrinters" }
func (p *NativePrinters) Field() string         { return "" }
func (p *NativePrinters) Scope() Scope          { return ScopeUser }
func (p *NativePrinters) Status() Status        { return p.Stat }
func (p *NativePrinters) UntypedV() interface{} { return p.Val }
func (p *NativePrinters) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *NativePrinters) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 351. NetworkThrottlingEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type NetworkThrottlingEnabled struct {
	Stat Status
	Val  *NetworkThrottlingEnabledValue
}

type NetworkThrottlingEnabledValue struct {
	DownloadRateKbits int  `json:"download_rate_kbits"`
	Enabled           bool `json:"enabled"`
	UploadRateKbits   int  `json:"upload_rate_kbits"`
}

func (p *NetworkThrottlingEnabled) Name() string          { return "NetworkThrottlingEnabled" }
func (p *NetworkThrottlingEnabled) Field() string         { return "network_throttling.download_rate_kbits" }
func (p *NetworkThrottlingEnabled) Scope() Scope          { return ScopeDevice }
func (p *NetworkThrottlingEnabled) Status() Status        { return p.Stat }
func (p *NetworkThrottlingEnabled) UntypedV() interface{} { return p.Val }
func (p *NetworkThrottlingEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *NetworkThrottlingEnabledValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *NetworkThrottlingEnabledValue", m)
	}
	return v, nil
}
func (p *NetworkThrottlingEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(*NetworkThrottlingEnabledValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 352. QuickUnlockModeWhitelist
// This policy has a default value of [].
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type QuickUnlockModeWhitelist struct {
	Stat Status
	Val  []string
}

func (p *QuickUnlockModeWhitelist) Name() string          { return "QuickUnlockModeWhitelist" }
func (p *QuickUnlockModeWhitelist) Field() string         { return "" }
func (p *QuickUnlockModeWhitelist) Scope() Scope          { return ScopeUser }
func (p *QuickUnlockModeWhitelist) Status() Status        { return p.Stat }
func (p *QuickUnlockModeWhitelist) UntypedV() interface{} { return p.Val }
func (p *QuickUnlockModeWhitelist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *QuickUnlockModeWhitelist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 353. QuickUnlockTimeout
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type QuickUnlockTimeout struct {
	Stat Status
	Val  int
}

func (p *QuickUnlockTimeout) Name() string          { return "QuickUnlockTimeout" }
func (p *QuickUnlockTimeout) Field() string         { return "" }
func (p *QuickUnlockTimeout) Scope() Scope          { return ScopeUser }
func (p *QuickUnlockTimeout) Status() Status        { return p.Stat }
func (p *QuickUnlockTimeout) UntypedV() interface{} { return p.Val }
func (p *QuickUnlockTimeout) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *QuickUnlockTimeout) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 354. PinUnlockMinimumLength
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PinUnlockMinimumLength struct {
	Stat Status
	Val  int
}

func (p *PinUnlockMinimumLength) Name() string          { return "PinUnlockMinimumLength" }
func (p *PinUnlockMinimumLength) Field() string         { return "" }
func (p *PinUnlockMinimumLength) Scope() Scope          { return ScopeUser }
func (p *PinUnlockMinimumLength) Status() Status        { return p.Stat }
func (p *PinUnlockMinimumLength) UntypedV() interface{} { return p.Val }
func (p *PinUnlockMinimumLength) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *PinUnlockMinimumLength) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 355. PinUnlockMaximumLength
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PinUnlockMaximumLength struct {
	Stat Status
	Val  int
}

func (p *PinUnlockMaximumLength) Name() string          { return "PinUnlockMaximumLength" }
func (p *PinUnlockMaximumLength) Field() string         { return "" }
func (p *PinUnlockMaximumLength) Scope() Scope          { return ScopeUser }
func (p *PinUnlockMaximumLength) Status() Status        { return p.Stat }
func (p *PinUnlockMaximumLength) UntypedV() interface{} { return p.Val }
func (p *PinUnlockMaximumLength) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *PinUnlockMaximumLength) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 356. PinUnlockWeakPinsAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PinUnlockWeakPinsAllowed struct {
	Stat Status
	Val  bool
}

func (p *PinUnlockWeakPinsAllowed) Name() string          { return "PinUnlockWeakPinsAllowed" }
func (p *PinUnlockWeakPinsAllowed) Field() string         { return "" }
func (p *PinUnlockWeakPinsAllowed) Scope() Scope          { return ScopeUser }
func (p *PinUnlockWeakPinsAllowed) Status() Status        { return p.Stat }
func (p *PinUnlockWeakPinsAllowed) UntypedV() interface{} { return p.Val }
func (p *PinUnlockWeakPinsAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PinUnlockWeakPinsAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 357. DeviceWallpaperImage
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceWallpaperImage struct {
	Stat Status
	Val  *DeviceWallpaperImageValue
}

type DeviceWallpaperImageValue struct {
	Hash string `json:"hash"`
	Url  string `json:"url"`
}

func (p *DeviceWallpaperImage) Name() string          { return "DeviceWallpaperImage" }
func (p *DeviceWallpaperImage) Field() string         { return "device_wallpaper_image.device_wallpaper_image" }
func (p *DeviceWallpaperImage) Scope() Scope          { return ScopeDevice }
func (p *DeviceWallpaperImage) Status() Status        { return p.Stat }
func (p *DeviceWallpaperImage) UntypedV() interface{} { return p.Val }
func (p *DeviceWallpaperImage) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *DeviceWallpaperImageValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *DeviceWallpaperImageValue", m)
	}
	return v, nil
}
func (p *DeviceWallpaperImage) Equal(iface interface{}) bool {
	v, ok := iface.(*DeviceWallpaperImageValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 360. NewTabPageLocation
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type NewTabPageLocation struct {
	Stat Status
	Val  string
}

func (p *NewTabPageLocation) Name() string          { return "NewTabPageLocation" }
func (p *NewTabPageLocation) Field() string         { return "" }
func (p *NewTabPageLocation) Scope() Scope          { return ScopeUser }
func (p *NewTabPageLocation) Status() Status        { return p.Stat }
func (p *NewTabPageLocation) UntypedV() interface{} { return p.Val }
func (p *NewTabPageLocation) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *NewTabPageLocation) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 362. ShowCastIconInToolbar
///////////////////////////////////////////////////////////////////////////////
type ShowCastIconInToolbar struct {
	Stat Status
	Val  bool
}

func (p *ShowCastIconInToolbar) Name() string          { return "ShowCastIconInToolbar" }
func (p *ShowCastIconInToolbar) Field() string         { return "" }
func (p *ShowCastIconInToolbar) Scope() Scope          { return ScopeUser }
func (p *ShowCastIconInToolbar) Status() Status        { return p.Stat }
func (p *ShowCastIconInToolbar) UntypedV() interface{} { return p.Val }
func (p *ShowCastIconInToolbar) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ShowCastIconInToolbar) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 364. DeviceLoginScreenLocales
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenLocales struct {
	Stat Status
	Val  []string
}

func (p *DeviceLoginScreenLocales) Name() string          { return "DeviceLoginScreenLocales" }
func (p *DeviceLoginScreenLocales) Field() string         { return "login_screen_locales.login_screen_locales" }
func (p *DeviceLoginScreenLocales) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenLocales) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenLocales) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenLocales) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenLocales) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 365. DeviceLoginScreenInputMethods
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenInputMethods struct {
	Stat Status
	Val  []string
}

func (p *DeviceLoginScreenInputMethods) Name() string { return "DeviceLoginScreenInputMethods" }
func (p *DeviceLoginScreenInputMethods) Field() string {
	return "login_screen_input_methods.login_screen_input_methods"
}
func (p *DeviceLoginScreenInputMethods) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenInputMethods) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenInputMethods) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenInputMethods) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenInputMethods) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 367. InstantTetheringAllowed
// This policy has a default value of False.
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type InstantTetheringAllowed struct {
	Stat Status
	Val  bool
}

func (p *InstantTetheringAllowed) Name() string          { return "InstantTetheringAllowed" }
func (p *InstantTetheringAllowed) Field() string         { return "" }
func (p *InstantTetheringAllowed) Scope() Scope          { return ScopeUser }
func (p *InstantTetheringAllowed) Status() Status        { return p.Stat }
func (p *InstantTetheringAllowed) UntypedV() interface{} { return p.Val }
func (p *InstantTetheringAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *InstantTetheringAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 368. RemoteAccessHostDomainList
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RemoteAccessHostDomainList struct {
	Stat Status
	Val  []string
}

func (p *RemoteAccessHostDomainList) Name() string          { return "RemoteAccessHostDomainList" }
func (p *RemoteAccessHostDomainList) Field() string         { return "" }
func (p *RemoteAccessHostDomainList) Scope() Scope          { return ScopeUser }
func (p *RemoteAccessHostDomainList) Status() Status        { return p.Stat }
func (p *RemoteAccessHostDomainList) UntypedV() interface{} { return p.Val }
func (p *RemoteAccessHostDomainList) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *RemoteAccessHostDomainList) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 369. RemoteAccessHostClientDomainList
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RemoteAccessHostClientDomainList struct {
	Stat Status
	Val  []string
}

func (p *RemoteAccessHostClientDomainList) Name() string          { return "RemoteAccessHostClientDomainList" }
func (p *RemoteAccessHostClientDomainList) Field() string         { return "" }
func (p *RemoteAccessHostClientDomainList) Scope() Scope          { return ScopeUser }
func (p *RemoteAccessHostClientDomainList) Status() Status        { return p.Stat }
func (p *RemoteAccessHostClientDomainList) UntypedV() interface{} { return p.Val }
func (p *RemoteAccessHostClientDomainList) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *RemoteAccessHostClientDomainList) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 371. DownloadRestrictions
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DownloadRestrictions struct {
	Stat Status
	Val  int
}

func (p *DownloadRestrictions) Name() string          { return "DownloadRestrictions" }
func (p *DownloadRestrictions) Field() string         { return "" }
func (p *DownloadRestrictions) Scope() Scope          { return ScopeUser }
func (p *DownloadRestrictions) Status() Status        { return p.Stat }
func (p *DownloadRestrictions) UntypedV() interface{} { return p.Val }
func (p *DownloadRestrictions) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DownloadRestrictions) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 372. DeviceSecondFactorAuthentication
///////////////////////////////////////////////////////////////////////////////
type DeviceSecondFactorAuthentication struct {
	Stat Status
	Val  int
}

func (p *DeviceSecondFactorAuthentication) Name() string { return "DeviceSecondFactorAuthentication" }
func (p *DeviceSecondFactorAuthentication) Field() string {
	return "device_second_factor_authentication.mode"
}
func (p *DeviceSecondFactorAuthentication) Scope() Scope          { return ScopeDevice }
func (p *DeviceSecondFactorAuthentication) Status() Status        { return p.Stat }
func (p *DeviceSecondFactorAuthentication) UntypedV() interface{} { return p.Val }
func (p *DeviceSecondFactorAuthentication) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceSecondFactorAuthentication) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 376. EcryptfsMigrationStrategy
///////////////////////////////////////////////////////////////////////////////
type EcryptfsMigrationStrategy struct {
	Stat Status
	Val  int
}

func (p *EcryptfsMigrationStrategy) Name() string          { return "EcryptfsMigrationStrategy" }
func (p *EcryptfsMigrationStrategy) Field() string         { return "" }
func (p *EcryptfsMigrationStrategy) Scope() Scope          { return ScopeUser }
func (p *EcryptfsMigrationStrategy) Status() Status        { return p.Stat }
func (p *EcryptfsMigrationStrategy) UntypedV() interface{} { return p.Val }
func (p *EcryptfsMigrationStrategy) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *EcryptfsMigrationStrategy) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 377. NoteTakingAppsLockScreenWhitelist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type NoteTakingAppsLockScreenWhitelist struct {
	Stat Status
	Val  []string
}

func (p *NoteTakingAppsLockScreenWhitelist) Name() string          { return "NoteTakingAppsLockScreenWhitelist" }
func (p *NoteTakingAppsLockScreenWhitelist) Field() string         { return "" }
func (p *NoteTakingAppsLockScreenWhitelist) Scope() Scope          { return ScopeUser }
func (p *NoteTakingAppsLockScreenWhitelist) Status() Status        { return p.Stat }
func (p *NoteTakingAppsLockScreenWhitelist) UntypedV() interface{} { return p.Val }
func (p *NoteTakingAppsLockScreenWhitelist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *NoteTakingAppsLockScreenWhitelist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 378. CastReceiverEnabled
// This policy has a default value of False.
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CastReceiverEnabled struct {
	Stat Status
	Val  bool
}

func (p *CastReceiverEnabled) Name() string          { return "CastReceiverEnabled" }
func (p *CastReceiverEnabled) Field() string         { return "" }
func (p *CastReceiverEnabled) Scope() Scope          { return ScopeUser }
func (p *CastReceiverEnabled) Status() Status        { return p.Stat }
func (p *CastReceiverEnabled) UntypedV() interface{} { return p.Val }
func (p *CastReceiverEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *CastReceiverEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 379. CastReceiverName
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CastReceiverName struct {
	Stat Status
	Val  string
}

func (p *CastReceiverName) Name() string          { return "CastReceiverName" }
func (p *CastReceiverName) Field() string         { return "cast_receiver_name.name" }
func (p *CastReceiverName) Scope() Scope          { return ScopeDevice }
func (p *CastReceiverName) Status() Status        { return p.Stat }
func (p *CastReceiverName) UntypedV() interface{} { return p.Val }
func (p *CastReceiverName) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *CastReceiverName) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 380. DeviceOffHours
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceOffHours struct {
	Stat Status
	Val  *DeviceOffHoursValue
}

type DeviceOffHoursValue struct {
	IgnoredPolicyProtoTags []int                     `json:"ignored_policy_proto_tags"`
	Intervals              []*RefWeeklyTimeIntervals `json:"intervals"`
	Timezone               string                    `json:"timezone"`
}

func (p *DeviceOffHours) Name() string          { return "DeviceOffHours" }
func (p *DeviceOffHours) Field() string         { return "device_off_hours.ignored_policy_proto_tags" }
func (p *DeviceOffHours) Scope() Scope          { return ScopeDevice }
func (p *DeviceOffHours) Status() Status        { return p.Stat }
func (p *DeviceOffHours) UntypedV() interface{} { return p.Val }
func (p *DeviceOffHours) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *DeviceOffHoursValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *DeviceOffHoursValue", m)
	}
	return v, nil
}
func (p *DeviceOffHours) Equal(iface interface{}) bool {
	v, ok := iface.(*DeviceOffHoursValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 382. NativePrintersBulkConfiguration
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type NativePrintersBulkConfiguration struct {
	Stat Status
	Val  *NativePrintersBulkConfigurationValue
}

type NativePrintersBulkConfigurationValue struct {
	Hash string `json:"hash"`
	Url  string `json:"url"`
}

func (p *NativePrintersBulkConfiguration) Name() string          { return "NativePrintersBulkConfiguration" }
func (p *NativePrintersBulkConfiguration) Field() string         { return "" }
func (p *NativePrintersBulkConfiguration) Scope() Scope          { return ScopeUser }
func (p *NativePrintersBulkConfiguration) Status() Status        { return p.Stat }
func (p *NativePrintersBulkConfiguration) UntypedV() interface{} { return p.Val }
func (p *NativePrintersBulkConfiguration) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *NativePrintersBulkConfigurationValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *NativePrintersBulkConfigurationValue", m)
	}
	return v, nil
}
func (p *NativePrintersBulkConfiguration) Equal(iface interface{}) bool {
	v, ok := iface.(*NativePrintersBulkConfigurationValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 383. NativePrintersBulkAccessMode
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type NativePrintersBulkAccessMode struct {
	Stat Status
	Val  int
}

func (p *NativePrintersBulkAccessMode) Name() string          { return "NativePrintersBulkAccessMode" }
func (p *NativePrintersBulkAccessMode) Field() string         { return "" }
func (p *NativePrintersBulkAccessMode) Scope() Scope          { return ScopeUser }
func (p *NativePrintersBulkAccessMode) Status() Status        { return p.Stat }
func (p *NativePrintersBulkAccessMode) UntypedV() interface{} { return p.Val }
func (p *NativePrintersBulkAccessMode) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *NativePrintersBulkAccessMode) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 384. NativePrintersBulkBlacklist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type NativePrintersBulkBlacklist struct {
	Stat Status
	Val  []string
}

func (p *NativePrintersBulkBlacklist) Name() string          { return "NativePrintersBulkBlacklist" }
func (p *NativePrintersBulkBlacklist) Field() string         { return "" }
func (p *NativePrintersBulkBlacklist) Scope() Scope          { return ScopeUser }
func (p *NativePrintersBulkBlacklist) Status() Status        { return p.Stat }
func (p *NativePrintersBulkBlacklist) UntypedV() interface{} { return p.Val }
func (p *NativePrintersBulkBlacklist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *NativePrintersBulkBlacklist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 385. NativePrintersBulkWhitelist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type NativePrintersBulkWhitelist struct {
	Stat Status
	Val  []string
}

func (p *NativePrintersBulkWhitelist) Name() string          { return "NativePrintersBulkWhitelist" }
func (p *NativePrintersBulkWhitelist) Field() string         { return "" }
func (p *NativePrintersBulkWhitelist) Scope() Scope          { return ScopeUser }
func (p *NativePrintersBulkWhitelist) Status() Status        { return p.Stat }
func (p *NativePrintersBulkWhitelist) UntypedV() interface{} { return p.Val }
func (p *NativePrintersBulkWhitelist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *NativePrintersBulkWhitelist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 386. DeviceNativePrinters
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceNativePrinters struct {
	Stat Status
	Val  *DeviceNativePrintersValue
}

type DeviceNativePrintersValue struct {
	Hash string `json:"hash"`
	Url  string `json:"url"`
}

func (p *DeviceNativePrinters) Name() string          { return "DeviceNativePrinters" }
func (p *DeviceNativePrinters) Field() string         { return "native_device_printers.external_policy" }
func (p *DeviceNativePrinters) Scope() Scope          { return ScopeDevice }
func (p *DeviceNativePrinters) Status() Status        { return p.Stat }
func (p *DeviceNativePrinters) UntypedV() interface{} { return p.Val }
func (p *DeviceNativePrinters) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *DeviceNativePrintersValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *DeviceNativePrintersValue", m)
	}
	return v, nil
}
func (p *DeviceNativePrinters) Equal(iface interface{}) bool {
	v, ok := iface.(*DeviceNativePrintersValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 387. DeviceNativePrintersAccessMode
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceNativePrintersAccessMode struct {
	Stat Status
	Val  int
}

func (p *DeviceNativePrintersAccessMode) Name() string { return "DeviceNativePrintersAccessMode" }
func (p *DeviceNativePrintersAccessMode) Field() string {
	return "native_device_printers_access_mode.access_mode"
}
func (p *DeviceNativePrintersAccessMode) Scope() Scope          { return ScopeDevice }
func (p *DeviceNativePrintersAccessMode) Status() Status        { return p.Stat }
func (p *DeviceNativePrintersAccessMode) UntypedV() interface{} { return p.Val }
func (p *DeviceNativePrintersAccessMode) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceNativePrintersAccessMode) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 388. DeviceNativePrintersBlacklist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceNativePrintersBlacklist struct {
	Stat Status
	Val  []string
}

func (p *DeviceNativePrintersBlacklist) Name() string { return "DeviceNativePrintersBlacklist" }
func (p *DeviceNativePrintersBlacklist) Field() string {
	return "native_device_printers_blacklist.blacklist"
}
func (p *DeviceNativePrintersBlacklist) Scope() Scope          { return ScopeDevice }
func (p *DeviceNativePrintersBlacklist) Status() Status        { return p.Stat }
func (p *DeviceNativePrintersBlacklist) UntypedV() interface{} { return p.Val }
func (p *DeviceNativePrintersBlacklist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DeviceNativePrintersBlacklist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 389. DeviceNativePrintersWhitelist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceNativePrintersWhitelist struct {
	Stat Status
	Val  []string
}

func (p *DeviceNativePrintersWhitelist) Name() string { return "DeviceNativePrintersWhitelist" }
func (p *DeviceNativePrintersWhitelist) Field() string {
	return "native_device_printers_whitelist.whitelist"
}
func (p *DeviceNativePrintersWhitelist) Scope() Scope          { return ScopeDevice }
func (p *DeviceNativePrintersWhitelist) Status() Status        { return p.Stat }
func (p *DeviceNativePrintersWhitelist) UntypedV() interface{} { return p.Val }
func (p *DeviceNativePrintersWhitelist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DeviceNativePrintersWhitelist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 390. TPMFirmwareUpdateSettings
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type TPMFirmwareUpdateSettings struct {
	Stat Status
	Val  *TPMFirmwareUpdateSettingsValue
}

type TPMFirmwareUpdateSettingsValue struct {
	AllowUserInitiatedPowerwash           bool `json:"allow-user-initiated-powerwash"`
	AllowUserInitiatedPreserveDeviceState bool `json:"allow-user-initiated-preserve-device-state"`
	AutoUpdateMode                        int  `json:"auto-update-mode"`
}

func (p *TPMFirmwareUpdateSettings) Name() string { return "TPMFirmwareUpdateSettings" }
func (p *TPMFirmwareUpdateSettings) Field() string {
	return "tpm_firmware_update_settings.allow_user_initiated_preserve_device_state"
}
func (p *TPMFirmwareUpdateSettings) Scope() Scope          { return ScopeDevice }
func (p *TPMFirmwareUpdateSettings) Status() Status        { return p.Stat }
func (p *TPMFirmwareUpdateSettings) UntypedV() interface{} { return p.Val }
func (p *TPMFirmwareUpdateSettings) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *TPMFirmwareUpdateSettingsValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *TPMFirmwareUpdateSettingsValue", m)
	}
	return v, nil
}
func (p *TPMFirmwareUpdateSettings) Equal(iface interface{}) bool {
	v, ok := iface.(*TPMFirmwareUpdateSettingsValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 391. RunAllFlashInAllowMode
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RunAllFlashInAllowMode struct {
	Stat Status
	Val  bool
}

func (p *RunAllFlashInAllowMode) Name() string          { return "RunAllFlashInAllowMode" }
func (p *RunAllFlashInAllowMode) Field() string         { return "" }
func (p *RunAllFlashInAllowMode) Scope() Scope          { return ScopeUser }
func (p *RunAllFlashInAllowMode) Status() Status        { return p.Stat }
func (p *RunAllFlashInAllowMode) UntypedV() interface{} { return p.Val }
func (p *RunAllFlashInAllowMode) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *RunAllFlashInAllowMode) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 392. AutofillCreditCardEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AutofillCreditCardEnabled struct {
	Stat Status
	Val  bool
}

func (p *AutofillCreditCardEnabled) Name() string          { return "AutofillCreditCardEnabled" }
func (p *AutofillCreditCardEnabled) Field() string         { return "" }
func (p *AutofillCreditCardEnabled) Scope() Scope          { return ScopeUser }
func (p *AutofillCreditCardEnabled) Status() Status        { return p.Stat }
func (p *AutofillCreditCardEnabled) UntypedV() interface{} { return p.Val }
func (p *AutofillCreditCardEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AutofillCreditCardEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 393. NtlmV2Enabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type NtlmV2Enabled struct {
	Stat Status
	Val  bool
}

func (p *NtlmV2Enabled) Name() string          { return "NtlmV2Enabled" }
func (p *NtlmV2Enabled) Field() string         { return "" }
func (p *NtlmV2Enabled) Scope() Scope          { return ScopeUser }
func (p *NtlmV2Enabled) Status() Status        { return p.Stat }
func (p *NtlmV2Enabled) UntypedV() interface{} { return p.Val }
func (p *NtlmV2Enabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *NtlmV2Enabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 395. PromptForDownloadLocation
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PromptForDownloadLocation struct {
	Stat Status
	Val  bool
}

func (p *PromptForDownloadLocation) Name() string          { return "PromptForDownloadLocation" }
func (p *PromptForDownloadLocation) Field() string         { return "" }
func (p *PromptForDownloadLocation) Scope() Scope          { return ScopeUser }
func (p *PromptForDownloadLocation) Status() Status        { return p.Stat }
func (p *PromptForDownloadLocation) UntypedV() interface{} { return p.Val }
func (p *PromptForDownloadLocation) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PromptForDownloadLocation) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 396. DeviceLoginScreenAutoSelectCertificateForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenAutoSelectCertificateForUrls struct {
	Stat Status
	Val  []string
}

func (p *DeviceLoginScreenAutoSelectCertificateForUrls) Name() string {
	return "DeviceLoginScreenAutoSelectCertificateForUrls"
}
func (p *DeviceLoginScreenAutoSelectCertificateForUrls) Field() string {
	return "device_login_screen_auto_select_certificate_for_urls.login_screen_auto_select_certificate_rules"
}
func (p *DeviceLoginScreenAutoSelectCertificateForUrls) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenAutoSelectCertificateForUrls) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenAutoSelectCertificateForUrls) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenAutoSelectCertificateForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenAutoSelectCertificateForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 397. UnaffiliatedArcAllowed
///////////////////////////////////////////////////////////////////////////////
type UnaffiliatedArcAllowed struct {
	Stat Status
	Val  bool
}

func (p *UnaffiliatedArcAllowed) Name() string { return "UnaffiliatedArcAllowed" }
func (p *UnaffiliatedArcAllowed) Field() string {
	return "unaffiliated_arc_allowed.unaffiliated_arc_allowed"
}
func (p *UnaffiliatedArcAllowed) Scope() Scope          { return ScopeDevice }
func (p *UnaffiliatedArcAllowed) Status() Status        { return p.Stat }
func (p *UnaffiliatedArcAllowed) UntypedV() interface{} { return p.Val }
func (p *UnaffiliatedArcAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *UnaffiliatedArcAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 398. IsolateOrigins
///////////////////////////////////////////////////////////////////////////////
type IsolateOrigins struct {
	Stat Status
	Val  string
}

func (p *IsolateOrigins) Name() string          { return "IsolateOrigins" }
func (p *IsolateOrigins) Field() string         { return "" }
func (p *IsolateOrigins) Scope() Scope          { return ScopeUser }
func (p *IsolateOrigins) Status() Status        { return p.Stat }
func (p *IsolateOrigins) UntypedV() interface{} { return p.Val }
func (p *IsolateOrigins) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *IsolateOrigins) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 399. SitePerProcess
///////////////////////////////////////////////////////////////////////////////
type SitePerProcess struct {
	Stat Status
	Val  bool
}

func (p *SitePerProcess) Name() string          { return "SitePerProcess" }
func (p *SitePerProcess) Field() string         { return "" }
func (p *SitePerProcess) Scope() Scope          { return ScopeUser }
func (p *SitePerProcess) Status() Status        { return p.Stat }
func (p *SitePerProcess) UntypedV() interface{} { return p.Val }
func (p *SitePerProcess) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SitePerProcess) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 401. DefaultDownloadDirectory
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultDownloadDirectory struct {
	Stat Status
	Val  string
}

func (p *DefaultDownloadDirectory) Name() string          { return "DefaultDownloadDirectory" }
func (p *DefaultDownloadDirectory) Field() string         { return "" }
func (p *DefaultDownloadDirectory) Scope() Scope          { return ScopeUser }
func (p *DefaultDownloadDirectory) Status() Status        { return p.Stat }
func (p *DefaultDownloadDirectory) UntypedV() interface{} { return p.Val }
func (p *DefaultDownloadDirectory) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DefaultDownloadDirectory) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 402. SecurityKeyPermitAttestation
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SecurityKeyPermitAttestation struct {
	Stat Status
	Val  []string
}

func (p *SecurityKeyPermitAttestation) Name() string          { return "SecurityKeyPermitAttestation" }
func (p *SecurityKeyPermitAttestation) Field() string         { return "" }
func (p *SecurityKeyPermitAttestation) Scope() Scope          { return ScopeUser }
func (p *SecurityKeyPermitAttestation) Status() Status        { return p.Stat }
func (p *SecurityKeyPermitAttestation) UntypedV() interface{} { return p.Val }
func (p *SecurityKeyPermitAttestation) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *SecurityKeyPermitAttestation) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 403. DeviceHostnameTemplate
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceHostnameTemplate struct {
	Stat Status
	Val  string
}

func (p *DeviceHostnameTemplate) Name() string          { return "DeviceHostnameTemplate" }
func (p *DeviceHostnameTemplate) Field() string         { return "network_hostname.device_hostname_template" }
func (p *DeviceHostnameTemplate) Scope() Scope          { return ScopeDevice }
func (p *DeviceHostnameTemplate) Status() Status        { return p.Stat }
func (p *DeviceHostnameTemplate) UntypedV() interface{} { return p.Val }
func (p *DeviceHostnameTemplate) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DeviceHostnameTemplate) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 404. AbusiveExperienceInterventionEnforce
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AbusiveExperienceInterventionEnforce struct {
	Stat Status
	Val  bool
}

func (p *AbusiveExperienceInterventionEnforce) Name() string {
	return "AbusiveExperienceInterventionEnforce"
}
func (p *AbusiveExperienceInterventionEnforce) Field() string         { return "" }
func (p *AbusiveExperienceInterventionEnforce) Scope() Scope          { return ScopeUser }
func (p *AbusiveExperienceInterventionEnforce) Status() Status        { return p.Stat }
func (p *AbusiveExperienceInterventionEnforce) UntypedV() interface{} { return p.Val }
func (p *AbusiveExperienceInterventionEnforce) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AbusiveExperienceInterventionEnforce) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 405. SpellcheckLanguage
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SpellcheckLanguage struct {
	Stat Status
	Val  []string
}

func (p *SpellcheckLanguage) Name() string          { return "SpellcheckLanguage" }
func (p *SpellcheckLanguage) Field() string         { return "" }
func (p *SpellcheckLanguage) Scope() Scope          { return ScopeUser }
func (p *SpellcheckLanguage) Status() Status        { return p.Stat }
func (p *SpellcheckLanguage) UntypedV() interface{} { return p.Val }
func (p *SpellcheckLanguage) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *SpellcheckLanguage) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 406. SecondaryGoogleAccountSigninAllowed
///////////////////////////////////////////////////////////////////////////////
type SecondaryGoogleAccountSigninAllowed struct {
	Stat Status
	Val  bool
}

func (p *SecondaryGoogleAccountSigninAllowed) Name() string {
	return "SecondaryGoogleAccountSigninAllowed"
}
func (p *SecondaryGoogleAccountSigninAllowed) Field() string         { return "" }
func (p *SecondaryGoogleAccountSigninAllowed) Scope() Scope          { return ScopeUser }
func (p *SecondaryGoogleAccountSigninAllowed) Status() Status        { return p.Stat }
func (p *SecondaryGoogleAccountSigninAllowed) UntypedV() interface{} { return p.Val }
func (p *SecondaryGoogleAccountSigninAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SecondaryGoogleAccountSigninAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 408. SpellcheckEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SpellcheckEnabled struct {
	Stat Status
	Val  bool
}

func (p *SpellcheckEnabled) Name() string          { return "SpellcheckEnabled" }
func (p *SpellcheckEnabled) Field() string         { return "" }
func (p *SpellcheckEnabled) Scope() Scope          { return ScopeUser }
func (p *SpellcheckEnabled) Status() Status        { return p.Stat }
func (p *SpellcheckEnabled) UntypedV() interface{} { return p.Val }
func (p *SpellcheckEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SpellcheckEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 409. AdsSettingForIntrusiveAdsSites
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AdsSettingForIntrusiveAdsSites struct {
	Stat Status
	Val  int
}

func (p *AdsSettingForIntrusiveAdsSites) Name() string          { return "AdsSettingForIntrusiveAdsSites" }
func (p *AdsSettingForIntrusiveAdsSites) Field() string         { return "" }
func (p *AdsSettingForIntrusiveAdsSites) Scope() Scope          { return ScopeUser }
func (p *AdsSettingForIntrusiveAdsSites) Status() Status        { return p.Stat }
func (p *AdsSettingForIntrusiveAdsSites) UntypedV() interface{} { return p.Val }
func (p *AdsSettingForIntrusiveAdsSites) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *AdsSettingForIntrusiveAdsSites) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 411. PasswordProtectionWarningTrigger
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PasswordProtectionWarningTrigger struct {
	Stat Status
	Val  int
}

func (p *PasswordProtectionWarningTrigger) Name() string          { return "PasswordProtectionWarningTrigger" }
func (p *PasswordProtectionWarningTrigger) Field() string         { return "" }
func (p *PasswordProtectionWarningTrigger) Scope() Scope          { return ScopeUser }
func (p *PasswordProtectionWarningTrigger) Status() Status        { return p.Stat }
func (p *PasswordProtectionWarningTrigger) UntypedV() interface{} { return p.Val }
func (p *PasswordProtectionWarningTrigger) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *PasswordProtectionWarningTrigger) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 415. DeviceKerberosEncryptionTypes
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceKerberosEncryptionTypes struct {
	Stat Status
	Val  int
}

func (p *DeviceKerberosEncryptionTypes) Name() string { return "DeviceKerberosEncryptionTypes" }
func (p *DeviceKerberosEncryptionTypes) Field() string {
	return "device_kerberos_encryption_types.types"
}
func (p *DeviceKerberosEncryptionTypes) Scope() Scope          { return ScopeDevice }
func (p *DeviceKerberosEncryptionTypes) Status() Status        { return p.Stat }
func (p *DeviceKerberosEncryptionTypes) UntypedV() interface{} { return p.Val }
func (p *DeviceKerberosEncryptionTypes) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceKerberosEncryptionTypes) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 416. DeviceUserPolicyLoopbackProcessingMode
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceUserPolicyLoopbackProcessingMode struct {
	Stat Status
	Val  int
}

func (p *DeviceUserPolicyLoopbackProcessingMode) Name() string {
	return "DeviceUserPolicyLoopbackProcessingMode"
}
func (p *DeviceUserPolicyLoopbackProcessingMode) Field() string {
	return "device_user_policy_loopback_processing_mode.mode"
}
func (p *DeviceUserPolicyLoopbackProcessingMode) Scope() Scope          { return ScopeDevice }
func (p *DeviceUserPolicyLoopbackProcessingMode) Status() Status        { return p.Stat }
func (p *DeviceUserPolicyLoopbackProcessingMode) UntypedV() interface{} { return p.Val }
func (p *DeviceUserPolicyLoopbackProcessingMode) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceUserPolicyLoopbackProcessingMode) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 417. DeviceLoginScreenIsolateOrigins
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenIsolateOrigins struct {
	Stat Status
	Val  string
}

func (p *DeviceLoginScreenIsolateOrigins) Name() string { return "DeviceLoginScreenIsolateOrigins" }
func (p *DeviceLoginScreenIsolateOrigins) Field() string {
	return "device_login_screen_isolate_origins.isolate_origins"
}
func (p *DeviceLoginScreenIsolateOrigins) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenIsolateOrigins) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenIsolateOrigins) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenIsolateOrigins) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenIsolateOrigins) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 419. RelaunchNotification
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RelaunchNotification struct {
	Stat Status
	Val  int
}

func (p *RelaunchNotification) Name() string          { return "RelaunchNotification" }
func (p *RelaunchNotification) Field() string         { return "" }
func (p *RelaunchNotification) Scope() Scope          { return ScopeUser }
func (p *RelaunchNotification) Status() Status        { return p.Stat }
func (p *RelaunchNotification) UntypedV() interface{} { return p.Val }
func (p *RelaunchNotification) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *RelaunchNotification) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 420. RelaunchNotificationPeriod
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RelaunchNotificationPeriod struct {
	Stat Status
	Val  int
}

func (p *RelaunchNotificationPeriod) Name() string          { return "RelaunchNotificationPeriod" }
func (p *RelaunchNotificationPeriod) Field() string         { return "" }
func (p *RelaunchNotificationPeriod) Scope() Scope          { return ScopeUser }
func (p *RelaunchNotificationPeriod) Status() Status        { return p.Stat }
func (p *RelaunchNotificationPeriod) UntypedV() interface{} { return p.Val }
func (p *RelaunchNotificationPeriod) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *RelaunchNotificationPeriod) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 421. VirtualMachinesAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type VirtualMachinesAllowed struct {
	Stat Status
	Val  bool
}

func (p *VirtualMachinesAllowed) Name() string { return "VirtualMachinesAllowed" }
func (p *VirtualMachinesAllowed) Field() string {
	return "virtual_machines_allowed.virtual_machines_allowed"
}
func (p *VirtualMachinesAllowed) Scope() Scope          { return ScopeDevice }
func (p *VirtualMachinesAllowed) Status() Status        { return p.Stat }
func (p *VirtualMachinesAllowed) UntypedV() interface{} { return p.Val }
func (p *VirtualMachinesAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *VirtualMachinesAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 422. SafeBrowsingWhitelistDomains
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SafeBrowsingWhitelistDomains struct {
	Stat Status
	Val  []string
}

func (p *SafeBrowsingWhitelistDomains) Name() string          { return "SafeBrowsingWhitelistDomains" }
func (p *SafeBrowsingWhitelistDomains) Field() string         { return "" }
func (p *SafeBrowsingWhitelistDomains) Scope() Scope          { return ScopeUser }
func (p *SafeBrowsingWhitelistDomains) Status() Status        { return p.Stat }
func (p *SafeBrowsingWhitelistDomains) UntypedV() interface{} { return p.Val }
func (p *SafeBrowsingWhitelistDomains) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *SafeBrowsingWhitelistDomains) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 423. PasswordProtectionLoginURLs
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PasswordProtectionLoginURLs struct {
	Stat Status
	Val  []string
}

func (p *PasswordProtectionLoginURLs) Name() string          { return "PasswordProtectionLoginURLs" }
func (p *PasswordProtectionLoginURLs) Field() string         { return "" }
func (p *PasswordProtectionLoginURLs) Scope() Scope          { return ScopeUser }
func (p *PasswordProtectionLoginURLs) Status() Status        { return p.Stat }
func (p *PasswordProtectionLoginURLs) UntypedV() interface{} { return p.Val }
func (p *PasswordProtectionLoginURLs) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *PasswordProtectionLoginURLs) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 424. PasswordProtectionChangePasswordURL
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PasswordProtectionChangePasswordURL struct {
	Stat Status
	Val  string
}

func (p *PasswordProtectionChangePasswordURL) Name() string {
	return "PasswordProtectionChangePasswordURL"
}
func (p *PasswordProtectionChangePasswordURL) Field() string         { return "" }
func (p *PasswordProtectionChangePasswordURL) Scope() Scope          { return ScopeUser }
func (p *PasswordProtectionChangePasswordURL) Status() Status        { return p.Stat }
func (p *PasswordProtectionChangePasswordURL) UntypedV() interface{} { return p.Val }
func (p *PasswordProtectionChangePasswordURL) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *PasswordProtectionChangePasswordURL) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 425. DeviceMachinePasswordChangeRate
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceMachinePasswordChangeRate struct {
	Stat Status
	Val  int
}

func (p *DeviceMachinePasswordChangeRate) Name() string { return "DeviceMachinePasswordChangeRate" }
func (p *DeviceMachinePasswordChangeRate) Field() string {
	return "device_machine_password_change_rate.rate_days"
}
func (p *DeviceMachinePasswordChangeRate) Scope() Scope          { return ScopeDevice }
func (p *DeviceMachinePasswordChangeRate) Status() Status        { return p.Stat }
func (p *DeviceMachinePasswordChangeRate) UntypedV() interface{} { return p.Val }
func (p *DeviceMachinePasswordChangeRate) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceMachinePasswordChangeRate) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 426. DeviceRollbackAllowedMilestones
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceRollbackAllowedMilestones struct {
	Stat Status
	Val  int
}

func (p *DeviceRollbackAllowedMilestones) Name() string { return "DeviceRollbackAllowedMilestones" }
func (p *DeviceRollbackAllowedMilestones) Field() string {
	return "auto_update_settings.rollback_allowed_milestones"
}
func (p *DeviceRollbackAllowedMilestones) Scope() Scope          { return ScopeDevice }
func (p *DeviceRollbackAllowedMilestones) Status() Status        { return p.Stat }
func (p *DeviceRollbackAllowedMilestones) UntypedV() interface{} { return p.Val }
func (p *DeviceRollbackAllowedMilestones) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceRollbackAllowedMilestones) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 427. DeviceRollbackToTargetVersion
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceRollbackToTargetVersion struct {
	Stat Status
	Val  int
}

func (p *DeviceRollbackToTargetVersion) Name() string { return "DeviceRollbackToTargetVersion" }
func (p *DeviceRollbackToTargetVersion) Field() string {
	return "auto_update_settings.rollback_to_target_version"
}
func (p *DeviceRollbackToTargetVersion) Scope() Scope          { return ScopeDevice }
func (p *DeviceRollbackToTargetVersion) Status() Status        { return p.Stat }
func (p *DeviceRollbackToTargetVersion) UntypedV() interface{} { return p.Val }
func (p *DeviceRollbackToTargetVersion) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceRollbackToTargetVersion) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 429. SafeBrowsingExtendedReportingEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SafeBrowsingExtendedReportingEnabled struct {
	Stat Status
	Val  bool
}

func (p *SafeBrowsingExtendedReportingEnabled) Name() string {
	return "SafeBrowsingExtendedReportingEnabled"
}
func (p *SafeBrowsingExtendedReportingEnabled) Field() string         { return "" }
func (p *SafeBrowsingExtendedReportingEnabled) Scope() Scope          { return ScopeUser }
func (p *SafeBrowsingExtendedReportingEnabled) Status() Status        { return p.Stat }
func (p *SafeBrowsingExtendedReportingEnabled) UntypedV() interface{} { return p.Val }
func (p *SafeBrowsingExtendedReportingEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SafeBrowsingExtendedReportingEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 430. AutoplayAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AutoplayAllowed struct {
	Stat Status
	Val  bool
}

func (p *AutoplayAllowed) Name() string          { return "AutoplayAllowed" }
func (p *AutoplayAllowed) Field() string         { return "" }
func (p *AutoplayAllowed) Scope() Scope          { return ScopeUser }
func (p *AutoplayAllowed) Status() Status        { return p.Stat }
func (p *AutoplayAllowed) UntypedV() interface{} { return p.Val }
func (p *AutoplayAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AutoplayAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 431. AutoplayWhitelist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AutoplayWhitelist struct {
	Stat Status
	Val  []string
}

func (p *AutoplayWhitelist) Name() string          { return "AutoplayWhitelist" }
func (p *AutoplayWhitelist) Field() string         { return "" }
func (p *AutoplayWhitelist) Scope() Scope          { return ScopeUser }
func (p *AutoplayWhitelist) Status() Status        { return p.Stat }
func (p *AutoplayWhitelist) UntypedV() interface{} { return p.Val }
func (p *AutoplayWhitelist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *AutoplayWhitelist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 433. UserNativePrintersAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type UserNativePrintersAllowed struct {
	Stat Status
	Val  bool
}

func (p *UserNativePrintersAllowed) Name() string          { return "UserNativePrintersAllowed" }
func (p *UserNativePrintersAllowed) Field() string         { return "" }
func (p *UserNativePrintersAllowed) Scope() Scope          { return ScopeUser }
func (p *UserNativePrintersAllowed) Status() Status        { return p.Stat }
func (p *UserNativePrintersAllowed) UntypedV() interface{} { return p.Val }
func (p *UserNativePrintersAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *UserNativePrintersAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 434. DefaultWebUsbGuardSetting
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultWebUsbGuardSetting struct {
	Stat Status
	Val  int
}

func (p *DefaultWebUsbGuardSetting) Name() string          { return "DefaultWebUsbGuardSetting" }
func (p *DefaultWebUsbGuardSetting) Field() string         { return "" }
func (p *DefaultWebUsbGuardSetting) Scope() Scope          { return ScopeUser }
func (p *DefaultWebUsbGuardSetting) Status() Status        { return p.Stat }
func (p *DefaultWebUsbGuardSetting) UntypedV() interface{} { return p.Val }
func (p *DefaultWebUsbGuardSetting) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DefaultWebUsbGuardSetting) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 435. CertificateTransparencyEnforcementDisabledForCas
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CertificateTransparencyEnforcementDisabledForCas struct {
	Stat Status
	Val  []string
}

func (p *CertificateTransparencyEnforcementDisabledForCas) Name() string {
	return "CertificateTransparencyEnforcementDisabledForCas"
}
func (p *CertificateTransparencyEnforcementDisabledForCas) Field() string         { return "" }
func (p *CertificateTransparencyEnforcementDisabledForCas) Scope() Scope          { return ScopeUser }
func (p *CertificateTransparencyEnforcementDisabledForCas) Status() Status        { return p.Stat }
func (p *CertificateTransparencyEnforcementDisabledForCas) UntypedV() interface{} { return p.Val }
func (p *CertificateTransparencyEnforcementDisabledForCas) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *CertificateTransparencyEnforcementDisabledForCas) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 436. CertificateTransparencyEnforcementDisabledForLegacyCas
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CertificateTransparencyEnforcementDisabledForLegacyCas struct {
	Stat Status
	Val  []string
}

func (p *CertificateTransparencyEnforcementDisabledForLegacyCas) Name() string {
	return "CertificateTransparencyEnforcementDisabledForLegacyCas"
}
func (p *CertificateTransparencyEnforcementDisabledForLegacyCas) Field() string         { return "" }
func (p *CertificateTransparencyEnforcementDisabledForLegacyCas) Scope() Scope          { return ScopeUser }
func (p *CertificateTransparencyEnforcementDisabledForLegacyCas) Status() Status        { return p.Stat }
func (p *CertificateTransparencyEnforcementDisabledForLegacyCas) UntypedV() interface{} { return p.Val }
func (p *CertificateTransparencyEnforcementDisabledForLegacyCas) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *CertificateTransparencyEnforcementDisabledForLegacyCas) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 437. MediaRouterCastAllowAllIPs
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type MediaRouterCastAllowAllIPs struct {
	Stat Status
	Val  bool
}

func (p *MediaRouterCastAllowAllIPs) Name() string          { return "MediaRouterCastAllowAllIPs" }
func (p *MediaRouterCastAllowAllIPs) Field() string         { return "" }
func (p *MediaRouterCastAllowAllIPs) Scope() Scope          { return ScopeUser }
func (p *MediaRouterCastAllowAllIPs) Status() Status        { return p.Stat }
func (p *MediaRouterCastAllowAllIPs) UntypedV() interface{} { return p.Val }
func (p *MediaRouterCastAllowAllIPs) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *MediaRouterCastAllowAllIPs) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 439. WebUsbAskForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type WebUsbAskForUrls struct {
	Stat Status
	Val  []string
}

func (p *WebUsbAskForUrls) Name() string          { return "WebUsbAskForUrls" }
func (p *WebUsbAskForUrls) Field() string         { return "" }
func (p *WebUsbAskForUrls) Scope() Scope          { return ScopeUser }
func (p *WebUsbAskForUrls) Status() Status        { return p.Stat }
func (p *WebUsbAskForUrls) UntypedV() interface{} { return p.Val }
func (p *WebUsbAskForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *WebUsbAskForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 440. WebUsbBlockedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type WebUsbBlockedForUrls struct {
	Stat Status
	Val  []string
}

func (p *WebUsbBlockedForUrls) Name() string          { return "WebUsbBlockedForUrls" }
func (p *WebUsbBlockedForUrls) Field() string         { return "" }
func (p *WebUsbBlockedForUrls) Scope() Scope          { return ScopeUser }
func (p *WebUsbBlockedForUrls) Status() Status        { return p.Stat }
func (p *WebUsbBlockedForUrls) UntypedV() interface{} { return p.Val }
func (p *WebUsbBlockedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *WebUsbBlockedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 443. DeveloperToolsAvailability
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeveloperToolsAvailability struct {
	Stat Status
	Val  int
}

func (p *DeveloperToolsAvailability) Name() string          { return "DeveloperToolsAvailability" }
func (p *DeveloperToolsAvailability) Field() string         { return "" }
func (p *DeveloperToolsAvailability) Scope() Scope          { return ScopeUser }
func (p *DeveloperToolsAvailability) Status() Status        { return p.Stat }
func (p *DeveloperToolsAvailability) UntypedV() interface{} { return p.Val }
func (p *DeveloperToolsAvailability) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeveloperToolsAvailability) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 444. AllowedLanguages
///////////////////////////////////////////////////////////////////////////////
type AllowedLanguages struct {
	Stat Status
	Val  []string
}

func (p *AllowedLanguages) Name() string          { return "AllowedLanguages" }
func (p *AllowedLanguages) Field() string         { return "" }
func (p *AllowedLanguages) Scope() Scope          { return ScopeUser }
func (p *AllowedLanguages) Status() Status        { return p.Stat }
func (p *AllowedLanguages) UntypedV() interface{} { return p.Val }
func (p *AllowedLanguages) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *AllowedLanguages) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 447. ArcAppInstallEventLoggingEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ArcAppInstallEventLoggingEnabled struct {
	Stat Status
	Val  bool
}

func (p *ArcAppInstallEventLoggingEnabled) Name() string          { return "ArcAppInstallEventLoggingEnabled" }
func (p *ArcAppInstallEventLoggingEnabled) Field() string         { return "" }
func (p *ArcAppInstallEventLoggingEnabled) Scope() Scope          { return ScopeUser }
func (p *ArcAppInstallEventLoggingEnabled) Status() Status        { return p.Stat }
func (p *ArcAppInstallEventLoggingEnabled) UntypedV() interface{} { return p.Val }
func (p *ArcAppInstallEventLoggingEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ArcAppInstallEventLoggingEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 448. UsageTimeLimit
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type UsageTimeLimit struct {
	Stat Status
	Val  *UsageTimeLimitValue
}

type UsageTimeLimitValue struct {
	Overrides       []*UsageTimeLimitValueOverrides     `json:"overrides"`
	TimeUsageLimit  *UsageTimeLimitValueTimeUsageLimit  `json:"time_usage_limit"`
	TimeWindowLimit *UsageTimeLimitValueTimeWindowLimit `json:"time_window_limit"`
}

type UsageTimeLimitValueOverrides struct {
	Action             string                                          `json:"action"`
	ActionSpecificData *UsageTimeLimitValueOverridesActionSpecificData `json:"action_specific_data"`
	CreatedAtMillis    string                                          `json:"created_at_millis"`
}

type UsageTimeLimitValueOverridesActionSpecificData struct {
	DurationMins int `json:"duration_mins"`
}

type UsageTimeLimitValueTimeWindowLimit struct {
	Entries []*UsageTimeLimitValueTimeWindowLimitEntries `json:"entries"`
}

type UsageTimeLimitValueTimeWindowLimitEntries struct {
	EffectiveDay      string   `json:"effective_day"`
	EndsAt            *RefTime `json:"ends_at"`
	LastUpdatedMillis string   `json:"last_updated_millis"`
	StartsAt          *RefTime `json:"starts_at"`
}

type UsageTimeLimitValueTimeUsageLimit struct {
	Friday    *RefTimeUsageLimitEntry `json:"friday"`
	Monday    *RefTimeUsageLimitEntry `json:"monday"`
	ResetAt   *RefTime                `json:"reset_at"`
	Saturday  *RefTimeUsageLimitEntry `json:"saturday"`
	Sunday    *RefTimeUsageLimitEntry `json:"sunday"`
	Thursday  *RefTimeUsageLimitEntry `json:"thursday"`
	Tuesday   *RefTimeUsageLimitEntry `json:"tuesday"`
	Wednesday *RefTimeUsageLimitEntry `json:"wednesday"`
}

func (p *UsageTimeLimit) Name() string          { return "UsageTimeLimit" }
func (p *UsageTimeLimit) Field() string         { return "" }
func (p *UsageTimeLimit) Scope() Scope          { return ScopeUser }
func (p *UsageTimeLimit) Status() Status        { return p.Stat }
func (p *UsageTimeLimit) UntypedV() interface{} { return p.Val }
func (p *UsageTimeLimit) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *UsageTimeLimitValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *UsageTimeLimitValue", m)
	}
	return v, nil
}
func (p *UsageTimeLimit) Equal(iface interface{}) bool {
	v, ok := iface.(*UsageTimeLimitValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 449. ArcBackupRestoreServiceEnabled
// This policy has a default value of 0.
///////////////////////////////////////////////////////////////////////////////
type ArcBackupRestoreServiceEnabled struct {
	Stat Status
	Val  int
}

func (p *ArcBackupRestoreServiceEnabled) Name() string          { return "ArcBackupRestoreServiceEnabled" }
func (p *ArcBackupRestoreServiceEnabled) Field() string         { return "" }
func (p *ArcBackupRestoreServiceEnabled) Scope() Scope          { return ScopeUser }
func (p *ArcBackupRestoreServiceEnabled) Status() Status        { return p.Stat }
func (p *ArcBackupRestoreServiceEnabled) UntypedV() interface{} { return p.Val }
func (p *ArcBackupRestoreServiceEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ArcBackupRestoreServiceEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 450. ArcGoogleLocationServicesEnabled
// This policy has a default value of 0.
///////////////////////////////////////////////////////////////////////////////
type ArcGoogleLocationServicesEnabled struct {
	Stat Status
	Val  int
}

func (p *ArcGoogleLocationServicesEnabled) Name() string          { return "ArcGoogleLocationServicesEnabled" }
func (p *ArcGoogleLocationServicesEnabled) Field() string         { return "" }
func (p *ArcGoogleLocationServicesEnabled) Scope() Scope          { return ScopeUser }
func (p *ArcGoogleLocationServicesEnabled) Status() Status        { return p.Stat }
func (p *ArcGoogleLocationServicesEnabled) UntypedV() interface{} { return p.Val }
func (p *ArcGoogleLocationServicesEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ArcGoogleLocationServicesEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 451. EnableSyncConsent
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type EnableSyncConsent struct {
	Stat Status
	Val  bool
}

func (p *EnableSyncConsent) Name() string          { return "EnableSyncConsent" }
func (p *EnableSyncConsent) Field() string         { return "" }
func (p *EnableSyncConsent) Scope() Scope          { return ScopeUser }
func (p *EnableSyncConsent) Status() Status        { return p.Stat }
func (p *EnableSyncConsent) UntypedV() interface{} { return p.Val }
func (p *EnableSyncConsent) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *EnableSyncConsent) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 453. DeviceAutoUpdateTimeRestrictions
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceAutoUpdateTimeRestrictions struct {
	Stat Status
	Val  []*DeviceAutoUpdateTimeRestrictionsValue
}

type DeviceAutoUpdateTimeRestrictionsValue struct {
	End   *RefDisallowedTimeInterval `json:"end"`
	Start *RefDisallowedTimeInterval `json:"start"`
}

func (p *DeviceAutoUpdateTimeRestrictions) Name() string { return "DeviceAutoUpdateTimeRestrictions" }
func (p *DeviceAutoUpdateTimeRestrictions) Field() string {
	return "auto_update_settings.disallowed_time_intervals"
}
func (p *DeviceAutoUpdateTimeRestrictions) Scope() Scope          { return ScopeDevice }
func (p *DeviceAutoUpdateTimeRestrictions) Status() Status        { return p.Stat }
func (p *DeviceAutoUpdateTimeRestrictions) UntypedV() interface{} { return p.Val }
func (p *DeviceAutoUpdateTimeRestrictions) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*DeviceAutoUpdateTimeRestrictionsValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*DeviceAutoUpdateTimeRestrictionsValue", m)
	}
	return v, nil
}
func (p *DeviceAutoUpdateTimeRestrictions) Equal(iface interface{}) bool {
	v, ok := iface.([]*DeviceAutoUpdateTimeRestrictionsValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 455. SafeSitesFilterBehavior
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SafeSitesFilterBehavior struct {
	Stat Status
	Val  int
}

func (p *SafeSitesFilterBehavior) Name() string          { return "SafeSitesFilterBehavior" }
func (p *SafeSitesFilterBehavior) Field() string         { return "" }
func (p *SafeSitesFilterBehavior) Scope() Scope          { return ScopeUser }
func (p *SafeSitesFilterBehavior) Status() Status        { return p.Stat }
func (p *SafeSitesFilterBehavior) UntypedV() interface{} { return p.Val }
func (p *SafeSitesFilterBehavior) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *SafeSitesFilterBehavior) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 456. AllowedInputMethods
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AllowedInputMethods struct {
	Stat Status
	Val  []string
}

func (p *AllowedInputMethods) Name() string          { return "AllowedInputMethods" }
func (p *AllowedInputMethods) Field() string         { return "" }
func (p *AllowedInputMethods) Scope() Scope          { return ScopeUser }
func (p *AllowedInputMethods) Status() Status        { return p.Stat }
func (p *AllowedInputMethods) UntypedV() interface{} { return p.Val }
func (p *AllowedInputMethods) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *AllowedInputMethods) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 457. OverrideSecurityRestrictionsOnInsecureOrigin
///////////////////////////////////////////////////////////////////////////////
type OverrideSecurityRestrictionsOnInsecureOrigin struct {
	Stat Status
	Val  []string
}

func (p *OverrideSecurityRestrictionsOnInsecureOrigin) Name() string {
	return "OverrideSecurityRestrictionsOnInsecureOrigin"
}
func (p *OverrideSecurityRestrictionsOnInsecureOrigin) Field() string         { return "" }
func (p *OverrideSecurityRestrictionsOnInsecureOrigin) Scope() Scope          { return ScopeUser }
func (p *OverrideSecurityRestrictionsOnInsecureOrigin) Status() Status        { return p.Stat }
func (p *OverrideSecurityRestrictionsOnInsecureOrigin) UntypedV() interface{} { return p.Val }
func (p *OverrideSecurityRestrictionsOnInsecureOrigin) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *OverrideSecurityRestrictionsOnInsecureOrigin) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 458. DeviceUpdateStagingSchedule
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceUpdateStagingSchedule struct {
	Stat Status
	Val  []*RefDayPercentagePair
}

func (p *DeviceUpdateStagingSchedule) Name() string          { return "DeviceUpdateStagingSchedule" }
func (p *DeviceUpdateStagingSchedule) Field() string         { return "auto_update_settings.staging_schedule" }
func (p *DeviceUpdateStagingSchedule) Scope() Scope          { return ScopeDevice }
func (p *DeviceUpdateStagingSchedule) Status() Status        { return p.Stat }
func (p *DeviceUpdateStagingSchedule) UntypedV() interface{} { return p.Val }
func (p *DeviceUpdateStagingSchedule) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*RefDayPercentagePair
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*RefDayPercentagePair", m)
	}
	return v, nil
}
func (p *DeviceUpdateStagingSchedule) Equal(iface interface{}) bool {
	v, ok := iface.([]*RefDayPercentagePair)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 459. AutofillAddressEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AutofillAddressEnabled struct {
	Stat Status
	Val  bool
}

func (p *AutofillAddressEnabled) Name() string          { return "AutofillAddressEnabled" }
func (p *AutofillAddressEnabled) Field() string         { return "" }
func (p *AutofillAddressEnabled) Scope() Scope          { return ScopeUser }
func (p *AutofillAddressEnabled) Status() Status        { return p.Stat }
func (p *AutofillAddressEnabled) UntypedV() interface{} { return p.Val }
func (p *AutofillAddressEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AutofillAddressEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 461. UrlKeyedAnonymizedDataCollectionEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type UrlKeyedAnonymizedDataCollectionEnabled struct {
	Stat Status
	Val  bool
}

func (p *UrlKeyedAnonymizedDataCollectionEnabled) Name() string {
	return "UrlKeyedAnonymizedDataCollectionEnabled"
}
func (p *UrlKeyedAnonymizedDataCollectionEnabled) Field() string         { return "" }
func (p *UrlKeyedAnonymizedDataCollectionEnabled) Scope() Scope          { return ScopeUser }
func (p *UrlKeyedAnonymizedDataCollectionEnabled) Status() Status        { return p.Stat }
func (p *UrlKeyedAnonymizedDataCollectionEnabled) UntypedV() interface{} { return p.Val }
func (p *UrlKeyedAnonymizedDataCollectionEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *UrlKeyedAnonymizedDataCollectionEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 462. NetworkFileSharesAllowed
///////////////////////////////////////////////////////////////////////////////
type NetworkFileSharesAllowed struct {
	Stat Status
	Val  bool
}

func (p *NetworkFileSharesAllowed) Name() string          { return "NetworkFileSharesAllowed" }
func (p *NetworkFileSharesAllowed) Field() string         { return "" }
func (p *NetworkFileSharesAllowed) Scope() Scope          { return ScopeUser }
func (p *NetworkFileSharesAllowed) Status() Status        { return p.Stat }
func (p *NetworkFileSharesAllowed) UntypedV() interface{} { return p.Val }
func (p *NetworkFileSharesAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *NetworkFileSharesAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 463. DeviceLocalAccountManagedSessionEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLocalAccountManagedSessionEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLocalAccountManagedSessionEnabled) Name() string {
	return "DeviceLocalAccountManagedSessionEnabled"
}
func (p *DeviceLocalAccountManagedSessionEnabled) Field() string         { return "" }
func (p *DeviceLocalAccountManagedSessionEnabled) Scope() Scope          { return ScopeUser }
func (p *DeviceLocalAccountManagedSessionEnabled) Status() Status        { return p.Stat }
func (p *DeviceLocalAccountManagedSessionEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLocalAccountManagedSessionEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLocalAccountManagedSessionEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 464. WebRtcEventLogCollectionAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type WebRtcEventLogCollectionAllowed struct {
	Stat Status
	Val  bool
}

func (p *WebRtcEventLogCollectionAllowed) Name() string          { return "WebRtcEventLogCollectionAllowed" }
func (p *WebRtcEventLogCollectionAllowed) Field() string         { return "" }
func (p *WebRtcEventLogCollectionAllowed) Scope() Scope          { return ScopeUser }
func (p *WebRtcEventLogCollectionAllowed) Status() Status        { return p.Stat }
func (p *WebRtcEventLogCollectionAllowed) UntypedV() interface{} { return p.Val }
func (p *WebRtcEventLogCollectionAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *WebRtcEventLogCollectionAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 465. PowerSmartDimEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PowerSmartDimEnabled struct {
	Stat Status
	Val  bool
}

func (p *PowerSmartDimEnabled) Name() string          { return "PowerSmartDimEnabled" }
func (p *PowerSmartDimEnabled) Field() string         { return "" }
func (p *PowerSmartDimEnabled) Scope() Scope          { return ScopeUser }
func (p *PowerSmartDimEnabled) Status() Status        { return p.Stat }
func (p *PowerSmartDimEnabled) UntypedV() interface{} { return p.Val }
func (p *PowerSmartDimEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PowerSmartDimEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 466. CoalesceH2ConnectionsWithClientCertificatesForHosts
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CoalesceH2ConnectionsWithClientCertificatesForHosts struct {
	Stat Status
	Val  []string
}

func (p *CoalesceH2ConnectionsWithClientCertificatesForHosts) Name() string {
	return "CoalesceH2ConnectionsWithClientCertificatesForHosts"
}
func (p *CoalesceH2ConnectionsWithClientCertificatesForHosts) Field() string         { return "" }
func (p *CoalesceH2ConnectionsWithClientCertificatesForHosts) Scope() Scope          { return ScopeUser }
func (p *CoalesceH2ConnectionsWithClientCertificatesForHosts) Status() Status        { return p.Stat }
func (p *CoalesceH2ConnectionsWithClientCertificatesForHosts) UntypedV() interface{} { return p.Val }
func (p *CoalesceH2ConnectionsWithClientCertificatesForHosts) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *CoalesceH2ConnectionsWithClientCertificatesForHosts) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 467. NetBiosShareDiscoveryEnabled
// This policy has a default value of False.
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type NetBiosShareDiscoveryEnabled struct {
	Stat Status
	Val  bool
}

func (p *NetBiosShareDiscoveryEnabled) Name() string          { return "NetBiosShareDiscoveryEnabled" }
func (p *NetBiosShareDiscoveryEnabled) Field() string         { return "" }
func (p *NetBiosShareDiscoveryEnabled) Scope() Scope          { return ScopeUser }
func (p *NetBiosShareDiscoveryEnabled) Status() Status        { return p.Stat }
func (p *NetBiosShareDiscoveryEnabled) UntypedV() interface{} { return p.Val }
func (p *NetBiosShareDiscoveryEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *NetBiosShareDiscoveryEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 468. WebAppInstallForceList
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type WebAppInstallForceList struct {
	Stat Status
	Val  []*WebAppInstallForceListValue
}

type WebAppInstallForceListValue struct {
	CreateDesktopShortcut  bool   `json:"create_desktop_shortcut"`
	DefaultLaunchContainer string `json:"default_launch_container"`
	Url                    string `json:"url"`
}

func (p *WebAppInstallForceList) Name() string          { return "WebAppInstallForceList" }
func (p *WebAppInstallForceList) Field() string         { return "" }
func (p *WebAppInstallForceList) Scope() Scope          { return ScopeUser }
func (p *WebAppInstallForceList) Status() Status        { return p.Stat }
func (p *WebAppInstallForceList) UntypedV() interface{} { return p.Val }
func (p *WebAppInstallForceList) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*WebAppInstallForceListValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*WebAppInstallForceListValue", m)
	}
	return v, nil
}
func (p *WebAppInstallForceList) Equal(iface interface{}) bool {
	v, ok := iface.([]*WebAppInstallForceListValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 469. SmsMessagesAllowed
// This policy has a default value of False.
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SmsMessagesAllowed struct {
	Stat Status
	Val  bool
}

func (p *SmsMessagesAllowed) Name() string          { return "SmsMessagesAllowed" }
func (p *SmsMessagesAllowed) Field() string         { return "" }
func (p *SmsMessagesAllowed) Scope() Scope          { return ScopeUser }
func (p *SmsMessagesAllowed) Status() Status        { return p.Stat }
func (p *SmsMessagesAllowed) UntypedV() interface{} { return p.Val }
func (p *SmsMessagesAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SmsMessagesAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 474. PrintingAllowedColorModes
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintingAllowedColorModes struct {
	Stat Status
	Val  string
}

func (p *PrintingAllowedColorModes) Name() string          { return "PrintingAllowedColorModes" }
func (p *PrintingAllowedColorModes) Field() string         { return "" }
func (p *PrintingAllowedColorModes) Scope() Scope          { return ScopeUser }
func (p *PrintingAllowedColorModes) Status() Status        { return p.Stat }
func (p *PrintingAllowedColorModes) UntypedV() interface{} { return p.Val }
func (p *PrintingAllowedColorModes) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *PrintingAllowedColorModes) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 475. PrintingAllowedDuplexModes
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintingAllowedDuplexModes struct {
	Stat Status
	Val  string
}

func (p *PrintingAllowedDuplexModes) Name() string          { return "PrintingAllowedDuplexModes" }
func (p *PrintingAllowedDuplexModes) Field() string         { return "" }
func (p *PrintingAllowedDuplexModes) Scope() Scope          { return ScopeUser }
func (p *PrintingAllowedDuplexModes) Status() Status        { return p.Stat }
func (p *PrintingAllowedDuplexModes) UntypedV() interface{} { return p.Val }
func (p *PrintingAllowedDuplexModes) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *PrintingAllowedDuplexModes) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 477. PrintingColorDefault
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintingColorDefault struct {
	Stat Status
	Val  string
}

func (p *PrintingColorDefault) Name() string          { return "PrintingColorDefault" }
func (p *PrintingColorDefault) Field() string         { return "" }
func (p *PrintingColorDefault) Scope() Scope          { return ScopeUser }
func (p *PrintingColorDefault) Status() Status        { return p.Stat }
func (p *PrintingColorDefault) UntypedV() interface{} { return p.Val }
func (p *PrintingColorDefault) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *PrintingColorDefault) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 478. PrintingDuplexDefault
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintingDuplexDefault struct {
	Stat Status
	Val  string
}

func (p *PrintingDuplexDefault) Name() string          { return "PrintingDuplexDefault" }
func (p *PrintingDuplexDefault) Field() string         { return "" }
func (p *PrintingDuplexDefault) Scope() Scope          { return ScopeUser }
func (p *PrintingDuplexDefault) Status() Status        { return p.Stat }
func (p *PrintingDuplexDefault) UntypedV() interface{} { return p.Val }
func (p *PrintingDuplexDefault) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *PrintingDuplexDefault) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 479. PrintingPaperSizeDefault
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintingPaperSizeDefault struct {
	Stat Status
	Val  *PrintingPaperSizeDefaultValue
}

type PrintingPaperSizeDefaultValue struct {
	CustomSize *PrintingPaperSizeDefaultValueCustomSize `json:"custom_size"`
	Name       string                                   `json:"name"`
}

type PrintingPaperSizeDefaultValueCustomSize struct {
	Height int `json:"height"`
	Width  int `json:"width"`
}

func (p *PrintingPaperSizeDefault) Name() string          { return "PrintingPaperSizeDefault" }
func (p *PrintingPaperSizeDefault) Field() string         { return "" }
func (p *PrintingPaperSizeDefault) Scope() Scope          { return ScopeUser }
func (p *PrintingPaperSizeDefault) Status() Status        { return p.Stat }
func (p *PrintingPaperSizeDefault) UntypedV() interface{} { return p.Val }
func (p *PrintingPaperSizeDefault) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *PrintingPaperSizeDefaultValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *PrintingPaperSizeDefaultValue", m)
	}
	return v, nil
}
func (p *PrintingPaperSizeDefault) Equal(iface interface{}) bool {
	v, ok := iface.(*PrintingPaperSizeDefaultValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 480. PrintHeaderFooter
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintHeaderFooter struct {
	Stat Status
	Val  bool
}

func (p *PrintHeaderFooter) Name() string          { return "PrintHeaderFooter" }
func (p *PrintHeaderFooter) Field() string         { return "" }
func (p *PrintHeaderFooter) Scope() Scope          { return ScopeUser }
func (p *PrintHeaderFooter) Status() Status        { return p.Stat }
func (p *PrintHeaderFooter) UntypedV() interface{} { return p.Val }
func (p *PrintHeaderFooter) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PrintHeaderFooter) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 481. CrostiniAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CrostiniAllowed struct {
	Stat Status
	Val  bool
}

func (p *CrostiniAllowed) Name() string          { return "CrostiniAllowed" }
func (p *CrostiniAllowed) Field() string         { return "" }
func (p *CrostiniAllowed) Scope() Scope          { return ScopeUser }
func (p *CrostiniAllowed) Status() Status        { return p.Stat }
func (p *CrostiniAllowed) UntypedV() interface{} { return p.Val }
func (p *CrostiniAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *CrostiniAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 482. DeviceUnaffiliatedCrostiniAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceUnaffiliatedCrostiniAllowed struct {
	Stat Status
	Val  bool
}

func (p *DeviceUnaffiliatedCrostiniAllowed) Name() string { return "DeviceUnaffiliatedCrostiniAllowed" }
func (p *DeviceUnaffiliatedCrostiniAllowed) Field() string {
	return "device_unaffiliated_crostini_allowed.device_unaffiliated_crostini_allowed"
}
func (p *DeviceUnaffiliatedCrostiniAllowed) Scope() Scope          { return ScopeDevice }
func (p *DeviceUnaffiliatedCrostiniAllowed) Status() Status        { return p.Stat }
func (p *DeviceUnaffiliatedCrostiniAllowed) UntypedV() interface{} { return p.Val }
func (p *DeviceUnaffiliatedCrostiniAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceUnaffiliatedCrostiniAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 483. EnterpriseHardwarePlatformAPIEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type EnterpriseHardwarePlatformAPIEnabled struct {
	Stat Status
	Val  bool
}

func (p *EnterpriseHardwarePlatformAPIEnabled) Name() string {
	return "EnterpriseHardwarePlatformAPIEnabled"
}
func (p *EnterpriseHardwarePlatformAPIEnabled) Field() string         { return "" }
func (p *EnterpriseHardwarePlatformAPIEnabled) Scope() Scope          { return ScopeUser }
func (p *EnterpriseHardwarePlatformAPIEnabled) Status() Status        { return p.Stat }
func (p *EnterpriseHardwarePlatformAPIEnabled) UntypedV() interface{} { return p.Val }
func (p *EnterpriseHardwarePlatformAPIEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *EnterpriseHardwarePlatformAPIEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 484. ReportCrostiniUsageEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportCrostiniUsageEnabled struct {
	Stat Status
	Val  bool
}

func (p *ReportCrostiniUsageEnabled) Name() string          { return "ReportCrostiniUsageEnabled" }
func (p *ReportCrostiniUsageEnabled) Field() string         { return "" }
func (p *ReportCrostiniUsageEnabled) Scope() Scope          { return ScopeUser }
func (p *ReportCrostiniUsageEnabled) Status() Status        { return p.Stat }
func (p *ReportCrostiniUsageEnabled) UntypedV() interface{} { return p.Val }
func (p *ReportCrostiniUsageEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportCrostiniUsageEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 485. VpnConfigAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type VpnConfigAllowed struct {
	Stat Status
	Val  bool
}

func (p *VpnConfigAllowed) Name() string          { return "VpnConfigAllowed" }
func (p *VpnConfigAllowed) Field() string         { return "" }
func (p *VpnConfigAllowed) Scope() Scope          { return ScopeUser }
func (p *VpnConfigAllowed) Status() Status        { return p.Stat }
func (p *VpnConfigAllowed) UntypedV() interface{} { return p.Val }
func (p *VpnConfigAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *VpnConfigAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 486. WebUsbAllowDevicesForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type WebUsbAllowDevicesForUrls struct {
	Stat Status
	Val  []*WebUsbAllowDevicesForUrlsValue
}

type WebUsbAllowDevicesForUrlsValue struct {
	Devices []*WebUsbAllowDevicesForUrlsValueDevices `json:"devices"`
	Urls    []string                                 `json:"urls"`
}

type WebUsbAllowDevicesForUrlsValueDevices struct {
	ProductId int `json:"product_id"`
	VendorId  int `json:"vendor_id"`
}

func (p *WebUsbAllowDevicesForUrls) Name() string          { return "WebUsbAllowDevicesForUrls" }
func (p *WebUsbAllowDevicesForUrls) Field() string         { return "" }
func (p *WebUsbAllowDevicesForUrls) Scope() Scope          { return ScopeUser }
func (p *WebUsbAllowDevicesForUrls) Status() Status        { return p.Stat }
func (p *WebUsbAllowDevicesForUrls) UntypedV() interface{} { return p.Val }
func (p *WebUsbAllowDevicesForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*WebUsbAllowDevicesForUrlsValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*WebUsbAllowDevicesForUrlsValue", m)
	}
	return v, nil
}
func (p *WebUsbAllowDevicesForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]*WebUsbAllowDevicesForUrlsValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 488. SmartLockSigninAllowed
// This policy has a default value of False.
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SmartLockSigninAllowed struct {
	Stat Status
	Val  bool
}

func (p *SmartLockSigninAllowed) Name() string          { return "SmartLockSigninAllowed" }
func (p *SmartLockSigninAllowed) Field() string         { return "" }
func (p *SmartLockSigninAllowed) Scope() Scope          { return ScopeUser }
func (p *SmartLockSigninAllowed) Status() Status        { return p.Stat }
func (p *SmartLockSigninAllowed) UntypedV() interface{} { return p.Val }
func (p *SmartLockSigninAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SmartLockSigninAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 489. NTLMShareAuthenticationEnabled
// This policy has a default value of False.
///////////////////////////////////////////////////////////////////////////////
type NTLMShareAuthenticationEnabled struct {
	Stat Status
	Val  bool
}

func (p *NTLMShareAuthenticationEnabled) Name() string          { return "NTLMShareAuthenticationEnabled" }
func (p *NTLMShareAuthenticationEnabled) Field() string         { return "" }
func (p *NTLMShareAuthenticationEnabled) Scope() Scope          { return ScopeUser }
func (p *NTLMShareAuthenticationEnabled) Status() Status        { return p.Stat }
func (p *NTLMShareAuthenticationEnabled) UntypedV() interface{} { return p.Val }
func (p *NTLMShareAuthenticationEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *NTLMShareAuthenticationEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 490. NetworkFileSharesPreconfiguredShares
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type NetworkFileSharesPreconfiguredShares struct {
	Stat Status
	Val  []*NetworkFileSharesPreconfiguredSharesValue
}

type NetworkFileSharesPreconfiguredSharesValue struct {
	Mode     string `json:"mode"`
	ShareUrl string `json:"share_url"`
}

func (p *NetworkFileSharesPreconfiguredShares) Name() string {
	return "NetworkFileSharesPreconfiguredShares"
}
func (p *NetworkFileSharesPreconfiguredShares) Field() string         { return "" }
func (p *NetworkFileSharesPreconfiguredShares) Scope() Scope          { return ScopeUser }
func (p *NetworkFileSharesPreconfiguredShares) Status() Status        { return p.Stat }
func (p *NetworkFileSharesPreconfiguredShares) UntypedV() interface{} { return p.Val }
func (p *NetworkFileSharesPreconfiguredShares) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*NetworkFileSharesPreconfiguredSharesValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*NetworkFileSharesPreconfiguredSharesValue", m)
	}
	return v, nil
}
func (p *NetworkFileSharesPreconfiguredShares) Equal(iface interface{}) bool {
	v, ok := iface.([]*NetworkFileSharesPreconfiguredSharesValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 491. AllowWakeLocks
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AllowWakeLocks struct {
	Stat Status
	Val  bool
}

func (p *AllowWakeLocks) Name() string          { return "AllowWakeLocks" }
func (p *AllowWakeLocks) Field() string         { return "" }
func (p *AllowWakeLocks) Scope() Scope          { return ScopeUser }
func (p *AllowWakeLocks) Status() Status        { return p.Stat }
func (p *AllowWakeLocks) UntypedV() interface{} { return p.Val }
func (p *AllowWakeLocks) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AllowWakeLocks) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 492. ScreenBrightnessPercent
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ScreenBrightnessPercent struct {
	Stat Status
	Val  *ScreenBrightnessPercentValue
}

type ScreenBrightnessPercentValue struct {
	BrightnessAC      int `json:"BrightnessAC"`
	BrightnessBattery int `json:"BrightnessBattery"`
}

func (p *ScreenBrightnessPercent) Name() string          { return "ScreenBrightnessPercent" }
func (p *ScreenBrightnessPercent) Field() string         { return "" }
func (p *ScreenBrightnessPercent) Scope() Scope          { return ScopeUser }
func (p *ScreenBrightnessPercent) Status() Status        { return p.Stat }
func (p *ScreenBrightnessPercent) UntypedV() interface{} { return p.Val }
func (p *ScreenBrightnessPercent) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *ScreenBrightnessPercentValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *ScreenBrightnessPercentValue", m)
	}
	return v, nil
}
func (p *ScreenBrightnessPercent) Equal(iface interface{}) bool {
	v, ok := iface.(*ScreenBrightnessPercentValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 493. CloudReportingEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CloudReportingEnabled struct {
	Stat Status
	Val  bool
}

func (p *CloudReportingEnabled) Name() string          { return "CloudReportingEnabled" }
func (p *CloudReportingEnabled) Field() string         { return "" }
func (p *CloudReportingEnabled) Scope() Scope          { return ScopeUser }
func (p *CloudReportingEnabled) Status() Status        { return p.Stat }
func (p *CloudReportingEnabled) UntypedV() interface{} { return p.Val }
func (p *CloudReportingEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *CloudReportingEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 501. DeviceWiFiFastTransitionEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceWiFiFastTransitionEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceWiFiFastTransitionEnabled) Name() string { return "DeviceWiFiFastTransitionEnabled" }
func (p *DeviceWiFiFastTransitionEnabled) Field() string {
	return "device_wifi_fast_transition_enabled.device_wifi_fast_transition_enabled"
}
func (p *DeviceWiFiFastTransitionEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceWiFiFastTransitionEnabled) Status() Status        { return p.Stat }
func (p *DeviceWiFiFastTransitionEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceWiFiFastTransitionEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceWiFiFastTransitionEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 502. DeviceDisplayResolution
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceDisplayResolution struct {
	Stat Status
	Val  *DeviceDisplayResolutionValue
}

type DeviceDisplayResolutionValue struct {
	ExternalHeight          int  `json:"external_height"`
	ExternalScalePercentage int  `json:"external_scale_percentage"`
	ExternalUseNative       bool `json:"external_use_native"`
	ExternalWidth           int  `json:"external_width"`
	InternalScalePercentage int  `json:"internal_scale_percentage"`
	Recommended             bool `json:"recommended"`
}

func (p *DeviceDisplayResolution) Name() string { return "DeviceDisplayResolution" }
func (p *DeviceDisplayResolution) Field() string {
	return "device_display_resolution.device_display_resolution"
}
func (p *DeviceDisplayResolution) Scope() Scope          { return ScopeDevice }
func (p *DeviceDisplayResolution) Status() Status        { return p.Stat }
func (p *DeviceDisplayResolution) UntypedV() interface{} { return p.Val }
func (p *DeviceDisplayResolution) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *DeviceDisplayResolutionValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *DeviceDisplayResolutionValue", m)
	}
	return v, nil
}
func (p *DeviceDisplayResolution) Equal(iface interface{}) bool {
	v, ok := iface.(*DeviceDisplayResolutionValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 503. PluginVmAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PluginVmAllowed struct {
	Stat Status
	Val  bool
}

func (p *PluginVmAllowed) Name() string          { return "PluginVmAllowed" }
func (p *PluginVmAllowed) Field() string         { return "plugin_vm_allowed.plugin_vm_allowed" }
func (p *PluginVmAllowed) Scope() Scope          { return ScopeDevice }
func (p *PluginVmAllowed) Status() Status        { return p.Stat }
func (p *PluginVmAllowed) UntypedV() interface{} { return p.Val }
func (p *PluginVmAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PluginVmAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 504. PluginVmImage
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PluginVmImage struct {
	Stat Status
	Val  *PluginVmImageValue
}

type PluginVmImageValue struct {
	Hash string `json:"hash"`
	Url  string `json:"url"`
}

func (p *PluginVmImage) Name() string          { return "PluginVmImage" }
func (p *PluginVmImage) Field() string         { return "" }
func (p *PluginVmImage) Scope() Scope          { return ScopeUser }
func (p *PluginVmImage) Status() Status        { return p.Stat }
func (p *PluginVmImage) UntypedV() interface{} { return p.Val }
func (p *PluginVmImage) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *PluginVmImageValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *PluginVmImageValue", m)
	}
	return v, nil
}
func (p *PluginVmImage) Equal(iface interface{}) bool {
	v, ok := iface.(*PluginVmImageValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 506. PrintingSendUsernameAndFilenameEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintingSendUsernameAndFilenameEnabled struct {
	Stat Status
	Val  bool
}

func (p *PrintingSendUsernameAndFilenameEnabled) Name() string {
	return "PrintingSendUsernameAndFilenameEnabled"
}
func (p *PrintingSendUsernameAndFilenameEnabled) Field() string         { return "" }
func (p *PrintingSendUsernameAndFilenameEnabled) Scope() Scope          { return ScopeUser }
func (p *PrintingSendUsernameAndFilenameEnabled) Status() Status        { return p.Stat }
func (p *PrintingSendUsernameAndFilenameEnabled) UntypedV() interface{} { return p.Val }
func (p *PrintingSendUsernameAndFilenameEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PrintingSendUsernameAndFilenameEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 507. ParentAccessCodeConfig
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ParentAccessCodeConfig struct {
	Stat Status
	Val  *ParentAccessCodeConfigValue
}

type ParentAccessCodeConfigValue struct {
	CurrentConfig *RefConfig   `json:"current_config"`
	FutureConfig  *RefConfig   `json:"future_config"`
	OldConfigs    []*RefConfig `json:"old_configs"`
}

func (p *ParentAccessCodeConfig) Name() string          { return "ParentAccessCodeConfig" }
func (p *ParentAccessCodeConfig) Field() string         { return "" }
func (p *ParentAccessCodeConfig) Scope() Scope          { return ScopeUser }
func (p *ParentAccessCodeConfig) Status() Status        { return p.Stat }
func (p *ParentAccessCodeConfig) UntypedV() interface{} { return p.Val }
func (p *ParentAccessCodeConfig) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as sensitive string", m)
	}
	return v, nil
}
func (p *ParentAccessCodeConfig) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	sensitive := "********"
	return cmp.Equal(sensitive, v)
}

///////////////////////////////////////////////////////////////////////////////
// 508. DeviceGpoCacheLifetime
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceGpoCacheLifetime struct {
	Stat Status
	Val  int
}

func (p *DeviceGpoCacheLifetime) Name() string          { return "DeviceGpoCacheLifetime" }
func (p *DeviceGpoCacheLifetime) Field() string         { return "device_gpo_cache_lifetime.lifetime_hours" }
func (p *DeviceGpoCacheLifetime) Scope() Scope          { return ScopeDevice }
func (p *DeviceGpoCacheLifetime) Status() Status        { return p.Stat }
func (p *DeviceGpoCacheLifetime) UntypedV() interface{} { return p.Val }
func (p *DeviceGpoCacheLifetime) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceGpoCacheLifetime) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 509. DeviceAuthDataCacheLifetime
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceAuthDataCacheLifetime struct {
	Stat Status
	Val  int
}

func (p *DeviceAuthDataCacheLifetime) Name() string { return "DeviceAuthDataCacheLifetime" }
func (p *DeviceAuthDataCacheLifetime) Field() string {
	return "device_auth_data_cache_lifetime.lifetime_hours"
}
func (p *DeviceAuthDataCacheLifetime) Scope() Scope          { return ScopeDevice }
func (p *DeviceAuthDataCacheLifetime) Status() Status        { return p.Stat }
func (p *DeviceAuthDataCacheLifetime) UntypedV() interface{} { return p.Val }
func (p *DeviceAuthDataCacheLifetime) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceAuthDataCacheLifetime) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 512. ReportDevicePowerStatus
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDevicePowerStatus struct {
	Stat Status
	Val  bool
}

func (p *ReportDevicePowerStatus) Name() string          { return "ReportDevicePowerStatus" }
func (p *ReportDevicePowerStatus) Field() string         { return "device_reporting.report_power_status" }
func (p *ReportDevicePowerStatus) Scope() Scope          { return ScopeDevice }
func (p *ReportDevicePowerStatus) Status() Status        { return p.Stat }
func (p *ReportDevicePowerStatus) UntypedV() interface{} { return p.Val }
func (p *ReportDevicePowerStatus) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDevicePowerStatus) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 513. ReportDeviceStorageStatus
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceStorageStatus struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceStorageStatus) Name() string          { return "ReportDeviceStorageStatus" }
func (p *ReportDeviceStorageStatus) Field() string         { return "device_reporting.report_storage_status" }
func (p *ReportDeviceStorageStatus) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceStorageStatus) Status() Status        { return p.Stat }
func (p *ReportDeviceStorageStatus) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceStorageStatus) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceStorageStatus) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 514. ReportDeviceBoardStatus
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceBoardStatus struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceBoardStatus) Name() string          { return "ReportDeviceBoardStatus" }
func (p *ReportDeviceBoardStatus) Field() string         { return "device_reporting.report_board_status" }
func (p *ReportDeviceBoardStatus) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceBoardStatus) Status() Status        { return p.Stat }
func (p *ReportDeviceBoardStatus) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceBoardStatus) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceBoardStatus) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 515. PluginVmLicenseKey
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PluginVmLicenseKey struct {
	Stat Status
	Val  string
}

func (p *PluginVmLicenseKey) Name() string          { return "PluginVmLicenseKey" }
func (p *PluginVmLicenseKey) Field() string         { return "plugin_vm_license_key.plugin_vm_license_key" }
func (p *PluginVmLicenseKey) Scope() Scope          { return ScopeDevice }
func (p *PluginVmLicenseKey) Status() Status        { return p.Stat }
func (p *PluginVmLicenseKey) UntypedV() interface{} { return p.Val }
func (p *PluginVmLicenseKey) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *PluginVmLicenseKey) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	sensitive := "********"
	return cmp.Equal(sensitive, v)
}

///////////////////////////////////////////////////////////////////////////////
// 518. ClientCertificateManagementAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ClientCertificateManagementAllowed struct {
	Stat Status
	Val  int
}

func (p *ClientCertificateManagementAllowed) Name() string {
	return "ClientCertificateManagementAllowed"
}
func (p *ClientCertificateManagementAllowed) Field() string         { return "" }
func (p *ClientCertificateManagementAllowed) Scope() Scope          { return ScopeUser }
func (p *ClientCertificateManagementAllowed) Status() Status        { return p.Stat }
func (p *ClientCertificateManagementAllowed) UntypedV() interface{} { return p.Val }
func (p *ClientCertificateManagementAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ClientCertificateManagementAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 520. DeviceRebootOnUserSignout
///////////////////////////////////////////////////////////////////////////////
type DeviceRebootOnUserSignout struct {
	Stat Status
	Val  int
}

func (p *DeviceRebootOnUserSignout) Name() string { return "DeviceRebootOnUserSignout" }
func (p *DeviceRebootOnUserSignout) Field() string {
	return "device_reboot_on_user_signout.reboot_on_signout_mode"
}
func (p *DeviceRebootOnUserSignout) Scope() Scope          { return ScopeDevice }
func (p *DeviceRebootOnUserSignout) Status() Status        { return p.Stat }
func (p *DeviceRebootOnUserSignout) UntypedV() interface{} { return p.Val }
func (p *DeviceRebootOnUserSignout) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceRebootOnUserSignout) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 522. SchedulerConfiguration
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SchedulerConfiguration struct {
	Stat Status
	Val  string
}

func (p *SchedulerConfiguration) Name() string          { return "SchedulerConfiguration" }
func (p *SchedulerConfiguration) Field() string         { return "" }
func (p *SchedulerConfiguration) Scope() Scope          { return ScopeUser }
func (p *SchedulerConfiguration) Status() Status        { return p.Stat }
func (p *SchedulerConfiguration) UntypedV() interface{} { return p.Val }
func (p *SchedulerConfiguration) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *SchedulerConfiguration) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 523. CrostiniExportImportUIAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CrostiniExportImportUIAllowed struct {
	Stat Status
	Val  bool
}

func (p *CrostiniExportImportUIAllowed) Name() string          { return "CrostiniExportImportUIAllowed" }
func (p *CrostiniExportImportUIAllowed) Field() string         { return "" }
func (p *CrostiniExportImportUIAllowed) Scope() Scope          { return ScopeUser }
func (p *CrostiniExportImportUIAllowed) Status() Status        { return p.Stat }
func (p *CrostiniExportImportUIAllowed) UntypedV() interface{} { return p.Val }
func (p *CrostiniExportImportUIAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *CrostiniExportImportUIAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 525. PrintingAllowedPinModes
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintingAllowedPinModes struct {
	Stat Status
	Val  string
}

func (p *PrintingAllowedPinModes) Name() string          { return "PrintingAllowedPinModes" }
func (p *PrintingAllowedPinModes) Field() string         { return "" }
func (p *PrintingAllowedPinModes) Scope() Scope          { return ScopeUser }
func (p *PrintingAllowedPinModes) Status() Status        { return p.Stat }
func (p *PrintingAllowedPinModes) UntypedV() interface{} { return p.Val }
func (p *PrintingAllowedPinModes) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *PrintingAllowedPinModes) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 526. PrintingPinDefault
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintingPinDefault struct {
	Stat Status
	Val  string
}

func (p *PrintingPinDefault) Name() string          { return "PrintingPinDefault" }
func (p *PrintingPinDefault) Field() string         { return "" }
func (p *PrintingPinDefault) Scope() Scope          { return ScopeUser }
func (p *PrintingPinDefault) Status() Status        { return p.Stat }
func (p *PrintingPinDefault) UntypedV() interface{} { return p.Val }
func (p *PrintingPinDefault) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *PrintingPinDefault) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 527. VoiceInteractionContextEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type VoiceInteractionContextEnabled struct {
	Stat Status
	Val  bool
}

func (p *VoiceInteractionContextEnabled) Name() string          { return "VoiceInteractionContextEnabled" }
func (p *VoiceInteractionContextEnabled) Field() string         { return "" }
func (p *VoiceInteractionContextEnabled) Scope() Scope          { return ScopeUser }
func (p *VoiceInteractionContextEnabled) Status() Status        { return p.Stat }
func (p *VoiceInteractionContextEnabled) UntypedV() interface{} { return p.Val }
func (p *VoiceInteractionContextEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *VoiceInteractionContextEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 528. AuthNegotiateDelegateByKdcPolicy
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AuthNegotiateDelegateByKdcPolicy struct {
	Stat Status
	Val  bool
}

func (p *AuthNegotiateDelegateByKdcPolicy) Name() string          { return "AuthNegotiateDelegateByKdcPolicy" }
func (p *AuthNegotiateDelegateByKdcPolicy) Field() string         { return "" }
func (p *AuthNegotiateDelegateByKdcPolicy) Scope() Scope          { return ScopeUser }
func (p *AuthNegotiateDelegateByKdcPolicy) Status() Status        { return p.Stat }
func (p *AuthNegotiateDelegateByKdcPolicy) UntypedV() interface{} { return p.Val }
func (p *AuthNegotiateDelegateByKdcPolicy) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AuthNegotiateDelegateByKdcPolicy) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 529. VoiceInteractionHotwordEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type VoiceInteractionHotwordEnabled struct {
	Stat Status
	Val  bool
}

func (p *VoiceInteractionHotwordEnabled) Name() string          { return "VoiceInteractionHotwordEnabled" }
func (p *VoiceInteractionHotwordEnabled) Field() string         { return "" }
func (p *VoiceInteractionHotwordEnabled) Scope() Scope          { return ScopeUser }
func (p *VoiceInteractionHotwordEnabled) Status() Status        { return p.Stat }
func (p *VoiceInteractionHotwordEnabled) UntypedV() interface{} { return p.Val }
func (p *VoiceInteractionHotwordEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *VoiceInteractionHotwordEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 532. DeviceWilcoDtcAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceWilcoDtcAllowed struct {
	Stat Status
	Val  bool
}

func (p *DeviceWilcoDtcAllowed) Name() string { return "DeviceWilcoDtcAllowed" }
func (p *DeviceWilcoDtcAllowed) Field() string {
	return "device_wilco_dtc_allowed.device_wilco_dtc_allowed"
}
func (p *DeviceWilcoDtcAllowed) Scope() Scope          { return ScopeDevice }
func (p *DeviceWilcoDtcAllowed) Status() Status        { return p.Stat }
func (p *DeviceWilcoDtcAllowed) UntypedV() interface{} { return p.Val }
func (p *DeviceWilcoDtcAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceWilcoDtcAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 533. AllowPopupsDuringPageUnload
// This policy has a default value of True.
///////////////////////////////////////////////////////////////////////////////
type AllowPopupsDuringPageUnload struct {
	Stat Status
	Val  bool
}

func (p *AllowPopupsDuringPageUnload) Name() string          { return "AllowPopupsDuringPageUnload" }
func (p *AllowPopupsDuringPageUnload) Field() string         { return "" }
func (p *AllowPopupsDuringPageUnload) Scope() Scope          { return ScopeUser }
func (p *AllowPopupsDuringPageUnload) Status() Status        { return p.Stat }
func (p *AllowPopupsDuringPageUnload) UntypedV() interface{} { return p.Val }
func (p *AllowPopupsDuringPageUnload) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AllowPopupsDuringPageUnload) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 535. DeviceWilcoDtcConfiguration
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceWilcoDtcConfiguration struct {
	Stat Status
	Val  *DeviceWilcoDtcConfigurationValue
}

type DeviceWilcoDtcConfigurationValue struct {
	Hash string `json:"hash"`
	Url  string `json:"url"`
}

func (p *DeviceWilcoDtcConfiguration) Name() string { return "DeviceWilcoDtcConfiguration" }
func (p *DeviceWilcoDtcConfiguration) Field() string {
	return "device_wilco_dtc_configuration.device_wilco_dtc_configuration"
}
func (p *DeviceWilcoDtcConfiguration) Scope() Scope          { return ScopeDevice }
func (p *DeviceWilcoDtcConfiguration) Status() Status        { return p.Stat }
func (p *DeviceWilcoDtcConfiguration) UntypedV() interface{} { return p.Val }
func (p *DeviceWilcoDtcConfiguration) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *DeviceWilcoDtcConfigurationValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *DeviceWilcoDtcConfigurationValue", m)
	}
	return v, nil
}
func (p *DeviceWilcoDtcConfiguration) Equal(iface interface{}) bool {
	v, ok := iface.(*DeviceWilcoDtcConfigurationValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 536. SpellcheckLanguageBlacklist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SpellcheckLanguageBlacklist struct {
	Stat Status
	Val  []string
}

func (p *SpellcheckLanguageBlacklist) Name() string          { return "SpellcheckLanguageBlacklist" }
func (p *SpellcheckLanguageBlacklist) Field() string         { return "" }
func (p *SpellcheckLanguageBlacklist) Scope() Scope          { return ScopeUser }
func (p *SpellcheckLanguageBlacklist) Status() Status        { return p.Stat }
func (p *SpellcheckLanguageBlacklist) UntypedV() interface{} { return p.Val }
func (p *SpellcheckLanguageBlacklist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *SpellcheckLanguageBlacklist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 537. DeviceWiFiAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceWiFiAllowed struct {
	Stat Status
	Val  bool
}

func (p *DeviceWiFiAllowed) Name() string          { return "DeviceWiFiAllowed" }
func (p *DeviceWiFiAllowed) Field() string         { return "device_wifi_allowed.device_wifi_allowed" }
func (p *DeviceWiFiAllowed) Scope() Scope          { return ScopeDevice }
func (p *DeviceWiFiAllowed) Status() Status        { return p.Stat }
func (p *DeviceWiFiAllowed) UntypedV() interface{} { return p.Val }
func (p *DeviceWiFiAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceWiFiAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 538. DevicePowerPeakShiftEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DevicePowerPeakShiftEnabled struct {
	Stat Status
	Val  bool
}

func (p *DevicePowerPeakShiftEnabled) Name() string          { return "DevicePowerPeakShiftEnabled" }
func (p *DevicePowerPeakShiftEnabled) Field() string         { return "device_power_peak_shift.enabled" }
func (p *DevicePowerPeakShiftEnabled) Scope() Scope          { return ScopeDevice }
func (p *DevicePowerPeakShiftEnabled) Status() Status        { return p.Stat }
func (p *DevicePowerPeakShiftEnabled) UntypedV() interface{} { return p.Val }
func (p *DevicePowerPeakShiftEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DevicePowerPeakShiftEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 539. DevicePowerPeakShiftBatteryThreshold
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DevicePowerPeakShiftBatteryThreshold struct {
	Stat Status
	Val  int
}

func (p *DevicePowerPeakShiftBatteryThreshold) Name() string {
	return "DevicePowerPeakShiftBatteryThreshold"
}
func (p *DevicePowerPeakShiftBatteryThreshold) Field() string {
	return "device_power_peak_shift.battery_threshold"
}
func (p *DevicePowerPeakShiftBatteryThreshold) Scope() Scope          { return ScopeDevice }
func (p *DevicePowerPeakShiftBatteryThreshold) Status() Status        { return p.Stat }
func (p *DevicePowerPeakShiftBatteryThreshold) UntypedV() interface{} { return p.Val }
func (p *DevicePowerPeakShiftBatteryThreshold) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DevicePowerPeakShiftBatteryThreshold) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 540. DevicePowerPeakShiftDayConfig
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DevicePowerPeakShiftDayConfig struct {
	Stat Status
	Val  *DevicePowerPeakShiftDayConfigValue
}

type DevicePowerPeakShiftDayConfigValue struct {
	Entries []*DevicePowerPeakShiftDayConfigValueEntries `json:"entries"`
}

type DevicePowerPeakShiftDayConfigValueEntries struct {
	ChargeStartTime *RefTime `json:"charge_start_time"`
	Day             string   `json:"day"`
	EndTime         *RefTime `json:"end_time"`
	StartTime       *RefTime `json:"start_time"`
}

func (p *DevicePowerPeakShiftDayConfig) Name() string          { return "DevicePowerPeakShiftDayConfig" }
func (p *DevicePowerPeakShiftDayConfig) Field() string         { return "device_power_peak_shift.day_configs" }
func (p *DevicePowerPeakShiftDayConfig) Scope() Scope          { return ScopeDevice }
func (p *DevicePowerPeakShiftDayConfig) Status() Status        { return p.Stat }
func (p *DevicePowerPeakShiftDayConfig) UntypedV() interface{} { return p.Val }
func (p *DevicePowerPeakShiftDayConfig) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *DevicePowerPeakShiftDayConfigValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *DevicePowerPeakShiftDayConfigValue", m)
	}
	return v, nil
}
func (p *DevicePowerPeakShiftDayConfig) Equal(iface interface{}) bool {
	v, ok := iface.(*DevicePowerPeakShiftDayConfigValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 541. DeviceBootOnAcEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceBootOnAcEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceBootOnAcEnabled) Name() string          { return "DeviceBootOnAcEnabled" }
func (p *DeviceBootOnAcEnabled) Field() string         { return "device_boot_on_ac.enabled" }
func (p *DeviceBootOnAcEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceBootOnAcEnabled) Status() Status        { return p.Stat }
func (p *DeviceBootOnAcEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceBootOnAcEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceBootOnAcEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 542. SignedHTTPExchangeEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SignedHTTPExchangeEnabled struct {
	Stat Status
	Val  bool
}

func (p *SignedHTTPExchangeEnabled) Name() string          { return "SignedHTTPExchangeEnabled" }
func (p *SignedHTTPExchangeEnabled) Field() string         { return "" }
func (p *SignedHTTPExchangeEnabled) Scope() Scope          { return ScopeUser }
func (p *SignedHTTPExchangeEnabled) Status() Status        { return p.Stat }
func (p *SignedHTTPExchangeEnabled) UntypedV() interface{} { return p.Val }
func (p *SignedHTTPExchangeEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SignedHTTPExchangeEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 543. DeviceQuickFixBuildToken
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceQuickFixBuildToken struct {
	Stat Status
	Val  string
}

func (p *DeviceQuickFixBuildToken) Name() string { return "DeviceQuickFixBuildToken" }
func (p *DeviceQuickFixBuildToken) Field() string {
	return "auto_update_settings.device_quick_fix_build_token"
}
func (p *DeviceQuickFixBuildToken) Scope() Scope          { return ScopeDevice }
func (p *DeviceQuickFixBuildToken) Status() Status        { return p.Stat }
func (p *DeviceQuickFixBuildToken) UntypedV() interface{} { return p.Val }
func (p *DeviceQuickFixBuildToken) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DeviceQuickFixBuildToken) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 545. SamlInSessionPasswordChangeEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SamlInSessionPasswordChangeEnabled struct {
	Stat Status
	Val  bool
}

func (p *SamlInSessionPasswordChangeEnabled) Name() string {
	return "SamlInSessionPasswordChangeEnabled"
}
func (p *SamlInSessionPasswordChangeEnabled) Field() string         { return "" }
func (p *SamlInSessionPasswordChangeEnabled) Scope() Scope          { return ScopeUser }
func (p *SamlInSessionPasswordChangeEnabled) Status() Status        { return p.Stat }
func (p *SamlInSessionPasswordChangeEnabled) UntypedV() interface{} { return p.Val }
func (p *SamlInSessionPasswordChangeEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SamlInSessionPasswordChangeEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 547. DeviceDockMacAddressSource
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceDockMacAddressSource struct {
	Stat Status
	Val  int
}

func (p *DeviceDockMacAddressSource) Name() string          { return "DeviceDockMacAddressSource" }
func (p *DeviceDockMacAddressSource) Field() string         { return "device_dock_mac_address_source.source" }
func (p *DeviceDockMacAddressSource) Scope() Scope          { return ScopeDevice }
func (p *DeviceDockMacAddressSource) Status() Status        { return p.Stat }
func (p *DeviceDockMacAddressSource) UntypedV() interface{} { return p.Val }
func (p *DeviceDockMacAddressSource) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceDockMacAddressSource) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 548. DeviceAdvancedBatteryChargeModeEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceAdvancedBatteryChargeModeEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceAdvancedBatteryChargeModeEnabled) Name() string {
	return "DeviceAdvancedBatteryChargeModeEnabled"
}
func (p *DeviceAdvancedBatteryChargeModeEnabled) Field() string {
	return "device_advanced_battery_charge_mode.enabled"
}
func (p *DeviceAdvancedBatteryChargeModeEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceAdvancedBatteryChargeModeEnabled) Status() Status        { return p.Stat }
func (p *DeviceAdvancedBatteryChargeModeEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceAdvancedBatteryChargeModeEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceAdvancedBatteryChargeModeEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 549. DeviceAdvancedBatteryChargeModeDayConfig
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceAdvancedBatteryChargeModeDayConfig struct {
	Stat Status
	Val  *DeviceAdvancedBatteryChargeModeDayConfigValue
}

type DeviceAdvancedBatteryChargeModeDayConfigValue struct {
	Entries []*DeviceAdvancedBatteryChargeModeDayConfigValueEntries `json:"entries"`
}

type DeviceAdvancedBatteryChargeModeDayConfigValueEntries struct {
	ChargeEndTime   *RefTime `json:"charge_end_time"`
	ChargeStartTime *RefTime `json:"charge_start_time"`
	Day             string   `json:"day"`
}

func (p *DeviceAdvancedBatteryChargeModeDayConfig) Name() string {
	return "DeviceAdvancedBatteryChargeModeDayConfig"
}
func (p *DeviceAdvancedBatteryChargeModeDayConfig) Field() string {
	return "device_advanced_battery_charge_mode.day_config"
}
func (p *DeviceAdvancedBatteryChargeModeDayConfig) Scope() Scope          { return ScopeDevice }
func (p *DeviceAdvancedBatteryChargeModeDayConfig) Status() Status        { return p.Stat }
func (p *DeviceAdvancedBatteryChargeModeDayConfig) UntypedV() interface{} { return p.Val }
func (p *DeviceAdvancedBatteryChargeModeDayConfig) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *DeviceAdvancedBatteryChargeModeDayConfigValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *DeviceAdvancedBatteryChargeModeDayConfigValue", m)
	}
	return v, nil
}
func (p *DeviceAdvancedBatteryChargeModeDayConfig) Equal(iface interface{}) bool {
	v, ok := iface.(*DeviceAdvancedBatteryChargeModeDayConfigValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 550. DeviceBatteryChargeMode
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceBatteryChargeMode struct {
	Stat Status
	Val  int
}

func (p *DeviceBatteryChargeMode) Name() string { return "DeviceBatteryChargeMode" }
func (p *DeviceBatteryChargeMode) Field() string {
	return "device_battery_charge_mode.battery_charge_mode"
}
func (p *DeviceBatteryChargeMode) Scope() Scope          { return ScopeDevice }
func (p *DeviceBatteryChargeMode) Status() Status        { return p.Stat }
func (p *DeviceBatteryChargeMode) UntypedV() interface{} { return p.Val }
func (p *DeviceBatteryChargeMode) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceBatteryChargeMode) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 551. DeviceBatteryChargeCustomStartCharging
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceBatteryChargeCustomStartCharging struct {
	Stat Status
	Val  int
}

func (p *DeviceBatteryChargeCustomStartCharging) Name() string {
	return "DeviceBatteryChargeCustomStartCharging"
}
func (p *DeviceBatteryChargeCustomStartCharging) Field() string {
	return "device_battery_charge_mode.custom_charge_start"
}
func (p *DeviceBatteryChargeCustomStartCharging) Scope() Scope          { return ScopeDevice }
func (p *DeviceBatteryChargeCustomStartCharging) Status() Status        { return p.Stat }
func (p *DeviceBatteryChargeCustomStartCharging) UntypedV() interface{} { return p.Val }
func (p *DeviceBatteryChargeCustomStartCharging) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceBatteryChargeCustomStartCharging) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 552. DeviceBatteryChargeCustomStopCharging
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceBatteryChargeCustomStopCharging struct {
	Stat Status
	Val  int
}

func (p *DeviceBatteryChargeCustomStopCharging) Name() string {
	return "DeviceBatteryChargeCustomStopCharging"
}
func (p *DeviceBatteryChargeCustomStopCharging) Field() string {
	return "device_battery_charge_mode.custom_charge_stop"
}
func (p *DeviceBatteryChargeCustomStopCharging) Scope() Scope          { return ScopeDevice }
func (p *DeviceBatteryChargeCustomStopCharging) Status() Status        { return p.Stat }
func (p *DeviceBatteryChargeCustomStopCharging) UntypedV() interface{} { return p.Val }
func (p *DeviceBatteryChargeCustomStopCharging) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceBatteryChargeCustomStopCharging) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 553. DeviceUsbPowerShareEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceUsbPowerShareEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceUsbPowerShareEnabled) Name() string          { return "DeviceUsbPowerShareEnabled" }
func (p *DeviceUsbPowerShareEnabled) Field() string         { return "device_usb_power_share.enabled" }
func (p *DeviceUsbPowerShareEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceUsbPowerShareEnabled) Status() Status        { return p.Stat }
func (p *DeviceUsbPowerShareEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceUsbPowerShareEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceUsbPowerShareEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 554. PolicyListMultipleSourceMergeList
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PolicyListMultipleSourceMergeList struct {
	Stat Status
	Val  []string
}

func (p *PolicyListMultipleSourceMergeList) Name() string          { return "PolicyListMultipleSourceMergeList" }
func (p *PolicyListMultipleSourceMergeList) Field() string         { return "" }
func (p *PolicyListMultipleSourceMergeList) Scope() Scope          { return ScopeUser }
func (p *PolicyListMultipleSourceMergeList) Status() Status        { return p.Stat }
func (p *PolicyListMultipleSourceMergeList) UntypedV() interface{} { return p.Val }
func (p *PolicyListMultipleSourceMergeList) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *PolicyListMultipleSourceMergeList) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 555. SamlPasswordExpirationAdvanceWarningDays
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SamlPasswordExpirationAdvanceWarningDays struct {
	Stat Status
	Val  int
}

func (p *SamlPasswordExpirationAdvanceWarningDays) Name() string {
	return "SamlPasswordExpirationAdvanceWarningDays"
}
func (p *SamlPasswordExpirationAdvanceWarningDays) Field() string         { return "" }
func (p *SamlPasswordExpirationAdvanceWarningDays) Scope() Scope          { return ScopeUser }
func (p *SamlPasswordExpirationAdvanceWarningDays) Status() Status        { return p.Stat }
func (p *SamlPasswordExpirationAdvanceWarningDays) UntypedV() interface{} { return p.Val }
func (p *SamlPasswordExpirationAdvanceWarningDays) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *SamlPasswordExpirationAdvanceWarningDays) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 556. DeviceScheduledUpdateCheck
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceScheduledUpdateCheck struct {
	Stat Status
	Val  *DeviceScheduledUpdateCheckValue
}

type DeviceScheduledUpdateCheckValue struct {
	DayOfMonth      int      `json:"day_of_month"`
	DayOfWeek       string   `json:"day_of_week"`
	Frequency       string   `json:"frequency"`
	UpdateCheckTime *RefTime `json:"update_check_time"`
}

func (p *DeviceScheduledUpdateCheck) Name() string { return "DeviceScheduledUpdateCheck" }
func (p *DeviceScheduledUpdateCheck) Field() string {
	return "device_scheduled_update_check.device_scheduled_update_check_settings"
}
func (p *DeviceScheduledUpdateCheck) Scope() Scope          { return ScopeDevice }
func (p *DeviceScheduledUpdateCheck) Status() Status        { return p.Stat }
func (p *DeviceScheduledUpdateCheck) UntypedV() interface{} { return p.Val }
func (p *DeviceScheduledUpdateCheck) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *DeviceScheduledUpdateCheckValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *DeviceScheduledUpdateCheckValue", m)
	}
	return v, nil
}
func (p *DeviceScheduledUpdateCheck) Equal(iface interface{}) bool {
	v, ok := iface.(*DeviceScheduledUpdateCheckValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 557. KerberosEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type KerberosEnabled struct {
	Stat Status
	Val  bool
}

func (p *KerberosEnabled) Name() string          { return "KerberosEnabled" }
func (p *KerberosEnabled) Field() string         { return "" }
func (p *KerberosEnabled) Scope() Scope          { return ScopeUser }
func (p *KerberosEnabled) Status() Status        { return p.Stat }
func (p *KerberosEnabled) UntypedV() interface{} { return p.Val }
func (p *KerberosEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *KerberosEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 558. KerberosRememberPasswordEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type KerberosRememberPasswordEnabled struct {
	Stat Status
	Val  bool
}

func (p *KerberosRememberPasswordEnabled) Name() string          { return "KerberosRememberPasswordEnabled" }
func (p *KerberosRememberPasswordEnabled) Field() string         { return "" }
func (p *KerberosRememberPasswordEnabled) Scope() Scope          { return ScopeUser }
func (p *KerberosRememberPasswordEnabled) Status() Status        { return p.Stat }
func (p *KerberosRememberPasswordEnabled) UntypedV() interface{} { return p.Val }
func (p *KerberosRememberPasswordEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *KerberosRememberPasswordEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 559. KerberosAddAccountsAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type KerberosAddAccountsAllowed struct {
	Stat Status
	Val  bool
}

func (p *KerberosAddAccountsAllowed) Name() string          { return "KerberosAddAccountsAllowed" }
func (p *KerberosAddAccountsAllowed) Field() string         { return "" }
func (p *KerberosAddAccountsAllowed) Scope() Scope          { return ScopeUser }
func (p *KerberosAddAccountsAllowed) Status() Status        { return p.Stat }
func (p *KerberosAddAccountsAllowed) UntypedV() interface{} { return p.Val }
func (p *KerberosAddAccountsAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *KerberosAddAccountsAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 560. KerberosAccounts
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type KerberosAccounts struct {
	Stat Status
	Val  []*KerberosAccountsValue
}

type KerberosAccountsValue struct {
	Krb5conf         []string `json:"krb5conf"`
	Password         string   `json:"password"`
	Principal        string   `json:"principal"`
	RememberPassword bool     `json:"remember_password"`
}

func (p *KerberosAccounts) Name() string          { return "KerberosAccounts" }
func (p *KerberosAccounts) Field() string         { return "" }
func (p *KerberosAccounts) Scope() Scope          { return ScopeUser }
func (p *KerberosAccounts) Status() Status        { return p.Stat }
func (p *KerberosAccounts) UntypedV() interface{} { return p.Val }
func (p *KerberosAccounts) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*KerberosAccountsValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*KerberosAccountsValue", m)
	}
	return v, nil
}
func (p *KerberosAccounts) Equal(iface interface{}) bool {
	v, ok := iface.([]*KerberosAccountsValue)
	if !ok {
		return ok
	}
	var sensitive []*KerberosAccountsValue
	for i := range p.Val {
		cpy := p.Val[i]
		cpy.Password = "********"
		sensitive = append(sensitive, cpy)
	}
	return cmp.Equal(sensitive, v)
}

///////////////////////////////////////////////////////////////////////////////
// 561. StickyKeysEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type StickyKeysEnabled struct {
	Stat Status
	Val  bool
}

func (p *StickyKeysEnabled) Name() string          { return "StickyKeysEnabled" }
func (p *StickyKeysEnabled) Field() string         { return "" }
func (p *StickyKeysEnabled) Scope() Scope          { return ScopeUser }
func (p *StickyKeysEnabled) Status() Status        { return p.Stat }
func (p *StickyKeysEnabled) UntypedV() interface{} { return p.Val }
func (p *StickyKeysEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *StickyKeysEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 563. AppRecommendationZeroStateEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AppRecommendationZeroStateEnabled struct {
	Stat Status
	Val  bool
}

func (p *AppRecommendationZeroStateEnabled) Name() string          { return "AppRecommendationZeroStateEnabled" }
func (p *AppRecommendationZeroStateEnabled) Field() string         { return "" }
func (p *AppRecommendationZeroStateEnabled) Scope() Scope          { return ScopeUser }
func (p *AppRecommendationZeroStateEnabled) Status() Status        { return p.Stat }
func (p *AppRecommendationZeroStateEnabled) UntypedV() interface{} { return p.Val }
func (p *AppRecommendationZeroStateEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AppRecommendationZeroStateEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 565. PolicyDictionaryMultipleSourceMergeList
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PolicyDictionaryMultipleSourceMergeList struct {
	Stat Status
	Val  []string
}

func (p *PolicyDictionaryMultipleSourceMergeList) Name() string {
	return "PolicyDictionaryMultipleSourceMergeList"
}
func (p *PolicyDictionaryMultipleSourceMergeList) Field() string         { return "" }
func (p *PolicyDictionaryMultipleSourceMergeList) Scope() Scope          { return ScopeUser }
func (p *PolicyDictionaryMultipleSourceMergeList) Status() Status        { return p.Stat }
func (p *PolicyDictionaryMultipleSourceMergeList) UntypedV() interface{} { return p.Val }
func (p *PolicyDictionaryMultipleSourceMergeList) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *PolicyDictionaryMultipleSourceMergeList) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 567. RelaunchHeadsUpPeriod
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RelaunchHeadsUpPeriod struct {
	Stat Status
	Val  int
}

func (p *RelaunchHeadsUpPeriod) Name() string          { return "RelaunchHeadsUpPeriod" }
func (p *RelaunchHeadsUpPeriod) Field() string         { return "" }
func (p *RelaunchHeadsUpPeriod) Scope() Scope          { return ScopeUser }
func (p *RelaunchHeadsUpPeriod) Status() Status        { return p.Stat }
func (p *RelaunchHeadsUpPeriod) UntypedV() interface{} { return p.Val }
func (p *RelaunchHeadsUpPeriod) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *RelaunchHeadsUpPeriod) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 568. StartupBrowserWindowLaunchSuppressed
///////////////////////////////////////////////////////////////////////////////
type StartupBrowserWindowLaunchSuppressed struct {
	Stat Status
	Val  bool
}

func (p *StartupBrowserWindowLaunchSuppressed) Name() string {
	return "StartupBrowserWindowLaunchSuppressed"
}
func (p *StartupBrowserWindowLaunchSuppressed) Field() string         { return "" }
func (p *StartupBrowserWindowLaunchSuppressed) Scope() Scope          { return ScopeUser }
func (p *StartupBrowserWindowLaunchSuppressed) Status() Status        { return p.Stat }
func (p *StartupBrowserWindowLaunchSuppressed) UntypedV() interface{} { return p.Val }
func (p *StartupBrowserWindowLaunchSuppressed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *StartupBrowserWindowLaunchSuppressed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 570. UserFeedbackAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type UserFeedbackAllowed struct {
	Stat Status
	Val  bool
}

func (p *UserFeedbackAllowed) Name() string          { return "UserFeedbackAllowed" }
func (p *UserFeedbackAllowed) Field() string         { return "" }
func (p *UserFeedbackAllowed) Scope() Scope          { return ScopeUser }
func (p *UserFeedbackAllowed) Status() Status        { return p.Stat }
func (p *UserFeedbackAllowed) UntypedV() interface{} { return p.Val }
func (p *UserFeedbackAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *UserFeedbackAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 571. DevicePowerwashAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DevicePowerwashAllowed struct {
	Stat Status
	Val  bool
}

func (p *DevicePowerwashAllowed) Name() string { return "DevicePowerwashAllowed" }
func (p *DevicePowerwashAllowed) Field() string {
	return "device_powerwash_allowed.device_powerwash_allowed"
}
func (p *DevicePowerwashAllowed) Scope() Scope          { return ScopeDevice }
func (p *DevicePowerwashAllowed) Status() Status        { return p.Stat }
func (p *DevicePowerwashAllowed) UntypedV() interface{} { return p.Val }
func (p *DevicePowerwashAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DevicePowerwashAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 572. ExternalPrintServers
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ExternalPrintServers struct {
	Stat Status
	Val  *ExternalPrintServersValue
}

type ExternalPrintServersValue struct {
	Hash string `json:"hash"`
	Url  string `json:"url"`
}

func (p *ExternalPrintServers) Name() string          { return "ExternalPrintServers" }
func (p *ExternalPrintServers) Field() string         { return "" }
func (p *ExternalPrintServers) Scope() Scope          { return ScopeUser }
func (p *ExternalPrintServers) Status() Status        { return p.Stat }
func (p *ExternalPrintServers) UntypedV() interface{} { return p.Val }
func (p *ExternalPrintServers) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *ExternalPrintServersValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *ExternalPrintServersValue", m)
	}
	return v, nil
}
func (p *ExternalPrintServers) Equal(iface interface{}) bool {
	v, ok := iface.(*ExternalPrintServersValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 573. SelectToSpeakEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SelectToSpeakEnabled struct {
	Stat Status
	Val  bool
}

func (p *SelectToSpeakEnabled) Name() string          { return "SelectToSpeakEnabled" }
func (p *SelectToSpeakEnabled) Field() string         { return "" }
func (p *SelectToSpeakEnabled) Scope() Scope          { return ScopeUser }
func (p *SelectToSpeakEnabled) Status() Status        { return p.Stat }
func (p *SelectToSpeakEnabled) UntypedV() interface{} { return p.Val }
func (p *SelectToSpeakEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SelectToSpeakEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 576. CrostiniRootAccessAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CrostiniRootAccessAllowed struct {
	Stat Status
	Val  bool
}

func (p *CrostiniRootAccessAllowed) Name() string          { return "CrostiniRootAccessAllowed" }
func (p *CrostiniRootAccessAllowed) Field() string         { return "" }
func (p *CrostiniRootAccessAllowed) Scope() Scope          { return ScopeUser }
func (p *CrostiniRootAccessAllowed) Status() Status        { return p.Stat }
func (p *CrostiniRootAccessAllowed) UntypedV() interface{} { return p.Val }
func (p *CrostiniRootAccessAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *CrostiniRootAccessAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 577. VmManagementCliAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type VmManagementCliAllowed struct {
	Stat Status
	Val  bool
}

func (p *VmManagementCliAllowed) Name() string          { return "VmManagementCliAllowed" }
func (p *VmManagementCliAllowed) Field() string         { return "" }
func (p *VmManagementCliAllowed) Scope() Scope          { return ScopeUser }
func (p *VmManagementCliAllowed) Status() Status        { return p.Stat }
func (p *VmManagementCliAllowed) UntypedV() interface{} { return p.Val }
func (p *VmManagementCliAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *VmManagementCliAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 579. CACertificateManagementAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CACertificateManagementAllowed struct {
	Stat Status
	Val  int
}

func (p *CACertificateManagementAllowed) Name() string          { return "CACertificateManagementAllowed" }
func (p *CACertificateManagementAllowed) Field() string         { return "" }
func (p *CACertificateManagementAllowed) Scope() Scope          { return ScopeUser }
func (p *CACertificateManagementAllowed) Status() Status        { return p.Stat }
func (p *CACertificateManagementAllowed) UntypedV() interface{} { return p.Val }
func (p *CACertificateManagementAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *CACertificateManagementAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 580. PasswordLeakDetectionEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PasswordLeakDetectionEnabled struct {
	Stat Status
	Val  bool
}

func (p *PasswordLeakDetectionEnabled) Name() string          { return "PasswordLeakDetectionEnabled" }
func (p *PasswordLeakDetectionEnabled) Field() string         { return "" }
func (p *PasswordLeakDetectionEnabled) Scope() Scope          { return ScopeUser }
func (p *PasswordLeakDetectionEnabled) Status() Status        { return p.Stat }
func (p *PasswordLeakDetectionEnabled) UntypedV() interface{} { return p.Val }
func (p *PasswordLeakDetectionEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PasswordLeakDetectionEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 581. LockScreenMediaPlaybackEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type LockScreenMediaPlaybackEnabled struct {
	Stat Status
	Val  bool
}

func (p *LockScreenMediaPlaybackEnabled) Name() string          { return "LockScreenMediaPlaybackEnabled" }
func (p *LockScreenMediaPlaybackEnabled) Field() string         { return "" }
func (p *LockScreenMediaPlaybackEnabled) Scope() Scope          { return ScopeUser }
func (p *LockScreenMediaPlaybackEnabled) Status() Status        { return p.Stat }
func (p *LockScreenMediaPlaybackEnabled) UntypedV() interface{} { return p.Val }
func (p *LockScreenMediaPlaybackEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *LockScreenMediaPlaybackEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 582. DnsOverHttpsMode
// This policy has a default value of off.
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DnsOverHttpsMode struct {
	Stat Status
	Val  string
}

func (p *DnsOverHttpsMode) Name() string          { return "DnsOverHttpsMode" }
func (p *DnsOverHttpsMode) Field() string         { return "" }
func (p *DnsOverHttpsMode) Scope() Scope          { return ScopeUser }
func (p *DnsOverHttpsMode) Status() Status        { return p.Stat }
func (p *DnsOverHttpsMode) UntypedV() interface{} { return p.Val }
func (p *DnsOverHttpsMode) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DnsOverHttpsMode) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 583. SendFilesForMalwareCheck
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SendFilesForMalwareCheck struct {
	Stat Status
	Val  int
}

func (p *SendFilesForMalwareCheck) Name() string          { return "SendFilesForMalwareCheck" }
func (p *SendFilesForMalwareCheck) Field() string         { return "" }
func (p *SendFilesForMalwareCheck) Scope() Scope          { return ScopeUser }
func (p *SendFilesForMalwareCheck) Status() Status        { return p.Stat }
func (p *SendFilesForMalwareCheck) UntypedV() interface{} { return p.Val }
func (p *SendFilesForMalwareCheck) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *SendFilesForMalwareCheck) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 584. PolicyAtomicGroupsEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PolicyAtomicGroupsEnabled struct {
	Stat Status
	Val  bool
}

func (p *PolicyAtomicGroupsEnabled) Name() string          { return "PolicyAtomicGroupsEnabled" }
func (p *PolicyAtomicGroupsEnabled) Field() string         { return "" }
func (p *PolicyAtomicGroupsEnabled) Scope() Scope          { return ScopeUser }
func (p *PolicyAtomicGroupsEnabled) Status() Status        { return p.Stat }
func (p *PolicyAtomicGroupsEnabled) UntypedV() interface{} { return p.Val }
func (p *PolicyAtomicGroupsEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PolicyAtomicGroupsEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 585. UnsafeEventsReportingEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type UnsafeEventsReportingEnabled struct {
	Stat Status
	Val  bool
}

func (p *UnsafeEventsReportingEnabled) Name() string          { return "UnsafeEventsReportingEnabled" }
func (p *UnsafeEventsReportingEnabled) Field() string         { return "" }
func (p *UnsafeEventsReportingEnabled) Scope() Scope          { return ScopeUser }
func (p *UnsafeEventsReportingEnabled) Status() Status        { return p.Stat }
func (p *UnsafeEventsReportingEnabled) UntypedV() interface{} { return p.Val }
func (p *UnsafeEventsReportingEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *UnsafeEventsReportingEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 586. BlockLargeFileTransfer
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type BlockLargeFileTransfer struct {
	Stat Status
	Val  int
}

func (p *BlockLargeFileTransfer) Name() string          { return "BlockLargeFileTransfer" }
func (p *BlockLargeFileTransfer) Field() string         { return "" }
func (p *BlockLargeFileTransfer) Scope() Scope          { return ScopeUser }
func (p *BlockLargeFileTransfer) Status() Status        { return p.Stat }
func (p *BlockLargeFileTransfer) UntypedV() interface{} { return p.Val }
func (p *BlockLargeFileTransfer) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *BlockLargeFileTransfer) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 587. DelayDeliveryUntilVerdict
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DelayDeliveryUntilVerdict struct {
	Stat Status
	Val  int
}

func (p *DelayDeliveryUntilVerdict) Name() string          { return "DelayDeliveryUntilVerdict" }
func (p *DelayDeliveryUntilVerdict) Field() string         { return "" }
func (p *DelayDeliveryUntilVerdict) Scope() Scope          { return ScopeUser }
func (p *DelayDeliveryUntilVerdict) Status() Status        { return p.Stat }
func (p *DelayDeliveryUntilVerdict) UntypedV() interface{} { return p.Val }
func (p *DelayDeliveryUntilVerdict) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DelayDeliveryUntilVerdict) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 588. AllowPasswordProtectedFiles
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AllowPasswordProtectedFiles struct {
	Stat Status
	Val  int
}

func (p *AllowPasswordProtectedFiles) Name() string          { return "AllowPasswordProtectedFiles" }
func (p *AllowPasswordProtectedFiles) Field() string         { return "" }
func (p *AllowPasswordProtectedFiles) Scope() Scope          { return ScopeUser }
func (p *AllowPasswordProtectedFiles) Status() Status        { return p.Stat }
func (p *AllowPasswordProtectedFiles) UntypedV() interface{} { return p.Val }
func (p *AllowPasswordProtectedFiles) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *AllowPasswordProtectedFiles) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 589. CheckContentCompliance
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CheckContentCompliance struct {
	Stat Status
	Val  int
}

func (p *CheckContentCompliance) Name() string          { return "CheckContentCompliance" }
func (p *CheckContentCompliance) Field() string         { return "" }
func (p *CheckContentCompliance) Scope() Scope          { return ScopeUser }
func (p *CheckContentCompliance) Status() Status        { return p.Stat }
func (p *CheckContentCompliance) UntypedV() interface{} { return p.Val }
func (p *CheckContentCompliance) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *CheckContentCompliance) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 590. URLsToCheckComplianceOfDownloadedContent
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type URLsToCheckComplianceOfDownloadedContent struct {
	Stat Status
	Val  []string
}

func (p *URLsToCheckComplianceOfDownloadedContent) Name() string {
	return "URLsToCheckComplianceOfDownloadedContent"
}
func (p *URLsToCheckComplianceOfDownloadedContent) Field() string         { return "" }
func (p *URLsToCheckComplianceOfDownloadedContent) Scope() Scope          { return ScopeUser }
func (p *URLsToCheckComplianceOfDownloadedContent) Status() Status        { return p.Stat }
func (p *URLsToCheckComplianceOfDownloadedContent) UntypedV() interface{} { return p.Val }
func (p *URLsToCheckComplianceOfDownloadedContent) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *URLsToCheckComplianceOfDownloadedContent) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 591. URLsToNotCheckComplianceOfUploadedContent
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type URLsToNotCheckComplianceOfUploadedContent struct {
	Stat Status
	Val  []string
}

func (p *URLsToNotCheckComplianceOfUploadedContent) Name() string {
	return "URLsToNotCheckComplianceOfUploadedContent"
}
func (p *URLsToNotCheckComplianceOfUploadedContent) Field() string         { return "" }
func (p *URLsToNotCheckComplianceOfUploadedContent) Scope() Scope          { return ScopeUser }
func (p *URLsToNotCheckComplianceOfUploadedContent) Status() Status        { return p.Stat }
func (p *URLsToNotCheckComplianceOfUploadedContent) UntypedV() interface{} { return p.Val }
func (p *URLsToNotCheckComplianceOfUploadedContent) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *URLsToNotCheckComplianceOfUploadedContent) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 592. DictationEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DictationEnabled struct {
	Stat Status
	Val  bool
}

func (p *DictationEnabled) Name() string          { return "DictationEnabled" }
func (p *DictationEnabled) Field() string         { return "" }
func (p *DictationEnabled) Scope() Scope          { return ScopeUser }
func (p *DictationEnabled) Status() Status        { return p.Stat }
func (p *DictationEnabled) UntypedV() interface{} { return p.Val }
func (p *DictationEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DictationEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 593. KeyboardFocusHighlightEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type KeyboardFocusHighlightEnabled struct {
	Stat Status
	Val  bool
}

func (p *KeyboardFocusHighlightEnabled) Name() string          { return "KeyboardFocusHighlightEnabled" }
func (p *KeyboardFocusHighlightEnabled) Field() string         { return "" }
func (p *KeyboardFocusHighlightEnabled) Scope() Scope          { return ScopeUser }
func (p *KeyboardFocusHighlightEnabled) Status() Status        { return p.Stat }
func (p *KeyboardFocusHighlightEnabled) UntypedV() interface{} { return p.Val }
func (p *KeyboardFocusHighlightEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *KeyboardFocusHighlightEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 594. CursorHighlightEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CursorHighlightEnabled struct {
	Stat Status
	Val  bool
}

func (p *CursorHighlightEnabled) Name() string          { return "CursorHighlightEnabled" }
func (p *CursorHighlightEnabled) Field() string         { return "" }
func (p *CursorHighlightEnabled) Scope() Scope          { return ScopeUser }
func (p *CursorHighlightEnabled) Status() Status        { return p.Stat }
func (p *CursorHighlightEnabled) UntypedV() interface{} { return p.Val }
func (p *CursorHighlightEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *CursorHighlightEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 595. CaretHighlightEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CaretHighlightEnabled struct {
	Stat Status
	Val  bool
}

func (p *CaretHighlightEnabled) Name() string          { return "CaretHighlightEnabled" }
func (p *CaretHighlightEnabled) Field() string         { return "" }
func (p *CaretHighlightEnabled) Scope() Scope          { return ScopeUser }
func (p *CaretHighlightEnabled) Status() Status        { return p.Stat }
func (p *CaretHighlightEnabled) UntypedV() interface{} { return p.Val }
func (p *CaretHighlightEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *CaretHighlightEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 596. MonoAudioEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type MonoAudioEnabled struct {
	Stat Status
	Val  bool
}

func (p *MonoAudioEnabled) Name() string          { return "MonoAudioEnabled" }
func (p *MonoAudioEnabled) Field() string         { return "" }
func (p *MonoAudioEnabled) Scope() Scope          { return ScopeUser }
func (p *MonoAudioEnabled) Status() Status        { return p.Stat }
func (p *MonoAudioEnabled) UntypedV() interface{} { return p.Val }
func (p *MonoAudioEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *MonoAudioEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 597. AutoclickEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AutoclickEnabled struct {
	Stat Status
	Val  bool
}

func (p *AutoclickEnabled) Name() string          { return "AutoclickEnabled" }
func (p *AutoclickEnabled) Field() string         { return "" }
func (p *AutoclickEnabled) Scope() Scope          { return ScopeUser }
func (p *AutoclickEnabled) Status() Status        { return p.Stat }
func (p *AutoclickEnabled) UntypedV() interface{} { return p.Val }
func (p *AutoclickEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AutoclickEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 599. DeviceLoginScreenLargeCursorEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenLargeCursorEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenLargeCursorEnabled) Name() string {
	return "DeviceLoginScreenLargeCursorEnabled"
}
func (p *DeviceLoginScreenLargeCursorEnabled) Field() string {
	return "accessibility_settings.login_screen_large_cursor_enabled"
}
func (p *DeviceLoginScreenLargeCursorEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenLargeCursorEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenLargeCursorEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenLargeCursorEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenLargeCursorEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 600. URLsToCheckForMalwareOfUploadedContent
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type URLsToCheckForMalwareOfUploadedContent struct {
	Stat Status
	Val  []string
}

func (p *URLsToCheckForMalwareOfUploadedContent) Name() string {
	return "URLsToCheckForMalwareOfUploadedContent"
}
func (p *URLsToCheckForMalwareOfUploadedContent) Field() string         { return "" }
func (p *URLsToCheckForMalwareOfUploadedContent) Scope() Scope          { return ScopeUser }
func (p *URLsToCheckForMalwareOfUploadedContent) Status() Status        { return p.Stat }
func (p *URLsToCheckForMalwareOfUploadedContent) UntypedV() interface{} { return p.Val }
func (p *URLsToCheckForMalwareOfUploadedContent) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *URLsToCheckForMalwareOfUploadedContent) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 601. HSTSPolicyBypassList
///////////////////////////////////////////////////////////////////////////////
type HSTSPolicyBypassList struct {
	Stat Status
	Val  []string
}

func (p *HSTSPolicyBypassList) Name() string          { return "HSTSPolicyBypassList" }
func (p *HSTSPolicyBypassList) Field() string         { return "" }
func (p *HSTSPolicyBypassList) Scope() Scope          { return ScopeUser }
func (p *HSTSPolicyBypassList) Status() Status        { return p.Stat }
func (p *HSTSPolicyBypassList) UntypedV() interface{} { return p.Val }
func (p *HSTSPolicyBypassList) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *HSTSPolicyBypassList) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 602. ReportDeviceOsUpdateStatus
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceOsUpdateStatus struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceOsUpdateStatus) Name() string { return "ReportDeviceOsUpdateStatus" }
func (p *ReportDeviceOsUpdateStatus) Field() string {
	return "device_reporting.report_os_update_status"
}
func (p *ReportDeviceOsUpdateStatus) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceOsUpdateStatus) Status() Status        { return p.Stat }
func (p *ReportDeviceOsUpdateStatus) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceOsUpdateStatus) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceOsUpdateStatus) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 603. DeviceLoginScreenWebUsbAllowDevicesForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenWebUsbAllowDevicesForUrls struct {
	Stat Status
	Val  []*DeviceLoginScreenWebUsbAllowDevicesForUrlsValue
}

type DeviceLoginScreenWebUsbAllowDevicesForUrlsValue struct {
	Devices []*DeviceLoginScreenWebUsbAllowDevicesForUrlsValueDevices `json:"devices"`
	Urls    []string                                                  `json:"urls"`
}

type DeviceLoginScreenWebUsbAllowDevicesForUrlsValueDevices struct {
	ProductId int `json:"product_id"`
	VendorId  int `json:"vendor_id"`
}

func (p *DeviceLoginScreenWebUsbAllowDevicesForUrls) Name() string {
	return "DeviceLoginScreenWebUsbAllowDevicesForUrls"
}
func (p *DeviceLoginScreenWebUsbAllowDevicesForUrls) Field() string {
	return "device_login_screen_webusb_allow_devices_for_urls.device_login_screen_webusb_allow_devices_for_urls"
}
func (p *DeviceLoginScreenWebUsbAllowDevicesForUrls) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenWebUsbAllowDevicesForUrls) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenWebUsbAllowDevicesForUrls) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenWebUsbAllowDevicesForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*DeviceLoginScreenWebUsbAllowDevicesForUrlsValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*DeviceLoginScreenWebUsbAllowDevicesForUrlsValue", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenWebUsbAllowDevicesForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]*DeviceLoginScreenWebUsbAllowDevicesForUrlsValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 604. AllowSyncXHRInPageDismissal
// This policy has a default value of True.
///////////////////////////////////////////////////////////////////////////////
type AllowSyncXHRInPageDismissal struct {
	Stat Status
	Val  bool
}

func (p *AllowSyncXHRInPageDismissal) Name() string          { return "AllowSyncXHRInPageDismissal" }
func (p *AllowSyncXHRInPageDismissal) Field() string         { return "" }
func (p *AllowSyncXHRInPageDismissal) Scope() Scope          { return ScopeUser }
func (p *AllowSyncXHRInPageDismissal) Status() Status        { return p.Stat }
func (p *AllowSyncXHRInPageDismissal) UntypedV() interface{} { return p.Val }
func (p *AllowSyncXHRInPageDismissal) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AllowSyncXHRInPageDismissal) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 605. DeviceLoginScreenSpokenFeedbackEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenSpokenFeedbackEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenSpokenFeedbackEnabled) Name() string {
	return "DeviceLoginScreenSpokenFeedbackEnabled"
}
func (p *DeviceLoginScreenSpokenFeedbackEnabled) Field() string {
	return "accessibility_settings.login_screen_spoken_feedback_enabled"
}
func (p *DeviceLoginScreenSpokenFeedbackEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenSpokenFeedbackEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenSpokenFeedbackEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenSpokenFeedbackEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenSpokenFeedbackEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 606. DeviceLoginScreenHighContrastEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenHighContrastEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenHighContrastEnabled) Name() string {
	return "DeviceLoginScreenHighContrastEnabled"
}
func (p *DeviceLoginScreenHighContrastEnabled) Field() string {
	return "accessibility_settings.login_screen_high_contrast_enabled"
}
func (p *DeviceLoginScreenHighContrastEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenHighContrastEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenHighContrastEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenHighContrastEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenHighContrastEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 607. DeviceLoginScreenVirtualKeyboardEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenVirtualKeyboardEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenVirtualKeyboardEnabled) Name() string {
	return "DeviceLoginScreenVirtualKeyboardEnabled"
}
func (p *DeviceLoginScreenVirtualKeyboardEnabled) Field() string {
	return "accessibility_settings.login_screen_virtual_keyboard_enabled"
}
func (p *DeviceLoginScreenVirtualKeyboardEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenVirtualKeyboardEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenVirtualKeyboardEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenVirtualKeyboardEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenVirtualKeyboardEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 608. CloudExtensionRequestEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CloudExtensionRequestEnabled struct {
	Stat Status
	Val  bool
}

func (p *CloudExtensionRequestEnabled) Name() string          { return "CloudExtensionRequestEnabled" }
func (p *CloudExtensionRequestEnabled) Field() string         { return "" }
func (p *CloudExtensionRequestEnabled) Scope() Scope          { return ScopeUser }
func (p *CloudExtensionRequestEnabled) Status() Status        { return p.Stat }
func (p *CloudExtensionRequestEnabled) UntypedV() interface{} { return p.Val }
func (p *CloudExtensionRequestEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *CloudExtensionRequestEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 609. DeviceLoginScreenSystemInfoEnforced
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenSystemInfoEnforced struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenSystemInfoEnforced) Name() string {
	return "DeviceLoginScreenSystemInfoEnforced"
}
func (p *DeviceLoginScreenSystemInfoEnforced) Field() string {
	return "device_login_screen_system_info_enforced.enabled"
}
func (p *DeviceLoginScreenSystemInfoEnforced) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenSystemInfoEnforced) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenSystemInfoEnforced) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenSystemInfoEnforced) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenSystemInfoEnforced) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 610. SharedClipboardEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SharedClipboardEnabled struct {
	Stat Status
	Val  bool
}

func (p *SharedClipboardEnabled) Name() string          { return "SharedClipboardEnabled" }
func (p *SharedClipboardEnabled) Field() string         { return "" }
func (p *SharedClipboardEnabled) Scope() Scope          { return ScopeUser }
func (p *SharedClipboardEnabled) Status() Status        { return p.Stat }
func (p *SharedClipboardEnabled) UntypedV() interface{} { return p.Val }
func (p *SharedClipboardEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SharedClipboardEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 611. DeviceLoginScreenDictationEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenDictationEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenDictationEnabled) Name() string { return "DeviceLoginScreenDictationEnabled" }
func (p *DeviceLoginScreenDictationEnabled) Field() string {
	return "accessibility_settings.login_screen_dictation_enabled"
}
func (p *DeviceLoginScreenDictationEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenDictationEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenDictationEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenDictationEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenDictationEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 612. DeviceLoginScreenSelectToSpeakEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenSelectToSpeakEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenSelectToSpeakEnabled) Name() string {
	return "DeviceLoginScreenSelectToSpeakEnabled"
}
func (p *DeviceLoginScreenSelectToSpeakEnabled) Field() string {
	return "accessibility_settings.login_screen_select_to_speak_enabled"
}
func (p *DeviceLoginScreenSelectToSpeakEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenSelectToSpeakEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenSelectToSpeakEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenSelectToSpeakEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenSelectToSpeakEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 613. DeviceLoginScreenCursorHighlightEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenCursorHighlightEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenCursorHighlightEnabled) Name() string {
	return "DeviceLoginScreenCursorHighlightEnabled"
}
func (p *DeviceLoginScreenCursorHighlightEnabled) Field() string {
	return "accessibility_settings.login_screen_cursor_highlight_enabled"
}
func (p *DeviceLoginScreenCursorHighlightEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenCursorHighlightEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenCursorHighlightEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenCursorHighlightEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenCursorHighlightEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 614. DeviceLoginScreenCaretHighlightEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenCaretHighlightEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenCaretHighlightEnabled) Name() string {
	return "DeviceLoginScreenCaretHighlightEnabled"
}
func (p *DeviceLoginScreenCaretHighlightEnabled) Field() string {
	return "accessibility_settings.login_screen_caret_highlight_enabled"
}
func (p *DeviceLoginScreenCaretHighlightEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenCaretHighlightEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenCaretHighlightEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenCaretHighlightEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenCaretHighlightEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 615. DeviceLoginScreenMonoAudioEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenMonoAudioEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenMonoAudioEnabled) Name() string { return "DeviceLoginScreenMonoAudioEnabled" }
func (p *DeviceLoginScreenMonoAudioEnabled) Field() string {
	return "accessibility_settings.login_screen_mono_audio_enabled"
}
func (p *DeviceLoginScreenMonoAudioEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenMonoAudioEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenMonoAudioEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenMonoAudioEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenMonoAudioEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 617. DeviceLoginScreenAutoclickEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenAutoclickEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenAutoclickEnabled) Name() string { return "DeviceLoginScreenAutoclickEnabled" }
func (p *DeviceLoginScreenAutoclickEnabled) Field() string {
	return "accessibility_settings.login_screen_autoclick_enabled"
}
func (p *DeviceLoginScreenAutoclickEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenAutoclickEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenAutoclickEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenAutoclickEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenAutoclickEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 618. DeviceLoginScreenStickyKeysEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenStickyKeysEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenStickyKeysEnabled) Name() string {
	return "DeviceLoginScreenStickyKeysEnabled"
}
func (p *DeviceLoginScreenStickyKeysEnabled) Field() string {
	return "accessibility_settings.login_screen_sticky_keys_enabled"
}
func (p *DeviceLoginScreenStickyKeysEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenStickyKeysEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenStickyKeysEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenStickyKeysEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenStickyKeysEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 619. DeviceLoginScreenKeyboardFocusHighlightEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenKeyboardFocusHighlightEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenKeyboardFocusHighlightEnabled) Name() string {
	return "DeviceLoginScreenKeyboardFocusHighlightEnabled"
}
func (p *DeviceLoginScreenKeyboardFocusHighlightEnabled) Field() string         { return "" }
func (p *DeviceLoginScreenKeyboardFocusHighlightEnabled) Scope() Scope          { return ScopeUser }
func (p *DeviceLoginScreenKeyboardFocusHighlightEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenKeyboardFocusHighlightEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenKeyboardFocusHighlightEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenKeyboardFocusHighlightEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 620. ShelfAlignment
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ShelfAlignment struct {
	Stat Status
	Val  string
}

func (p *ShelfAlignment) Name() string          { return "ShelfAlignment" }
func (p *ShelfAlignment) Field() string         { return "" }
func (p *ShelfAlignment) Scope() Scope          { return ScopeUser }
func (p *ShelfAlignment) Status() Status        { return p.Stat }
func (p *ShelfAlignment) UntypedV() interface{} { return p.Val }
func (p *ShelfAlignment) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *ShelfAlignment) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 621. PrintingAllowedBackgroundGraphicsModes
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintingAllowedBackgroundGraphicsModes struct {
	Stat Status
	Val  string
}

func (p *PrintingAllowedBackgroundGraphicsModes) Name() string {
	return "PrintingAllowedBackgroundGraphicsModes"
}
func (p *PrintingAllowedBackgroundGraphicsModes) Field() string         { return "" }
func (p *PrintingAllowedBackgroundGraphicsModes) Scope() Scope          { return ScopeUser }
func (p *PrintingAllowedBackgroundGraphicsModes) Status() Status        { return p.Stat }
func (p *PrintingAllowedBackgroundGraphicsModes) UntypedV() interface{} { return p.Val }
func (p *PrintingAllowedBackgroundGraphicsModes) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *PrintingAllowedBackgroundGraphicsModes) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 622. PrintingBackgroundGraphicsDefault
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintingBackgroundGraphicsDefault struct {
	Stat Status
	Val  string
}

func (p *PrintingBackgroundGraphicsDefault) Name() string          { return "PrintingBackgroundGraphicsDefault" }
func (p *PrintingBackgroundGraphicsDefault) Field() string         { return "" }
func (p *PrintingBackgroundGraphicsDefault) Scope() Scope          { return ScopeUser }
func (p *PrintingBackgroundGraphicsDefault) Status() Status        { return p.Stat }
func (p *PrintingBackgroundGraphicsDefault) UntypedV() interface{} { return p.Val }
func (p *PrintingBackgroundGraphicsDefault) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *PrintingBackgroundGraphicsDefault) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 623. LegacySameSiteCookieBehaviorEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type LegacySameSiteCookieBehaviorEnabled struct {
	Stat Status
	Val  int
}

func (p *LegacySameSiteCookieBehaviorEnabled) Name() string {
	return "LegacySameSiteCookieBehaviorEnabled"
}
func (p *LegacySameSiteCookieBehaviorEnabled) Field() string         { return "" }
func (p *LegacySameSiteCookieBehaviorEnabled) Scope() Scope          { return ScopeUser }
func (p *LegacySameSiteCookieBehaviorEnabled) Status() Status        { return p.Stat }
func (p *LegacySameSiteCookieBehaviorEnabled) UntypedV() interface{} { return p.Val }
func (p *LegacySameSiteCookieBehaviorEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *LegacySameSiteCookieBehaviorEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 624. LegacySameSiteCookieBehaviorEnabledForDomainList
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type LegacySameSiteCookieBehaviorEnabledForDomainList struct {
	Stat Status
	Val  []string
}

func (p *LegacySameSiteCookieBehaviorEnabledForDomainList) Name() string {
	return "LegacySameSiteCookieBehaviorEnabledForDomainList"
}
func (p *LegacySameSiteCookieBehaviorEnabledForDomainList) Field() string         { return "" }
func (p *LegacySameSiteCookieBehaviorEnabledForDomainList) Scope() Scope          { return ScopeUser }
func (p *LegacySameSiteCookieBehaviorEnabledForDomainList) Status() Status        { return p.Stat }
func (p *LegacySameSiteCookieBehaviorEnabledForDomainList) UntypedV() interface{} { return p.Val }
func (p *LegacySameSiteCookieBehaviorEnabledForDomainList) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *LegacySameSiteCookieBehaviorEnabledForDomainList) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 625. PrintJobHistoryExpirationPeriod
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintJobHistoryExpirationPeriod struct {
	Stat Status
	Val  int
}

func (p *PrintJobHistoryExpirationPeriod) Name() string          { return "PrintJobHistoryExpirationPeriod" }
func (p *PrintJobHistoryExpirationPeriod) Field() string         { return "" }
func (p *PrintJobHistoryExpirationPeriod) Scope() Scope          { return ScopeUser }
func (p *PrintJobHistoryExpirationPeriod) Status() Status        { return p.Stat }
func (p *PrintJobHistoryExpirationPeriod) UntypedV() interface{} { return p.Val }
func (p *PrintJobHistoryExpirationPeriod) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *PrintJobHistoryExpirationPeriod) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 626. TLS13HardeningForLocalAnchorsEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type TLS13HardeningForLocalAnchorsEnabled struct {
	Stat Status
	Val  bool
}

func (p *TLS13HardeningForLocalAnchorsEnabled) Name() string {
	return "TLS13HardeningForLocalAnchorsEnabled"
}
func (p *TLS13HardeningForLocalAnchorsEnabled) Field() string         { return "" }
func (p *TLS13HardeningForLocalAnchorsEnabled) Scope() Scope          { return ScopeUser }
func (p *TLS13HardeningForLocalAnchorsEnabled) Status() Status        { return p.Stat }
func (p *TLS13HardeningForLocalAnchorsEnabled) UntypedV() interface{} { return p.Val }
func (p *TLS13HardeningForLocalAnchorsEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *TLS13HardeningForLocalAnchorsEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 628. DeviceLoginScreenScreenMagnifierType
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenScreenMagnifierType struct {
	Stat Status
	Val  int
}

func (p *DeviceLoginScreenScreenMagnifierType) Name() string {
	return "DeviceLoginScreenScreenMagnifierType"
}
func (p *DeviceLoginScreenScreenMagnifierType) Field() string {
	return "accessibility_settings.login_screen_screen_magnifier_type"
}
func (p *DeviceLoginScreenScreenMagnifierType) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenScreenMagnifierType) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenScreenMagnifierType) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenScreenMagnifierType) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenScreenMagnifierType) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 629. CorsMitigationList
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CorsMitigationList struct {
	Stat Status
	Val  []string
}

func (p *CorsMitigationList) Name() string          { return "CorsMitigationList" }
func (p *CorsMitigationList) Field() string         { return "" }
func (p *CorsMitigationList) Scope() Scope          { return ScopeUser }
func (p *CorsMitigationList) Status() Status        { return p.Stat }
func (p *CorsMitigationList) UntypedV() interface{} { return p.Val }
func (p *CorsMitigationList) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *CorsMitigationList) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 630. CorsLegacyModeEnabled
///////////////////////////////////////////////////////////////////////////////
type CorsLegacyModeEnabled struct {
	Stat Status
	Val  bool
}

func (p *CorsLegacyModeEnabled) Name() string          { return "CorsLegacyModeEnabled" }
func (p *CorsLegacyModeEnabled) Field() string         { return "" }
func (p *CorsLegacyModeEnabled) Scope() Scope          { return ScopeUser }
func (p *CorsLegacyModeEnabled) Status() Status        { return p.Stat }
func (p *CorsLegacyModeEnabled) UntypedV() interface{} { return p.Val }
func (p *CorsLegacyModeEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *CorsLegacyModeEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 631. ExternalPrintServersWhitelist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ExternalPrintServersWhitelist struct {
	Stat Status
	Val  []string
}

func (p *ExternalPrintServersWhitelist) Name() string          { return "ExternalPrintServersWhitelist" }
func (p *ExternalPrintServersWhitelist) Field() string         { return "" }
func (p *ExternalPrintServersWhitelist) Scope() Scope          { return ScopeUser }
func (p *ExternalPrintServersWhitelist) Status() Status        { return p.Stat }
func (p *ExternalPrintServersWhitelist) UntypedV() interface{} { return p.Val }
func (p *ExternalPrintServersWhitelist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *ExternalPrintServersWhitelist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 633. DefaultInsecureContentSetting
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultInsecureContentSetting struct {
	Stat Status
	Val  int
}

func (p *DefaultInsecureContentSetting) Name() string          { return "DefaultInsecureContentSetting" }
func (p *DefaultInsecureContentSetting) Field() string         { return "" }
func (p *DefaultInsecureContentSetting) Scope() Scope          { return ScopeUser }
func (p *DefaultInsecureContentSetting) Status() Status        { return p.Stat }
func (p *DefaultInsecureContentSetting) UntypedV() interface{} { return p.Val }
func (p *DefaultInsecureContentSetting) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DefaultInsecureContentSetting) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 634. InsecureContentAllowedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type InsecureContentAllowedForUrls struct {
	Stat Status
	Val  []string
}

func (p *InsecureContentAllowedForUrls) Name() string          { return "InsecureContentAllowedForUrls" }
func (p *InsecureContentAllowedForUrls) Field() string         { return "" }
func (p *InsecureContentAllowedForUrls) Scope() Scope          { return ScopeUser }
func (p *InsecureContentAllowedForUrls) Status() Status        { return p.Stat }
func (p *InsecureContentAllowedForUrls) UntypedV() interface{} { return p.Val }
func (p *InsecureContentAllowedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *InsecureContentAllowedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 635. InsecureContentBlockedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type InsecureContentBlockedForUrls struct {
	Stat Status
	Val  []string
}

func (p *InsecureContentBlockedForUrls) Name() string          { return "InsecureContentBlockedForUrls" }
func (p *InsecureContentBlockedForUrls) Field() string         { return "" }
func (p *InsecureContentBlockedForUrls) Scope() Scope          { return ScopeUser }
func (p *InsecureContentBlockedForUrls) Status() Status        { return p.Stat }
func (p *InsecureContentBlockedForUrls) UntypedV() interface{} { return p.Val }
func (p *InsecureContentBlockedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *InsecureContentBlockedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 636. DeviceWebBasedAttestationAllowedUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceWebBasedAttestationAllowedUrls struct {
	Stat Status
	Val  []string
}

func (p *DeviceWebBasedAttestationAllowedUrls) Name() string {
	return "DeviceWebBasedAttestationAllowedUrls"
}
func (p *DeviceWebBasedAttestationAllowedUrls) Field() string {
	return "device_web_based_attestation_allowed_urls.value"
}
func (p *DeviceWebBasedAttestationAllowedUrls) Scope() Scope          { return ScopeDevice }
func (p *DeviceWebBasedAttestationAllowedUrls) Status() Status        { return p.Stat }
func (p *DeviceWebBasedAttestationAllowedUrls) UntypedV() interface{} { return p.Val }
func (p *DeviceWebBasedAttestationAllowedUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DeviceWebBasedAttestationAllowedUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 638. DeviceShowNumericKeyboardForPassword
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceShowNumericKeyboardForPassword struct {
	Stat Status
	Val  bool
}

func (p *DeviceShowNumericKeyboardForPassword) Name() string {
	return "DeviceShowNumericKeyboardForPassword"
}
func (p *DeviceShowNumericKeyboardForPassword) Field() string {
	return "device_show_numeric_keyboard_for_password.value"
}
func (p *DeviceShowNumericKeyboardForPassword) Scope() Scope          { return ScopeDevice }
func (p *DeviceShowNumericKeyboardForPassword) Status() Status        { return p.Stat }
func (p *DeviceShowNumericKeyboardForPassword) UntypedV() interface{} { return p.Val }
func (p *DeviceShowNumericKeyboardForPassword) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceShowNumericKeyboardForPassword) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 639. CrostiniAnsiblePlaybook
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CrostiniAnsiblePlaybook struct {
	Stat Status
	Val  *CrostiniAnsiblePlaybookValue
}

type CrostiniAnsiblePlaybookValue struct {
	Hash string `json:"hash"`
	Url  string `json:"url"`
}

func (p *CrostiniAnsiblePlaybook) Name() string          { return "CrostiniAnsiblePlaybook" }
func (p *CrostiniAnsiblePlaybook) Field() string         { return "" }
func (p *CrostiniAnsiblePlaybook) Scope() Scope          { return ScopeUser }
func (p *CrostiniAnsiblePlaybook) Status() Status        { return p.Stat }
func (p *CrostiniAnsiblePlaybook) UntypedV() interface{} { return p.Val }
func (p *CrostiniAnsiblePlaybook) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *CrostiniAnsiblePlaybookValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *CrostiniAnsiblePlaybookValue", m)
	}
	return v, nil
}
func (p *CrostiniAnsiblePlaybook) Equal(iface interface{}) bool {
	v, ok := iface.(*CrostiniAnsiblePlaybookValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 640. WebRtcLocalIpsAllowedUrls
///////////////////////////////////////////////////////////////////////////////
type WebRtcLocalIpsAllowedUrls struct {
	Stat Status
	Val  []string
}

func (p *WebRtcLocalIpsAllowedUrls) Name() string          { return "WebRtcLocalIpsAllowedUrls" }
func (p *WebRtcLocalIpsAllowedUrls) Field() string         { return "" }
func (p *WebRtcLocalIpsAllowedUrls) Scope() Scope          { return ScopeUser }
func (p *WebRtcLocalIpsAllowedUrls) Status() Status        { return p.Stat }
func (p *WebRtcLocalIpsAllowedUrls) UntypedV() interface{} { return p.Val }
func (p *WebRtcLocalIpsAllowedUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *WebRtcLocalIpsAllowedUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 641. PerAppTimeLimits
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PerAppTimeLimits struct {
	Stat Status
	Val  *PerAppTimeLimitsValue
}

type PerAppTimeLimitsValue struct {
	ActivityReportingEnabled bool                              `json:"activity_reporting_enabled"`
	AppLimits                []*PerAppTimeLimitsValueAppLimits `json:"app_limits"`
	ResetAt                  *PerAppTimeLimitsValueResetAt     `json:"reset_at"`
}

type PerAppTimeLimitsValueAppLimits struct {
	AppInfo           *PerAppTimeLimitsValueAppLimitsAppInfo `json:"app_info"`
	DailyLimitMins    int                                    `json:"daily_limit_mins"`
	LastUpdatedMillis string                                 `json:"last_updated_millis"`
	Restriction       string                                 `json:"restriction"`
}

type PerAppTimeLimitsValueAppLimitsAppInfo struct {
	AppId   string `json:"app_id"`
	AppType string `json:"app_type"`
}

type PerAppTimeLimitsValueResetAt struct {
	Hour   int `json:"hour"`
	Minute int `json:"minute"`
}

func (p *PerAppTimeLimits) Name() string          { return "PerAppTimeLimits" }
func (p *PerAppTimeLimits) Field() string         { return "" }
func (p *PerAppTimeLimits) Scope() Scope          { return ScopeUser }
func (p *PerAppTimeLimits) Status() Status        { return p.Stat }
func (p *PerAppTimeLimits) UntypedV() interface{} { return p.Val }
func (p *PerAppTimeLimits) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *PerAppTimeLimitsValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *PerAppTimeLimitsValue", m)
	}
	return v, nil
}
func (p *PerAppTimeLimits) Equal(iface interface{}) bool {
	v, ok := iface.(*PerAppTimeLimitsValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 642. DnsOverHttpsTemplates
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DnsOverHttpsTemplates struct {
	Stat Status
	Val  string
}

func (p *DnsOverHttpsTemplates) Name() string          { return "DnsOverHttpsTemplates" }
func (p *DnsOverHttpsTemplates) Field() string         { return "" }
func (p *DnsOverHttpsTemplates) Scope() Scope          { return ScopeUser }
func (p *DnsOverHttpsTemplates) Status() Status        { return p.Stat }
func (p *DnsOverHttpsTemplates) UntypedV() interface{} { return p.Val }
func (p *DnsOverHttpsTemplates) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DnsOverHttpsTemplates) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 643. GloballyScopeHTTPAuthCacheEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type GloballyScopeHTTPAuthCacheEnabled struct {
	Stat Status
	Val  bool
}

func (p *GloballyScopeHTTPAuthCacheEnabled) Name() string          { return "GloballyScopeHTTPAuthCacheEnabled" }
func (p *GloballyScopeHTTPAuthCacheEnabled) Field() string         { return "" }
func (p *GloballyScopeHTTPAuthCacheEnabled) Scope() Scope          { return ScopeUser }
func (p *GloballyScopeHTTPAuthCacheEnabled) Status() Status        { return p.Stat }
func (p *GloballyScopeHTTPAuthCacheEnabled) UntypedV() interface{} { return p.Val }
func (p *GloballyScopeHTTPAuthCacheEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *GloballyScopeHTTPAuthCacheEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 645. ClickToCallEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ClickToCallEnabled struct {
	Stat Status
	Val  bool
}

func (p *ClickToCallEnabled) Name() string          { return "ClickToCallEnabled" }
func (p *ClickToCallEnabled) Field() string         { return "" }
func (p *ClickToCallEnabled) Scope() Scope          { return ScopeUser }
func (p *ClickToCallEnabled) Status() Status        { return p.Stat }
func (p *ClickToCallEnabled) UntypedV() interface{} { return p.Val }
func (p *ClickToCallEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ClickToCallEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 646. DeviceLoginScreenShowOptionsInSystemTrayMenu
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenShowOptionsInSystemTrayMenu struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenShowOptionsInSystemTrayMenu) Name() string {
	return "DeviceLoginScreenShowOptionsInSystemTrayMenu"
}
func (p *DeviceLoginScreenShowOptionsInSystemTrayMenu) Field() string         { return "" }
func (p *DeviceLoginScreenShowOptionsInSystemTrayMenu) Scope() Scope          { return ScopeUser }
func (p *DeviceLoginScreenShowOptionsInSystemTrayMenu) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenShowOptionsInSystemTrayMenu) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenShowOptionsInSystemTrayMenu) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenShowOptionsInSystemTrayMenu) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 647. PrinterTypeDenyList
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrinterTypeDenyList struct {
	Stat Status
	Val  []string
}

func (p *PrinterTypeDenyList) Name() string          { return "PrinterTypeDenyList" }
func (p *PrinterTypeDenyList) Field() string         { return "" }
func (p *PrinterTypeDenyList) Scope() Scope          { return ScopeUser }
func (p *PrinterTypeDenyList) Status() Status        { return p.Stat }
func (p *PrinterTypeDenyList) UntypedV() interface{} { return p.Val }
func (p *PrinterTypeDenyList) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *PrinterTypeDenyList) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 648. ForceLegacyDefaultReferrerPolicy
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ForceLegacyDefaultReferrerPolicy struct {
	Stat Status
	Val  bool
}

func (p *ForceLegacyDefaultReferrerPolicy) Name() string          { return "ForceLegacyDefaultReferrerPolicy" }
func (p *ForceLegacyDefaultReferrerPolicy) Field() string         { return "" }
func (p *ForceLegacyDefaultReferrerPolicy) Scope() Scope          { return ScopeUser }
func (p *ForceLegacyDefaultReferrerPolicy) Status() Status        { return p.Stat }
func (p *ForceLegacyDefaultReferrerPolicy) UntypedV() interface{} { return p.Val }
func (p *ForceLegacyDefaultReferrerPolicy) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ForceLegacyDefaultReferrerPolicy) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 649. SyncTypesListDisabled
///////////////////////////////////////////////////////////////////////////////
type SyncTypesListDisabled struct {
	Stat Status
	Val  []string
}

func (p *SyncTypesListDisabled) Name() string          { return "SyncTypesListDisabled" }
func (p *SyncTypesListDisabled) Field() string         { return "" }
func (p *SyncTypesListDisabled) Scope() Scope          { return ScopeUser }
func (p *SyncTypesListDisabled) Status() Status        { return p.Stat }
func (p *SyncTypesListDisabled) UntypedV() interface{} { return p.Val }
func (p *SyncTypesListDisabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *SyncTypesListDisabled) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 650. AmbientAuthenticationInPrivateModesEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AmbientAuthenticationInPrivateModesEnabled struct {
	Stat Status
	Val  int
}

func (p *AmbientAuthenticationInPrivateModesEnabled) Name() string {
	return "AmbientAuthenticationInPrivateModesEnabled"
}
func (p *AmbientAuthenticationInPrivateModesEnabled) Field() string         { return "" }
func (p *AmbientAuthenticationInPrivateModesEnabled) Scope() Scope          { return ScopeUser }
func (p *AmbientAuthenticationInPrivateModesEnabled) Status() Status        { return p.Stat }
func (p *AmbientAuthenticationInPrivateModesEnabled) UntypedV() interface{} { return p.Val }
func (p *AmbientAuthenticationInPrivateModesEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *AmbientAuthenticationInPrivateModesEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 651. PaymentMethodQueryEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PaymentMethodQueryEnabled struct {
	Stat Status
	Val  bool
}

func (p *PaymentMethodQueryEnabled) Name() string          { return "PaymentMethodQueryEnabled" }
func (p *PaymentMethodQueryEnabled) Field() string         { return "" }
func (p *PaymentMethodQueryEnabled) Scope() Scope          { return ScopeUser }
func (p *PaymentMethodQueryEnabled) Status() Status        { return p.Stat }
func (p *PaymentMethodQueryEnabled) UntypedV() interface{} { return p.Val }
func (p *PaymentMethodQueryEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PaymentMethodQueryEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 652. StricterMixedContentTreatmentEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type StricterMixedContentTreatmentEnabled struct {
	Stat Status
	Val  bool
}

func (p *StricterMixedContentTreatmentEnabled) Name() string {
	return "StricterMixedContentTreatmentEnabled"
}
func (p *StricterMixedContentTreatmentEnabled) Field() string         { return "" }
func (p *StricterMixedContentTreatmentEnabled) Scope() Scope          { return ScopeUser }
func (p *StricterMixedContentTreatmentEnabled) Status() Status        { return p.Stat }
func (p *StricterMixedContentTreatmentEnabled) UntypedV() interface{} { return p.Val }
func (p *StricterMixedContentTreatmentEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *StricterMixedContentTreatmentEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 653. NTPCustomBackgroundEnabled
// This policy has a default value of True.
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type NTPCustomBackgroundEnabled struct {
	Stat Status
	Val  bool
}

func (p *NTPCustomBackgroundEnabled) Name() string          { return "NTPCustomBackgroundEnabled" }
func (p *NTPCustomBackgroundEnabled) Field() string         { return "" }
func (p *NTPCustomBackgroundEnabled) Scope() Scope          { return ScopeUser }
func (p *NTPCustomBackgroundEnabled) Status() Status        { return p.Stat }
func (p *NTPCustomBackgroundEnabled) UntypedV() interface{} { return p.Val }
func (p *NTPCustomBackgroundEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *NTPCustomBackgroundEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 654. DNSInterceptionChecksEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DNSInterceptionChecksEnabled struct {
	Stat Status
	Val  bool
}

func (p *DNSInterceptionChecksEnabled) Name() string          { return "DNSInterceptionChecksEnabled" }
func (p *DNSInterceptionChecksEnabled) Field() string         { return "" }
func (p *DNSInterceptionChecksEnabled) Scope() Scope          { return ScopeUser }
func (p *DNSInterceptionChecksEnabled) Status() Status        { return p.Stat }
func (p *DNSInterceptionChecksEnabled) UntypedV() interface{} { return p.Val }
func (p *DNSInterceptionChecksEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DNSInterceptionChecksEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 655. PrimaryMouseButtonSwitch
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrimaryMouseButtonSwitch struct {
	Stat Status
	Val  bool
}

func (p *PrimaryMouseButtonSwitch) Name() string          { return "PrimaryMouseButtonSwitch" }
func (p *PrimaryMouseButtonSwitch) Field() string         { return "" }
func (p *PrimaryMouseButtonSwitch) Scope() Scope          { return ScopeUser }
func (p *PrimaryMouseButtonSwitch) Status() Status        { return p.Stat }
func (p *PrimaryMouseButtonSwitch) UntypedV() interface{} { return p.Val }
func (p *PrimaryMouseButtonSwitch) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PrimaryMouseButtonSwitch) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 656. ReportDeviceCpuInfo
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceCpuInfo struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceCpuInfo) Name() string          { return "ReportDeviceCpuInfo" }
func (p *ReportDeviceCpuInfo) Field() string         { return "device_reporting.report_cpu_info" }
func (p *ReportDeviceCpuInfo) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceCpuInfo) Status() Status        { return p.Stat }
func (p *ReportDeviceCpuInfo) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceCpuInfo) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceCpuInfo) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 657. DeviceLoginScreenPrimaryMouseButtonSwitch
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenPrimaryMouseButtonSwitch struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenPrimaryMouseButtonSwitch) Name() string {
	return "DeviceLoginScreenPrimaryMouseButtonSwitch"
}
func (p *DeviceLoginScreenPrimaryMouseButtonSwitch) Field() string         { return "" }
func (p *DeviceLoginScreenPrimaryMouseButtonSwitch) Scope() Scope          { return ScopeUser }
func (p *DeviceLoginScreenPrimaryMouseButtonSwitch) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenPrimaryMouseButtonSwitch) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenPrimaryMouseButtonSwitch) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenPrimaryMouseButtonSwitch) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 658. PerAppTimeLimitsWhitelist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PerAppTimeLimitsWhitelist struct {
	Stat Status
	Val  *PerAppTimeLimitsWhitelistValue
}

type PerAppTimeLimitsWhitelistValue struct {
	AppList []*PerAppTimeLimitsWhitelistValueAppList `json:"app_list"`
	UrlList []string                                 `json:"url_list"`
}

type PerAppTimeLimitsWhitelistValueAppList struct {
	AppId   string `json:"app_id"`
	AppType string `json:"app_type"`
}

func (p *PerAppTimeLimitsWhitelist) Name() string          { return "PerAppTimeLimitsWhitelist" }
func (p *PerAppTimeLimitsWhitelist) Field() string         { return "" }
func (p *PerAppTimeLimitsWhitelist) Scope() Scope          { return ScopeUser }
func (p *PerAppTimeLimitsWhitelist) Status() Status        { return p.Stat }
func (p *PerAppTimeLimitsWhitelist) UntypedV() interface{} { return p.Val }
func (p *PerAppTimeLimitsWhitelist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *PerAppTimeLimitsWhitelistValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *PerAppTimeLimitsWhitelistValue", m)
	}
	return v, nil
}
func (p *PerAppTimeLimitsWhitelist) Equal(iface interface{}) bool {
	v, ok := iface.(*PerAppTimeLimitsWhitelistValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 659. AccessibilityShortcutsEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AccessibilityShortcutsEnabled struct {
	Stat Status
	Val  bool
}

func (p *AccessibilityShortcutsEnabled) Name() string          { return "AccessibilityShortcutsEnabled" }
func (p *AccessibilityShortcutsEnabled) Field() string         { return "" }
func (p *AccessibilityShortcutsEnabled) Scope() Scope          { return ScopeUser }
func (p *AccessibilityShortcutsEnabled) Status() Status        { return p.Stat }
func (p *AccessibilityShortcutsEnabled) UntypedV() interface{} { return p.Val }
func (p *AccessibilityShortcutsEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AccessibilityShortcutsEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 660. ReportDeviceGraphicsStatus
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceGraphicsStatus struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceGraphicsStatus) Name() string          { return "ReportDeviceGraphicsStatus" }
func (p *ReportDeviceGraphicsStatus) Field() string         { return "device_reporting.report_graphics_status" }
func (p *ReportDeviceGraphicsStatus) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceGraphicsStatus) Status() Status        { return p.Stat }
func (p *ReportDeviceGraphicsStatus) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceGraphicsStatus) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceGraphicsStatus) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 661. DeviceLoginScreenAccessibilityShortcutsEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenAccessibilityShortcutsEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenAccessibilityShortcutsEnabled) Name() string {
	return "DeviceLoginScreenAccessibilityShortcutsEnabled"
}
func (p *DeviceLoginScreenAccessibilityShortcutsEnabled) Field() string         { return "" }
func (p *DeviceLoginScreenAccessibilityShortcutsEnabled) Scope() Scope          { return ScopeUser }
func (p *DeviceLoginScreenAccessibilityShortcutsEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenAccessibilityShortcutsEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenAccessibilityShortcutsEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenAccessibilityShortcutsEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 662. LocalDiscoveryEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type LocalDiscoveryEnabled struct {
	Stat Status
	Val  bool
}

func (p *LocalDiscoveryEnabled) Name() string          { return "LocalDiscoveryEnabled" }
func (p *LocalDiscoveryEnabled) Field() string         { return "" }
func (p *LocalDiscoveryEnabled) Scope() Scope          { return ScopeUser }
func (p *LocalDiscoveryEnabled) Status() Status        { return p.Stat }
func (p *LocalDiscoveryEnabled) UntypedV() interface{} { return p.Val }
func (p *LocalDiscoveryEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *LocalDiscoveryEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 664. PrintingAPIExtensionsWhitelist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintingAPIExtensionsWhitelist struct {
	Stat Status
	Val  []string
}

func (p *PrintingAPIExtensionsWhitelist) Name() string          { return "PrintingAPIExtensionsWhitelist" }
func (p *PrintingAPIExtensionsWhitelist) Field() string         { return "" }
func (p *PrintingAPIExtensionsWhitelist) Scope() Scope          { return ScopeUser }
func (p *PrintingAPIExtensionsWhitelist) Status() Status        { return p.Stat }
func (p *PrintingAPIExtensionsWhitelist) UntypedV() interface{} { return p.Val }
func (p *PrintingAPIExtensionsWhitelist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *PrintingAPIExtensionsWhitelist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 665. ReportDeviceCrashReportInfo
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceCrashReportInfo struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceCrashReportInfo) Name() string { return "ReportDeviceCrashReportInfo" }
func (p *ReportDeviceCrashReportInfo) Field() string {
	return "device_reporting.report_crash_report_info"
}
func (p *ReportDeviceCrashReportInfo) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceCrashReportInfo) Status() Status        { return p.Stat }
func (p *ReportDeviceCrashReportInfo) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceCrashReportInfo) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceCrashReportInfo) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 666. ScreenCaptureAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ScreenCaptureAllowed struct {
	Stat Status
	Val  bool
}

func (p *ScreenCaptureAllowed) Name() string          { return "ScreenCaptureAllowed" }
func (p *ScreenCaptureAllowed) Field() string         { return "" }
func (p *ScreenCaptureAllowed) Scope() Scope          { return ScopeUser }
func (p *ScreenCaptureAllowed) Status() Status        { return p.Stat }
func (p *ScreenCaptureAllowed) UntypedV() interface{} { return p.Val }
func (p *ScreenCaptureAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ScreenCaptureAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 668. BlockUnsupportedFiletypes
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type BlockUnsupportedFiletypes struct {
	Stat Status
	Val  int
}

func (p *BlockUnsupportedFiletypes) Name() string          { return "BlockUnsupportedFiletypes" }
func (p *BlockUnsupportedFiletypes) Field() string         { return "" }
func (p *BlockUnsupportedFiletypes) Scope() Scope          { return ScopeUser }
func (p *BlockUnsupportedFiletypes) Status() Status        { return p.Stat }
func (p *BlockUnsupportedFiletypes) UntypedV() interface{} { return p.Val }
func (p *BlockUnsupportedFiletypes) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *BlockUnsupportedFiletypes) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 669. URLsToNotCheckForMalwareOfDownloadedContent
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type URLsToNotCheckForMalwareOfDownloadedContent struct {
	Stat Status
	Val  []string
}

func (p *URLsToNotCheckForMalwareOfDownloadedContent) Name() string {
	return "URLsToNotCheckForMalwareOfDownloadedContent"
}
func (p *URLsToNotCheckForMalwareOfDownloadedContent) Field() string         { return "" }
func (p *URLsToNotCheckForMalwareOfDownloadedContent) Scope() Scope          { return ScopeUser }
func (p *URLsToNotCheckForMalwareOfDownloadedContent) Status() Status        { return p.Stat }
func (p *URLsToNotCheckForMalwareOfDownloadedContent) UntypedV() interface{} { return p.Val }
func (p *URLsToNotCheckForMalwareOfDownloadedContent) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *URLsToNotCheckForMalwareOfDownloadedContent) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 670. MinimumChromeVersionEnforced
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type MinimumChromeVersionEnforced struct {
	Stat Status
	Val  []*MinimumChromeVersionEnforcedValue
}

type MinimumChromeVersionEnforcedValue struct {
	ChromeVersion    string `json:"chrome_version"`
	EolWarningPeriod int    `json:"eol_warning_period"`
	WarningPeriod    int    `json:"warning_period"`
}

func (p *MinimumChromeVersionEnforced) Name() string          { return "MinimumChromeVersionEnforced" }
func (p *MinimumChromeVersionEnforced) Field() string         { return "minimum_chrome_version_enforced.value" }
func (p *MinimumChromeVersionEnforced) Scope() Scope          { return ScopeDevice }
func (p *MinimumChromeVersionEnforced) Status() Status        { return p.Stat }
func (p *MinimumChromeVersionEnforced) UntypedV() interface{} { return p.Val }
func (p *MinimumChromeVersionEnforced) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*MinimumChromeVersionEnforcedValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*MinimumChromeVersionEnforcedValue", m)
	}
	return v, nil
}
func (p *MinimumChromeVersionEnforced) Equal(iface interface{}) bool {
	v, ok := iface.([]*MinimumChromeVersionEnforcedValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 671. ReportDeviceTimezoneInfo
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceTimezoneInfo struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceTimezoneInfo) Name() string          { return "ReportDeviceTimezoneInfo" }
func (p *ReportDeviceTimezoneInfo) Field() string         { return "device_reporting.report_timezone_info" }
func (p *ReportDeviceTimezoneInfo) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceTimezoneInfo) Status() Status        { return p.Stat }
func (p *ReportDeviceTimezoneInfo) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceTimezoneInfo) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceTimezoneInfo) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 672. SystemProxySettings
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SystemProxySettings struct {
	Stat Status
	Val  *SystemProxySettingsValue
}

type SystemProxySettingsValue struct {
	SystemProxyEnabled     bool   `json:"system_proxy_enabled"`
	SystemServicesPassword string `json:"system_services_password"`
	SystemServicesUsername string `json:"system_services_username"`
}

func (p *SystemProxySettings) Name() string          { return "SystemProxySettings" }
func (p *SystemProxySettings) Field() string         { return "system_proxy_settings.system_proxy_settings" }
func (p *SystemProxySettings) Scope() Scope          { return ScopeDevice }
func (p *SystemProxySettings) Status() Status        { return p.Stat }
func (p *SystemProxySettings) UntypedV() interface{} { return p.Val }
func (p *SystemProxySettings) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *SystemProxySettingsValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *SystemProxySettingsValue", m)
	}
	return v, nil
}
func (p *SystemProxySettings) Equal(iface interface{}) bool {
	v, ok := iface.(*SystemProxySettingsValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 674. DeviceChromeVariations
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceChromeVariations struct {
	Stat Status
	Val  int
}

func (p *DeviceChromeVariations) Name() string          { return "DeviceChromeVariations" }
func (p *DeviceChromeVariations) Field() string         { return "device_chrome_variations_type.value" }
func (p *DeviceChromeVariations) Scope() Scope          { return ScopeDevice }
func (p *DeviceChromeVariations) Status() Status        { return p.Stat }
func (p *DeviceChromeVariations) UntypedV() interface{} { return p.Val }
func (p *DeviceChromeVariations) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceChromeVariations) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 676. DeviceLoginScreenPrivacyScreenEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenPrivacyScreenEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenPrivacyScreenEnabled) Name() string {
	return "DeviceLoginScreenPrivacyScreenEnabled"
}
func (p *DeviceLoginScreenPrivacyScreenEnabled) Field() string {
	return "device_login_screen_privacy_screen_enabled.enabled"
}
func (p *DeviceLoginScreenPrivacyScreenEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenPrivacyScreenEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenPrivacyScreenEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenPrivacyScreenEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenPrivacyScreenEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 677. PrivacyScreenEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrivacyScreenEnabled struct {
	Stat Status
	Val  bool
}

func (p *PrivacyScreenEnabled) Name() string          { return "PrivacyScreenEnabled" }
func (p *PrivacyScreenEnabled) Field() string         { return "" }
func (p *PrivacyScreenEnabled) Scope() Scope          { return ScopeUser }
func (p *PrivacyScreenEnabled) Status() Status        { return p.Stat }
func (p *PrivacyScreenEnabled) UntypedV() interface{} { return p.Val }
func (p *PrivacyScreenEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PrivacyScreenEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 679. ForceLogoutUnauthenticatedUserEnabled
///////////////////////////////////////////////////////////////////////////////
type ForceLogoutUnauthenticatedUserEnabled struct {
	Stat Status
	Val  bool
}

func (p *ForceLogoutUnauthenticatedUserEnabled) Name() string {
	return "ForceLogoutUnauthenticatedUserEnabled"
}
func (p *ForceLogoutUnauthenticatedUserEnabled) Field() string         { return "" }
func (p *ForceLogoutUnauthenticatedUserEnabled) Scope() Scope          { return ScopeUser }
func (p *ForceLogoutUnauthenticatedUserEnabled) Status() Status        { return p.Stat }
func (p *ForceLogoutUnauthenticatedUserEnabled) UntypedV() interface{} { return p.Val }
func (p *ForceLogoutUnauthenticatedUserEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ForceLogoutUnauthenticatedUserEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 680. RequiredClientCertificateForUser
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RequiredClientCertificateForUser struct {
	Stat Status
	Val  []*RequiredClientCertificateForUserValue
}

type RequiredClientCertificateForUserValue struct {
	CertProfileId        string `json:"cert_profile_id"`
	KeyAlgorithm         string `json:"key_algorithm"`
	Name                 string `json:"name"`
	PolicyVersion        string `json:"policy_version"`
	RenewalPeriodSeconds int    `json:"renewal_period_seconds"`
}

func (p *RequiredClientCertificateForUser) Name() string          { return "RequiredClientCertificateForUser" }
func (p *RequiredClientCertificateForUser) Field() string         { return "" }
func (p *RequiredClientCertificateForUser) Scope() Scope          { return ScopeUser }
func (p *RequiredClientCertificateForUser) Status() Status        { return p.Stat }
func (p *RequiredClientCertificateForUser) UntypedV() interface{} { return p.Val }
func (p *RequiredClientCertificateForUser) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*RequiredClientCertificateForUserValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*RequiredClientCertificateForUserValue", m)
	}
	return v, nil
}
func (p *RequiredClientCertificateForUser) Equal(iface interface{}) bool {
	v, ok := iface.([]*RequiredClientCertificateForUserValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 681. RequiredClientCertificateForDevice
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RequiredClientCertificateForDevice struct {
	Stat Status
	Val  []*RequiredClientCertificateForDeviceValue
}

type RequiredClientCertificateForDeviceValue struct {
	CertProfileId        string `json:"cert_profile_id"`
	KeyAlgorithm         string `json:"key_algorithm"`
	Name                 string `json:"name"`
	PolicyVersion        string `json:"policy_version"`
	RenewalPeriodSeconds int    `json:"renewal_period_seconds"`
}

func (p *RequiredClientCertificateForDevice) Name() string {
	return "RequiredClientCertificateForDevice"
}
func (p *RequiredClientCertificateForDevice) Field() string {
	return "required_client_certificate_for_device.required_client_certificate_for_device"
}
func (p *RequiredClientCertificateForDevice) Scope() Scope          { return ScopeDevice }
func (p *RequiredClientCertificateForDevice) Status() Status        { return p.Stat }
func (p *RequiredClientCertificateForDevice) UntypedV() interface{} { return p.Val }
func (p *RequiredClientCertificateForDevice) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*RequiredClientCertificateForDeviceValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*RequiredClientCertificateForDeviceValue", m)
	}
	return v, nil
}
func (p *RequiredClientCertificateForDevice) Equal(iface interface{}) bool {
	v, ok := iface.([]*RequiredClientCertificateForDeviceValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 682. ReportDeviceMemoryInfo
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceMemoryInfo struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceMemoryInfo) Name() string          { return "ReportDeviceMemoryInfo" }
func (p *ReportDeviceMemoryInfo) Field() string         { return "device_reporting.report_memory_info" }
func (p *ReportDeviceMemoryInfo) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceMemoryInfo) Status() Status        { return p.Stat }
func (p *ReportDeviceMemoryInfo) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceMemoryInfo) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceMemoryInfo) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 684. SafeBrowsingProtectionLevel
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SafeBrowsingProtectionLevel struct {
	Stat Status
	Val  int
}

func (p *SafeBrowsingProtectionLevel) Name() string          { return "SafeBrowsingProtectionLevel" }
func (p *SafeBrowsingProtectionLevel) Field() string         { return "" }
func (p *SafeBrowsingProtectionLevel) Scope() Scope          { return ScopeUser }
func (p *SafeBrowsingProtectionLevel) Status() Status        { return p.Stat }
func (p *SafeBrowsingProtectionLevel) UntypedV() interface{} { return p.Val }
func (p *SafeBrowsingProtectionLevel) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *SafeBrowsingProtectionLevel) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 685. AdvancedProtectionAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AdvancedProtectionAllowed struct {
	Stat Status
	Val  bool
}

func (p *AdvancedProtectionAllowed) Name() string          { return "AdvancedProtectionAllowed" }
func (p *AdvancedProtectionAllowed) Field() string         { return "" }
func (p *AdvancedProtectionAllowed) Scope() Scope          { return ScopeUser }
func (p *AdvancedProtectionAllowed) Status() Status        { return p.Stat }
func (p *AdvancedProtectionAllowed) UntypedV() interface{} { return p.Val }
func (p *AdvancedProtectionAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AdvancedProtectionAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 686. ReportDeviceBacklightInfo
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceBacklightInfo struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceBacklightInfo) Name() string          { return "ReportDeviceBacklightInfo" }
func (p *ReportDeviceBacklightInfo) Field() string         { return "device_reporting.report_backlight_info" }
func (p *ReportDeviceBacklightInfo) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceBacklightInfo) Status() Status        { return p.Stat }
func (p *ReportDeviceBacklightInfo) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceBacklightInfo) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceBacklightInfo) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 687. ScrollToTextFragmentEnabled
///////////////////////////////////////////////////////////////////////////////
type ScrollToTextFragmentEnabled struct {
	Stat Status
	Val  bool
}

func (p *ScrollToTextFragmentEnabled) Name() string          { return "ScrollToTextFragmentEnabled" }
func (p *ScrollToTextFragmentEnabled) Field() string         { return "" }
func (p *ScrollToTextFragmentEnabled) Scope() Scope          { return ScopeUser }
func (p *ScrollToTextFragmentEnabled) Status() Status        { return p.Stat }
func (p *ScrollToTextFragmentEnabled) UntypedV() interface{} { return p.Val }
func (p *ScrollToTextFragmentEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ScrollToTextFragmentEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 688. ManagedGuestSessionAutoLaunchNotificationReduced
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ManagedGuestSessionAutoLaunchNotificationReduced struct {
	Stat Status
	Val  bool
}

func (p *ManagedGuestSessionAutoLaunchNotificationReduced) Name() string {
	return "ManagedGuestSessionAutoLaunchNotificationReduced"
}
func (p *ManagedGuestSessionAutoLaunchNotificationReduced) Field() string         { return "" }
func (p *ManagedGuestSessionAutoLaunchNotificationReduced) Scope() Scope          { return ScopeUser }
func (p *ManagedGuestSessionAutoLaunchNotificationReduced) Status() Status        { return p.Stat }
func (p *ManagedGuestSessionAutoLaunchNotificationReduced) UntypedV() interface{} { return p.Val }
func (p *ManagedGuestSessionAutoLaunchNotificationReduced) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ManagedGuestSessionAutoLaunchNotificationReduced) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 689. SystemFeaturesDisableList
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SystemFeaturesDisableList struct {
	Stat Status
	Val  []string
}

func (p *SystemFeaturesDisableList) Name() string          { return "SystemFeaturesDisableList" }
func (p *SystemFeaturesDisableList) Field() string         { return "" }
func (p *SystemFeaturesDisableList) Scope() Scope          { return ScopeUser }
func (p *SystemFeaturesDisableList) Status() Status        { return p.Stat }
func (p *SystemFeaturesDisableList) UntypedV() interface{} { return p.Val }
func (p *SystemFeaturesDisableList) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *SystemFeaturesDisableList) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 690. CrostiniArcAdbSideloadingAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CrostiniArcAdbSideloadingAllowed struct {
	Stat Status
	Val  int
}

func (p *CrostiniArcAdbSideloadingAllowed) Name() string          { return "CrostiniArcAdbSideloadingAllowed" }
func (p *CrostiniArcAdbSideloadingAllowed) Field() string         { return "" }
func (p *CrostiniArcAdbSideloadingAllowed) Scope() Scope          { return ScopeUser }
func (p *CrostiniArcAdbSideloadingAllowed) Status() Status        { return p.Stat }
func (p *CrostiniArcAdbSideloadingAllowed) UntypedV() interface{} { return p.Val }
func (p *CrostiniArcAdbSideloadingAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *CrostiniArcAdbSideloadingAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 691. FloatingAccessibilityMenuEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type FloatingAccessibilityMenuEnabled struct {
	Stat Status
	Val  bool
}

func (p *FloatingAccessibilityMenuEnabled) Name() string          { return "FloatingAccessibilityMenuEnabled" }
func (p *FloatingAccessibilityMenuEnabled) Field() string         { return "" }
func (p *FloatingAccessibilityMenuEnabled) Scope() Scope          { return ScopeUser }
func (p *FloatingAccessibilityMenuEnabled) Status() Status        { return p.Stat }
func (p *FloatingAccessibilityMenuEnabled) UntypedV() interface{} { return p.Val }
func (p *FloatingAccessibilityMenuEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *FloatingAccessibilityMenuEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 692. PrintingMaxSheetsAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintingMaxSheetsAllowed struct {
	Stat Status
	Val  int
}

func (p *PrintingMaxSheetsAllowed) Name() string          { return "PrintingMaxSheetsAllowed" }
func (p *PrintingMaxSheetsAllowed) Field() string         { return "" }
func (p *PrintingMaxSheetsAllowed) Scope() Scope          { return ScopeUser }
func (p *PrintingMaxSheetsAllowed) Status() Status        { return p.Stat }
func (p *PrintingMaxSheetsAllowed) UntypedV() interface{} { return p.Val }
func (p *PrintingMaxSheetsAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *PrintingMaxSheetsAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 693. OnFileAttachedEnterpriseConnector
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type OnFileAttachedEnterpriseConnector struct {
	Stat Status
	Val  []*OnFileAttachedEnterpriseConnectorValue
}

type OnFileAttachedEnterpriseConnectorValue struct {
	BlockLargeFiles        bool                                             `json:"block_large_files"`
	BlockPasswordProtected bool                                             `json:"block_password_protected"`
	BlockUntilVerdict      int                                              `json:"block_until_verdict"`
	Disable                []*OnFileAttachedEnterpriseConnectorValueDisable `json:"disable"`
	Enable                 []*OnFileAttachedEnterpriseConnectorValueEnable  `json:"enable"`
	ServiceProvider        string                                           `json:"service_provider"`
}

type OnFileAttachedEnterpriseConnectorValueEnable struct {
	Tags    []string `json:"tags"`
	UrlList []string `json:"url_list"`
}

type OnFileAttachedEnterpriseConnectorValueDisable struct {
	Tags    []string `json:"tags"`
	UrlList []string `json:"url_list"`
}

func (p *OnFileAttachedEnterpriseConnector) Name() string          { return "OnFileAttachedEnterpriseConnector" }
func (p *OnFileAttachedEnterpriseConnector) Field() string         { return "" }
func (p *OnFileAttachedEnterpriseConnector) Scope() Scope          { return ScopeUser }
func (p *OnFileAttachedEnterpriseConnector) Status() Status        { return p.Stat }
func (p *OnFileAttachedEnterpriseConnector) UntypedV() interface{} { return p.Val }
func (p *OnFileAttachedEnterpriseConnector) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*OnFileAttachedEnterpriseConnectorValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*OnFileAttachedEnterpriseConnectorValue", m)
	}
	return v, nil
}
func (p *OnFileAttachedEnterpriseConnector) Equal(iface interface{}) bool {
	v, ok := iface.([]*OnFileAttachedEnterpriseConnectorValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 694. VoiceInteractionQuickAnswersEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type VoiceInteractionQuickAnswersEnabled struct {
	Stat Status
	Val  bool
}

func (p *VoiceInteractionQuickAnswersEnabled) Name() string {
	return "VoiceInteractionQuickAnswersEnabled"
}
func (p *VoiceInteractionQuickAnswersEnabled) Field() string         { return "" }
func (p *VoiceInteractionQuickAnswersEnabled) Scope() Scope          { return ScopeUser }
func (p *VoiceInteractionQuickAnswersEnabled) Status() Status        { return p.Stat }
func (p *VoiceInteractionQuickAnswersEnabled) UntypedV() interface{} { return p.Val }
func (p *VoiceInteractionQuickAnswersEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *VoiceInteractionQuickAnswersEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 695. DeviceCrostiniArcAdbSideloadingAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceCrostiniArcAdbSideloadingAllowed struct {
	Stat Status
	Val  int
}

func (p *DeviceCrostiniArcAdbSideloadingAllowed) Name() string {
	return "DeviceCrostiniArcAdbSideloadingAllowed"
}
func (p *DeviceCrostiniArcAdbSideloadingAllowed) Field() string {
	return "device_crostini_arc_adb_sideloading_allowed.mode"
}
func (p *DeviceCrostiniArcAdbSideloadingAllowed) Scope() Scope          { return ScopeDevice }
func (p *DeviceCrostiniArcAdbSideloadingAllowed) Status() Status        { return p.Stat }
func (p *DeviceCrostiniArcAdbSideloadingAllowed) UntypedV() interface{} { return p.Val }
func (p *DeviceCrostiniArcAdbSideloadingAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceCrostiniArcAdbSideloadingAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 696. OnFileDownloadedEnterpriseConnector
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type OnFileDownloadedEnterpriseConnector struct {
	Stat Status
	Val  []*OnFileDownloadedEnterpriseConnectorValue
}

type OnFileDownloadedEnterpriseConnectorValue struct {
	BlockLargeFiles        bool                                               `json:"block_large_files"`
	BlockPasswordProtected bool                                               `json:"block_password_protected"`
	BlockUntilVerdict      int                                                `json:"block_until_verdict"`
	Disable                []*OnFileDownloadedEnterpriseConnectorValueDisable `json:"disable"`
	Enable                 []*OnFileDownloadedEnterpriseConnectorValueEnable  `json:"enable"`
	ServiceProvider        string                                             `json:"service_provider"`
}

type OnFileDownloadedEnterpriseConnectorValueEnable struct {
	Tags    []string `json:"tags"`
	UrlList []string `json:"url_list"`
}

type OnFileDownloadedEnterpriseConnectorValueDisable struct {
	Tags    []string `json:"tags"`
	UrlList []string `json:"url_list"`
}

func (p *OnFileDownloadedEnterpriseConnector) Name() string {
	return "OnFileDownloadedEnterpriseConnector"
}
func (p *OnFileDownloadedEnterpriseConnector) Field() string         { return "" }
func (p *OnFileDownloadedEnterpriseConnector) Scope() Scope          { return ScopeUser }
func (p *OnFileDownloadedEnterpriseConnector) Status() Status        { return p.Stat }
func (p *OnFileDownloadedEnterpriseConnector) UntypedV() interface{} { return p.Val }
func (p *OnFileDownloadedEnterpriseConnector) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*OnFileDownloadedEnterpriseConnectorValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*OnFileDownloadedEnterpriseConnectorValue", m)
	}
	return v, nil
}
func (p *OnFileDownloadedEnterpriseConnector) Equal(iface interface{}) bool {
	v, ok := iface.([]*OnFileDownloadedEnterpriseConnectorValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 697. OnBulkDataEntryEnterpriseConnector
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type OnBulkDataEntryEnterpriseConnector struct {
	Stat Status
	Val  []*OnBulkDataEntryEnterpriseConnectorValue
}

type OnBulkDataEntryEnterpriseConnectorValue struct {
	BlockUntilVerdict int                                               `json:"block_until_verdict"`
	Disable           []*OnBulkDataEntryEnterpriseConnectorValueDisable `json:"disable"`
	Enable            []*OnBulkDataEntryEnterpriseConnectorValueEnable  `json:"enable"`
	ServiceProvider   string                                            `json:"service_provider"`
}

type OnBulkDataEntryEnterpriseConnectorValueEnable struct {
	Tags    []string `json:"tags"`
	UrlList []string `json:"url_list"`
}

type OnBulkDataEntryEnterpriseConnectorValueDisable struct {
	Tags    []string `json:"tags"`
	UrlList []string `json:"url_list"`
}

func (p *OnBulkDataEntryEnterpriseConnector) Name() string {
	return "OnBulkDataEntryEnterpriseConnector"
}
func (p *OnBulkDataEntryEnterpriseConnector) Field() string         { return "" }
func (p *OnBulkDataEntryEnterpriseConnector) Scope() Scope          { return ScopeUser }
func (p *OnBulkDataEntryEnterpriseConnector) Status() Status        { return p.Stat }
func (p *OnBulkDataEntryEnterpriseConnector) UntypedV() interface{} { return p.Val }
func (p *OnBulkDataEntryEnterpriseConnector) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*OnBulkDataEntryEnterpriseConnectorValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*OnBulkDataEntryEnterpriseConnectorValue", m)
	}
	return v, nil
}
func (p *OnBulkDataEntryEnterpriseConnector) Equal(iface interface{}) bool {
	v, ok := iface.([]*OnBulkDataEntryEnterpriseConnectorValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 698. PluginVmUserId
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PluginVmUserId struct {
	Stat Status
	Val  string
}

func (p *PluginVmUserId) Name() string          { return "PluginVmUserId" }
func (p *PluginVmUserId) Field() string         { return "" }
func (p *PluginVmUserId) Scope() Scope          { return ScopeUser }
func (p *PluginVmUserId) Status() Status        { return p.Stat }
func (p *PluginVmUserId) UntypedV() interface{} { return p.Val }
func (p *PluginVmUserId) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *PluginVmUserId) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 699. OnSecurityEventEnterpriseConnector
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type OnSecurityEventEnterpriseConnector struct {
	Stat Status
	Val  []*OnSecurityEventEnterpriseConnectorValue
}

type OnSecurityEventEnterpriseConnectorValue struct {
	ServiceProvider string `json:"service_provider"`
}

func (p *OnSecurityEventEnterpriseConnector) Name() string {
	return "OnSecurityEventEnterpriseConnector"
}
func (p *OnSecurityEventEnterpriseConnector) Field() string         { return "" }
func (p *OnSecurityEventEnterpriseConnector) Scope() Scope          { return ScopeUser }
func (p *OnSecurityEventEnterpriseConnector) Status() Status        { return p.Stat }
func (p *OnSecurityEventEnterpriseConnector) UntypedV() interface{} { return p.Val }
func (p *OnSecurityEventEnterpriseConnector) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*OnSecurityEventEnterpriseConnectorValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*OnSecurityEventEnterpriseConnectorValue", m)
	}
	return v, nil
}
func (p *OnSecurityEventEnterpriseConnector) Equal(iface interface{}) bool {
	v, ok := iface.([]*OnSecurityEventEnterpriseConnectorValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 700. AutoOpenFileTypes
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AutoOpenFileTypes struct {
	Stat Status
	Val  []string
}

func (p *AutoOpenFileTypes) Name() string          { return "AutoOpenFileTypes" }
func (p *AutoOpenFileTypes) Field() string         { return "" }
func (p *AutoOpenFileTypes) Scope() Scope          { return ScopeUser }
func (p *AutoOpenFileTypes) Status() Status        { return p.Stat }
func (p *AutoOpenFileTypes) UntypedV() interface{} { return p.Val }
func (p *AutoOpenFileTypes) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *AutoOpenFileTypes) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 701. LoginDisplayPasswordButtonEnabled
// This policy has a default value of False.
///////////////////////////////////////////////////////////////////////////////
type LoginDisplayPasswordButtonEnabled struct {
	Stat Status
	Val  bool
}

func (p *LoginDisplayPasswordButtonEnabled) Name() string          { return "LoginDisplayPasswordButtonEnabled" }
func (p *LoginDisplayPasswordButtonEnabled) Field() string         { return "" }
func (p *LoginDisplayPasswordButtonEnabled) Scope() Scope          { return ScopeUser }
func (p *LoginDisplayPasswordButtonEnabled) Status() Status        { return p.Stat }
func (p *LoginDisplayPasswordButtonEnabled) UntypedV() interface{} { return p.Val }
func (p *LoginDisplayPasswordButtonEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *LoginDisplayPasswordButtonEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 702. ReportDeviceAppInfo
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceAppInfo struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceAppInfo) Name() string          { return "ReportDeviceAppInfo" }
func (p *ReportDeviceAppInfo) Field() string         { return "device_reporting.report_app_info" }
func (p *ReportDeviceAppInfo) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceAppInfo) Status() Status        { return p.Stat }
func (p *ReportDeviceAppInfo) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceAppInfo) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceAppInfo) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 703. AccessibilityImageLabelsEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AccessibilityImageLabelsEnabled struct {
	Stat Status
	Val  bool
}

func (p *AccessibilityImageLabelsEnabled) Name() string          { return "AccessibilityImageLabelsEnabled" }
func (p *AccessibilityImageLabelsEnabled) Field() string         { return "" }
func (p *AccessibilityImageLabelsEnabled) Scope() Scope          { return ScopeUser }
func (p *AccessibilityImageLabelsEnabled) Status() Status        { return p.Stat }
func (p *AccessibilityImageLabelsEnabled) UntypedV() interface{} { return p.Val }
func (p *AccessibilityImageLabelsEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AccessibilityImageLabelsEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 704. AppCacheForceEnabled
///////////////////////////////////////////////////////////////////////////////
type AppCacheForceEnabled struct {
	Stat Status
	Val  bool
}

func (p *AppCacheForceEnabled) Name() string          { return "AppCacheForceEnabled" }
func (p *AppCacheForceEnabled) Field() string         { return "" }
func (p *AppCacheForceEnabled) Scope() Scope          { return ScopeUser }
func (p *AppCacheForceEnabled) Status() Status        { return p.Stat }
func (p *AppCacheForceEnabled) UntypedV() interface{} { return p.Val }
func (p *AppCacheForceEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AppCacheForceEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 705. UserPluginVmAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type UserPluginVmAllowed struct {
	Stat Status
	Val  bool
}

func (p *UserPluginVmAllowed) Name() string          { return "UserPluginVmAllowed" }
func (p *UserPluginVmAllowed) Field() string         { return "" }
func (p *UserPluginVmAllowed) Scope() Scope          { return ScopeUser }
func (p *UserPluginVmAllowed) Status() Status        { return p.Stat }
func (p *UserPluginVmAllowed) UntypedV() interface{} { return p.Val }
func (p *UserPluginVmAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *UserPluginVmAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// 707. AutoOpenAllowedForURLs
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AutoOpenAllowedForURLs struct {
	Stat Status
	Val  []string
}

func (p *AutoOpenAllowedForURLs) Name() string          { return "AutoOpenAllowedForURLs" }
func (p *AutoOpenAllowedForURLs) Field() string         { return "" }
func (p *AutoOpenAllowedForURLs) Scope() Scope          { return ScopeUser }
func (p *AutoOpenAllowedForURLs) Status() Status        { return p.Stat }
func (p *AutoOpenAllowedForURLs) UntypedV() interface{} { return p.Val }
func (p *AutoOpenAllowedForURLs) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *AutoOpenAllowedForURLs) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v)
}

///////////////////////////////////////////////////////////////////////////////
// Reference values (used via '$ref' in JSON Schema).
///////////////////////////////////////////////////////////////////////////////

type RefTimeUsageLimitEntry struct {
	LastUpdatedMillis string `json:"last_updated_millis"`
	UsageQuotaMins    int    `json:"usage_quota_mins"`
}

type RefDisallowedTimeInterval struct {
	DayOfWeek string `json:"day_of_week"`
	Hours     int    `json:"hours"`
	Minutes   int    `json:"minutes"`
}

type RefConfig struct {
	AccessCodeTtl       int    `json:"access_code_ttl"`
	ClockDriftTolerance int    `json:"clock_drift_tolerance"`
	SharedSecret        string `json:"shared_secret"`
}

type RefUsbDeviceId struct {
	ProductId int `json:"product_id"`
	VendorId  int `json:"vendor_id"`
}

type RefPowerManagementDelays struct {
	Delays     *RefPowerManagementDelaysDelays `json:"Delays"`
	IdleAction string                          `json:"IdleAction"`
}

type RefPowerManagementDelaysDelays struct {
	Idle        int `json:"Idle"`
	IdleWarning int `json:"IdleWarning"`
	ScreenDim   int `json:"ScreenDim"`
	ScreenOff   int `json:"ScreenOff"`
}

type RefTime struct {
	Hour   int `json:"hour"`
	Minute int `json:"minute"`
}

type RefBookmarkType struct {
	Children     []*RefBookmarkType `json:"children"`
	Name         string             `json:"name"`
	ToplevelName string             `json:"toplevel_name"`
	Url          string             `json:"url"`
}

type RefWeeklyTimeIntervals struct {
	End   *RefWeeklyTime `json:"end"`
	Start *RefWeeklyTime `json:"start"`
}

type RefWeeklyTime struct {
	DayOfWeek string `json:"day_of_week"`
	Time      int    `json:"time"`
}

type RefDeviceLoginScreenPowerSettings struct {
	Delays     *RefDeviceLoginScreenPowerSettingsDelays `json:"Delays"`
	IdleAction string                                   `json:"IdleAction"`
}

type RefDeviceLoginScreenPowerSettingsDelays struct {
	Idle      int `json:"Idle"`
	ScreenDim int `json:"ScreenDim"`
	ScreenOff int `json:"ScreenOff"`
}

type RefDayPercentagePair struct {
	Days       int `json:"days"`
	Percentage int `json:"percentage"`
}
