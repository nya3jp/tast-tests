// Copyright 2019 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by policy_tast_struct_creator.py. DO NOT EDIT.
// Edit the generator in policy/gen/ instead.

package policy

import (
	"encoding/json"

	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"

	"chromiumos/tast/errors"
)

///////////////////////////////////////////////////////////////////////////////
// 1. HomepageLocation
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type HomepageLocation struct {
	Stat Status
	Val  string
}

func (p *HomepageLocation) Name() string          { return "HomepageLocation" }
func (p *HomepageLocation) Field() string         { return "" }
func (p *HomepageLocation) Scope() Scope          { return ScopeUser }
func (p *HomepageLocation) Status() Status        { return p.Stat }
func (p *HomepageLocation) UntypedV() interface{} { return p.Val }
func (p *HomepageLocation) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *HomepageLocation) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 2. HomepageIsNewTabPage
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type HomepageIsNewTabPage struct {
	Stat Status
	Val  bool
}

func (p *HomepageIsNewTabPage) Name() string          { return "HomepageIsNewTabPage" }
func (p *HomepageIsNewTabPage) Field() string         { return "" }
func (p *HomepageIsNewTabPage) Scope() Scope          { return ScopeUser }
func (p *HomepageIsNewTabPage) Status() Status        { return p.Stat }
func (p *HomepageIsNewTabPage) UntypedV() interface{} { return p.Val }
func (p *HomepageIsNewTabPage) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *HomepageIsNewTabPage) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 5. AlternateErrorPagesEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AlternateErrorPagesEnabled struct {
	Stat Status
	Val  bool
}

func (p *AlternateErrorPagesEnabled) Name() string          { return "AlternateErrorPagesEnabled" }
func (p *AlternateErrorPagesEnabled) Field() string         { return "" }
func (p *AlternateErrorPagesEnabled) Scope() Scope          { return ScopeUser }
func (p *AlternateErrorPagesEnabled) Status() Status        { return p.Stat }
func (p *AlternateErrorPagesEnabled) UntypedV() interface{} { return p.Val }
func (p *AlternateErrorPagesEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AlternateErrorPagesEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 6. SearchSuggestEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SearchSuggestEnabled struct {
	Stat Status
	Val  bool
}

func (p *SearchSuggestEnabled) Name() string          { return "SearchSuggestEnabled" }
func (p *SearchSuggestEnabled) Field() string         { return "" }
func (p *SearchSuggestEnabled) Scope() Scope          { return ScopeUser }
func (p *SearchSuggestEnabled) Status() Status        { return p.Stat }
func (p *SearchSuggestEnabled) UntypedV() interface{} { return p.Val }
func (p *SearchSuggestEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SearchSuggestEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 9. JavascriptEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type JavascriptEnabled struct {
	Stat Status
	Val  bool
}

func (p *JavascriptEnabled) Name() string          { return "JavascriptEnabled" }
func (p *JavascriptEnabled) Field() string         { return "" }
func (p *JavascriptEnabled) Scope() Scope          { return ScopeUser }
func (p *JavascriptEnabled) Status() Status        { return p.Stat }
func (p *JavascriptEnabled) UntypedV() interface{} { return p.Val }
func (p *JavascriptEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *JavascriptEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 10. IncognitoEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type IncognitoEnabled struct {
	Stat Status
	Val  bool
}

func (p *IncognitoEnabled) Name() string          { return "IncognitoEnabled" }
func (p *IncognitoEnabled) Field() string         { return "" }
func (p *IncognitoEnabled) Scope() Scope          { return ScopeUser }
func (p *IncognitoEnabled) Status() Status        { return p.Stat }
func (p *IncognitoEnabled) UntypedV() interface{} { return p.Val }
func (p *IncognitoEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *IncognitoEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 11. SavingBrowserHistoryDisabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SavingBrowserHistoryDisabled struct {
	Stat Status
	Val  bool
}

func (p *SavingBrowserHistoryDisabled) Name() string          { return "SavingBrowserHistoryDisabled" }
func (p *SavingBrowserHistoryDisabled) Field() string         { return "" }
func (p *SavingBrowserHistoryDisabled) Scope() Scope          { return ScopeUser }
func (p *SavingBrowserHistoryDisabled) Status() Status        { return p.Stat }
func (p *SavingBrowserHistoryDisabled) UntypedV() interface{} { return p.Val }
func (p *SavingBrowserHistoryDisabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SavingBrowserHistoryDisabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 12. PrintingEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintingEnabled struct {
	Stat Status
	Val  bool
}

func (p *PrintingEnabled) Name() string          { return "PrintingEnabled" }
func (p *PrintingEnabled) Field() string         { return "" }
func (p *PrintingEnabled) Scope() Scope          { return ScopeUser }
func (p *PrintingEnabled) Status() Status        { return p.Stat }
func (p *PrintingEnabled) UntypedV() interface{} { return p.Val }
func (p *PrintingEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PrintingEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 14. SafeBrowsingEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SafeBrowsingEnabled struct {
	Stat Status
	Val  bool
}

func (p *SafeBrowsingEnabled) Name() string          { return "SafeBrowsingEnabled" }
func (p *SafeBrowsingEnabled) Field() string         { return "" }
func (p *SafeBrowsingEnabled) Scope() Scope          { return ScopeUser }
func (p *SafeBrowsingEnabled) Status() Status        { return p.Stat }
func (p *SafeBrowsingEnabled) UntypedV() interface{} { return p.Val }
func (p *SafeBrowsingEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SafeBrowsingEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 16. PasswordManagerEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PasswordManagerEnabled struct {
	Stat Status
	Val  bool
}

func (p *PasswordManagerEnabled) Name() string          { return "PasswordManagerEnabled" }
func (p *PasswordManagerEnabled) Field() string         { return "" }
func (p *PasswordManagerEnabled) Scope() Scope          { return ScopeUser }
func (p *PasswordManagerEnabled) Status() Status        { return p.Stat }
func (p *PasswordManagerEnabled) UntypedV() interface{} { return p.Val }
func (p *PasswordManagerEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PasswordManagerEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 18. AutoFillEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AutoFillEnabled struct {
	Stat Status
	Val  bool
}

func (p *AutoFillEnabled) Name() string          { return "AutoFillEnabled" }
func (p *AutoFillEnabled) Field() string         { return "" }
func (p *AutoFillEnabled) Scope() Scope          { return ScopeUser }
func (p *AutoFillEnabled) Status() Status        { return p.Stat }
func (p *AutoFillEnabled) UntypedV() interface{} { return p.Val }
func (p *AutoFillEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AutoFillEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 20. SyncDisabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SyncDisabled struct {
	Stat Status
	Val  bool
}

func (p *SyncDisabled) Name() string          { return "SyncDisabled" }
func (p *SyncDisabled) Field() string         { return "" }
func (p *SyncDisabled) Scope() Scope          { return ScopeUser }
func (p *SyncDisabled) Status() Status        { return p.Stat }
func (p *SyncDisabled) UntypedV() interface{} { return p.Val }
func (p *SyncDisabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SyncDisabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 21. ProxyMode
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ProxyMode struct {
	Stat Status
	Val  string
}

func (p *ProxyMode) Name() string          { return "ProxyMode" }
func (p *ProxyMode) Field() string         { return "" }
func (p *ProxyMode) Scope() Scope          { return ScopeUser }
func (p *ProxyMode) Status() Status        { return p.Stat }
func (p *ProxyMode) UntypedV() interface{} { return p.Val }
func (p *ProxyMode) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *ProxyMode) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 22. ProxyServerMode
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ProxyServerMode struct {
	Stat Status
	Val  int
}

func (p *ProxyServerMode) Name() string          { return "ProxyServerMode" }
func (p *ProxyServerMode) Field() string         { return "" }
func (p *ProxyServerMode) Scope() Scope          { return ScopeUser }
func (p *ProxyServerMode) Status() Status        { return p.Stat }
func (p *ProxyServerMode) UntypedV() interface{} { return p.Val }
func (p *ProxyServerMode) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ProxyServerMode) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 23. ProxyServer
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ProxyServer struct {
	Stat Status
	Val  string
}

func (p *ProxyServer) Name() string          { return "ProxyServer" }
func (p *ProxyServer) Field() string         { return "" }
func (p *ProxyServer) Scope() Scope          { return ScopeUser }
func (p *ProxyServer) Status() Status        { return p.Stat }
func (p *ProxyServer) UntypedV() interface{} { return p.Val }
func (p *ProxyServer) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *ProxyServer) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 24. ProxyPacUrl
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ProxyPacUrl struct {
	Stat Status
	Val  string
}

func (p *ProxyPacUrl) Name() string          { return "ProxyPacUrl" }
func (p *ProxyPacUrl) Field() string         { return "" }
func (p *ProxyPacUrl) Scope() Scope          { return ScopeUser }
func (p *ProxyPacUrl) Status() Status        { return p.Stat }
func (p *ProxyPacUrl) UntypedV() interface{} { return p.Val }
func (p *ProxyPacUrl) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *ProxyPacUrl) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 25. ProxyBypassList
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ProxyBypassList struct {
	Stat Status
	Val  string
}

func (p *ProxyBypassList) Name() string          { return "ProxyBypassList" }
func (p *ProxyBypassList) Field() string         { return "" }
func (p *ProxyBypassList) Scope() Scope          { return ScopeUser }
func (p *ProxyBypassList) Status() Status        { return p.Stat }
func (p *ProxyBypassList) UntypedV() interface{} { return p.Val }
func (p *ProxyBypassList) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *ProxyBypassList) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 26. AuthSchemes
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AuthSchemes struct {
	Stat Status
	Val  string
}

func (p *AuthSchemes) Name() string          { return "AuthSchemes" }
func (p *AuthSchemes) Field() string         { return "" }
func (p *AuthSchemes) Scope() Scope          { return ScopeUser }
func (p *AuthSchemes) Status() Status        { return p.Stat }
func (p *AuthSchemes) UntypedV() interface{} { return p.Val }
func (p *AuthSchemes) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *AuthSchemes) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 27. DisableAuthNegotiateCnameLookup
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DisableAuthNegotiateCnameLookup struct {
	Stat Status
	Val  bool
}

func (p *DisableAuthNegotiateCnameLookup) Name() string          { return "DisableAuthNegotiateCnameLookup" }
func (p *DisableAuthNegotiateCnameLookup) Field() string         { return "" }
func (p *DisableAuthNegotiateCnameLookup) Scope() Scope          { return ScopeUser }
func (p *DisableAuthNegotiateCnameLookup) Status() Status        { return p.Stat }
func (p *DisableAuthNegotiateCnameLookup) UntypedV() interface{} { return p.Val }
func (p *DisableAuthNegotiateCnameLookup) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DisableAuthNegotiateCnameLookup) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 28. EnableAuthNegotiatePort
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type EnableAuthNegotiatePort struct {
	Stat Status
	Val  bool
}

func (p *EnableAuthNegotiatePort) Name() string          { return "EnableAuthNegotiatePort" }
func (p *EnableAuthNegotiatePort) Field() string         { return "" }
func (p *EnableAuthNegotiatePort) Scope() Scope          { return ScopeUser }
func (p *EnableAuthNegotiatePort) Status() Status        { return p.Stat }
func (p *EnableAuthNegotiatePort) UntypedV() interface{} { return p.Val }
func (p *EnableAuthNegotiatePort) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *EnableAuthNegotiatePort) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 34. ExtensionInstallForcelist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ExtensionInstallForcelist struct {
	Stat Status
	Val  []string
}

func (p *ExtensionInstallForcelist) Name() string          { return "ExtensionInstallForcelist" }
func (p *ExtensionInstallForcelist) Field() string         { return "" }
func (p *ExtensionInstallForcelist) Scope() Scope          { return ScopeUser }
func (p *ExtensionInstallForcelist) Status() Status        { return p.Stat }
func (p *ExtensionInstallForcelist) UntypedV() interface{} { return p.Val }
func (p *ExtensionInstallForcelist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *ExtensionInstallForcelist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 35. ShowHomeButton
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ShowHomeButton struct {
	Stat Status
	Val  bool
}

func (p *ShowHomeButton) Name() string          { return "ShowHomeButton" }
func (p *ShowHomeButton) Field() string         { return "" }
func (p *ShowHomeButton) Scope() Scope          { return ScopeUser }
func (p *ShowHomeButton) Status() Status        { return p.Stat }
func (p *ShowHomeButton) UntypedV() interface{} { return p.Val }
func (p *ShowHomeButton) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ShowHomeButton) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 36. DeveloperToolsDisabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeveloperToolsDisabled struct {
	Stat Status
	Val  bool
}

func (p *DeveloperToolsDisabled) Name() string          { return "DeveloperToolsDisabled" }
func (p *DeveloperToolsDisabled) Field() string         { return "" }
func (p *DeveloperToolsDisabled) Scope() Scope          { return ScopeUser }
func (p *DeveloperToolsDisabled) Status() Status        { return p.Stat }
func (p *DeveloperToolsDisabled) UntypedV() interface{} { return p.Val }
func (p *DeveloperToolsDisabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeveloperToolsDisabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 37. RestoreOnStartup
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RestoreOnStartup struct {
	Stat Status
	Val  int
}

func (p *RestoreOnStartup) Name() string          { return "RestoreOnStartup" }
func (p *RestoreOnStartup) Field() string         { return "" }
func (p *RestoreOnStartup) Scope() Scope          { return ScopeUser }
func (p *RestoreOnStartup) Status() Status        { return p.Stat }
func (p *RestoreOnStartup) UntypedV() interface{} { return p.Val }
func (p *RestoreOnStartup) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *RestoreOnStartup) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 38. RestoreOnStartupURLs
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RestoreOnStartupURLs struct {
	Stat Status
	Val  []string
}

func (p *RestoreOnStartupURLs) Name() string          { return "RestoreOnStartupURLs" }
func (p *RestoreOnStartupURLs) Field() string         { return "" }
func (p *RestoreOnStartupURLs) Scope() Scope          { return ScopeUser }
func (p *RestoreOnStartupURLs) Status() Status        { return p.Stat }
func (p *RestoreOnStartupURLs) UntypedV() interface{} { return p.Val }
func (p *RestoreOnStartupURLs) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *RestoreOnStartupURLs) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 39. BlockThirdPartyCookies
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type BlockThirdPartyCookies struct {
	Stat Status
	Val  bool
}

func (p *BlockThirdPartyCookies) Name() string          { return "BlockThirdPartyCookies" }
func (p *BlockThirdPartyCookies) Field() string         { return "" }
func (p *BlockThirdPartyCookies) Scope() Scope          { return ScopeUser }
func (p *BlockThirdPartyCookies) Status() Status        { return p.Stat }
func (p *BlockThirdPartyCookies) UntypedV() interface{} { return p.Val }
func (p *BlockThirdPartyCookies) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *BlockThirdPartyCookies) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 40. DefaultSearchProviderEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultSearchProviderEnabled struct {
	Stat Status
	Val  bool
}

func (p *DefaultSearchProviderEnabled) Name() string          { return "DefaultSearchProviderEnabled" }
func (p *DefaultSearchProviderEnabled) Field() string         { return "" }
func (p *DefaultSearchProviderEnabled) Scope() Scope          { return ScopeUser }
func (p *DefaultSearchProviderEnabled) Status() Status        { return p.Stat }
func (p *DefaultSearchProviderEnabled) UntypedV() interface{} { return p.Val }
func (p *DefaultSearchProviderEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DefaultSearchProviderEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 41. DefaultSearchProviderName
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultSearchProviderName struct {
	Stat Status
	Val  string
}

func (p *DefaultSearchProviderName) Name() string          { return "DefaultSearchProviderName" }
func (p *DefaultSearchProviderName) Field() string         { return "" }
func (p *DefaultSearchProviderName) Scope() Scope          { return ScopeUser }
func (p *DefaultSearchProviderName) Status() Status        { return p.Stat }
func (p *DefaultSearchProviderName) UntypedV() interface{} { return p.Val }
func (p *DefaultSearchProviderName) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DefaultSearchProviderName) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 42. DefaultSearchProviderKeyword
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultSearchProviderKeyword struct {
	Stat Status
	Val  string
}

func (p *DefaultSearchProviderKeyword) Name() string          { return "DefaultSearchProviderKeyword" }
func (p *DefaultSearchProviderKeyword) Field() string         { return "" }
func (p *DefaultSearchProviderKeyword) Scope() Scope          { return ScopeUser }
func (p *DefaultSearchProviderKeyword) Status() Status        { return p.Stat }
func (p *DefaultSearchProviderKeyword) UntypedV() interface{} { return p.Val }
func (p *DefaultSearchProviderKeyword) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DefaultSearchProviderKeyword) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 43. DefaultSearchProviderSearchURL
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultSearchProviderSearchURL struct {
	Stat Status
	Val  string
}

func (p *DefaultSearchProviderSearchURL) Name() string          { return "DefaultSearchProviderSearchURL" }
func (p *DefaultSearchProviderSearchURL) Field() string         { return "" }
func (p *DefaultSearchProviderSearchURL) Scope() Scope          { return ScopeUser }
func (p *DefaultSearchProviderSearchURL) Status() Status        { return p.Stat }
func (p *DefaultSearchProviderSearchURL) UntypedV() interface{} { return p.Val }
func (p *DefaultSearchProviderSearchURL) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DefaultSearchProviderSearchURL) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 44. DefaultSearchProviderSuggestURL
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultSearchProviderSuggestURL struct {
	Stat Status
	Val  string
}

func (p *DefaultSearchProviderSuggestURL) Name() string          { return "DefaultSearchProviderSuggestURL" }
func (p *DefaultSearchProviderSuggestURL) Field() string         { return "" }
func (p *DefaultSearchProviderSuggestURL) Scope() Scope          { return ScopeUser }
func (p *DefaultSearchProviderSuggestURL) Status() Status        { return p.Stat }
func (p *DefaultSearchProviderSuggestURL) UntypedV() interface{} { return p.Val }
func (p *DefaultSearchProviderSuggestURL) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DefaultSearchProviderSuggestURL) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 46. DefaultSearchProviderIconURL
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultSearchProviderIconURL struct {
	Stat Status
	Val  string
}

func (p *DefaultSearchProviderIconURL) Name() string          { return "DefaultSearchProviderIconURL" }
func (p *DefaultSearchProviderIconURL) Field() string         { return "" }
func (p *DefaultSearchProviderIconURL) Scope() Scope          { return ScopeUser }
func (p *DefaultSearchProviderIconURL) Status() Status        { return p.Stat }
func (p *DefaultSearchProviderIconURL) UntypedV() interface{} { return p.Val }
func (p *DefaultSearchProviderIconURL) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DefaultSearchProviderIconURL) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 47. DefaultSearchProviderEncodings
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultSearchProviderEncodings struct {
	Stat Status
	Val  []string
}

func (p *DefaultSearchProviderEncodings) Name() string          { return "DefaultSearchProviderEncodings" }
func (p *DefaultSearchProviderEncodings) Field() string         { return "" }
func (p *DefaultSearchProviderEncodings) Scope() Scope          { return ScopeUser }
func (p *DefaultSearchProviderEncodings) Status() Status        { return p.Stat }
func (p *DefaultSearchProviderEncodings) UntypedV() interface{} { return p.Val }
func (p *DefaultSearchProviderEncodings) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DefaultSearchProviderEncodings) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 48. DefaultCookiesSetting
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultCookiesSetting struct {
	Stat Status
	Val  int
}

func (p *DefaultCookiesSetting) Name() string          { return "DefaultCookiesSetting" }
func (p *DefaultCookiesSetting) Field() string         { return "" }
func (p *DefaultCookiesSetting) Scope() Scope          { return ScopeUser }
func (p *DefaultCookiesSetting) Status() Status        { return p.Stat }
func (p *DefaultCookiesSetting) UntypedV() interface{} { return p.Val }
func (p *DefaultCookiesSetting) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DefaultCookiesSetting) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 49. DefaultImagesSetting
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultImagesSetting struct {
	Stat Status
	Val  int
}

func (p *DefaultImagesSetting) Name() string          { return "DefaultImagesSetting" }
func (p *DefaultImagesSetting) Field() string         { return "" }
func (p *DefaultImagesSetting) Scope() Scope          { return ScopeUser }
func (p *DefaultImagesSetting) Status() Status        { return p.Stat }
func (p *DefaultImagesSetting) UntypedV() interface{} { return p.Val }
func (p *DefaultImagesSetting) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DefaultImagesSetting) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 50. DefaultJavaScriptSetting
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultJavaScriptSetting struct {
	Stat Status
	Val  int
}

func (p *DefaultJavaScriptSetting) Name() string          { return "DefaultJavaScriptSetting" }
func (p *DefaultJavaScriptSetting) Field() string         { return "" }
func (p *DefaultJavaScriptSetting) Scope() Scope          { return ScopeUser }
func (p *DefaultJavaScriptSetting) Status() Status        { return p.Stat }
func (p *DefaultJavaScriptSetting) UntypedV() interface{} { return p.Val }
func (p *DefaultJavaScriptSetting) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DefaultJavaScriptSetting) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 52. DefaultPopupsSetting
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultPopupsSetting struct {
	Stat Status
	Val  int
}

func (p *DefaultPopupsSetting) Name() string          { return "DefaultPopupsSetting" }
func (p *DefaultPopupsSetting) Field() string         { return "" }
func (p *DefaultPopupsSetting) Scope() Scope          { return ScopeUser }
func (p *DefaultPopupsSetting) Status() Status        { return p.Stat }
func (p *DefaultPopupsSetting) UntypedV() interface{} { return p.Val }
func (p *DefaultPopupsSetting) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DefaultPopupsSetting) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 53. DefaultNotificationsSetting
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultNotificationsSetting struct {
	Stat Status
	Val  int
}

func (p *DefaultNotificationsSetting) Name() string          { return "DefaultNotificationsSetting" }
func (p *DefaultNotificationsSetting) Field() string         { return "" }
func (p *DefaultNotificationsSetting) Scope() Scope          { return ScopeUser }
func (p *DefaultNotificationsSetting) Status() Status        { return p.Stat }
func (p *DefaultNotificationsSetting) UntypedV() interface{} { return p.Val }
func (p *DefaultNotificationsSetting) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DefaultNotificationsSetting) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 54. DefaultGeolocationSetting
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultGeolocationSetting struct {
	Stat Status
	Val  int
}

func (p *DefaultGeolocationSetting) Name() string          { return "DefaultGeolocationSetting" }
func (p *DefaultGeolocationSetting) Field() string         { return "" }
func (p *DefaultGeolocationSetting) Scope() Scope          { return ScopeUser }
func (p *DefaultGeolocationSetting) Status() Status        { return p.Stat }
func (p *DefaultGeolocationSetting) UntypedV() interface{} { return p.Val }
func (p *DefaultGeolocationSetting) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DefaultGeolocationSetting) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 55. Disable3DAPIs
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type Disable3DAPIs struct {
	Stat Status
	Val  bool
}

func (p *Disable3DAPIs) Name() string          { return "Disable3DAPIs" }
func (p *Disable3DAPIs) Field() string         { return "" }
func (p *Disable3DAPIs) Scope() Scope          { return ScopeUser }
func (p *Disable3DAPIs) Status() Status        { return p.Stat }
func (p *Disable3DAPIs) UntypedV() interface{} { return p.Val }
func (p *Disable3DAPIs) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *Disable3DAPIs) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 56. PolicyRefreshRate
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PolicyRefreshRate struct {
	Stat Status
	Val  int
}

func (p *PolicyRefreshRate) Name() string          { return "PolicyRefreshRate" }
func (p *PolicyRefreshRate) Field() string         { return "" }
func (p *PolicyRefreshRate) Scope() Scope          { return ScopeUser }
func (p *PolicyRefreshRate) Status() Status        { return p.Stat }
func (p *PolicyRefreshRate) UntypedV() interface{} { return p.Val }
func (p *PolicyRefreshRate) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *PolicyRefreshRate) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 61. ChromeOsLockOnIdleSuspend
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ChromeOsLockOnIdleSuspend struct {
	Stat Status
	Val  bool
}

func (p *ChromeOsLockOnIdleSuspend) Name() string          { return "ChromeOsLockOnIdleSuspend" }
func (p *ChromeOsLockOnIdleSuspend) Field() string         { return "" }
func (p *ChromeOsLockOnIdleSuspend) Scope() Scope          { return ScopeUser }
func (p *ChromeOsLockOnIdleSuspend) Status() Status        { return p.Stat }
func (p *ChromeOsLockOnIdleSuspend) UntypedV() interface{} { return p.Val }
func (p *ChromeOsLockOnIdleSuspend) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ChromeOsLockOnIdleSuspend) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 64. DownloadDirectory
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DownloadDirectory struct {
	Stat Status
	Val  string
}

func (p *DownloadDirectory) Name() string          { return "DownloadDirectory" }
func (p *DownloadDirectory) Field() string         { return "" }
func (p *DownloadDirectory) Scope() Scope          { return ScopeUser }
func (p *DownloadDirectory) Status() Status        { return p.Stat }
func (p *DownloadDirectory) UntypedV() interface{} { return p.Val }
func (p *DownloadDirectory) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DownloadDirectory) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 67. CookiesBlockedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CookiesBlockedForUrls struct {
	Stat Status
	Val  []string
}

func (p *CookiesBlockedForUrls) Name() string          { return "CookiesBlockedForUrls" }
func (p *CookiesBlockedForUrls) Field() string         { return "" }
func (p *CookiesBlockedForUrls) Scope() Scope          { return ScopeUser }
func (p *CookiesBlockedForUrls) Status() Status        { return p.Stat }
func (p *CookiesBlockedForUrls) UntypedV() interface{} { return p.Val }
func (p *CookiesBlockedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *CookiesBlockedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 68. CookiesSessionOnlyForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CookiesSessionOnlyForUrls struct {
	Stat Status
	Val  []string
}

func (p *CookiesSessionOnlyForUrls) Name() string          { return "CookiesSessionOnlyForUrls" }
func (p *CookiesSessionOnlyForUrls) Field() string         { return "" }
func (p *CookiesSessionOnlyForUrls) Scope() Scope          { return ScopeUser }
func (p *CookiesSessionOnlyForUrls) Status() Status        { return p.Stat }
func (p *CookiesSessionOnlyForUrls) UntypedV() interface{} { return p.Val }
func (p *CookiesSessionOnlyForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *CookiesSessionOnlyForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 69. ImagesAllowedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ImagesAllowedForUrls struct {
	Stat Status
	Val  []string
}

func (p *ImagesAllowedForUrls) Name() string          { return "ImagesAllowedForUrls" }
func (p *ImagesAllowedForUrls) Field() string         { return "" }
func (p *ImagesAllowedForUrls) Scope() Scope          { return ScopeUser }
func (p *ImagesAllowedForUrls) Status() Status        { return p.Stat }
func (p *ImagesAllowedForUrls) UntypedV() interface{} { return p.Val }
func (p *ImagesAllowedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *ImagesAllowedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 70. ImagesBlockedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ImagesBlockedForUrls struct {
	Stat Status
	Val  []string
}

func (p *ImagesBlockedForUrls) Name() string          { return "ImagesBlockedForUrls" }
func (p *ImagesBlockedForUrls) Field() string         { return "" }
func (p *ImagesBlockedForUrls) Scope() Scope          { return ScopeUser }
func (p *ImagesBlockedForUrls) Status() Status        { return p.Stat }
func (p *ImagesBlockedForUrls) UntypedV() interface{} { return p.Val }
func (p *ImagesBlockedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *ImagesBlockedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 71. JavaScriptAllowedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type JavaScriptAllowedForUrls struct {
	Stat Status
	Val  []string
}

func (p *JavaScriptAllowedForUrls) Name() string          { return "JavaScriptAllowedForUrls" }
func (p *JavaScriptAllowedForUrls) Field() string         { return "" }
func (p *JavaScriptAllowedForUrls) Scope() Scope          { return ScopeUser }
func (p *JavaScriptAllowedForUrls) Status() Status        { return p.Stat }
func (p *JavaScriptAllowedForUrls) UntypedV() interface{} { return p.Val }
func (p *JavaScriptAllowedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *JavaScriptAllowedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 72. JavaScriptBlockedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type JavaScriptBlockedForUrls struct {
	Stat Status
	Val  []string
}

func (p *JavaScriptBlockedForUrls) Name() string          { return "JavaScriptBlockedForUrls" }
func (p *JavaScriptBlockedForUrls) Field() string         { return "" }
func (p *JavaScriptBlockedForUrls) Scope() Scope          { return ScopeUser }
func (p *JavaScriptBlockedForUrls) Status() Status        { return p.Stat }
func (p *JavaScriptBlockedForUrls) UntypedV() interface{} { return p.Val }
func (p *JavaScriptBlockedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *JavaScriptBlockedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 75. PopupsAllowedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PopupsAllowedForUrls struct {
	Stat Status
	Val  []string
}

func (p *PopupsAllowedForUrls) Name() string          { return "PopupsAllowedForUrls" }
func (p *PopupsAllowedForUrls) Field() string         { return "" }
func (p *PopupsAllowedForUrls) Scope() Scope          { return ScopeUser }
func (p *PopupsAllowedForUrls) Status() Status        { return p.Stat }
func (p *PopupsAllowedForUrls) UntypedV() interface{} { return p.Val }
func (p *PopupsAllowedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *PopupsAllowedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 76. PopupsBlockedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PopupsBlockedForUrls struct {
	Stat Status
	Val  []string
}

func (p *PopupsBlockedForUrls) Name() string          { return "PopupsBlockedForUrls" }
func (p *PopupsBlockedForUrls) Field() string         { return "" }
func (p *PopupsBlockedForUrls) Scope() Scope          { return ScopeUser }
func (p *PopupsBlockedForUrls) Status() Status        { return p.Stat }
func (p *PopupsBlockedForUrls) UntypedV() interface{} { return p.Val }
func (p *PopupsBlockedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *PopupsBlockedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 77. CookiesAllowedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CookiesAllowedForUrls struct {
	Stat Status
	Val  []string
}

func (p *CookiesAllowedForUrls) Name() string          { return "CookiesAllowedForUrls" }
func (p *CookiesAllowedForUrls) Field() string         { return "" }
func (p *CookiesAllowedForUrls) Scope() Scope          { return ScopeUser }
func (p *CookiesAllowedForUrls) Status() Status        { return p.Stat }
func (p *CookiesAllowedForUrls) UntypedV() interface{} { return p.Val }
func (p *CookiesAllowedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *CookiesAllowedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 80. TranslateEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type TranslateEnabled struct {
	Stat Status
	Val  bool
}

func (p *TranslateEnabled) Name() string          { return "TranslateEnabled" }
func (p *TranslateEnabled) Field() string         { return "" }
func (p *TranslateEnabled) Scope() Scope          { return ScopeUser }
func (p *TranslateEnabled) Status() Status        { return p.Stat }
func (p *TranslateEnabled) UntypedV() interface{} { return p.Val }
func (p *TranslateEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *TranslateEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 82. BookmarkBarEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type BookmarkBarEnabled struct {
	Stat Status
	Val  bool
}

func (p *BookmarkBarEnabled) Name() string          { return "BookmarkBarEnabled" }
func (p *BookmarkBarEnabled) Field() string         { return "" }
func (p *BookmarkBarEnabled) Scope() Scope          { return ScopeUser }
func (p *BookmarkBarEnabled) Status() Status        { return p.Stat }
func (p *BookmarkBarEnabled) UntypedV() interface{} { return p.Val }
func (p *BookmarkBarEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *BookmarkBarEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 83. EditBookmarksEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type EditBookmarksEnabled struct {
	Stat Status
	Val  bool
}

func (p *EditBookmarksEnabled) Name() string          { return "EditBookmarksEnabled" }
func (p *EditBookmarksEnabled) Field() string         { return "" }
func (p *EditBookmarksEnabled) Scope() Scope          { return ScopeUser }
func (p *EditBookmarksEnabled) Status() Status        { return p.Stat }
func (p *EditBookmarksEnabled) UntypedV() interface{} { return p.Val }
func (p *EditBookmarksEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *EditBookmarksEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 85. DisabledSchemes
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DisabledSchemes struct {
	Stat Status
	Val  []string
}

func (p *DisabledSchemes) Name() string          { return "DisabledSchemes" }
func (p *DisabledSchemes) Field() string         { return "" }
func (p *DisabledSchemes) Scope() Scope          { return ScopeUser }
func (p *DisabledSchemes) Status() Status        { return p.Stat }
func (p *DisabledSchemes) UntypedV() interface{} { return p.Val }
func (p *DisabledSchemes) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DisabledSchemes) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 89. AllowCrossOriginAuthPrompt
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AllowCrossOriginAuthPrompt struct {
	Stat Status
	Val  bool
}

func (p *AllowCrossOriginAuthPrompt) Name() string          { return "AllowCrossOriginAuthPrompt" }
func (p *AllowCrossOriginAuthPrompt) Field() string         { return "" }
func (p *AllowCrossOriginAuthPrompt) Scope() Scope          { return ScopeUser }
func (p *AllowCrossOriginAuthPrompt) Status() Status        { return p.Stat }
func (p *AllowCrossOriginAuthPrompt) UntypedV() interface{} { return p.Val }
func (p *AllowCrossOriginAuthPrompt) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AllowCrossOriginAuthPrompt) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 90. DevicePolicyRefreshRate
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DevicePolicyRefreshRate struct {
	Stat Status
	Val  int
}

func (p *DevicePolicyRefreshRate) Name() string { return "DevicePolicyRefreshRate" }
func (p *DevicePolicyRefreshRate) Field() string {
	return "device_policy_refresh_rate.device_policy_refresh_rate"
}
func (p *DevicePolicyRefreshRate) Scope() Scope          { return ScopeDevice }
func (p *DevicePolicyRefreshRate) Status() Status        { return p.Stat }
func (p *DevicePolicyRefreshRate) UntypedV() interface{} { return p.Val }
func (p *DevicePolicyRefreshRate) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DevicePolicyRefreshRate) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 91. ChromeOsReleaseChannel
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ChromeOsReleaseChannel struct {
	Stat Status
	Val  string
}

func (p *ChromeOsReleaseChannel) Name() string          { return "ChromeOsReleaseChannel" }
func (p *ChromeOsReleaseChannel) Field() string         { return "release_channel.release_channel" }
func (p *ChromeOsReleaseChannel) Scope() Scope          { return ScopeDevice }
func (p *ChromeOsReleaseChannel) Status() Status        { return p.Stat }
func (p *ChromeOsReleaseChannel) UntypedV() interface{} { return p.Val }
func (p *ChromeOsReleaseChannel) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *ChromeOsReleaseChannel) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 93. IncognitoModeAvailability
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type IncognitoModeAvailability struct {
	Stat Status
	Val  int
}

func (p *IncognitoModeAvailability) Name() string          { return "IncognitoModeAvailability" }
func (p *IncognitoModeAvailability) Field() string         { return "" }
func (p *IncognitoModeAvailability) Scope() Scope          { return ScopeUser }
func (p *IncognitoModeAvailability) Status() Status        { return p.Stat }
func (p *IncognitoModeAvailability) UntypedV() interface{} { return p.Val }
func (p *IncognitoModeAvailability) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *IncognitoModeAvailability) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 95. RemoteAccessHostFirewallTraversal
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RemoteAccessHostFirewallTraversal struct {
	Stat Status
	Val  bool
}

func (p *RemoteAccessHostFirewallTraversal) Name() string          { return "RemoteAccessHostFirewallTraversal" }
func (p *RemoteAccessHostFirewallTraversal) Field() string         { return "" }
func (p *RemoteAccessHostFirewallTraversal) Scope() Scope          { return ScopeUser }
func (p *RemoteAccessHostFirewallTraversal) Status() Status        { return p.Stat }
func (p *RemoteAccessHostFirewallTraversal) UntypedV() interface{} { return p.Val }
func (p *RemoteAccessHostFirewallTraversal) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *RemoteAccessHostFirewallTraversal) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 102. AutoSelectCertificateForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AutoSelectCertificateForUrls struct {
	Stat Status
	Val  []string
}

func (p *AutoSelectCertificateForUrls) Name() string          { return "AutoSelectCertificateForUrls" }
func (p *AutoSelectCertificateForUrls) Field() string         { return "" }
func (p *AutoSelectCertificateForUrls) Scope() Scope          { return ScopeUser }
func (p *AutoSelectCertificateForUrls) Status() Status        { return p.Stat }
func (p *AutoSelectCertificateForUrls) UntypedV() interface{} { return p.Val }
func (p *AutoSelectCertificateForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *AutoSelectCertificateForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 105. NotificationsAllowedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type NotificationsAllowedForUrls struct {
	Stat Status
	Val  []string
}

func (p *NotificationsAllowedForUrls) Name() string          { return "NotificationsAllowedForUrls" }
func (p *NotificationsAllowedForUrls) Field() string         { return "" }
func (p *NotificationsAllowedForUrls) Scope() Scope          { return ScopeUser }
func (p *NotificationsAllowedForUrls) Status() Status        { return p.Stat }
func (p *NotificationsAllowedForUrls) UntypedV() interface{} { return p.Val }
func (p *NotificationsAllowedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *NotificationsAllowedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 106. NotificationsBlockedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type NotificationsBlockedForUrls struct {
	Stat Status
	Val  []string
}

func (p *NotificationsBlockedForUrls) Name() string          { return "NotificationsBlockedForUrls" }
func (p *NotificationsBlockedForUrls) Field() string         { return "" }
func (p *NotificationsBlockedForUrls) Scope() Scope          { return ScopeUser }
func (p *NotificationsBlockedForUrls) Status() Status        { return p.Stat }
func (p *NotificationsBlockedForUrls) UntypedV() interface{} { return p.Val }
func (p *NotificationsBlockedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *NotificationsBlockedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 107. OpenNetworkConfiguration
// This policy can be modified without rebooting.
// See https://chromium.googlesource.com/chromium/src/+/HEAD/components/onc/docs/onc_spec.md for full schema.
///////////////////////////////////////////////////////////////////////////////
type OpenNetworkConfiguration struct {
	Stat Status
	Val  *ONC
}

func (p *OpenNetworkConfiguration) Name() string          { return "OpenNetworkConfiguration" }
func (p *OpenNetworkConfiguration) Field() string         { return "" }
func (p *OpenNetworkConfiguration) Scope() Scope          { return ScopeUser }
func (p *OpenNetworkConfiguration) Status() Status        { return p.Stat }
func (p *OpenNetworkConfiguration) UntypedV() interface{} { return p.Val }
func (p *OpenNetworkConfiguration) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *ONC
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *ONC", m)
	}
	return v, nil
}
func (p *OpenNetworkConfiguration) Equal(iface interface{}) bool {
	v, ok := iface.(*ONC)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 108. DeviceOpenNetworkConfiguration
// This policy can be modified without rebooting.
// See https://chromium.googlesource.com/chromium/src/+/HEAD/components/onc/docs/onc_spec.md for full schema.
///////////////////////////////////////////////////////////////////////////////
type DeviceOpenNetworkConfiguration struct {
	Stat Status
	Val  *ONC
}

func (p *DeviceOpenNetworkConfiguration) Name() string { return "DeviceOpenNetworkConfiguration" }
func (p *DeviceOpenNetworkConfiguration) Field() string {
	return "open_network_configuration.open_network_configuration"
}
func (p *DeviceOpenNetworkConfiguration) Scope() Scope          { return ScopeDevice }
func (p *DeviceOpenNetworkConfiguration) Status() Status        { return p.Stat }
func (p *DeviceOpenNetworkConfiguration) UntypedV() interface{} { return p.Val }
func (p *DeviceOpenNetworkConfiguration) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *ONC
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *ONC", m)
	}
	return v, nil
}
func (p *DeviceOpenNetworkConfiguration) Equal(iface interface{}) bool {
	v, ok := iface.(*ONC)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 116. ProxySettings
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ProxySettings struct {
	Stat Status
	Val  *ProxySettingsValue
}

type ProxySettingsValue struct {
	ProxyBypassList   string `json:"ProxyBypassList"`
	ProxyMode         string `json:"ProxyMode"`
	ProxyPacMandatory bool   `json:"ProxyPacMandatory"`
	ProxyPacUrl       string `json:"ProxyPacUrl"`
	ProxyServer       string `json:"ProxyServer"`
	ProxyServerMode   int    `json:"ProxyServerMode"`
}

func (p *ProxySettings) Name() string          { return "ProxySettings" }
func (p *ProxySettings) Field() string         { return "" }
func (p *ProxySettings) Scope() Scope          { return ScopeUser }
func (p *ProxySettings) Status() Status        { return p.Stat }
func (p *ProxySettings) UntypedV() interface{} { return p.Val }
func (p *ProxySettings) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *ProxySettingsValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *ProxySettingsValue", m)
	}
	return v, nil
}
func (p *ProxySettings) Equal(iface interface{}) bool {
	v, ok := iface.(*ProxySettingsValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 119. ReportDeviceVersionInfo
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceVersionInfo struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceVersionInfo) Name() string          { return "ReportDeviceVersionInfo" }
func (p *ReportDeviceVersionInfo) Field() string         { return "device_reporting.report_version_info" }
func (p *ReportDeviceVersionInfo) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceVersionInfo) Status() Status        { return p.Stat }
func (p *ReportDeviceVersionInfo) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceVersionInfo) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceVersionInfo) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 120. ReportDeviceActivityTimes
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceActivityTimes struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceActivityTimes) Name() string          { return "ReportDeviceActivityTimes" }
func (p *ReportDeviceActivityTimes) Field() string         { return "device_reporting.report_activity_times" }
func (p *ReportDeviceActivityTimes) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceActivityTimes) Status() Status        { return p.Stat }
func (p *ReportDeviceActivityTimes) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceActivityTimes) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceActivityTimes) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 121. ReportDeviceBootMode
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceBootMode struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceBootMode) Name() string          { return "ReportDeviceBootMode" }
func (p *ReportDeviceBootMode) Field() string         { return "device_reporting.report_boot_mode" }
func (p *ReportDeviceBootMode) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceBootMode) Status() Status        { return p.Stat }
func (p *ReportDeviceBootMode) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceBootMode) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceBootMode) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 122. DeviceUserWhitelist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceUserWhitelist struct {
	Stat Status
	Val  []string
}

func (p *DeviceUserWhitelist) Name() string          { return "DeviceUserWhitelist" }
func (p *DeviceUserWhitelist) Field() string         { return "user_whitelist.user_whitelist" }
func (p *DeviceUserWhitelist) Scope() Scope          { return ScopeDevice }
func (p *DeviceUserWhitelist) Status() Status        { return p.Stat }
func (p *DeviceUserWhitelist) UntypedV() interface{} { return p.Val }
func (p *DeviceUserWhitelist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DeviceUserWhitelist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	sensitive := p.Val
	for i := range sensitive {
		sensitive[i] = "********"
	}
	return cmp.Equal(sensitive, v)
}

///////////////////////////////////////////////////////////////////////////////
// 123. DeviceAllowNewUsers
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceAllowNewUsers struct {
	Stat Status
	Val  bool
}

func (p *DeviceAllowNewUsers) Name() string          { return "DeviceAllowNewUsers" }
func (p *DeviceAllowNewUsers) Field() string         { return "allow_new_users.allow_new_users" }
func (p *DeviceAllowNewUsers) Scope() Scope          { return ScopeDevice }
func (p *DeviceAllowNewUsers) Status() Status        { return p.Stat }
func (p *DeviceAllowNewUsers) UntypedV() interface{} { return p.Val }
func (p *DeviceAllowNewUsers) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceAllowNewUsers) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 124. DeviceGuestModeEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceGuestModeEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceGuestModeEnabled) Name() string          { return "DeviceGuestModeEnabled" }
func (p *DeviceGuestModeEnabled) Field() string         { return "guest_mode_enabled.guest_mode_enabled" }
func (p *DeviceGuestModeEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceGuestModeEnabled) Status() Status        { return p.Stat }
func (p *DeviceGuestModeEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceGuestModeEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceGuestModeEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 125. DeviceShowUserNamesOnSignin
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceShowUserNamesOnSignin struct {
	Stat Status
	Val  bool
}

func (p *DeviceShowUserNamesOnSignin) Name() string          { return "DeviceShowUserNamesOnSignin" }
func (p *DeviceShowUserNamesOnSignin) Field() string         { return "show_user_names.show_user_names" }
func (p *DeviceShowUserNamesOnSignin) Scope() Scope          { return ScopeDevice }
func (p *DeviceShowUserNamesOnSignin) Status() Status        { return p.Stat }
func (p *DeviceShowUserNamesOnSignin) UntypedV() interface{} { return p.Val }
func (p *DeviceShowUserNamesOnSignin) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceShowUserNamesOnSignin) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 126. DeviceDataRoamingEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceDataRoamingEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceDataRoamingEnabled) Name() string          { return "DeviceDataRoamingEnabled" }
func (p *DeviceDataRoamingEnabled) Field() string         { return "data_roaming_enabled.data_roaming_enabled" }
func (p *DeviceDataRoamingEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceDataRoamingEnabled) Status() Status        { return p.Stat }
func (p *DeviceDataRoamingEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceDataRoamingEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceDataRoamingEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 127. DeviceMetricsReportingEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceMetricsReportingEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceMetricsReportingEnabled) Name() string          { return "DeviceMetricsReportingEnabled" }
func (p *DeviceMetricsReportingEnabled) Field() string         { return "metrics_enabled.metrics_enabled" }
func (p *DeviceMetricsReportingEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceMetricsReportingEnabled) Status() Status        { return p.Stat }
func (p *DeviceMetricsReportingEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceMetricsReportingEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceMetricsReportingEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 128. DeviceEphemeralUsersEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceEphemeralUsersEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceEphemeralUsersEnabled) Name() string { return "DeviceEphemeralUsersEnabled" }
func (p *DeviceEphemeralUsersEnabled) Field() string {
	return "ephemeral_users_enabled.ephemeral_users_enabled"
}
func (p *DeviceEphemeralUsersEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceEphemeralUsersEnabled) Status() Status        { return p.Stat }
func (p *DeviceEphemeralUsersEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceEphemeralUsersEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceEphemeralUsersEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 129. EnableOnlineRevocationChecks
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type EnableOnlineRevocationChecks struct {
	Stat Status
	Val  bool
}

func (p *EnableOnlineRevocationChecks) Name() string          { return "EnableOnlineRevocationChecks" }
func (p *EnableOnlineRevocationChecks) Field() string         { return "" }
func (p *EnableOnlineRevocationChecks) Scope() Scope          { return ScopeUser }
func (p *EnableOnlineRevocationChecks) Status() Status        { return p.Stat }
func (p *EnableOnlineRevocationChecks) UntypedV() interface{} { return p.Val }
func (p *EnableOnlineRevocationChecks) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *EnableOnlineRevocationChecks) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 134. ChromeOsReleaseChannelDelegated
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ChromeOsReleaseChannelDelegated struct {
	Stat Status
	Val  bool
}

func (p *ChromeOsReleaseChannelDelegated) Name() string { return "ChromeOsReleaseChannelDelegated" }
func (p *ChromeOsReleaseChannelDelegated) Field() string {
	return "release_channel.release_channel_delegated"
}
func (p *ChromeOsReleaseChannelDelegated) Scope() Scope          { return ScopeDevice }
func (p *ChromeOsReleaseChannelDelegated) Status() Status        { return p.Stat }
func (p *ChromeOsReleaseChannelDelegated) UntypedV() interface{} { return p.Val }
func (p *ChromeOsReleaseChannelDelegated) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ChromeOsReleaseChannelDelegated) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 136. DeviceAutoUpdateDisabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceAutoUpdateDisabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceAutoUpdateDisabled) Name() string          { return "DeviceAutoUpdateDisabled" }
func (p *DeviceAutoUpdateDisabled) Field() string         { return "auto_update_settings.update_disabled" }
func (p *DeviceAutoUpdateDisabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceAutoUpdateDisabled) Status() Status        { return p.Stat }
func (p *DeviceAutoUpdateDisabled) UntypedV() interface{} { return p.Val }
func (p *DeviceAutoUpdateDisabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceAutoUpdateDisabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 139. DriveDisabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DriveDisabled struct {
	Stat Status
	Val  bool
}

func (p *DriveDisabled) Name() string          { return "DriveDisabled" }
func (p *DriveDisabled) Field() string         { return "" }
func (p *DriveDisabled) Scope() Scope          { return ScopeUser }
func (p *DriveDisabled) Status() Status        { return p.Stat }
func (p *DriveDisabled) UntypedV() interface{} { return p.Val }
func (p *DriveDisabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DriveDisabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 140. DriveDisabledOverCellular
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DriveDisabledOverCellular struct {
	Stat Status
	Val  bool
}

func (p *DriveDisabledOverCellular) Name() string          { return "DriveDisabledOverCellular" }
func (p *DriveDisabledOverCellular) Field() string         { return "" }
func (p *DriveDisabledOverCellular) Scope() Scope          { return ScopeUser }
func (p *DriveDisabledOverCellular) Status() Status        { return p.Stat }
func (p *DriveDisabledOverCellular) UntypedV() interface{} { return p.Val }
func (p *DriveDisabledOverCellular) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DriveDisabledOverCellular) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 142. DeviceTargetVersionPrefix
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceTargetVersionPrefix struct {
	Stat Status
	Val  string
}

func (p *DeviceTargetVersionPrefix) Name() string { return "DeviceTargetVersionPrefix" }
func (p *DeviceTargetVersionPrefix) Field() string {
	return "auto_update_settings.target_version_prefix"
}
func (p *DeviceTargetVersionPrefix) Scope() Scope          { return ScopeDevice }
func (p *DeviceTargetVersionPrefix) Status() Status        { return p.Stat }
func (p *DeviceTargetVersionPrefix) UntypedV() interface{} { return p.Val }
func (p *DeviceTargetVersionPrefix) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DeviceTargetVersionPrefix) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 143. ReportDeviceLocation
// This policy can be modified without rebooting.
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceLocation struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceLocation) Name() string          { return "ReportDeviceLocation" }
func (p *ReportDeviceLocation) Field() string         { return "device_reporting.report_location" }
func (p *ReportDeviceLocation) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceLocation) Status() Status        { return p.Stat }
func (p *ReportDeviceLocation) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceLocation) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceLocation) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 144. PinnedLauncherApps
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PinnedLauncherApps struct {
	Stat Status
	Val  []string
}

func (p *PinnedLauncherApps) Name() string          { return "PinnedLauncherApps" }
func (p *PinnedLauncherApps) Field() string         { return "" }
func (p *PinnedLauncherApps) Scope() Scope          { return ScopeUser }
func (p *PinnedLauncherApps) Status() Status        { return p.Stat }
func (p *PinnedLauncherApps) UntypedV() interface{} { return p.Val }
func (p *PinnedLauncherApps) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *PinnedLauncherApps) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 145. DeviceUpdateScatterFactor
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceUpdateScatterFactor struct {
	Stat Status
	Val  int
}

func (p *DeviceUpdateScatterFactor) Name() string { return "DeviceUpdateScatterFactor" }
func (p *DeviceUpdateScatterFactor) Field() string {
	return "auto_update_settings.scatter_factor_in_seconds"
}
func (p *DeviceUpdateScatterFactor) Scope() Scope          { return ScopeDevice }
func (p *DeviceUpdateScatterFactor) Status() Status        { return p.Stat }
func (p *DeviceUpdateScatterFactor) UntypedV() interface{} { return p.Val }
func (p *DeviceUpdateScatterFactor) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceUpdateScatterFactor) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 146. DeviceUpdateAllowedConnectionTypes
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceUpdateAllowedConnectionTypes struct {
	Stat Status
	Val  []string
}

func (p *DeviceUpdateAllowedConnectionTypes) Name() string {
	return "DeviceUpdateAllowedConnectionTypes"
}
func (p *DeviceUpdateAllowedConnectionTypes) Field() string {
	return "auto_update_settings.allowed_connection_types"
}
func (p *DeviceUpdateAllowedConnectionTypes) Scope() Scope          { return ScopeDevice }
func (p *DeviceUpdateAllowedConnectionTypes) Status() Status        { return p.Stat }
func (p *DeviceUpdateAllowedConnectionTypes) UntypedV() interface{} { return p.Val }
func (p *DeviceUpdateAllowedConnectionTypes) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DeviceUpdateAllowedConnectionTypes) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 148. ExtensionInstallSources
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ExtensionInstallSources struct {
	Stat Status
	Val  []string
}

func (p *ExtensionInstallSources) Name() string          { return "ExtensionInstallSources" }
func (p *ExtensionInstallSources) Field() string         { return "" }
func (p *ExtensionInstallSources) Scope() Scope          { return ScopeUser }
func (p *ExtensionInstallSources) Status() Status        { return p.Stat }
func (p *ExtensionInstallSources) UntypedV() interface{} { return p.Val }
func (p *ExtensionInstallSources) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *ExtensionInstallSources) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 149. DefaultMediaStreamSetting
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultMediaStreamSetting struct {
	Stat Status
	Val  int
}

func (p *DefaultMediaStreamSetting) Name() string          { return "DefaultMediaStreamSetting" }
func (p *DefaultMediaStreamSetting) Field() string         { return "" }
func (p *DefaultMediaStreamSetting) Scope() Scope          { return ScopeUser }
func (p *DefaultMediaStreamSetting) Status() Status        { return p.Stat }
func (p *DefaultMediaStreamSetting) UntypedV() interface{} { return p.Val }
func (p *DefaultMediaStreamSetting) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DefaultMediaStreamSetting) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 150. DisableSafeBrowsingProceedAnyway
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DisableSafeBrowsingProceedAnyway struct {
	Stat Status
	Val  bool
}

func (p *DisableSafeBrowsingProceedAnyway) Name() string          { return "DisableSafeBrowsingProceedAnyway" }
func (p *DisableSafeBrowsingProceedAnyway) Field() string         { return "" }
func (p *DisableSafeBrowsingProceedAnyway) Scope() Scope          { return ScopeUser }
func (p *DisableSafeBrowsingProceedAnyway) Status() Status        { return p.Stat }
func (p *DisableSafeBrowsingProceedAnyway) UntypedV() interface{} { return p.Val }
func (p *DisableSafeBrowsingProceedAnyway) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DisableSafeBrowsingProceedAnyway) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 151. SpellCheckServiceEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SpellCheckServiceEnabled struct {
	Stat Status
	Val  bool
}

func (p *SpellCheckServiceEnabled) Name() string          { return "SpellCheckServiceEnabled" }
func (p *SpellCheckServiceEnabled) Field() string         { return "" }
func (p *SpellCheckServiceEnabled) Scope() Scope          { return ScopeUser }
func (p *SpellCheckServiceEnabled) Status() Status        { return p.Stat }
func (p *SpellCheckServiceEnabled) UntypedV() interface{} { return p.Val }
func (p *SpellCheckServiceEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SpellCheckServiceEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 152. ExternalStorageDisabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ExternalStorageDisabled struct {
	Stat Status
	Val  bool
}

func (p *ExternalStorageDisabled) Name() string          { return "ExternalStorageDisabled" }
func (p *ExternalStorageDisabled) Field() string         { return "" }
func (p *ExternalStorageDisabled) Scope() Scope          { return ScopeUser }
func (p *ExternalStorageDisabled) Status() Status        { return p.Stat }
func (p *ExternalStorageDisabled) UntypedV() interface{} { return p.Val }
func (p *ExternalStorageDisabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ExternalStorageDisabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 153. DisableScreenshots
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DisableScreenshots struct {
	Stat Status
	Val  bool
}

func (p *DisableScreenshots) Name() string          { return "DisableScreenshots" }
func (p *DisableScreenshots) Field() string         { return "" }
func (p *DisableScreenshots) Scope() Scope          { return ScopeUser }
func (p *DisableScreenshots) Status() Status        { return p.Stat }
func (p *DisableScreenshots) UntypedV() interface{} { return p.Val }
func (p *DisableScreenshots) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DisableScreenshots) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 154. RemoteAccessHostDomain
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RemoteAccessHostDomain struct {
	Stat Status
	Val  string
}

func (p *RemoteAccessHostDomain) Name() string          { return "RemoteAccessHostDomain" }
func (p *RemoteAccessHostDomain) Field() string         { return "" }
func (p *RemoteAccessHostDomain) Scope() Scope          { return ScopeUser }
func (p *RemoteAccessHostDomain) Status() Status        { return p.Stat }
func (p *RemoteAccessHostDomain) UntypedV() interface{} { return p.Val }
func (p *RemoteAccessHostDomain) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *RemoteAccessHostDomain) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 158. SystemTimezone
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SystemTimezone struct {
	Stat Status
	Val  string
}

func (p *SystemTimezone) Name() string          { return "SystemTimezone" }
func (p *SystemTimezone) Field() string         { return "system_timezone.timezone" }
func (p *SystemTimezone) Scope() Scope          { return ScopeDevice }
func (p *SystemTimezone) Status() Status        { return p.Stat }
func (p *SystemTimezone) UntypedV() interface{} { return p.Val }
func (p *SystemTimezone) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *SystemTimezone) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 159. AudioOutputAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AudioOutputAllowed struct {
	Stat Status
	Val  bool
}

func (p *AudioOutputAllowed) Name() string          { return "AudioOutputAllowed" }
func (p *AudioOutputAllowed) Field() string         { return "" }
func (p *AudioOutputAllowed) Scope() Scope          { return ScopeUser }
func (p *AudioOutputAllowed) Status() Status        { return p.Stat }
func (p *AudioOutputAllowed) UntypedV() interface{} { return p.Val }
func (p *AudioOutputAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AudioOutputAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 160. AudioCaptureAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AudioCaptureAllowed struct {
	Stat Status
	Val  bool
}

func (p *AudioCaptureAllowed) Name() string          { return "AudioCaptureAllowed" }
func (p *AudioCaptureAllowed) Field() string         { return "" }
func (p *AudioCaptureAllowed) Scope() Scope          { return ScopeUser }
func (p *AudioCaptureAllowed) Status() Status        { return p.Stat }
func (p *AudioCaptureAllowed) UntypedV() interface{} { return p.Val }
func (p *AudioCaptureAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AudioCaptureAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 161. DefaultSearchProviderAlternateURLs
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultSearchProviderAlternateURLs struct {
	Stat Status
	Val  []string
}

func (p *DefaultSearchProviderAlternateURLs) Name() string {
	return "DefaultSearchProviderAlternateURLs"
}
func (p *DefaultSearchProviderAlternateURLs) Field() string         { return "" }
func (p *DefaultSearchProviderAlternateURLs) Scope() Scope          { return ScopeUser }
func (p *DefaultSearchProviderAlternateURLs) Status() Status        { return p.Stat }
func (p *DefaultSearchProviderAlternateURLs) UntypedV() interface{} { return p.Val }
func (p *DefaultSearchProviderAlternateURLs) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DefaultSearchProviderAlternateURLs) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 162. ForceSafeSearch
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ForceSafeSearch struct {
	Stat Status
	Val  bool
}

func (p *ForceSafeSearch) Name() string          { return "ForceSafeSearch" }
func (p *ForceSafeSearch) Field() string         { return "" }
func (p *ForceSafeSearch) Scope() Scope          { return ScopeUser }
func (p *ForceSafeSearch) Status() Status        { return p.Stat }
func (p *ForceSafeSearch) UntypedV() interface{} { return p.Val }
func (p *ForceSafeSearch) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ForceSafeSearch) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 163. DeviceLocalAccounts
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLocalAccounts struct {
	Stat Status
	Val  []DeviceLocalAccountInfo
}

type AccountType int

const (
	AccountTypePublicSession     AccountType = iota // 0
	AccountTypeKioskApp                             // 1
	AccountTypeKioskAndroidApp                      // 2
	AccountTypeSAMLPublicSession                    // 3
	AccountTypeKioskWebApp                          // 4
)

type AndroidKioskAppInfo struct {
	PackageName *string `json:"package_name,omitempty"`
	ClassName   *string `json:"class_name,omitempty"`
	Action      *string `json:"action,omitempty"`
	DisplayName *string `json:"display_name,omitempty"`
}

type KioskAppInfo struct {
	AppId     *string `json:"app_id,omitempty"`
	UpdateUrl *string `json:"update_url,omitempty"`
}

type WebKioskAppInfo struct {
	Url     *string `json:"url,omitempty"`
	Title   *string `json:"title,omitempty"`
	IconUrl *string `json:"icon_url,omitempty"`
}
type DeviceLocalAccountInfo struct {
	AccountID           *string              `json:"account_id,omitempty"`
	AccountType         *AccountType         `json:"type,omitempty"`
	AndroidKioskAppInfo *AndroidKioskAppInfo `json:"android_kiosk_app,omitempty"`
	KioskAppInfo        *KioskAppInfo        `json:"kiosk_app,omitempty"`
	WebKioskAppInfo     *WebKioskAppInfo     `json:"web_kiosk_app,omitempty"`
}

func (p *DeviceLocalAccounts) Name() string          { return "DeviceLocalAccounts" }
func (p *DeviceLocalAccounts) Field() string         { return "device_local_accounts.account" }
func (p *DeviceLocalAccounts) Scope() Scope          { return ScopeDevice }
func (p *DeviceLocalAccounts) Status() Status        { return p.Stat }
func (p *DeviceLocalAccounts) UntypedV() interface{} { return p.Val }
func (p *DeviceLocalAccounts) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []DeviceLocalAccountInfo
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []DeviceLocalAccountInfo", m)
	}
	return v, nil
}
func (p *DeviceLocalAccounts) Equal(iface interface{}) bool {
	v, ok := iface.([]DeviceLocalAccountInfo)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 164. ShowLogoutButtonInTray
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ShowLogoutButtonInTray struct {
	Stat Status
	Val  bool
}

func (p *ShowLogoutButtonInTray) Name() string          { return "ShowLogoutButtonInTray" }
func (p *ShowLogoutButtonInTray) Field() string         { return "" }
func (p *ShowLogoutButtonInTray) Scope() Scope          { return ScopeUser }
func (p *ShowLogoutButtonInTray) Status() Status        { return p.Stat }
func (p *ShowLogoutButtonInTray) UntypedV() interface{} { return p.Val }
func (p *ShowLogoutButtonInTray) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ShowLogoutButtonInTray) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 165. BuiltInDnsClientEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type BuiltInDnsClientEnabled struct {
	Stat Status
	Val  bool
}

func (p *BuiltInDnsClientEnabled) Name() string          { return "BuiltInDnsClientEnabled" }
func (p *BuiltInDnsClientEnabled) Field() string         { return "" }
func (p *BuiltInDnsClientEnabled) Scope() Scope          { return ScopeUser }
func (p *BuiltInDnsClientEnabled) Status() Status        { return p.Stat }
func (p *BuiltInDnsClientEnabled) UntypedV() interface{} { return p.Val }
func (p *BuiltInDnsClientEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *BuiltInDnsClientEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 166. ShelfAutoHideBehavior
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ShelfAutoHideBehavior struct {
	Stat Status
	Val  string
}

func (p *ShelfAutoHideBehavior) Name() string          { return "ShelfAutoHideBehavior" }
func (p *ShelfAutoHideBehavior) Field() string         { return "" }
func (p *ShelfAutoHideBehavior) Scope() Scope          { return ScopeUser }
func (p *ShelfAutoHideBehavior) Status() Status        { return p.Stat }
func (p *ShelfAutoHideBehavior) UntypedV() interface{} { return p.Val }
func (p *ShelfAutoHideBehavior) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *ShelfAutoHideBehavior) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 167. VideoCaptureAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type VideoCaptureAllowed struct {
	Stat Status
	Val  bool
}

func (p *VideoCaptureAllowed) Name() string          { return "VideoCaptureAllowed" }
func (p *VideoCaptureAllowed) Field() string         { return "" }
func (p *VideoCaptureAllowed) Scope() Scope          { return ScopeUser }
func (p *VideoCaptureAllowed) Status() Status        { return p.Stat }
func (p *VideoCaptureAllowed) UntypedV() interface{} { return p.Val }
func (p *VideoCaptureAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *VideoCaptureAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 168. ExtensionAllowedTypes
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ExtensionAllowedTypes struct {
	Stat Status
	Val  []string
}

func (p *ExtensionAllowedTypes) Name() string          { return "ExtensionAllowedTypes" }
func (p *ExtensionAllowedTypes) Field() string         { return "" }
func (p *ExtensionAllowedTypes) Scope() Scope          { return ScopeUser }
func (p *ExtensionAllowedTypes) Status() Status        { return p.Stat }
func (p *ExtensionAllowedTypes) UntypedV() interface{} { return p.Val }
func (p *ExtensionAllowedTypes) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *ExtensionAllowedTypes) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 169. UserDisplayName
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type UserDisplayName struct {
	Stat Status
	Val  string
}

func (p *UserDisplayName) Name() string          { return "UserDisplayName" }
func (p *UserDisplayName) Field() string         { return "" }
func (p *UserDisplayName) Scope() Scope          { return ScopeUser }
func (p *UserDisplayName) Status() Status        { return p.Stat }
func (p *UserDisplayName) UntypedV() interface{} { return p.Val }
func (p *UserDisplayName) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *UserDisplayName) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 170. SessionLengthLimit
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SessionLengthLimit struct {
	Stat Status
	Val  int
}

func (p *SessionLengthLimit) Name() string          { return "SessionLengthLimit" }
func (p *SessionLengthLimit) Field() string         { return "" }
func (p *SessionLengthLimit) Scope() Scope          { return ScopeUser }
func (p *SessionLengthLimit) Status() Status        { return p.Stat }
func (p *SessionLengthLimit) UntypedV() interface{} { return p.Val }
func (p *SessionLengthLimit) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *SessionLengthLimit) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 172. ScreenDimDelayAC
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ScreenDimDelayAC struct {
	Stat Status
	Val  int
}

func (p *ScreenDimDelayAC) Name() string          { return "ScreenDimDelayAC" }
func (p *ScreenDimDelayAC) Field() string         { return "" }
func (p *ScreenDimDelayAC) Scope() Scope          { return ScopeUser }
func (p *ScreenDimDelayAC) Status() Status        { return p.Stat }
func (p *ScreenDimDelayAC) UntypedV() interface{} { return p.Val }
func (p *ScreenDimDelayAC) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ScreenDimDelayAC) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 173. ScreenOffDelayAC
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ScreenOffDelayAC struct {
	Stat Status
	Val  int
}

func (p *ScreenOffDelayAC) Name() string          { return "ScreenOffDelayAC" }
func (p *ScreenOffDelayAC) Field() string         { return "" }
func (p *ScreenOffDelayAC) Scope() Scope          { return ScopeUser }
func (p *ScreenOffDelayAC) Status() Status        { return p.Stat }
func (p *ScreenOffDelayAC) UntypedV() interface{} { return p.Val }
func (p *ScreenOffDelayAC) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ScreenOffDelayAC) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 174. ScreenLockDelayAC
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ScreenLockDelayAC struct {
	Stat Status
	Val  int
}

func (p *ScreenLockDelayAC) Name() string          { return "ScreenLockDelayAC" }
func (p *ScreenLockDelayAC) Field() string         { return "" }
func (p *ScreenLockDelayAC) Scope() Scope          { return ScopeUser }
func (p *ScreenLockDelayAC) Status() Status        { return p.Stat }
func (p *ScreenLockDelayAC) UntypedV() interface{} { return p.Val }
func (p *ScreenLockDelayAC) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ScreenLockDelayAC) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 175. IdleDelayAC
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type IdleDelayAC struct {
	Stat Status
	Val  int
}

func (p *IdleDelayAC) Name() string          { return "IdleDelayAC" }
func (p *IdleDelayAC) Field() string         { return "" }
func (p *IdleDelayAC) Scope() Scope          { return ScopeUser }
func (p *IdleDelayAC) Status() Status        { return p.Stat }
func (p *IdleDelayAC) UntypedV() interface{} { return p.Val }
func (p *IdleDelayAC) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *IdleDelayAC) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 176. ScreenDimDelayBattery
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ScreenDimDelayBattery struct {
	Stat Status
	Val  int
}

func (p *ScreenDimDelayBattery) Name() string          { return "ScreenDimDelayBattery" }
func (p *ScreenDimDelayBattery) Field() string         { return "" }
func (p *ScreenDimDelayBattery) Scope() Scope          { return ScopeUser }
func (p *ScreenDimDelayBattery) Status() Status        { return p.Stat }
func (p *ScreenDimDelayBattery) UntypedV() interface{} { return p.Val }
func (p *ScreenDimDelayBattery) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ScreenDimDelayBattery) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 177. ScreenOffDelayBattery
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ScreenOffDelayBattery struct {
	Stat Status
	Val  int
}

func (p *ScreenOffDelayBattery) Name() string          { return "ScreenOffDelayBattery" }
func (p *ScreenOffDelayBattery) Field() string         { return "" }
func (p *ScreenOffDelayBattery) Scope() Scope          { return ScopeUser }
func (p *ScreenOffDelayBattery) Status() Status        { return p.Stat }
func (p *ScreenOffDelayBattery) UntypedV() interface{} { return p.Val }
func (p *ScreenOffDelayBattery) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ScreenOffDelayBattery) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 178. ScreenLockDelayBattery
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ScreenLockDelayBattery struct {
	Stat Status
	Val  int
}

func (p *ScreenLockDelayBattery) Name() string          { return "ScreenLockDelayBattery" }
func (p *ScreenLockDelayBattery) Field() string         { return "" }
func (p *ScreenLockDelayBattery) Scope() Scope          { return ScopeUser }
func (p *ScreenLockDelayBattery) Status() Status        { return p.Stat }
func (p *ScreenLockDelayBattery) UntypedV() interface{} { return p.Val }
func (p *ScreenLockDelayBattery) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ScreenLockDelayBattery) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 179. IdleDelayBattery
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type IdleDelayBattery struct {
	Stat Status
	Val  int
}

func (p *IdleDelayBattery) Name() string          { return "IdleDelayBattery" }
func (p *IdleDelayBattery) Field() string         { return "" }
func (p *IdleDelayBattery) Scope() Scope          { return ScopeUser }
func (p *IdleDelayBattery) Status() Status        { return p.Stat }
func (p *IdleDelayBattery) UntypedV() interface{} { return p.Val }
func (p *IdleDelayBattery) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *IdleDelayBattery) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 180. IdleAction
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type IdleAction struct {
	Stat Status
	Val  int
}

func (p *IdleAction) Name() string          { return "IdleAction" }
func (p *IdleAction) Field() string         { return "" }
func (p *IdleAction) Scope() Scope          { return ScopeUser }
func (p *IdleAction) Status() Status        { return p.Stat }
func (p *IdleAction) UntypedV() interface{} { return p.Val }
func (p *IdleAction) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *IdleAction) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 181. LidCloseAction
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type LidCloseAction struct {
	Stat Status
	Val  int
}

func (p *LidCloseAction) Name() string          { return "LidCloseAction" }
func (p *LidCloseAction) Field() string         { return "" }
func (p *LidCloseAction) Scope() Scope          { return ScopeUser }
func (p *LidCloseAction) Status() Status        { return p.Stat }
func (p *LidCloseAction) UntypedV() interface{} { return p.Val }
func (p *LidCloseAction) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *LidCloseAction) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 182. PowerManagementUsesAudioActivity
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PowerManagementUsesAudioActivity struct {
	Stat Status
	Val  bool
}

func (p *PowerManagementUsesAudioActivity) Name() string          { return "PowerManagementUsesAudioActivity" }
func (p *PowerManagementUsesAudioActivity) Field() string         { return "" }
func (p *PowerManagementUsesAudioActivity) Scope() Scope          { return ScopeUser }
func (p *PowerManagementUsesAudioActivity) Status() Status        { return p.Stat }
func (p *PowerManagementUsesAudioActivity) UntypedV() interface{} { return p.Val }
func (p *PowerManagementUsesAudioActivity) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PowerManagementUsesAudioActivity) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 183. PowerManagementUsesVideoActivity
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PowerManagementUsesVideoActivity struct {
	Stat Status
	Val  bool
}

func (p *PowerManagementUsesVideoActivity) Name() string          { return "PowerManagementUsesVideoActivity" }
func (p *PowerManagementUsesVideoActivity) Field() string         { return "" }
func (p *PowerManagementUsesVideoActivity) Scope() Scope          { return ScopeUser }
func (p *PowerManagementUsesVideoActivity) Status() Status        { return p.Stat }
func (p *PowerManagementUsesVideoActivity) UntypedV() interface{} { return p.Val }
func (p *PowerManagementUsesVideoActivity) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PowerManagementUsesVideoActivity) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 185. DeviceAllowRedeemChromeOsRegistrationOffers
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceAllowRedeemChromeOsRegistrationOffers struct {
	Stat Status
	Val  bool
}

func (p *DeviceAllowRedeemChromeOsRegistrationOffers) Name() string {
	return "DeviceAllowRedeemChromeOsRegistrationOffers"
}
func (p *DeviceAllowRedeemChromeOsRegistrationOffers) Field() string {
	return "allow_redeem_offers.allow_redeem_offers"
}
func (p *DeviceAllowRedeemChromeOsRegistrationOffers) Scope() Scope          { return ScopeDevice }
func (p *DeviceAllowRedeemChromeOsRegistrationOffers) Status() Status        { return p.Stat }
func (p *DeviceAllowRedeemChromeOsRegistrationOffers) UntypedV() interface{} { return p.Val }
func (p *DeviceAllowRedeemChromeOsRegistrationOffers) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceAllowRedeemChromeOsRegistrationOffers) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 186. TermsOfServiceURL
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type TermsOfServiceURL struct {
	Stat Status
	Val  string
}

func (p *TermsOfServiceURL) Name() string          { return "TermsOfServiceURL" }
func (p *TermsOfServiceURL) Field() string         { return "" }
func (p *TermsOfServiceURL) Scope() Scope          { return ScopeUser }
func (p *TermsOfServiceURL) Status() Status        { return p.Stat }
func (p *TermsOfServiceURL) UntypedV() interface{} { return p.Val }
func (p *TermsOfServiceURL) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *TermsOfServiceURL) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 187. AllowDeletingBrowserHistory
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AllowDeletingBrowserHistory struct {
	Stat Status
	Val  bool
}

func (p *AllowDeletingBrowserHistory) Name() string          { return "AllowDeletingBrowserHistory" }
func (p *AllowDeletingBrowserHistory) Field() string         { return "" }
func (p *AllowDeletingBrowserHistory) Scope() Scope          { return ScopeUser }
func (p *AllowDeletingBrowserHistory) Status() Status        { return p.Stat }
func (p *AllowDeletingBrowserHistory) UntypedV() interface{} { return p.Val }
func (p *AllowDeletingBrowserHistory) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AllowDeletingBrowserHistory) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 188. ShowAccessibilityOptionsInSystemTrayMenu
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ShowAccessibilityOptionsInSystemTrayMenu struct {
	Stat Status
	Val  bool
}

func (p *ShowAccessibilityOptionsInSystemTrayMenu) Name() string {
	return "ShowAccessibilityOptionsInSystemTrayMenu"
}
func (p *ShowAccessibilityOptionsInSystemTrayMenu) Field() string         { return "" }
func (p *ShowAccessibilityOptionsInSystemTrayMenu) Scope() Scope          { return ScopeUser }
func (p *ShowAccessibilityOptionsInSystemTrayMenu) Status() Status        { return p.Stat }
func (p *ShowAccessibilityOptionsInSystemTrayMenu) UntypedV() interface{} { return p.Val }
func (p *ShowAccessibilityOptionsInSystemTrayMenu) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ShowAccessibilityOptionsInSystemTrayMenu) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 189. HideWebStoreIcon
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type HideWebStoreIcon struct {
	Stat Status
	Val  bool
}

func (p *HideWebStoreIcon) Name() string          { return "HideWebStoreIcon" }
func (p *HideWebStoreIcon) Field() string         { return "" }
func (p *HideWebStoreIcon) Scope() Scope          { return ScopeUser }
func (p *HideWebStoreIcon) Status() Status        { return p.Stat }
func (p *HideWebStoreIcon) UntypedV() interface{} { return p.Val }
func (p *HideWebStoreIcon) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *HideWebStoreIcon) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 192. UptimeLimit
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type UptimeLimit struct {
	Stat Status
	Val  int
}

func (p *UptimeLimit) Name() string          { return "UptimeLimit" }
func (p *UptimeLimit) Field() string         { return "uptime_limit.uptime_limit" }
func (p *UptimeLimit) Scope() Scope          { return ScopeDevice }
func (p *UptimeLimit) Status() Status        { return p.Stat }
func (p *UptimeLimit) UntypedV() interface{} { return p.Val }
func (p *UptimeLimit) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *UptimeLimit) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 193. RebootAfterUpdate
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RebootAfterUpdate struct {
	Stat Status
	Val  bool
}

func (p *RebootAfterUpdate) Name() string          { return "RebootAfterUpdate" }
func (p *RebootAfterUpdate) Field() string         { return "auto_update_settings.reboot_after_update" }
func (p *RebootAfterUpdate) Scope() Scope          { return ScopeDevice }
func (p *RebootAfterUpdate) Status() Status        { return p.Stat }
func (p *RebootAfterUpdate) UntypedV() interface{} { return p.Val }
func (p *RebootAfterUpdate) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *RebootAfterUpdate) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 194. DeviceLocalAccountAutoLoginId
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLocalAccountAutoLoginId struct {
	Stat Status
	Val  string
}

func (p *DeviceLocalAccountAutoLoginId) Name() string          { return "DeviceLocalAccountAutoLoginId" }
func (p *DeviceLocalAccountAutoLoginId) Field() string         { return "device_local_accounts.auto_login_id" }
func (p *DeviceLocalAccountAutoLoginId) Scope() Scope          { return ScopeDevice }
func (p *DeviceLocalAccountAutoLoginId) Status() Status        { return p.Stat }
func (p *DeviceLocalAccountAutoLoginId) UntypedV() interface{} { return p.Val }
func (p *DeviceLocalAccountAutoLoginId) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DeviceLocalAccountAutoLoginId) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 195. DeviceLocalAccountAutoLoginDelay
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLocalAccountAutoLoginDelay struct {
	Stat Status
	Val  int
}

func (p *DeviceLocalAccountAutoLoginDelay) Name() string { return "DeviceLocalAccountAutoLoginDelay" }
func (p *DeviceLocalAccountAutoLoginDelay) Field() string {
	return "device_local_accounts.auto_login_delay"
}
func (p *DeviceLocalAccountAutoLoginDelay) Scope() Scope          { return ScopeDevice }
func (p *DeviceLocalAccountAutoLoginDelay) Status() Status        { return p.Stat }
func (p *DeviceLocalAccountAutoLoginDelay) UntypedV() interface{} { return p.Val }
func (p *DeviceLocalAccountAutoLoginDelay) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceLocalAccountAutoLoginDelay) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 197. IdleWarningDelayAC
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type IdleWarningDelayAC struct {
	Stat Status
	Val  int
}

func (p *IdleWarningDelayAC) Name() string          { return "IdleWarningDelayAC" }
func (p *IdleWarningDelayAC) Field() string         { return "" }
func (p *IdleWarningDelayAC) Scope() Scope          { return ScopeUser }
func (p *IdleWarningDelayAC) Status() Status        { return p.Stat }
func (p *IdleWarningDelayAC) UntypedV() interface{} { return p.Val }
func (p *IdleWarningDelayAC) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *IdleWarningDelayAC) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 198. IdleWarningDelayBattery
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type IdleWarningDelayBattery struct {
	Stat Status
	Val  int
}

func (p *IdleWarningDelayBattery) Name() string          { return "IdleWarningDelayBattery" }
func (p *IdleWarningDelayBattery) Field() string         { return "" }
func (p *IdleWarningDelayBattery) Scope() Scope          { return ScopeUser }
func (p *IdleWarningDelayBattery) Status() Status        { return p.Stat }
func (p *IdleWarningDelayBattery) UntypedV() interface{} { return p.Val }
func (p *IdleWarningDelayBattery) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *IdleWarningDelayBattery) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 199. DeviceVariationsRestrictParameter
///////////////////////////////////////////////////////////////////////////////
type DeviceVariationsRestrictParameter struct {
	Stat Status
	Val  string
}

func (p *DeviceVariationsRestrictParameter) Name() string          { return "DeviceVariationsRestrictParameter" }
func (p *DeviceVariationsRestrictParameter) Field() string         { return "variations_parameter.parameter" }
func (p *DeviceVariationsRestrictParameter) Scope() Scope          { return ScopeDevice }
func (p *DeviceVariationsRestrictParameter) Status() Status        { return p.Stat }
func (p *DeviceVariationsRestrictParameter) UntypedV() interface{} { return p.Val }
func (p *DeviceVariationsRestrictParameter) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DeviceVariationsRestrictParameter) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 200. AttestationEnabledForUser
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AttestationEnabledForUser struct {
	Stat Status
	Val  bool
}

func (p *AttestationEnabledForUser) Name() string          { return "AttestationEnabledForUser" }
func (p *AttestationEnabledForUser) Field() string         { return "" }
func (p *AttestationEnabledForUser) Scope() Scope          { return ScopeUser }
func (p *AttestationEnabledForUser) Status() Status        { return p.Stat }
func (p *AttestationEnabledForUser) UntypedV() interface{} { return p.Val }
func (p *AttestationEnabledForUser) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AttestationEnabledForUser) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 202. DeviceLocalAccountAutoLoginBailoutEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLocalAccountAutoLoginBailoutEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLocalAccountAutoLoginBailoutEnabled) Name() string {
	return "DeviceLocalAccountAutoLoginBailoutEnabled"
}
func (p *DeviceLocalAccountAutoLoginBailoutEnabled) Field() string {
	return "device_local_accounts.enable_auto_login_bailout"
}
func (p *DeviceLocalAccountAutoLoginBailoutEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLocalAccountAutoLoginBailoutEnabled) Status() Status        { return p.Stat }
func (p *DeviceLocalAccountAutoLoginBailoutEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLocalAccountAutoLoginBailoutEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLocalAccountAutoLoginBailoutEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 203. AllowScreenWakeLocks
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AllowScreenWakeLocks struct {
	Stat Status
	Val  bool
}

func (p *AllowScreenWakeLocks) Name() string          { return "AllowScreenWakeLocks" }
func (p *AllowScreenWakeLocks) Field() string         { return "" }
func (p *AllowScreenWakeLocks) Scope() Scope          { return ScopeUser }
func (p *AllowScreenWakeLocks) Status() Status        { return p.Stat }
func (p *AllowScreenWakeLocks) UntypedV() interface{} { return p.Val }
func (p *AllowScreenWakeLocks) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AllowScreenWakeLocks) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 207. AttestationEnabledForDevice
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AttestationEnabledForDevice struct {
	Stat Status
	Val  bool
}

func (p *AttestationEnabledForDevice) Name() string { return "AttestationEnabledForDevice" }
func (p *AttestationEnabledForDevice) Field() string {
	return "attestation_settings.attestation_enabled"
}
func (p *AttestationEnabledForDevice) Scope() Scope          { return ScopeDevice }
func (p *AttestationEnabledForDevice) Status() Status        { return p.Stat }
func (p *AttestationEnabledForDevice) UntypedV() interface{} { return p.Val }
func (p *AttestationEnabledForDevice) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AttestationEnabledForDevice) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 208. AudioCaptureAllowedUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AudioCaptureAllowedUrls struct {
	Stat Status
	Val  []string
}

func (p *AudioCaptureAllowedUrls) Name() string          { return "AudioCaptureAllowedUrls" }
func (p *AudioCaptureAllowedUrls) Field() string         { return "" }
func (p *AudioCaptureAllowedUrls) Scope() Scope          { return ScopeUser }
func (p *AudioCaptureAllowedUrls) Status() Status        { return p.Stat }
func (p *AudioCaptureAllowedUrls) UntypedV() interface{} { return p.Val }
func (p *AudioCaptureAllowedUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *AudioCaptureAllowedUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 209. VideoCaptureAllowedUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type VideoCaptureAllowedUrls struct {
	Stat Status
	Val  []string
}

func (p *VideoCaptureAllowedUrls) Name() string          { return "VideoCaptureAllowedUrls" }
func (p *VideoCaptureAllowedUrls) Field() string         { return "" }
func (p *VideoCaptureAllowedUrls) Scope() Scope          { return ScopeUser }
func (p *VideoCaptureAllowedUrls) Status() Status        { return p.Stat }
func (p *VideoCaptureAllowedUrls) UntypedV() interface{} { return p.Val }
func (p *VideoCaptureAllowedUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *VideoCaptureAllowedUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 210. UserActivityScreenDimDelayScale
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type UserActivityScreenDimDelayScale struct {
	Stat Status
	Val  int
}

func (p *UserActivityScreenDimDelayScale) Name() string          { return "UserActivityScreenDimDelayScale" }
func (p *UserActivityScreenDimDelayScale) Field() string         { return "" }
func (p *UserActivityScreenDimDelayScale) Scope() Scope          { return ScopeUser }
func (p *UserActivityScreenDimDelayScale) Status() Status        { return p.Stat }
func (p *UserActivityScreenDimDelayScale) UntypedV() interface{} { return p.Val }
func (p *UserActivityScreenDimDelayScale) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *UserActivityScreenDimDelayScale) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 211. LargeCursorEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type LargeCursorEnabled struct {
	Stat Status
	Val  bool
}

func (p *LargeCursorEnabled) Name() string          { return "LargeCursorEnabled" }
func (p *LargeCursorEnabled) Field() string         { return "" }
func (p *LargeCursorEnabled) Scope() Scope          { return ScopeUser }
func (p *LargeCursorEnabled) Status() Status        { return p.Stat }
func (p *LargeCursorEnabled) UntypedV() interface{} { return p.Val }
func (p *LargeCursorEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *LargeCursorEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 212. SpokenFeedbackEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SpokenFeedbackEnabled struct {
	Stat Status
	Val  bool
}

func (p *SpokenFeedbackEnabled) Name() string          { return "SpokenFeedbackEnabled" }
func (p *SpokenFeedbackEnabled) Field() string         { return "" }
func (p *SpokenFeedbackEnabled) Scope() Scope          { return ScopeUser }
func (p *SpokenFeedbackEnabled) Status() Status        { return p.Stat }
func (p *SpokenFeedbackEnabled) UntypedV() interface{} { return p.Val }
func (p *SpokenFeedbackEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SpokenFeedbackEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 213. HighContrastEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type HighContrastEnabled struct {
	Stat Status
	Val  bool
}

func (p *HighContrastEnabled) Name() string          { return "HighContrastEnabled" }
func (p *HighContrastEnabled) Field() string         { return "" }
func (p *HighContrastEnabled) Scope() Scope          { return ScopeUser }
func (p *HighContrastEnabled) Status() Status        { return p.Stat }
func (p *HighContrastEnabled) UntypedV() interface{} { return p.Val }
func (p *HighContrastEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *HighContrastEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 214. ScreenMagnifierType
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ScreenMagnifierType struct {
	Stat Status
	Val  int
}

func (p *ScreenMagnifierType) Name() string          { return "ScreenMagnifierType" }
func (p *ScreenMagnifierType) Field() string         { return "" }
func (p *ScreenMagnifierType) Scope() Scope          { return ScopeUser }
func (p *ScreenMagnifierType) Status() Status        { return p.Stat }
func (p *ScreenMagnifierType) UntypedV() interface{} { return p.Val }
func (p *ScreenMagnifierType) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ScreenMagnifierType) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 215. DeviceLoginScreenDefaultLargeCursorEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenDefaultLargeCursorEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenDefaultLargeCursorEnabled) Name() string {
	return "DeviceLoginScreenDefaultLargeCursorEnabled"
}
func (p *DeviceLoginScreenDefaultLargeCursorEnabled) Field() string {
	return "accessibility_settings.login_screen_default_large_cursor_enabled"
}
func (p *DeviceLoginScreenDefaultLargeCursorEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenDefaultLargeCursorEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenDefaultLargeCursorEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenDefaultLargeCursorEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenDefaultLargeCursorEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 216. DeviceLoginScreenDefaultSpokenFeedbackEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenDefaultSpokenFeedbackEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenDefaultSpokenFeedbackEnabled) Name() string {
	return "DeviceLoginScreenDefaultSpokenFeedbackEnabled"
}
func (p *DeviceLoginScreenDefaultSpokenFeedbackEnabled) Field() string {
	return "accessibility_settings.login_screen_default_spoken_feedback_enabled"
}
func (p *DeviceLoginScreenDefaultSpokenFeedbackEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenDefaultSpokenFeedbackEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenDefaultSpokenFeedbackEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenDefaultSpokenFeedbackEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenDefaultSpokenFeedbackEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 217. DeviceLoginScreenDefaultHighContrastEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenDefaultHighContrastEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenDefaultHighContrastEnabled) Name() string {
	return "DeviceLoginScreenDefaultHighContrastEnabled"
}
func (p *DeviceLoginScreenDefaultHighContrastEnabled) Field() string {
	return "accessibility_settings.login_screen_default_high_contrast_enabled"
}
func (p *DeviceLoginScreenDefaultHighContrastEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenDefaultHighContrastEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenDefaultHighContrastEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenDefaultHighContrastEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenDefaultHighContrastEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 218. DeviceLoginScreenDefaultScreenMagnifierType
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenDefaultScreenMagnifierType struct {
	Stat Status
	Val  int
}

func (p *DeviceLoginScreenDefaultScreenMagnifierType) Name() string {
	return "DeviceLoginScreenDefaultScreenMagnifierType"
}
func (p *DeviceLoginScreenDefaultScreenMagnifierType) Field() string {
	return "accessibility_settings.login_screen_default_screen_magnifier_type"
}
func (p *DeviceLoginScreenDefaultScreenMagnifierType) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenDefaultScreenMagnifierType) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenDefaultScreenMagnifierType) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenDefaultScreenMagnifierType) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenDefaultScreenMagnifierType) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 220. PresentationScreenDimDelayScale
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PresentationScreenDimDelayScale struct {
	Stat Status
	Val  int
}

func (p *PresentationScreenDimDelayScale) Name() string          { return "PresentationScreenDimDelayScale" }
func (p *PresentationScreenDimDelayScale) Field() string         { return "" }
func (p *PresentationScreenDimDelayScale) Scope() Scope          { return ScopeUser }
func (p *PresentationScreenDimDelayScale) Status() Status        { return p.Stat }
func (p *PresentationScreenDimDelayScale) UntypedV() interface{} { return p.Val }
func (p *PresentationScreenDimDelayScale) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *PresentationScreenDimDelayScale) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 222. IdleActionBattery
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type IdleActionBattery struct {
	Stat Status
	Val  int
}

func (p *IdleActionBattery) Name() string          { return "IdleActionBattery" }
func (p *IdleActionBattery) Field() string         { return "" }
func (p *IdleActionBattery) Scope() Scope          { return ScopeUser }
func (p *IdleActionBattery) Status() Status        { return p.Stat }
func (p *IdleActionBattery) UntypedV() interface{} { return p.Val }
func (p *IdleActionBattery) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *IdleActionBattery) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 224. ReportDeviceNetworkInterfaces
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceNetworkInterfaces struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceNetworkInterfaces) Name() string { return "ReportDeviceNetworkInterfaces" }
func (p *ReportDeviceNetworkInterfaces) Field() string {
	return "device_reporting.report_network_interfaces"
}
func (p *ReportDeviceNetworkInterfaces) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceNetworkInterfaces) Status() Status        { return p.Stat }
func (p *ReportDeviceNetworkInterfaces) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceNetworkInterfaces) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceNetworkInterfaces) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 225. DeviceLoginScreenPowerManagement
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenPowerManagement struct {
	Stat Status
	Val  *DeviceLoginScreenPowerManagementValue
}

type DeviceLoginScreenPowerManagementValue struct {
	AC                              *RefDeviceLoginScreenPowerSettings `json:"AC"`
	Battery                         *RefDeviceLoginScreenPowerSettings `json:"Battery"`
	LidCloseAction                  string                             `json:"LidCloseAction"`
	UserActivityScreenDimDelayScale int                                `json:"UserActivityScreenDimDelayScale"`
}

func (p *DeviceLoginScreenPowerManagement) Name() string { return "DeviceLoginScreenPowerManagement" }
func (p *DeviceLoginScreenPowerManagement) Field() string {
	return "login_screen_power_management.login_screen_power_management"
}
func (p *DeviceLoginScreenPowerManagement) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenPowerManagement) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenPowerManagement) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenPowerManagement) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *DeviceLoginScreenPowerManagementValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *DeviceLoginScreenPowerManagementValue", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenPowerManagement) Equal(iface interface{}) bool {
	v, ok := iface.(*DeviceLoginScreenPowerManagementValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 226. IdleActionAC
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type IdleActionAC struct {
	Stat Status
	Val  int
}

func (p *IdleActionAC) Name() string          { return "IdleActionAC" }
func (p *IdleActionAC) Field() string         { return "" }
func (p *IdleActionAC) Scope() Scope          { return ScopeUser }
func (p *IdleActionAC) Status() Status        { return p.Stat }
func (p *IdleActionAC) UntypedV() interface{} { return p.Val }
func (p *IdleActionAC) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *IdleActionAC) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 227. ManagedBookmarks
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ManagedBookmarks struct {
	Stat Status
	Val  []*RefBookmarkType
}

func (p *ManagedBookmarks) Name() string          { return "ManagedBookmarks" }
func (p *ManagedBookmarks) Field() string         { return "" }
func (p *ManagedBookmarks) Scope() Scope          { return ScopeUser }
func (p *ManagedBookmarks) Status() Status        { return p.Stat }
func (p *ManagedBookmarks) UntypedV() interface{} { return p.Val }
func (p *ManagedBookmarks) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*RefBookmarkType
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*RefBookmarkType", m)
	}
	return v, nil
}
func (p *ManagedBookmarks) Equal(iface interface{}) bool {
	v, ok := iface.([]*RefBookmarkType)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 228. MaxInvalidationFetchDelay
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type MaxInvalidationFetchDelay struct {
	Stat Status
	Val  int
}

func (p *MaxInvalidationFetchDelay) Name() string          { return "MaxInvalidationFetchDelay" }
func (p *MaxInvalidationFetchDelay) Field() string         { return "" }
func (p *MaxInvalidationFetchDelay) Scope() Scope          { return ScopeUser }
func (p *MaxInvalidationFetchDelay) Status() Status        { return p.Stat }
func (p *MaxInvalidationFetchDelay) UntypedV() interface{} { return p.Val }
func (p *MaxInvalidationFetchDelay) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *MaxInvalidationFetchDelay) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 229. DefaultSearchProviderImageURL
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultSearchProviderImageURL struct {
	Stat Status
	Val  string
}

func (p *DefaultSearchProviderImageURL) Name() string          { return "DefaultSearchProviderImageURL" }
func (p *DefaultSearchProviderImageURL) Field() string         { return "" }
func (p *DefaultSearchProviderImageURL) Scope() Scope          { return ScopeUser }
func (p *DefaultSearchProviderImageURL) Status() Status        { return p.Stat }
func (p *DefaultSearchProviderImageURL) UntypedV() interface{} { return p.Val }
func (p *DefaultSearchProviderImageURL) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DefaultSearchProviderImageURL) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 230. DefaultSearchProviderSearchURLPostParams
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultSearchProviderSearchURLPostParams struct {
	Stat Status
	Val  string
}

func (p *DefaultSearchProviderSearchURLPostParams) Name() string {
	return "DefaultSearchProviderSearchURLPostParams"
}
func (p *DefaultSearchProviderSearchURLPostParams) Field() string         { return "" }
func (p *DefaultSearchProviderSearchURLPostParams) Scope() Scope          { return ScopeUser }
func (p *DefaultSearchProviderSearchURLPostParams) Status() Status        { return p.Stat }
func (p *DefaultSearchProviderSearchURLPostParams) UntypedV() interface{} { return p.Val }
func (p *DefaultSearchProviderSearchURLPostParams) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DefaultSearchProviderSearchURLPostParams) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 231. DefaultSearchProviderSuggestURLPostParams
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultSearchProviderSuggestURLPostParams struct {
	Stat Status
	Val  string
}

func (p *DefaultSearchProviderSuggestURLPostParams) Name() string {
	return "DefaultSearchProviderSuggestURLPostParams"
}
func (p *DefaultSearchProviderSuggestURLPostParams) Field() string         { return "" }
func (p *DefaultSearchProviderSuggestURLPostParams) Scope() Scope          { return ScopeUser }
func (p *DefaultSearchProviderSuggestURLPostParams) Status() Status        { return p.Stat }
func (p *DefaultSearchProviderSuggestURLPostParams) UntypedV() interface{} { return p.Val }
func (p *DefaultSearchProviderSuggestURLPostParams) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DefaultSearchProviderSuggestURLPostParams) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 233. DefaultSearchProviderImageURLPostParams
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultSearchProviderImageURLPostParams struct {
	Stat Status
	Val  string
}

func (p *DefaultSearchProviderImageURLPostParams) Name() string {
	return "DefaultSearchProviderImageURLPostParams"
}
func (p *DefaultSearchProviderImageURLPostParams) Field() string         { return "" }
func (p *DefaultSearchProviderImageURLPostParams) Scope() Scope          { return ScopeUser }
func (p *DefaultSearchProviderImageURLPostParams) Status() Status        { return p.Stat }
func (p *DefaultSearchProviderImageURLPostParams) UntypedV() interface{} { return p.Val }
func (p *DefaultSearchProviderImageURLPostParams) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DefaultSearchProviderImageURLPostParams) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 235. RequireOnlineRevocationChecksForLocalAnchors
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RequireOnlineRevocationChecksForLocalAnchors struct {
	Stat Status
	Val  bool
}

func (p *RequireOnlineRevocationChecksForLocalAnchors) Name() string {
	return "RequireOnlineRevocationChecksForLocalAnchors"
}
func (p *RequireOnlineRevocationChecksForLocalAnchors) Field() string         { return "" }
func (p *RequireOnlineRevocationChecksForLocalAnchors) Scope() Scope          { return ScopeUser }
func (p *RequireOnlineRevocationChecksForLocalAnchors) Status() Status        { return p.Stat }
func (p *RequireOnlineRevocationChecksForLocalAnchors) UntypedV() interface{} { return p.Val }
func (p *RequireOnlineRevocationChecksForLocalAnchors) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *RequireOnlineRevocationChecksForLocalAnchors) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 236. SystemUse24HourClock
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SystemUse24HourClock struct {
	Stat Status
	Val  bool
}

func (p *SystemUse24HourClock) Name() string          { return "SystemUse24HourClock" }
func (p *SystemUse24HourClock) Field() string         { return "use_24hour_clock.use_24hour_clock" }
func (p *SystemUse24HourClock) Scope() Scope          { return ScopeDevice }
func (p *SystemUse24HourClock) Status() Status        { return p.Stat }
func (p *SystemUse24HourClock) UntypedV() interface{} { return p.Val }
func (p *SystemUse24HourClock) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SystemUse24HourClock) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 237. DefaultSearchProviderNewTabURL
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultSearchProviderNewTabURL struct {
	Stat Status
	Val  string
}

func (p *DefaultSearchProviderNewTabURL) Name() string          { return "DefaultSearchProviderNewTabURL" }
func (p *DefaultSearchProviderNewTabURL) Field() string         { return "" }
func (p *DefaultSearchProviderNewTabURL) Scope() Scope          { return ScopeUser }
func (p *DefaultSearchProviderNewTabURL) Status() Status        { return p.Stat }
func (p *DefaultSearchProviderNewTabURL) UntypedV() interface{} { return p.Val }
func (p *DefaultSearchProviderNewTabURL) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DefaultSearchProviderNewTabURL) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 239. AttestationForContentProtectionEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AttestationForContentProtectionEnabled struct {
	Stat Status
	Val  bool
}

func (p *AttestationForContentProtectionEnabled) Name() string {
	return "AttestationForContentProtectionEnabled"
}
func (p *AttestationForContentProtectionEnabled) Field() string {
	return "attestation_settings.content_protection_enabled"
}
func (p *AttestationForContentProtectionEnabled) Scope() Scope          { return ScopeDevice }
func (p *AttestationForContentProtectionEnabled) Status() Status        { return p.Stat }
func (p *AttestationForContentProtectionEnabled) UntypedV() interface{} { return p.Val }
func (p *AttestationForContentProtectionEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AttestationForContentProtectionEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 240. FullscreenAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type FullscreenAllowed struct {
	Stat Status
	Val  bool
}

func (p *FullscreenAllowed) Name() string          { return "FullscreenAllowed" }
func (p *FullscreenAllowed) Field() string         { return "" }
func (p *FullscreenAllowed) Scope() Scope          { return ScopeUser }
func (p *FullscreenAllowed) Status() Status        { return p.Stat }
func (p *FullscreenAllowed) UntypedV() interface{} { return p.Val }
func (p *FullscreenAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *FullscreenAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 242. DeviceAutoUpdateP2PEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceAutoUpdateP2PEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceAutoUpdateP2PEnabled) Name() string          { return "DeviceAutoUpdateP2PEnabled" }
func (p *DeviceAutoUpdateP2PEnabled) Field() string         { return "auto_update_settings.p2p_enabled" }
func (p *DeviceAutoUpdateP2PEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceAutoUpdateP2PEnabled) Status() Status        { return p.Stat }
func (p *DeviceAutoUpdateP2PEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceAutoUpdateP2PEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceAutoUpdateP2PEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 243. DeviceUpdateHttpDownloadsEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceUpdateHttpDownloadsEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceUpdateHttpDownloadsEnabled) Name() string { return "DeviceUpdateHttpDownloadsEnabled" }
func (p *DeviceUpdateHttpDownloadsEnabled) Field() string {
	return "auto_update_settings.http_downloads_enabled"
}
func (p *DeviceUpdateHttpDownloadsEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceUpdateHttpDownloadsEnabled) Status() Status        { return p.Stat }
func (p *DeviceUpdateHttpDownloadsEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceUpdateHttpDownloadsEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceUpdateHttpDownloadsEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 244. ChromeOsMultiProfileUserBehavior
// This policy has a default value of primary-only.
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ChromeOsMultiProfileUserBehavior struct {
	Stat Status
	Val  string
}

func (p *ChromeOsMultiProfileUserBehavior) Name() string          { return "ChromeOsMultiProfileUserBehavior" }
func (p *ChromeOsMultiProfileUserBehavior) Field() string         { return "" }
func (p *ChromeOsMultiProfileUserBehavior) Scope() Scope          { return ScopeUser }
func (p *ChromeOsMultiProfileUserBehavior) Status() Status        { return p.Stat }
func (p *ChromeOsMultiProfileUserBehavior) UntypedV() interface{} { return p.Val }
func (p *ChromeOsMultiProfileUserBehavior) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *ChromeOsMultiProfileUserBehavior) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 247. WaitForInitialUserActivity
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type WaitForInitialUserActivity struct {
	Stat Status
	Val  bool
}

func (p *WaitForInitialUserActivity) Name() string          { return "WaitForInitialUserActivity" }
func (p *WaitForInitialUserActivity) Field() string         { return "" }
func (p *WaitForInitialUserActivity) Scope() Scope          { return ScopeUser }
func (p *WaitForInitialUserActivity) Status() Status        { return p.Stat }
func (p *WaitForInitialUserActivity) UntypedV() interface{} { return p.Val }
func (p *WaitForInitialUserActivity) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *WaitForInitialUserActivity) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 248. ReportDeviceUsers
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceUsers struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceUsers) Name() string          { return "ReportDeviceUsers" }
func (p *ReportDeviceUsers) Field() string         { return "device_reporting.report_users" }
func (p *ReportDeviceUsers) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceUsers) Status() Status        { return p.Stat }
func (p *ReportDeviceUsers) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceUsers) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceUsers) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 249. UserAvatarImage
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type UserAvatarImage struct {
	Stat Status
	Val  *UserAvatarImageValue
}

type UserAvatarImageValue struct {
	Hash string `json:"hash"`
	Url  string `json:"url"`
}

func (p *UserAvatarImage) Name() string          { return "UserAvatarImage" }
func (p *UserAvatarImage) Field() string         { return "" }
func (p *UserAvatarImage) Scope() Scope          { return ScopeUser }
func (p *UserAvatarImage) Status() Status        { return p.Stat }
func (p *UserAvatarImage) UntypedV() interface{} { return p.Val }
func (p *UserAvatarImage) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *UserAvatarImageValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *UserAvatarImageValue", m)
	}
	return v, nil
}
func (p *UserAvatarImage) Equal(iface interface{}) bool {
	v, ok := iface.(*UserAvatarImageValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 250. DeviceLocalAccountPromptForNetworkWhenOffline
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLocalAccountPromptForNetworkWhenOffline struct {
	Stat Status
	Val  bool
}

func (p *DeviceLocalAccountPromptForNetworkWhenOffline) Name() string {
	return "DeviceLocalAccountPromptForNetworkWhenOffline"
}
func (p *DeviceLocalAccountPromptForNetworkWhenOffline) Field() string {
	return "device_local_accounts.prompt_for_network_when_offline"
}
func (p *DeviceLocalAccountPromptForNetworkWhenOffline) Scope() Scope          { return ScopeDevice }
func (p *DeviceLocalAccountPromptForNetworkWhenOffline) Status() Status        { return p.Stat }
func (p *DeviceLocalAccountPromptForNetworkWhenOffline) UntypedV() interface{} { return p.Val }
func (p *DeviceLocalAccountPromptForNetworkWhenOffline) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLocalAccountPromptForNetworkWhenOffline) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 254. SAMLOfflineSigninTimeLimit
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SAMLOfflineSigninTimeLimit struct {
	Stat Status
	Val  int
}

func (p *SAMLOfflineSigninTimeLimit) Name() string          { return "SAMLOfflineSigninTimeLimit" }
func (p *SAMLOfflineSigninTimeLimit) Field() string         { return "" }
func (p *SAMLOfflineSigninTimeLimit) Scope() Scope          { return ScopeUser }
func (p *SAMLOfflineSigninTimeLimit) Status() Status        { return p.Stat }
func (p *SAMLOfflineSigninTimeLimit) UntypedV() interface{} { return p.Val }
func (p *SAMLOfflineSigninTimeLimit) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *SAMLOfflineSigninTimeLimit) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 255. VirtualKeyboardEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type VirtualKeyboardEnabled struct {
	Stat Status
	Val  bool
}

func (p *VirtualKeyboardEnabled) Name() string          { return "VirtualKeyboardEnabled" }
func (p *VirtualKeyboardEnabled) Field() string         { return "" }
func (p *VirtualKeyboardEnabled) Scope() Scope          { return ScopeUser }
func (p *VirtualKeyboardEnabled) Status() Status        { return p.Stat }
func (p *VirtualKeyboardEnabled) UntypedV() interface{} { return p.Val }
func (p *VirtualKeyboardEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *VirtualKeyboardEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 256. DeviceLoginScreenDefaultVirtualKeyboardEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenDefaultVirtualKeyboardEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenDefaultVirtualKeyboardEnabled) Name() string {
	return "DeviceLoginScreenDefaultVirtualKeyboardEnabled"
}
func (p *DeviceLoginScreenDefaultVirtualKeyboardEnabled) Field() string {
	return "accessibility_settings.login_screen_default_virtual_keyboard_enabled"
}
func (p *DeviceLoginScreenDefaultVirtualKeyboardEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenDefaultVirtualKeyboardEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenDefaultVirtualKeyboardEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenDefaultVirtualKeyboardEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenDefaultVirtualKeyboardEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 258. PowerManagementIdleSettings
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PowerManagementIdleSettings struct {
	Stat Status
	Val  *PowerManagementIdleSettingsValue
}

type PowerManagementIdleSettingsValue struct {
	AC      *RefPowerManagementDelays `json:"AC"`
	Battery *RefPowerManagementDelays `json:"Battery"`
}

func (p *PowerManagementIdleSettings) Name() string          { return "PowerManagementIdleSettings" }
func (p *PowerManagementIdleSettings) Field() string         { return "" }
func (p *PowerManagementIdleSettings) Scope() Scope          { return ScopeUser }
func (p *PowerManagementIdleSettings) Status() Status        { return p.Stat }
func (p *PowerManagementIdleSettings) UntypedV() interface{} { return p.Val }
func (p *PowerManagementIdleSettings) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *PowerManagementIdleSettingsValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *PowerManagementIdleSettingsValue", m)
	}
	return v, nil
}
func (p *PowerManagementIdleSettings) Equal(iface interface{}) bool {
	v, ok := iface.(*PowerManagementIdleSettingsValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 259. ScreenLockDelays
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ScreenLockDelays struct {
	Stat Status
	Val  *ScreenLockDelaysValue
}

type ScreenLockDelaysValue struct {
	AC      int `json:"AC"`
	Battery int `json:"Battery"`
}

func (p *ScreenLockDelays) Name() string          { return "ScreenLockDelays" }
func (p *ScreenLockDelays) Field() string         { return "" }
func (p *ScreenLockDelays) Scope() Scope          { return ScopeUser }
func (p *ScreenLockDelays) Status() Status        { return p.Stat }
func (p *ScreenLockDelays) UntypedV() interface{} { return p.Val }
func (p *ScreenLockDelays) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *ScreenLockDelaysValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *ScreenLockDelaysValue", m)
	}
	return v, nil
}
func (p *ScreenLockDelays) Equal(iface interface{}) bool {
	v, ok := iface.(*ScreenLockDelaysValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 260. KeyboardDefaultToFunctionKeys
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type KeyboardDefaultToFunctionKeys struct {
	Stat Status
	Val  bool
}

func (p *KeyboardDefaultToFunctionKeys) Name() string          { return "KeyboardDefaultToFunctionKeys" }
func (p *KeyboardDefaultToFunctionKeys) Field() string         { return "" }
func (p *KeyboardDefaultToFunctionKeys) Scope() Scope          { return ScopeUser }
func (p *KeyboardDefaultToFunctionKeys) Status() Status        { return p.Stat }
func (p *KeyboardDefaultToFunctionKeys) UntypedV() interface{} { return p.Val }
func (p *KeyboardDefaultToFunctionKeys) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *KeyboardDefaultToFunctionKeys) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 261. WPADQuickCheckEnabled
///////////////////////////////////////////////////////////////////////////////
type WPADQuickCheckEnabled struct {
	Stat Status
	Val  bool
}

func (p *WPADQuickCheckEnabled) Name() string          { return "WPADQuickCheckEnabled" }
func (p *WPADQuickCheckEnabled) Field() string         { return "" }
func (p *WPADQuickCheckEnabled) Scope() Scope          { return ScopeUser }
func (p *WPADQuickCheckEnabled) Status() Status        { return p.Stat }
func (p *WPADQuickCheckEnabled) UntypedV() interface{} { return p.Val }
func (p *WPADQuickCheckEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *WPADQuickCheckEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 262. WallpaperImage
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type WallpaperImage struct {
	Stat Status
	Val  *WallpaperImageValue
}

type WallpaperImageValue struct {
	Hash string `json:"hash"`
	Url  string `json:"url"`
}

func (p *WallpaperImage) Name() string          { return "WallpaperImage" }
func (p *WallpaperImage) Field() string         { return "" }
func (p *WallpaperImage) Scope() Scope          { return ScopeUser }
func (p *WallpaperImage) Status() Status        { return p.Stat }
func (p *WallpaperImage) UntypedV() interface{} { return p.Val }
func (p *WallpaperImage) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *WallpaperImageValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *WallpaperImageValue", m)
	}
	return v, nil
}
func (p *WallpaperImage) Equal(iface interface{}) bool {
	v, ok := iface.(*WallpaperImageValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 263. RemoteAccessHostAllowRelayedConnection
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RemoteAccessHostAllowRelayedConnection struct {
	Stat Status
	Val  bool
}

func (p *RemoteAccessHostAllowRelayedConnection) Name() string {
	return "RemoteAccessHostAllowRelayedConnection"
}
func (p *RemoteAccessHostAllowRelayedConnection) Field() string         { return "" }
func (p *RemoteAccessHostAllowRelayedConnection) Scope() Scope          { return ScopeUser }
func (p *RemoteAccessHostAllowRelayedConnection) Status() Status        { return p.Stat }
func (p *RemoteAccessHostAllowRelayedConnection) UntypedV() interface{} { return p.Val }
func (p *RemoteAccessHostAllowRelayedConnection) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *RemoteAccessHostAllowRelayedConnection) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 264. RemoteAccessHostUdpPortRange
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RemoteAccessHostUdpPortRange struct {
	Stat Status
	Val  string
}

func (p *RemoteAccessHostUdpPortRange) Name() string          { return "RemoteAccessHostUdpPortRange" }
func (p *RemoteAccessHostUdpPortRange) Field() string         { return "" }
func (p *RemoteAccessHostUdpPortRange) Scope() Scope          { return ScopeUser }
func (p *RemoteAccessHostUdpPortRange) Status() Status        { return p.Stat }
func (p *RemoteAccessHostUdpPortRange) UntypedV() interface{} { return p.Val }
func (p *RemoteAccessHostUdpPortRange) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *RemoteAccessHostUdpPortRange) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 266. DeviceBlockDevmode
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceBlockDevmode struct {
	Stat Status
	Val  bool
}

func (p *DeviceBlockDevmode) Name() string          { return "DeviceBlockDevmode" }
func (p *DeviceBlockDevmode) Field() string         { return "system_settings.block_devmode" }
func (p *DeviceBlockDevmode) Scope() Scope          { return ScopeDevice }
func (p *DeviceBlockDevmode) Status() Status        { return p.Stat }
func (p *DeviceBlockDevmode) UntypedV() interface{} { return p.Val }
func (p *DeviceBlockDevmode) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceBlockDevmode) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 268. RegisteredProtocolHandlers
///////////////////////////////////////////////////////////////////////////////
type RegisteredProtocolHandlers struct {
	Stat Status
	Val  []*RegisteredProtocolHandlersValue
}

type RegisteredProtocolHandlersValue struct {
	Default  bool   `json:"default"`
	Protocol string `json:"protocol"`
	Url      string `json:"url"`
}

func (p *RegisteredProtocolHandlers) Name() string          { return "RegisteredProtocolHandlers" }
func (p *RegisteredProtocolHandlers) Field() string         { return "" }
func (p *RegisteredProtocolHandlers) Scope() Scope          { return ScopeUser }
func (p *RegisteredProtocolHandlers) Status() Status        { return p.Stat }
func (p *RegisteredProtocolHandlers) UntypedV() interface{} { return p.Val }
func (p *RegisteredProtocolHandlers) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*RegisteredProtocolHandlersValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*RegisteredProtocolHandlersValue", m)
	}
	return v, nil
}
func (p *RegisteredProtocolHandlers) Equal(iface interface{}) bool {
	v, ok := iface.([]*RegisteredProtocolHandlersValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 269. TouchVirtualKeyboardEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type TouchVirtualKeyboardEnabled struct {
	Stat Status
	Val  bool
}

func (p *TouchVirtualKeyboardEnabled) Name() string          { return "TouchVirtualKeyboardEnabled" }
func (p *TouchVirtualKeyboardEnabled) Field() string         { return "" }
func (p *TouchVirtualKeyboardEnabled) Scope() Scope          { return ScopeUser }
func (p *TouchVirtualKeyboardEnabled) Status() Status        { return p.Stat }
func (p *TouchVirtualKeyboardEnabled) UntypedV() interface{} { return p.Val }
func (p *TouchVirtualKeyboardEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *TouchVirtualKeyboardEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 271. DeviceTransferSAMLCookies
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceTransferSAMLCookies struct {
	Stat Status
	Val  bool
}

func (p *DeviceTransferSAMLCookies) Name() string          { return "DeviceTransferSAMLCookies" }
func (p *DeviceTransferSAMLCookies) Field() string         { return "saml_settings.transfer_saml_cookies" }
func (p *DeviceTransferSAMLCookies) Scope() Scope          { return ScopeDevice }
func (p *DeviceTransferSAMLCookies) Status() Status        { return p.Stat }
func (p *DeviceTransferSAMLCookies) UntypedV() interface{} { return p.Val }
func (p *DeviceTransferSAMLCookies) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceTransferSAMLCookies) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 272. EasyUnlockAllowed
// This policy has a default value of False.
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type EasyUnlockAllowed struct {
	Stat Status
	Val  bool
}

func (p *EasyUnlockAllowed) Name() string          { return "EasyUnlockAllowed" }
func (p *EasyUnlockAllowed) Field() string         { return "" }
func (p *EasyUnlockAllowed) Scope() Scope          { return ScopeUser }
func (p *EasyUnlockAllowed) Status() Status        { return p.Stat }
func (p *EasyUnlockAllowed) UntypedV() interface{} { return p.Val }
func (p *EasyUnlockAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *EasyUnlockAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 273. NetworkPredictionOptions
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type NetworkPredictionOptions struct {
	Stat Status
	Val  int
}

func (p *NetworkPredictionOptions) Name() string          { return "NetworkPredictionOptions" }
func (p *NetworkPredictionOptions) Field() string         { return "" }
func (p *NetworkPredictionOptions) Scope() Scope          { return ScopeUser }
func (p *NetworkPredictionOptions) Status() Status        { return p.Stat }
func (p *NetworkPredictionOptions) UntypedV() interface{} { return p.Val }
func (p *NetworkPredictionOptions) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *NetworkPredictionOptions) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 274. SessionLocales
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SessionLocales struct {
	Stat Status
	Val  []string
}

func (p *SessionLocales) Name() string          { return "SessionLocales" }
func (p *SessionLocales) Field() string         { return "" }
func (p *SessionLocales) Scope() Scope          { return ScopeUser }
func (p *SessionLocales) Status() Status        { return p.Stat }
func (p *SessionLocales) UntypedV() interface{} { return p.Val }
func (p *SessionLocales) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *SessionLocales) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 275. BrowserGuestModeEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type BrowserGuestModeEnabled struct {
	Stat Status
	Val  bool
}

func (p *BrowserGuestModeEnabled) Name() string          { return "BrowserGuestModeEnabled" }
func (p *BrowserGuestModeEnabled) Field() string         { return "" }
func (p *BrowserGuestModeEnabled) Scope() Scope          { return ScopeUser }
func (p *BrowserGuestModeEnabled) Status() Status        { return p.Stat }
func (p *BrowserGuestModeEnabled) UntypedV() interface{} { return p.Val }
func (p *BrowserGuestModeEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *BrowserGuestModeEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 276. BrowserAddPersonEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type BrowserAddPersonEnabled struct {
	Stat Status
	Val  bool
}

func (p *BrowserAddPersonEnabled) Name() string          { return "BrowserAddPersonEnabled" }
func (p *BrowserAddPersonEnabled) Field() string         { return "" }
func (p *BrowserAddPersonEnabled) Scope() Scope          { return ScopeUser }
func (p *BrowserAddPersonEnabled) Status() Status        { return p.Stat }
func (p *BrowserAddPersonEnabled) UntypedV() interface{} { return p.Val }
func (p *BrowserAddPersonEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *BrowserAddPersonEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 278. ExtensionSettings
// This policy can be modified without rebooting.
// See https://www.chromium.org/administrators/policy-list-3/extension-settings-full for full schema.
///////////////////////////////////////////////////////////////////////////////
type ExtensionSettings struct {
	Stat Status
	Val  map[string]*ExtensionSettingsValue
}

type ExtensionSettingsValue struct {
	AllowedTypes          []string `json:"allowed_types,omitempty"`
	BlockedInstallMessage string   `json:"blocked_install_message"`
	BlockedPermissions    []string `json:"blocked_permissions,omitempty"`
	InstallSources        []string `json:"install_sources,omitempty"`
	InstallationMode      string   `json:"installation_mode"`
	RuntimeAllowedHosts   []string `json:"runtime_allowed_hosts,omitempty"`
	RuntimeBlockedHosts   []string `json:"runtime_blocked_hosts,omitempty"`
}

func (p *ExtensionSettings) Name() string          { return "ExtensionSettings" }
func (p *ExtensionSettings) Field() string         { return "" }
func (p *ExtensionSettings) Scope() Scope          { return ScopeUser }
func (p *ExtensionSettings) Status() Status        { return p.Stat }
func (p *ExtensionSettings) UntypedV() interface{} { return p.Val }
func (p *ExtensionSettings) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v map[string]*ExtensionSettingsValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as map[string]*ExtensionSettingsValue", m)
	}
	return v, nil
}
func (p *ExtensionSettings) Equal(iface interface{}) bool {
	v, ok := iface.(map[string]*ExtensionSettingsValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 279. SSLVersionMin
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SSLVersionMin struct {
	Stat Status
	Val  string
}

func (p *SSLVersionMin) Name() string          { return "SSLVersionMin" }
func (p *SSLVersionMin) Field() string         { return "" }
func (p *SSLVersionMin) Scope() Scope          { return ScopeUser }
func (p *SSLVersionMin) Status() Status        { return p.Stat }
func (p *SSLVersionMin) UntypedV() interface{} { return p.Val }
func (p *SSLVersionMin) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *SSLVersionMin) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 282. ForceGoogleSafeSearch
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ForceGoogleSafeSearch struct {
	Stat Status
	Val  bool
}

func (p *ForceGoogleSafeSearch) Name() string          { return "ForceGoogleSafeSearch" }
func (p *ForceGoogleSafeSearch) Field() string         { return "" }
func (p *ForceGoogleSafeSearch) Scope() Scope          { return ScopeUser }
func (p *ForceGoogleSafeSearch) Status() Status        { return p.Stat }
func (p *ForceGoogleSafeSearch) UntypedV() interface{} { return p.Val }
func (p *ForceGoogleSafeSearch) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ForceGoogleSafeSearch) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 283. ForceYouTubeSafetyMode
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ForceYouTubeSafetyMode struct {
	Stat Status
	Val  bool
}

func (p *ForceYouTubeSafetyMode) Name() string          { return "ForceYouTubeSafetyMode" }
func (p *ForceYouTubeSafetyMode) Field() string         { return "" }
func (p *ForceYouTubeSafetyMode) Scope() Scope          { return ScopeUser }
func (p *ForceYouTubeSafetyMode) Status() Status        { return p.Stat }
func (p *ForceYouTubeSafetyMode) UntypedV() interface{} { return p.Val }
func (p *ForceYouTubeSafetyMode) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ForceYouTubeSafetyMode) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 284. DeviceRebootOnShutdown
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceRebootOnShutdown struct {
	Stat Status
	Val  bool
}

func (p *DeviceRebootOnShutdown) Name() string          { return "DeviceRebootOnShutdown" }
func (p *DeviceRebootOnShutdown) Field() string         { return "reboot_on_shutdown.reboot_on_shutdown" }
func (p *DeviceRebootOnShutdown) Scope() Scope          { return ScopeDevice }
func (p *DeviceRebootOnShutdown) Status() Status        { return p.Stat }
func (p *DeviceRebootOnShutdown) UntypedV() interface{} { return p.Val }
func (p *DeviceRebootOnShutdown) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceRebootOnShutdown) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 290. ReportDeviceHardwareStatus
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceHardwareStatus struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceHardwareStatus) Name() string          { return "ReportDeviceHardwareStatus" }
func (p *ReportDeviceHardwareStatus) Field() string         { return "device_reporting.report_hardware_status" }
func (p *ReportDeviceHardwareStatus) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceHardwareStatus) Status() Status        { return p.Stat }
func (p *ReportDeviceHardwareStatus) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceHardwareStatus) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceHardwareStatus) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 291. ReportDeviceSessionStatus
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceSessionStatus struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceSessionStatus) Name() string          { return "ReportDeviceSessionStatus" }
func (p *ReportDeviceSessionStatus) Field() string         { return "device_reporting.report_session_status" }
func (p *ReportDeviceSessionStatus) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceSessionStatus) Status() Status        { return p.Stat }
func (p *ReportDeviceSessionStatus) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceSessionStatus) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceSessionStatus) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 292. ReportUploadFrequency
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportUploadFrequency struct {
	Stat Status
	Val  int
}

func (p *ReportUploadFrequency) Name() string          { return "ReportUploadFrequency" }
func (p *ReportUploadFrequency) Field() string         { return "device_reporting.device_status_frequency" }
func (p *ReportUploadFrequency) Scope() Scope          { return ScopeDevice }
func (p *ReportUploadFrequency) Status() Status        { return p.Stat }
func (p *ReportUploadFrequency) UntypedV() interface{} { return p.Val }
func (p *ReportUploadFrequency) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ReportUploadFrequency) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 293. HeartbeatEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type HeartbeatEnabled struct {
	Stat Status
	Val  bool
}

func (p *HeartbeatEnabled) Name() string          { return "HeartbeatEnabled" }
func (p *HeartbeatEnabled) Field() string         { return "device_heartbeat_settings.heartbeat_enabled" }
func (p *HeartbeatEnabled) Scope() Scope          { return ScopeDevice }
func (p *HeartbeatEnabled) Status() Status        { return p.Stat }
func (p *HeartbeatEnabled) UntypedV() interface{} { return p.Val }
func (p *HeartbeatEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *HeartbeatEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 294. HeartbeatFrequency
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type HeartbeatFrequency struct {
	Stat Status
	Val  int
}

func (p *HeartbeatFrequency) Name() string          { return "HeartbeatFrequency" }
func (p *HeartbeatFrequency) Field() string         { return "device_heartbeat_settings.heartbeat_frequency" }
func (p *HeartbeatFrequency) Scope() Scope          { return ScopeDevice }
func (p *HeartbeatFrequency) Status() Status        { return p.Stat }
func (p *HeartbeatFrequency) UntypedV() interface{} { return p.Val }
func (p *HeartbeatFrequency) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *HeartbeatFrequency) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 295. CaptivePortalAuthenticationIgnoresProxy
// This policy has a default value of False.
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CaptivePortalAuthenticationIgnoresProxy struct {
	Stat Status
	Val  bool
}

func (p *CaptivePortalAuthenticationIgnoresProxy) Name() string {
	return "CaptivePortalAuthenticationIgnoresProxy"
}
func (p *CaptivePortalAuthenticationIgnoresProxy) Field() string         { return "" }
func (p *CaptivePortalAuthenticationIgnoresProxy) Scope() Scope          { return ScopeUser }
func (p *CaptivePortalAuthenticationIgnoresProxy) Status() Status        { return p.Stat }
func (p *CaptivePortalAuthenticationIgnoresProxy) UntypedV() interface{} { return p.Val }
func (p *CaptivePortalAuthenticationIgnoresProxy) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *CaptivePortalAuthenticationIgnoresProxy) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 296. ExtensionCacheSize
///////////////////////////////////////////////////////////////////////////////
type ExtensionCacheSize struct {
	Stat Status
	Val  int
}

func (p *ExtensionCacheSize) Name() string          { return "ExtensionCacheSize" }
func (p *ExtensionCacheSize) Field() string         { return "extension_cache_size.extension_cache_size" }
func (p *ExtensionCacheSize) Scope() Scope          { return ScopeDevice }
func (p *ExtensionCacheSize) Status() Status        { return p.Stat }
func (p *ExtensionCacheSize) UntypedV() interface{} { return p.Val }
func (p *ExtensionCacheSize) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ExtensionCacheSize) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 297. DeviceLoginScreenDomainAutoComplete
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenDomainAutoComplete struct {
	Stat Status
	Val  string
}

func (p *DeviceLoginScreenDomainAutoComplete) Name() string {
	return "DeviceLoginScreenDomainAutoComplete"
}
func (p *DeviceLoginScreenDomainAutoComplete) Field() string {
	return "login_screen_domain_auto_complete.login_screen_domain_auto_complete"
}
func (p *DeviceLoginScreenDomainAutoComplete) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenDomainAutoComplete) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenDomainAutoComplete) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenDomainAutoComplete) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenDomainAutoComplete) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 298. ForceMaximizeOnFirstRun
///////////////////////////////////////////////////////////////////////////////
type ForceMaximizeOnFirstRun struct {
	Stat Status
	Val  bool
}

func (p *ForceMaximizeOnFirstRun) Name() string          { return "ForceMaximizeOnFirstRun" }
func (p *ForceMaximizeOnFirstRun) Field() string         { return "" }
func (p *ForceMaximizeOnFirstRun) Scope() Scope          { return ScopeUser }
func (p *ForceMaximizeOnFirstRun) Status() Status        { return p.Stat }
func (p *ForceMaximizeOnFirstRun) UntypedV() interface{} { return p.Val }
func (p *ForceMaximizeOnFirstRun) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ForceMaximizeOnFirstRun) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 300. SSLErrorOverrideAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SSLErrorOverrideAllowed struct {
	Stat Status
	Val  bool
}

func (p *SSLErrorOverrideAllowed) Name() string          { return "SSLErrorOverrideAllowed" }
func (p *SSLErrorOverrideAllowed) Field() string         { return "" }
func (p *SSLErrorOverrideAllowed) Scope() Scope          { return ScopeUser }
func (p *SSLErrorOverrideAllowed) Status() Status        { return p.Stat }
func (p *SSLErrorOverrideAllowed) UntypedV() interface{} { return p.Val }
func (p *SSLErrorOverrideAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SSLErrorOverrideAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 301. QuicAllowed
///////////////////////////////////////////////////////////////////////////////
type QuicAllowed struct {
	Stat Status
	Val  bool
}

func (p *QuicAllowed) Name() string          { return "QuicAllowed" }
func (p *QuicAllowed) Field() string         { return "" }
func (p *QuicAllowed) Scope() Scope          { return ScopeUser }
func (p *QuicAllowed) Status() Status        { return p.Stat }
func (p *QuicAllowed) UntypedV() interface{} { return p.Val }
func (p *QuicAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *QuicAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 302. KeyPermissions
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type KeyPermissions struct {
	Stat Status
	Val  map[string]*KeyPermissionsValue
}

type KeyPermissionsValue struct {
	AllowCorporateKeyUsage bool `json:"allowCorporateKeyUsage"`
}

func (p *KeyPermissions) Name() string          { return "KeyPermissions" }
func (p *KeyPermissions) Field() string         { return "" }
func (p *KeyPermissions) Scope() Scope          { return ScopeUser }
func (p *KeyPermissions) Status() Status        { return p.Stat }
func (p *KeyPermissions) UntypedV() interface{} { return p.Val }
func (p *KeyPermissions) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v map[string]*KeyPermissionsValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as map[string]*KeyPermissionsValue", m)
	}
	return v, nil
}
func (p *KeyPermissions) Equal(iface interface{}) bool {
	v, ok := iface.(map[string]*KeyPermissionsValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 306. LogUploadEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type LogUploadEnabled struct {
	Stat Status
	Val  bool
}

func (p *LogUploadEnabled) Name() string { return "LogUploadEnabled" }
func (p *LogUploadEnabled) Field() string {
	return "device_log_upload_settings.system_log_upload_enabled"
}
func (p *LogUploadEnabled) Scope() Scope          { return ScopeDevice }
func (p *LogUploadEnabled) Status() Status        { return p.Stat }
func (p *LogUploadEnabled) UntypedV() interface{} { return p.Val }
func (p *LogUploadEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *LogUploadEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 307. UnifiedDesktopEnabledByDefault
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type UnifiedDesktopEnabledByDefault struct {
	Stat Status
	Val  bool
}

func (p *UnifiedDesktopEnabledByDefault) Name() string          { return "UnifiedDesktopEnabledByDefault" }
func (p *UnifiedDesktopEnabledByDefault) Field() string         { return "" }
func (p *UnifiedDesktopEnabledByDefault) Scope() Scope          { return ScopeUser }
func (p *UnifiedDesktopEnabledByDefault) Status() Status        { return p.Stat }
func (p *UnifiedDesktopEnabledByDefault) UntypedV() interface{} { return p.Val }
func (p *UnifiedDesktopEnabledByDefault) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *UnifiedDesktopEnabledByDefault) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 308. DefaultPrinterSelection
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultPrinterSelection struct {
	Stat Status
	Val  string
}

func (p *DefaultPrinterSelection) Name() string          { return "DefaultPrinterSelection" }
func (p *DefaultPrinterSelection) Field() string         { return "" }
func (p *DefaultPrinterSelection) Scope() Scope          { return ScopeUser }
func (p *DefaultPrinterSelection) Status() Status        { return p.Stat }
func (p *DefaultPrinterSelection) UntypedV() interface{} { return p.Val }
func (p *DefaultPrinterSelection) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DefaultPrinterSelection) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 309. AllowDinosaurEasterEgg
// This policy has a default value of False.
///////////////////////////////////////////////////////////////////////////////
type AllowDinosaurEasterEgg struct {
	Stat Status
	Val  bool
}

func (p *AllowDinosaurEasterEgg) Name() string          { return "AllowDinosaurEasterEgg" }
func (p *AllowDinosaurEasterEgg) Field() string         { return "" }
func (p *AllowDinosaurEasterEgg) Scope() Scope          { return ScopeUser }
func (p *AllowDinosaurEasterEgg) Status() Status        { return p.Stat }
func (p *AllowDinosaurEasterEgg) UntypedV() interface{} { return p.Val }
func (p *AllowDinosaurEasterEgg) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AllowDinosaurEasterEgg) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 311. DisplayRotationDefault
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DisplayRotationDefault struct {
	Stat Status
	Val  int
}

func (p *DisplayRotationDefault) Name() string { return "DisplayRotationDefault" }
func (p *DisplayRotationDefault) Field() string {
	return "display_rotation_default.display_rotation_default"
}
func (p *DisplayRotationDefault) Scope() Scope          { return ScopeDevice }
func (p *DisplayRotationDefault) Status() Status        { return p.Stat }
func (p *DisplayRotationDefault) UntypedV() interface{} { return p.Val }
func (p *DisplayRotationDefault) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DisplayRotationDefault) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 316. RemoteAccessHostClientDomain
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RemoteAccessHostClientDomain struct {
	Stat Status
	Val  string
}

func (p *RemoteAccessHostClientDomain) Name() string          { return "RemoteAccessHostClientDomain" }
func (p *RemoteAccessHostClientDomain) Field() string         { return "" }
func (p *RemoteAccessHostClientDomain) Scope() Scope          { return ScopeUser }
func (p *RemoteAccessHostClientDomain) Status() Status        { return p.Stat }
func (p *RemoteAccessHostClientDomain) UntypedV() interface{} { return p.Val }
func (p *RemoteAccessHostClientDomain) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *RemoteAccessHostClientDomain) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 317. ArcEnabled
// This policy has a default value of False.
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ArcEnabled struct {
	Stat Status
	Val  bool
}

func (p *ArcEnabled) Name() string          { return "ArcEnabled" }
func (p *ArcEnabled) Field() string         { return "" }
func (p *ArcEnabled) Scope() Scope          { return ScopeUser }
func (p *ArcEnabled) Status() Status        { return p.Stat }
func (p *ArcEnabled) UntypedV() interface{} { return p.Val }
func (p *ArcEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ArcEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 318. ArcPolicy
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ArcPolicy struct {
	Stat Status
	Val  *ArcPolicyValue
}

type Application struct {
	PackageName             string                 `json:"packageName"`
	InstallType             string                 `json:"installType"`
	DefaultPermissionPolicy string                 `json:"defaultPermissionPolicy"`
	ManagedConfiguration    map[string]interface{} `json:"managedConfiguration"`
}

type ArcPolicyValue struct {
	Applications []Application `json:"applications"`
}

func (p *ArcPolicy) Name() string          { return "ArcPolicy" }
func (p *ArcPolicy) Field() string         { return "" }
func (p *ArcPolicy) Scope() Scope          { return ScopeUser }
func (p *ArcPolicy) Status() Status        { return p.Stat }
func (p *ArcPolicy) UntypedV() interface{} { return p.Val }
func (p *ArcPolicy) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	var value ArcPolicyValue
	if err := json.Unmarshal([]byte(v), &value); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as ArcPolicyValue", m)
	}
	return value, nil
}
func (p *ArcPolicy) Equal(iface interface{}) bool {
	v, ok := iface.(*ArcPolicyValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 319. AllowKioskAppControlChromeVersion
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AllowKioskAppControlChromeVersion struct {
	Stat Status
	Val  bool
}

func (p *AllowKioskAppControlChromeVersion) Name() string { return "AllowKioskAppControlChromeVersion" }
func (p *AllowKioskAppControlChromeVersion) Field() string {
	return "allow_kiosk_app_control_chrome_version.allow_kiosk_app_control_chrome_version"
}
func (p *AllowKioskAppControlChromeVersion) Scope() Scope          { return ScopeDevice }
func (p *AllowKioskAppControlChromeVersion) Status() Status        { return p.Stat }
func (p *AllowKioskAppControlChromeVersion) UntypedV() interface{} { return p.Val }
func (p *AllowKioskAppControlChromeVersion) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AllowKioskAppControlChromeVersion) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 320. DefaultWebBluetoothGuardSetting
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultWebBluetoothGuardSetting struct {
	Stat Status
	Val  int
}

func (p *DefaultWebBluetoothGuardSetting) Name() string          { return "DefaultWebBluetoothGuardSetting" }
func (p *DefaultWebBluetoothGuardSetting) Field() string         { return "" }
func (p *DefaultWebBluetoothGuardSetting) Scope() Scope          { return ScopeUser }
func (p *DefaultWebBluetoothGuardSetting) Status() Status        { return p.Stat }
func (p *DefaultWebBluetoothGuardSetting) UntypedV() interface{} { return p.Val }
func (p *DefaultWebBluetoothGuardSetting) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DefaultWebBluetoothGuardSetting) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 321. LoginAuthenticationBehavior
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type LoginAuthenticationBehavior struct {
	Stat Status
	Val  int
}

func (p *LoginAuthenticationBehavior) Name() string { return "LoginAuthenticationBehavior" }
func (p *LoginAuthenticationBehavior) Field() string {
	return "login_authentication_behavior.login_authentication_behavior"
}
func (p *LoginAuthenticationBehavior) Scope() Scope          { return ScopeDevice }
func (p *LoginAuthenticationBehavior) Status() Status        { return p.Stat }
func (p *LoginAuthenticationBehavior) UntypedV() interface{} { return p.Val }
func (p *LoginAuthenticationBehavior) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *LoginAuthenticationBehavior) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 322. UsbDetachableWhitelist
///////////////////////////////////////////////////////////////////////////////
type UsbDetachableWhitelist struct {
	Stat Status
	Val  []*RefUsbDeviceId
}

func (p *UsbDetachableWhitelist) Name() string          { return "UsbDetachableWhitelist" }
func (p *UsbDetachableWhitelist) Field() string         { return "usb_detachable_whitelist.id" }
func (p *UsbDetachableWhitelist) Scope() Scope          { return ScopeDevice }
func (p *UsbDetachableWhitelist) Status() Status        { return p.Stat }
func (p *UsbDetachableWhitelist) UntypedV() interface{} { return p.Val }
func (p *UsbDetachableWhitelist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*RefUsbDeviceId
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*RefUsbDeviceId", m)
	}
	return v, nil
}
func (p *UsbDetachableWhitelist) Equal(iface interface{}) bool {
	v, ok := iface.([]*RefUsbDeviceId)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 323. DeviceAllowBluetooth
///////////////////////////////////////////////////////////////////////////////
type DeviceAllowBluetooth struct {
	Stat Status
	Val  bool
}

func (p *DeviceAllowBluetooth) Name() string          { return "DeviceAllowBluetooth" }
func (p *DeviceAllowBluetooth) Field() string         { return "allow_bluetooth.allow_bluetooth" }
func (p *DeviceAllowBluetooth) Scope() Scope          { return ScopeDevice }
func (p *DeviceAllowBluetooth) Status() Status        { return p.Stat }
func (p *DeviceAllowBluetooth) UntypedV() interface{} { return p.Val }
func (p *DeviceAllowBluetooth) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceAllowBluetooth) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 324. SuppressUnsupportedOSWarning
///////////////////////////////////////////////////////////////////////////////
type SuppressUnsupportedOSWarning struct {
	Stat Status
	Val  bool
}

func (p *SuppressUnsupportedOSWarning) Name() string          { return "SuppressUnsupportedOSWarning" }
func (p *SuppressUnsupportedOSWarning) Field() string         { return "" }
func (p *SuppressUnsupportedOSWarning) Scope() Scope          { return ScopeUser }
func (p *SuppressUnsupportedOSWarning) Status() Status        { return p.Stat }
func (p *SuppressUnsupportedOSWarning) UntypedV() interface{} { return p.Val }
func (p *SuppressUnsupportedOSWarning) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SuppressUnsupportedOSWarning) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 325. DeviceQuirksDownloadEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceQuirksDownloadEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceQuirksDownloadEnabled) Name() string { return "DeviceQuirksDownloadEnabled" }
func (p *DeviceQuirksDownloadEnabled) Field() string {
	return "quirks_download_enabled.quirks_download_enabled"
}
func (p *DeviceQuirksDownloadEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceQuirksDownloadEnabled) Status() Status        { return p.Stat }
func (p *DeviceQuirksDownloadEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceQuirksDownloadEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceQuirksDownloadEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 326. SystemTimezoneAutomaticDetection
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SystemTimezoneAutomaticDetection struct {
	Stat Status
	Val  int
}

func (p *SystemTimezoneAutomaticDetection) Name() string { return "SystemTimezoneAutomaticDetection" }
func (p *SystemTimezoneAutomaticDetection) Field() string {
	return "system_timezone.timezone_detection_type"
}
func (p *SystemTimezoneAutomaticDetection) Scope() Scope          { return ScopeDevice }
func (p *SystemTimezoneAutomaticDetection) Status() Status        { return p.Stat }
func (p *SystemTimezoneAutomaticDetection) UntypedV() interface{} { return p.Val }
func (p *SystemTimezoneAutomaticDetection) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *SystemTimezoneAutomaticDetection) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 327. TaskManagerEndProcessEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type TaskManagerEndProcessEnabled struct {
	Stat Status
	Val  bool
}

func (p *TaskManagerEndProcessEnabled) Name() string          { return "TaskManagerEndProcessEnabled" }
func (p *TaskManagerEndProcessEnabled) Field() string         { return "" }
func (p *TaskManagerEndProcessEnabled) Scope() Scope          { return ScopeUser }
func (p *TaskManagerEndProcessEnabled) Status() Status        { return p.Stat }
func (p *TaskManagerEndProcessEnabled) UntypedV() interface{} { return p.Val }
func (p *TaskManagerEndProcessEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *TaskManagerEndProcessEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 328. LoginVideoCaptureAllowedUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type LoginVideoCaptureAllowedUrls struct {
	Stat Status
	Val  []string
}

func (p *LoginVideoCaptureAllowedUrls) Name() string          { return "LoginVideoCaptureAllowedUrls" }
func (p *LoginVideoCaptureAllowedUrls) Field() string         { return "login_video_capture_allowed_urls.urls" }
func (p *LoginVideoCaptureAllowedUrls) Scope() Scope          { return ScopeDevice }
func (p *LoginVideoCaptureAllowedUrls) Status() Status        { return p.Stat }
func (p *LoginVideoCaptureAllowedUrls) UntypedV() interface{} { return p.Val }
func (p *LoginVideoCaptureAllowedUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *LoginVideoCaptureAllowedUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 329. AllowScreenLock
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AllowScreenLock struct {
	Stat Status
	Val  bool
}

func (p *AllowScreenLock) Name() string          { return "AllowScreenLock" }
func (p *AllowScreenLock) Field() string         { return "" }
func (p *AllowScreenLock) Scope() Scope          { return ScopeUser }
func (p *AllowScreenLock) Status() Status        { return p.Stat }
func (p *AllowScreenLock) UntypedV() interface{} { return p.Val }
func (p *AllowScreenLock) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AllowScreenLock) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 330. ArcCertificatesSyncMode
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ArcCertificatesSyncMode struct {
	Stat Status
	Val  int
}

func (p *ArcCertificatesSyncMode) Name() string          { return "ArcCertificatesSyncMode" }
func (p *ArcCertificatesSyncMode) Field() string         { return "" }
func (p *ArcCertificatesSyncMode) Scope() Scope          { return ScopeUser }
func (p *ArcCertificatesSyncMode) Status() Status        { return p.Stat }
func (p *ArcCertificatesSyncMode) UntypedV() interface{} { return p.Val }
func (p *ArcCertificatesSyncMode) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ArcCertificatesSyncMode) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 331. AllowedDomainsForApps
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AllowedDomainsForApps struct {
	Stat Status
	Val  string
}

func (p *AllowedDomainsForApps) Name() string          { return "AllowedDomainsForApps" }
func (p *AllowedDomainsForApps) Field() string         { return "" }
func (p *AllowedDomainsForApps) Scope() Scope          { return ScopeUser }
func (p *AllowedDomainsForApps) Status() Status        { return p.Stat }
func (p *AllowedDomainsForApps) UntypedV() interface{} { return p.Val }
func (p *AllowedDomainsForApps) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *AllowedDomainsForApps) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 333. EnableMediaRouter
///////////////////////////////////////////////////////////////////////////////
type EnableMediaRouter struct {
	Stat Status
	Val  bool
}

func (p *EnableMediaRouter) Name() string          { return "EnableMediaRouter" }
func (p *EnableMediaRouter) Field() string         { return "" }
func (p *EnableMediaRouter) Scope() Scope          { return ScopeUser }
func (p *EnableMediaRouter) Status() Status        { return p.Stat }
func (p *EnableMediaRouter) UntypedV() interface{} { return p.Val }
func (p *EnableMediaRouter) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *EnableMediaRouter) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 335. CertificateTransparencyEnforcementDisabledForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CertificateTransparencyEnforcementDisabledForUrls struct {
	Stat Status
	Val  []string
}

func (p *CertificateTransparencyEnforcementDisabledForUrls) Name() string {
	return "CertificateTransparencyEnforcementDisabledForUrls"
}
func (p *CertificateTransparencyEnforcementDisabledForUrls) Field() string         { return "" }
func (p *CertificateTransparencyEnforcementDisabledForUrls) Scope() Scope          { return ScopeUser }
func (p *CertificateTransparencyEnforcementDisabledForUrls) Status() Status        { return p.Stat }
func (p *CertificateTransparencyEnforcementDisabledForUrls) UntypedV() interface{} { return p.Val }
func (p *CertificateTransparencyEnforcementDisabledForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *CertificateTransparencyEnforcementDisabledForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 336. DeviceLoginScreenExtensions
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenExtensions struct {
	Stat Status
	Val  []string
}

func (p *DeviceLoginScreenExtensions) Name() string { return "DeviceLoginScreenExtensions" }
func (p *DeviceLoginScreenExtensions) Field() string {
	return "device_login_screen_extensions.device_login_screen_extensions"
}
func (p *DeviceLoginScreenExtensions) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenExtensions) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenExtensions) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenExtensions) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenExtensions) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 339. WebRtcUdpPortRange
///////////////////////////////////////////////////////////////////////////////
type WebRtcUdpPortRange struct {
	Stat Status
	Val  string
}

func (p *WebRtcUdpPortRange) Name() string          { return "WebRtcUdpPortRange" }
func (p *WebRtcUdpPortRange) Field() string         { return "" }
func (p *WebRtcUdpPortRange) Scope() Scope          { return ScopeUser }
func (p *WebRtcUdpPortRange) Status() Status        { return p.Stat }
func (p *WebRtcUdpPortRange) UntypedV() interface{} { return p.Val }
func (p *WebRtcUdpPortRange) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *WebRtcUdpPortRange) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 342. ComponentUpdatesEnabled
///////////////////////////////////////////////////////////////////////////////
type ComponentUpdatesEnabled struct {
	Stat Status
	Val  bool
}

func (p *ComponentUpdatesEnabled) Name() string          { return "ComponentUpdatesEnabled" }
func (p *ComponentUpdatesEnabled) Field() string         { return "" }
func (p *ComponentUpdatesEnabled) Scope() Scope          { return ScopeUser }
func (p *ComponentUpdatesEnabled) Status() Status        { return p.Stat }
func (p *ComponentUpdatesEnabled) UntypedV() interface{} { return p.Val }
func (p *ComponentUpdatesEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ComponentUpdatesEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 343. ExternalStorageReadOnly
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ExternalStorageReadOnly struct {
	Stat Status
	Val  bool
}

func (p *ExternalStorageReadOnly) Name() string          { return "ExternalStorageReadOnly" }
func (p *ExternalStorageReadOnly) Field() string         { return "" }
func (p *ExternalStorageReadOnly) Scope() Scope          { return ScopeUser }
func (p *ExternalStorageReadOnly) Status() Status        { return p.Stat }
func (p *ExternalStorageReadOnly) UntypedV() interface{} { return p.Val }
func (p *ExternalStorageReadOnly) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ExternalStorageReadOnly) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 348. ForceYouTubeRestrict
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ForceYouTubeRestrict struct {
	Stat Status
	Val  int
}

func (p *ForceYouTubeRestrict) Name() string          { return "ForceYouTubeRestrict" }
func (p *ForceYouTubeRestrict) Field() string         { return "" }
func (p *ForceYouTubeRestrict) Scope() Scope          { return ScopeUser }
func (p *ForceYouTubeRestrict) Status() Status        { return p.Stat }
func (p *ForceYouTubeRestrict) UntypedV() interface{} { return p.Val }
func (p *ForceYouTubeRestrict) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ForceYouTubeRestrict) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 349. ReportArcStatusEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportArcStatusEnabled struct {
	Stat Status
	Val  bool
}

func (p *ReportArcStatusEnabled) Name() string          { return "ReportArcStatusEnabled" }
func (p *ReportArcStatusEnabled) Field() string         { return "" }
func (p *ReportArcStatusEnabled) Scope() Scope          { return ScopeUser }
func (p *ReportArcStatusEnabled) Status() Status        { return p.Stat }
func (p *ReportArcStatusEnabled) UntypedV() interface{} { return p.Val }
func (p *ReportArcStatusEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportArcStatusEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 353. QuickUnlockTimeout
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type QuickUnlockTimeout struct {
	Stat Status
	Val  int
}

func (p *QuickUnlockTimeout) Name() string          { return "QuickUnlockTimeout" }
func (p *QuickUnlockTimeout) Field() string         { return "" }
func (p *QuickUnlockTimeout) Scope() Scope          { return ScopeUser }
func (p *QuickUnlockTimeout) Status() Status        { return p.Stat }
func (p *QuickUnlockTimeout) UntypedV() interface{} { return p.Val }
func (p *QuickUnlockTimeout) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *QuickUnlockTimeout) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 354. PinUnlockMinimumLength
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PinUnlockMinimumLength struct {
	Stat Status
	Val  int
}

func (p *PinUnlockMinimumLength) Name() string          { return "PinUnlockMinimumLength" }
func (p *PinUnlockMinimumLength) Field() string         { return "" }
func (p *PinUnlockMinimumLength) Scope() Scope          { return ScopeUser }
func (p *PinUnlockMinimumLength) Status() Status        { return p.Stat }
func (p *PinUnlockMinimumLength) UntypedV() interface{} { return p.Val }
func (p *PinUnlockMinimumLength) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *PinUnlockMinimumLength) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 355. PinUnlockMaximumLength
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PinUnlockMaximumLength struct {
	Stat Status
	Val  int
}

func (p *PinUnlockMaximumLength) Name() string          { return "PinUnlockMaximumLength" }
func (p *PinUnlockMaximumLength) Field() string         { return "" }
func (p *PinUnlockMaximumLength) Scope() Scope          { return ScopeUser }
func (p *PinUnlockMaximumLength) Status() Status        { return p.Stat }
func (p *PinUnlockMaximumLength) UntypedV() interface{} { return p.Val }
func (p *PinUnlockMaximumLength) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *PinUnlockMaximumLength) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 356. PinUnlockWeakPinsAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PinUnlockWeakPinsAllowed struct {
	Stat Status
	Val  bool
}

func (p *PinUnlockWeakPinsAllowed) Name() string          { return "PinUnlockWeakPinsAllowed" }
func (p *PinUnlockWeakPinsAllowed) Field() string         { return "" }
func (p *PinUnlockWeakPinsAllowed) Scope() Scope          { return ScopeUser }
func (p *PinUnlockWeakPinsAllowed) Status() Status        { return p.Stat }
func (p *PinUnlockWeakPinsAllowed) UntypedV() interface{} { return p.Val }
func (p *PinUnlockWeakPinsAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PinUnlockWeakPinsAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 357. DeviceWallpaperImage
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceWallpaperImage struct {
	Stat Status
	Val  *DeviceWallpaperImageValue
}

type DeviceWallpaperImageValue struct {
	Hash string `json:"hash"`
	Url  string `json:"url"`
}

func (p *DeviceWallpaperImage) Name() string          { return "DeviceWallpaperImage" }
func (p *DeviceWallpaperImage) Field() string         { return "device_wallpaper_image.device_wallpaper_image" }
func (p *DeviceWallpaperImage) Scope() Scope          { return ScopeDevice }
func (p *DeviceWallpaperImage) Status() Status        { return p.Stat }
func (p *DeviceWallpaperImage) UntypedV() interface{} { return p.Val }
func (p *DeviceWallpaperImage) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *DeviceWallpaperImageValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *DeviceWallpaperImageValue", m)
	}
	return v, nil
}
func (p *DeviceWallpaperImage) Equal(iface interface{}) bool {
	v, ok := iface.(*DeviceWallpaperImageValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 360. NewTabPageLocation
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type NewTabPageLocation struct {
	Stat Status
	Val  string
}

func (p *NewTabPageLocation) Name() string          { return "NewTabPageLocation" }
func (p *NewTabPageLocation) Field() string         { return "" }
func (p *NewTabPageLocation) Scope() Scope          { return ScopeUser }
func (p *NewTabPageLocation) Status() Status        { return p.Stat }
func (p *NewTabPageLocation) UntypedV() interface{} { return p.Val }
func (p *NewTabPageLocation) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *NewTabPageLocation) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 362. ShowCastIconInToolbar
///////////////////////////////////////////////////////////////////////////////
type ShowCastIconInToolbar struct {
	Stat Status
	Val  bool
}

func (p *ShowCastIconInToolbar) Name() string          { return "ShowCastIconInToolbar" }
func (p *ShowCastIconInToolbar) Field() string         { return "" }
func (p *ShowCastIconInToolbar) Scope() Scope          { return ScopeUser }
func (p *ShowCastIconInToolbar) Status() Status        { return p.Stat }
func (p *ShowCastIconInToolbar) UntypedV() interface{} { return p.Val }
func (p *ShowCastIconInToolbar) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ShowCastIconInToolbar) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 364. DeviceLoginScreenLocales
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenLocales struct {
	Stat Status
	Val  []string
}

func (p *DeviceLoginScreenLocales) Name() string          { return "DeviceLoginScreenLocales" }
func (p *DeviceLoginScreenLocales) Field() string         { return "login_screen_locales.login_screen_locales" }
func (p *DeviceLoginScreenLocales) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenLocales) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenLocales) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenLocales) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenLocales) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 365. DeviceLoginScreenInputMethods
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenInputMethods struct {
	Stat Status
	Val  []string
}

func (p *DeviceLoginScreenInputMethods) Name() string { return "DeviceLoginScreenInputMethods" }
func (p *DeviceLoginScreenInputMethods) Field() string {
	return "login_screen_input_methods.login_screen_input_methods"
}
func (p *DeviceLoginScreenInputMethods) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenInputMethods) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenInputMethods) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenInputMethods) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenInputMethods) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 367. InstantTetheringAllowed
// This policy has a default value of False.
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type InstantTetheringAllowed struct {
	Stat Status
	Val  bool
}

func (p *InstantTetheringAllowed) Name() string          { return "InstantTetheringAllowed" }
func (p *InstantTetheringAllowed) Field() string         { return "" }
func (p *InstantTetheringAllowed) Scope() Scope          { return ScopeUser }
func (p *InstantTetheringAllowed) Status() Status        { return p.Stat }
func (p *InstantTetheringAllowed) UntypedV() interface{} { return p.Val }
func (p *InstantTetheringAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *InstantTetheringAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 368. RemoteAccessHostDomainList
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RemoteAccessHostDomainList struct {
	Stat Status
	Val  []string
}

func (p *RemoteAccessHostDomainList) Name() string          { return "RemoteAccessHostDomainList" }
func (p *RemoteAccessHostDomainList) Field() string         { return "" }
func (p *RemoteAccessHostDomainList) Scope() Scope          { return ScopeUser }
func (p *RemoteAccessHostDomainList) Status() Status        { return p.Stat }
func (p *RemoteAccessHostDomainList) UntypedV() interface{} { return p.Val }
func (p *RemoteAccessHostDomainList) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *RemoteAccessHostDomainList) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 369. RemoteAccessHostClientDomainList
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RemoteAccessHostClientDomainList struct {
	Stat Status
	Val  []string
}

func (p *RemoteAccessHostClientDomainList) Name() string          { return "RemoteAccessHostClientDomainList" }
func (p *RemoteAccessHostClientDomainList) Field() string         { return "" }
func (p *RemoteAccessHostClientDomainList) Scope() Scope          { return ScopeUser }
func (p *RemoteAccessHostClientDomainList) Status() Status        { return p.Stat }
func (p *RemoteAccessHostClientDomainList) UntypedV() interface{} { return p.Val }
func (p *RemoteAccessHostClientDomainList) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *RemoteAccessHostClientDomainList) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 371. DownloadRestrictions
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DownloadRestrictions struct {
	Stat Status
	Val  int
}

func (p *DownloadRestrictions) Name() string          { return "DownloadRestrictions" }
func (p *DownloadRestrictions) Field() string         { return "" }
func (p *DownloadRestrictions) Scope() Scope          { return ScopeUser }
func (p *DownloadRestrictions) Status() Status        { return p.Stat }
func (p *DownloadRestrictions) UntypedV() interface{} { return p.Val }
func (p *DownloadRestrictions) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DownloadRestrictions) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 372. DeviceSecondFactorAuthentication
///////////////////////////////////////////////////////////////////////////////
type DeviceSecondFactorAuthentication struct {
	Stat Status
	Val  int
}

func (p *DeviceSecondFactorAuthentication) Name() string { return "DeviceSecondFactorAuthentication" }
func (p *DeviceSecondFactorAuthentication) Field() string {
	return "device_second_factor_authentication.mode"
}
func (p *DeviceSecondFactorAuthentication) Scope() Scope          { return ScopeDevice }
func (p *DeviceSecondFactorAuthentication) Status() Status        { return p.Stat }
func (p *DeviceSecondFactorAuthentication) UntypedV() interface{} { return p.Val }
func (p *DeviceSecondFactorAuthentication) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceSecondFactorAuthentication) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 378. CastReceiverEnabled
// This policy has a default value of False.
// This policy can be modified without rebooting.
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type CastReceiverEnabled struct {
	Stat Status
	Val  bool
}

func (p *CastReceiverEnabled) Name() string          { return "CastReceiverEnabled" }
func (p *CastReceiverEnabled) Field() string         { return "" }
func (p *CastReceiverEnabled) Scope() Scope          { return ScopeUser }
func (p *CastReceiverEnabled) Status() Status        { return p.Stat }
func (p *CastReceiverEnabled) UntypedV() interface{} { return p.Val }
func (p *CastReceiverEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *CastReceiverEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 379. CastReceiverName
// This policy can be modified without rebooting.
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type CastReceiverName struct {
	Stat Status
	Val  string
}

func (p *CastReceiverName) Name() string          { return "CastReceiverName" }
func (p *CastReceiverName) Field() string         { return "cast_receiver_name.name" }
func (p *CastReceiverName) Scope() Scope          { return ScopeDevice }
func (p *CastReceiverName) Status() Status        { return p.Stat }
func (p *CastReceiverName) UntypedV() interface{} { return p.Val }
func (p *CastReceiverName) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *CastReceiverName) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 386. DeviceNativePrinters
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceNativePrinters struct {
	Stat Status
	Val  *DeviceNativePrintersValue
}

type DeviceNativePrintersValue struct {
	Hash string `json:"hash"`
	Url  string `json:"url"`
}

func (p *DeviceNativePrinters) Name() string          { return "DeviceNativePrinters" }
func (p *DeviceNativePrinters) Field() string         { return "native_device_printers.external_policy" }
func (p *DeviceNativePrinters) Scope() Scope          { return ScopeDevice }
func (p *DeviceNativePrinters) Status() Status        { return p.Stat }
func (p *DeviceNativePrinters) UntypedV() interface{} { return p.Val }
func (p *DeviceNativePrinters) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *DeviceNativePrintersValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *DeviceNativePrintersValue", m)
	}
	return v, nil
}
func (p *DeviceNativePrinters) Equal(iface interface{}) bool {
	v, ok := iface.(*DeviceNativePrintersValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 387. DeviceNativePrintersAccessMode
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceNativePrintersAccessMode struct {
	Stat Status
	Val  int
}

func (p *DeviceNativePrintersAccessMode) Name() string { return "DeviceNativePrintersAccessMode" }
func (p *DeviceNativePrintersAccessMode) Field() string {
	return "native_device_printers_access_mode.access_mode"
}
func (p *DeviceNativePrintersAccessMode) Scope() Scope          { return ScopeDevice }
func (p *DeviceNativePrintersAccessMode) Status() Status        { return p.Stat }
func (p *DeviceNativePrintersAccessMode) UntypedV() interface{} { return p.Val }
func (p *DeviceNativePrintersAccessMode) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceNativePrintersAccessMode) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 388. DeviceNativePrintersBlacklist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceNativePrintersBlacklist struct {
	Stat Status
	Val  []string
}

func (p *DeviceNativePrintersBlacklist) Name() string { return "DeviceNativePrintersBlacklist" }
func (p *DeviceNativePrintersBlacklist) Field() string {
	return "native_device_printers_blacklist.blacklist"
}
func (p *DeviceNativePrintersBlacklist) Scope() Scope          { return ScopeDevice }
func (p *DeviceNativePrintersBlacklist) Status() Status        { return p.Stat }
func (p *DeviceNativePrintersBlacklist) UntypedV() interface{} { return p.Val }
func (p *DeviceNativePrintersBlacklist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DeviceNativePrintersBlacklist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 389. DeviceNativePrintersWhitelist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceNativePrintersWhitelist struct {
	Stat Status
	Val  []string
}

func (p *DeviceNativePrintersWhitelist) Name() string { return "DeviceNativePrintersWhitelist" }
func (p *DeviceNativePrintersWhitelist) Field() string {
	return "native_device_printers_whitelist.whitelist"
}
func (p *DeviceNativePrintersWhitelist) Scope() Scope          { return ScopeDevice }
func (p *DeviceNativePrintersWhitelist) Status() Status        { return p.Stat }
func (p *DeviceNativePrintersWhitelist) UntypedV() interface{} { return p.Val }
func (p *DeviceNativePrintersWhitelist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DeviceNativePrintersWhitelist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 392. AutofillCreditCardEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AutofillCreditCardEnabled struct {
	Stat Status
	Val  bool
}

func (p *AutofillCreditCardEnabled) Name() string          { return "AutofillCreditCardEnabled" }
func (p *AutofillCreditCardEnabled) Field() string         { return "" }
func (p *AutofillCreditCardEnabled) Scope() Scope          { return ScopeUser }
func (p *AutofillCreditCardEnabled) Status() Status        { return p.Stat }
func (p *AutofillCreditCardEnabled) UntypedV() interface{} { return p.Val }
func (p *AutofillCreditCardEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AutofillCreditCardEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 393. NtlmV2Enabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type NtlmV2Enabled struct {
	Stat Status
	Val  bool
}

func (p *NtlmV2Enabled) Name() string          { return "NtlmV2Enabled" }
func (p *NtlmV2Enabled) Field() string         { return "" }
func (p *NtlmV2Enabled) Scope() Scope          { return ScopeUser }
func (p *NtlmV2Enabled) Status() Status        { return p.Stat }
func (p *NtlmV2Enabled) UntypedV() interface{} { return p.Val }
func (p *NtlmV2Enabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *NtlmV2Enabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 395. PromptForDownloadLocation
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PromptForDownloadLocation struct {
	Stat Status
	Val  bool
}

func (p *PromptForDownloadLocation) Name() string          { return "PromptForDownloadLocation" }
func (p *PromptForDownloadLocation) Field() string         { return "" }
func (p *PromptForDownloadLocation) Scope() Scope          { return ScopeUser }
func (p *PromptForDownloadLocation) Status() Status        { return p.Stat }
func (p *PromptForDownloadLocation) UntypedV() interface{} { return p.Val }
func (p *PromptForDownloadLocation) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PromptForDownloadLocation) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 396. DeviceLoginScreenAutoSelectCertificateForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenAutoSelectCertificateForUrls struct {
	Stat Status
	Val  []string
}

func (p *DeviceLoginScreenAutoSelectCertificateForUrls) Name() string {
	return "DeviceLoginScreenAutoSelectCertificateForUrls"
}
func (p *DeviceLoginScreenAutoSelectCertificateForUrls) Field() string {
	return "device_login_screen_auto_select_certificate_for_urls.login_screen_auto_select_certificate_rules"
}
func (p *DeviceLoginScreenAutoSelectCertificateForUrls) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenAutoSelectCertificateForUrls) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenAutoSelectCertificateForUrls) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenAutoSelectCertificateForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenAutoSelectCertificateForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 397. UnaffiliatedArcAllowed
///////////////////////////////////////////////////////////////////////////////
type UnaffiliatedArcAllowed struct {
	Stat Status
	Val  bool
}

func (p *UnaffiliatedArcAllowed) Name() string { return "UnaffiliatedArcAllowed" }
func (p *UnaffiliatedArcAllowed) Field() string {
	return "unaffiliated_arc_allowed.unaffiliated_arc_allowed"
}
func (p *UnaffiliatedArcAllowed) Scope() Scope          { return ScopeDevice }
func (p *UnaffiliatedArcAllowed) Status() Status        { return p.Stat }
func (p *UnaffiliatedArcAllowed) UntypedV() interface{} { return p.Val }
func (p *UnaffiliatedArcAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *UnaffiliatedArcAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 398. IsolateOrigins
///////////////////////////////////////////////////////////////////////////////
type IsolateOrigins struct {
	Stat Status
	Val  string
}

func (p *IsolateOrigins) Name() string          { return "IsolateOrigins" }
func (p *IsolateOrigins) Field() string         { return "" }
func (p *IsolateOrigins) Scope() Scope          { return ScopeUser }
func (p *IsolateOrigins) Status() Status        { return p.Stat }
func (p *IsolateOrigins) UntypedV() interface{} { return p.Val }
func (p *IsolateOrigins) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *IsolateOrigins) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 399. SitePerProcess
///////////////////////////////////////////////////////////////////////////////
type SitePerProcess struct {
	Stat Status
	Val  bool
}

func (p *SitePerProcess) Name() string          { return "SitePerProcess" }
func (p *SitePerProcess) Field() string         { return "" }
func (p *SitePerProcess) Scope() Scope          { return ScopeUser }
func (p *SitePerProcess) Status() Status        { return p.Stat }
func (p *SitePerProcess) UntypedV() interface{} { return p.Val }
func (p *SitePerProcess) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SitePerProcess) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 401. DefaultDownloadDirectory
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultDownloadDirectory struct {
	Stat Status
	Val  string
}

func (p *DefaultDownloadDirectory) Name() string          { return "DefaultDownloadDirectory" }
func (p *DefaultDownloadDirectory) Field() string         { return "" }
func (p *DefaultDownloadDirectory) Scope() Scope          { return ScopeUser }
func (p *DefaultDownloadDirectory) Status() Status        { return p.Stat }
func (p *DefaultDownloadDirectory) UntypedV() interface{} { return p.Val }
func (p *DefaultDownloadDirectory) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DefaultDownloadDirectory) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 402. SecurityKeyPermitAttestation
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SecurityKeyPermitAttestation struct {
	Stat Status
	Val  []string
}

func (p *SecurityKeyPermitAttestation) Name() string          { return "SecurityKeyPermitAttestation" }
func (p *SecurityKeyPermitAttestation) Field() string         { return "" }
func (p *SecurityKeyPermitAttestation) Scope() Scope          { return ScopeUser }
func (p *SecurityKeyPermitAttestation) Status() Status        { return p.Stat }
func (p *SecurityKeyPermitAttestation) UntypedV() interface{} { return p.Val }
func (p *SecurityKeyPermitAttestation) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *SecurityKeyPermitAttestation) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 403. DeviceHostnameTemplate
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceHostnameTemplate struct {
	Stat Status
	Val  string
}

func (p *DeviceHostnameTemplate) Name() string          { return "DeviceHostnameTemplate" }
func (p *DeviceHostnameTemplate) Field() string         { return "network_hostname.device_hostname_template" }
func (p *DeviceHostnameTemplate) Scope() Scope          { return ScopeDevice }
func (p *DeviceHostnameTemplate) Status() Status        { return p.Stat }
func (p *DeviceHostnameTemplate) UntypedV() interface{} { return p.Val }
func (p *DeviceHostnameTemplate) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DeviceHostnameTemplate) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 404. AbusiveExperienceInterventionEnforce
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AbusiveExperienceInterventionEnforce struct {
	Stat Status
	Val  bool
}

func (p *AbusiveExperienceInterventionEnforce) Name() string {
	return "AbusiveExperienceInterventionEnforce"
}
func (p *AbusiveExperienceInterventionEnforce) Field() string         { return "" }
func (p *AbusiveExperienceInterventionEnforce) Scope() Scope          { return ScopeUser }
func (p *AbusiveExperienceInterventionEnforce) Status() Status        { return p.Stat }
func (p *AbusiveExperienceInterventionEnforce) UntypedV() interface{} { return p.Val }
func (p *AbusiveExperienceInterventionEnforce) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AbusiveExperienceInterventionEnforce) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 405. SpellcheckLanguage
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SpellcheckLanguage struct {
	Stat Status
	Val  []string
}

func (p *SpellcheckLanguage) Name() string          { return "SpellcheckLanguage" }
func (p *SpellcheckLanguage) Field() string         { return "" }
func (p *SpellcheckLanguage) Scope() Scope          { return ScopeUser }
func (p *SpellcheckLanguage) Status() Status        { return p.Stat }
func (p *SpellcheckLanguage) UntypedV() interface{} { return p.Val }
func (p *SpellcheckLanguage) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *SpellcheckLanguage) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 406. SecondaryGoogleAccountSigninAllowed
///////////////////////////////////////////////////////////////////////////////
type SecondaryGoogleAccountSigninAllowed struct {
	Stat Status
	Val  bool
}

func (p *SecondaryGoogleAccountSigninAllowed) Name() string {
	return "SecondaryGoogleAccountSigninAllowed"
}
func (p *SecondaryGoogleAccountSigninAllowed) Field() string         { return "" }
func (p *SecondaryGoogleAccountSigninAllowed) Scope() Scope          { return ScopeUser }
func (p *SecondaryGoogleAccountSigninAllowed) Status() Status        { return p.Stat }
func (p *SecondaryGoogleAccountSigninAllowed) UntypedV() interface{} { return p.Val }
func (p *SecondaryGoogleAccountSigninAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SecondaryGoogleAccountSigninAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 408. SpellcheckEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SpellcheckEnabled struct {
	Stat Status
	Val  bool
}

func (p *SpellcheckEnabled) Name() string          { return "SpellcheckEnabled" }
func (p *SpellcheckEnabled) Field() string         { return "" }
func (p *SpellcheckEnabled) Scope() Scope          { return ScopeUser }
func (p *SpellcheckEnabled) Status() Status        { return p.Stat }
func (p *SpellcheckEnabled) UntypedV() interface{} { return p.Val }
func (p *SpellcheckEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SpellcheckEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 409. AdsSettingForIntrusiveAdsSites
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AdsSettingForIntrusiveAdsSites struct {
	Stat Status
	Val  int
}

func (p *AdsSettingForIntrusiveAdsSites) Name() string          { return "AdsSettingForIntrusiveAdsSites" }
func (p *AdsSettingForIntrusiveAdsSites) Field() string         { return "" }
func (p *AdsSettingForIntrusiveAdsSites) Scope() Scope          { return ScopeUser }
func (p *AdsSettingForIntrusiveAdsSites) Status() Status        { return p.Stat }
func (p *AdsSettingForIntrusiveAdsSites) UntypedV() interface{} { return p.Val }
func (p *AdsSettingForIntrusiveAdsSites) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *AdsSettingForIntrusiveAdsSites) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 411. PasswordProtectionWarningTrigger
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PasswordProtectionWarningTrigger struct {
	Stat Status
	Val  int
}

func (p *PasswordProtectionWarningTrigger) Name() string          { return "PasswordProtectionWarningTrigger" }
func (p *PasswordProtectionWarningTrigger) Field() string         { return "" }
func (p *PasswordProtectionWarningTrigger) Scope() Scope          { return ScopeUser }
func (p *PasswordProtectionWarningTrigger) Status() Status        { return p.Stat }
func (p *PasswordProtectionWarningTrigger) UntypedV() interface{} { return p.Val }
func (p *PasswordProtectionWarningTrigger) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *PasswordProtectionWarningTrigger) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 415. DeviceKerberosEncryptionTypes
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceKerberosEncryptionTypes struct {
	Stat Status
	Val  int
}

func (p *DeviceKerberosEncryptionTypes) Name() string { return "DeviceKerberosEncryptionTypes" }
func (p *DeviceKerberosEncryptionTypes) Field() string {
	return "device_kerberos_encryption_types.types"
}
func (p *DeviceKerberosEncryptionTypes) Scope() Scope          { return ScopeDevice }
func (p *DeviceKerberosEncryptionTypes) Status() Status        { return p.Stat }
func (p *DeviceKerberosEncryptionTypes) UntypedV() interface{} { return p.Val }
func (p *DeviceKerberosEncryptionTypes) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceKerberosEncryptionTypes) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 416. DeviceUserPolicyLoopbackProcessingMode
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceUserPolicyLoopbackProcessingMode struct {
	Stat Status
	Val  int
}

func (p *DeviceUserPolicyLoopbackProcessingMode) Name() string {
	return "DeviceUserPolicyLoopbackProcessingMode"
}
func (p *DeviceUserPolicyLoopbackProcessingMode) Field() string {
	return "device_user_policy_loopback_processing_mode.mode"
}
func (p *DeviceUserPolicyLoopbackProcessingMode) Scope() Scope          { return ScopeDevice }
func (p *DeviceUserPolicyLoopbackProcessingMode) Status() Status        { return p.Stat }
func (p *DeviceUserPolicyLoopbackProcessingMode) UntypedV() interface{} { return p.Val }
func (p *DeviceUserPolicyLoopbackProcessingMode) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceUserPolicyLoopbackProcessingMode) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 419. RelaunchNotification
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RelaunchNotification struct {
	Stat Status
	Val  int
}

func (p *RelaunchNotification) Name() string          { return "RelaunchNotification" }
func (p *RelaunchNotification) Field() string         { return "" }
func (p *RelaunchNotification) Scope() Scope          { return ScopeUser }
func (p *RelaunchNotification) Status() Status        { return p.Stat }
func (p *RelaunchNotification) UntypedV() interface{} { return p.Val }
func (p *RelaunchNotification) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *RelaunchNotification) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 420. RelaunchNotificationPeriod
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RelaunchNotificationPeriod struct {
	Stat Status
	Val  int
}

func (p *RelaunchNotificationPeriod) Name() string          { return "RelaunchNotificationPeriod" }
func (p *RelaunchNotificationPeriod) Field() string         { return "" }
func (p *RelaunchNotificationPeriod) Scope() Scope          { return ScopeUser }
func (p *RelaunchNotificationPeriod) Status() Status        { return p.Stat }
func (p *RelaunchNotificationPeriod) UntypedV() interface{} { return p.Val }
func (p *RelaunchNotificationPeriod) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *RelaunchNotificationPeriod) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 421. VirtualMachinesAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type VirtualMachinesAllowed struct {
	Stat Status
	Val  bool
}

func (p *VirtualMachinesAllowed) Name() string { return "VirtualMachinesAllowed" }
func (p *VirtualMachinesAllowed) Field() string {
	return "virtual_machines_allowed.virtual_machines_allowed"
}
func (p *VirtualMachinesAllowed) Scope() Scope          { return ScopeDevice }
func (p *VirtualMachinesAllowed) Status() Status        { return p.Stat }
func (p *VirtualMachinesAllowed) UntypedV() interface{} { return p.Val }
func (p *VirtualMachinesAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *VirtualMachinesAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 423. PasswordProtectionLoginURLs
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PasswordProtectionLoginURLs struct {
	Stat Status
	Val  []string
}

func (p *PasswordProtectionLoginURLs) Name() string          { return "PasswordProtectionLoginURLs" }
func (p *PasswordProtectionLoginURLs) Field() string         { return "" }
func (p *PasswordProtectionLoginURLs) Scope() Scope          { return ScopeUser }
func (p *PasswordProtectionLoginURLs) Status() Status        { return p.Stat }
func (p *PasswordProtectionLoginURLs) UntypedV() interface{} { return p.Val }
func (p *PasswordProtectionLoginURLs) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *PasswordProtectionLoginURLs) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 424. PasswordProtectionChangePasswordURL
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PasswordProtectionChangePasswordURL struct {
	Stat Status
	Val  string
}

func (p *PasswordProtectionChangePasswordURL) Name() string {
	return "PasswordProtectionChangePasswordURL"
}
func (p *PasswordProtectionChangePasswordURL) Field() string         { return "" }
func (p *PasswordProtectionChangePasswordURL) Scope() Scope          { return ScopeUser }
func (p *PasswordProtectionChangePasswordURL) Status() Status        { return p.Stat }
func (p *PasswordProtectionChangePasswordURL) UntypedV() interface{} { return p.Val }
func (p *PasswordProtectionChangePasswordURL) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *PasswordProtectionChangePasswordURL) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 425. DeviceMachinePasswordChangeRate
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceMachinePasswordChangeRate struct {
	Stat Status
	Val  int
}

func (p *DeviceMachinePasswordChangeRate) Name() string { return "DeviceMachinePasswordChangeRate" }
func (p *DeviceMachinePasswordChangeRate) Field() string {
	return "device_machine_password_change_rate.rate_days"
}
func (p *DeviceMachinePasswordChangeRate) Scope() Scope          { return ScopeDevice }
func (p *DeviceMachinePasswordChangeRate) Status() Status        { return p.Stat }
func (p *DeviceMachinePasswordChangeRate) UntypedV() interface{} { return p.Val }
func (p *DeviceMachinePasswordChangeRate) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceMachinePasswordChangeRate) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 426. DeviceRollbackAllowedMilestones
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceRollbackAllowedMilestones struct {
	Stat Status
	Val  int
}

func (p *DeviceRollbackAllowedMilestones) Name() string { return "DeviceRollbackAllowedMilestones" }
func (p *DeviceRollbackAllowedMilestones) Field() string {
	return "auto_update_settings.rollback_allowed_milestones"
}
func (p *DeviceRollbackAllowedMilestones) Scope() Scope          { return ScopeDevice }
func (p *DeviceRollbackAllowedMilestones) Status() Status        { return p.Stat }
func (p *DeviceRollbackAllowedMilestones) UntypedV() interface{} { return p.Val }
func (p *DeviceRollbackAllowedMilestones) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceRollbackAllowedMilestones) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 427. DeviceRollbackToTargetVersion
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceRollbackToTargetVersion struct {
	Stat Status
	Val  int
}

func (p *DeviceRollbackToTargetVersion) Name() string { return "DeviceRollbackToTargetVersion" }
func (p *DeviceRollbackToTargetVersion) Field() string {
	return "auto_update_settings.rollback_to_target_version"
}
func (p *DeviceRollbackToTargetVersion) Scope() Scope          { return ScopeDevice }
func (p *DeviceRollbackToTargetVersion) Status() Status        { return p.Stat }
func (p *DeviceRollbackToTargetVersion) UntypedV() interface{} { return p.Val }
func (p *DeviceRollbackToTargetVersion) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceRollbackToTargetVersion) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 429. SafeBrowsingExtendedReportingEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SafeBrowsingExtendedReportingEnabled struct {
	Stat Status
	Val  bool
}

func (p *SafeBrowsingExtendedReportingEnabled) Name() string {
	return "SafeBrowsingExtendedReportingEnabled"
}
func (p *SafeBrowsingExtendedReportingEnabled) Field() string         { return "" }
func (p *SafeBrowsingExtendedReportingEnabled) Scope() Scope          { return ScopeUser }
func (p *SafeBrowsingExtendedReportingEnabled) Status() Status        { return p.Stat }
func (p *SafeBrowsingExtendedReportingEnabled) UntypedV() interface{} { return p.Val }
func (p *SafeBrowsingExtendedReportingEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SafeBrowsingExtendedReportingEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 430. AutoplayAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AutoplayAllowed struct {
	Stat Status
	Val  bool
}

func (p *AutoplayAllowed) Name() string          { return "AutoplayAllowed" }
func (p *AutoplayAllowed) Field() string         { return "" }
func (p *AutoplayAllowed) Scope() Scope          { return ScopeUser }
func (p *AutoplayAllowed) Status() Status        { return p.Stat }
func (p *AutoplayAllowed) UntypedV() interface{} { return p.Val }
func (p *AutoplayAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AutoplayAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 434. DefaultWebUsbGuardSetting
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultWebUsbGuardSetting struct {
	Stat Status
	Val  int
}

func (p *DefaultWebUsbGuardSetting) Name() string          { return "DefaultWebUsbGuardSetting" }
func (p *DefaultWebUsbGuardSetting) Field() string         { return "" }
func (p *DefaultWebUsbGuardSetting) Scope() Scope          { return ScopeUser }
func (p *DefaultWebUsbGuardSetting) Status() Status        { return p.Stat }
func (p *DefaultWebUsbGuardSetting) UntypedV() interface{} { return p.Val }
func (p *DefaultWebUsbGuardSetting) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DefaultWebUsbGuardSetting) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 435. CertificateTransparencyEnforcementDisabledForCas
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CertificateTransparencyEnforcementDisabledForCas struct {
	Stat Status
	Val  []string
}

func (p *CertificateTransparencyEnforcementDisabledForCas) Name() string {
	return "CertificateTransparencyEnforcementDisabledForCas"
}
func (p *CertificateTransparencyEnforcementDisabledForCas) Field() string         { return "" }
func (p *CertificateTransparencyEnforcementDisabledForCas) Scope() Scope          { return ScopeUser }
func (p *CertificateTransparencyEnforcementDisabledForCas) Status() Status        { return p.Stat }
func (p *CertificateTransparencyEnforcementDisabledForCas) UntypedV() interface{} { return p.Val }
func (p *CertificateTransparencyEnforcementDisabledForCas) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *CertificateTransparencyEnforcementDisabledForCas) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 436. CertificateTransparencyEnforcementDisabledForLegacyCas
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CertificateTransparencyEnforcementDisabledForLegacyCas struct {
	Stat Status
	Val  []string
}

func (p *CertificateTransparencyEnforcementDisabledForLegacyCas) Name() string {
	return "CertificateTransparencyEnforcementDisabledForLegacyCas"
}
func (p *CertificateTransparencyEnforcementDisabledForLegacyCas) Field() string         { return "" }
func (p *CertificateTransparencyEnforcementDisabledForLegacyCas) Scope() Scope          { return ScopeUser }
func (p *CertificateTransparencyEnforcementDisabledForLegacyCas) Status() Status        { return p.Stat }
func (p *CertificateTransparencyEnforcementDisabledForLegacyCas) UntypedV() interface{} { return p.Val }
func (p *CertificateTransparencyEnforcementDisabledForLegacyCas) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *CertificateTransparencyEnforcementDisabledForLegacyCas) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 437. MediaRouterCastAllowAllIPs
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type MediaRouterCastAllowAllIPs struct {
	Stat Status
	Val  bool
}

func (p *MediaRouterCastAllowAllIPs) Name() string          { return "MediaRouterCastAllowAllIPs" }
func (p *MediaRouterCastAllowAllIPs) Field() string         { return "" }
func (p *MediaRouterCastAllowAllIPs) Scope() Scope          { return ScopeUser }
func (p *MediaRouterCastAllowAllIPs) Status() Status        { return p.Stat }
func (p *MediaRouterCastAllowAllIPs) UntypedV() interface{} { return p.Val }
func (p *MediaRouterCastAllowAllIPs) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *MediaRouterCastAllowAllIPs) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 438. DeviceSamlLoginAuthenticationType
// This policy can be modified without rebooting.
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type DeviceSamlLoginAuthenticationType struct {
	Stat Status
	Val  int
}

func (p *DeviceSamlLoginAuthenticationType) Name() string { return "DeviceSamlLoginAuthenticationType" }
func (p *DeviceSamlLoginAuthenticationType) Field() string {
	return "saml_login_authentication_type.saml_login_authentication_type"
}
func (p *DeviceSamlLoginAuthenticationType) Scope() Scope          { return ScopeDevice }
func (p *DeviceSamlLoginAuthenticationType) Status() Status        { return p.Stat }
func (p *DeviceSamlLoginAuthenticationType) UntypedV() interface{} { return p.Val }
func (p *DeviceSamlLoginAuthenticationType) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceSamlLoginAuthenticationType) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 439. WebUsbAskForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type WebUsbAskForUrls struct {
	Stat Status
	Val  []string
}

func (p *WebUsbAskForUrls) Name() string          { return "WebUsbAskForUrls" }
func (p *WebUsbAskForUrls) Field() string         { return "" }
func (p *WebUsbAskForUrls) Scope() Scope          { return ScopeUser }
func (p *WebUsbAskForUrls) Status() Status        { return p.Stat }
func (p *WebUsbAskForUrls) UntypedV() interface{} { return p.Val }
func (p *WebUsbAskForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *WebUsbAskForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 440. WebUsbBlockedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type WebUsbBlockedForUrls struct {
	Stat Status
	Val  []string
}

func (p *WebUsbBlockedForUrls) Name() string          { return "WebUsbBlockedForUrls" }
func (p *WebUsbBlockedForUrls) Field() string         { return "" }
func (p *WebUsbBlockedForUrls) Scope() Scope          { return ScopeUser }
func (p *WebUsbBlockedForUrls) Status() Status        { return p.Stat }
func (p *WebUsbBlockedForUrls) UntypedV() interface{} { return p.Val }
func (p *WebUsbBlockedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *WebUsbBlockedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 443. DeveloperToolsAvailability
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeveloperToolsAvailability struct {
	Stat Status
	Val  int
}

func (p *DeveloperToolsAvailability) Name() string          { return "DeveloperToolsAvailability" }
func (p *DeveloperToolsAvailability) Field() string         { return "" }
func (p *DeveloperToolsAvailability) Scope() Scope          { return ScopeUser }
func (p *DeveloperToolsAvailability) Status() Status        { return p.Stat }
func (p *DeveloperToolsAvailability) UntypedV() interface{} { return p.Val }
func (p *DeveloperToolsAvailability) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeveloperToolsAvailability) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 444. AllowedLanguages
///////////////////////////////////////////////////////////////////////////////
type AllowedLanguages struct {
	Stat Status
	Val  []string
}

func (p *AllowedLanguages) Name() string          { return "AllowedLanguages" }
func (p *AllowedLanguages) Field() string         { return "" }
func (p *AllowedLanguages) Scope() Scope          { return ScopeUser }
func (p *AllowedLanguages) Status() Status        { return p.Stat }
func (p *AllowedLanguages) UntypedV() interface{} { return p.Val }
func (p *AllowedLanguages) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *AllowedLanguages) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 447. ArcAppInstallEventLoggingEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ArcAppInstallEventLoggingEnabled struct {
	Stat Status
	Val  bool
}

func (p *ArcAppInstallEventLoggingEnabled) Name() string          { return "ArcAppInstallEventLoggingEnabled" }
func (p *ArcAppInstallEventLoggingEnabled) Field() string         { return "" }
func (p *ArcAppInstallEventLoggingEnabled) Scope() Scope          { return ScopeUser }
func (p *ArcAppInstallEventLoggingEnabled) Status() Status        { return p.Stat }
func (p *ArcAppInstallEventLoggingEnabled) UntypedV() interface{} { return p.Val }
func (p *ArcAppInstallEventLoggingEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ArcAppInstallEventLoggingEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 448. UsageTimeLimit
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type UsageTimeLimit struct {
	Stat Status
	Val  *UsageTimeLimitValue
}

type UsageTimeLimitValue struct {
	Overrides       []*UsageTimeLimitValueOverrides     `json:"overrides,omitempty"`
	TimeUsageLimit  *UsageTimeLimitValueTimeUsageLimit  `json:"time_usage_limit"`
	TimeWindowLimit *UsageTimeLimitValueTimeWindowLimit `json:"time_window_limit"`
}

type UsageTimeLimitValueTimeWindowLimit struct {
	Entries []*UsageTimeLimitValueTimeWindowLimitEntries `json:"entries,omitempty"`
}

type UsageTimeLimitValueTimeWindowLimitEntries struct {
	EffectiveDay      string   `json:"effective_day"`
	EndsAt            *RefTime `json:"ends_at"`
	LastUpdatedMillis string   `json:"last_updated_millis"`
	StartsAt          *RefTime `json:"starts_at"`
}

type UsageTimeLimitValueTimeUsageLimit struct {
	Friday    *RefTimeUsageLimitEntry `json:"friday"`
	Monday    *RefTimeUsageLimitEntry `json:"monday"`
	ResetAt   *RefTime                `json:"reset_at"`
	Saturday  *RefTimeUsageLimitEntry `json:"saturday"`
	Sunday    *RefTimeUsageLimitEntry `json:"sunday"`
	Thursday  *RefTimeUsageLimitEntry `json:"thursday"`
	Tuesday   *RefTimeUsageLimitEntry `json:"tuesday"`
	Wednesday *RefTimeUsageLimitEntry `json:"wednesday"`
}

type UsageTimeLimitValueOverrides struct {
	Action             string                                          `json:"action"`
	ActionSpecificData *UsageTimeLimitValueOverridesActionSpecificData `json:"action_specific_data"`
	CreatedAtMillis    string                                          `json:"created_at_millis"`
}

type UsageTimeLimitValueOverridesActionSpecificData struct {
	DurationMins int `json:"duration_mins"`
}

func (p *UsageTimeLimit) Name() string          { return "UsageTimeLimit" }
func (p *UsageTimeLimit) Field() string         { return "" }
func (p *UsageTimeLimit) Scope() Scope          { return ScopeUser }
func (p *UsageTimeLimit) Status() Status        { return p.Stat }
func (p *UsageTimeLimit) UntypedV() interface{} { return p.Val }
func (p *UsageTimeLimit) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *UsageTimeLimitValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *UsageTimeLimitValue", m)
	}
	return v, nil
}
func (p *UsageTimeLimit) Equal(iface interface{}) bool {
	v, ok := iface.(*UsageTimeLimitValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 449. ArcBackupRestoreServiceEnabled
// This policy has a default value of 0.
///////////////////////////////////////////////////////////////////////////////
type ArcBackupRestoreServiceEnabled struct {
	Stat Status
	Val  int
}

func (p *ArcBackupRestoreServiceEnabled) Name() string          { return "ArcBackupRestoreServiceEnabled" }
func (p *ArcBackupRestoreServiceEnabled) Field() string         { return "" }
func (p *ArcBackupRestoreServiceEnabled) Scope() Scope          { return ScopeUser }
func (p *ArcBackupRestoreServiceEnabled) Status() Status        { return p.Stat }
func (p *ArcBackupRestoreServiceEnabled) UntypedV() interface{} { return p.Val }
func (p *ArcBackupRestoreServiceEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ArcBackupRestoreServiceEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 450. ArcGoogleLocationServicesEnabled
// This policy has a default value of 0.
///////////////////////////////////////////////////////////////////////////////
type ArcGoogleLocationServicesEnabled struct {
	Stat Status
	Val  int
}

func (p *ArcGoogleLocationServicesEnabled) Name() string          { return "ArcGoogleLocationServicesEnabled" }
func (p *ArcGoogleLocationServicesEnabled) Field() string         { return "" }
func (p *ArcGoogleLocationServicesEnabled) Scope() Scope          { return ScopeUser }
func (p *ArcGoogleLocationServicesEnabled) Status() Status        { return p.Stat }
func (p *ArcGoogleLocationServicesEnabled) UntypedV() interface{} { return p.Val }
func (p *ArcGoogleLocationServicesEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ArcGoogleLocationServicesEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 451. EnableSyncConsent
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type EnableSyncConsent struct {
	Stat Status
	Val  bool
}

func (p *EnableSyncConsent) Name() string          { return "EnableSyncConsent" }
func (p *EnableSyncConsent) Field() string         { return "" }
func (p *EnableSyncConsent) Scope() Scope          { return ScopeUser }
func (p *EnableSyncConsent) Status() Status        { return p.Stat }
func (p *EnableSyncConsent) UntypedV() interface{} { return p.Val }
func (p *EnableSyncConsent) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *EnableSyncConsent) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 453. DeviceAutoUpdateTimeRestrictions
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceAutoUpdateTimeRestrictions struct {
	Stat Status
	Val  []*DeviceAutoUpdateTimeRestrictionsValue
}

type DeviceAutoUpdateTimeRestrictionsValue struct {
	End   *RefDisallowedTimeInterval `json:"end"`
	Start *RefDisallowedTimeInterval `json:"start"`
}

func (p *DeviceAutoUpdateTimeRestrictions) Name() string { return "DeviceAutoUpdateTimeRestrictions" }
func (p *DeviceAutoUpdateTimeRestrictions) Field() string {
	return "auto_update_settings.disallowed_time_intervals"
}
func (p *DeviceAutoUpdateTimeRestrictions) Scope() Scope          { return ScopeDevice }
func (p *DeviceAutoUpdateTimeRestrictions) Status() Status        { return p.Stat }
func (p *DeviceAutoUpdateTimeRestrictions) UntypedV() interface{} { return p.Val }
func (p *DeviceAutoUpdateTimeRestrictions) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*DeviceAutoUpdateTimeRestrictionsValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*DeviceAutoUpdateTimeRestrictionsValue", m)
	}
	return v, nil
}
func (p *DeviceAutoUpdateTimeRestrictions) Equal(iface interface{}) bool {
	v, ok := iface.([]*DeviceAutoUpdateTimeRestrictionsValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 454. PromotionalTabsEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PromotionalTabsEnabled struct {
	Stat Status
	Val  bool
}

func (p *PromotionalTabsEnabled) Name() string          { return "PromotionalTabsEnabled" }
func (p *PromotionalTabsEnabled) Field() string         { return "" }
func (p *PromotionalTabsEnabled) Scope() Scope          { return ScopeUser }
func (p *PromotionalTabsEnabled) Status() Status        { return p.Stat }
func (p *PromotionalTabsEnabled) UntypedV() interface{} { return p.Val }
func (p *PromotionalTabsEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PromotionalTabsEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 455. SafeSitesFilterBehavior
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SafeSitesFilterBehavior struct {
	Stat Status
	Val  int
}

func (p *SafeSitesFilterBehavior) Name() string          { return "SafeSitesFilterBehavior" }
func (p *SafeSitesFilterBehavior) Field() string         { return "" }
func (p *SafeSitesFilterBehavior) Scope() Scope          { return ScopeUser }
func (p *SafeSitesFilterBehavior) Status() Status        { return p.Stat }
func (p *SafeSitesFilterBehavior) UntypedV() interface{} { return p.Val }
func (p *SafeSitesFilterBehavior) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *SafeSitesFilterBehavior) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 456. AllowedInputMethods
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AllowedInputMethods struct {
	Stat Status
	Val  []string
}

func (p *AllowedInputMethods) Name() string          { return "AllowedInputMethods" }
func (p *AllowedInputMethods) Field() string         { return "" }
func (p *AllowedInputMethods) Scope() Scope          { return ScopeUser }
func (p *AllowedInputMethods) Status() Status        { return p.Stat }
func (p *AllowedInputMethods) UntypedV() interface{} { return p.Val }
func (p *AllowedInputMethods) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *AllowedInputMethods) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 457. OverrideSecurityRestrictionsOnInsecureOrigin
///////////////////////////////////////////////////////////////////////////////
type OverrideSecurityRestrictionsOnInsecureOrigin struct {
	Stat Status
	Val  []string
}

func (p *OverrideSecurityRestrictionsOnInsecureOrigin) Name() string {
	return "OverrideSecurityRestrictionsOnInsecureOrigin"
}
func (p *OverrideSecurityRestrictionsOnInsecureOrigin) Field() string         { return "" }
func (p *OverrideSecurityRestrictionsOnInsecureOrigin) Scope() Scope          { return ScopeUser }
func (p *OverrideSecurityRestrictionsOnInsecureOrigin) Status() Status        { return p.Stat }
func (p *OverrideSecurityRestrictionsOnInsecureOrigin) UntypedV() interface{} { return p.Val }
func (p *OverrideSecurityRestrictionsOnInsecureOrigin) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *OverrideSecurityRestrictionsOnInsecureOrigin) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 458. DeviceUpdateStagingSchedule
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceUpdateStagingSchedule struct {
	Stat Status
	Val  []*RefDayPercentagePair
}

func (p *DeviceUpdateStagingSchedule) Name() string          { return "DeviceUpdateStagingSchedule" }
func (p *DeviceUpdateStagingSchedule) Field() string         { return "auto_update_settings.staging_schedule" }
func (p *DeviceUpdateStagingSchedule) Scope() Scope          { return ScopeDevice }
func (p *DeviceUpdateStagingSchedule) Status() Status        { return p.Stat }
func (p *DeviceUpdateStagingSchedule) UntypedV() interface{} { return p.Val }
func (p *DeviceUpdateStagingSchedule) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*RefDayPercentagePair
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*RefDayPercentagePair", m)
	}
	return v, nil
}
func (p *DeviceUpdateStagingSchedule) Equal(iface interface{}) bool {
	v, ok := iface.([]*RefDayPercentagePair)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 459. AutofillAddressEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AutofillAddressEnabled struct {
	Stat Status
	Val  bool
}

func (p *AutofillAddressEnabled) Name() string          { return "AutofillAddressEnabled" }
func (p *AutofillAddressEnabled) Field() string         { return "" }
func (p *AutofillAddressEnabled) Scope() Scope          { return ScopeUser }
func (p *AutofillAddressEnabled) Status() Status        { return p.Stat }
func (p *AutofillAddressEnabled) UntypedV() interface{} { return p.Val }
func (p *AutofillAddressEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AutofillAddressEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 461. UrlKeyedAnonymizedDataCollectionEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type UrlKeyedAnonymizedDataCollectionEnabled struct {
	Stat Status
	Val  bool
}

func (p *UrlKeyedAnonymizedDataCollectionEnabled) Name() string {
	return "UrlKeyedAnonymizedDataCollectionEnabled"
}
func (p *UrlKeyedAnonymizedDataCollectionEnabled) Field() string         { return "" }
func (p *UrlKeyedAnonymizedDataCollectionEnabled) Scope() Scope          { return ScopeUser }
func (p *UrlKeyedAnonymizedDataCollectionEnabled) Status() Status        { return p.Stat }
func (p *UrlKeyedAnonymizedDataCollectionEnabled) UntypedV() interface{} { return p.Val }
func (p *UrlKeyedAnonymizedDataCollectionEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *UrlKeyedAnonymizedDataCollectionEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 462. NetworkFileSharesAllowed
///////////////////////////////////////////////////////////////////////////////
type NetworkFileSharesAllowed struct {
	Stat Status
	Val  bool
}

func (p *NetworkFileSharesAllowed) Name() string          { return "NetworkFileSharesAllowed" }
func (p *NetworkFileSharesAllowed) Field() string         { return "" }
func (p *NetworkFileSharesAllowed) Scope() Scope          { return ScopeUser }
func (p *NetworkFileSharesAllowed) Status() Status        { return p.Stat }
func (p *NetworkFileSharesAllowed) UntypedV() interface{} { return p.Val }
func (p *NetworkFileSharesAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *NetworkFileSharesAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 463. DeviceLocalAccountManagedSessionEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLocalAccountManagedSessionEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLocalAccountManagedSessionEnabled) Name() string {
	return "DeviceLocalAccountManagedSessionEnabled"
}
func (p *DeviceLocalAccountManagedSessionEnabled) Field() string         { return "" }
func (p *DeviceLocalAccountManagedSessionEnabled) Scope() Scope          { return ScopeUser }
func (p *DeviceLocalAccountManagedSessionEnabled) Status() Status        { return p.Stat }
func (p *DeviceLocalAccountManagedSessionEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLocalAccountManagedSessionEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLocalAccountManagedSessionEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 464. WebRtcEventLogCollectionAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type WebRtcEventLogCollectionAllowed struct {
	Stat Status
	Val  bool
}

func (p *WebRtcEventLogCollectionAllowed) Name() string          { return "WebRtcEventLogCollectionAllowed" }
func (p *WebRtcEventLogCollectionAllowed) Field() string         { return "" }
func (p *WebRtcEventLogCollectionAllowed) Scope() Scope          { return ScopeUser }
func (p *WebRtcEventLogCollectionAllowed) Status() Status        { return p.Stat }
func (p *WebRtcEventLogCollectionAllowed) UntypedV() interface{} { return p.Val }
func (p *WebRtcEventLogCollectionAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *WebRtcEventLogCollectionAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 465. PowerSmartDimEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PowerSmartDimEnabled struct {
	Stat Status
	Val  bool
}

func (p *PowerSmartDimEnabled) Name() string          { return "PowerSmartDimEnabled" }
func (p *PowerSmartDimEnabled) Field() string         { return "" }
func (p *PowerSmartDimEnabled) Scope() Scope          { return ScopeUser }
func (p *PowerSmartDimEnabled) Status() Status        { return p.Stat }
func (p *PowerSmartDimEnabled) UntypedV() interface{} { return p.Val }
func (p *PowerSmartDimEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PowerSmartDimEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 466. CoalesceH2ConnectionsWithClientCertificatesForHosts
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CoalesceH2ConnectionsWithClientCertificatesForHosts struct {
	Stat Status
	Val  []string
}

func (p *CoalesceH2ConnectionsWithClientCertificatesForHosts) Name() string {
	return "CoalesceH2ConnectionsWithClientCertificatesForHosts"
}
func (p *CoalesceH2ConnectionsWithClientCertificatesForHosts) Field() string         { return "" }
func (p *CoalesceH2ConnectionsWithClientCertificatesForHosts) Scope() Scope          { return ScopeUser }
func (p *CoalesceH2ConnectionsWithClientCertificatesForHosts) Status() Status        { return p.Stat }
func (p *CoalesceH2ConnectionsWithClientCertificatesForHosts) UntypedV() interface{} { return p.Val }
func (p *CoalesceH2ConnectionsWithClientCertificatesForHosts) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *CoalesceH2ConnectionsWithClientCertificatesForHosts) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 467. NetBiosShareDiscoveryEnabled
// This policy has a default value of False.
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type NetBiosShareDiscoveryEnabled struct {
	Stat Status
	Val  bool
}

func (p *NetBiosShareDiscoveryEnabled) Name() string          { return "NetBiosShareDiscoveryEnabled" }
func (p *NetBiosShareDiscoveryEnabled) Field() string         { return "" }
func (p *NetBiosShareDiscoveryEnabled) Scope() Scope          { return ScopeUser }
func (p *NetBiosShareDiscoveryEnabled) Status() Status        { return p.Stat }
func (p *NetBiosShareDiscoveryEnabled) UntypedV() interface{} { return p.Val }
func (p *NetBiosShareDiscoveryEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *NetBiosShareDiscoveryEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 468. WebAppInstallForceList
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type WebAppInstallForceList struct {
	Stat Status
	Val  []*WebAppInstallForceListValue
}

type WebAppInstallForceListValue struct {
	CreateDesktopShortcut  bool                                   `json:"create_desktop_shortcut,omitempty"`
	CustomIcon             *WebAppInstallForceListValueCustomIcon `json:"custom_icon,omitempty"`
	CustomName             string                                 `json:"custom_name,omitempty"`
	DefaultLaunchContainer string                                 `json:"default_launch_container,omitempty"`
	FallbackAppName        string                                 `json:"fallback_app_name,omitempty"`
	Url                    string                                 `json:"url"`
}

type WebAppInstallForceListValueCustomIcon struct {
	Hash string `json:"hash"`
	Url  string `json:"url"`
}

func (p *WebAppInstallForceList) Name() string          { return "WebAppInstallForceList" }
func (p *WebAppInstallForceList) Field() string         { return "" }
func (p *WebAppInstallForceList) Scope() Scope          { return ScopeUser }
func (p *WebAppInstallForceList) Status() Status        { return p.Stat }
func (p *WebAppInstallForceList) UntypedV() interface{} { return p.Val }
func (p *WebAppInstallForceList) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*WebAppInstallForceListValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*WebAppInstallForceListValue", m)
	}
	return v, nil
}
func (p *WebAppInstallForceList) Equal(iface interface{}) bool {
	v, ok := iface.([]*WebAppInstallForceListValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 469. SmsMessagesAllowed
// This policy has a default value of False.
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SmsMessagesAllowed struct {
	Stat Status
	Val  bool
}

func (p *SmsMessagesAllowed) Name() string          { return "SmsMessagesAllowed" }
func (p *SmsMessagesAllowed) Field() string         { return "" }
func (p *SmsMessagesAllowed) Scope() Scope          { return ScopeUser }
func (p *SmsMessagesAllowed) Status() Status        { return p.Stat }
func (p *SmsMessagesAllowed) UntypedV() interface{} { return p.Val }
func (p *SmsMessagesAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SmsMessagesAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 474. PrintingAllowedColorModes
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintingAllowedColorModes struct {
	Stat Status
	Val  string
}

func (p *PrintingAllowedColorModes) Name() string          { return "PrintingAllowedColorModes" }
func (p *PrintingAllowedColorModes) Field() string         { return "" }
func (p *PrintingAllowedColorModes) Scope() Scope          { return ScopeUser }
func (p *PrintingAllowedColorModes) Status() Status        { return p.Stat }
func (p *PrintingAllowedColorModes) UntypedV() interface{} { return p.Val }
func (p *PrintingAllowedColorModes) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *PrintingAllowedColorModes) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 475. PrintingAllowedDuplexModes
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintingAllowedDuplexModes struct {
	Stat Status
	Val  string
}

func (p *PrintingAllowedDuplexModes) Name() string          { return "PrintingAllowedDuplexModes" }
func (p *PrintingAllowedDuplexModes) Field() string         { return "" }
func (p *PrintingAllowedDuplexModes) Scope() Scope          { return ScopeUser }
func (p *PrintingAllowedDuplexModes) Status() Status        { return p.Stat }
func (p *PrintingAllowedDuplexModes) UntypedV() interface{} { return p.Val }
func (p *PrintingAllowedDuplexModes) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *PrintingAllowedDuplexModes) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 477. PrintingColorDefault
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintingColorDefault struct {
	Stat Status
	Val  string
}

func (p *PrintingColorDefault) Name() string          { return "PrintingColorDefault" }
func (p *PrintingColorDefault) Field() string         { return "" }
func (p *PrintingColorDefault) Scope() Scope          { return ScopeUser }
func (p *PrintingColorDefault) Status() Status        { return p.Stat }
func (p *PrintingColorDefault) UntypedV() interface{} { return p.Val }
func (p *PrintingColorDefault) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *PrintingColorDefault) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 478. PrintingDuplexDefault
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintingDuplexDefault struct {
	Stat Status
	Val  string
}

func (p *PrintingDuplexDefault) Name() string          { return "PrintingDuplexDefault" }
func (p *PrintingDuplexDefault) Field() string         { return "" }
func (p *PrintingDuplexDefault) Scope() Scope          { return ScopeUser }
func (p *PrintingDuplexDefault) Status() Status        { return p.Stat }
func (p *PrintingDuplexDefault) UntypedV() interface{} { return p.Val }
func (p *PrintingDuplexDefault) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *PrintingDuplexDefault) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 479. PrintingPaperSizeDefault
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintingPaperSizeDefault struct {
	Stat Status
	Val  *PrintingPaperSizeDefaultValue
}

type PrintingPaperSizeDefaultValue struct {
	CustomSize *PrintingPaperSizeDefaultValueCustomSize `json:"custom_size"`
	Name       string                                   `json:"name"`
}

type PrintingPaperSizeDefaultValueCustomSize struct {
	Height int `json:"height"`
	Width  int `json:"width"`
}

func (p *PrintingPaperSizeDefault) Name() string          { return "PrintingPaperSizeDefault" }
func (p *PrintingPaperSizeDefault) Field() string         { return "" }
func (p *PrintingPaperSizeDefault) Scope() Scope          { return ScopeUser }
func (p *PrintingPaperSizeDefault) Status() Status        { return p.Stat }
func (p *PrintingPaperSizeDefault) UntypedV() interface{} { return p.Val }
func (p *PrintingPaperSizeDefault) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *PrintingPaperSizeDefaultValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *PrintingPaperSizeDefaultValue", m)
	}
	return v, nil
}
func (p *PrintingPaperSizeDefault) Equal(iface interface{}) bool {
	v, ok := iface.(*PrintingPaperSizeDefaultValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 480. PrintHeaderFooter
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintHeaderFooter struct {
	Stat Status
	Val  bool
}

func (p *PrintHeaderFooter) Name() string          { return "PrintHeaderFooter" }
func (p *PrintHeaderFooter) Field() string         { return "" }
func (p *PrintHeaderFooter) Scope() Scope          { return ScopeUser }
func (p *PrintHeaderFooter) Status() Status        { return p.Stat }
func (p *PrintHeaderFooter) UntypedV() interface{} { return p.Val }
func (p *PrintHeaderFooter) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PrintHeaderFooter) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 481. CrostiniAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CrostiniAllowed struct {
	Stat Status
	Val  bool
}

func (p *CrostiniAllowed) Name() string          { return "CrostiniAllowed" }
func (p *CrostiniAllowed) Field() string         { return "" }
func (p *CrostiniAllowed) Scope() Scope          { return ScopeUser }
func (p *CrostiniAllowed) Status() Status        { return p.Stat }
func (p *CrostiniAllowed) UntypedV() interface{} { return p.Val }
func (p *CrostiniAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *CrostiniAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 482. DeviceUnaffiliatedCrostiniAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceUnaffiliatedCrostiniAllowed struct {
	Stat Status
	Val  bool
}

func (p *DeviceUnaffiliatedCrostiniAllowed) Name() string { return "DeviceUnaffiliatedCrostiniAllowed" }
func (p *DeviceUnaffiliatedCrostiniAllowed) Field() string {
	return "device_unaffiliated_crostini_allowed.device_unaffiliated_crostini_allowed"
}
func (p *DeviceUnaffiliatedCrostiniAllowed) Scope() Scope          { return ScopeDevice }
func (p *DeviceUnaffiliatedCrostiniAllowed) Status() Status        { return p.Stat }
func (p *DeviceUnaffiliatedCrostiniAllowed) UntypedV() interface{} { return p.Val }
func (p *DeviceUnaffiliatedCrostiniAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceUnaffiliatedCrostiniAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 483. EnterpriseHardwarePlatformAPIEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type EnterpriseHardwarePlatformAPIEnabled struct {
	Stat Status
	Val  bool
}

func (p *EnterpriseHardwarePlatformAPIEnabled) Name() string {
	return "EnterpriseHardwarePlatformAPIEnabled"
}
func (p *EnterpriseHardwarePlatformAPIEnabled) Field() string         { return "" }
func (p *EnterpriseHardwarePlatformAPIEnabled) Scope() Scope          { return ScopeUser }
func (p *EnterpriseHardwarePlatformAPIEnabled) Status() Status        { return p.Stat }
func (p *EnterpriseHardwarePlatformAPIEnabled) UntypedV() interface{} { return p.Val }
func (p *EnterpriseHardwarePlatformAPIEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *EnterpriseHardwarePlatformAPIEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 484. ReportCrostiniUsageEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportCrostiniUsageEnabled struct {
	Stat Status
	Val  bool
}

func (p *ReportCrostiniUsageEnabled) Name() string          { return "ReportCrostiniUsageEnabled" }
func (p *ReportCrostiniUsageEnabled) Field() string         { return "" }
func (p *ReportCrostiniUsageEnabled) Scope() Scope          { return ScopeUser }
func (p *ReportCrostiniUsageEnabled) Status() Status        { return p.Stat }
func (p *ReportCrostiniUsageEnabled) UntypedV() interface{} { return p.Val }
func (p *ReportCrostiniUsageEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportCrostiniUsageEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 485. VpnConfigAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type VpnConfigAllowed struct {
	Stat Status
	Val  bool
}

func (p *VpnConfigAllowed) Name() string          { return "VpnConfigAllowed" }
func (p *VpnConfigAllowed) Field() string         { return "" }
func (p *VpnConfigAllowed) Scope() Scope          { return ScopeUser }
func (p *VpnConfigAllowed) Status() Status        { return p.Stat }
func (p *VpnConfigAllowed) UntypedV() interface{} { return p.Val }
func (p *VpnConfigAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *VpnConfigAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 486. WebUsbAllowDevicesForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type WebUsbAllowDevicesForUrls struct {
	Stat Status
	Val  []*WebUsbAllowDevicesForUrlsValue
}

type WebUsbAllowDevicesForUrlsValue struct {
	Devices []*WebUsbAllowDevicesForUrlsValueDevices `json:"devices,omitempty"`
	Urls    []string                                 `json:"urls,omitempty"`
}

type WebUsbAllowDevicesForUrlsValueDevices struct {
	ProductId int `json:"product_id"`
	VendorId  int `json:"vendor_id"`
}

func (p *WebUsbAllowDevicesForUrls) Name() string          { return "WebUsbAllowDevicesForUrls" }
func (p *WebUsbAllowDevicesForUrls) Field() string         { return "" }
func (p *WebUsbAllowDevicesForUrls) Scope() Scope          { return ScopeUser }
func (p *WebUsbAllowDevicesForUrls) Status() Status        { return p.Stat }
func (p *WebUsbAllowDevicesForUrls) UntypedV() interface{} { return p.Val }
func (p *WebUsbAllowDevicesForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*WebUsbAllowDevicesForUrlsValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*WebUsbAllowDevicesForUrlsValue", m)
	}
	return v, nil
}
func (p *WebUsbAllowDevicesForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]*WebUsbAllowDevicesForUrlsValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 488. SmartLockSigninAllowed
// This policy has a default value of False.
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SmartLockSigninAllowed struct {
	Stat Status
	Val  bool
}

func (p *SmartLockSigninAllowed) Name() string          { return "SmartLockSigninAllowed" }
func (p *SmartLockSigninAllowed) Field() string         { return "" }
func (p *SmartLockSigninAllowed) Scope() Scope          { return ScopeUser }
func (p *SmartLockSigninAllowed) Status() Status        { return p.Stat }
func (p *SmartLockSigninAllowed) UntypedV() interface{} { return p.Val }
func (p *SmartLockSigninAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SmartLockSigninAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 489. NTLMShareAuthenticationEnabled
// This policy has a default value of False.
///////////////////////////////////////////////////////////////////////////////
type NTLMShareAuthenticationEnabled struct {
	Stat Status
	Val  bool
}

func (p *NTLMShareAuthenticationEnabled) Name() string          { return "NTLMShareAuthenticationEnabled" }
func (p *NTLMShareAuthenticationEnabled) Field() string         { return "" }
func (p *NTLMShareAuthenticationEnabled) Scope() Scope          { return ScopeUser }
func (p *NTLMShareAuthenticationEnabled) Status() Status        { return p.Stat }
func (p *NTLMShareAuthenticationEnabled) UntypedV() interface{} { return p.Val }
func (p *NTLMShareAuthenticationEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *NTLMShareAuthenticationEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 490. NetworkFileSharesPreconfiguredShares
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type NetworkFileSharesPreconfiguredShares struct {
	Stat Status
	Val  []*NetworkFileSharesPreconfiguredSharesValue
}

type NetworkFileSharesPreconfiguredSharesValue struct {
	Mode     string `json:"mode"`
	ShareUrl string `json:"share_url"`
}

func (p *NetworkFileSharesPreconfiguredShares) Name() string {
	return "NetworkFileSharesPreconfiguredShares"
}
func (p *NetworkFileSharesPreconfiguredShares) Field() string         { return "" }
func (p *NetworkFileSharesPreconfiguredShares) Scope() Scope          { return ScopeUser }
func (p *NetworkFileSharesPreconfiguredShares) Status() Status        { return p.Stat }
func (p *NetworkFileSharesPreconfiguredShares) UntypedV() interface{} { return p.Val }
func (p *NetworkFileSharesPreconfiguredShares) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*NetworkFileSharesPreconfiguredSharesValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*NetworkFileSharesPreconfiguredSharesValue", m)
	}
	return v, nil
}
func (p *NetworkFileSharesPreconfiguredShares) Equal(iface interface{}) bool {
	v, ok := iface.([]*NetworkFileSharesPreconfiguredSharesValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 491. AllowWakeLocks
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AllowWakeLocks struct {
	Stat Status
	Val  bool
}

func (p *AllowWakeLocks) Name() string          { return "AllowWakeLocks" }
func (p *AllowWakeLocks) Field() string         { return "" }
func (p *AllowWakeLocks) Scope() Scope          { return ScopeUser }
func (p *AllowWakeLocks) Status() Status        { return p.Stat }
func (p *AllowWakeLocks) UntypedV() interface{} { return p.Val }
func (p *AllowWakeLocks) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AllowWakeLocks) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 492. ScreenBrightnessPercent
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ScreenBrightnessPercent struct {
	Stat Status
	Val  *ScreenBrightnessPercentValue
}

type ScreenBrightnessPercentValue struct {
	BrightnessAC      int `json:"BrightnessAC"`
	BrightnessBattery int `json:"BrightnessBattery"`
}

func (p *ScreenBrightnessPercent) Name() string          { return "ScreenBrightnessPercent" }
func (p *ScreenBrightnessPercent) Field() string         { return "" }
func (p *ScreenBrightnessPercent) Scope() Scope          { return ScopeUser }
func (p *ScreenBrightnessPercent) Status() Status        { return p.Stat }
func (p *ScreenBrightnessPercent) UntypedV() interface{} { return p.Val }
func (p *ScreenBrightnessPercent) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *ScreenBrightnessPercentValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *ScreenBrightnessPercentValue", m)
	}
	return v, nil
}
func (p *ScreenBrightnessPercent) Equal(iface interface{}) bool {
	v, ok := iface.(*ScreenBrightnessPercentValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 493. CloudReportingEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CloudReportingEnabled struct {
	Stat Status
	Val  bool
}

func (p *CloudReportingEnabled) Name() string          { return "CloudReportingEnabled" }
func (p *CloudReportingEnabled) Field() string         { return "" }
func (p *CloudReportingEnabled) Scope() Scope          { return ScopeUser }
func (p *CloudReportingEnabled) Status() Status        { return p.Stat }
func (p *CloudReportingEnabled) UntypedV() interface{} { return p.Val }
func (p *CloudReportingEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *CloudReportingEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 501. DeviceWiFiFastTransitionEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceWiFiFastTransitionEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceWiFiFastTransitionEnabled) Name() string { return "DeviceWiFiFastTransitionEnabled" }
func (p *DeviceWiFiFastTransitionEnabled) Field() string {
	return "device_wifi_fast_transition_enabled.device_wifi_fast_transition_enabled"
}
func (p *DeviceWiFiFastTransitionEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceWiFiFastTransitionEnabled) Status() Status        { return p.Stat }
func (p *DeviceWiFiFastTransitionEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceWiFiFastTransitionEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceWiFiFastTransitionEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 502. DeviceDisplayResolution
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceDisplayResolution struct {
	Stat Status
	Val  *DeviceDisplayResolutionValue
}

type DeviceDisplayResolutionValue struct {
	ExternalHeight          int  `json:"external_height"`
	ExternalScalePercentage int  `json:"external_scale_percentage"`
	ExternalUseNative       bool `json:"external_use_native"`
	ExternalWidth           int  `json:"external_width"`
	InternalScalePercentage int  `json:"internal_scale_percentage"`
	Recommended             bool `json:"recommended"`
}

func (p *DeviceDisplayResolution) Name() string { return "DeviceDisplayResolution" }
func (p *DeviceDisplayResolution) Field() string {
	return "device_display_resolution.device_display_resolution"
}
func (p *DeviceDisplayResolution) Scope() Scope          { return ScopeDevice }
func (p *DeviceDisplayResolution) Status() Status        { return p.Stat }
func (p *DeviceDisplayResolution) UntypedV() interface{} { return p.Val }
func (p *DeviceDisplayResolution) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *DeviceDisplayResolutionValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *DeviceDisplayResolutionValue", m)
	}
	return v, nil
}
func (p *DeviceDisplayResolution) Equal(iface interface{}) bool {
	v, ok := iface.(*DeviceDisplayResolutionValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 503. PluginVmAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PluginVmAllowed struct {
	Stat Status
	Val  bool
}

func (p *PluginVmAllowed) Name() string          { return "PluginVmAllowed" }
func (p *PluginVmAllowed) Field() string         { return "plugin_vm_allowed.plugin_vm_allowed" }
func (p *PluginVmAllowed) Scope() Scope          { return ScopeDevice }
func (p *PluginVmAllowed) Status() Status        { return p.Stat }
func (p *PluginVmAllowed) UntypedV() interface{} { return p.Val }
func (p *PluginVmAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PluginVmAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 504. PluginVmImage
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PluginVmImage struct {
	Stat Status
	Val  *PluginVmImageValue
}

type PluginVmImageValue struct {
	Hash string `json:"hash"`
	Url  string `json:"url"`
}

func (p *PluginVmImage) Name() string          { return "PluginVmImage" }
func (p *PluginVmImage) Field() string         { return "" }
func (p *PluginVmImage) Scope() Scope          { return ScopeUser }
func (p *PluginVmImage) Status() Status        { return p.Stat }
func (p *PluginVmImage) UntypedV() interface{} { return p.Val }
func (p *PluginVmImage) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *PluginVmImageValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *PluginVmImageValue", m)
	}
	return v, nil
}
func (p *PluginVmImage) Equal(iface interface{}) bool {
	v, ok := iface.(*PluginVmImageValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 506. PrintingSendUsernameAndFilenameEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintingSendUsernameAndFilenameEnabled struct {
	Stat Status
	Val  bool
}

func (p *PrintingSendUsernameAndFilenameEnabled) Name() string {
	return "PrintingSendUsernameAndFilenameEnabled"
}
func (p *PrintingSendUsernameAndFilenameEnabled) Field() string         { return "" }
func (p *PrintingSendUsernameAndFilenameEnabled) Scope() Scope          { return ScopeUser }
func (p *PrintingSendUsernameAndFilenameEnabled) Status() Status        { return p.Stat }
func (p *PrintingSendUsernameAndFilenameEnabled) UntypedV() interface{} { return p.Val }
func (p *PrintingSendUsernameAndFilenameEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PrintingSendUsernameAndFilenameEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 507. ParentAccessCodeConfig
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ParentAccessCodeConfig struct {
	Stat Status
	Val  *ParentAccessCodeConfigValue
}

type ParentAccessCodeConfigValue struct {
	CurrentConfig *RefConfig   `json:"current_config"`
	FutureConfig  *RefConfig   `json:"future_config"`
	OldConfigs    []*RefConfig `json:"old_configs,omitempty"`
}

func (p *ParentAccessCodeConfig) Name() string          { return "ParentAccessCodeConfig" }
func (p *ParentAccessCodeConfig) Field() string         { return "" }
func (p *ParentAccessCodeConfig) Scope() Scope          { return ScopeUser }
func (p *ParentAccessCodeConfig) Status() Status        { return p.Stat }
func (p *ParentAccessCodeConfig) UntypedV() interface{} { return p.Val }
func (p *ParentAccessCodeConfig) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as sensitive string", m)
	}
	return v, nil
}
func (p *ParentAccessCodeConfig) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	sensitive := "********"
	return cmp.Equal(sensitive, v)
}

///////////////////////////////////////////////////////////////////////////////
// 508. DeviceGpoCacheLifetime
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceGpoCacheLifetime struct {
	Stat Status
	Val  int
}

func (p *DeviceGpoCacheLifetime) Name() string          { return "DeviceGpoCacheLifetime" }
func (p *DeviceGpoCacheLifetime) Field() string         { return "device_gpo_cache_lifetime.lifetime_hours" }
func (p *DeviceGpoCacheLifetime) Scope() Scope          { return ScopeDevice }
func (p *DeviceGpoCacheLifetime) Status() Status        { return p.Stat }
func (p *DeviceGpoCacheLifetime) UntypedV() interface{} { return p.Val }
func (p *DeviceGpoCacheLifetime) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceGpoCacheLifetime) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 509. DeviceAuthDataCacheLifetime
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceAuthDataCacheLifetime struct {
	Stat Status
	Val  int
}

func (p *DeviceAuthDataCacheLifetime) Name() string { return "DeviceAuthDataCacheLifetime" }
func (p *DeviceAuthDataCacheLifetime) Field() string {
	return "device_auth_data_cache_lifetime.lifetime_hours"
}
func (p *DeviceAuthDataCacheLifetime) Scope() Scope          { return ScopeDevice }
func (p *DeviceAuthDataCacheLifetime) Status() Status        { return p.Stat }
func (p *DeviceAuthDataCacheLifetime) UntypedV() interface{} { return p.Val }
func (p *DeviceAuthDataCacheLifetime) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceAuthDataCacheLifetime) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 512. ReportDevicePowerStatus
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDevicePowerStatus struct {
	Stat Status
	Val  bool
}

func (p *ReportDevicePowerStatus) Name() string          { return "ReportDevicePowerStatus" }
func (p *ReportDevicePowerStatus) Field() string         { return "device_reporting.report_power_status" }
func (p *ReportDevicePowerStatus) Scope() Scope          { return ScopeDevice }
func (p *ReportDevicePowerStatus) Status() Status        { return p.Stat }
func (p *ReportDevicePowerStatus) UntypedV() interface{} { return p.Val }
func (p *ReportDevicePowerStatus) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDevicePowerStatus) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 513. ReportDeviceStorageStatus
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceStorageStatus struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceStorageStatus) Name() string          { return "ReportDeviceStorageStatus" }
func (p *ReportDeviceStorageStatus) Field() string         { return "device_reporting.report_storage_status" }
func (p *ReportDeviceStorageStatus) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceStorageStatus) Status() Status        { return p.Stat }
func (p *ReportDeviceStorageStatus) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceStorageStatus) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceStorageStatus) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 514. ReportDeviceBoardStatus
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceBoardStatus struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceBoardStatus) Name() string          { return "ReportDeviceBoardStatus" }
func (p *ReportDeviceBoardStatus) Field() string         { return "device_reporting.report_board_status" }
func (p *ReportDeviceBoardStatus) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceBoardStatus) Status() Status        { return p.Stat }
func (p *ReportDeviceBoardStatus) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceBoardStatus) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceBoardStatus) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 518. ClientCertificateManagementAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ClientCertificateManagementAllowed struct {
	Stat Status
	Val  int
}

func (p *ClientCertificateManagementAllowed) Name() string {
	return "ClientCertificateManagementAllowed"
}
func (p *ClientCertificateManagementAllowed) Field() string         { return "" }
func (p *ClientCertificateManagementAllowed) Scope() Scope          { return ScopeUser }
func (p *ClientCertificateManagementAllowed) Status() Status        { return p.Stat }
func (p *ClientCertificateManagementAllowed) UntypedV() interface{} { return p.Val }
func (p *ClientCertificateManagementAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ClientCertificateManagementAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 520. DeviceRebootOnUserSignout
///////////////////////////////////////////////////////////////////////////////
type DeviceRebootOnUserSignout struct {
	Stat Status
	Val  int
}

func (p *DeviceRebootOnUserSignout) Name() string { return "DeviceRebootOnUserSignout" }
func (p *DeviceRebootOnUserSignout) Field() string {
	return "device_reboot_on_user_signout.reboot_on_signout_mode"
}
func (p *DeviceRebootOnUserSignout) Scope() Scope          { return ScopeDevice }
func (p *DeviceRebootOnUserSignout) Status() Status        { return p.Stat }
func (p *DeviceRebootOnUserSignout) UntypedV() interface{} { return p.Val }
func (p *DeviceRebootOnUserSignout) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceRebootOnUserSignout) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 522. SchedulerConfiguration
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SchedulerConfiguration struct {
	Stat Status
	Val  string
}

func (p *SchedulerConfiguration) Name() string          { return "SchedulerConfiguration" }
func (p *SchedulerConfiguration) Field() string         { return "" }
func (p *SchedulerConfiguration) Scope() Scope          { return ScopeUser }
func (p *SchedulerConfiguration) Status() Status        { return p.Stat }
func (p *SchedulerConfiguration) UntypedV() interface{} { return p.Val }
func (p *SchedulerConfiguration) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *SchedulerConfiguration) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 523. CrostiniExportImportUIAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CrostiniExportImportUIAllowed struct {
	Stat Status
	Val  bool
}

func (p *CrostiniExportImportUIAllowed) Name() string          { return "CrostiniExportImportUIAllowed" }
func (p *CrostiniExportImportUIAllowed) Field() string         { return "" }
func (p *CrostiniExportImportUIAllowed) Scope() Scope          { return ScopeUser }
func (p *CrostiniExportImportUIAllowed) Status() Status        { return p.Stat }
func (p *CrostiniExportImportUIAllowed) UntypedV() interface{} { return p.Val }
func (p *CrostiniExportImportUIAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *CrostiniExportImportUIAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 525. PrintingAllowedPinModes
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintingAllowedPinModes struct {
	Stat Status
	Val  string
}

func (p *PrintingAllowedPinModes) Name() string          { return "PrintingAllowedPinModes" }
func (p *PrintingAllowedPinModes) Field() string         { return "" }
func (p *PrintingAllowedPinModes) Scope() Scope          { return ScopeUser }
func (p *PrintingAllowedPinModes) Status() Status        { return p.Stat }
func (p *PrintingAllowedPinModes) UntypedV() interface{} { return p.Val }
func (p *PrintingAllowedPinModes) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *PrintingAllowedPinModes) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 526. PrintingPinDefault
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintingPinDefault struct {
	Stat Status
	Val  string
}

func (p *PrintingPinDefault) Name() string          { return "PrintingPinDefault" }
func (p *PrintingPinDefault) Field() string         { return "" }
func (p *PrintingPinDefault) Scope() Scope          { return ScopeUser }
func (p *PrintingPinDefault) Status() Status        { return p.Stat }
func (p *PrintingPinDefault) UntypedV() interface{} { return p.Val }
func (p *PrintingPinDefault) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *PrintingPinDefault) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 527. VoiceInteractionContextEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type VoiceInteractionContextEnabled struct {
	Stat Status
	Val  bool
}

func (p *VoiceInteractionContextEnabled) Name() string          { return "VoiceInteractionContextEnabled" }
func (p *VoiceInteractionContextEnabled) Field() string         { return "" }
func (p *VoiceInteractionContextEnabled) Scope() Scope          { return ScopeUser }
func (p *VoiceInteractionContextEnabled) Status() Status        { return p.Stat }
func (p *VoiceInteractionContextEnabled) UntypedV() interface{} { return p.Val }
func (p *VoiceInteractionContextEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *VoiceInteractionContextEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 528. AuthNegotiateDelegateByKdcPolicy
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AuthNegotiateDelegateByKdcPolicy struct {
	Stat Status
	Val  bool
}

func (p *AuthNegotiateDelegateByKdcPolicy) Name() string          { return "AuthNegotiateDelegateByKdcPolicy" }
func (p *AuthNegotiateDelegateByKdcPolicy) Field() string         { return "" }
func (p *AuthNegotiateDelegateByKdcPolicy) Scope() Scope          { return ScopeUser }
func (p *AuthNegotiateDelegateByKdcPolicy) Status() Status        { return p.Stat }
func (p *AuthNegotiateDelegateByKdcPolicy) UntypedV() interface{} { return p.Val }
func (p *AuthNegotiateDelegateByKdcPolicy) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AuthNegotiateDelegateByKdcPolicy) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 529. VoiceInteractionHotwordEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type VoiceInteractionHotwordEnabled struct {
	Stat Status
	Val  bool
}

func (p *VoiceInteractionHotwordEnabled) Name() string          { return "VoiceInteractionHotwordEnabled" }
func (p *VoiceInteractionHotwordEnabled) Field() string         { return "" }
func (p *VoiceInteractionHotwordEnabled) Scope() Scope          { return ScopeUser }
func (p *VoiceInteractionHotwordEnabled) Status() Status        { return p.Stat }
func (p *VoiceInteractionHotwordEnabled) UntypedV() interface{} { return p.Val }
func (p *VoiceInteractionHotwordEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *VoiceInteractionHotwordEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 532. DeviceWilcoDtcAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceWilcoDtcAllowed struct {
	Stat Status
	Val  bool
}

func (p *DeviceWilcoDtcAllowed) Name() string { return "DeviceWilcoDtcAllowed" }
func (p *DeviceWilcoDtcAllowed) Field() string {
	return "device_wilco_dtc_allowed.device_wilco_dtc_allowed"
}
func (p *DeviceWilcoDtcAllowed) Scope() Scope          { return ScopeDevice }
func (p *DeviceWilcoDtcAllowed) Status() Status        { return p.Stat }
func (p *DeviceWilcoDtcAllowed) UntypedV() interface{} { return p.Val }
func (p *DeviceWilcoDtcAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceWilcoDtcAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 535. DeviceWilcoDtcConfiguration
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceWilcoDtcConfiguration struct {
	Stat Status
	Val  *DeviceWilcoDtcConfigurationValue
}

type DeviceWilcoDtcConfigurationValue struct {
	Hash string `json:"hash"`
	Url  string `json:"url"`
}

func (p *DeviceWilcoDtcConfiguration) Name() string { return "DeviceWilcoDtcConfiguration" }
func (p *DeviceWilcoDtcConfiguration) Field() string {
	return "device_wilco_dtc_configuration.device_wilco_dtc_configuration"
}
func (p *DeviceWilcoDtcConfiguration) Scope() Scope          { return ScopeDevice }
func (p *DeviceWilcoDtcConfiguration) Status() Status        { return p.Stat }
func (p *DeviceWilcoDtcConfiguration) UntypedV() interface{} { return p.Val }
func (p *DeviceWilcoDtcConfiguration) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *DeviceWilcoDtcConfigurationValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *DeviceWilcoDtcConfigurationValue", m)
	}
	return v, nil
}
func (p *DeviceWilcoDtcConfiguration) Equal(iface interface{}) bool {
	v, ok := iface.(*DeviceWilcoDtcConfigurationValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 537. DeviceWiFiAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceWiFiAllowed struct {
	Stat Status
	Val  bool
}

func (p *DeviceWiFiAllowed) Name() string          { return "DeviceWiFiAllowed" }
func (p *DeviceWiFiAllowed) Field() string         { return "device_wifi_allowed.device_wifi_allowed" }
func (p *DeviceWiFiAllowed) Scope() Scope          { return ScopeDevice }
func (p *DeviceWiFiAllowed) Status() Status        { return p.Stat }
func (p *DeviceWiFiAllowed) UntypedV() interface{} { return p.Val }
func (p *DeviceWiFiAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceWiFiAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 538. DevicePowerPeakShiftEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DevicePowerPeakShiftEnabled struct {
	Stat Status
	Val  bool
}

func (p *DevicePowerPeakShiftEnabled) Name() string          { return "DevicePowerPeakShiftEnabled" }
func (p *DevicePowerPeakShiftEnabled) Field() string         { return "device_power_peak_shift.enabled" }
func (p *DevicePowerPeakShiftEnabled) Scope() Scope          { return ScopeDevice }
func (p *DevicePowerPeakShiftEnabled) Status() Status        { return p.Stat }
func (p *DevicePowerPeakShiftEnabled) UntypedV() interface{} { return p.Val }
func (p *DevicePowerPeakShiftEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DevicePowerPeakShiftEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 539. DevicePowerPeakShiftBatteryThreshold
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DevicePowerPeakShiftBatteryThreshold struct {
	Stat Status
	Val  int
}

func (p *DevicePowerPeakShiftBatteryThreshold) Name() string {
	return "DevicePowerPeakShiftBatteryThreshold"
}
func (p *DevicePowerPeakShiftBatteryThreshold) Field() string {
	return "device_power_peak_shift.battery_threshold"
}
func (p *DevicePowerPeakShiftBatteryThreshold) Scope() Scope          { return ScopeDevice }
func (p *DevicePowerPeakShiftBatteryThreshold) Status() Status        { return p.Stat }
func (p *DevicePowerPeakShiftBatteryThreshold) UntypedV() interface{} { return p.Val }
func (p *DevicePowerPeakShiftBatteryThreshold) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DevicePowerPeakShiftBatteryThreshold) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 540. DevicePowerPeakShiftDayConfig
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DevicePowerPeakShiftDayConfig struct {
	Stat Status
	Val  *DevicePowerPeakShiftDayConfigValue
}

type DevicePowerPeakShiftDayConfigValue struct {
	Entries []*DevicePowerPeakShiftDayConfigValueEntries `json:"entries,omitempty"`
}

type DevicePowerPeakShiftDayConfigValueEntries struct {
	ChargeStartTime *RefTime `json:"charge_start_time"`
	Day             string   `json:"day"`
	EndTime         *RefTime `json:"end_time"`
	StartTime       *RefTime `json:"start_time"`
}

func (p *DevicePowerPeakShiftDayConfig) Name() string          { return "DevicePowerPeakShiftDayConfig" }
func (p *DevicePowerPeakShiftDayConfig) Field() string         { return "device_power_peak_shift.day_configs" }
func (p *DevicePowerPeakShiftDayConfig) Scope() Scope          { return ScopeDevice }
func (p *DevicePowerPeakShiftDayConfig) Status() Status        { return p.Stat }
func (p *DevicePowerPeakShiftDayConfig) UntypedV() interface{} { return p.Val }
func (p *DevicePowerPeakShiftDayConfig) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *DevicePowerPeakShiftDayConfigValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *DevicePowerPeakShiftDayConfigValue", m)
	}
	return v, nil
}
func (p *DevicePowerPeakShiftDayConfig) Equal(iface interface{}) bool {
	v, ok := iface.(*DevicePowerPeakShiftDayConfigValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 541. DeviceBootOnAcEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceBootOnAcEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceBootOnAcEnabled) Name() string          { return "DeviceBootOnAcEnabled" }
func (p *DeviceBootOnAcEnabled) Field() string         { return "device_boot_on_ac.enabled" }
func (p *DeviceBootOnAcEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceBootOnAcEnabled) Status() Status        { return p.Stat }
func (p *DeviceBootOnAcEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceBootOnAcEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceBootOnAcEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 542. SignedHTTPExchangeEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SignedHTTPExchangeEnabled struct {
	Stat Status
	Val  bool
}

func (p *SignedHTTPExchangeEnabled) Name() string          { return "SignedHTTPExchangeEnabled" }
func (p *SignedHTTPExchangeEnabled) Field() string         { return "" }
func (p *SignedHTTPExchangeEnabled) Scope() Scope          { return ScopeUser }
func (p *SignedHTTPExchangeEnabled) Status() Status        { return p.Stat }
func (p *SignedHTTPExchangeEnabled) UntypedV() interface{} { return p.Val }
func (p *SignedHTTPExchangeEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SignedHTTPExchangeEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 543. DeviceQuickFixBuildToken
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceQuickFixBuildToken struct {
	Stat Status
	Val  string
}

func (p *DeviceQuickFixBuildToken) Name() string { return "DeviceQuickFixBuildToken" }
func (p *DeviceQuickFixBuildToken) Field() string {
	return "auto_update_settings.device_quick_fix_build_token"
}
func (p *DeviceQuickFixBuildToken) Scope() Scope          { return ScopeDevice }
func (p *DeviceQuickFixBuildToken) Status() Status        { return p.Stat }
func (p *DeviceQuickFixBuildToken) UntypedV() interface{} { return p.Val }
func (p *DeviceQuickFixBuildToken) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DeviceQuickFixBuildToken) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 545. SamlInSessionPasswordChangeEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SamlInSessionPasswordChangeEnabled struct {
	Stat Status
	Val  bool
}

func (p *SamlInSessionPasswordChangeEnabled) Name() string {
	return "SamlInSessionPasswordChangeEnabled"
}
func (p *SamlInSessionPasswordChangeEnabled) Field() string         { return "" }
func (p *SamlInSessionPasswordChangeEnabled) Scope() Scope          { return ScopeUser }
func (p *SamlInSessionPasswordChangeEnabled) Status() Status        { return p.Stat }
func (p *SamlInSessionPasswordChangeEnabled) UntypedV() interface{} { return p.Val }
func (p *SamlInSessionPasswordChangeEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SamlInSessionPasswordChangeEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 547. DeviceDockMacAddressSource
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceDockMacAddressSource struct {
	Stat Status
	Val  int
}

func (p *DeviceDockMacAddressSource) Name() string          { return "DeviceDockMacAddressSource" }
func (p *DeviceDockMacAddressSource) Field() string         { return "device_dock_mac_address_source.source" }
func (p *DeviceDockMacAddressSource) Scope() Scope          { return ScopeDevice }
func (p *DeviceDockMacAddressSource) Status() Status        { return p.Stat }
func (p *DeviceDockMacAddressSource) UntypedV() interface{} { return p.Val }
func (p *DeviceDockMacAddressSource) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceDockMacAddressSource) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 548. DeviceAdvancedBatteryChargeModeEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceAdvancedBatteryChargeModeEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceAdvancedBatteryChargeModeEnabled) Name() string {
	return "DeviceAdvancedBatteryChargeModeEnabled"
}
func (p *DeviceAdvancedBatteryChargeModeEnabled) Field() string {
	return "device_advanced_battery_charge_mode.enabled"
}
func (p *DeviceAdvancedBatteryChargeModeEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceAdvancedBatteryChargeModeEnabled) Status() Status        { return p.Stat }
func (p *DeviceAdvancedBatteryChargeModeEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceAdvancedBatteryChargeModeEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceAdvancedBatteryChargeModeEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 549. DeviceAdvancedBatteryChargeModeDayConfig
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceAdvancedBatteryChargeModeDayConfig struct {
	Stat Status
	Val  *DeviceAdvancedBatteryChargeModeDayConfigValue
}

type DeviceAdvancedBatteryChargeModeDayConfigValue struct {
	Entries []*DeviceAdvancedBatteryChargeModeDayConfigValueEntries `json:"entries,omitempty"`
}

type DeviceAdvancedBatteryChargeModeDayConfigValueEntries struct {
	ChargeEndTime   *RefTime `json:"charge_end_time"`
	ChargeStartTime *RefTime `json:"charge_start_time"`
	Day             string   `json:"day"`
}

func (p *DeviceAdvancedBatteryChargeModeDayConfig) Name() string {
	return "DeviceAdvancedBatteryChargeModeDayConfig"
}
func (p *DeviceAdvancedBatteryChargeModeDayConfig) Field() string {
	return "device_advanced_battery_charge_mode.day_configs"
}
func (p *DeviceAdvancedBatteryChargeModeDayConfig) Scope() Scope          { return ScopeDevice }
func (p *DeviceAdvancedBatteryChargeModeDayConfig) Status() Status        { return p.Stat }
func (p *DeviceAdvancedBatteryChargeModeDayConfig) UntypedV() interface{} { return p.Val }
func (p *DeviceAdvancedBatteryChargeModeDayConfig) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *DeviceAdvancedBatteryChargeModeDayConfigValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *DeviceAdvancedBatteryChargeModeDayConfigValue", m)
	}
	return v, nil
}
func (p *DeviceAdvancedBatteryChargeModeDayConfig) Equal(iface interface{}) bool {
	v, ok := iface.(*DeviceAdvancedBatteryChargeModeDayConfigValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 550. DeviceBatteryChargeMode
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceBatteryChargeMode struct {
	Stat Status
	Val  int
}

func (p *DeviceBatteryChargeMode) Name() string { return "DeviceBatteryChargeMode" }
func (p *DeviceBatteryChargeMode) Field() string {
	return "device_battery_charge_mode.battery_charge_mode"
}
func (p *DeviceBatteryChargeMode) Scope() Scope          { return ScopeDevice }
func (p *DeviceBatteryChargeMode) Status() Status        { return p.Stat }
func (p *DeviceBatteryChargeMode) UntypedV() interface{} { return p.Val }
func (p *DeviceBatteryChargeMode) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceBatteryChargeMode) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 551. DeviceBatteryChargeCustomStartCharging
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceBatteryChargeCustomStartCharging struct {
	Stat Status
	Val  int
}

func (p *DeviceBatteryChargeCustomStartCharging) Name() string {
	return "DeviceBatteryChargeCustomStartCharging"
}
func (p *DeviceBatteryChargeCustomStartCharging) Field() string {
	return "device_battery_charge_mode.custom_charge_start"
}
func (p *DeviceBatteryChargeCustomStartCharging) Scope() Scope          { return ScopeDevice }
func (p *DeviceBatteryChargeCustomStartCharging) Status() Status        { return p.Stat }
func (p *DeviceBatteryChargeCustomStartCharging) UntypedV() interface{} { return p.Val }
func (p *DeviceBatteryChargeCustomStartCharging) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceBatteryChargeCustomStartCharging) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 552. DeviceBatteryChargeCustomStopCharging
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceBatteryChargeCustomStopCharging struct {
	Stat Status
	Val  int
}

func (p *DeviceBatteryChargeCustomStopCharging) Name() string {
	return "DeviceBatteryChargeCustomStopCharging"
}
func (p *DeviceBatteryChargeCustomStopCharging) Field() string {
	return "device_battery_charge_mode.custom_charge_stop"
}
func (p *DeviceBatteryChargeCustomStopCharging) Scope() Scope          { return ScopeDevice }
func (p *DeviceBatteryChargeCustomStopCharging) Status() Status        { return p.Stat }
func (p *DeviceBatteryChargeCustomStopCharging) UntypedV() interface{} { return p.Val }
func (p *DeviceBatteryChargeCustomStopCharging) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceBatteryChargeCustomStopCharging) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 553. DeviceUsbPowerShareEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceUsbPowerShareEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceUsbPowerShareEnabled) Name() string          { return "DeviceUsbPowerShareEnabled" }
func (p *DeviceUsbPowerShareEnabled) Field() string         { return "device_usb_power_share.enabled" }
func (p *DeviceUsbPowerShareEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceUsbPowerShareEnabled) Status() Status        { return p.Stat }
func (p *DeviceUsbPowerShareEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceUsbPowerShareEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceUsbPowerShareEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 554. PolicyListMultipleSourceMergeList
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PolicyListMultipleSourceMergeList struct {
	Stat Status
	Val  []string
}

func (p *PolicyListMultipleSourceMergeList) Name() string          { return "PolicyListMultipleSourceMergeList" }
func (p *PolicyListMultipleSourceMergeList) Field() string         { return "" }
func (p *PolicyListMultipleSourceMergeList) Scope() Scope          { return ScopeUser }
func (p *PolicyListMultipleSourceMergeList) Status() Status        { return p.Stat }
func (p *PolicyListMultipleSourceMergeList) UntypedV() interface{} { return p.Val }
func (p *PolicyListMultipleSourceMergeList) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *PolicyListMultipleSourceMergeList) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 555. SamlPasswordExpirationAdvanceWarningDays
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SamlPasswordExpirationAdvanceWarningDays struct {
	Stat Status
	Val  int
}

func (p *SamlPasswordExpirationAdvanceWarningDays) Name() string {
	return "SamlPasswordExpirationAdvanceWarningDays"
}
func (p *SamlPasswordExpirationAdvanceWarningDays) Field() string         { return "" }
func (p *SamlPasswordExpirationAdvanceWarningDays) Scope() Scope          { return ScopeUser }
func (p *SamlPasswordExpirationAdvanceWarningDays) Status() Status        { return p.Stat }
func (p *SamlPasswordExpirationAdvanceWarningDays) UntypedV() interface{} { return p.Val }
func (p *SamlPasswordExpirationAdvanceWarningDays) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *SamlPasswordExpirationAdvanceWarningDays) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 556. DeviceScheduledUpdateCheck
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceScheduledUpdateCheck struct {
	Stat Status
	Val  *DeviceScheduledUpdateCheckValue
}

type DeviceScheduledUpdateCheckValue struct {
	DayOfMonth      int      `json:"day_of_month"`
	DayOfWeek       string   `json:"day_of_week"`
	Frequency       string   `json:"frequency"`
	UpdateCheckTime *RefTime `json:"update_check_time"`
}

func (p *DeviceScheduledUpdateCheck) Name() string { return "DeviceScheduledUpdateCheck" }
func (p *DeviceScheduledUpdateCheck) Field() string {
	return "device_scheduled_update_check.device_scheduled_update_check_settings"
}
func (p *DeviceScheduledUpdateCheck) Scope() Scope          { return ScopeDevice }
func (p *DeviceScheduledUpdateCheck) Status() Status        { return p.Stat }
func (p *DeviceScheduledUpdateCheck) UntypedV() interface{} { return p.Val }
func (p *DeviceScheduledUpdateCheck) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *DeviceScheduledUpdateCheckValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *DeviceScheduledUpdateCheckValue", m)
	}
	return v, nil
}
func (p *DeviceScheduledUpdateCheck) Equal(iface interface{}) bool {
	v, ok := iface.(*DeviceScheduledUpdateCheckValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 557. KerberosEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type KerberosEnabled struct {
	Stat Status
	Val  bool
}

func (p *KerberosEnabled) Name() string          { return "KerberosEnabled" }
func (p *KerberosEnabled) Field() string         { return "" }
func (p *KerberosEnabled) Scope() Scope          { return ScopeUser }
func (p *KerberosEnabled) Status() Status        { return p.Stat }
func (p *KerberosEnabled) UntypedV() interface{} { return p.Val }
func (p *KerberosEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *KerberosEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 558. KerberosRememberPasswordEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type KerberosRememberPasswordEnabled struct {
	Stat Status
	Val  bool
}

func (p *KerberosRememberPasswordEnabled) Name() string          { return "KerberosRememberPasswordEnabled" }
func (p *KerberosRememberPasswordEnabled) Field() string         { return "" }
func (p *KerberosRememberPasswordEnabled) Scope() Scope          { return ScopeUser }
func (p *KerberosRememberPasswordEnabled) Status() Status        { return p.Stat }
func (p *KerberosRememberPasswordEnabled) UntypedV() interface{} { return p.Val }
func (p *KerberosRememberPasswordEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *KerberosRememberPasswordEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 559. KerberosAddAccountsAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type KerberosAddAccountsAllowed struct {
	Stat Status
	Val  bool
}

func (p *KerberosAddAccountsAllowed) Name() string          { return "KerberosAddAccountsAllowed" }
func (p *KerberosAddAccountsAllowed) Field() string         { return "" }
func (p *KerberosAddAccountsAllowed) Scope() Scope          { return ScopeUser }
func (p *KerberosAddAccountsAllowed) Status() Status        { return p.Stat }
func (p *KerberosAddAccountsAllowed) UntypedV() interface{} { return p.Val }
func (p *KerberosAddAccountsAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *KerberosAddAccountsAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 560. KerberosAccounts
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type KerberosAccounts struct {
	Stat Status
	Val  []KerberosAccountsValueIf
}

type KerberosAccountsValueIf interface {
	SetPassword(string)
}

type KerberosAccountsValue struct {
	Krb5conf         []string `json:"krb5conf"`
	Password         string   `json:"password"`
	Principal        string   `json:"principal"`
	RememberPassword bool     `json:"remember_password"`
}

func (v *KerberosAccountsValue) SetPassword(password string) { v.Password = password }

// The KerberosAccounts policy behaves differently when the Krb5conf field is
// omitted compared to just passing an empty array. Therefore we need an
// additional struct in which the field is omitted to cover that case.
type KerberosAccountsValueOmitKrb5conf struct {
	Password         string `json:"password"`
	Principal        string `json:"principal"`
	RememberPassword bool   `json:"remember_password"`
}

func (v *KerberosAccountsValueOmitKrb5conf) SetPassword(password string) { v.Password = password }

func (p *KerberosAccounts) Name() string          { return "KerberosAccounts" }
func (p *KerberosAccounts) Field() string         { return "" }
func (p *KerberosAccounts) Scope() Scope          { return ScopeUser }
func (p *KerberosAccounts) Status() Status        { return p.Stat }
func (p *KerberosAccounts) UntypedV() interface{} { return p.Val }
func (p *KerberosAccounts) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	//First unmarshal into []*KerberosAccountsValue as KerberosAccountsValue has all fields.
	var v []*KerberosAccountsValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*KerberosAccountsValue", m)
	}
	// Next store the elements in a KerberosAccountsValueIf slice and convert all elements without Krb5conf to *KerberosAccountsValueOmitKrb5conf
	// as otherwise the Equal function will fail.
	var value []KerberosAccountsValueIf
	for i := range v {
		if v[i].Krb5conf == nil {
			tmp := KerberosAccountsValueOmitKrb5conf{Password: v[i].Password, Principal: v[i].Principal, RememberPassword: v[i].RememberPassword}
			value = append(value, &tmp)
		} else {
			value = append(value, v[i])
		}
	}
	return value, nil
}
func (p *KerberosAccounts) Equal(iface interface{}) bool {
	v, ok := iface.([]KerberosAccountsValueIf)
	if !ok {
		return ok
	}
	var sensitive []KerberosAccountsValueIf
	for i := range p.Val {
		cpy := p.Val[i]
		cpy.SetPassword("********")
		sensitive = append(sensitive, cpy)
	}
	return cmp.Equal(sensitive, v)
}

///////////////////////////////////////////////////////////////////////////////
// 561. StickyKeysEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type StickyKeysEnabled struct {
	Stat Status
	Val  bool
}

func (p *StickyKeysEnabled) Name() string          { return "StickyKeysEnabled" }
func (p *StickyKeysEnabled) Field() string         { return "" }
func (p *StickyKeysEnabled) Scope() Scope          { return ScopeUser }
func (p *StickyKeysEnabled) Status() Status        { return p.Stat }
func (p *StickyKeysEnabled) UntypedV() interface{} { return p.Val }
func (p *StickyKeysEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *StickyKeysEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 563. AppRecommendationZeroStateEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AppRecommendationZeroStateEnabled struct {
	Stat Status
	Val  bool
}

func (p *AppRecommendationZeroStateEnabled) Name() string          { return "AppRecommendationZeroStateEnabled" }
func (p *AppRecommendationZeroStateEnabled) Field() string         { return "" }
func (p *AppRecommendationZeroStateEnabled) Scope() Scope          { return ScopeUser }
func (p *AppRecommendationZeroStateEnabled) Status() Status        { return p.Stat }
func (p *AppRecommendationZeroStateEnabled) UntypedV() interface{} { return p.Val }
func (p *AppRecommendationZeroStateEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AppRecommendationZeroStateEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 565. PolicyDictionaryMultipleSourceMergeList
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PolicyDictionaryMultipleSourceMergeList struct {
	Stat Status
	Val  []string
}

func (p *PolicyDictionaryMultipleSourceMergeList) Name() string {
	return "PolicyDictionaryMultipleSourceMergeList"
}
func (p *PolicyDictionaryMultipleSourceMergeList) Field() string         { return "" }
func (p *PolicyDictionaryMultipleSourceMergeList) Scope() Scope          { return ScopeUser }
func (p *PolicyDictionaryMultipleSourceMergeList) Status() Status        { return p.Stat }
func (p *PolicyDictionaryMultipleSourceMergeList) UntypedV() interface{} { return p.Val }
func (p *PolicyDictionaryMultipleSourceMergeList) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *PolicyDictionaryMultipleSourceMergeList) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 567. RelaunchHeadsUpPeriod
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RelaunchHeadsUpPeriod struct {
	Stat Status
	Val  int
}

func (p *RelaunchHeadsUpPeriod) Name() string          { return "RelaunchHeadsUpPeriod" }
func (p *RelaunchHeadsUpPeriod) Field() string         { return "" }
func (p *RelaunchHeadsUpPeriod) Scope() Scope          { return ScopeUser }
func (p *RelaunchHeadsUpPeriod) Status() Status        { return p.Stat }
func (p *RelaunchHeadsUpPeriod) UntypedV() interface{} { return p.Val }
func (p *RelaunchHeadsUpPeriod) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *RelaunchHeadsUpPeriod) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 568. StartupBrowserWindowLaunchSuppressed
///////////////////////////////////////////////////////////////////////////////
type StartupBrowserWindowLaunchSuppressed struct {
	Stat Status
	Val  bool
}

func (p *StartupBrowserWindowLaunchSuppressed) Name() string {
	return "StartupBrowserWindowLaunchSuppressed"
}
func (p *StartupBrowserWindowLaunchSuppressed) Field() string         { return "" }
func (p *StartupBrowserWindowLaunchSuppressed) Scope() Scope          { return ScopeUser }
func (p *StartupBrowserWindowLaunchSuppressed) Status() Status        { return p.Stat }
func (p *StartupBrowserWindowLaunchSuppressed) UntypedV() interface{} { return p.Val }
func (p *StartupBrowserWindowLaunchSuppressed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *StartupBrowserWindowLaunchSuppressed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 570. UserFeedbackAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type UserFeedbackAllowed struct {
	Stat Status
	Val  bool
}

func (p *UserFeedbackAllowed) Name() string          { return "UserFeedbackAllowed" }
func (p *UserFeedbackAllowed) Field() string         { return "" }
func (p *UserFeedbackAllowed) Scope() Scope          { return ScopeUser }
func (p *UserFeedbackAllowed) Status() Status        { return p.Stat }
func (p *UserFeedbackAllowed) UntypedV() interface{} { return p.Val }
func (p *UserFeedbackAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *UserFeedbackAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 571. DevicePowerwashAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DevicePowerwashAllowed struct {
	Stat Status
	Val  bool
}

func (p *DevicePowerwashAllowed) Name() string { return "DevicePowerwashAllowed" }
func (p *DevicePowerwashAllowed) Field() string {
	return "device_powerwash_allowed.device_powerwash_allowed"
}
func (p *DevicePowerwashAllowed) Scope() Scope          { return ScopeDevice }
func (p *DevicePowerwashAllowed) Status() Status        { return p.Stat }
func (p *DevicePowerwashAllowed) UntypedV() interface{} { return p.Val }
func (p *DevicePowerwashAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DevicePowerwashAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 572. ExternalPrintServers
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ExternalPrintServers struct {
	Stat Status
	Val  *ExternalPrintServersValue
}

type ExternalPrintServersValue struct {
	Hash string `json:"hash"`
	Url  string `json:"url"`
}

func (p *ExternalPrintServers) Name() string          { return "ExternalPrintServers" }
func (p *ExternalPrintServers) Field() string         { return "" }
func (p *ExternalPrintServers) Scope() Scope          { return ScopeUser }
func (p *ExternalPrintServers) Status() Status        { return p.Stat }
func (p *ExternalPrintServers) UntypedV() interface{} { return p.Val }
func (p *ExternalPrintServers) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *ExternalPrintServersValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *ExternalPrintServersValue", m)
	}
	return v, nil
}
func (p *ExternalPrintServers) Equal(iface interface{}) bool {
	v, ok := iface.(*ExternalPrintServersValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 573. SelectToSpeakEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SelectToSpeakEnabled struct {
	Stat Status
	Val  bool
}

func (p *SelectToSpeakEnabled) Name() string          { return "SelectToSpeakEnabled" }
func (p *SelectToSpeakEnabled) Field() string         { return "" }
func (p *SelectToSpeakEnabled) Scope() Scope          { return ScopeUser }
func (p *SelectToSpeakEnabled) Status() Status        { return p.Stat }
func (p *SelectToSpeakEnabled) UntypedV() interface{} { return p.Val }
func (p *SelectToSpeakEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SelectToSpeakEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 576. CrostiniRootAccessAllowed
// This policy can be modified without rebooting.
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type CrostiniRootAccessAllowed struct {
	Stat Status
	Val  bool
}

func (p *CrostiniRootAccessAllowed) Name() string          { return "CrostiniRootAccessAllowed" }
func (p *CrostiniRootAccessAllowed) Field() string         { return "" }
func (p *CrostiniRootAccessAllowed) Scope() Scope          { return ScopeUser }
func (p *CrostiniRootAccessAllowed) Status() Status        { return p.Stat }
func (p *CrostiniRootAccessAllowed) UntypedV() interface{} { return p.Val }
func (p *CrostiniRootAccessAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *CrostiniRootAccessAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 577. VmManagementCliAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type VmManagementCliAllowed struct {
	Stat Status
	Val  bool
}

func (p *VmManagementCliAllowed) Name() string          { return "VmManagementCliAllowed" }
func (p *VmManagementCliAllowed) Field() string         { return "" }
func (p *VmManagementCliAllowed) Scope() Scope          { return ScopeUser }
func (p *VmManagementCliAllowed) Status() Status        { return p.Stat }
func (p *VmManagementCliAllowed) UntypedV() interface{} { return p.Val }
func (p *VmManagementCliAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *VmManagementCliAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 579. CACertificateManagementAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CACertificateManagementAllowed struct {
	Stat Status
	Val  int
}

func (p *CACertificateManagementAllowed) Name() string          { return "CACertificateManagementAllowed" }
func (p *CACertificateManagementAllowed) Field() string         { return "" }
func (p *CACertificateManagementAllowed) Scope() Scope          { return ScopeUser }
func (p *CACertificateManagementAllowed) Status() Status        { return p.Stat }
func (p *CACertificateManagementAllowed) UntypedV() interface{} { return p.Val }
func (p *CACertificateManagementAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *CACertificateManagementAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 580. PasswordLeakDetectionEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PasswordLeakDetectionEnabled struct {
	Stat Status
	Val  bool
}

func (p *PasswordLeakDetectionEnabled) Name() string          { return "PasswordLeakDetectionEnabled" }
func (p *PasswordLeakDetectionEnabled) Field() string         { return "" }
func (p *PasswordLeakDetectionEnabled) Scope() Scope          { return ScopeUser }
func (p *PasswordLeakDetectionEnabled) Status() Status        { return p.Stat }
func (p *PasswordLeakDetectionEnabled) UntypedV() interface{} { return p.Val }
func (p *PasswordLeakDetectionEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PasswordLeakDetectionEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 581. LockScreenMediaPlaybackEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type LockScreenMediaPlaybackEnabled struct {
	Stat Status
	Val  bool
}

func (p *LockScreenMediaPlaybackEnabled) Name() string          { return "LockScreenMediaPlaybackEnabled" }
func (p *LockScreenMediaPlaybackEnabled) Field() string         { return "" }
func (p *LockScreenMediaPlaybackEnabled) Scope() Scope          { return ScopeUser }
func (p *LockScreenMediaPlaybackEnabled) Status() Status        { return p.Stat }
func (p *LockScreenMediaPlaybackEnabled) UntypedV() interface{} { return p.Val }
func (p *LockScreenMediaPlaybackEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *LockScreenMediaPlaybackEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 582. DnsOverHttpsMode
// This policy has a default value of off.
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DnsOverHttpsMode struct {
	Stat Status
	Val  string
}

func (p *DnsOverHttpsMode) Name() string          { return "DnsOverHttpsMode" }
func (p *DnsOverHttpsMode) Field() string         { return "" }
func (p *DnsOverHttpsMode) Scope() Scope          { return ScopeUser }
func (p *DnsOverHttpsMode) Status() Status        { return p.Stat }
func (p *DnsOverHttpsMode) UntypedV() interface{} { return p.Val }
func (p *DnsOverHttpsMode) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DnsOverHttpsMode) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 584. PolicyAtomicGroupsEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PolicyAtomicGroupsEnabled struct {
	Stat Status
	Val  bool
}

func (p *PolicyAtomicGroupsEnabled) Name() string          { return "PolicyAtomicGroupsEnabled" }
func (p *PolicyAtomicGroupsEnabled) Field() string         { return "" }
func (p *PolicyAtomicGroupsEnabled) Scope() Scope          { return ScopeUser }
func (p *PolicyAtomicGroupsEnabled) Status() Status        { return p.Stat }
func (p *PolicyAtomicGroupsEnabled) UntypedV() interface{} { return p.Val }
func (p *PolicyAtomicGroupsEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PolicyAtomicGroupsEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 592. DictationEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DictationEnabled struct {
	Stat Status
	Val  bool
}

func (p *DictationEnabled) Name() string          { return "DictationEnabled" }
func (p *DictationEnabled) Field() string         { return "" }
func (p *DictationEnabled) Scope() Scope          { return ScopeUser }
func (p *DictationEnabled) Status() Status        { return p.Stat }
func (p *DictationEnabled) UntypedV() interface{} { return p.Val }
func (p *DictationEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DictationEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 593. KeyboardFocusHighlightEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type KeyboardFocusHighlightEnabled struct {
	Stat Status
	Val  bool
}

func (p *KeyboardFocusHighlightEnabled) Name() string          { return "KeyboardFocusHighlightEnabled" }
func (p *KeyboardFocusHighlightEnabled) Field() string         { return "" }
func (p *KeyboardFocusHighlightEnabled) Scope() Scope          { return ScopeUser }
func (p *KeyboardFocusHighlightEnabled) Status() Status        { return p.Stat }
func (p *KeyboardFocusHighlightEnabled) UntypedV() interface{} { return p.Val }
func (p *KeyboardFocusHighlightEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *KeyboardFocusHighlightEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 594. CursorHighlightEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CursorHighlightEnabled struct {
	Stat Status
	Val  bool
}

func (p *CursorHighlightEnabled) Name() string          { return "CursorHighlightEnabled" }
func (p *CursorHighlightEnabled) Field() string         { return "" }
func (p *CursorHighlightEnabled) Scope() Scope          { return ScopeUser }
func (p *CursorHighlightEnabled) Status() Status        { return p.Stat }
func (p *CursorHighlightEnabled) UntypedV() interface{} { return p.Val }
func (p *CursorHighlightEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *CursorHighlightEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 595. CaretHighlightEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CaretHighlightEnabled struct {
	Stat Status
	Val  bool
}

func (p *CaretHighlightEnabled) Name() string          { return "CaretHighlightEnabled" }
func (p *CaretHighlightEnabled) Field() string         { return "" }
func (p *CaretHighlightEnabled) Scope() Scope          { return ScopeUser }
func (p *CaretHighlightEnabled) Status() Status        { return p.Stat }
func (p *CaretHighlightEnabled) UntypedV() interface{} { return p.Val }
func (p *CaretHighlightEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *CaretHighlightEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 596. MonoAudioEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type MonoAudioEnabled struct {
	Stat Status
	Val  bool
}

func (p *MonoAudioEnabled) Name() string          { return "MonoAudioEnabled" }
func (p *MonoAudioEnabled) Field() string         { return "" }
func (p *MonoAudioEnabled) Scope() Scope          { return ScopeUser }
func (p *MonoAudioEnabled) Status() Status        { return p.Stat }
func (p *MonoAudioEnabled) UntypedV() interface{} { return p.Val }
func (p *MonoAudioEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *MonoAudioEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 597. AutoclickEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AutoclickEnabled struct {
	Stat Status
	Val  bool
}

func (p *AutoclickEnabled) Name() string          { return "AutoclickEnabled" }
func (p *AutoclickEnabled) Field() string         { return "" }
func (p *AutoclickEnabled) Scope() Scope          { return ScopeUser }
func (p *AutoclickEnabled) Status() Status        { return p.Stat }
func (p *AutoclickEnabled) UntypedV() interface{} { return p.Val }
func (p *AutoclickEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AutoclickEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 599. DeviceLoginScreenLargeCursorEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenLargeCursorEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenLargeCursorEnabled) Name() string {
	return "DeviceLoginScreenLargeCursorEnabled"
}
func (p *DeviceLoginScreenLargeCursorEnabled) Field() string {
	return "accessibility_settings.login_screen_large_cursor_enabled"
}
func (p *DeviceLoginScreenLargeCursorEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenLargeCursorEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenLargeCursorEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenLargeCursorEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenLargeCursorEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 601. HSTSPolicyBypassList
///////////////////////////////////////////////////////////////////////////////
type HSTSPolicyBypassList struct {
	Stat Status
	Val  []string
}

func (p *HSTSPolicyBypassList) Name() string          { return "HSTSPolicyBypassList" }
func (p *HSTSPolicyBypassList) Field() string         { return "" }
func (p *HSTSPolicyBypassList) Scope() Scope          { return ScopeUser }
func (p *HSTSPolicyBypassList) Status() Status        { return p.Stat }
func (p *HSTSPolicyBypassList) UntypedV() interface{} { return p.Val }
func (p *HSTSPolicyBypassList) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *HSTSPolicyBypassList) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 602. ReportDeviceOsUpdateStatus
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceOsUpdateStatus struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceOsUpdateStatus) Name() string { return "ReportDeviceOsUpdateStatus" }
func (p *ReportDeviceOsUpdateStatus) Field() string {
	return "device_reporting.report_os_update_status"
}
func (p *ReportDeviceOsUpdateStatus) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceOsUpdateStatus) Status() Status        { return p.Stat }
func (p *ReportDeviceOsUpdateStatus) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceOsUpdateStatus) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceOsUpdateStatus) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 603. DeviceLoginScreenWebUsbAllowDevicesForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenWebUsbAllowDevicesForUrls struct {
	Stat Status
	Val  []*DeviceLoginScreenWebUsbAllowDevicesForUrlsValue
}

type DeviceLoginScreenWebUsbAllowDevicesForUrlsValue struct {
	Devices []*DeviceLoginScreenWebUsbAllowDevicesForUrlsValueDevices `json:"devices,omitempty"`
	Urls    []string                                                  `json:"urls,omitempty"`
}

type DeviceLoginScreenWebUsbAllowDevicesForUrlsValueDevices struct {
	ProductId int `json:"product_id"`
	VendorId  int `json:"vendor_id"`
}

func (p *DeviceLoginScreenWebUsbAllowDevicesForUrls) Name() string {
	return "DeviceLoginScreenWebUsbAllowDevicesForUrls"
}
func (p *DeviceLoginScreenWebUsbAllowDevicesForUrls) Field() string {
	return "device_login_screen_webusb_allow_devices_for_urls.device_login_screen_webusb_allow_devices_for_urls"
}
func (p *DeviceLoginScreenWebUsbAllowDevicesForUrls) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenWebUsbAllowDevicesForUrls) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenWebUsbAllowDevicesForUrls) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenWebUsbAllowDevicesForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*DeviceLoginScreenWebUsbAllowDevicesForUrlsValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*DeviceLoginScreenWebUsbAllowDevicesForUrlsValue", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenWebUsbAllowDevicesForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]*DeviceLoginScreenWebUsbAllowDevicesForUrlsValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 605. DeviceLoginScreenSpokenFeedbackEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenSpokenFeedbackEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenSpokenFeedbackEnabled) Name() string {
	return "DeviceLoginScreenSpokenFeedbackEnabled"
}
func (p *DeviceLoginScreenSpokenFeedbackEnabled) Field() string {
	return "accessibility_settings.login_screen_spoken_feedback_enabled"
}
func (p *DeviceLoginScreenSpokenFeedbackEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenSpokenFeedbackEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenSpokenFeedbackEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenSpokenFeedbackEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenSpokenFeedbackEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 606. DeviceLoginScreenHighContrastEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenHighContrastEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenHighContrastEnabled) Name() string {
	return "DeviceLoginScreenHighContrastEnabled"
}
func (p *DeviceLoginScreenHighContrastEnabled) Field() string {
	return "accessibility_settings.login_screen_high_contrast_enabled"
}
func (p *DeviceLoginScreenHighContrastEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenHighContrastEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenHighContrastEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenHighContrastEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenHighContrastEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 607. DeviceLoginScreenVirtualKeyboardEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenVirtualKeyboardEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenVirtualKeyboardEnabled) Name() string {
	return "DeviceLoginScreenVirtualKeyboardEnabled"
}
func (p *DeviceLoginScreenVirtualKeyboardEnabled) Field() string {
	return "accessibility_settings.login_screen_virtual_keyboard_enabled"
}
func (p *DeviceLoginScreenVirtualKeyboardEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenVirtualKeyboardEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenVirtualKeyboardEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenVirtualKeyboardEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenVirtualKeyboardEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 608. CloudExtensionRequestEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CloudExtensionRequestEnabled struct {
	Stat Status
	Val  bool
}

func (p *CloudExtensionRequestEnabled) Name() string          { return "CloudExtensionRequestEnabled" }
func (p *CloudExtensionRequestEnabled) Field() string         { return "" }
func (p *CloudExtensionRequestEnabled) Scope() Scope          { return ScopeUser }
func (p *CloudExtensionRequestEnabled) Status() Status        { return p.Stat }
func (p *CloudExtensionRequestEnabled) UntypedV() interface{} { return p.Val }
func (p *CloudExtensionRequestEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *CloudExtensionRequestEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 609. DeviceLoginScreenSystemInfoEnforced
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenSystemInfoEnforced struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenSystemInfoEnforced) Name() string {
	return "DeviceLoginScreenSystemInfoEnforced"
}
func (p *DeviceLoginScreenSystemInfoEnforced) Field() string {
	return "device_login_screen_system_info_enforced.value"
}
func (p *DeviceLoginScreenSystemInfoEnforced) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenSystemInfoEnforced) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenSystemInfoEnforced) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenSystemInfoEnforced) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenSystemInfoEnforced) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 610. SharedClipboardEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SharedClipboardEnabled struct {
	Stat Status
	Val  bool
}

func (p *SharedClipboardEnabled) Name() string          { return "SharedClipboardEnabled" }
func (p *SharedClipboardEnabled) Field() string         { return "" }
func (p *SharedClipboardEnabled) Scope() Scope          { return ScopeUser }
func (p *SharedClipboardEnabled) Status() Status        { return p.Stat }
func (p *SharedClipboardEnabled) UntypedV() interface{} { return p.Val }
func (p *SharedClipboardEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SharedClipboardEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 611. DeviceLoginScreenDictationEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenDictationEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenDictationEnabled) Name() string { return "DeviceLoginScreenDictationEnabled" }
func (p *DeviceLoginScreenDictationEnabled) Field() string {
	return "accessibility_settings.login_screen_dictation_enabled"
}
func (p *DeviceLoginScreenDictationEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenDictationEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenDictationEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenDictationEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenDictationEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 612. DeviceLoginScreenSelectToSpeakEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenSelectToSpeakEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenSelectToSpeakEnabled) Name() string {
	return "DeviceLoginScreenSelectToSpeakEnabled"
}
func (p *DeviceLoginScreenSelectToSpeakEnabled) Field() string {
	return "accessibility_settings.login_screen_select_to_speak_enabled"
}
func (p *DeviceLoginScreenSelectToSpeakEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenSelectToSpeakEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenSelectToSpeakEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenSelectToSpeakEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenSelectToSpeakEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 613. DeviceLoginScreenCursorHighlightEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenCursorHighlightEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenCursorHighlightEnabled) Name() string {
	return "DeviceLoginScreenCursorHighlightEnabled"
}
func (p *DeviceLoginScreenCursorHighlightEnabled) Field() string {
	return "accessibility_settings.login_screen_cursor_highlight_enabled"
}
func (p *DeviceLoginScreenCursorHighlightEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenCursorHighlightEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenCursorHighlightEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenCursorHighlightEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenCursorHighlightEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 614. DeviceLoginScreenCaretHighlightEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenCaretHighlightEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenCaretHighlightEnabled) Name() string {
	return "DeviceLoginScreenCaretHighlightEnabled"
}
func (p *DeviceLoginScreenCaretHighlightEnabled) Field() string {
	return "accessibility_settings.login_screen_caret_highlight_enabled"
}
func (p *DeviceLoginScreenCaretHighlightEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenCaretHighlightEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenCaretHighlightEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenCaretHighlightEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenCaretHighlightEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 615. DeviceLoginScreenMonoAudioEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenMonoAudioEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenMonoAudioEnabled) Name() string { return "DeviceLoginScreenMonoAudioEnabled" }
func (p *DeviceLoginScreenMonoAudioEnabled) Field() string {
	return "accessibility_settings.login_screen_mono_audio_enabled"
}
func (p *DeviceLoginScreenMonoAudioEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenMonoAudioEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenMonoAudioEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenMonoAudioEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenMonoAudioEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 617. DeviceLoginScreenAutoclickEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenAutoclickEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenAutoclickEnabled) Name() string { return "DeviceLoginScreenAutoclickEnabled" }
func (p *DeviceLoginScreenAutoclickEnabled) Field() string {
	return "accessibility_settings.login_screen_autoclick_enabled"
}
func (p *DeviceLoginScreenAutoclickEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenAutoclickEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenAutoclickEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenAutoclickEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenAutoclickEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 618. DeviceLoginScreenStickyKeysEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenStickyKeysEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenStickyKeysEnabled) Name() string {
	return "DeviceLoginScreenStickyKeysEnabled"
}
func (p *DeviceLoginScreenStickyKeysEnabled) Field() string {
	return "accessibility_settings.login_screen_sticky_keys_enabled"
}
func (p *DeviceLoginScreenStickyKeysEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenStickyKeysEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenStickyKeysEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenStickyKeysEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenStickyKeysEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 619. DeviceLoginScreenKeyboardFocusHighlightEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenKeyboardFocusHighlightEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenKeyboardFocusHighlightEnabled) Name() string {
	return "DeviceLoginScreenKeyboardFocusHighlightEnabled"
}
func (p *DeviceLoginScreenKeyboardFocusHighlightEnabled) Field() string {
	return "accessibility_settings.login_screen_keyboard_focus_highlight_enabled"
}
func (p *DeviceLoginScreenKeyboardFocusHighlightEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenKeyboardFocusHighlightEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenKeyboardFocusHighlightEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenKeyboardFocusHighlightEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenKeyboardFocusHighlightEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 620. ShelfAlignment
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ShelfAlignment struct {
	Stat Status
	Val  string
}

func (p *ShelfAlignment) Name() string          { return "ShelfAlignment" }
func (p *ShelfAlignment) Field() string         { return "" }
func (p *ShelfAlignment) Scope() Scope          { return ScopeUser }
func (p *ShelfAlignment) Status() Status        { return p.Stat }
func (p *ShelfAlignment) UntypedV() interface{} { return p.Val }
func (p *ShelfAlignment) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *ShelfAlignment) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 621. PrintingAllowedBackgroundGraphicsModes
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintingAllowedBackgroundGraphicsModes struct {
	Stat Status
	Val  string
}

func (p *PrintingAllowedBackgroundGraphicsModes) Name() string {
	return "PrintingAllowedBackgroundGraphicsModes"
}
func (p *PrintingAllowedBackgroundGraphicsModes) Field() string         { return "" }
func (p *PrintingAllowedBackgroundGraphicsModes) Scope() Scope          { return ScopeUser }
func (p *PrintingAllowedBackgroundGraphicsModes) Status() Status        { return p.Stat }
func (p *PrintingAllowedBackgroundGraphicsModes) UntypedV() interface{} { return p.Val }
func (p *PrintingAllowedBackgroundGraphicsModes) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *PrintingAllowedBackgroundGraphicsModes) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 622. PrintingBackgroundGraphicsDefault
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintingBackgroundGraphicsDefault struct {
	Stat Status
	Val  string
}

func (p *PrintingBackgroundGraphicsDefault) Name() string          { return "PrintingBackgroundGraphicsDefault" }
func (p *PrintingBackgroundGraphicsDefault) Field() string         { return "" }
func (p *PrintingBackgroundGraphicsDefault) Scope() Scope          { return ScopeUser }
func (p *PrintingBackgroundGraphicsDefault) Status() Status        { return p.Stat }
func (p *PrintingBackgroundGraphicsDefault) UntypedV() interface{} { return p.Val }
func (p *PrintingBackgroundGraphicsDefault) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *PrintingBackgroundGraphicsDefault) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 624. LegacySameSiteCookieBehaviorEnabledForDomainList
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type LegacySameSiteCookieBehaviorEnabledForDomainList struct {
	Stat Status
	Val  []string
}

func (p *LegacySameSiteCookieBehaviorEnabledForDomainList) Name() string {
	return "LegacySameSiteCookieBehaviorEnabledForDomainList"
}
func (p *LegacySameSiteCookieBehaviorEnabledForDomainList) Field() string         { return "" }
func (p *LegacySameSiteCookieBehaviorEnabledForDomainList) Scope() Scope          { return ScopeUser }
func (p *LegacySameSiteCookieBehaviorEnabledForDomainList) Status() Status        { return p.Stat }
func (p *LegacySameSiteCookieBehaviorEnabledForDomainList) UntypedV() interface{} { return p.Val }
func (p *LegacySameSiteCookieBehaviorEnabledForDomainList) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *LegacySameSiteCookieBehaviorEnabledForDomainList) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 625. PrintJobHistoryExpirationPeriod
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintJobHistoryExpirationPeriod struct {
	Stat Status
	Val  int
}

func (p *PrintJobHistoryExpirationPeriod) Name() string          { return "PrintJobHistoryExpirationPeriod" }
func (p *PrintJobHistoryExpirationPeriod) Field() string         { return "" }
func (p *PrintJobHistoryExpirationPeriod) Scope() Scope          { return ScopeUser }
func (p *PrintJobHistoryExpirationPeriod) Status() Status        { return p.Stat }
func (p *PrintJobHistoryExpirationPeriod) UntypedV() interface{} { return p.Val }
func (p *PrintJobHistoryExpirationPeriod) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *PrintJobHistoryExpirationPeriod) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 628. DeviceLoginScreenScreenMagnifierType
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenScreenMagnifierType struct {
	Stat Status
	Val  int
}

func (p *DeviceLoginScreenScreenMagnifierType) Name() string {
	return "DeviceLoginScreenScreenMagnifierType"
}
func (p *DeviceLoginScreenScreenMagnifierType) Field() string {
	return "accessibility_settings.login_screen_screen_magnifier_type"
}
func (p *DeviceLoginScreenScreenMagnifierType) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenScreenMagnifierType) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenScreenMagnifierType) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenScreenMagnifierType) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenScreenMagnifierType) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 633. DefaultInsecureContentSetting
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultInsecureContentSetting struct {
	Stat Status
	Val  int
}

func (p *DefaultInsecureContentSetting) Name() string          { return "DefaultInsecureContentSetting" }
func (p *DefaultInsecureContentSetting) Field() string         { return "" }
func (p *DefaultInsecureContentSetting) Scope() Scope          { return ScopeUser }
func (p *DefaultInsecureContentSetting) Status() Status        { return p.Stat }
func (p *DefaultInsecureContentSetting) UntypedV() interface{} { return p.Val }
func (p *DefaultInsecureContentSetting) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DefaultInsecureContentSetting) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 634. InsecureContentAllowedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type InsecureContentAllowedForUrls struct {
	Stat Status
	Val  []string
}

func (p *InsecureContentAllowedForUrls) Name() string          { return "InsecureContentAllowedForUrls" }
func (p *InsecureContentAllowedForUrls) Field() string         { return "" }
func (p *InsecureContentAllowedForUrls) Scope() Scope          { return ScopeUser }
func (p *InsecureContentAllowedForUrls) Status() Status        { return p.Stat }
func (p *InsecureContentAllowedForUrls) UntypedV() interface{} { return p.Val }
func (p *InsecureContentAllowedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *InsecureContentAllowedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 635. InsecureContentBlockedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type InsecureContentBlockedForUrls struct {
	Stat Status
	Val  []string
}

func (p *InsecureContentBlockedForUrls) Name() string          { return "InsecureContentBlockedForUrls" }
func (p *InsecureContentBlockedForUrls) Field() string         { return "" }
func (p *InsecureContentBlockedForUrls) Scope() Scope          { return ScopeUser }
func (p *InsecureContentBlockedForUrls) Status() Status        { return p.Stat }
func (p *InsecureContentBlockedForUrls) UntypedV() interface{} { return p.Val }
func (p *InsecureContentBlockedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *InsecureContentBlockedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 636. DeviceWebBasedAttestationAllowedUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceWebBasedAttestationAllowedUrls struct {
	Stat Status
	Val  []string
}

func (p *DeviceWebBasedAttestationAllowedUrls) Name() string {
	return "DeviceWebBasedAttestationAllowedUrls"
}
func (p *DeviceWebBasedAttestationAllowedUrls) Field() string {
	return "device_web_based_attestation_allowed_urls.value"
}
func (p *DeviceWebBasedAttestationAllowedUrls) Scope() Scope          { return ScopeDevice }
func (p *DeviceWebBasedAttestationAllowedUrls) Status() Status        { return p.Stat }
func (p *DeviceWebBasedAttestationAllowedUrls) UntypedV() interface{} { return p.Val }
func (p *DeviceWebBasedAttestationAllowedUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DeviceWebBasedAttestationAllowedUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 638. DeviceShowNumericKeyboardForPassword
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceShowNumericKeyboardForPassword struct {
	Stat Status
	Val  bool
}

func (p *DeviceShowNumericKeyboardForPassword) Name() string {
	return "DeviceShowNumericKeyboardForPassword"
}
func (p *DeviceShowNumericKeyboardForPassword) Field() string {
	return "device_show_numeric_keyboard_for_password.value"
}
func (p *DeviceShowNumericKeyboardForPassword) Scope() Scope          { return ScopeDevice }
func (p *DeviceShowNumericKeyboardForPassword) Status() Status        { return p.Stat }
func (p *DeviceShowNumericKeyboardForPassword) UntypedV() interface{} { return p.Val }
func (p *DeviceShowNumericKeyboardForPassword) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceShowNumericKeyboardForPassword) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 639. CrostiniAnsiblePlaybook
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CrostiniAnsiblePlaybook struct {
	Stat Status
	Val  *CrostiniAnsiblePlaybookValue
}

type CrostiniAnsiblePlaybookValue struct {
	Hash string `json:"hash"`
	Url  string `json:"url"`
}

func (p *CrostiniAnsiblePlaybook) Name() string          { return "CrostiniAnsiblePlaybook" }
func (p *CrostiniAnsiblePlaybook) Field() string         { return "" }
func (p *CrostiniAnsiblePlaybook) Scope() Scope          { return ScopeUser }
func (p *CrostiniAnsiblePlaybook) Status() Status        { return p.Stat }
func (p *CrostiniAnsiblePlaybook) UntypedV() interface{} { return p.Val }
func (p *CrostiniAnsiblePlaybook) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *CrostiniAnsiblePlaybookValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *CrostiniAnsiblePlaybookValue", m)
	}
	return v, nil
}
func (p *CrostiniAnsiblePlaybook) Equal(iface interface{}) bool {
	v, ok := iface.(*CrostiniAnsiblePlaybookValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 640. WebRtcLocalIpsAllowedUrls
///////////////////////////////////////////////////////////////////////////////
type WebRtcLocalIpsAllowedUrls struct {
	Stat Status
	Val  []string
}

func (p *WebRtcLocalIpsAllowedUrls) Name() string          { return "WebRtcLocalIpsAllowedUrls" }
func (p *WebRtcLocalIpsAllowedUrls) Field() string         { return "" }
func (p *WebRtcLocalIpsAllowedUrls) Scope() Scope          { return ScopeUser }
func (p *WebRtcLocalIpsAllowedUrls) Status() Status        { return p.Stat }
func (p *WebRtcLocalIpsAllowedUrls) UntypedV() interface{} { return p.Val }
func (p *WebRtcLocalIpsAllowedUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *WebRtcLocalIpsAllowedUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 641. PerAppTimeLimits
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PerAppTimeLimits struct {
	Stat Status
	Val  *PerAppTimeLimitsValue
}

type PerAppTimeLimitsValue struct {
	ActivityReportingEnabled bool                              `json:"activity_reporting_enabled"`
	AppLimits                []*PerAppTimeLimitsValueAppLimits `json:"app_limits,omitempty"`
	ResetAt                  *PerAppTimeLimitsValueResetAt     `json:"reset_at"`
}

type PerAppTimeLimitsValueAppLimits struct {
	AppInfo           *PerAppTimeLimitsValueAppLimitsAppInfo `json:"app_info"`
	DailyLimitMins    int                                    `json:"daily_limit_mins"`
	LastUpdatedMillis string                                 `json:"last_updated_millis"`
	Restriction       string                                 `json:"restriction"`
}

type PerAppTimeLimitsValueAppLimitsAppInfo struct {
	AppId   string `json:"app_id"`
	AppType string `json:"app_type"`
}

type PerAppTimeLimitsValueResetAt struct {
	Hour   int `json:"hour"`
	Minute int `json:"minute"`
}

func (p *PerAppTimeLimits) Name() string          { return "PerAppTimeLimits" }
func (p *PerAppTimeLimits) Field() string         { return "" }
func (p *PerAppTimeLimits) Scope() Scope          { return ScopeUser }
func (p *PerAppTimeLimits) Status() Status        { return p.Stat }
func (p *PerAppTimeLimits) UntypedV() interface{} { return p.Val }
func (p *PerAppTimeLimits) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *PerAppTimeLimitsValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *PerAppTimeLimitsValue", m)
	}
	return v, nil
}
func (p *PerAppTimeLimits) Equal(iface interface{}) bool {
	v, ok := iface.(*PerAppTimeLimitsValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 642. DnsOverHttpsTemplates
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DnsOverHttpsTemplates struct {
	Stat Status
	Val  string
}

func (p *DnsOverHttpsTemplates) Name() string          { return "DnsOverHttpsTemplates" }
func (p *DnsOverHttpsTemplates) Field() string         { return "" }
func (p *DnsOverHttpsTemplates) Scope() Scope          { return ScopeUser }
func (p *DnsOverHttpsTemplates) Status() Status        { return p.Stat }
func (p *DnsOverHttpsTemplates) UntypedV() interface{} { return p.Val }
func (p *DnsOverHttpsTemplates) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DnsOverHttpsTemplates) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 643. GloballyScopeHTTPAuthCacheEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type GloballyScopeHTTPAuthCacheEnabled struct {
	Stat Status
	Val  bool
}

func (p *GloballyScopeHTTPAuthCacheEnabled) Name() string          { return "GloballyScopeHTTPAuthCacheEnabled" }
func (p *GloballyScopeHTTPAuthCacheEnabled) Field() string         { return "" }
func (p *GloballyScopeHTTPAuthCacheEnabled) Scope() Scope          { return ScopeUser }
func (p *GloballyScopeHTTPAuthCacheEnabled) Status() Status        { return p.Stat }
func (p *GloballyScopeHTTPAuthCacheEnabled) UntypedV() interface{} { return p.Val }
func (p *GloballyScopeHTTPAuthCacheEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *GloballyScopeHTTPAuthCacheEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 645. ClickToCallEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ClickToCallEnabled struct {
	Stat Status
	Val  bool
}

func (p *ClickToCallEnabled) Name() string          { return "ClickToCallEnabled" }
func (p *ClickToCallEnabled) Field() string         { return "" }
func (p *ClickToCallEnabled) Scope() Scope          { return ScopeUser }
func (p *ClickToCallEnabled) Status() Status        { return p.Stat }
func (p *ClickToCallEnabled) UntypedV() interface{} { return p.Val }
func (p *ClickToCallEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ClickToCallEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 646. DeviceLoginScreenShowOptionsInSystemTrayMenu
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenShowOptionsInSystemTrayMenu struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenShowOptionsInSystemTrayMenu) Name() string {
	return "DeviceLoginScreenShowOptionsInSystemTrayMenu"
}
func (p *DeviceLoginScreenShowOptionsInSystemTrayMenu) Field() string {
	return "accessibility_settings.login_screen_show_options_in_system_tray_menu_enabled"
}
func (p *DeviceLoginScreenShowOptionsInSystemTrayMenu) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenShowOptionsInSystemTrayMenu) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenShowOptionsInSystemTrayMenu) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenShowOptionsInSystemTrayMenu) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenShowOptionsInSystemTrayMenu) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 647. PrinterTypeDenyList
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrinterTypeDenyList struct {
	Stat Status
	Val  []string
}

func (p *PrinterTypeDenyList) Name() string          { return "PrinterTypeDenyList" }
func (p *PrinterTypeDenyList) Field() string         { return "" }
func (p *PrinterTypeDenyList) Scope() Scope          { return ScopeUser }
func (p *PrinterTypeDenyList) Status() Status        { return p.Stat }
func (p *PrinterTypeDenyList) UntypedV() interface{} { return p.Val }
func (p *PrinterTypeDenyList) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *PrinterTypeDenyList) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 649. SyncTypesListDisabled
///////////////////////////////////////////////////////////////////////////////
type SyncTypesListDisabled struct {
	Stat Status
	Val  []string
}

func (p *SyncTypesListDisabled) Name() string          { return "SyncTypesListDisabled" }
func (p *SyncTypesListDisabled) Field() string         { return "" }
func (p *SyncTypesListDisabled) Scope() Scope          { return ScopeUser }
func (p *SyncTypesListDisabled) Status() Status        { return p.Stat }
func (p *SyncTypesListDisabled) UntypedV() interface{} { return p.Val }
func (p *SyncTypesListDisabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *SyncTypesListDisabled) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 650. AmbientAuthenticationInPrivateModesEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AmbientAuthenticationInPrivateModesEnabled struct {
	Stat Status
	Val  int
}

func (p *AmbientAuthenticationInPrivateModesEnabled) Name() string {
	return "AmbientAuthenticationInPrivateModesEnabled"
}
func (p *AmbientAuthenticationInPrivateModesEnabled) Field() string         { return "" }
func (p *AmbientAuthenticationInPrivateModesEnabled) Scope() Scope          { return ScopeUser }
func (p *AmbientAuthenticationInPrivateModesEnabled) Status() Status        { return p.Stat }
func (p *AmbientAuthenticationInPrivateModesEnabled) UntypedV() interface{} { return p.Val }
func (p *AmbientAuthenticationInPrivateModesEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *AmbientAuthenticationInPrivateModesEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 651. PaymentMethodQueryEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PaymentMethodQueryEnabled struct {
	Stat Status
	Val  bool
}

func (p *PaymentMethodQueryEnabled) Name() string          { return "PaymentMethodQueryEnabled" }
func (p *PaymentMethodQueryEnabled) Field() string         { return "" }
func (p *PaymentMethodQueryEnabled) Scope() Scope          { return ScopeUser }
func (p *PaymentMethodQueryEnabled) Status() Status        { return p.Stat }
func (p *PaymentMethodQueryEnabled) UntypedV() interface{} { return p.Val }
func (p *PaymentMethodQueryEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PaymentMethodQueryEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 652. StricterMixedContentTreatmentEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type StricterMixedContentTreatmentEnabled struct {
	Stat Status
	Val  bool
}

func (p *StricterMixedContentTreatmentEnabled) Name() string {
	return "StricterMixedContentTreatmentEnabled"
}
func (p *StricterMixedContentTreatmentEnabled) Field() string         { return "" }
func (p *StricterMixedContentTreatmentEnabled) Scope() Scope          { return ScopeUser }
func (p *StricterMixedContentTreatmentEnabled) Status() Status        { return p.Stat }
func (p *StricterMixedContentTreatmentEnabled) UntypedV() interface{} { return p.Val }
func (p *StricterMixedContentTreatmentEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *StricterMixedContentTreatmentEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 653. NTPCustomBackgroundEnabled
// This policy has a default value of True.
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type NTPCustomBackgroundEnabled struct {
	Stat Status
	Val  bool
}

func (p *NTPCustomBackgroundEnabled) Name() string          { return "NTPCustomBackgroundEnabled" }
func (p *NTPCustomBackgroundEnabled) Field() string         { return "" }
func (p *NTPCustomBackgroundEnabled) Scope() Scope          { return ScopeUser }
func (p *NTPCustomBackgroundEnabled) Status() Status        { return p.Stat }
func (p *NTPCustomBackgroundEnabled) UntypedV() interface{} { return p.Val }
func (p *NTPCustomBackgroundEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *NTPCustomBackgroundEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 654. DNSInterceptionChecksEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DNSInterceptionChecksEnabled struct {
	Stat Status
	Val  bool
}

func (p *DNSInterceptionChecksEnabled) Name() string          { return "DNSInterceptionChecksEnabled" }
func (p *DNSInterceptionChecksEnabled) Field() string         { return "" }
func (p *DNSInterceptionChecksEnabled) Scope() Scope          { return ScopeUser }
func (p *DNSInterceptionChecksEnabled) Status() Status        { return p.Stat }
func (p *DNSInterceptionChecksEnabled) UntypedV() interface{} { return p.Val }
func (p *DNSInterceptionChecksEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DNSInterceptionChecksEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 655. PrimaryMouseButtonSwitch
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrimaryMouseButtonSwitch struct {
	Stat Status
	Val  bool
}

func (p *PrimaryMouseButtonSwitch) Name() string          { return "PrimaryMouseButtonSwitch" }
func (p *PrimaryMouseButtonSwitch) Field() string         { return "" }
func (p *PrimaryMouseButtonSwitch) Scope() Scope          { return ScopeUser }
func (p *PrimaryMouseButtonSwitch) Status() Status        { return p.Stat }
func (p *PrimaryMouseButtonSwitch) UntypedV() interface{} { return p.Val }
func (p *PrimaryMouseButtonSwitch) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PrimaryMouseButtonSwitch) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 656. ReportDeviceCpuInfo
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceCpuInfo struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceCpuInfo) Name() string          { return "ReportDeviceCpuInfo" }
func (p *ReportDeviceCpuInfo) Field() string         { return "device_reporting.report_cpu_info" }
func (p *ReportDeviceCpuInfo) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceCpuInfo) Status() Status        { return p.Stat }
func (p *ReportDeviceCpuInfo) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceCpuInfo) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceCpuInfo) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 657. DeviceLoginScreenPrimaryMouseButtonSwitch
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenPrimaryMouseButtonSwitch struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenPrimaryMouseButtonSwitch) Name() string {
	return "DeviceLoginScreenPrimaryMouseButtonSwitch"
}
func (p *DeviceLoginScreenPrimaryMouseButtonSwitch) Field() string {
	return "login_screen_primary_mouse_button_switch.value"
}
func (p *DeviceLoginScreenPrimaryMouseButtonSwitch) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenPrimaryMouseButtonSwitch) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenPrimaryMouseButtonSwitch) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenPrimaryMouseButtonSwitch) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenPrimaryMouseButtonSwitch) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 659. AccessibilityShortcutsEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AccessibilityShortcutsEnabled struct {
	Stat Status
	Val  bool
}

func (p *AccessibilityShortcutsEnabled) Name() string          { return "AccessibilityShortcutsEnabled" }
func (p *AccessibilityShortcutsEnabled) Field() string         { return "" }
func (p *AccessibilityShortcutsEnabled) Scope() Scope          { return ScopeUser }
func (p *AccessibilityShortcutsEnabled) Status() Status        { return p.Stat }
func (p *AccessibilityShortcutsEnabled) UntypedV() interface{} { return p.Val }
func (p *AccessibilityShortcutsEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AccessibilityShortcutsEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 660. ReportDeviceGraphicsStatus
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceGraphicsStatus struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceGraphicsStatus) Name() string          { return "ReportDeviceGraphicsStatus" }
func (p *ReportDeviceGraphicsStatus) Field() string         { return "device_reporting.report_graphics_status" }
func (p *ReportDeviceGraphicsStatus) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceGraphicsStatus) Status() Status        { return p.Stat }
func (p *ReportDeviceGraphicsStatus) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceGraphicsStatus) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceGraphicsStatus) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 661. DeviceLoginScreenAccessibilityShortcutsEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenAccessibilityShortcutsEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenAccessibilityShortcutsEnabled) Name() string {
	return "DeviceLoginScreenAccessibilityShortcutsEnabled"
}
func (p *DeviceLoginScreenAccessibilityShortcutsEnabled) Field() string {
	return "accessibility_settings.login_screen_shortcuts_enabled"
}
func (p *DeviceLoginScreenAccessibilityShortcutsEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenAccessibilityShortcutsEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenAccessibilityShortcutsEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenAccessibilityShortcutsEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenAccessibilityShortcutsEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 665. ReportDeviceCrashReportInfo
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceCrashReportInfo struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceCrashReportInfo) Name() string { return "ReportDeviceCrashReportInfo" }
func (p *ReportDeviceCrashReportInfo) Field() string {
	return "device_reporting.report_crash_report_info"
}
func (p *ReportDeviceCrashReportInfo) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceCrashReportInfo) Status() Status        { return p.Stat }
func (p *ReportDeviceCrashReportInfo) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceCrashReportInfo) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceCrashReportInfo) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 666. ScreenCaptureAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ScreenCaptureAllowed struct {
	Stat Status
	Val  bool
}

func (p *ScreenCaptureAllowed) Name() string          { return "ScreenCaptureAllowed" }
func (p *ScreenCaptureAllowed) Field() string         { return "" }
func (p *ScreenCaptureAllowed) Scope() Scope          { return ScopeUser }
func (p *ScreenCaptureAllowed) Status() Status        { return p.Stat }
func (p *ScreenCaptureAllowed) UntypedV() interface{} { return p.Val }
func (p *ScreenCaptureAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ScreenCaptureAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 670. DeviceMinimumVersion
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceMinimumVersion struct {
	Stat Status
	Val  *DeviceMinimumVersionValue
}

type DeviceMinimumVersionValue struct {
	Requirements            []*DeviceMinimumVersionValueRequirements `json:"requirements,omitempty"`
	UnmanagedUserRestricted bool                                     `json:"unmanaged_user_restricted"`
}

type DeviceMinimumVersionValueRequirements struct {
	AueWarningPeriod int    `json:"aue_warning_period"`
	ChromeosVersion  string `json:"chromeos_version"`
	WarningPeriod    int    `json:"warning_period"`
}

func (p *DeviceMinimumVersion) Name() string          { return "DeviceMinimumVersion" }
func (p *DeviceMinimumVersion) Field() string         { return "device_minimum_version.value" }
func (p *DeviceMinimumVersion) Scope() Scope          { return ScopeDevice }
func (p *DeviceMinimumVersion) Status() Status        { return p.Stat }
func (p *DeviceMinimumVersion) UntypedV() interface{} { return p.Val }
func (p *DeviceMinimumVersion) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *DeviceMinimumVersionValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *DeviceMinimumVersionValue", m)
	}
	return v, nil
}
func (p *DeviceMinimumVersion) Equal(iface interface{}) bool {
	v, ok := iface.(*DeviceMinimumVersionValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 671. ReportDeviceTimezoneInfo
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceTimezoneInfo struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceTimezoneInfo) Name() string          { return "ReportDeviceTimezoneInfo" }
func (p *ReportDeviceTimezoneInfo) Field() string         { return "device_reporting.report_timezone_info" }
func (p *ReportDeviceTimezoneInfo) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceTimezoneInfo) Status() Status        { return p.Stat }
func (p *ReportDeviceTimezoneInfo) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceTimezoneInfo) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceTimezoneInfo) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 672. SystemProxySettings
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SystemProxySettings struct {
	Stat Status
	Val  *SystemProxySettingsValue
}

type SystemProxySettingsValue struct {
	PolicyCredentialsAuthSchemes []string `json:"policy_credentials_auth_schemes,omitempty"`
	SystemProxyEnabled           bool     `json:"system_proxy_enabled"`
	SystemServicesPassword       string   `json:"system_services_password"`
	SystemServicesUsername       string   `json:"system_services_username"`
}

func (p *SystemProxySettings) Name() string          { return "SystemProxySettings" }
func (p *SystemProxySettings) Field() string         { return "system_proxy_settings.system_proxy_settings" }
func (p *SystemProxySettings) Scope() Scope          { return ScopeDevice }
func (p *SystemProxySettings) Status() Status        { return p.Stat }
func (p *SystemProxySettings) UntypedV() interface{} { return p.Val }
func (p *SystemProxySettings) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *SystemProxySettingsValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *SystemProxySettingsValue", m)
	}
	return v, nil
}
func (p *SystemProxySettings) Equal(iface interface{}) bool {
	v, ok := iface.(*SystemProxySettingsValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 674. DeviceChromeVariations
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceChromeVariations struct {
	Stat Status
	Val  int
}

func (p *DeviceChromeVariations) Name() string          { return "DeviceChromeVariations" }
func (p *DeviceChromeVariations) Field() string         { return "device_chrome_variations_type.value" }
func (p *DeviceChromeVariations) Scope() Scope          { return ScopeDevice }
func (p *DeviceChromeVariations) Status() Status        { return p.Stat }
func (p *DeviceChromeVariations) UntypedV() interface{} { return p.Val }
func (p *DeviceChromeVariations) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceChromeVariations) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 676. DeviceLoginScreenPrivacyScreenEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenPrivacyScreenEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenPrivacyScreenEnabled) Name() string {
	return "DeviceLoginScreenPrivacyScreenEnabled"
}
func (p *DeviceLoginScreenPrivacyScreenEnabled) Field() string {
	return "device_login_screen_privacy_screen_enabled.enabled"
}
func (p *DeviceLoginScreenPrivacyScreenEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenPrivacyScreenEnabled) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenPrivacyScreenEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenPrivacyScreenEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenPrivacyScreenEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 677. PrivacyScreenEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrivacyScreenEnabled struct {
	Stat Status
	Val  bool
}

func (p *PrivacyScreenEnabled) Name() string          { return "PrivacyScreenEnabled" }
func (p *PrivacyScreenEnabled) Field() string         { return "" }
func (p *PrivacyScreenEnabled) Scope() Scope          { return ScopeUser }
func (p *PrivacyScreenEnabled) Status() Status        { return p.Stat }
func (p *PrivacyScreenEnabled) UntypedV() interface{} { return p.Val }
func (p *PrivacyScreenEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PrivacyScreenEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 679. ForceLogoutUnauthenticatedUserEnabled
///////////////////////////////////////////////////////////////////////////////
type ForceLogoutUnauthenticatedUserEnabled struct {
	Stat Status
	Val  bool
}

func (p *ForceLogoutUnauthenticatedUserEnabled) Name() string {
	return "ForceLogoutUnauthenticatedUserEnabled"
}
func (p *ForceLogoutUnauthenticatedUserEnabled) Field() string         { return "" }
func (p *ForceLogoutUnauthenticatedUserEnabled) Scope() Scope          { return ScopeUser }
func (p *ForceLogoutUnauthenticatedUserEnabled) Status() Status        { return p.Stat }
func (p *ForceLogoutUnauthenticatedUserEnabled) UntypedV() interface{} { return p.Val }
func (p *ForceLogoutUnauthenticatedUserEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ForceLogoutUnauthenticatedUserEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 680. RequiredClientCertificateForUser
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RequiredClientCertificateForUser struct {
	Stat Status
	Val  []*RequiredClientCertificateForUserValue
}

type RequiredClientCertificateForUserValue struct {
	CertProfileId                string `json:"cert_profile_id"`
	EnableRemoteAttestationCheck bool   `json:"enable_remote_attestation_check"`
	KeyAlgorithm                 string `json:"key_algorithm"`
	Name                         string `json:"name"`
	PolicyVersion                string `json:"policy_version"`
	RenewalPeriodSeconds         int    `json:"renewal_period_seconds"`
}

func (p *RequiredClientCertificateForUser) Name() string          { return "RequiredClientCertificateForUser" }
func (p *RequiredClientCertificateForUser) Field() string         { return "" }
func (p *RequiredClientCertificateForUser) Scope() Scope          { return ScopeUser }
func (p *RequiredClientCertificateForUser) Status() Status        { return p.Stat }
func (p *RequiredClientCertificateForUser) UntypedV() interface{} { return p.Val }
func (p *RequiredClientCertificateForUser) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*RequiredClientCertificateForUserValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*RequiredClientCertificateForUserValue", m)
	}
	return v, nil
}
func (p *RequiredClientCertificateForUser) Equal(iface interface{}) bool {
	v, ok := iface.([]*RequiredClientCertificateForUserValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 681. RequiredClientCertificateForDevice
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RequiredClientCertificateForDevice struct {
	Stat Status
	Val  []*RequiredClientCertificateForDeviceValue
}

type RequiredClientCertificateForDeviceValue struct {
	CertProfileId                string `json:"cert_profile_id"`
	EnableRemoteAttestationCheck bool   `json:"enable_remote_attestation_check"`
	KeyAlgorithm                 string `json:"key_algorithm"`
	Name                         string `json:"name"`
	PolicyVersion                string `json:"policy_version"`
	RenewalPeriodSeconds         int    `json:"renewal_period_seconds"`
}

func (p *RequiredClientCertificateForDevice) Name() string {
	return "RequiredClientCertificateForDevice"
}
func (p *RequiredClientCertificateForDevice) Field() string {
	return "required_client_certificate_for_device.required_client_certificate_for_device"
}
func (p *RequiredClientCertificateForDevice) Scope() Scope          { return ScopeDevice }
func (p *RequiredClientCertificateForDevice) Status() Status        { return p.Stat }
func (p *RequiredClientCertificateForDevice) UntypedV() interface{} { return p.Val }
func (p *RequiredClientCertificateForDevice) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*RequiredClientCertificateForDeviceValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*RequiredClientCertificateForDeviceValue", m)
	}
	return v, nil
}
func (p *RequiredClientCertificateForDevice) Equal(iface interface{}) bool {
	v, ok := iface.([]*RequiredClientCertificateForDeviceValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 682. ReportDeviceMemoryInfo
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceMemoryInfo struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceMemoryInfo) Name() string          { return "ReportDeviceMemoryInfo" }
func (p *ReportDeviceMemoryInfo) Field() string         { return "device_reporting.report_memory_info" }
func (p *ReportDeviceMemoryInfo) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceMemoryInfo) Status() Status        { return p.Stat }
func (p *ReportDeviceMemoryInfo) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceMemoryInfo) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceMemoryInfo) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 684. SafeBrowsingProtectionLevel
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SafeBrowsingProtectionLevel struct {
	Stat Status
	Val  int
}

func (p *SafeBrowsingProtectionLevel) Name() string          { return "SafeBrowsingProtectionLevel" }
func (p *SafeBrowsingProtectionLevel) Field() string         { return "" }
func (p *SafeBrowsingProtectionLevel) Scope() Scope          { return ScopeUser }
func (p *SafeBrowsingProtectionLevel) Status() Status        { return p.Stat }
func (p *SafeBrowsingProtectionLevel) UntypedV() interface{} { return p.Val }
func (p *SafeBrowsingProtectionLevel) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *SafeBrowsingProtectionLevel) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 685. AdvancedProtectionAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AdvancedProtectionAllowed struct {
	Stat Status
	Val  bool
}

func (p *AdvancedProtectionAllowed) Name() string          { return "AdvancedProtectionAllowed" }
func (p *AdvancedProtectionAllowed) Field() string         { return "" }
func (p *AdvancedProtectionAllowed) Scope() Scope          { return ScopeUser }
func (p *AdvancedProtectionAllowed) Status() Status        { return p.Stat }
func (p *AdvancedProtectionAllowed) UntypedV() interface{} { return p.Val }
func (p *AdvancedProtectionAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AdvancedProtectionAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 686. ReportDeviceBacklightInfo
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceBacklightInfo struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceBacklightInfo) Name() string          { return "ReportDeviceBacklightInfo" }
func (p *ReportDeviceBacklightInfo) Field() string         { return "device_reporting.report_backlight_info" }
func (p *ReportDeviceBacklightInfo) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceBacklightInfo) Status() Status        { return p.Stat }
func (p *ReportDeviceBacklightInfo) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceBacklightInfo) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceBacklightInfo) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 687. ScrollToTextFragmentEnabled
///////////////////////////////////////////////////////////////////////////////
type ScrollToTextFragmentEnabled struct {
	Stat Status
	Val  bool
}

func (p *ScrollToTextFragmentEnabled) Name() string          { return "ScrollToTextFragmentEnabled" }
func (p *ScrollToTextFragmentEnabled) Field() string         { return "" }
func (p *ScrollToTextFragmentEnabled) Scope() Scope          { return ScopeUser }
func (p *ScrollToTextFragmentEnabled) Status() Status        { return p.Stat }
func (p *ScrollToTextFragmentEnabled) UntypedV() interface{} { return p.Val }
func (p *ScrollToTextFragmentEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ScrollToTextFragmentEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 689. SystemFeaturesDisableList
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SystemFeaturesDisableList struct {
	Stat Status
	Val  []string
}

func (p *SystemFeaturesDisableList) Name() string          { return "SystemFeaturesDisableList" }
func (p *SystemFeaturesDisableList) Field() string         { return "" }
func (p *SystemFeaturesDisableList) Scope() Scope          { return ScopeUser }
func (p *SystemFeaturesDisableList) Status() Status        { return p.Stat }
func (p *SystemFeaturesDisableList) UntypedV() interface{} { return p.Val }
func (p *SystemFeaturesDisableList) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *SystemFeaturesDisableList) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 690. CrostiniArcAdbSideloadingAllowed
// This policy can be modified without rebooting.
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type CrostiniArcAdbSideloadingAllowed struct {
	Stat Status
	Val  int
}

func (p *CrostiniArcAdbSideloadingAllowed) Name() string          { return "CrostiniArcAdbSideloadingAllowed" }
func (p *CrostiniArcAdbSideloadingAllowed) Field() string         { return "" }
func (p *CrostiniArcAdbSideloadingAllowed) Scope() Scope          { return ScopeUser }
func (p *CrostiniArcAdbSideloadingAllowed) Status() Status        { return p.Stat }
func (p *CrostiniArcAdbSideloadingAllowed) UntypedV() interface{} { return p.Val }
func (p *CrostiniArcAdbSideloadingAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *CrostiniArcAdbSideloadingAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 691. FloatingAccessibilityMenuEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type FloatingAccessibilityMenuEnabled struct {
	Stat Status
	Val  bool
}

func (p *FloatingAccessibilityMenuEnabled) Name() string          { return "FloatingAccessibilityMenuEnabled" }
func (p *FloatingAccessibilityMenuEnabled) Field() string         { return "" }
func (p *FloatingAccessibilityMenuEnabled) Scope() Scope          { return ScopeUser }
func (p *FloatingAccessibilityMenuEnabled) Status() Status        { return p.Stat }
func (p *FloatingAccessibilityMenuEnabled) UntypedV() interface{} { return p.Val }
func (p *FloatingAccessibilityMenuEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *FloatingAccessibilityMenuEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 692. PrintingMaxSheetsAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintingMaxSheetsAllowed struct {
	Stat Status
	Val  int
}

func (p *PrintingMaxSheetsAllowed) Name() string          { return "PrintingMaxSheetsAllowed" }
func (p *PrintingMaxSheetsAllowed) Field() string         { return "" }
func (p *PrintingMaxSheetsAllowed) Scope() Scope          { return ScopeUser }
func (p *PrintingMaxSheetsAllowed) Status() Status        { return p.Stat }
func (p *PrintingMaxSheetsAllowed) UntypedV() interface{} { return p.Val }
func (p *PrintingMaxSheetsAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *PrintingMaxSheetsAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 693. OnFileAttachedEnterpriseConnector
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type OnFileAttachedEnterpriseConnector struct {
	Stat Status
	Val  []*OnFileAttachedEnterpriseConnectorValue
}

type OnFileAttachedEnterpriseConnectorValue struct {
	BlockLargeFiles          bool                                                    `json:"block_large_files"`
	BlockPasswordProtected   bool                                                    `json:"block_password_protected"`
	BlockUntilVerdict        int                                                     `json:"block_until_verdict"`
	CustomMessages           []*OnFileAttachedEnterpriseConnectorValueCustomMessages `json:"custom_messages,omitempty"`
	Disable                  []*OnFileAttachedEnterpriseConnectorValueDisable        `json:"disable,omitempty"`
	Enable                   []*OnFileAttachedEnterpriseConnectorValueEnable         `json:"enable,omitempty"`
	RequireJustificationTags []string                                                `json:"require_justification_tags,omitempty"`
	ServiceProvider          string                                                  `json:"service_provider"`
}

type OnFileAttachedEnterpriseConnectorValueEnable struct {
	Tags    []string `json:"tags,omitempty"`
	UrlList []string `json:"url_list,omitempty"`
}

type OnFileAttachedEnterpriseConnectorValueDisable struct {
	Tags    []string `json:"tags,omitempty"`
	UrlList []string `json:"url_list,omitempty"`
}

type OnFileAttachedEnterpriseConnectorValueCustomMessages struct {
	Language     string `json:"language"`
	LearnMoreUrl string `json:"learn_more_url"`
	Message      string `json:"message"`
	Tag          string `json:"tag"`
}

func (p *OnFileAttachedEnterpriseConnector) Name() string          { return "OnFileAttachedEnterpriseConnector" }
func (p *OnFileAttachedEnterpriseConnector) Field() string         { return "" }
func (p *OnFileAttachedEnterpriseConnector) Scope() Scope          { return ScopeUser }
func (p *OnFileAttachedEnterpriseConnector) Status() Status        { return p.Stat }
func (p *OnFileAttachedEnterpriseConnector) UntypedV() interface{} { return p.Val }
func (p *OnFileAttachedEnterpriseConnector) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*OnFileAttachedEnterpriseConnectorValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*OnFileAttachedEnterpriseConnectorValue", m)
	}
	return v, nil
}
func (p *OnFileAttachedEnterpriseConnector) Equal(iface interface{}) bool {
	v, ok := iface.([]*OnFileAttachedEnterpriseConnectorValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 695. DeviceCrostiniArcAdbSideloadingAllowed
// This policy can be modified without rebooting.
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type DeviceCrostiniArcAdbSideloadingAllowed struct {
	Stat Status
	Val  int
}

func (p *DeviceCrostiniArcAdbSideloadingAllowed) Name() string {
	return "DeviceCrostiniArcAdbSideloadingAllowed"
}
func (p *DeviceCrostiniArcAdbSideloadingAllowed) Field() string {
	return "device_crostini_arc_adb_sideloading_allowed.mode"
}
func (p *DeviceCrostiniArcAdbSideloadingAllowed) Scope() Scope          { return ScopeDevice }
func (p *DeviceCrostiniArcAdbSideloadingAllowed) Status() Status        { return p.Stat }
func (p *DeviceCrostiniArcAdbSideloadingAllowed) UntypedV() interface{} { return p.Val }
func (p *DeviceCrostiniArcAdbSideloadingAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceCrostiniArcAdbSideloadingAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 696. OnFileDownloadedEnterpriseConnector
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type OnFileDownloadedEnterpriseConnector struct {
	Stat Status
	Val  []*OnFileDownloadedEnterpriseConnectorValue
}

type OnFileDownloadedEnterpriseConnectorValue struct {
	BlockLargeFiles          bool                                                      `json:"block_large_files"`
	BlockPasswordProtected   bool                                                      `json:"block_password_protected"`
	BlockUntilVerdict        int                                                       `json:"block_until_verdict"`
	CustomMessages           []*OnFileDownloadedEnterpriseConnectorValueCustomMessages `json:"custom_messages,omitempty"`
	Disable                  []*OnFileDownloadedEnterpriseConnectorValueDisable        `json:"disable,omitempty"`
	Enable                   []*OnFileDownloadedEnterpriseConnectorValueEnable         `json:"enable,omitempty"`
	RequireJustificationTags []string                                                  `json:"require_justification_tags,omitempty"`
	ServiceProvider          string                                                    `json:"service_provider"`
}

type OnFileDownloadedEnterpriseConnectorValueEnable struct {
	Tags    []string `json:"tags,omitempty"`
	UrlList []string `json:"url_list,omitempty"`
}

type OnFileDownloadedEnterpriseConnectorValueDisable struct {
	Tags    []string `json:"tags,omitempty"`
	UrlList []string `json:"url_list,omitempty"`
}

type OnFileDownloadedEnterpriseConnectorValueCustomMessages struct {
	Language     string `json:"language"`
	LearnMoreUrl string `json:"learn_more_url"`
	Message      string `json:"message"`
	Tag          string `json:"tag"`
}

func (p *OnFileDownloadedEnterpriseConnector) Name() string {
	return "OnFileDownloadedEnterpriseConnector"
}
func (p *OnFileDownloadedEnterpriseConnector) Field() string         { return "" }
func (p *OnFileDownloadedEnterpriseConnector) Scope() Scope          { return ScopeUser }
func (p *OnFileDownloadedEnterpriseConnector) Status() Status        { return p.Stat }
func (p *OnFileDownloadedEnterpriseConnector) UntypedV() interface{} { return p.Val }
func (p *OnFileDownloadedEnterpriseConnector) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*OnFileDownloadedEnterpriseConnectorValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*OnFileDownloadedEnterpriseConnectorValue", m)
	}
	return v, nil
}
func (p *OnFileDownloadedEnterpriseConnector) Equal(iface interface{}) bool {
	v, ok := iface.([]*OnFileDownloadedEnterpriseConnectorValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 697. OnBulkDataEntryEnterpriseConnector
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type OnBulkDataEntryEnterpriseConnector struct {
	Stat Status
	Val  []*OnBulkDataEntryEnterpriseConnectorValue
}

type OnBulkDataEntryEnterpriseConnectorValue struct {
	BlockUntilVerdict        int                                                      `json:"block_until_verdict"`
	CustomMessages           []*OnBulkDataEntryEnterpriseConnectorValueCustomMessages `json:"custom_messages,omitempty"`
	Disable                  []*OnBulkDataEntryEnterpriseConnectorValueDisable        `json:"disable,omitempty"`
	Enable                   []*OnBulkDataEntryEnterpriseConnectorValueEnable         `json:"enable,omitempty"`
	MinimumDataSize          int                                                      `json:"minimum_data_size"`
	RequireJustificationTags []string                                                 `json:"require_justification_tags,omitempty"`
	ServiceProvider          string                                                   `json:"service_provider"`
}

type OnBulkDataEntryEnterpriseConnectorValueEnable struct {
	Tags    []string `json:"tags,omitempty"`
	UrlList []string `json:"url_list,omitempty"`
}

type OnBulkDataEntryEnterpriseConnectorValueDisable struct {
	Tags    []string `json:"tags,omitempty"`
	UrlList []string `json:"url_list,omitempty"`
}

type OnBulkDataEntryEnterpriseConnectorValueCustomMessages struct {
	Language     string `json:"language"`
	LearnMoreUrl string `json:"learn_more_url"`
	Message      string `json:"message"`
	Tag          string `json:"tag"`
}

func (p *OnBulkDataEntryEnterpriseConnector) Name() string {
	return "OnBulkDataEntryEnterpriseConnector"
}
func (p *OnBulkDataEntryEnterpriseConnector) Field() string         { return "" }
func (p *OnBulkDataEntryEnterpriseConnector) Scope() Scope          { return ScopeUser }
func (p *OnBulkDataEntryEnterpriseConnector) Status() Status        { return p.Stat }
func (p *OnBulkDataEntryEnterpriseConnector) UntypedV() interface{} { return p.Val }
func (p *OnBulkDataEntryEnterpriseConnector) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*OnBulkDataEntryEnterpriseConnectorValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*OnBulkDataEntryEnterpriseConnectorValue", m)
	}
	return v, nil
}
func (p *OnBulkDataEntryEnterpriseConnector) Equal(iface interface{}) bool {
	v, ok := iface.([]*OnBulkDataEntryEnterpriseConnectorValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 698. PluginVmUserId
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PluginVmUserId struct {
	Stat Status
	Val  string
}

func (p *PluginVmUserId) Name() string          { return "PluginVmUserId" }
func (p *PluginVmUserId) Field() string         { return "" }
func (p *PluginVmUserId) Scope() Scope          { return ScopeUser }
func (p *PluginVmUserId) Status() Status        { return p.Stat }
func (p *PluginVmUserId) UntypedV() interface{} { return p.Val }
func (p *PluginVmUserId) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *PluginVmUserId) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 699. OnSecurityEventEnterpriseConnector
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type OnSecurityEventEnterpriseConnector struct {
	Stat Status
	Val  []*OnSecurityEventEnterpriseConnectorValue
}

type OnSecurityEventEnterpriseConnectorValue struct {
	EnabledEventNames  []string                                                     `json:"enabled_event_names,omitempty"`
	EnabledOptInEvents []*OnSecurityEventEnterpriseConnectorValueEnabledOptInEvents `json:"enabled_opt_in_events,omitempty"`
	ServiceProvider    string                                                       `json:"service_provider"`
}

type OnSecurityEventEnterpriseConnectorValueEnabledOptInEvents struct {
	Name        string   `json:"name"`
	UrlPatterns []string `json:"url_patterns,omitempty"`
}

func (p *OnSecurityEventEnterpriseConnector) Name() string {
	return "OnSecurityEventEnterpriseConnector"
}
func (p *OnSecurityEventEnterpriseConnector) Field() string         { return "" }
func (p *OnSecurityEventEnterpriseConnector) Scope() Scope          { return ScopeUser }
func (p *OnSecurityEventEnterpriseConnector) Status() Status        { return p.Stat }
func (p *OnSecurityEventEnterpriseConnector) UntypedV() interface{} { return p.Val }
func (p *OnSecurityEventEnterpriseConnector) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*OnSecurityEventEnterpriseConnectorValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*OnSecurityEventEnterpriseConnectorValue", m)
	}
	return v, nil
}
func (p *OnSecurityEventEnterpriseConnector) Equal(iface interface{}) bool {
	v, ok := iface.([]*OnSecurityEventEnterpriseConnectorValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 700. AutoOpenFileTypes
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AutoOpenFileTypes struct {
	Stat Status
	Val  []string
}

func (p *AutoOpenFileTypes) Name() string          { return "AutoOpenFileTypes" }
func (p *AutoOpenFileTypes) Field() string         { return "" }
func (p *AutoOpenFileTypes) Scope() Scope          { return ScopeUser }
func (p *AutoOpenFileTypes) Status() Status        { return p.Stat }
func (p *AutoOpenFileTypes) UntypedV() interface{} { return p.Val }
func (p *AutoOpenFileTypes) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *AutoOpenFileTypes) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 701. LoginDisplayPasswordButtonEnabled
// This policy has a default value of False.
///////////////////////////////////////////////////////////////////////////////
type LoginDisplayPasswordButtonEnabled struct {
	Stat Status
	Val  bool
}

func (p *LoginDisplayPasswordButtonEnabled) Name() string          { return "LoginDisplayPasswordButtonEnabled" }
func (p *LoginDisplayPasswordButtonEnabled) Field() string         { return "" }
func (p *LoginDisplayPasswordButtonEnabled) Scope() Scope          { return ScopeUser }
func (p *LoginDisplayPasswordButtonEnabled) Status() Status        { return p.Stat }
func (p *LoginDisplayPasswordButtonEnabled) UntypedV() interface{} { return p.Val }
func (p *LoginDisplayPasswordButtonEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *LoginDisplayPasswordButtonEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 702. ReportDeviceAppInfo
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceAppInfo struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceAppInfo) Name() string          { return "ReportDeviceAppInfo" }
func (p *ReportDeviceAppInfo) Field() string         { return "device_reporting.report_app_info" }
func (p *ReportDeviceAppInfo) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceAppInfo) Status() Status        { return p.Stat }
func (p *ReportDeviceAppInfo) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceAppInfo) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceAppInfo) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 703. AccessibilityImageLabelsEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AccessibilityImageLabelsEnabled struct {
	Stat Status
	Val  bool
}

func (p *AccessibilityImageLabelsEnabled) Name() string          { return "AccessibilityImageLabelsEnabled" }
func (p *AccessibilityImageLabelsEnabled) Field() string         { return "" }
func (p *AccessibilityImageLabelsEnabled) Scope() Scope          { return ScopeUser }
func (p *AccessibilityImageLabelsEnabled) Status() Status        { return p.Stat }
func (p *AccessibilityImageLabelsEnabled) UntypedV() interface{} { return p.Val }
func (p *AccessibilityImageLabelsEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AccessibilityImageLabelsEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 705. UserPluginVmAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type UserPluginVmAllowed struct {
	Stat Status
	Val  bool
}

func (p *UserPluginVmAllowed) Name() string          { return "UserPluginVmAllowed" }
func (p *UserPluginVmAllowed) Field() string         { return "" }
func (p *UserPluginVmAllowed) Scope() Scope          { return ScopeUser }
func (p *UserPluginVmAllowed) Status() Status        { return p.Stat }
func (p *UserPluginVmAllowed) UntypedV() interface{} { return p.Val }
func (p *UserPluginVmAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *UserPluginVmAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 707. AutoOpenAllowedForURLs
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AutoOpenAllowedForURLs struct {
	Stat Status
	Val  []string
}

func (p *AutoOpenAllowedForURLs) Name() string          { return "AutoOpenAllowedForURLs" }
func (p *AutoOpenAllowedForURLs) Field() string         { return "" }
func (p *AutoOpenAllowedForURLs) Scope() Scope          { return ScopeUser }
func (p *AutoOpenAllowedForURLs) Status() Status        { return p.Stat }
func (p *AutoOpenAllowedForURLs) UntypedV() interface{} { return p.Val }
func (p *AutoOpenAllowedForURLs) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *AutoOpenAllowedForURLs) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 708. ReportDeviceBluetoothInfo
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceBluetoothInfo struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceBluetoothInfo) Name() string          { return "ReportDeviceBluetoothInfo" }
func (p *ReportDeviceBluetoothInfo) Field() string         { return "device_reporting.report_bluetooth_info" }
func (p *ReportDeviceBluetoothInfo) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceBluetoothInfo) Status() Status        { return p.Stat }
func (p *ReportDeviceBluetoothInfo) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceBluetoothInfo) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceBluetoothInfo) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 709. ReportDeviceFanInfo
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceFanInfo struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceFanInfo) Name() string          { return "ReportDeviceFanInfo" }
func (p *ReportDeviceFanInfo) Field() string         { return "device_reporting.report_fan_info" }
func (p *ReportDeviceFanInfo) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceFanInfo) Status() Status        { return p.Stat }
func (p *ReportDeviceFanInfo) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceFanInfo) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceFanInfo) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 710. ReportDeviceVpdInfo
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceVpdInfo struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceVpdInfo) Name() string          { return "ReportDeviceVpdInfo" }
func (p *ReportDeviceVpdInfo) Field() string         { return "device_reporting.report_vpd_info" }
func (p *ReportDeviceVpdInfo) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceVpdInfo) Status() Status        { return p.Stat }
func (p *ReportDeviceVpdInfo) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceVpdInfo) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceVpdInfo) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 711. EnableExperimentalPolicies
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type EnableExperimentalPolicies struct {
	Stat Status
	Val  []string
}

func (p *EnableExperimentalPolicies) Name() string          { return "EnableExperimentalPolicies" }
func (p *EnableExperimentalPolicies) Field() string         { return "" }
func (p *EnableExperimentalPolicies) Scope() Scope          { return ScopeUser }
func (p *EnableExperimentalPolicies) Status() Status        { return p.Stat }
func (p *EnableExperimentalPolicies) UntypedV() interface{} { return p.Val }
func (p *EnableExperimentalPolicies) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *EnableExperimentalPolicies) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 712. PluginVmDataCollectionAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PluginVmDataCollectionAllowed struct {
	Stat Status
	Val  bool
}

func (p *PluginVmDataCollectionAllowed) Name() string          { return "PluginVmDataCollectionAllowed" }
func (p *PluginVmDataCollectionAllowed) Field() string         { return "" }
func (p *PluginVmDataCollectionAllowed) Scope() Scope          { return ScopeUser }
func (p *PluginVmDataCollectionAllowed) Status() Status        { return p.Stat }
func (p *PluginVmDataCollectionAllowed) UntypedV() interface{} { return p.Val }
func (p *PluginVmDataCollectionAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PluginVmDataCollectionAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 713. IntensiveWakeUpThrottlingEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type IntensiveWakeUpThrottlingEnabled struct {
	Stat Status
	Val  bool
}

func (p *IntensiveWakeUpThrottlingEnabled) Name() string          { return "IntensiveWakeUpThrottlingEnabled" }
func (p *IntensiveWakeUpThrottlingEnabled) Field() string         { return "" }
func (p *IntensiveWakeUpThrottlingEnabled) Scope() Scope          { return ScopeUser }
func (p *IntensiveWakeUpThrottlingEnabled) Status() Status        { return p.Stat }
func (p *IntensiveWakeUpThrottlingEnabled) UntypedV() interface{} { return p.Val }
func (p *IntensiveWakeUpThrottlingEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *IntensiveWakeUpThrottlingEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 714. DeviceMinimumVersionAueMessage
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceMinimumVersionAueMessage struct {
	Stat Status
	Val  string
}

func (p *DeviceMinimumVersionAueMessage) Name() string { return "DeviceMinimumVersionAueMessage" }
func (p *DeviceMinimumVersionAueMessage) Field() string {
	return "device_minimum_version_aue_message.value"
}
func (p *DeviceMinimumVersionAueMessage) Scope() Scope          { return ScopeDevice }
func (p *DeviceMinimumVersionAueMessage) Status() Status        { return p.Stat }
func (p *DeviceMinimumVersionAueMessage) UntypedV() interface{} { return p.Val }
func (p *DeviceMinimumVersionAueMessage) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DeviceMinimumVersionAueMessage) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 715. DefaultSearchProviderContextMenuAccessAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultSearchProviderContextMenuAccessAllowed struct {
	Stat Status
	Val  bool
}

func (p *DefaultSearchProviderContextMenuAccessAllowed) Name() string {
	return "DefaultSearchProviderContextMenuAccessAllowed"
}
func (p *DefaultSearchProviderContextMenuAccessAllowed) Field() string         { return "" }
func (p *DefaultSearchProviderContextMenuAccessAllowed) Scope() Scope          { return ScopeUser }
func (p *DefaultSearchProviderContextMenuAccessAllowed) Status() Status        { return p.Stat }
func (p *DefaultSearchProviderContextMenuAccessAllowed) UntypedV() interface{} { return p.Val }
func (p *DefaultSearchProviderContextMenuAccessAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DefaultSearchProviderContextMenuAccessAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 716. CrostiniPortForwardingAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CrostiniPortForwardingAllowed struct {
	Stat Status
	Val  bool
}

func (p *CrostiniPortForwardingAllowed) Name() string          { return "CrostiniPortForwardingAllowed" }
func (p *CrostiniPortForwardingAllowed) Field() string         { return "" }
func (p *CrostiniPortForwardingAllowed) Scope() Scope          { return ScopeUser }
func (p *CrostiniPortForwardingAllowed) Status() Status        { return p.Stat }
func (p *CrostiniPortForwardingAllowed) UntypedV() interface{} { return p.Val }
func (p *CrostiniPortForwardingAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *CrostiniPortForwardingAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 717. VirtualKeyboardFeatures
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type VirtualKeyboardFeatures struct {
	Stat Status
	Val  *VirtualKeyboardFeaturesValue
}

type VirtualKeyboardFeaturesValue struct {
	AutoCompleteEnabled bool `json:"auto_complete_enabled"`
	AutoCorrectEnabled  bool `json:"auto_correct_enabled"`
	HandwritingEnabled  bool `json:"handwriting_enabled"`
	SpellCheckEnabled   bool `json:"spell_check_enabled"`
	VoiceInputEnabled   bool `json:"voice_input_enabled"`
}

func (p *VirtualKeyboardFeatures) Name() string          { return "VirtualKeyboardFeatures" }
func (p *VirtualKeyboardFeatures) Field() string         { return "" }
func (p *VirtualKeyboardFeatures) Scope() Scope          { return ScopeUser }
func (p *VirtualKeyboardFeatures) Status() Status        { return p.Stat }
func (p *VirtualKeyboardFeatures) UntypedV() interface{} { return p.Val }
func (p *VirtualKeyboardFeatures) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *VirtualKeyboardFeaturesValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *VirtualKeyboardFeaturesValue", m)
	}
	return v, nil
}
func (p *VirtualKeyboardFeatures) Equal(iface interface{}) bool {
	v, ok := iface.(*VirtualKeyboardFeaturesValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 718. PinUnlockAutosubmitEnabled
// This policy has a default value of False.
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PinUnlockAutosubmitEnabled struct {
	Stat Status
	Val  bool
}

func (p *PinUnlockAutosubmitEnabled) Name() string          { return "PinUnlockAutosubmitEnabled" }
func (p *PinUnlockAutosubmitEnabled) Field() string         { return "" }
func (p *PinUnlockAutosubmitEnabled) Scope() Scope          { return ScopeUser }
func (p *PinUnlockAutosubmitEnabled) Status() Status        { return p.Stat }
func (p *PinUnlockAutosubmitEnabled) UntypedV() interface{} { return p.Val }
func (p *PinUnlockAutosubmitEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PinUnlockAutosubmitEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 719. LockScreenReauthenticationEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type LockScreenReauthenticationEnabled struct {
	Stat Status
	Val  bool
}

func (p *LockScreenReauthenticationEnabled) Name() string          { return "LockScreenReauthenticationEnabled" }
func (p *LockScreenReauthenticationEnabled) Field() string         { return "" }
func (p *LockScreenReauthenticationEnabled) Scope() Scope          { return ScopeUser }
func (p *LockScreenReauthenticationEnabled) Status() Status        { return p.Stat }
func (p *LockScreenReauthenticationEnabled) UntypedV() interface{} { return p.Val }
func (p *LockScreenReauthenticationEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *LockScreenReauthenticationEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 720. DeletePrintJobHistoryAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeletePrintJobHistoryAllowed struct {
	Stat Status
	Val  bool
}

func (p *DeletePrintJobHistoryAllowed) Name() string          { return "DeletePrintJobHistoryAllowed" }
func (p *DeletePrintJobHistoryAllowed) Field() string         { return "" }
func (p *DeletePrintJobHistoryAllowed) Scope() Scope          { return ScopeUser }
func (p *DeletePrintJobHistoryAllowed) Status() Status        { return p.Stat }
func (p *DeletePrintJobHistoryAllowed) UntypedV() interface{} { return p.Val }
func (p *DeletePrintJobHistoryAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeletePrintJobHistoryAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 721. EmojiSuggestionEnabled
// This policy has a default value of False.
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type EmojiSuggestionEnabled struct {
	Stat Status
	Val  bool
}

func (p *EmojiSuggestionEnabled) Name() string          { return "EmojiSuggestionEnabled" }
func (p *EmojiSuggestionEnabled) Field() string         { return "" }
func (p *EmojiSuggestionEnabled) Scope() Scope          { return ScopeUser }
func (p *EmojiSuggestionEnabled) Status() Status        { return p.Stat }
func (p *EmojiSuggestionEnabled) UntypedV() interface{} { return p.Val }
func (p *EmojiSuggestionEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *EmojiSuggestionEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 723. ManagedGuestSessionPrivacyWarningsEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ManagedGuestSessionPrivacyWarningsEnabled struct {
	Stat Status
	Val  bool
}

func (p *ManagedGuestSessionPrivacyWarningsEnabled) Name() string {
	return "ManagedGuestSessionPrivacyWarningsEnabled"
}
func (p *ManagedGuestSessionPrivacyWarningsEnabled) Field() string {
	return "managed_guest_session_privacy_warnings.enabled"
}
func (p *ManagedGuestSessionPrivacyWarningsEnabled) Scope() Scope          { return ScopeDevice }
func (p *ManagedGuestSessionPrivacyWarningsEnabled) Status() Status        { return p.Stat }
func (p *ManagedGuestSessionPrivacyWarningsEnabled) UntypedV() interface{} { return p.Val }
func (p *ManagedGuestSessionPrivacyWarningsEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ManagedGuestSessionPrivacyWarningsEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 724. PluginVmRequiredFreeDiskSpace
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PluginVmRequiredFreeDiskSpace struct {
	Stat Status
	Val  int
}

func (p *PluginVmRequiredFreeDiskSpace) Name() string          { return "PluginVmRequiredFreeDiskSpace" }
func (p *PluginVmRequiredFreeDiskSpace) Field() string         { return "" }
func (p *PluginVmRequiredFreeDiskSpace) Scope() Scope          { return ScopeUser }
func (p *PluginVmRequiredFreeDiskSpace) Status() Status        { return p.Stat }
func (p *PluginVmRequiredFreeDiskSpace) UntypedV() interface{} { return p.Val }
func (p *PluginVmRequiredFreeDiskSpace) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *PluginVmRequiredFreeDiskSpace) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 726. SuggestedContentEnabled
// This policy has a default value of False.
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SuggestedContentEnabled struct {
	Stat Status
	Val  bool
}

func (p *SuggestedContentEnabled) Name() string          { return "SuggestedContentEnabled" }
func (p *SuggestedContentEnabled) Field() string         { return "" }
func (p *SuggestedContentEnabled) Scope() Scope          { return ScopeUser }
func (p *SuggestedContentEnabled) Status() Status        { return p.Stat }
func (p *SuggestedContentEnabled) UntypedV() interface{} { return p.Val }
func (p *SuggestedContentEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SuggestedContentEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 727. ExtensionInstallEventLoggingEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ExtensionInstallEventLoggingEnabled struct {
	Stat Status
	Val  bool
}

func (p *ExtensionInstallEventLoggingEnabled) Name() string {
	return "ExtensionInstallEventLoggingEnabled"
}
func (p *ExtensionInstallEventLoggingEnabled) Field() string         { return "" }
func (p *ExtensionInstallEventLoggingEnabled) Scope() Scope          { return ScopeUser }
func (p *ExtensionInstallEventLoggingEnabled) Status() Status        { return p.Stat }
func (p *ExtensionInstallEventLoggingEnabled) UntypedV() interface{} { return p.Val }
func (p *ExtensionInstallEventLoggingEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ExtensionInstallEventLoggingEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 728. EnterpriseRealTimeUrlCheckMode
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type EnterpriseRealTimeUrlCheckMode struct {
	Stat Status
	Val  int
}

func (p *EnterpriseRealTimeUrlCheckMode) Name() string          { return "EnterpriseRealTimeUrlCheckMode" }
func (p *EnterpriseRealTimeUrlCheckMode) Field() string         { return "" }
func (p *EnterpriseRealTimeUrlCheckMode) Scope() Scope          { return ScopeUser }
func (p *EnterpriseRealTimeUrlCheckMode) Status() Status        { return p.Stat }
func (p *EnterpriseRealTimeUrlCheckMode) UntypedV() interface{} { return p.Val }
func (p *EnterpriseRealTimeUrlCheckMode) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *EnterpriseRealTimeUrlCheckMode) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 729. AssistantOnboardingMode
///////////////////////////////////////////////////////////////////////////////
type AssistantOnboardingMode struct {
	Stat Status
	Val  string
}

func (p *AssistantOnboardingMode) Name() string          { return "AssistantOnboardingMode" }
func (p *AssistantOnboardingMode) Field() string         { return "" }
func (p *AssistantOnboardingMode) Scope() Scope          { return ScopeUser }
func (p *AssistantOnboardingMode) Status() Status        { return p.Stat }
func (p *AssistantOnboardingMode) UntypedV() interface{} { return p.Val }
func (p *AssistantOnboardingMode) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *AssistantOnboardingMode) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 730. DeviceExternalPrintServers
// This policy can be modified without rebooting.
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type DeviceExternalPrintServers struct {
	Stat Status
	Val  *DeviceExternalPrintServersValue
}

type DeviceExternalPrintServersValue struct {
	Hash string `json:"hash"`
	Url  string `json:"url"`
}

func (p *DeviceExternalPrintServers) Name() string          { return "DeviceExternalPrintServers" }
func (p *DeviceExternalPrintServers) Field() string         { return "external_print_servers.external_policy" }
func (p *DeviceExternalPrintServers) Scope() Scope          { return ScopeDevice }
func (p *DeviceExternalPrintServers) Status() Status        { return p.Stat }
func (p *DeviceExternalPrintServers) UntypedV() interface{} { return p.Val }
func (p *DeviceExternalPrintServers) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *DeviceExternalPrintServersValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *DeviceExternalPrintServersValue", m)
	}
	return v, nil
}
func (p *DeviceExternalPrintServers) Equal(iface interface{}) bool {
	v, ok := iface.(*DeviceExternalPrintServersValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 731. DeviceExternalPrintServersAllowlist
// This policy can be modified without rebooting.
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type DeviceExternalPrintServersAllowlist struct {
	Stat Status
	Val  []string
}

func (p *DeviceExternalPrintServersAllowlist) Name() string {
	return "DeviceExternalPrintServersAllowlist"
}
func (p *DeviceExternalPrintServersAllowlist) Field() string {
	return "external_print_servers_allowlist.allowlist"
}
func (p *DeviceExternalPrintServersAllowlist) Scope() Scope          { return ScopeDevice }
func (p *DeviceExternalPrintServersAllowlist) Status() Status        { return p.Stat }
func (p *DeviceExternalPrintServersAllowlist) UntypedV() interface{} { return p.Val }
func (p *DeviceExternalPrintServersAllowlist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DeviceExternalPrintServersAllowlist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 732. SafeBrowsingAllowlistDomains
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SafeBrowsingAllowlistDomains struct {
	Stat Status
	Val  []string
}

func (p *SafeBrowsingAllowlistDomains) Name() string          { return "SafeBrowsingAllowlistDomains" }
func (p *SafeBrowsingAllowlistDomains) Field() string         { return "" }
func (p *SafeBrowsingAllowlistDomains) Scope() Scope          { return ScopeUser }
func (p *SafeBrowsingAllowlistDomains) Status() Status        { return p.Stat }
func (p *SafeBrowsingAllowlistDomains) UntypedV() interface{} { return p.Val }
func (p *SafeBrowsingAllowlistDomains) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *SafeBrowsingAllowlistDomains) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 733. DevicePrintersAccessMode
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DevicePrintersAccessMode struct {
	Stat Status
	Val  int
}

func (p *DevicePrintersAccessMode) Name() string          { return "DevicePrintersAccessMode" }
func (p *DevicePrintersAccessMode) Field() string         { return "device_printers_access_mode.access_mode" }
func (p *DevicePrintersAccessMode) Scope() Scope          { return ScopeDevice }
func (p *DevicePrintersAccessMode) Status() Status        { return p.Stat }
func (p *DevicePrintersAccessMode) UntypedV() interface{} { return p.Val }
func (p *DevicePrintersAccessMode) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DevicePrintersAccessMode) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 734. DevicePrintersBlocklist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DevicePrintersBlocklist struct {
	Stat Status
	Val  []string
}

func (p *DevicePrintersBlocklist) Name() string          { return "DevicePrintersBlocklist" }
func (p *DevicePrintersBlocklist) Field() string         { return "device_printers_blocklist.blocklist" }
func (p *DevicePrintersBlocklist) Scope() Scope          { return ScopeDevice }
func (p *DevicePrintersBlocklist) Status() Status        { return p.Stat }
func (p *DevicePrintersBlocklist) UntypedV() interface{} { return p.Val }
func (p *DevicePrintersBlocklist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DevicePrintersBlocklist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 735. DevicePrintersAllowlist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DevicePrintersAllowlist struct {
	Stat Status
	Val  []string
}

func (p *DevicePrintersAllowlist) Name() string          { return "DevicePrintersAllowlist" }
func (p *DevicePrintersAllowlist) Field() string         { return "device_printers_allowlist.allowlist" }
func (p *DevicePrintersAllowlist) Scope() Scope          { return ScopeDevice }
func (p *DevicePrintersAllowlist) Status() Status        { return p.Stat }
func (p *DevicePrintersAllowlist) UntypedV() interface{} { return p.Val }
func (p *DevicePrintersAllowlist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DevicePrintersAllowlist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 736. URLBlocklist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type URLBlocklist struct {
	Stat Status
	Val  []string
}

func (p *URLBlocklist) Name() string          { return "URLBlocklist" }
func (p *URLBlocklist) Field() string         { return "" }
func (p *URLBlocklist) Scope() Scope          { return ScopeUser }
func (p *URLBlocklist) Status() Status        { return p.Stat }
func (p *URLBlocklist) UntypedV() interface{} { return p.Val }
func (p *URLBlocklist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *URLBlocklist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 737. URLAllowlist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type URLAllowlist struct {
	Stat Status
	Val  []string
}

func (p *URLAllowlist) Name() string          { return "URLAllowlist" }
func (p *URLAllowlist) Field() string         { return "" }
func (p *URLAllowlist) Scope() Scope          { return ScopeUser }
func (p *URLAllowlist) Status() Status        { return p.Stat }
func (p *URLAllowlist) UntypedV() interface{} { return p.Val }
func (p *URLAllowlist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *URLAllowlist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 738. ExtensionInstallAllowlist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ExtensionInstallAllowlist struct {
	Stat Status
	Val  []string
}

func (p *ExtensionInstallAllowlist) Name() string          { return "ExtensionInstallAllowlist" }
func (p *ExtensionInstallAllowlist) Field() string         { return "" }
func (p *ExtensionInstallAllowlist) Scope() Scope          { return ScopeUser }
func (p *ExtensionInstallAllowlist) Status() Status        { return p.Stat }
func (p *ExtensionInstallAllowlist) UntypedV() interface{} { return p.Val }
func (p *ExtensionInstallAllowlist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *ExtensionInstallAllowlist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 739. ShowFullUrlsInAddressBar
// This policy has a default value of False.
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ShowFullUrlsInAddressBar struct {
	Stat Status
	Val  bool
}

func (p *ShowFullUrlsInAddressBar) Name() string          { return "ShowFullUrlsInAddressBar" }
func (p *ShowFullUrlsInAddressBar) Field() string         { return "" }
func (p *ShowFullUrlsInAddressBar) Scope() Scope          { return ScopeUser }
func (p *ShowFullUrlsInAddressBar) Status() Status        { return p.Stat }
func (p *ShowFullUrlsInAddressBar) UntypedV() interface{} { return p.Val }
func (p *ShowFullUrlsInAddressBar) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ShowFullUrlsInAddressBar) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 740. ExtensionInstallBlocklist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ExtensionInstallBlocklist struct {
	Stat Status
	Val  []string
}

func (p *ExtensionInstallBlocklist) Name() string          { return "ExtensionInstallBlocklist" }
func (p *ExtensionInstallBlocklist) Field() string         { return "" }
func (p *ExtensionInstallBlocklist) Scope() Scope          { return ScopeUser }
func (p *ExtensionInstallBlocklist) Status() Status        { return p.Stat }
func (p *ExtensionInstallBlocklist) UntypedV() interface{} { return p.Val }
func (p *ExtensionInstallBlocklist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *ExtensionInstallBlocklist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 741. ReportDeviceSystemInfo
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceSystemInfo struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceSystemInfo) Name() string          { return "ReportDeviceSystemInfo" }
func (p *ReportDeviceSystemInfo) Field() string         { return "device_reporting.report_system_info" }
func (p *ReportDeviceSystemInfo) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceSystemInfo) Status() Status        { return p.Stat }
func (p *ReportDeviceSystemInfo) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceSystemInfo) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceSystemInfo) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 742. AutoplayAllowlist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AutoplayAllowlist struct {
	Stat Status
	Val  []string
}

func (p *AutoplayAllowlist) Name() string          { return "AutoplayAllowlist" }
func (p *AutoplayAllowlist) Field() string         { return "" }
func (p *AutoplayAllowlist) Scope() Scope          { return ScopeUser }
func (p *AutoplayAllowlist) Status() Status        { return p.Stat }
func (p *AutoplayAllowlist) UntypedV() interface{} { return p.Val }
func (p *AutoplayAllowlist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *AutoplayAllowlist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 743. DevicePrinters
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DevicePrinters struct {
	Stat Status
	Val  *DevicePrintersValue
}

type DevicePrintersValue struct {
	Hash string `json:"hash"`
	Url  string `json:"url"`
}

func (p *DevicePrinters) Name() string          { return "DevicePrinters" }
func (p *DevicePrinters) Field() string         { return "device_printers.external_policy" }
func (p *DevicePrinters) Scope() Scope          { return ScopeDevice }
func (p *DevicePrinters) Status() Status        { return p.Stat }
func (p *DevicePrinters) UntypedV() interface{} { return p.Val }
func (p *DevicePrinters) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *DevicePrintersValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *DevicePrintersValue", m)
	}
	return v, nil
}
func (p *DevicePrinters) Equal(iface interface{}) bool {
	v, ok := iface.(*DevicePrintersValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 746. AuthNegotiateDelegateAllowlist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AuthNegotiateDelegateAllowlist struct {
	Stat Status
	Val  string
}

func (p *AuthNegotiateDelegateAllowlist) Name() string          { return "AuthNegotiateDelegateAllowlist" }
func (p *AuthNegotiateDelegateAllowlist) Field() string         { return "" }
func (p *AuthNegotiateDelegateAllowlist) Scope() Scope          { return ScopeUser }
func (p *AuthNegotiateDelegateAllowlist) Status() Status        { return p.Stat }
func (p *AuthNegotiateDelegateAllowlist) UntypedV() interface{} { return p.Val }
func (p *AuthNegotiateDelegateAllowlist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *AuthNegotiateDelegateAllowlist) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 747. AuthServerAllowlist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AuthServerAllowlist struct {
	Stat Status
	Val  string
}

func (p *AuthServerAllowlist) Name() string          { return "AuthServerAllowlist" }
func (p *AuthServerAllowlist) Field() string         { return "" }
func (p *AuthServerAllowlist) Scope() Scope          { return ScopeUser }
func (p *AuthServerAllowlist) Status() Status        { return p.Stat }
func (p *AuthServerAllowlist) UntypedV() interface{} { return p.Val }
func (p *AuthServerAllowlist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *AuthServerAllowlist) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 748. InsecureFormsWarningsEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type InsecureFormsWarningsEnabled struct {
	Stat Status
	Val  bool
}

func (p *InsecureFormsWarningsEnabled) Name() string          { return "InsecureFormsWarningsEnabled" }
func (p *InsecureFormsWarningsEnabled) Field() string         { return "" }
func (p *InsecureFormsWarningsEnabled) Scope() Scope          { return ScopeUser }
func (p *InsecureFormsWarningsEnabled) Status() Status        { return p.Stat }
func (p *InsecureFormsWarningsEnabled) UntypedV() interface{} { return p.Val }
func (p *InsecureFormsWarningsEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *InsecureFormsWarningsEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 749. SpellcheckLanguageBlocklist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SpellcheckLanguageBlocklist struct {
	Stat Status
	Val  []string
}

func (p *SpellcheckLanguageBlocklist) Name() string          { return "SpellcheckLanguageBlocklist" }
func (p *SpellcheckLanguageBlocklist) Field() string         { return "" }
func (p *SpellcheckLanguageBlocklist) Scope() Scope          { return ScopeUser }
func (p *SpellcheckLanguageBlocklist) Status() Status        { return p.Stat }
func (p *SpellcheckLanguageBlocklist) UntypedV() interface{} { return p.Val }
func (p *SpellcheckLanguageBlocklist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *SpellcheckLanguageBlocklist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 750. ExternalPrintServersAllowlist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ExternalPrintServersAllowlist struct {
	Stat Status
	Val  []string
}

func (p *ExternalPrintServersAllowlist) Name() string          { return "ExternalPrintServersAllowlist" }
func (p *ExternalPrintServersAllowlist) Field() string         { return "" }
func (p *ExternalPrintServersAllowlist) Scope() Scope          { return ScopeUser }
func (p *ExternalPrintServersAllowlist) Status() Status        { return p.Stat }
func (p *ExternalPrintServersAllowlist) UntypedV() interface{} { return p.Val }
func (p *ExternalPrintServersAllowlist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *ExternalPrintServersAllowlist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 751. DefaultSerialGuardSetting
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultSerialGuardSetting struct {
	Stat Status
	Val  int
}

func (p *DefaultSerialGuardSetting) Name() string          { return "DefaultSerialGuardSetting" }
func (p *DefaultSerialGuardSetting) Field() string         { return "" }
func (p *DefaultSerialGuardSetting) Scope() Scope          { return ScopeUser }
func (p *DefaultSerialGuardSetting) Status() Status        { return p.Stat }
func (p *DefaultSerialGuardSetting) UntypedV() interface{} { return p.Val }
func (p *DefaultSerialGuardSetting) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DefaultSerialGuardSetting) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 752. SerialAskForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SerialAskForUrls struct {
	Stat Status
	Val  []string
}

func (p *SerialAskForUrls) Name() string          { return "SerialAskForUrls" }
func (p *SerialAskForUrls) Field() string         { return "" }
func (p *SerialAskForUrls) Scope() Scope          { return ScopeUser }
func (p *SerialAskForUrls) Status() Status        { return p.Stat }
func (p *SerialAskForUrls) UntypedV() interface{} { return p.Val }
func (p *SerialAskForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *SerialAskForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 753. SerialBlockedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SerialBlockedForUrls struct {
	Stat Status
	Val  []string
}

func (p *SerialBlockedForUrls) Name() string          { return "SerialBlockedForUrls" }
func (p *SerialBlockedForUrls) Field() string         { return "" }
func (p *SerialBlockedForUrls) Scope() Scope          { return ScopeUser }
func (p *SerialBlockedForUrls) Status() Status        { return p.Stat }
func (p *SerialBlockedForUrls) UntypedV() interface{} { return p.Val }
func (p *SerialBlockedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *SerialBlockedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 754. DefaultSensorsSetting
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultSensorsSetting struct {
	Stat Status
	Val  int
}

func (p *DefaultSensorsSetting) Name() string          { return "DefaultSensorsSetting" }
func (p *DefaultSensorsSetting) Field() string         { return "" }
func (p *DefaultSensorsSetting) Scope() Scope          { return ScopeUser }
func (p *DefaultSensorsSetting) Status() Status        { return p.Stat }
func (p *DefaultSensorsSetting) UntypedV() interface{} { return p.Val }
func (p *DefaultSensorsSetting) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DefaultSensorsSetting) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 755. SensorsAllowedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SensorsAllowedForUrls struct {
	Stat Status
	Val  []string
}

func (p *SensorsAllowedForUrls) Name() string          { return "SensorsAllowedForUrls" }
func (p *SensorsAllowedForUrls) Field() string         { return "" }
func (p *SensorsAllowedForUrls) Scope() Scope          { return ScopeUser }
func (p *SensorsAllowedForUrls) Status() Status        { return p.Stat }
func (p *SensorsAllowedForUrls) UntypedV() interface{} { return p.Val }
func (p *SensorsAllowedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *SensorsAllowedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 756. SensorsBlockedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SensorsBlockedForUrls struct {
	Stat Status
	Val  []string
}

func (p *SensorsBlockedForUrls) Name() string          { return "SensorsBlockedForUrls" }
func (p *SensorsBlockedForUrls) Field() string         { return "" }
func (p *SensorsBlockedForUrls) Scope() Scope          { return ScopeUser }
func (p *SensorsBlockedForUrls) Status() Status        { return p.Stat }
func (p *SensorsBlockedForUrls) UntypedV() interface{} { return p.Val }
func (p *SensorsBlockedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *SensorsBlockedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 757. DeviceChannelDowngradeBehavior
// This policy can be modified without rebooting.
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type DeviceChannelDowngradeBehavior struct {
	Stat Status
	Val  int
}

func (p *DeviceChannelDowngradeBehavior) Name() string { return "DeviceChannelDowngradeBehavior" }
func (p *DeviceChannelDowngradeBehavior) Field() string {
	return "auto_update_settings.channel_downgrade_behavior"
}
func (p *DeviceChannelDowngradeBehavior) Scope() Scope          { return ScopeDevice }
func (p *DeviceChannelDowngradeBehavior) Status() Status        { return p.Stat }
func (p *DeviceChannelDowngradeBehavior) UntypedV() interface{} { return p.Val }
func (p *DeviceChannelDowngradeBehavior) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DeviceChannelDowngradeBehavior) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 759. NoteTakingAppsLockScreenAllowlist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type NoteTakingAppsLockScreenAllowlist struct {
	Stat Status
	Val  []string
}

func (p *NoteTakingAppsLockScreenAllowlist) Name() string          { return "NoteTakingAppsLockScreenAllowlist" }
func (p *NoteTakingAppsLockScreenAllowlist) Field() string         { return "" }
func (p *NoteTakingAppsLockScreenAllowlist) Scope() Scope          { return ScopeUser }
func (p *NoteTakingAppsLockScreenAllowlist) Status() Status        { return p.Stat }
func (p *NoteTakingAppsLockScreenAllowlist) UntypedV() interface{} { return p.Val }
func (p *NoteTakingAppsLockScreenAllowlist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *NoteTakingAppsLockScreenAllowlist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 761. NearbyShareAllowed
// This policy has a default value of False.
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type NearbyShareAllowed struct {
	Stat Status
	Val  bool
}

func (p *NearbyShareAllowed) Name() string          { return "NearbyShareAllowed" }
func (p *NearbyShareAllowed) Field() string         { return "" }
func (p *NearbyShareAllowed) Scope() Scope          { return ScopeUser }
func (p *NearbyShareAllowed) Status() Status        { return p.Stat }
func (p *NearbyShareAllowed) UntypedV() interface{} { return p.Val }
func (p *NearbyShareAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *NearbyShareAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 762. PerAppTimeLimitsAllowlist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PerAppTimeLimitsAllowlist struct {
	Stat Status
	Val  *PerAppTimeLimitsAllowlistValue
}

type PerAppTimeLimitsAllowlistValue struct {
	AppList []*PerAppTimeLimitsAllowlistValueAppList `json:"app_list,omitempty"`
	UrlList []string                                 `json:"url_list,omitempty"`
}

type PerAppTimeLimitsAllowlistValueAppList struct {
	AppId   string `json:"app_id"`
	AppType string `json:"app_type"`
}

func (p *PerAppTimeLimitsAllowlist) Name() string          { return "PerAppTimeLimitsAllowlist" }
func (p *PerAppTimeLimitsAllowlist) Field() string         { return "" }
func (p *PerAppTimeLimitsAllowlist) Scope() Scope          { return ScopeUser }
func (p *PerAppTimeLimitsAllowlist) Status() Status        { return p.Stat }
func (p *PerAppTimeLimitsAllowlist) UntypedV() interface{} { return p.Val }
func (p *PerAppTimeLimitsAllowlist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *PerAppTimeLimitsAllowlistValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *PerAppTimeLimitsAllowlistValue", m)
	}
	return v, nil
}
func (p *PerAppTimeLimitsAllowlist) Equal(iface interface{}) bool {
	v, ok := iface.(*PerAppTimeLimitsAllowlistValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 763. DeviceShowLowDiskSpaceNotification
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceShowLowDiskSpaceNotification struct {
	Stat Status
	Val  bool
}

func (p *DeviceShowLowDiskSpaceNotification) Name() string {
	return "DeviceShowLowDiskSpaceNotification"
}
func (p *DeviceShowLowDiskSpaceNotification) Field() string {
	return "device_show_low_disk_space_notification.device_show_low_disk_space_notification"
}
func (p *DeviceShowLowDiskSpaceNotification) Scope() Scope          { return ScopeDevice }
func (p *DeviceShowLowDiskSpaceNotification) Status() Status        { return p.Stat }
func (p *DeviceShowLowDiskSpaceNotification) UntypedV() interface{} { return p.Val }
func (p *DeviceShowLowDiskSpaceNotification) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceShowLowDiskSpaceNotification) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 764. DeviceUserAllowlist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceUserAllowlist struct {
	Stat Status
	Val  []string
}

func (p *DeviceUserAllowlist) Name() string          { return "DeviceUserAllowlist" }
func (p *DeviceUserAllowlist) Field() string         { return "user_allowlist.user_allowlist" }
func (p *DeviceUserAllowlist) Scope() Scope          { return ScopeDevice }
func (p *DeviceUserAllowlist) Status() Status        { return p.Stat }
func (p *DeviceUserAllowlist) UntypedV() interface{} { return p.Val }
func (p *DeviceUserAllowlist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DeviceUserAllowlist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 765. UsbDetachableAllowlist
///////////////////////////////////////////////////////////////////////////////
type UsbDetachableAllowlist struct {
	Stat Status
	Val  []*RefUsbDeviceIdInclusive
}

func (p *UsbDetachableAllowlist) Name() string          { return "UsbDetachableAllowlist" }
func (p *UsbDetachableAllowlist) Field() string         { return "usb_detachable_allowlist.id" }
func (p *UsbDetachableAllowlist) Scope() Scope          { return ScopeDevice }
func (p *UsbDetachableAllowlist) Status() Status        { return p.Stat }
func (p *UsbDetachableAllowlist) UntypedV() interface{} { return p.Val }
func (p *UsbDetachableAllowlist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*RefUsbDeviceIdInclusive
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*RefUsbDeviceIdInclusive", m)
	}
	return v, nil
}
func (p *UsbDetachableAllowlist) Equal(iface interface{}) bool {
	v, ok := iface.([]*RefUsbDeviceIdInclusive)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 766. InsecurePrivateNetworkRequestsAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type InsecurePrivateNetworkRequestsAllowed struct {
	Stat Status
	Val  bool
}

func (p *InsecurePrivateNetworkRequestsAllowed) Name() string {
	return "InsecurePrivateNetworkRequestsAllowed"
}
func (p *InsecurePrivateNetworkRequestsAllowed) Field() string         { return "" }
func (p *InsecurePrivateNetworkRequestsAllowed) Scope() Scope          { return ScopeUser }
func (p *InsecurePrivateNetworkRequestsAllowed) Status() Status        { return p.Stat }
func (p *InsecurePrivateNetworkRequestsAllowed) UntypedV() interface{} { return p.Val }
func (p *InsecurePrivateNetworkRequestsAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *InsecurePrivateNetworkRequestsAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 767. InsecurePrivateNetworkRequestsAllowedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type InsecurePrivateNetworkRequestsAllowedForUrls struct {
	Stat Status
	Val  []string
}

func (p *InsecurePrivateNetworkRequestsAllowedForUrls) Name() string {
	return "InsecurePrivateNetworkRequestsAllowedForUrls"
}
func (p *InsecurePrivateNetworkRequestsAllowedForUrls) Field() string         { return "" }
func (p *InsecurePrivateNetworkRequestsAllowedForUrls) Scope() Scope          { return ScopeUser }
func (p *InsecurePrivateNetworkRequestsAllowedForUrls) Status() Status        { return p.Stat }
func (p *InsecurePrivateNetworkRequestsAllowedForUrls) UntypedV() interface{} { return p.Val }
func (p *InsecurePrivateNetworkRequestsAllowedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *InsecurePrivateNetworkRequestsAllowedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 768. UserPrintersAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type UserPrintersAllowed struct {
	Stat Status
	Val  bool
}

func (p *UserPrintersAllowed) Name() string          { return "UserPrintersAllowed" }
func (p *UserPrintersAllowed) Field() string         { return "" }
func (p *UserPrintersAllowed) Scope() Scope          { return ScopeUser }
func (p *UserPrintersAllowed) Status() Status        { return p.Stat }
func (p *UserPrintersAllowed) UntypedV() interface{} { return p.Val }
func (p *UserPrintersAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *UserPrintersAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 769. Printers
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type Printers struct {
	Stat Status
	Val  []string
}

func (p *Printers) Name() string          { return "Printers" }
func (p *Printers) Field() string         { return "" }
func (p *Printers) Scope() Scope          { return ScopeUser }
func (p *Printers) Status() Status        { return p.Stat }
func (p *Printers) UntypedV() interface{} { return p.Val }
func (p *Printers) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *Printers) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 770. PrintersBulkConfiguration
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintersBulkConfiguration struct {
	Stat Status
	Val  *PrintersBulkConfigurationValue
}

type PrintersBulkConfigurationValue struct {
	Hash string `json:"hash"`
	Url  string `json:"url"`
}

func (p *PrintersBulkConfiguration) Name() string          { return "PrintersBulkConfiguration" }
func (p *PrintersBulkConfiguration) Field() string         { return "" }
func (p *PrintersBulkConfiguration) Scope() Scope          { return ScopeUser }
func (p *PrintersBulkConfiguration) Status() Status        { return p.Stat }
func (p *PrintersBulkConfiguration) UntypedV() interface{} { return p.Val }
func (p *PrintersBulkConfiguration) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *PrintersBulkConfigurationValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *PrintersBulkConfigurationValue", m)
	}
	return v, nil
}
func (p *PrintersBulkConfiguration) Equal(iface interface{}) bool {
	v, ok := iface.(*PrintersBulkConfigurationValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 771. DeviceReleaseLtsTag
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceReleaseLtsTag struct {
	Stat Status
	Val  string
}

func (p *DeviceReleaseLtsTag) Name() string          { return "DeviceReleaseLtsTag" }
func (p *DeviceReleaseLtsTag) Field() string         { return "release_channel.release_lts_tag" }
func (p *DeviceReleaseLtsTag) Scope() Scope          { return ScopeDevice }
func (p *DeviceReleaseLtsTag) Status() Status        { return p.Stat }
func (p *DeviceReleaseLtsTag) UntypedV() interface{} { return p.Val }
func (p *DeviceReleaseLtsTag) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DeviceReleaseLtsTag) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 772. PrintersBulkAccessMode
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintersBulkAccessMode struct {
	Stat Status
	Val  int
}

func (p *PrintersBulkAccessMode) Name() string          { return "PrintersBulkAccessMode" }
func (p *PrintersBulkAccessMode) Field() string         { return "" }
func (p *PrintersBulkAccessMode) Scope() Scope          { return ScopeUser }
func (p *PrintersBulkAccessMode) Status() Status        { return p.Stat }
func (p *PrintersBulkAccessMode) UntypedV() interface{} { return p.Val }
func (p *PrintersBulkAccessMode) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *PrintersBulkAccessMode) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 773. DefaultFileSystemReadGuardSetting
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultFileSystemReadGuardSetting struct {
	Stat Status
	Val  int
}

func (p *DefaultFileSystemReadGuardSetting) Name() string          { return "DefaultFileSystemReadGuardSetting" }
func (p *DefaultFileSystemReadGuardSetting) Field() string         { return "" }
func (p *DefaultFileSystemReadGuardSetting) Scope() Scope          { return ScopeUser }
func (p *DefaultFileSystemReadGuardSetting) Status() Status        { return p.Stat }
func (p *DefaultFileSystemReadGuardSetting) UntypedV() interface{} { return p.Val }
func (p *DefaultFileSystemReadGuardSetting) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DefaultFileSystemReadGuardSetting) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 774. DefaultFileSystemWriteGuardSetting
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultFileSystemWriteGuardSetting struct {
	Stat Status
	Val  int
}

func (p *DefaultFileSystemWriteGuardSetting) Name() string {
	return "DefaultFileSystemWriteGuardSetting"
}
func (p *DefaultFileSystemWriteGuardSetting) Field() string         { return "" }
func (p *DefaultFileSystemWriteGuardSetting) Scope() Scope          { return ScopeUser }
func (p *DefaultFileSystemWriteGuardSetting) Status() Status        { return p.Stat }
func (p *DefaultFileSystemWriteGuardSetting) UntypedV() interface{} { return p.Val }
func (p *DefaultFileSystemWriteGuardSetting) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DefaultFileSystemWriteGuardSetting) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 775. FileSystemReadAskForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type FileSystemReadAskForUrls struct {
	Stat Status
	Val  []string
}

func (p *FileSystemReadAskForUrls) Name() string          { return "FileSystemReadAskForUrls" }
func (p *FileSystemReadAskForUrls) Field() string         { return "" }
func (p *FileSystemReadAskForUrls) Scope() Scope          { return ScopeUser }
func (p *FileSystemReadAskForUrls) Status() Status        { return p.Stat }
func (p *FileSystemReadAskForUrls) UntypedV() interface{} { return p.Val }
func (p *FileSystemReadAskForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *FileSystemReadAskForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 776. FileSystemReadBlockedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type FileSystemReadBlockedForUrls struct {
	Stat Status
	Val  []string
}

func (p *FileSystemReadBlockedForUrls) Name() string          { return "FileSystemReadBlockedForUrls" }
func (p *FileSystemReadBlockedForUrls) Field() string         { return "" }
func (p *FileSystemReadBlockedForUrls) Scope() Scope          { return ScopeUser }
func (p *FileSystemReadBlockedForUrls) Status() Status        { return p.Stat }
func (p *FileSystemReadBlockedForUrls) UntypedV() interface{} { return p.Val }
func (p *FileSystemReadBlockedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *FileSystemReadBlockedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 777. FileSystemWriteAskForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type FileSystemWriteAskForUrls struct {
	Stat Status
	Val  []string
}

func (p *FileSystemWriteAskForUrls) Name() string          { return "FileSystemWriteAskForUrls" }
func (p *FileSystemWriteAskForUrls) Field() string         { return "" }
func (p *FileSystemWriteAskForUrls) Scope() Scope          { return ScopeUser }
func (p *FileSystemWriteAskForUrls) Status() Status        { return p.Stat }
func (p *FileSystemWriteAskForUrls) UntypedV() interface{} { return p.Val }
func (p *FileSystemWriteAskForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *FileSystemWriteAskForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 778. FileSystemWriteBlockedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type FileSystemWriteBlockedForUrls struct {
	Stat Status
	Val  []string
}

func (p *FileSystemWriteBlockedForUrls) Name() string          { return "FileSystemWriteBlockedForUrls" }
func (p *FileSystemWriteBlockedForUrls) Field() string         { return "" }
func (p *FileSystemWriteBlockedForUrls) Scope() Scope          { return ScopeUser }
func (p *FileSystemWriteBlockedForUrls) Status() Status        { return p.Stat }
func (p *FileSystemWriteBlockedForUrls) UntypedV() interface{} { return p.Val }
func (p *FileSystemWriteBlockedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *FileSystemWriteBlockedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 779. PrintersBulkBlocklist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintersBulkBlocklist struct {
	Stat Status
	Val  []string
}

func (p *PrintersBulkBlocklist) Name() string          { return "PrintersBulkBlocklist" }
func (p *PrintersBulkBlocklist) Field() string         { return "" }
func (p *PrintersBulkBlocklist) Scope() Scope          { return ScopeUser }
func (p *PrintersBulkBlocklist) Status() Status        { return p.Stat }
func (p *PrintersBulkBlocklist) UntypedV() interface{} { return p.Val }
func (p *PrintersBulkBlocklist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *PrintersBulkBlocklist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 780. PrintersBulkAllowlist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintersBulkAllowlist struct {
	Stat Status
	Val  []string
}

func (p *PrintersBulkAllowlist) Name() string          { return "PrintersBulkAllowlist" }
func (p *PrintersBulkAllowlist) Field() string         { return "" }
func (p *PrintersBulkAllowlist) Scope() Scope          { return ScopeUser }
func (p *PrintersBulkAllowlist) Status() Status        { return p.Stat }
func (p *PrintersBulkAllowlist) UntypedV() interface{} { return p.Val }
func (p *PrintersBulkAllowlist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *PrintersBulkAllowlist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 782. LookalikeWarningAllowlistDomains
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type LookalikeWarningAllowlistDomains struct {
	Stat Status
	Val  []string
}

func (p *LookalikeWarningAllowlistDomains) Name() string          { return "LookalikeWarningAllowlistDomains" }
func (p *LookalikeWarningAllowlistDomains) Field() string         { return "" }
func (p *LookalikeWarningAllowlistDomains) Scope() Scope          { return ScopeUser }
func (p *LookalikeWarningAllowlistDomains) Status() Status        { return p.Stat }
func (p *LookalikeWarningAllowlistDomains) UntypedV() interface{} { return p.Val }
func (p *LookalikeWarningAllowlistDomains) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *LookalikeWarningAllowlistDomains) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 783. PrintingAPIExtensionsAllowlist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintingAPIExtensionsAllowlist struct {
	Stat Status
	Val  []string
}

func (p *PrintingAPIExtensionsAllowlist) Name() string          { return "PrintingAPIExtensionsAllowlist" }
func (p *PrintingAPIExtensionsAllowlist) Field() string         { return "" }
func (p *PrintingAPIExtensionsAllowlist) Scope() Scope          { return ScopeUser }
func (p *PrintingAPIExtensionsAllowlist) Status() Status        { return p.Stat }
func (p *PrintingAPIExtensionsAllowlist) UntypedV() interface{} { return p.Val }
func (p *PrintingAPIExtensionsAllowlist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *PrintingAPIExtensionsAllowlist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 784. QuickUnlockModeAllowlist
// This policy has a default value of [].
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type QuickUnlockModeAllowlist struct {
	Stat Status
	Val  []string
}

func (p *QuickUnlockModeAllowlist) Name() string          { return "QuickUnlockModeAllowlist" }
func (p *QuickUnlockModeAllowlist) Field() string         { return "" }
func (p *QuickUnlockModeAllowlist) Scope() Scope          { return ScopeUser }
func (p *QuickUnlockModeAllowlist) Status() Status        { return p.Stat }
func (p *QuickUnlockModeAllowlist) UntypedV() interface{} { return p.Val }
func (p *QuickUnlockModeAllowlist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *QuickUnlockModeAllowlist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 785. AttestationExtensionAllowlist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AttestationExtensionAllowlist struct {
	Stat Status
	Val  []string
}

func (p *AttestationExtensionAllowlist) Name() string          { return "AttestationExtensionAllowlist" }
func (p *AttestationExtensionAllowlist) Field() string         { return "" }
func (p *AttestationExtensionAllowlist) Scope() Scope          { return ScopeUser }
func (p *AttestationExtensionAllowlist) Status() Status        { return p.Stat }
func (p *AttestationExtensionAllowlist) UntypedV() interface{} { return p.Val }
func (p *AttestationExtensionAllowlist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *AttestationExtensionAllowlist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 786. DataLeakPreventionRulesList
///////////////////////////////////////////////////////////////////////////////
type DataLeakPreventionRulesList struct {
	Stat Status
	Val  []*DataLeakPreventionRulesListValue
}

type DataLeakPreventionRulesListValue struct {
	Description  string                                          `json:"description"`
	Destinations *DataLeakPreventionRulesListValueDestinations   `json:"destinations"`
	Name         string                                          `json:"name"`
	Restrictions []*DataLeakPreventionRulesListValueRestrictions `json:"restrictions,omitempty"`
	Sources      *DataLeakPreventionRulesListValueSources        `json:"sources"`
}

type DataLeakPreventionRulesListValueSources struct {
	Urls []string `json:"urls,omitempty"`
}

type DataLeakPreventionRulesListValueDestinations struct {
	Components []string `json:"components,omitempty"`
	Urls       []string `json:"urls,omitempty"`
}

type DataLeakPreventionRulesListValueRestrictions struct {
	Class string `json:"class"`
	Level string `json:"level"`
}

func (p *DataLeakPreventionRulesList) Name() string          { return "DataLeakPreventionRulesList" }
func (p *DataLeakPreventionRulesList) Field() string         { return "" }
func (p *DataLeakPreventionRulesList) Scope() Scope          { return ScopeUser }
func (p *DataLeakPreventionRulesList) Status() Status        { return p.Stat }
func (p *DataLeakPreventionRulesList) UntypedV() interface{} { return p.Val }
func (p *DataLeakPreventionRulesList) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*DataLeakPreventionRulesListValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*DataLeakPreventionRulesListValue", m)
	}
	return v, nil
}
func (p *DataLeakPreventionRulesList) Equal(iface interface{}) bool {
	v, ok := iface.([]*DataLeakPreventionRulesListValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 787. WebRtcAllowLegacyTLSProtocols
///////////////////////////////////////////////////////////////////////////////
type WebRtcAllowLegacyTLSProtocols struct {
	Stat Status
	Val  bool
}

func (p *WebRtcAllowLegacyTLSProtocols) Name() string          { return "WebRtcAllowLegacyTLSProtocols" }
func (p *WebRtcAllowLegacyTLSProtocols) Field() string         { return "" }
func (p *WebRtcAllowLegacyTLSProtocols) Scope() Scope          { return ScopeUser }
func (p *WebRtcAllowLegacyTLSProtocols) Status() Status        { return p.Stat }
func (p *WebRtcAllowLegacyTLSProtocols) UntypedV() interface{} { return p.Val }
func (p *WebRtcAllowLegacyTLSProtocols) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *WebRtcAllowLegacyTLSProtocols) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 788. MediaRecommendationsEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type MediaRecommendationsEnabled struct {
	Stat Status
	Val  bool
}

func (p *MediaRecommendationsEnabled) Name() string          { return "MediaRecommendationsEnabled" }
func (p *MediaRecommendationsEnabled) Field() string         { return "" }
func (p *MediaRecommendationsEnabled) Scope() Scope          { return ScopeUser }
func (p *MediaRecommendationsEnabled) Status() Status        { return p.Stat }
func (p *MediaRecommendationsEnabled) UntypedV() interface{} { return p.Val }
func (p *MediaRecommendationsEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *MediaRecommendationsEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 789. DeviceFamilyLinkAccountsAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceFamilyLinkAccountsAllowed struct {
	Stat Status
	Val  bool
}

func (p *DeviceFamilyLinkAccountsAllowed) Name() string { return "DeviceFamilyLinkAccountsAllowed" }
func (p *DeviceFamilyLinkAccountsAllowed) Field() string {
	return "family_link_accounts_allowed.family_link_accounts_allowed"
}
func (p *DeviceFamilyLinkAccountsAllowed) Scope() Scope          { return ScopeDevice }
func (p *DeviceFamilyLinkAccountsAllowed) Status() Status        { return p.Stat }
func (p *DeviceFamilyLinkAccountsAllowed) UntypedV() interface{} { return p.Val }
func (p *DeviceFamilyLinkAccountsAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceFamilyLinkAccountsAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 790. EduCoexistenceToSVersion
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type EduCoexistenceToSVersion struct {
	Stat Status
	Val  string
}

func (p *EduCoexistenceToSVersion) Name() string          { return "EduCoexistenceToSVersion" }
func (p *EduCoexistenceToSVersion) Field() string         { return "" }
func (p *EduCoexistenceToSVersion) Scope() Scope          { return ScopeUser }
func (p *EduCoexistenceToSVersion) Status() Status        { return p.Stat }
func (p *EduCoexistenceToSVersion) UntypedV() interface{} { return p.Val }
func (p *EduCoexistenceToSVersion) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *EduCoexistenceToSVersion) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 791. BrowsingDataLifetime
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type BrowsingDataLifetime struct {
	Stat Status
	Val  []*BrowsingDataLifetimeValue
}

type BrowsingDataLifetimeValue struct {
	DataTypes         []string `json:"data_types,omitempty"`
	TimeToLiveInHours int      `json:"time_to_live_in_hours"`
}

func (p *BrowsingDataLifetime) Name() string          { return "BrowsingDataLifetime" }
func (p *BrowsingDataLifetime) Field() string         { return "" }
func (p *BrowsingDataLifetime) Scope() Scope          { return ScopeUser }
func (p *BrowsingDataLifetime) Status() Status        { return p.Stat }
func (p *BrowsingDataLifetime) UntypedV() interface{} { return p.Val }
func (p *BrowsingDataLifetime) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*BrowsingDataLifetimeValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*BrowsingDataLifetimeValue", m)
	}
	return v, nil
}
func (p *BrowsingDataLifetime) Equal(iface interface{}) bool {
	v, ok := iface.([]*BrowsingDataLifetimeValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 792. IntranetRedirectBehavior
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type IntranetRedirectBehavior struct {
	Stat Status
	Val  int
}

func (p *IntranetRedirectBehavior) Name() string          { return "IntranetRedirectBehavior" }
func (p *IntranetRedirectBehavior) Field() string         { return "" }
func (p *IntranetRedirectBehavior) Scope() Scope          { return ScopeUser }
func (p *IntranetRedirectBehavior) Status() Status        { return p.Stat }
func (p *IntranetRedirectBehavior) UntypedV() interface{} { return p.Val }
func (p *IntranetRedirectBehavior) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *IntranetRedirectBehavior) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 794. DeviceArcDataSnapshotHours
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceArcDataSnapshotHours struct {
	Stat Status
	Val  *DeviceArcDataSnapshotHoursValue
}

type DeviceArcDataSnapshotHoursValue struct {
	Intervals []*RefWeeklyTimeIntervals `json:"intervals,omitempty"`
	Timezone  string                    `json:"timezone"`
}

func (p *DeviceArcDataSnapshotHours) Name() string { return "DeviceArcDataSnapshotHours" }
func (p *DeviceArcDataSnapshotHours) Field() string {
	return "arc_data_snapshot_hours.arc_data_snapshot_hours"
}
func (p *DeviceArcDataSnapshotHours) Scope() Scope          { return ScopeDevice }
func (p *DeviceArcDataSnapshotHours) Status() Status        { return p.Stat }
func (p *DeviceArcDataSnapshotHours) UntypedV() interface{} { return p.Val }
func (p *DeviceArcDataSnapshotHours) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *DeviceArcDataSnapshotHoursValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *DeviceArcDataSnapshotHoursValue", m)
	}
	return v, nil
}
func (p *DeviceArcDataSnapshotHours) Equal(iface interface{}) bool {
	v, ok := iface.(*DeviceArcDataSnapshotHoursValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 795. PhoneHubAllowed
// This policy has a default value of False.
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PhoneHubAllowed struct {
	Stat Status
	Val  bool
}

func (p *PhoneHubAllowed) Name() string          { return "PhoneHubAllowed" }
func (p *PhoneHubAllowed) Field() string         { return "" }
func (p *PhoneHubAllowed) Scope() Scope          { return ScopeUser }
func (p *PhoneHubAllowed) Status() Status        { return p.Stat }
func (p *PhoneHubAllowed) UntypedV() interface{} { return p.Val }
func (p *PhoneHubAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PhoneHubAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 796. PhoneHubNotificationsAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PhoneHubNotificationsAllowed struct {
	Stat Status
	Val  bool
}

func (p *PhoneHubNotificationsAllowed) Name() string          { return "PhoneHubNotificationsAllowed" }
func (p *PhoneHubNotificationsAllowed) Field() string         { return "" }
func (p *PhoneHubNotificationsAllowed) Scope() Scope          { return ScopeUser }
func (p *PhoneHubNotificationsAllowed) Status() Status        { return p.Stat }
func (p *PhoneHubNotificationsAllowed) UntypedV() interface{} { return p.Val }
func (p *PhoneHubNotificationsAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PhoneHubNotificationsAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 797. PhoneHubTaskContinuationAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PhoneHubTaskContinuationAllowed struct {
	Stat Status
	Val  bool
}

func (p *PhoneHubTaskContinuationAllowed) Name() string          { return "PhoneHubTaskContinuationAllowed" }
func (p *PhoneHubTaskContinuationAllowed) Field() string         { return "" }
func (p *PhoneHubTaskContinuationAllowed) Scope() Scope          { return ScopeUser }
func (p *PhoneHubTaskContinuationAllowed) Status() Status        { return p.Stat }
func (p *PhoneHubTaskContinuationAllowed) UntypedV() interface{} { return p.Val }
func (p *PhoneHubTaskContinuationAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PhoneHubTaskContinuationAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 798. WifiSyncAndroidAllowed
// This policy has a default value of False.
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type WifiSyncAndroidAllowed struct {
	Stat Status
	Val  bool
}

func (p *WifiSyncAndroidAllowed) Name() string          { return "WifiSyncAndroidAllowed" }
func (p *WifiSyncAndroidAllowed) Field() string         { return "" }
func (p *WifiSyncAndroidAllowed) Scope() Scope          { return ScopeUser }
func (p *WifiSyncAndroidAllowed) Status() Status        { return p.Stat }
func (p *WifiSyncAndroidAllowed) UntypedV() interface{} { return p.Val }
func (p *WifiSyncAndroidAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *WifiSyncAndroidAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 799. SecurityTokenSessionBehavior
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SecurityTokenSessionBehavior struct {
	Stat Status
	Val  string
}

func (p *SecurityTokenSessionBehavior) Name() string          { return "SecurityTokenSessionBehavior" }
func (p *SecurityTokenSessionBehavior) Field() string         { return "" }
func (p *SecurityTokenSessionBehavior) Scope() Scope          { return ScopeUser }
func (p *SecurityTokenSessionBehavior) Status() Status        { return p.Stat }
func (p *SecurityTokenSessionBehavior) UntypedV() interface{} { return p.Val }
func (p *SecurityTokenSessionBehavior) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *SecurityTokenSessionBehavior) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 800. SecurityTokenSessionNotificationSeconds
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SecurityTokenSessionNotificationSeconds struct {
	Stat Status
	Val  int
}

func (p *SecurityTokenSessionNotificationSeconds) Name() string {
	return "SecurityTokenSessionNotificationSeconds"
}
func (p *SecurityTokenSessionNotificationSeconds) Field() string         { return "" }
func (p *SecurityTokenSessionNotificationSeconds) Scope() Scope          { return ScopeUser }
func (p *SecurityTokenSessionNotificationSeconds) Status() Status        { return p.Stat }
func (p *SecurityTokenSessionNotificationSeconds) UntypedV() interface{} { return p.Val }
func (p *SecurityTokenSessionNotificationSeconds) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *SecurityTokenSessionNotificationSeconds) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 802. TargetBlankImpliesNoOpener
///////////////////////////////////////////////////////////////////////////////
type TargetBlankImpliesNoOpener struct {
	Stat Status
	Val  bool
}

func (p *TargetBlankImpliesNoOpener) Name() string          { return "TargetBlankImpliesNoOpener" }
func (p *TargetBlankImpliesNoOpener) Field() string         { return "" }
func (p *TargetBlankImpliesNoOpener) Scope() Scope          { return ScopeUser }
func (p *TargetBlankImpliesNoOpener) Status() Status        { return p.Stat }
func (p *TargetBlankImpliesNoOpener) UntypedV() interface{} { return p.Val }
func (p *TargetBlankImpliesNoOpener) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *TargetBlankImpliesNoOpener) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 804. FullscreenAlertEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type FullscreenAlertEnabled struct {
	Stat Status
	Val  bool
}

func (p *FullscreenAlertEnabled) Name() string          { return "FullscreenAlertEnabled" }
func (p *FullscreenAlertEnabled) Field() string         { return "" }
func (p *FullscreenAlertEnabled) Scope() Scope          { return ScopeUser }
func (p *FullscreenAlertEnabled) Status() Status        { return p.Stat }
func (p *FullscreenAlertEnabled) UntypedV() interface{} { return p.Val }
func (p *FullscreenAlertEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *FullscreenAlertEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 805. NTPCardsVisible
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type NTPCardsVisible struct {
	Stat Status
	Val  bool
}

func (p *NTPCardsVisible) Name() string          { return "NTPCardsVisible" }
func (p *NTPCardsVisible) Field() string         { return "" }
func (p *NTPCardsVisible) Scope() Scope          { return ScopeUser }
func (p *NTPCardsVisible) Status() Status        { return p.Stat }
func (p *NTPCardsVisible) UntypedV() interface{} { return p.Val }
func (p *NTPCardsVisible) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *NTPCardsVisible) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 806. BasicAuthOverHttpEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type BasicAuthOverHttpEnabled struct {
	Stat Status
	Val  bool
}

func (p *BasicAuthOverHttpEnabled) Name() string          { return "BasicAuthOverHttpEnabled" }
func (p *BasicAuthOverHttpEnabled) Field() string         { return "" }
func (p *BasicAuthOverHttpEnabled) Scope() Scope          { return ScopeUser }
func (p *BasicAuthOverHttpEnabled) Status() Status        { return p.Stat }
func (p *BasicAuthOverHttpEnabled) UntypedV() interface{} { return p.Val }
func (p *BasicAuthOverHttpEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *BasicAuthOverHttpEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 807. SystemFeaturesDisableMode
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SystemFeaturesDisableMode struct {
	Stat Status
	Val  string
}

func (p *SystemFeaturesDisableMode) Name() string          { return "SystemFeaturesDisableMode" }
func (p *SystemFeaturesDisableMode) Field() string         { return "" }
func (p *SystemFeaturesDisableMode) Scope() Scope          { return ScopeUser }
func (p *SystemFeaturesDisableMode) Status() Status        { return p.Stat }
func (p *SystemFeaturesDisableMode) UntypedV() interface{} { return p.Val }
func (p *SystemFeaturesDisableMode) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *SystemFeaturesDisableMode) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 809. ClearBrowsingDataOnExitList
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ClearBrowsingDataOnExitList struct {
	Stat Status
	Val  []string
}

func (p *ClearBrowsingDataOnExitList) Name() string          { return "ClearBrowsingDataOnExitList" }
func (p *ClearBrowsingDataOnExitList) Field() string         { return "" }
func (p *ClearBrowsingDataOnExitList) Scope() Scope          { return ScopeUser }
func (p *ClearBrowsingDataOnExitList) Status() Status        { return p.Stat }
func (p *ClearBrowsingDataOnExitList) UntypedV() interface{} { return p.Val }
func (p *ClearBrowsingDataOnExitList) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *ClearBrowsingDataOnExitList) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 813. ManagedConfigurationPerOrigin
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ManagedConfigurationPerOrigin struct {
	Stat Status
	Val  []*ManagedConfigurationPerOriginValue
}

type ManagedConfigurationPerOriginValue struct {
	ManagedConfigurationHash string `json:"managed_configuration_hash"`
	ManagedConfigurationUrl  string `json:"managed_configuration_url"`
	Origin                   string `json:"origin"`
}

func (p *ManagedConfigurationPerOrigin) Name() string          { return "ManagedConfigurationPerOrigin" }
func (p *ManagedConfigurationPerOrigin) Field() string         { return "" }
func (p *ManagedConfigurationPerOrigin) Scope() Scope          { return ScopeUser }
func (p *ManagedConfigurationPerOrigin) Status() Status        { return p.Stat }
func (p *ManagedConfigurationPerOrigin) UntypedV() interface{} { return p.Val }
func (p *ManagedConfigurationPerOrigin) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*ManagedConfigurationPerOriginValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*ManagedConfigurationPerOriginValue", m)
	}
	return v, nil
}
func (p *ManagedConfigurationPerOrigin) Equal(iface interface{}) bool {
	v, ok := iface.([]*ManagedConfigurationPerOriginValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 816. BrowserLabsEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type BrowserLabsEnabled struct {
	Stat Status
	Val  bool
}

func (p *BrowserLabsEnabled) Name() string          { return "BrowserLabsEnabled" }
func (p *BrowserLabsEnabled) Field() string         { return "" }
func (p *BrowserLabsEnabled) Scope() Scope          { return ScopeUser }
func (p *BrowserLabsEnabled) Status() Status        { return p.Stat }
func (p *BrowserLabsEnabled) UntypedV() interface{} { return p.Val }
func (p *BrowserLabsEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *BrowserLabsEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 818. DeviceAllowMGSToStoreDisplayProperties
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceAllowMGSToStoreDisplayProperties struct {
	Stat Status
	Val  bool
}

func (p *DeviceAllowMGSToStoreDisplayProperties) Name() string {
	return "DeviceAllowMGSToStoreDisplayProperties"
}
func (p *DeviceAllowMGSToStoreDisplayProperties) Field() string {
	return "device_allow_mgs_to_store_display_properties.value"
}
func (p *DeviceAllowMGSToStoreDisplayProperties) Scope() Scope          { return ScopeDevice }
func (p *DeviceAllowMGSToStoreDisplayProperties) Status() Status        { return p.Stat }
func (p *DeviceAllowMGSToStoreDisplayProperties) UntypedV() interface{} { return p.Val }
func (p *DeviceAllowMGSToStoreDisplayProperties) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceAllowMGSToStoreDisplayProperties) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 819. SSLErrorOverrideAllowedForOrigins
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SSLErrorOverrideAllowedForOrigins struct {
	Stat Status
	Val  []string
}

func (p *SSLErrorOverrideAllowedForOrigins) Name() string          { return "SSLErrorOverrideAllowedForOrigins" }
func (p *SSLErrorOverrideAllowedForOrigins) Field() string         { return "" }
func (p *SSLErrorOverrideAllowedForOrigins) Scope() Scope          { return ScopeUser }
func (p *SSLErrorOverrideAllowedForOrigins) Status() Status        { return p.Stat }
func (p *SSLErrorOverrideAllowedForOrigins) UntypedV() interface{} { return p.Val }
func (p *SSLErrorOverrideAllowedForOrigins) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *SSLErrorOverrideAllowedForOrigins) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 821. GaiaOfflineSigninTimeLimitDays
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type GaiaOfflineSigninTimeLimitDays struct {
	Stat Status
	Val  int
}

func (p *GaiaOfflineSigninTimeLimitDays) Name() string          { return "GaiaOfflineSigninTimeLimitDays" }
func (p *GaiaOfflineSigninTimeLimitDays) Field() string         { return "" }
func (p *GaiaOfflineSigninTimeLimitDays) Scope() Scope          { return ScopeUser }
func (p *GaiaOfflineSigninTimeLimitDays) Status() Status        { return p.Stat }
func (p *GaiaOfflineSigninTimeLimitDays) UntypedV() interface{} { return p.Val }
func (p *GaiaOfflineSigninTimeLimitDays) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *GaiaOfflineSigninTimeLimitDays) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 822. SendDownloadToCloudEnterpriseConnector
// This policy can be modified without rebooting.
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type SendDownloadToCloudEnterpriseConnector struct {
	Stat Status
	Val  []*SendDownloadToCloudEnterpriseConnectorValue
}

type SendDownloadToCloudEnterpriseConnectorValue struct {
	Disable         []*SendDownloadToCloudEnterpriseConnectorValueDisable `json:"disable,omitempty"`
	Domain          string                                                `json:"domain"`
	Enable          []*SendDownloadToCloudEnterpriseConnectorValueEnable  `json:"enable,omitempty"`
	EnterpriseId    string                                                `json:"enterprise_id"`
	ServiceProvider string                                                `json:"service_provider"`
}

type SendDownloadToCloudEnterpriseConnectorValueEnable struct {
	MimeTypes []string `json:"mime_types,omitempty"`
	UrlList   []string `json:"url_list,omitempty"`
}

type SendDownloadToCloudEnterpriseConnectorValueDisable struct {
	MimeTypes []string `json:"mime_types,omitempty"`
	UrlList   []string `json:"url_list,omitempty"`
}

func (p *SendDownloadToCloudEnterpriseConnector) Name() string {
	return "SendDownloadToCloudEnterpriseConnector"
}
func (p *SendDownloadToCloudEnterpriseConnector) Field() string         { return "" }
func (p *SendDownloadToCloudEnterpriseConnector) Scope() Scope          { return ScopeUser }
func (p *SendDownloadToCloudEnterpriseConnector) Status() Status        { return p.Stat }
func (p *SendDownloadToCloudEnterpriseConnector) UntypedV() interface{} { return p.Val }
func (p *SendDownloadToCloudEnterpriseConnector) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*SendDownloadToCloudEnterpriseConnectorValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*SendDownloadToCloudEnterpriseConnectorValue", m)
	}
	return v, nil
}
func (p *SendDownloadToCloudEnterpriseConnector) Equal(iface interface{}) bool {
	v, ok := iface.([]*SendDownloadToCloudEnterpriseConnectorValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 823. DeviceSystemWideTracingEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceSystemWideTracingEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceSystemWideTracingEnabled) Name() string { return "DeviceSystemWideTracingEnabled" }
func (p *DeviceSystemWideTracingEnabled) Field() string {
	return "device_system_wide_tracing_enabled.enabled"
}
func (p *DeviceSystemWideTracingEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceSystemWideTracingEnabled) Status() Status        { return p.Stat }
func (p *DeviceSystemWideTracingEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceSystemWideTracingEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceSystemWideTracingEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 825. DevicePciPeripheralDataAccessEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DevicePciPeripheralDataAccessEnabled struct {
	Stat Status
	Val  bool
}

func (p *DevicePciPeripheralDataAccessEnabled) Name() string {
	return "DevicePciPeripheralDataAccessEnabled"
}
func (p *DevicePciPeripheralDataAccessEnabled) Field() string {
	return "device_pci_peripheral_data_access_enabled_v2.enabled"
}
func (p *DevicePciPeripheralDataAccessEnabled) Scope() Scope          { return ScopeDevice }
func (p *DevicePciPeripheralDataAccessEnabled) Status() Status        { return p.Stat }
func (p *DevicePciPeripheralDataAccessEnabled) UntypedV() interface{} { return p.Val }
func (p *DevicePciPeripheralDataAccessEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DevicePciPeripheralDataAccessEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 826. ContextAwareAccessSignalsAllowlist
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ContextAwareAccessSignalsAllowlist struct {
	Stat Status
	Val  []string
}

func (p *ContextAwareAccessSignalsAllowlist) Name() string {
	return "ContextAwareAccessSignalsAllowlist"
}
func (p *ContextAwareAccessSignalsAllowlist) Field() string         { return "" }
func (p *ContextAwareAccessSignalsAllowlist) Scope() Scope          { return ScopeUser }
func (p *ContextAwareAccessSignalsAllowlist) Status() Status        { return p.Stat }
func (p *ContextAwareAccessSignalsAllowlist) UntypedV() interface{} { return p.Val }
func (p *ContextAwareAccessSignalsAllowlist) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *ContextAwareAccessSignalsAllowlist) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 827. FetchKeepaliveDurationSecondsOnShutdown
// This policy can be modified without rebooting.
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type FetchKeepaliveDurationSecondsOnShutdown struct {
	Stat Status
	Val  int
}

func (p *FetchKeepaliveDurationSecondsOnShutdown) Name() string {
	return "FetchKeepaliveDurationSecondsOnShutdown"
}
func (p *FetchKeepaliveDurationSecondsOnShutdown) Field() string         { return "" }
func (p *FetchKeepaliveDurationSecondsOnShutdown) Scope() Scope          { return ScopeUser }
func (p *FetchKeepaliveDurationSecondsOnShutdown) Status() Status        { return p.Stat }
func (p *FetchKeepaliveDurationSecondsOnShutdown) UntypedV() interface{} { return p.Val }
func (p *FetchKeepaliveDurationSecondsOnShutdown) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *FetchKeepaliveDurationSecondsOnShutdown) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 829. SuppressDifferentOriginSubframeDialogs
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SuppressDifferentOriginSubframeDialogs struct {
	Stat Status
	Val  bool
}

func (p *SuppressDifferentOriginSubframeDialogs) Name() string {
	return "SuppressDifferentOriginSubframeDialogs"
}
func (p *SuppressDifferentOriginSubframeDialogs) Field() string         { return "" }
func (p *SuppressDifferentOriginSubframeDialogs) Scope() Scope          { return ScopeUser }
func (p *SuppressDifferentOriginSubframeDialogs) Status() Status        { return p.Stat }
func (p *SuppressDifferentOriginSubframeDialogs) UntypedV() interface{} { return p.Val }
func (p *SuppressDifferentOriginSubframeDialogs) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SuppressDifferentOriginSubframeDialogs) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 830. DeviceBorealisAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceBorealisAllowed struct {
	Stat Status
	Val  bool
}

func (p *DeviceBorealisAllowed) Name() string          { return "DeviceBorealisAllowed" }
func (p *DeviceBorealisAllowed) Field() string         { return "device_borealis_allowed.allowed" }
func (p *DeviceBorealisAllowed) Scope() Scope          { return ScopeDevice }
func (p *DeviceBorealisAllowed) Status() Status        { return p.Stat }
func (p *DeviceBorealisAllowed) UntypedV() interface{} { return p.Val }
func (p *DeviceBorealisAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceBorealisAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 831. UserBorealisAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type UserBorealisAllowed struct {
	Stat Status
	Val  bool
}

func (p *UserBorealisAllowed) Name() string          { return "UserBorealisAllowed" }
func (p *UserBorealisAllowed) Field() string         { return "" }
func (p *UserBorealisAllowed) Scope() Scope          { return ScopeUser }
func (p *UserBorealisAllowed) Status() Status        { return p.Stat }
func (p *UserBorealisAllowed) UntypedV() interface{} { return p.Val }
func (p *UserBorealisAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *UserBorealisAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 832. LacrosSecondaryProfilesAllowed
// This policy has a default value of False.
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type LacrosSecondaryProfilesAllowed struct {
	Stat Status
	Val  bool
}

func (p *LacrosSecondaryProfilesAllowed) Name() string          { return "LacrosSecondaryProfilesAllowed" }
func (p *LacrosSecondaryProfilesAllowed) Field() string         { return "" }
func (p *LacrosSecondaryProfilesAllowed) Scope() Scope          { return ScopeUser }
func (p *LacrosSecondaryProfilesAllowed) Status() Status        { return p.Stat }
func (p *LacrosSecondaryProfilesAllowed) UntypedV() interface{} { return p.Val }
func (p *LacrosSecondaryProfilesAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *LacrosSecondaryProfilesAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 833. GaiaLockScreenOfflineSigninTimeLimitDays
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type GaiaLockScreenOfflineSigninTimeLimitDays struct {
	Stat Status
	Val  int
}

func (p *GaiaLockScreenOfflineSigninTimeLimitDays) Name() string {
	return "GaiaLockScreenOfflineSigninTimeLimitDays"
}
func (p *GaiaLockScreenOfflineSigninTimeLimitDays) Field() string         { return "" }
func (p *GaiaLockScreenOfflineSigninTimeLimitDays) Scope() Scope          { return ScopeUser }
func (p *GaiaLockScreenOfflineSigninTimeLimitDays) Status() Status        { return p.Stat }
func (p *GaiaLockScreenOfflineSigninTimeLimitDays) UntypedV() interface{} { return p.Val }
func (p *GaiaLockScreenOfflineSigninTimeLimitDays) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *GaiaLockScreenOfflineSigninTimeLimitDays) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 834. SamlLockScreenOfflineSigninTimeLimitDays
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SamlLockScreenOfflineSigninTimeLimitDays struct {
	Stat Status
	Val  int
}

func (p *SamlLockScreenOfflineSigninTimeLimitDays) Name() string {
	return "SamlLockScreenOfflineSigninTimeLimitDays"
}
func (p *SamlLockScreenOfflineSigninTimeLimitDays) Field() string         { return "" }
func (p *SamlLockScreenOfflineSigninTimeLimitDays) Scope() Scope          { return ScopeUser }
func (p *SamlLockScreenOfflineSigninTimeLimitDays) Status() Status        { return p.Stat }
func (p *SamlLockScreenOfflineSigninTimeLimitDays) UntypedV() interface{} { return p.Val }
func (p *SamlLockScreenOfflineSigninTimeLimitDays) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *SamlLockScreenOfflineSigninTimeLimitDays) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 835. ReportDevicePrintJobs
// This policy can be modified without rebooting.
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type ReportDevicePrintJobs struct {
	Stat Status
	Val  bool
}

func (p *ReportDevicePrintJobs) Name() string          { return "ReportDevicePrintJobs" }
func (p *ReportDevicePrintJobs) Field() string         { return "device_reporting.report_print_jobs" }
func (p *ReportDevicePrintJobs) Scope() Scope          { return ScopeDevice }
func (p *ReportDevicePrintJobs) Status() Status        { return p.Stat }
func (p *ReportDevicePrintJobs) UntypedV() interface{} { return p.Val }
func (p *ReportDevicePrintJobs) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDevicePrintJobs) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 837. SerialAllowAllPortsForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SerialAllowAllPortsForUrls struct {
	Stat Status
	Val  []string
}

func (p *SerialAllowAllPortsForUrls) Name() string          { return "SerialAllowAllPortsForUrls" }
func (p *SerialAllowAllPortsForUrls) Field() string         { return "" }
func (p *SerialAllowAllPortsForUrls) Scope() Scope          { return ScopeUser }
func (p *SerialAllowAllPortsForUrls) Status() Status        { return p.Stat }
func (p *SerialAllowAllPortsForUrls) UntypedV() interface{} { return p.Val }
func (p *SerialAllowAllPortsForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *SerialAllowAllPortsForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 838. SerialAllowUsbDevicesForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SerialAllowUsbDevicesForUrls struct {
	Stat Status
	Val  []*SerialAllowUsbDevicesForUrlsValue
}

type SerialAllowUsbDevicesForUrlsValue struct {
	Devices []*SerialAllowUsbDevicesForUrlsValueDevices `json:"devices,omitempty"`
	Urls    []string                                    `json:"urls,omitempty"`
}

type SerialAllowUsbDevicesForUrlsValueDevices struct {
	ProductId int `json:"product_id"`
	VendorId  int `json:"vendor_id"`
}

func (p *SerialAllowUsbDevicesForUrls) Name() string          { return "SerialAllowUsbDevicesForUrls" }
func (p *SerialAllowUsbDevicesForUrls) Field() string         { return "" }
func (p *SerialAllowUsbDevicesForUrls) Scope() Scope          { return ScopeUser }
func (p *SerialAllowUsbDevicesForUrls) Status() Status        { return p.Stat }
func (p *SerialAllowUsbDevicesForUrls) UntypedV() interface{} { return p.Val }
func (p *SerialAllowUsbDevicesForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*SerialAllowUsbDevicesForUrlsValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*SerialAllowUsbDevicesForUrlsValue", m)
	}
	return v, nil
}
func (p *SerialAllowUsbDevicesForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]*SerialAllowUsbDevicesForUrlsValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 841. CECPQ2Enabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type CECPQ2Enabled struct {
	Stat Status
	Val  bool
}

func (p *CECPQ2Enabled) Name() string          { return "CECPQ2Enabled" }
func (p *CECPQ2Enabled) Field() string         { return "" }
func (p *CECPQ2Enabled) Scope() Scope          { return ScopeUser }
func (p *CECPQ2Enabled) Status() Status        { return p.Stat }
func (p *CECPQ2Enabled) UntypedV() interface{} { return p.Val }
func (p *CECPQ2Enabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *CECPQ2Enabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 843. WebRtcIPHandling
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type WebRtcIPHandling struct {
	Stat Status
	Val  string
}

func (p *WebRtcIPHandling) Name() string          { return "WebRtcIPHandling" }
func (p *WebRtcIPHandling) Field() string         { return "" }
func (p *WebRtcIPHandling) Scope() Scope          { return ScopeUser }
func (p *WebRtcIPHandling) Status() Status        { return p.Stat }
func (p *WebRtcIPHandling) UntypedV() interface{} { return p.Val }
func (p *WebRtcIPHandling) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *WebRtcIPHandling) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 844. PdfAnnotationsEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PdfAnnotationsEnabled struct {
	Stat Status
	Val  bool
}

func (p *PdfAnnotationsEnabled) Name() string          { return "PdfAnnotationsEnabled" }
func (p *PdfAnnotationsEnabled) Field() string         { return "" }
func (p *PdfAnnotationsEnabled) Scope() Scope          { return ScopeUser }
func (p *PdfAnnotationsEnabled) Status() Status        { return p.Stat }
func (p *PdfAnnotationsEnabled) UntypedV() interface{} { return p.Val }
func (p *PdfAnnotationsEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PdfAnnotationsEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 848. DeviceAllowedBluetoothServices
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceAllowedBluetoothServices struct {
	Stat Status
	Val  []string
}

func (p *DeviceAllowedBluetoothServices) Name() string { return "DeviceAllowedBluetoothServices" }
func (p *DeviceAllowedBluetoothServices) Field() string {
	return "device_allowed_bluetooth_services.allowlist"
}
func (p *DeviceAllowedBluetoothServices) Scope() Scope          { return ScopeDevice }
func (p *DeviceAllowedBluetoothServices) Status() Status        { return p.Stat }
func (p *DeviceAllowedBluetoothServices) UntypedV() interface{} { return p.Val }
func (p *DeviceAllowedBluetoothServices) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DeviceAllowedBluetoothServices) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 849. ExplicitlyAllowedNetworkPorts
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ExplicitlyAllowedNetworkPorts struct {
	Stat Status
	Val  []string
}

func (p *ExplicitlyAllowedNetworkPorts) Name() string          { return "ExplicitlyAllowedNetworkPorts" }
func (p *ExplicitlyAllowedNetworkPorts) Field() string         { return "" }
func (p *ExplicitlyAllowedNetworkPorts) Scope() Scope          { return ScopeUser }
func (p *ExplicitlyAllowedNetworkPorts) Status() Status        { return p.Stat }
func (p *ExplicitlyAllowedNetworkPorts) UntypedV() interface{} { return p.Val }
func (p *ExplicitlyAllowedNetworkPorts) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *ExplicitlyAllowedNetworkPorts) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 850. DeviceDebugPacketCaptureAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceDebugPacketCaptureAllowed struct {
	Stat Status
	Val  bool
}

func (p *DeviceDebugPacketCaptureAllowed) Name() string { return "DeviceDebugPacketCaptureAllowed" }
func (p *DeviceDebugPacketCaptureAllowed) Field() string {
	return "device_debug_packet_capture_allowed.allowed"
}
func (p *DeviceDebugPacketCaptureAllowed) Scope() Scope          { return ScopeDevice }
func (p *DeviceDebugPacketCaptureAllowed) Status() Status        { return p.Stat }
func (p *DeviceDebugPacketCaptureAllowed) UntypedV() interface{} { return p.Val }
func (p *DeviceDebugPacketCaptureAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceDebugPacketCaptureAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 851. SuggestLogoutAfterClosingLastWindow
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SuggestLogoutAfterClosingLastWindow struct {
	Stat Status
	Val  bool
}

func (p *SuggestLogoutAfterClosingLastWindow) Name() string {
	return "SuggestLogoutAfterClosingLastWindow"
}
func (p *SuggestLogoutAfterClosingLastWindow) Field() string         { return "" }
func (p *SuggestLogoutAfterClosingLastWindow) Scope() Scope          { return ScopeUser }
func (p *SuggestLogoutAfterClosingLastWindow) Status() Status        { return p.Stat }
func (p *SuggestLogoutAfterClosingLastWindow) UntypedV() interface{} { return p.Val }
func (p *SuggestLogoutAfterClosingLastWindow) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SuggestLogoutAfterClosingLastWindow) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 852. SharedArrayBufferUnrestrictedAccessAllowed
///////////////////////////////////////////////////////////////////////////////
type SharedArrayBufferUnrestrictedAccessAllowed struct {
	Stat Status
	Val  bool
}

func (p *SharedArrayBufferUnrestrictedAccessAllowed) Name() string {
	return "SharedArrayBufferUnrestrictedAccessAllowed"
}
func (p *SharedArrayBufferUnrestrictedAccessAllowed) Field() string         { return "" }
func (p *SharedArrayBufferUnrestrictedAccessAllowed) Scope() Scope          { return ScopeUser }
func (p *SharedArrayBufferUnrestrictedAccessAllowed) Status() Status        { return p.Stat }
func (p *SharedArrayBufferUnrestrictedAccessAllowed) UntypedV() interface{} { return p.Val }
func (p *SharedArrayBufferUnrestrictedAccessAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SharedArrayBufferUnrestrictedAccessAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 854. RelaunchWindow
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RelaunchWindow struct {
	Stat Status
	Val  *RelaunchWindowValue
}

type RelaunchWindowValue struct {
	Entries []*RelaunchWindowValueEntries `json:"entries,omitempty"`
}

type RelaunchWindowValueEntries struct {
	DurationMins int      `json:"duration_mins"`
	Start        *RefTime `json:"start"`
}

func (p *RelaunchWindow) Name() string          { return "RelaunchWindow" }
func (p *RelaunchWindow) Field() string         { return "" }
func (p *RelaunchWindow) Scope() Scope          { return ScopeUser }
func (p *RelaunchWindow) Status() Status        { return p.Stat }
func (p *RelaunchWindow) UntypedV() interface{} { return p.Val }
func (p *RelaunchWindow) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *RelaunchWindowValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *RelaunchWindowValue", m)
	}
	return v, nil
}
func (p *RelaunchWindow) Equal(iface interface{}) bool {
	v, ok := iface.(*RelaunchWindowValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 855. LacrosAvailability
// This policy has a default value of lacros_disallowed.
///////////////////////////////////////////////////////////////////////////////
type LacrosAvailability struct {
	Stat Status
	Val  string
}

func (p *LacrosAvailability) Name() string          { return "LacrosAvailability" }
func (p *LacrosAvailability) Field() string         { return "" }
func (p *LacrosAvailability) Scope() Scope          { return ScopeUser }
func (p *LacrosAvailability) Status() Status        { return p.Stat }
func (p *LacrosAvailability) UntypedV() interface{} { return p.Val }
func (p *LacrosAvailability) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *LacrosAvailability) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 856. DataLeakPreventionReportingEnabled
///////////////////////////////////////////////////////////////////////////////
type DataLeakPreventionReportingEnabled struct {
	Stat Status
	Val  bool
}

func (p *DataLeakPreventionReportingEnabled) Name() string {
	return "DataLeakPreventionReportingEnabled"
}
func (p *DataLeakPreventionReportingEnabled) Field() string         { return "" }
func (p *DataLeakPreventionReportingEnabled) Scope() Scope          { return ScopeUser }
func (p *DataLeakPreventionReportingEnabled) Status() Status        { return p.Stat }
func (p *DataLeakPreventionReportingEnabled) UntypedV() interface{} { return p.Val }
func (p *DataLeakPreventionReportingEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DataLeakPreventionReportingEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 857. AdditionalDnsQueryTypesEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AdditionalDnsQueryTypesEnabled struct {
	Stat Status
	Val  bool
}

func (p *AdditionalDnsQueryTypesEnabled) Name() string          { return "AdditionalDnsQueryTypesEnabled" }
func (p *AdditionalDnsQueryTypesEnabled) Field() string         { return "" }
func (p *AdditionalDnsQueryTypesEnabled) Scope() Scope          { return ScopeUser }
func (p *AdditionalDnsQueryTypesEnabled) Status() Status        { return p.Stat }
func (p *AdditionalDnsQueryTypesEnabled) UntypedV() interface{} { return p.Val }
func (p *AdditionalDnsQueryTypesEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AdditionalDnsQueryTypesEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 860. ManagedAccountsSigninRestriction
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type ManagedAccountsSigninRestriction struct {
	Stat Status
	Val  string
}

func (p *ManagedAccountsSigninRestriction) Name() string          { return "ManagedAccountsSigninRestriction" }
func (p *ManagedAccountsSigninRestriction) Field() string         { return "" }
func (p *ManagedAccountsSigninRestriction) Scope() Scope          { return ScopeUser }
func (p *ManagedAccountsSigninRestriction) Status() Status        { return p.Stat }
func (p *ManagedAccountsSigninRestriction) UntypedV() interface{} { return p.Val }
func (p *ManagedAccountsSigninRestriction) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *ManagedAccountsSigninRestriction) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 861. LockIconInAddressBarEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type LockIconInAddressBarEnabled struct {
	Stat Status
	Val  bool
}

func (p *LockIconInAddressBarEnabled) Name() string          { return "LockIconInAddressBarEnabled" }
func (p *LockIconInAddressBarEnabled) Field() string         { return "" }
func (p *LockIconInAddressBarEnabled) Scope() Scope          { return ScopeUser }
func (p *LockIconInAddressBarEnabled) Status() Status        { return p.Stat }
func (p *LockIconInAddressBarEnabled) UntypedV() interface{} { return p.Val }
func (p *LockIconInAddressBarEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *LockIconInAddressBarEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 862. DeviceScheduledReboot
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceScheduledReboot struct {
	Stat Status
	Val  *DeviceScheduledRebootValue
}

type DeviceScheduledRebootValue struct {
	DayOfMonth int      `json:"day_of_month"`
	DayOfWeek  string   `json:"day_of_week"`
	Frequency  string   `json:"frequency"`
	RebootTime *RefTime `json:"reboot_time"`
}

func (p *DeviceScheduledReboot) Name() string { return "DeviceScheduledReboot" }
func (p *DeviceScheduledReboot) Field() string {
	return "device_scheduled_reboot.device_scheduled_reboot_settings"
}
func (p *DeviceScheduledReboot) Scope() Scope          { return ScopeDevice }
func (p *DeviceScheduledReboot) Status() Status        { return p.Stat }
func (p *DeviceScheduledReboot) UntypedV() interface{} { return p.Val }
func (p *DeviceScheduledReboot) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *DeviceScheduledRebootValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *DeviceScheduledRebootValue", m)
	}
	return v, nil
}
func (p *DeviceScheduledReboot) Equal(iface interface{}) bool {
	v, ok := iface.(*DeviceScheduledRebootValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 863. ReportDeviceLoginLogout
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceLoginLogout struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceLoginLogout) Name() string          { return "ReportDeviceLoginLogout" }
func (p *ReportDeviceLoginLogout) Field() string         { return "device_reporting.report_login_logout" }
func (p *ReportDeviceLoginLogout) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceLoginLogout) Status() Status        { return p.Stat }
func (p *ReportDeviceLoginLogout) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceLoginLogout) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceLoginLogout) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 864. RemoteDebuggingAllowed
///////////////////////////////////////////////////////////////////////////////
type RemoteDebuggingAllowed struct {
	Stat Status
	Val  bool
}

func (p *RemoteDebuggingAllowed) Name() string          { return "RemoteDebuggingAllowed" }
func (p *RemoteDebuggingAllowed) Field() string         { return "" }
func (p *RemoteDebuggingAllowed) Scope() Scope          { return ScopeUser }
func (p *RemoteDebuggingAllowed) Status() Status        { return p.Stat }
func (p *RemoteDebuggingAllowed) UntypedV() interface{} { return p.Val }
func (p *RemoteDebuggingAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *RemoteDebuggingAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 865. DeviceAttributesAllowedForOrigins
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceAttributesAllowedForOrigins struct {
	Stat Status
	Val  []string
}

func (p *DeviceAttributesAllowedForOrigins) Name() string          { return "DeviceAttributesAllowedForOrigins" }
func (p *DeviceAttributesAllowedForOrigins) Field() string         { return "" }
func (p *DeviceAttributesAllowedForOrigins) Scope() Scope          { return ScopeUser }
func (p *DeviceAttributesAllowedForOrigins) Status() Status        { return p.Stat }
func (p *DeviceAttributesAllowedForOrigins) UntypedV() interface{} { return p.Val }
func (p *DeviceAttributesAllowedForOrigins) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *DeviceAttributesAllowedForOrigins) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 867. DefaultJavaScriptJitSetting
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultJavaScriptJitSetting struct {
	Stat Status
	Val  int
}

func (p *DefaultJavaScriptJitSetting) Name() string          { return "DefaultJavaScriptJitSetting" }
func (p *DefaultJavaScriptJitSetting) Field() string         { return "" }
func (p *DefaultJavaScriptJitSetting) Scope() Scope          { return ScopeUser }
func (p *DefaultJavaScriptJitSetting) Status() Status        { return p.Stat }
func (p *DefaultJavaScriptJitSetting) UntypedV() interface{} { return p.Val }
func (p *DefaultJavaScriptJitSetting) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DefaultJavaScriptJitSetting) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 868. JavaScriptJitAllowedForSites
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type JavaScriptJitAllowedForSites struct {
	Stat Status
	Val  []string
}

func (p *JavaScriptJitAllowedForSites) Name() string          { return "JavaScriptJitAllowedForSites" }
func (p *JavaScriptJitAllowedForSites) Field() string         { return "" }
func (p *JavaScriptJitAllowedForSites) Scope() Scope          { return ScopeUser }
func (p *JavaScriptJitAllowedForSites) Status() Status        { return p.Stat }
func (p *JavaScriptJitAllowedForSites) UntypedV() interface{} { return p.Val }
func (p *JavaScriptJitAllowedForSites) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *JavaScriptJitAllowedForSites) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 869. JavaScriptJitBlockedForSites
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type JavaScriptJitBlockedForSites struct {
	Stat Status
	Val  []string
}

func (p *JavaScriptJitBlockedForSites) Name() string          { return "JavaScriptJitBlockedForSites" }
func (p *JavaScriptJitBlockedForSites) Field() string         { return "" }
func (p *JavaScriptJitBlockedForSites) Scope() Scope          { return ScopeUser }
func (p *JavaScriptJitBlockedForSites) Status() Status        { return p.Stat }
func (p *JavaScriptJitBlockedForSites) UntypedV() interface{} { return p.Val }
func (p *JavaScriptJitBlockedForSites) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *JavaScriptJitBlockedForSites) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 870. HttpsOnlyMode
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type HttpsOnlyMode struct {
	Stat Status
	Val  string
}

func (p *HttpsOnlyMode) Name() string          { return "HttpsOnlyMode" }
func (p *HttpsOnlyMode) Field() string         { return "" }
func (p *HttpsOnlyMode) Scope() Scope          { return ScopeUser }
func (p *HttpsOnlyMode) Status() Status        { return p.Stat }
func (p *HttpsOnlyMode) UntypedV() interface{} { return p.Val }
func (p *HttpsOnlyMode) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *HttpsOnlyMode) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 873. ReportDeviceAudioStatus
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceAudioStatus struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceAudioStatus) Name() string          { return "ReportDeviceAudioStatus" }
func (p *ReportDeviceAudioStatus) Field() string         { return "device_reporting.report_audio_status" }
func (p *ReportDeviceAudioStatus) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceAudioStatus) Status() Status        { return p.Stat }
func (p *ReportDeviceAudioStatus) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceAudioStatus) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceAudioStatus) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 874. DeviceHostnameUserConfigurable
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceHostnameUserConfigurable struct {
	Stat Status
	Val  bool
}

func (p *DeviceHostnameUserConfigurable) Name() string { return "DeviceHostnameUserConfigurable" }
func (p *DeviceHostnameUserConfigurable) Field() string {
	return "hostname_user_configurable.device_hostname_user_configurable"
}
func (p *DeviceHostnameUserConfigurable) Scope() Scope          { return ScopeDevice }
func (p *DeviceHostnameUserConfigurable) Status() Status        { return p.Stat }
func (p *DeviceHostnameUserConfigurable) UntypedV() interface{} { return p.Val }
func (p *DeviceHostnameUserConfigurable) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceHostnameUserConfigurable) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 875. ReportDeviceNetworkConfiguration
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceNetworkConfiguration struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceNetworkConfiguration) Name() string { return "ReportDeviceNetworkConfiguration" }
func (p *ReportDeviceNetworkConfiguration) Field() string {
	return "device_reporting.report_network_configuration"
}
func (p *ReportDeviceNetworkConfiguration) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceNetworkConfiguration) Status() Status        { return p.Stat }
func (p *ReportDeviceNetworkConfiguration) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceNetworkConfiguration) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceNetworkConfiguration) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 876. ReportDeviceNetworkStatus
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceNetworkStatus struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceNetworkStatus) Name() string          { return "ReportDeviceNetworkStatus" }
func (p *ReportDeviceNetworkStatus) Field() string         { return "device_reporting.report_network_status" }
func (p *ReportDeviceNetworkStatus) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceNetworkStatus) Status() Status        { return p.Stat }
func (p *ReportDeviceNetworkStatus) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceNetworkStatus) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceNetworkStatus) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 877. DataLeakPreventionClipboardCheckSizeLimit
///////////////////////////////////////////////////////////////////////////////
type DataLeakPreventionClipboardCheckSizeLimit struct {
	Stat Status
	Val  int
}

func (p *DataLeakPreventionClipboardCheckSizeLimit) Name() string {
	return "DataLeakPreventionClipboardCheckSizeLimit"
}
func (p *DataLeakPreventionClipboardCheckSizeLimit) Field() string         { return "" }
func (p *DataLeakPreventionClipboardCheckSizeLimit) Scope() Scope          { return ScopeUser }
func (p *DataLeakPreventionClipboardCheckSizeLimit) Status() Status        { return p.Stat }
func (p *DataLeakPreventionClipboardCheckSizeLimit) UntypedV() interface{} { return p.Val }
func (p *DataLeakPreventionClipboardCheckSizeLimit) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DataLeakPreventionClipboardCheckSizeLimit) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 879. RestrictedManagedGuestSessionExtensionCleanupExemptList
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RestrictedManagedGuestSessionExtensionCleanupExemptList struct {
	Stat Status
	Val  []string
}

func (p *RestrictedManagedGuestSessionExtensionCleanupExemptList) Name() string {
	return "RestrictedManagedGuestSessionExtensionCleanupExemptList"
}
func (p *RestrictedManagedGuestSessionExtensionCleanupExemptList) Field() string  { return "" }
func (p *RestrictedManagedGuestSessionExtensionCleanupExemptList) Scope() Scope   { return ScopeUser }
func (p *RestrictedManagedGuestSessionExtensionCleanupExemptList) Status() Status { return p.Stat }
func (p *RestrictedManagedGuestSessionExtensionCleanupExemptList) UntypedV() interface{} {
	return p.Val
}
func (p *RestrictedManagedGuestSessionExtensionCleanupExemptList) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *RestrictedManagedGuestSessionExtensionCleanupExemptList) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 880. DisplayCapturePermissionsPolicyEnabled
///////////////////////////////////////////////////////////////////////////////
type DisplayCapturePermissionsPolicyEnabled struct {
	Stat Status
	Val  bool
}

func (p *DisplayCapturePermissionsPolicyEnabled) Name() string {
	return "DisplayCapturePermissionsPolicyEnabled"
}
func (p *DisplayCapturePermissionsPolicyEnabled) Field() string         { return "" }
func (p *DisplayCapturePermissionsPolicyEnabled) Scope() Scope          { return ScopeUser }
func (p *DisplayCapturePermissionsPolicyEnabled) Status() Status        { return p.Stat }
func (p *DisplayCapturePermissionsPolicyEnabled) UntypedV() interface{} { return p.Val }
func (p *DisplayCapturePermissionsPolicyEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DisplayCapturePermissionsPolicyEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 881. ScreenCaptureAllowedByOrigins
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ScreenCaptureAllowedByOrigins struct {
	Stat Status
	Val  []string
}

func (p *ScreenCaptureAllowedByOrigins) Name() string          { return "ScreenCaptureAllowedByOrigins" }
func (p *ScreenCaptureAllowedByOrigins) Field() string         { return "" }
func (p *ScreenCaptureAllowedByOrigins) Scope() Scope          { return ScopeUser }
func (p *ScreenCaptureAllowedByOrigins) Status() Status        { return p.Stat }
func (p *ScreenCaptureAllowedByOrigins) UntypedV() interface{} { return p.Val }
func (p *ScreenCaptureAllowedByOrigins) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *ScreenCaptureAllowedByOrigins) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 882. WindowCaptureAllowedByOrigins
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type WindowCaptureAllowedByOrigins struct {
	Stat Status
	Val  []string
}

func (p *WindowCaptureAllowedByOrigins) Name() string          { return "WindowCaptureAllowedByOrigins" }
func (p *WindowCaptureAllowedByOrigins) Field() string         { return "" }
func (p *WindowCaptureAllowedByOrigins) Scope() Scope          { return ScopeUser }
func (p *WindowCaptureAllowedByOrigins) Status() Status        { return p.Stat }
func (p *WindowCaptureAllowedByOrigins) UntypedV() interface{} { return p.Val }
func (p *WindowCaptureAllowedByOrigins) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *WindowCaptureAllowedByOrigins) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 883. TabCaptureAllowedByOrigins
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type TabCaptureAllowedByOrigins struct {
	Stat Status
	Val  []string
}

func (p *TabCaptureAllowedByOrigins) Name() string          { return "TabCaptureAllowedByOrigins" }
func (p *TabCaptureAllowedByOrigins) Field() string         { return "" }
func (p *TabCaptureAllowedByOrigins) Scope() Scope          { return ScopeUser }
func (p *TabCaptureAllowedByOrigins) Status() Status        { return p.Stat }
func (p *TabCaptureAllowedByOrigins) UntypedV() interface{} { return p.Val }
func (p *TabCaptureAllowedByOrigins) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *TabCaptureAllowedByOrigins) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 884. SameOriginTabCaptureAllowedByOrigins
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type SameOriginTabCaptureAllowedByOrigins struct {
	Stat Status
	Val  []string
}

func (p *SameOriginTabCaptureAllowedByOrigins) Name() string {
	return "SameOriginTabCaptureAllowedByOrigins"
}
func (p *SameOriginTabCaptureAllowedByOrigins) Field() string         { return "" }
func (p *SameOriginTabCaptureAllowedByOrigins) Scope() Scope          { return ScopeUser }
func (p *SameOriginTabCaptureAllowedByOrigins) Status() Status        { return p.Stat }
func (p *SameOriginTabCaptureAllowedByOrigins) UntypedV() interface{} { return p.Val }
func (p *SameOriginTabCaptureAllowedByOrigins) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *SameOriginTabCaptureAllowedByOrigins) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 885. AssistantVoiceMatchEnabledDuringOobe
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AssistantVoiceMatchEnabledDuringOobe struct {
	Stat Status
	Val  bool
}

func (p *AssistantVoiceMatchEnabledDuringOobe) Name() string {
	return "AssistantVoiceMatchEnabledDuringOobe"
}
func (p *AssistantVoiceMatchEnabledDuringOobe) Field() string         { return "" }
func (p *AssistantVoiceMatchEnabledDuringOobe) Scope() Scope          { return ScopeUser }
func (p *AssistantVoiceMatchEnabledDuringOobe) Status() Status        { return p.Stat }
func (p *AssistantVoiceMatchEnabledDuringOobe) UntypedV() interface{} { return p.Val }
func (p *AssistantVoiceMatchEnabledDuringOobe) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AssistantVoiceMatchEnabledDuringOobe) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 886. LensRegionSearchEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type LensRegionSearchEnabled struct {
	Stat Status
	Val  bool
}

func (p *LensRegionSearchEnabled) Name() string          { return "LensRegionSearchEnabled" }
func (p *LensRegionSearchEnabled) Field() string         { return "" }
func (p *LensRegionSearchEnabled) Scope() Scope          { return ScopeUser }
func (p *LensRegionSearchEnabled) Status() Status        { return p.Stat }
func (p *LensRegionSearchEnabled) UntypedV() interface{} { return p.Val }
func (p *LensRegionSearchEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *LensRegionSearchEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 887. ArcAppToWebAppSharingEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ArcAppToWebAppSharingEnabled struct {
	Stat Status
	Val  bool
}

func (p *ArcAppToWebAppSharingEnabled) Name() string          { return "ArcAppToWebAppSharingEnabled" }
func (p *ArcAppToWebAppSharingEnabled) Field() string         { return "" }
func (p *ArcAppToWebAppSharingEnabled) Scope() Scope          { return ScopeUser }
func (p *ArcAppToWebAppSharingEnabled) Status() Status        { return p.Stat }
func (p *ArcAppToWebAppSharingEnabled) UntypedV() interface{} { return p.Val }
func (p *ArcAppToWebAppSharingEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ArcAppToWebAppSharingEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 888. EnhancedNetworkVoicesInSelectToSpeakAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type EnhancedNetworkVoicesInSelectToSpeakAllowed struct {
	Stat Status
	Val  bool
}

func (p *EnhancedNetworkVoicesInSelectToSpeakAllowed) Name() string {
	return "EnhancedNetworkVoicesInSelectToSpeakAllowed"
}
func (p *EnhancedNetworkVoicesInSelectToSpeakAllowed) Field() string         { return "" }
func (p *EnhancedNetworkVoicesInSelectToSpeakAllowed) Scope() Scope          { return ScopeUser }
func (p *EnhancedNetworkVoicesInSelectToSpeakAllowed) Status() Status        { return p.Stat }
func (p *EnhancedNetworkVoicesInSelectToSpeakAllowed) UntypedV() interface{} { return p.Val }
func (p *EnhancedNetworkVoicesInSelectToSpeakAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *EnhancedNetworkVoicesInSelectToSpeakAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 890. PrintRasterizePdfDpi
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintRasterizePdfDpi struct {
	Stat Status
	Val  int
}

func (p *PrintRasterizePdfDpi) Name() string          { return "PrintRasterizePdfDpi" }
func (p *PrintRasterizePdfDpi) Field() string         { return "" }
func (p *PrintRasterizePdfDpi) Scope() Scope          { return ScopeUser }
func (p *PrintRasterizePdfDpi) Status() Status        { return p.Stat }
func (p *PrintRasterizePdfDpi) UntypedV() interface{} { return p.Val }
func (p *PrintRasterizePdfDpi) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *PrintRasterizePdfDpi) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 891. DeviceTargetVersionSelector
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceTargetVersionSelector struct {
	Stat Status
	Val  string
}

func (p *DeviceTargetVersionSelector) Name() string { return "DeviceTargetVersionSelector" }
func (p *DeviceTargetVersionSelector) Field() string {
	return "auto_update_settings.target_version_selector"
}
func (p *DeviceTargetVersionSelector) Scope() Scope          { return ScopeDevice }
func (p *DeviceTargetVersionSelector) Status() Status        { return p.Stat }
func (p *DeviceTargetVersionSelector) UntypedV() interface{} { return p.Val }
func (p *DeviceTargetVersionSelector) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *DeviceTargetVersionSelector) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 894. DeviceRestrictedManagedGuestSessionEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceRestrictedManagedGuestSessionEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceRestrictedManagedGuestSessionEnabled) Name() string {
	return "DeviceRestrictedManagedGuestSessionEnabled"
}
func (p *DeviceRestrictedManagedGuestSessionEnabled) Field() string {
	return "device_restricted_managed_guest_session_enabled.enabled"
}
func (p *DeviceRestrictedManagedGuestSessionEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceRestrictedManagedGuestSessionEnabled) Status() Status        { return p.Stat }
func (p *DeviceRestrictedManagedGuestSessionEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceRestrictedManagedGuestSessionEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceRestrictedManagedGuestSessionEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 896. PrintPdfAsImageDefault
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PrintPdfAsImageDefault struct {
	Stat Status
	Val  bool
}

func (p *PrintPdfAsImageDefault) Name() string          { return "PrintPdfAsImageDefault" }
func (p *PrintPdfAsImageDefault) Field() string         { return "" }
func (p *PrintPdfAsImageDefault) Scope() Scope          { return ScopeUser }
func (p *PrintPdfAsImageDefault) Status() Status        { return p.Stat }
func (p *PrintPdfAsImageDefault) UntypedV() interface{} { return p.Val }
func (p *PrintPdfAsImageDefault) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PrintPdfAsImageDefault) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 897. FullRestoreEnabled
///////////////////////////////////////////////////////////////////////////////
type FullRestoreEnabled struct {
	Stat Status
	Val  bool
}

func (p *FullRestoreEnabled) Name() string          { return "FullRestoreEnabled" }
func (p *FullRestoreEnabled) Field() string         { return "" }
func (p *FullRestoreEnabled) Scope() Scope          { return ScopeUser }
func (p *FullRestoreEnabled) Status() Status        { return p.Stat }
func (p *FullRestoreEnabled) UntypedV() interface{} { return p.Val }
func (p *FullRestoreEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *FullRestoreEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 898. GhostWindowEnabled
///////////////////////////////////////////////////////////////////////////////
type GhostWindowEnabled struct {
	Stat Status
	Val  bool
}

func (p *GhostWindowEnabled) Name() string          { return "GhostWindowEnabled" }
func (p *GhostWindowEnabled) Field() string         { return "" }
func (p *GhostWindowEnabled) Scope() Scope          { return ScopeUser }
func (p *GhostWindowEnabled) Status() Status        { return p.Stat }
func (p *GhostWindowEnabled) UntypedV() interface{} { return p.Val }
func (p *GhostWindowEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *GhostWindowEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 900. ReportDeviceSecurityStatus
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceSecurityStatus struct {
	Stat Status
	Val  bool
}

func (p *ReportDeviceSecurityStatus) Name() string          { return "ReportDeviceSecurityStatus" }
func (p *ReportDeviceSecurityStatus) Field() string         { return "device_reporting.report_security_status" }
func (p *ReportDeviceSecurityStatus) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceSecurityStatus) Status() Status        { return p.Stat }
func (p *ReportDeviceSecurityStatus) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceSecurityStatus) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDeviceSecurityStatus) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 901. EnableDeviceGranularReporting
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type EnableDeviceGranularReporting struct {
	Stat Status
	Val  bool
}

func (p *EnableDeviceGranularReporting) Name() string { return "EnableDeviceGranularReporting" }
func (p *EnableDeviceGranularReporting) Field() string {
	return "device_reporting.enable_granular_reporting"
}
func (p *EnableDeviceGranularReporting) Scope() Scope          { return ScopeDevice }
func (p *EnableDeviceGranularReporting) Status() Status        { return p.Stat }
func (p *EnableDeviceGranularReporting) UntypedV() interface{} { return p.Val }
func (p *EnableDeviceGranularReporting) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *EnableDeviceGranularReporting) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 904. DeviceLoginScreenPromptOnMultipleMatchingCertificates
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenPromptOnMultipleMatchingCertificates struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenPromptOnMultipleMatchingCertificates) Name() string {
	return "DeviceLoginScreenPromptOnMultipleMatchingCertificates"
}
func (p *DeviceLoginScreenPromptOnMultipleMatchingCertificates) Field() string {
	return "login_screen_prompt_on_multiple_matching_certificates.value"
}
func (p *DeviceLoginScreenPromptOnMultipleMatchingCertificates) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenPromptOnMultipleMatchingCertificates) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenPromptOnMultipleMatchingCertificates) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenPromptOnMultipleMatchingCertificates) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenPromptOnMultipleMatchingCertificates) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 905. PromptOnMultipleMatchingCertificates
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PromptOnMultipleMatchingCertificates struct {
	Stat Status
	Val  bool
}

func (p *PromptOnMultipleMatchingCertificates) Name() string {
	return "PromptOnMultipleMatchingCertificates"
}
func (p *PromptOnMultipleMatchingCertificates) Field() string         { return "" }
func (p *PromptOnMultipleMatchingCertificates) Scope() Scope          { return ScopeUser }
func (p *PromptOnMultipleMatchingCertificates) Status() Status        { return p.Stat }
func (p *PromptOnMultipleMatchingCertificates) UntypedV() interface{} { return p.Val }
func (p *PromptOnMultipleMatchingCertificates) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PromptOnMultipleMatchingCertificates) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 906. SideSearchEnabled
///////////////////////////////////////////////////////////////////////////////
type SideSearchEnabled struct {
	Stat Status
	Val  bool
}

func (p *SideSearchEnabled) Name() string          { return "SideSearchEnabled" }
func (p *SideSearchEnabled) Field() string         { return "" }
func (p *SideSearchEnabled) Scope() Scope          { return ScopeUser }
func (p *SideSearchEnabled) Status() Status        { return p.Stat }
func (p *SideSearchEnabled) UntypedV() interface{} { return p.Val }
func (p *SideSearchEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SideSearchEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 907. AccessCodeCastEnabled
// This policy can be modified without rebooting.
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type AccessCodeCastEnabled struct {
	Stat Status
	Val  bool
}

func (p *AccessCodeCastEnabled) Name() string          { return "AccessCodeCastEnabled" }
func (p *AccessCodeCastEnabled) Field() string         { return "" }
func (p *AccessCodeCastEnabled) Scope() Scope          { return ScopeUser }
func (p *AccessCodeCastEnabled) Status() Status        { return p.Stat }
func (p *AccessCodeCastEnabled) UntypedV() interface{} { return p.Val }
func (p *AccessCodeCastEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *AccessCodeCastEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 908. AccessCodeCastDeviceDuration
// This policy can be modified without rebooting.
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type AccessCodeCastDeviceDuration struct {
	Stat Status
	Val  int
}

func (p *AccessCodeCastDeviceDuration) Name() string          { return "AccessCodeCastDeviceDuration" }
func (p *AccessCodeCastDeviceDuration) Field() string         { return "" }
func (p *AccessCodeCastDeviceDuration) Scope() Scope          { return ScopeUser }
func (p *AccessCodeCastDeviceDuration) Status() Status        { return p.Stat }
func (p *AccessCodeCastDeviceDuration) UntypedV() interface{} { return p.Val }
func (p *AccessCodeCastDeviceDuration) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *AccessCodeCastDeviceDuration) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 910. DeskTemplatesEnabled
// This policy can be modified without rebooting.
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type DeskTemplatesEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeskTemplatesEnabled) Name() string          { return "DeskTemplatesEnabled" }
func (p *DeskTemplatesEnabled) Field() string         { return "" }
func (p *DeskTemplatesEnabled) Scope() Scope          { return ScopeUser }
func (p *DeskTemplatesEnabled) Status() Status        { return p.Stat }
func (p *DeskTemplatesEnabled) UntypedV() interface{} { return p.Val }
func (p *DeskTemplatesEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeskTemplatesEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 911. PreconfiguredDeskTemplates
// This policy can be modified without rebooting.
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type PreconfiguredDeskTemplates struct {
	Stat Status
	Val  *PreconfiguredDeskTemplatesValue
}

type PreconfiguredDeskTemplatesValue struct {
	Hash string `json:"hash"`
	Url  string `json:"url"`
}

func (p *PreconfiguredDeskTemplates) Name() string          { return "PreconfiguredDeskTemplates" }
func (p *PreconfiguredDeskTemplates) Field() string         { return "" }
func (p *PreconfiguredDeskTemplates) Scope() Scope          { return ScopeUser }
func (p *PreconfiguredDeskTemplates) Status() Status        { return p.Stat }
func (p *PreconfiguredDeskTemplates) UntypedV() interface{} { return p.Val }
func (p *PreconfiguredDeskTemplates) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *PreconfiguredDeskTemplatesValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *PreconfiguredDeskTemplatesValue", m)
	}
	return v, nil
}
func (p *PreconfiguredDeskTemplates) Equal(iface interface{}) bool {
	v, ok := iface.(*PreconfiguredDeskTemplatesValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 912. FastPairEnabled
// This policy has a default value of False.
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type FastPairEnabled struct {
	Stat Status
	Val  bool
}

func (p *FastPairEnabled) Name() string          { return "FastPairEnabled" }
func (p *FastPairEnabled) Field() string         { return "" }
func (p *FastPairEnabled) Scope() Scope          { return ScopeUser }
func (p *FastPairEnabled) Status() Status        { return p.Stat }
func (p *FastPairEnabled) UntypedV() interface{} { return p.Val }
func (p *FastPairEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *FastPairEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 913. SandboxExternalProtocolBlocked
///////////////////////////////////////////////////////////////////////////////
type SandboxExternalProtocolBlocked struct {
	Stat Status
	Val  bool
}

func (p *SandboxExternalProtocolBlocked) Name() string          { return "SandboxExternalProtocolBlocked" }
func (p *SandboxExternalProtocolBlocked) Field() string         { return "" }
func (p *SandboxExternalProtocolBlocked) Scope() Scope          { return ScopeUser }
func (p *SandboxExternalProtocolBlocked) Status() Status        { return p.Stat }
func (p *SandboxExternalProtocolBlocked) UntypedV() interface{} { return p.Val }
func (p *SandboxExternalProtocolBlocked) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *SandboxExternalProtocolBlocked) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 914. ReportDeviceNetworkTelemetryCollectionRateMs
// This policy can be modified without rebooting.
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceNetworkTelemetryCollectionRateMs struct {
	Stat Status
	Val  int
}

func (p *ReportDeviceNetworkTelemetryCollectionRateMs) Name() string {
	return "ReportDeviceNetworkTelemetryCollectionRateMs"
}
func (p *ReportDeviceNetworkTelemetryCollectionRateMs) Field() string {
	return "device_reporting.report_network_telemetry_collection_rate_ms"
}
func (p *ReportDeviceNetworkTelemetryCollectionRateMs) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceNetworkTelemetryCollectionRateMs) Status() Status        { return p.Stat }
func (p *ReportDeviceNetworkTelemetryCollectionRateMs) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceNetworkTelemetryCollectionRateMs) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ReportDeviceNetworkTelemetryCollectionRateMs) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 915. ReportDeviceNetworkTelemetryEventCheckingRateMs
// This policy can be modified without rebooting.
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceNetworkTelemetryEventCheckingRateMs struct {
	Stat Status
	Val  int
}

func (p *ReportDeviceNetworkTelemetryEventCheckingRateMs) Name() string {
	return "ReportDeviceNetworkTelemetryEventCheckingRateMs"
}
func (p *ReportDeviceNetworkTelemetryEventCheckingRateMs) Field() string {
	return "device_reporting.report_network_telemetry_event_checking_rate_ms"
}
func (p *ReportDeviceNetworkTelemetryEventCheckingRateMs) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceNetworkTelemetryEventCheckingRateMs) Status() Status        { return p.Stat }
func (p *ReportDeviceNetworkTelemetryEventCheckingRateMs) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceNetworkTelemetryEventCheckingRateMs) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ReportDeviceNetworkTelemetryEventCheckingRateMs) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 916. KioskCRXManifestUpdateURLIgnored
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type KioskCRXManifestUpdateURLIgnored struct {
	Stat Status
	Val  bool
}

func (p *KioskCRXManifestUpdateURLIgnored) Name() string { return "KioskCRXManifestUpdateURLIgnored" }
func (p *KioskCRXManifestUpdateURLIgnored) Field() string {
	return "kiosk_crx_manifest_update_url_ignored.value"
}
func (p *KioskCRXManifestUpdateURLIgnored) Scope() Scope          { return ScopeDevice }
func (p *KioskCRXManifestUpdateURLIgnored) Status() Status        { return p.Stat }
func (p *KioskCRXManifestUpdateURLIgnored) UntypedV() interface{} { return p.Val }
func (p *KioskCRXManifestUpdateURLIgnored) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *KioskCRXManifestUpdateURLIgnored) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 917. QuickAnswersEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type QuickAnswersEnabled struct {
	Stat Status
	Val  bool
}

func (p *QuickAnswersEnabled) Name() string          { return "QuickAnswersEnabled" }
func (p *QuickAnswersEnabled) Field() string         { return "" }
func (p *QuickAnswersEnabled) Scope() Scope          { return ScopeUser }
func (p *QuickAnswersEnabled) Status() Status        { return p.Stat }
func (p *QuickAnswersEnabled) UntypedV() interface{} { return p.Val }
func (p *QuickAnswersEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *QuickAnswersEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 918. QuickAnswersDefinitionEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type QuickAnswersDefinitionEnabled struct {
	Stat Status
	Val  bool
}

func (p *QuickAnswersDefinitionEnabled) Name() string          { return "QuickAnswersDefinitionEnabled" }
func (p *QuickAnswersDefinitionEnabled) Field() string         { return "" }
func (p *QuickAnswersDefinitionEnabled) Scope() Scope          { return ScopeUser }
func (p *QuickAnswersDefinitionEnabled) Status() Status        { return p.Stat }
func (p *QuickAnswersDefinitionEnabled) UntypedV() interface{} { return p.Val }
func (p *QuickAnswersDefinitionEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *QuickAnswersDefinitionEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 919. QuickAnswersTranslationEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type QuickAnswersTranslationEnabled struct {
	Stat Status
	Val  bool
}

func (p *QuickAnswersTranslationEnabled) Name() string          { return "QuickAnswersTranslationEnabled" }
func (p *QuickAnswersTranslationEnabled) Field() string         { return "" }
func (p *QuickAnswersTranslationEnabled) Scope() Scope          { return ScopeUser }
func (p *QuickAnswersTranslationEnabled) Status() Status        { return p.Stat }
func (p *QuickAnswersTranslationEnabled) UntypedV() interface{} { return p.Val }
func (p *QuickAnswersTranslationEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *QuickAnswersTranslationEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 920. QuickAnswersUnitConversionEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type QuickAnswersUnitConversionEnabled struct {
	Stat Status
	Val  bool
}

func (p *QuickAnswersUnitConversionEnabled) Name() string          { return "QuickAnswersUnitConversionEnabled" }
func (p *QuickAnswersUnitConversionEnabled) Field() string         { return "" }
func (p *QuickAnswersUnitConversionEnabled) Scope() Scope          { return ScopeUser }
func (p *QuickAnswersUnitConversionEnabled) Status() Status        { return p.Stat }
func (p *QuickAnswersUnitConversionEnabled) UntypedV() interface{} { return p.Val }
func (p *QuickAnswersUnitConversionEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *QuickAnswersUnitConversionEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 922. RemoteAccessHostClipboardSizeBytes
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RemoteAccessHostClipboardSizeBytes struct {
	Stat Status
	Val  int
}

func (p *RemoteAccessHostClipboardSizeBytes) Name() string {
	return "RemoteAccessHostClipboardSizeBytes"
}
func (p *RemoteAccessHostClipboardSizeBytes) Field() string         { return "" }
func (p *RemoteAccessHostClipboardSizeBytes) Scope() Scope          { return ScopeUser }
func (p *RemoteAccessHostClipboardSizeBytes) Status() Status        { return p.Stat }
func (p *RemoteAccessHostClipboardSizeBytes) UntypedV() interface{} { return p.Val }
func (p *RemoteAccessHostClipboardSizeBytes) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *RemoteAccessHostClipboardSizeBytes) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 923. RemoteAccessHostAllowRemoteSupportConnections
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type RemoteAccessHostAllowRemoteSupportConnections struct {
	Stat Status
	Val  bool
}

func (p *RemoteAccessHostAllowRemoteSupportConnections) Name() string {
	return "RemoteAccessHostAllowRemoteSupportConnections"
}
func (p *RemoteAccessHostAllowRemoteSupportConnections) Field() string         { return "" }
func (p *RemoteAccessHostAllowRemoteSupportConnections) Scope() Scope          { return ScopeUser }
func (p *RemoteAccessHostAllowRemoteSupportConnections) Status() Status        { return p.Stat }
func (p *RemoteAccessHostAllowRemoteSupportConnections) UntypedV() interface{} { return p.Val }
func (p *RemoteAccessHostAllowRemoteSupportConnections) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *RemoteAccessHostAllowRemoteSupportConnections) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 924. UserAgentClientHintsGREASEUpdateEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type UserAgentClientHintsGREASEUpdateEnabled struct {
	Stat Status
	Val  bool
}

func (p *UserAgentClientHintsGREASEUpdateEnabled) Name() string {
	return "UserAgentClientHintsGREASEUpdateEnabled"
}
func (p *UserAgentClientHintsGREASEUpdateEnabled) Field() string         { return "" }
func (p *UserAgentClientHintsGREASEUpdateEnabled) Scope() Scope          { return ScopeUser }
func (p *UserAgentClientHintsGREASEUpdateEnabled) Status() Status        { return p.Stat }
func (p *UserAgentClientHintsGREASEUpdateEnabled) UntypedV() interface{} { return p.Val }
func (p *UserAgentClientHintsGREASEUpdateEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *UserAgentClientHintsGREASEUpdateEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 925. DeviceI18nShortcutsEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceI18nShortcutsEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceI18nShortcutsEnabled) Name() string          { return "DeviceI18nShortcutsEnabled" }
func (p *DeviceI18nShortcutsEnabled) Field() string         { return "device_i18n_shortcuts_enabled.enabled" }
func (p *DeviceI18nShortcutsEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceI18nShortcutsEnabled) Status() Status        { return p.Stat }
func (p *DeviceI18nShortcutsEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceI18nShortcutsEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceI18nShortcutsEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 926. HistoryClustersVisible
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type HistoryClustersVisible struct {
	Stat Status
	Val  bool
}

func (p *HistoryClustersVisible) Name() string          { return "HistoryClustersVisible" }
func (p *HistoryClustersVisible) Field() string         { return "" }
func (p *HistoryClustersVisible) Scope() Scope          { return ScopeUser }
func (p *HistoryClustersVisible) Status() Status        { return p.Stat }
func (p *HistoryClustersVisible) UntypedV() interface{} { return p.Val }
func (p *HistoryClustersVisible) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *HistoryClustersVisible) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 927. ChromadToCloudMigrationEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ChromadToCloudMigrationEnabled struct {
	Stat Status
	Val  bool
}

func (p *ChromadToCloudMigrationEnabled) Name() string { return "ChromadToCloudMigrationEnabled" }
func (p *ChromadToCloudMigrationEnabled) Field() string {
	return "chromad_to_cloud_migration_enabled.value"
}
func (p *ChromadToCloudMigrationEnabled) Scope() Scope          { return ScopeDevice }
func (p *ChromadToCloudMigrationEnabled) Status() Status        { return p.Stat }
func (p *ChromadToCloudMigrationEnabled) UntypedV() interface{} { return p.Val }
func (p *ChromadToCloudMigrationEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ChromadToCloudMigrationEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 928. CopyPreventionSettings
// This policy can be modified without rebooting.
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type CopyPreventionSettings struct {
	Stat Status
	Val  *CopyPreventionSettingsValue
}

type CopyPreventionSettingsValue struct {
	Disable         []string `json:"disable,omitempty"`
	Enable          []string `json:"enable,omitempty"`
	MinimumDataSize int      `json:"minimum_data_size"`
}

func (p *CopyPreventionSettings) Name() string          { return "CopyPreventionSettings" }
func (p *CopyPreventionSettings) Field() string         { return "" }
func (p *CopyPreventionSettings) Scope() Scope          { return ScopeUser }
func (p *CopyPreventionSettings) Status() Status        { return p.Stat }
func (p *CopyPreventionSettings) UntypedV() interface{} { return p.Val }
func (p *CopyPreventionSettings) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v *CopyPreventionSettingsValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as *CopyPreventionSettingsValue", m)
	}
	return v, nil
}
func (p *CopyPreventionSettings) Equal(iface interface{}) bool {
	v, ok := iface.(*CopyPreventionSettingsValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 929. ReportDeviceAudioStatusCheckingRateMs
// This policy can be modified without rebooting.
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type ReportDeviceAudioStatusCheckingRateMs struct {
	Stat Status
	Val  int
}

func (p *ReportDeviceAudioStatusCheckingRateMs) Name() string {
	return "ReportDeviceAudioStatusCheckingRateMs"
}
func (p *ReportDeviceAudioStatusCheckingRateMs) Field() string {
	return "device_reporting.report_device_audio_status_checking_rate_ms"
}
func (p *ReportDeviceAudioStatusCheckingRateMs) Scope() Scope          { return ScopeDevice }
func (p *ReportDeviceAudioStatusCheckingRateMs) Status() Status        { return p.Stat }
func (p *ReportDeviceAudioStatusCheckingRateMs) UntypedV() interface{} { return p.Val }
func (p *ReportDeviceAudioStatusCheckingRateMs) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ReportDeviceAudioStatusCheckingRateMs) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 930. KeepFullscreenWithoutNotificationUrlAllowList
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type KeepFullscreenWithoutNotificationUrlAllowList struct {
	Stat Status
	Val  []string
}

func (p *KeepFullscreenWithoutNotificationUrlAllowList) Name() string {
	return "KeepFullscreenWithoutNotificationUrlAllowList"
}
func (p *KeepFullscreenWithoutNotificationUrlAllowList) Field() string         { return "" }
func (p *KeepFullscreenWithoutNotificationUrlAllowList) Scope() Scope          { return ScopeUser }
func (p *KeepFullscreenWithoutNotificationUrlAllowList) Status() Status        { return p.Stat }
func (p *KeepFullscreenWithoutNotificationUrlAllowList) UntypedV() interface{} { return p.Val }
func (p *KeepFullscreenWithoutNotificationUrlAllowList) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *KeepFullscreenWithoutNotificationUrlAllowList) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 931. OnPrintEnterpriseConnector
// This policy can be modified without rebooting.
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type OnPrintEnterpriseConnector struct {
	Stat Status
	Val  []*OnPrintEnterpriseConnectorValue
}

type OnPrintEnterpriseConnectorValue struct {
	BlockLargeFiles          bool                                             `json:"block_large_files"`
	BlockUntilVerdict        int                                              `json:"block_until_verdict"`
	CustomMessages           []*OnPrintEnterpriseConnectorValueCustomMessages `json:"custom_messages,omitempty"`
	Disable                  []*OnPrintEnterpriseConnectorValueDisable        `json:"disable,omitempty"`
	Enable                   []*OnPrintEnterpriseConnectorValueEnable         `json:"enable,omitempty"`
	RequireJustificationTags []string                                         `json:"require_justification_tags,omitempty"`
	ServiceProvider          string                                           `json:"service_provider"`
}

type OnPrintEnterpriseConnectorValueEnable struct {
	Tags    []string `json:"tags,omitempty"`
	UrlList []string `json:"url_list,omitempty"`
}

type OnPrintEnterpriseConnectorValueDisable struct {
	Tags    []string `json:"tags,omitempty"`
	UrlList []string `json:"url_list,omitempty"`
}

type OnPrintEnterpriseConnectorValueCustomMessages struct {
	Language     string `json:"language"`
	LearnMoreUrl string `json:"learn_more_url"`
	Message      string `json:"message"`
	Tag          string `json:"tag"`
}

func (p *OnPrintEnterpriseConnector) Name() string          { return "OnPrintEnterpriseConnector" }
func (p *OnPrintEnterpriseConnector) Field() string         { return "" }
func (p *OnPrintEnterpriseConnector) Scope() Scope          { return ScopeUser }
func (p *OnPrintEnterpriseConnector) Status() Status        { return p.Stat }
func (p *OnPrintEnterpriseConnector) UntypedV() interface{} { return p.Val }
func (p *OnPrintEnterpriseConnector) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*OnPrintEnterpriseConnectorValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*OnPrintEnterpriseConnectorValue", m)
	}
	return v, nil
}
func (p *OnPrintEnterpriseConnector) Equal(iface interface{}) bool {
	v, ok := iface.([]*OnPrintEnterpriseConnectorValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 932. UserAgentReduction
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type UserAgentReduction struct {
	Stat Status
	Val  int
}

func (p *UserAgentReduction) Name() string          { return "UserAgentReduction" }
func (p *UserAgentReduction) Field() string         { return "" }
func (p *UserAgentReduction) Scope() Scope          { return ScopeUser }
func (p *UserAgentReduction) Status() Status        { return p.Stat }
func (p *UserAgentReduction) UntypedV() interface{} { return p.Val }
func (p *UserAgentReduction) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *UserAgentReduction) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 933. OriginAgentClusterDefaultEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type OriginAgentClusterDefaultEnabled struct {
	Stat Status
	Val  bool
}

func (p *OriginAgentClusterDefaultEnabled) Name() string          { return "OriginAgentClusterDefaultEnabled" }
func (p *OriginAgentClusterDefaultEnabled) Field() string         { return "" }
func (p *OriginAgentClusterDefaultEnabled) Scope() Scope          { return ScopeUser }
func (p *OriginAgentClusterDefaultEnabled) Status() Status        { return p.Stat }
func (p *OriginAgentClusterDefaultEnabled) UntypedV() interface{} { return p.Val }
func (p *OriginAgentClusterDefaultEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *OriginAgentClusterDefaultEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 934. DeviceLoginScreenWebUILazyLoading
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type DeviceLoginScreenWebUILazyLoading struct {
	Stat Status
	Val  bool
}

func (p *DeviceLoginScreenWebUILazyLoading) Name() string { return "DeviceLoginScreenWebUILazyLoading" }
func (p *DeviceLoginScreenWebUILazyLoading) Field() string {
	return "login_web_ui_lazy_loading.enabled"
}
func (p *DeviceLoginScreenWebUILazyLoading) Scope() Scope          { return ScopeDevice }
func (p *DeviceLoginScreenWebUILazyLoading) Status() Status        { return p.Stat }
func (p *DeviceLoginScreenWebUILazyLoading) UntypedV() interface{} { return p.Val }
func (p *DeviceLoginScreenWebUILazyLoading) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceLoginScreenWebUILazyLoading) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 935. ProjectorEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ProjectorEnabled struct {
	Stat Status
	Val  bool
}

func (p *ProjectorEnabled) Name() string          { return "ProjectorEnabled" }
func (p *ProjectorEnabled) Field() string         { return "" }
func (p *ProjectorEnabled) Scope() Scope          { return ScopeUser }
func (p *ProjectorEnabled) Status() Status        { return p.Stat }
func (p *ProjectorEnabled) UntypedV() interface{} { return p.Val }
func (p *ProjectorEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ProjectorEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 936. PhoneHubCameraRollAllowed
// This policy can be modified without rebooting.
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type PhoneHubCameraRollAllowed struct {
	Stat Status
	Val  bool
}

func (p *PhoneHubCameraRollAllowed) Name() string          { return "PhoneHubCameraRollAllowed" }
func (p *PhoneHubCameraRollAllowed) Field() string         { return "" }
func (p *PhoneHubCameraRollAllowed) Scope() Scope          { return ScopeUser }
func (p *PhoneHubCameraRollAllowed) Status() Status        { return p.Stat }
func (p *PhoneHubCameraRollAllowed) UntypedV() interface{} { return p.Val }
func (p *PhoneHubCameraRollAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PhoneHubCameraRollAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 937. EcheAllowed
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type EcheAllowed struct {
	Stat Status
	Val  bool
}

func (p *EcheAllowed) Name() string          { return "EcheAllowed" }
func (p *EcheAllowed) Field() string         { return "" }
func (p *EcheAllowed) Scope() Scope          { return ScopeUser }
func (p *EcheAllowed) Status() Status        { return p.Stat }
func (p *EcheAllowed) UntypedV() interface{} { return p.Val }
func (p *EcheAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *EcheAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 938. DeviceKeylockerForStorageEncryptionEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceKeylockerForStorageEncryptionEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceKeylockerForStorageEncryptionEnabled) Name() string {
	return "DeviceKeylockerForStorageEncryptionEnabled"
}
func (p *DeviceKeylockerForStorageEncryptionEnabled) Field() string {
	return "keylocker_for_storage_encryption_enabled.enabled"
}
func (p *DeviceKeylockerForStorageEncryptionEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceKeylockerForStorageEncryptionEnabled) Status() Status        { return p.Stat }
func (p *DeviceKeylockerForStorageEncryptionEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceKeylockerForStorageEncryptionEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceKeylockerForStorageEncryptionEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 939. ReportCRDSessions
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportCRDSessions struct {
	Stat Status
	Val  bool
}

func (p *ReportCRDSessions) Name() string          { return "ReportCRDSessions" }
func (p *ReportCRDSessions) Field() string         { return "device_reporting.report_crd_sessions" }
func (p *ReportCRDSessions) Scope() Scope          { return ScopeDevice }
func (p *ReportCRDSessions) Status() Status        { return p.Stat }
func (p *ReportCRDSessions) UntypedV() interface{} { return p.Val }
func (p *ReportCRDSessions) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportCRDSessions) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 940. DeviceRunAutomaticCleanupOnLogin
///////////////////////////////////////////////////////////////////////////////
type DeviceRunAutomaticCleanupOnLogin struct {
	Stat Status
	Val  bool
}

func (p *DeviceRunAutomaticCleanupOnLogin) Name() string { return "DeviceRunAutomaticCleanupOnLogin" }
func (p *DeviceRunAutomaticCleanupOnLogin) Field() string {
	return "device_run_automatic_cleanup_on_login.value"
}
func (p *DeviceRunAutomaticCleanupOnLogin) Scope() Scope          { return ScopeDevice }
func (p *DeviceRunAutomaticCleanupOnLogin) Status() Status        { return p.Stat }
func (p *DeviceRunAutomaticCleanupOnLogin) UntypedV() interface{} { return p.Val }
func (p *DeviceRunAutomaticCleanupOnLogin) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceRunAutomaticCleanupOnLogin) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 941. NTPMiddleSlotAnnouncementVisible
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type NTPMiddleSlotAnnouncementVisible struct {
	Stat Status
	Val  bool
}

func (p *NTPMiddleSlotAnnouncementVisible) Name() string          { return "NTPMiddleSlotAnnouncementVisible" }
func (p *NTPMiddleSlotAnnouncementVisible) Field() string         { return "" }
func (p *NTPMiddleSlotAnnouncementVisible) Scope() Scope          { return ScopeUser }
func (p *NTPMiddleSlotAnnouncementVisible) Status() Status        { return p.Stat }
func (p *NTPMiddleSlotAnnouncementVisible) UntypedV() interface{} { return p.Val }
func (p *NTPMiddleSlotAnnouncementVisible) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *NTPMiddleSlotAnnouncementVisible) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 942. CloudProfileReportingEnabled
// This policy can be modified without rebooting.
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type CloudProfileReportingEnabled struct {
	Stat Status
	Val  bool
}

func (p *CloudProfileReportingEnabled) Name() string          { return "CloudProfileReportingEnabled" }
func (p *CloudProfileReportingEnabled) Field() string         { return "" }
func (p *CloudProfileReportingEnabled) Scope() Scope          { return ScopeUser }
func (p *CloudProfileReportingEnabled) Status() Status        { return p.Stat }
func (p *CloudProfileReportingEnabled) UntypedV() interface{} { return p.Val }
func (p *CloudProfileReportingEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *CloudProfileReportingEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 943. DefaultWebHidGuardSetting
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultWebHidGuardSetting struct {
	Stat Status
	Val  int
}

func (p *DefaultWebHidGuardSetting) Name() string          { return "DefaultWebHidGuardSetting" }
func (p *DefaultWebHidGuardSetting) Field() string         { return "" }
func (p *DefaultWebHidGuardSetting) Scope() Scope          { return ScopeUser }
func (p *DefaultWebHidGuardSetting) Status() Status        { return p.Stat }
func (p *DefaultWebHidGuardSetting) UntypedV() interface{} { return p.Val }
func (p *DefaultWebHidGuardSetting) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DefaultWebHidGuardSetting) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 944. WebHidAskForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type WebHidAskForUrls struct {
	Stat Status
	Val  []string
}

func (p *WebHidAskForUrls) Name() string          { return "WebHidAskForUrls" }
func (p *WebHidAskForUrls) Field() string         { return "" }
func (p *WebHidAskForUrls) Scope() Scope          { return ScopeUser }
func (p *WebHidAskForUrls) Status() Status        { return p.Stat }
func (p *WebHidAskForUrls) UntypedV() interface{} { return p.Val }
func (p *WebHidAskForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *WebHidAskForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 945. WebHidBlockedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type WebHidBlockedForUrls struct {
	Stat Status
	Val  []string
}

func (p *WebHidBlockedForUrls) Name() string          { return "WebHidBlockedForUrls" }
func (p *WebHidBlockedForUrls) Field() string         { return "" }
func (p *WebHidBlockedForUrls) Scope() Scope          { return ScopeUser }
func (p *WebHidBlockedForUrls) Status() Status        { return p.Stat }
func (p *WebHidBlockedForUrls) UntypedV() interface{} { return p.Val }
func (p *WebHidBlockedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *WebHidBlockedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 946. PasswordDismissCompromisedAlertEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type PasswordDismissCompromisedAlertEnabled struct {
	Stat Status
	Val  bool
}

func (p *PasswordDismissCompromisedAlertEnabled) Name() string {
	return "PasswordDismissCompromisedAlertEnabled"
}
func (p *PasswordDismissCompromisedAlertEnabled) Field() string         { return "" }
func (p *PasswordDismissCompromisedAlertEnabled) Scope() Scope          { return ScopeUser }
func (p *PasswordDismissCompromisedAlertEnabled) Status() Status        { return p.Stat }
func (p *PasswordDismissCompromisedAlertEnabled) UntypedV() interface{} { return p.Val }
func (p *PasswordDismissCompromisedAlertEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *PasswordDismissCompromisedAlertEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 947. ExemptDomainFileTypePairsFromFileTypeDownloadWarnings
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ExemptDomainFileTypePairsFromFileTypeDownloadWarnings struct {
	Stat Status
	Val  []*RefDomainFiletypePair
}

func (p *ExemptDomainFileTypePairsFromFileTypeDownloadWarnings) Name() string {
	return "ExemptDomainFileTypePairsFromFileTypeDownloadWarnings"
}
func (p *ExemptDomainFileTypePairsFromFileTypeDownloadWarnings) Field() string         { return "" }
func (p *ExemptDomainFileTypePairsFromFileTypeDownloadWarnings) Scope() Scope          { return ScopeUser }
func (p *ExemptDomainFileTypePairsFromFileTypeDownloadWarnings) Status() Status        { return p.Stat }
func (p *ExemptDomainFileTypePairsFromFileTypeDownloadWarnings) UntypedV() interface{} { return p.Val }
func (p *ExemptDomainFileTypePairsFromFileTypeDownloadWarnings) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*RefDomainFiletypePair
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*RefDomainFiletypePair", m)
	}
	return v, nil
}
func (p *ExemptDomainFileTypePairsFromFileTypeDownloadWarnings) Equal(iface interface{}) bool {
	v, ok := iface.([]*RefDomainFiletypePair)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 948. FirstPartySetsEnabled
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type FirstPartySetsEnabled struct {
	Stat Status
	Val  bool
}

func (p *FirstPartySetsEnabled) Name() string          { return "FirstPartySetsEnabled" }
func (p *FirstPartySetsEnabled) Field() string         { return "" }
func (p *FirstPartySetsEnabled) Scope() Scope          { return ScopeUser }
func (p *FirstPartySetsEnabled) Status() Status        { return p.Stat }
func (p *FirstPartySetsEnabled) UntypedV() interface{} { return p.Val }
func (p *FirstPartySetsEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *FirstPartySetsEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 949. ForceMajorVersionToMinorPositionInUserAgent
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ForceMajorVersionToMinorPositionInUserAgent struct {
	Stat Status
	Val  int
}

func (p *ForceMajorVersionToMinorPositionInUserAgent) Name() string {
	return "ForceMajorVersionToMinorPositionInUserAgent"
}
func (p *ForceMajorVersionToMinorPositionInUserAgent) Field() string         { return "" }
func (p *ForceMajorVersionToMinorPositionInUserAgent) Scope() Scope          { return ScopeUser }
func (p *ForceMajorVersionToMinorPositionInUserAgent) Status() Status        { return p.Stat }
func (p *ForceMajorVersionToMinorPositionInUserAgent) UntypedV() interface{} { return p.Val }
func (p *ForceMajorVersionToMinorPositionInUserAgent) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *ForceMajorVersionToMinorPositionInUserAgent) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 950. AllHttpAuthSchemesAllowedForOrigins
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type AllHttpAuthSchemesAllowedForOrigins struct {
	Stat Status
	Val  []string
}

func (p *AllHttpAuthSchemesAllowedForOrigins) Name() string {
	return "AllHttpAuthSchemesAllowedForOrigins"
}
func (p *AllHttpAuthSchemesAllowedForOrigins) Field() string         { return "" }
func (p *AllHttpAuthSchemesAllowedForOrigins) Scope() Scope          { return ScopeUser }
func (p *AllHttpAuthSchemesAllowedForOrigins) Status() Status        { return p.Stat }
func (p *AllHttpAuthSchemesAllowedForOrigins) UntypedV() interface{} { return p.Val }
func (p *AllHttpAuthSchemesAllowedForOrigins) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *AllHttpAuthSchemesAllowedForOrigins) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 951. DefaultWindowPlacementSetting
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DefaultWindowPlacementSetting struct {
	Stat Status
	Val  int
}

func (p *DefaultWindowPlacementSetting) Name() string          { return "DefaultWindowPlacementSetting" }
func (p *DefaultWindowPlacementSetting) Field() string         { return "" }
func (p *DefaultWindowPlacementSetting) Scope() Scope          { return ScopeUser }
func (p *DefaultWindowPlacementSetting) Status() Status        { return p.Stat }
func (p *DefaultWindowPlacementSetting) UntypedV() interface{} { return p.Val }
func (p *DefaultWindowPlacementSetting) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *DefaultWindowPlacementSetting) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 952. ReportDevicePeripherals
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type ReportDevicePeripherals struct {
	Stat Status
	Val  bool
}

func (p *ReportDevicePeripherals) Name() string          { return "ReportDevicePeripherals" }
func (p *ReportDevicePeripherals) Field() string         { return "device_reporting.report_peripherals" }
func (p *ReportDevicePeripherals) Scope() Scope          { return ScopeDevice }
func (p *ReportDevicePeripherals) Status() Status        { return p.Stat }
func (p *ReportDevicePeripherals) UntypedV() interface{} { return p.Val }
func (p *ReportDevicePeripherals) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *ReportDevicePeripherals) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 953. WebHidAllowAllDevicesForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type WebHidAllowAllDevicesForUrls struct {
	Stat Status
	Val  []string
}

func (p *WebHidAllowAllDevicesForUrls) Name() string          { return "WebHidAllowAllDevicesForUrls" }
func (p *WebHidAllowAllDevicesForUrls) Field() string         { return "" }
func (p *WebHidAllowAllDevicesForUrls) Scope() Scope          { return ScopeUser }
func (p *WebHidAllowAllDevicesForUrls) Status() Status        { return p.Stat }
func (p *WebHidAllowAllDevicesForUrls) UntypedV() interface{} { return p.Val }
func (p *WebHidAllowAllDevicesForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *WebHidAllowAllDevicesForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 954. WebHidAllowDevicesForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type WebHidAllowDevicesForUrls struct {
	Stat Status
	Val  []*WebHidAllowDevicesForUrlsValue
}

type WebHidAllowDevicesForUrlsValue struct {
	Devices []*WebHidAllowDevicesForUrlsValueDevices `json:"devices,omitempty"`
	Urls    []string                                 `json:"urls,omitempty"`
}

type WebHidAllowDevicesForUrlsValueDevices struct {
	ProductId int `json:"product_id"`
	VendorId  int `json:"vendor_id"`
}

func (p *WebHidAllowDevicesForUrls) Name() string          { return "WebHidAllowDevicesForUrls" }
func (p *WebHidAllowDevicesForUrls) Field() string         { return "" }
func (p *WebHidAllowDevicesForUrls) Scope() Scope          { return ScopeUser }
func (p *WebHidAllowDevicesForUrls) Status() Status        { return p.Stat }
func (p *WebHidAllowDevicesForUrls) UntypedV() interface{} { return p.Val }
func (p *WebHidAllowDevicesForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*WebHidAllowDevicesForUrlsValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*WebHidAllowDevicesForUrlsValue", m)
	}
	return v, nil
}
func (p *WebHidAllowDevicesForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]*WebHidAllowDevicesForUrlsValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 955. WebHidAllowDevicesWithHidUsagesForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type WebHidAllowDevicesWithHidUsagesForUrls struct {
	Stat Status
	Val  []*WebHidAllowDevicesWithHidUsagesForUrlsValue
}

type WebHidAllowDevicesWithHidUsagesForUrlsValue struct {
	Urls   []string                                             `json:"urls,omitempty"`
	Usages []*WebHidAllowDevicesWithHidUsagesForUrlsValueUsages `json:"usages,omitempty"`
}

type WebHidAllowDevicesWithHidUsagesForUrlsValueUsages struct {
	Usage     int `json:"usage"`
	UsagePage int `json:"usage_page"`
}

func (p *WebHidAllowDevicesWithHidUsagesForUrls) Name() string {
	return "WebHidAllowDevicesWithHidUsagesForUrls"
}
func (p *WebHidAllowDevicesWithHidUsagesForUrls) Field() string         { return "" }
func (p *WebHidAllowDevicesWithHidUsagesForUrls) Scope() Scope          { return ScopeUser }
func (p *WebHidAllowDevicesWithHidUsagesForUrls) Status() Status        { return p.Stat }
func (p *WebHidAllowDevicesWithHidUsagesForUrls) UntypedV() interface{} { return p.Val }
func (p *WebHidAllowDevicesWithHidUsagesForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []*WebHidAllowDevicesWithHidUsagesForUrlsValue
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []*WebHidAllowDevicesWithHidUsagesForUrlsValue", m)
	}
	return v, nil
}
func (p *WebHidAllowDevicesWithHidUsagesForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]*WebHidAllowDevicesWithHidUsagesForUrlsValue)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 956. SecondaryGoogleAccountUsage
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type SecondaryGoogleAccountUsage struct {
	Stat Status
	Val  string
}

func (p *SecondaryGoogleAccountUsage) Name() string          { return "SecondaryGoogleAccountUsage" }
func (p *SecondaryGoogleAccountUsage) Field() string         { return "" }
func (p *SecondaryGoogleAccountUsage) Scope() Scope          { return ScopeUser }
func (p *SecondaryGoogleAccountUsage) Status() Status        { return p.Stat }
func (p *SecondaryGoogleAccountUsage) UntypedV() interface{} { return p.Val }
func (p *SecondaryGoogleAccountUsage) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as string", m)
	}
	return v, nil
}
func (p *SecondaryGoogleAccountUsage) Equal(iface interface{}) bool {
	v, ok := iface.(string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 957. DeviceEncryptedReportingPipelineEnabled
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type DeviceEncryptedReportingPipelineEnabled struct {
	Stat Status
	Val  bool
}

func (p *DeviceEncryptedReportingPipelineEnabled) Name() string {
	return "DeviceEncryptedReportingPipelineEnabled"
}
func (p *DeviceEncryptedReportingPipelineEnabled) Field() string {
	return "device_reporting.encrypted_reporting_pipeline_enabled"
}
func (p *DeviceEncryptedReportingPipelineEnabled) Scope() Scope          { return ScopeDevice }
func (p *DeviceEncryptedReportingPipelineEnabled) Status() Status        { return p.Stat }
func (p *DeviceEncryptedReportingPipelineEnabled) UntypedV() interface{} { return p.Val }
func (p *DeviceEncryptedReportingPipelineEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *DeviceEncryptedReportingPipelineEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 958. IsolatedAppsDeveloperModeAllowed
// This policy has a default value of False.
// This policy can be modified without rebooting.
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type IsolatedAppsDeveloperModeAllowed struct {
	Stat Status
	Val  bool
}

func (p *IsolatedAppsDeveloperModeAllowed) Name() string          { return "IsolatedAppsDeveloperModeAllowed" }
func (p *IsolatedAppsDeveloperModeAllowed) Field() string         { return "" }
func (p *IsolatedAppsDeveloperModeAllowed) Scope() Scope          { return ScopeUser }
func (p *IsolatedAppsDeveloperModeAllowed) Status() Status        { return p.Stat }
func (p *IsolatedAppsDeveloperModeAllowed) UntypedV() interface{} { return p.Val }
func (p *IsolatedAppsDeveloperModeAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *IsolatedAppsDeveloperModeAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 959. FloatingWorkspaceEnabled
///////////////////////////////////////////////////////////////////////////////
type FloatingWorkspaceEnabled struct {
	Stat Status
	Val  bool
}

func (p *FloatingWorkspaceEnabled) Name() string          { return "FloatingWorkspaceEnabled" }
func (p *FloatingWorkspaceEnabled) Field() string         { return "" }
func (p *FloatingWorkspaceEnabled) Scope() Scope          { return ScopeUser }
func (p *FloatingWorkspaceEnabled) Status() Status        { return p.Stat }
func (p *FloatingWorkspaceEnabled) UntypedV() interface{} { return p.Val }
func (p *FloatingWorkspaceEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *FloatingWorkspaceEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 960. WindowPlacementAllowedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type WindowPlacementAllowedForUrls struct {
	Stat Status
	Val  []string
}

func (p *WindowPlacementAllowedForUrls) Name() string          { return "WindowPlacementAllowedForUrls" }
func (p *WindowPlacementAllowedForUrls) Field() string         { return "" }
func (p *WindowPlacementAllowedForUrls) Scope() Scope          { return ScopeUser }
func (p *WindowPlacementAllowedForUrls) Status() Status        { return p.Stat }
func (p *WindowPlacementAllowedForUrls) UntypedV() interface{} { return p.Val }
func (p *WindowPlacementAllowedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *WindowPlacementAllowedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 961. WindowPlacementBlockedForUrls
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type WindowPlacementBlockedForUrls struct {
	Stat Status
	Val  []string
}

func (p *WindowPlacementBlockedForUrls) Name() string          { return "WindowPlacementBlockedForUrls" }
func (p *WindowPlacementBlockedForUrls) Field() string         { return "" }
func (p *WindowPlacementBlockedForUrls) Scope() Scope          { return ScopeUser }
func (p *WindowPlacementBlockedForUrls) Status() Status        { return p.Stat }
func (p *WindowPlacementBlockedForUrls) UntypedV() interface{} { return p.Val }
func (p *WindowPlacementBlockedForUrls) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *WindowPlacementBlockedForUrls) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 962. CloudReportingUploadFrequency
// This policy can be modified without rebooting.
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type CloudReportingUploadFrequency struct {
	Stat Status
	Val  int
}

func (p *CloudReportingUploadFrequency) Name() string          { return "CloudReportingUploadFrequency" }
func (p *CloudReportingUploadFrequency) Field() string         { return "" }
func (p *CloudReportingUploadFrequency) Scope() Scope          { return ScopeUser }
func (p *CloudReportingUploadFrequency) Status() Status        { return p.Stat }
func (p *CloudReportingUploadFrequency) UntypedV() interface{} { return p.Val }
func (p *CloudReportingUploadFrequency) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v int
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as int", m)
	}
	return v, nil
}
func (p *CloudReportingUploadFrequency) Equal(iface interface{}) bool {
	v, ok := iface.(int)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 963. OptimizationGuideFetchingEnabled
///////////////////////////////////////////////////////////////////////////////
type OptimizationGuideFetchingEnabled struct {
	Stat Status
	Val  bool
}

func (p *OptimizationGuideFetchingEnabled) Name() string          { return "OptimizationGuideFetchingEnabled" }
func (p *OptimizationGuideFetchingEnabled) Field() string         { return "" }
func (p *OptimizationGuideFetchingEnabled) Scope() Scope          { return ScopeUser }
func (p *OptimizationGuideFetchingEnabled) Status() Status        { return p.Stat }
func (p *OptimizationGuideFetchingEnabled) UntypedV() interface{} { return p.Val }
func (p *OptimizationGuideFetchingEnabled) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *OptimizationGuideFetchingEnabled) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 964. WebAuthnFactors
// This policy can be modified without rebooting.
///////////////////////////////////////////////////////////////////////////////
type WebAuthnFactors struct {
	Stat Status
	Val  []string
}

func (p *WebAuthnFactors) Name() string          { return "WebAuthnFactors" }
func (p *WebAuthnFactors) Field() string         { return "" }
func (p *WebAuthnFactors) Scope() Scope          { return ScopeUser }
func (p *WebAuthnFactors) Status() Status        { return p.Stat }
func (p *WebAuthnFactors) UntypedV() interface{} { return p.Val }
func (p *WebAuthnFactors) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v []string
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as []string", m)
	}
	return v, nil
}
func (p *WebAuthnFactors) Equal(iface interface{}) bool {
	v, ok := iface.([]string)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 965. WebAuthenticationRemoteProxiedRequestsAllowed
// This policy can be modified without rebooting.
// This is a future policy, it is not present in stable builds.
///////////////////////////////////////////////////////////////////////////////
type WebAuthenticationRemoteProxiedRequestsAllowed struct {
	Stat Status
	Val  bool
}

func (p *WebAuthenticationRemoteProxiedRequestsAllowed) Name() string {
	return "WebAuthenticationRemoteProxiedRequestsAllowed"
}
func (p *WebAuthenticationRemoteProxiedRequestsAllowed) Field() string         { return "" }
func (p *WebAuthenticationRemoteProxiedRequestsAllowed) Scope() Scope          { return ScopeUser }
func (p *WebAuthenticationRemoteProxiedRequestsAllowed) Status() Status        { return p.Stat }
func (p *WebAuthenticationRemoteProxiedRequestsAllowed) UntypedV() interface{} { return p.Val }
func (p *WebAuthenticationRemoteProxiedRequestsAllowed) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *WebAuthenticationRemoteProxiedRequestsAllowed) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// 966. WebSQLAccess
///////////////////////////////////////////////////////////////////////////////
type WebSQLAccess struct {
	Stat Status
	Val  bool
}

func (p *WebSQLAccess) Name() string          { return "WebSQLAccess" }
func (p *WebSQLAccess) Field() string         { return "" }
func (p *WebSQLAccess) Scope() Scope          { return ScopeUser }
func (p *WebSQLAccess) Status() Status        { return p.Stat }
func (p *WebSQLAccess) UntypedV() interface{} { return p.Val }
func (p *WebSQLAccess) UnmarshalAs(m json.RawMessage) (interface{}, error) {
	var v bool
	if err := json.Unmarshal(m, &v); err != nil {
		return nil, errors.Wrapf(err, "could not read %s as bool", m)
	}
	return v, nil
}
func (p *WebSQLAccess) Equal(iface interface{}) bool {
	v, ok := iface.(bool)
	if !ok {
		return ok
	}
	return cmp.Equal(p.Val, v, cmpopts.EquateEmpty())
}

///////////////////////////////////////////////////////////////////////////////
// Reference values (used via '$ref' in JSON Schema).
///////////////////////////////////////////////////////////////////////////////

type RefPowerManagementDelays struct {
	Delays     *RefPowerManagementDelaysDelays `json:"Delays"`
	IdleAction string                          `json:"IdleAction"`
}

type RefPowerManagementDelaysDelays struct {
	Idle        int `json:"Idle"`
	IdleWarning int `json:"IdleWarning"`
	ScreenDim   int `json:"ScreenDim"`
	ScreenOff   int `json:"ScreenOff"`
}

type RefDeviceLoginScreenPowerSettings struct {
	Delays     *RefDeviceLoginScreenPowerSettingsDelays `json:"Delays"`
	IdleAction string                                   `json:"IdleAction"`
}

type RefDeviceLoginScreenPowerSettingsDelays struct {
	Idle      int `json:"Idle"`
	ScreenDim int `json:"ScreenDim"`
	ScreenOff int `json:"ScreenOff"`
}

type RefBookmarkType struct {
	Children     []*RefBookmarkType `json:"children,omitempty"`
	Name         string             `json:"name"`
	ToplevelName string             `json:"toplevel_name"`
	Url          string             `json:"url"`
}

type RefUsbDeviceId struct {
	ProductId int `json:"product_id"`
	VendorId  int `json:"vendor_id"`
}

type RefUsbDeviceIdInclusive struct {
	ProductId int `json:"product_id"`
	VendorId  int `json:"vendor_id"`
}

type RefWeeklyTimeIntervals struct {
	End   *RefWeeklyTime `json:"end"`
	Start *RefWeeklyTime `json:"start"`
}

type RefWeeklyTime struct {
	DayOfWeek string `json:"day_of_week"`
	Time      int    `json:"time"`
}

type RefTime struct {
	Hour   int `json:"hour"`
	Minute int `json:"minute"`
}

type RefTimeUsageLimitEntry struct {
	LastUpdatedMillis string `json:"last_updated_millis"`
	UsageQuotaMins    int    `json:"usage_quota_mins"`
}

type RefDisallowedTimeInterval struct {
	DayOfWeek string `json:"day_of_week"`
	Hours     int    `json:"hours"`
	Minutes   int    `json:"minutes"`
}

type RefDayPercentagePair struct {
	Days       int `json:"days"`
	Percentage int `json:"percentage"`
}

type RefConfig struct {
	AccessCodeTtl       int    `json:"access_code_ttl"`
	ClockDriftTolerance int    `json:"clock_drift_tolerance"`
	SharedSecret        string `json:"shared_secret"`
}

type RefDomainFiletypePair struct {
	Domains       []string `json:"domains,omitempty"`
	FileExtension string   `json:"file_extension"`
}

///////////////////////////////////////////////////////////////////////////////
// Open Network Configuration(ONC) schema.
// Used in OpenNetworkConfiguration and DeviceOpenNetworkConfiguration.
// This is a subset of the full schema. Only the parts that tast tests use are defined here.
// See https://chromium.googlesource.com/chromium/src/+/HEAD/components/onc/docs/onc_spec.md for full schema.
///////////////////////////////////////////////////////////////////////////////
type ONCEap struct {
	Outer        string `json:"Outer"`
	Inner        string `json:"Inner,omitempty"`
	Identity     string `json:"Identity,omitempty"`
	Password     string `json:"Password,omitempty"`
	UseSystemCAs bool   `json:"UseSystemCAs"`
}

type ONCWifi struct {
	AutoConnect bool    `json:"AutoConnect"`
	EAP         *ONCEap `json:"EAP,omitempty"`
	Security    string  `json:"Security"`
	SSID        string  `json:"SSID"`
	Passphrase  string  `json:"Passphrase,omitempty"`
}

type ONCVPN struct {
	AutoConnect bool      `json:"AutoConnect"`
	Host        string    `json:"Host"`
	IPsec       *ONCIPsec `json:"IPsec,omitempty"`
	L2TP        *ONCL2TP  `json:"L2TP,omitempty"`
	Type        string    `json:"Type"`
}

type ONCL2TP struct {
	Username string `json:"Username"`
	Password string `json:"Password"`
}

type ONCIPsec struct {
	AuthenticationType string `json:"AuthenticationType"`
	IKEVersion         int    `json:"IKEVersion"`
	PSK                string `json:"PSK,omitempty"`
}

type ONCCellular struct {
	ICCID       string `json:"ICCID"`
	SMDPAddress string `json:"SMDPAddress"`
}

type ONCNetworkConfiguration struct {
	GUID     string       `json:"GUID"`
	Name     string       `json:"Name"`
	Type     string       `json:"Type"`
	Cellular *ONCCellular `json:"Cellular,omitempty"`
	VPN      *ONCVPN      `json:"VPN,omitempty"`
	WiFi     *ONCWifi     `json:"WiFi,omitempty"`
}

type ONCGlobalNetworkConfiguration struct {
	AllowOnlyPolicyNetworksToAutoconnect bool `json:"AllowOnlyPolicyNetworksToAutoconnect"`
	AllowOnlyPolicyNetworksToConnect     bool `json:"AllowOnlyPolicyNetworksToConnect"`
	AllowOnlyPolicyCellularNetworks      bool `json:"AllowOnlyPolicyCellularNetworks"`
}

type ONC struct {
	GlobalNetworkConfiguration *ONCGlobalNetworkConfiguration `json:"GlobalNetworkConfiguration,omitempty"`
	NetworkConfigurations      []*ONCNetworkConfiguration     `json:"NetworkConfigurations,omitempty"`
}
