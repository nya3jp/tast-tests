// Code generated by MockGen. DO NOT EDIT.
// Source: chromiumos/tast/common/firmware/serial (interfaces: SerialPort)

// Package mocks is a generated GoMock package.
// CGO_ENABLED=0 GOPATH=/usr/lib/gopath:/mnt/host/source/src/platform/tast-tests:/mnt/host/source/src/platform/tast mockgen -destination=mock_serial_port.go -self_package=chromiumos/tast/common/firmware/serial/mocks -package mocks chromiumos/tast/common/firmware/serial SerialPort
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSerialPort is a mock of SerialPort interface.
type MockSerialPort struct {
	ctrl     *gomock.Controller
	recorder *MockSerialPortMockRecorder
}

// MockSerialPortMockRecorder is the mock recorder for MockSerialPort.
type MockSerialPortMockRecorder struct {
	mock *MockSerialPort
}

// NewMockSerialPort creates a new mock instance.
func NewMockSerialPort(ctrl *gomock.Controller) *MockSerialPort {
	mock := &MockSerialPort{ctrl: ctrl}
	mock.recorder = &MockSerialPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSerialPort) EXPECT() *MockSerialPortMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSerialPort) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSerialPortMockRecorder) Close(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSerialPort)(nil).Close), arg0)
}

// Flush mocks base method.
func (m *MockSerialPort) Flush(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockSerialPortMockRecorder) Flush(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockSerialPort)(nil).Flush), arg0)
}

// Read mocks base method.
func (m *MockSerialPort) Read(arg0 context.Context, arg1 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockSerialPortMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockSerialPort)(nil).Read), arg0, arg1)
}

// Write mocks base method.
func (m *MockSerialPort) Write(arg0 context.Context, arg1 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockSerialPortMockRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockSerialPort)(nil).Write), arg0, arg1)
}
