// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Messages containing configuration of Feedback Service
// that control classification and processing of submitted feedbacks.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: config.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Encapsulates different kind of feedback type.
type FeedbackTypeData_Kind int32

const (
	// Product feedback type.
	FeedbackTypeData_PRODUCT FeedbackTypeData_Kind = 1
	// Special feedback type (e.g. fixit).
	FeedbackTypeData_SPECIAL FeedbackTypeData_Kind = 2
)

// Enum value maps for FeedbackTypeData_Kind.
var (
	FeedbackTypeData_Kind_name = map[int32]string{
		1: "PRODUCT",
		2: "SPECIAL",
	}
	FeedbackTypeData_Kind_value = map[string]int32{
		"PRODUCT": 1,
		"SPECIAL": 2,
	}
)

func (x FeedbackTypeData_Kind) Enum() *FeedbackTypeData_Kind {
	p := new(FeedbackTypeData_Kind)
	*p = x
	return p
}

func (x FeedbackTypeData_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeedbackTypeData_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[0].Descriptor()
}

func (FeedbackTypeData_Kind) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[0]
}

func (x FeedbackTypeData_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FeedbackTypeData_Kind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FeedbackTypeData_Kind(num)
	return nil
}

// Deprecated: Use FeedbackTypeData_Kind.Descriptor instead.
func (FeedbackTypeData_Kind) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1, 0}
}

// Visibilities of feedback type.
type FeedbackTypeData_Visibility int32

const (
	// feedback type visible in external extension only
	FeedbackTypeData_EXTERNAL FeedbackTypeData_Visibility = 1
	// feedback type visible in internal extension only
	FeedbackTypeData_INTERNAL FeedbackTypeData_Visibility = 2
)

// Enum value maps for FeedbackTypeData_Visibility.
var (
	FeedbackTypeData_Visibility_name = map[int32]string{
		1: "EXTERNAL",
		2: "INTERNAL",
	}
	FeedbackTypeData_Visibility_value = map[string]int32{
		"EXTERNAL": 1,
		"INTERNAL": 2,
	}
)

func (x FeedbackTypeData_Visibility) Enum() *FeedbackTypeData_Visibility {
	p := new(FeedbackTypeData_Visibility)
	*p = x
	return p
}

func (x FeedbackTypeData_Visibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeedbackTypeData_Visibility) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[1].Descriptor()
}

func (FeedbackTypeData_Visibility) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[1]
}

func (x FeedbackTypeData_Visibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FeedbackTypeData_Visibility) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FeedbackTypeData_Visibility(num)
	return nil
}

// Deprecated: Use FeedbackTypeData_Visibility.Descriptor instead.
func (FeedbackTypeData_Visibility) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1, 1}
}

// Channel via which notification about feedback should be send
type FeedbackTypeData_NotifyChannel int32

const (
	// Send email notification.
	FeedbackTypeData_EMAIL FeedbackTypeData_NotifyChannel = 1
	// File a bug in buganizer.
	FeedbackTypeData_BUGANIZER FeedbackTypeData_NotifyChannel = 2
	// File a bug in issue tracker.
	FeedbackTypeData_ISSUE_TRACKER FeedbackTypeData_NotifyChannel = 3
)

// Enum value maps for FeedbackTypeData_NotifyChannel.
var (
	FeedbackTypeData_NotifyChannel_name = map[int32]string{
		1: "EMAIL",
		2: "BUGANIZER",
		3: "ISSUE_TRACKER",
	}
	FeedbackTypeData_NotifyChannel_value = map[string]int32{
		"EMAIL":         1,
		"BUGANIZER":     2,
		"ISSUE_TRACKER": 3,
	}
)

func (x FeedbackTypeData_NotifyChannel) Enum() *FeedbackTypeData_NotifyChannel {
	p := new(FeedbackTypeData_NotifyChannel)
	*p = x
	return p
}

func (x FeedbackTypeData_NotifyChannel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeedbackTypeData_NotifyChannel) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[2].Descriptor()
}

func (FeedbackTypeData_NotifyChannel) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[2]
}

func (x FeedbackTypeData_NotifyChannel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FeedbackTypeData_NotifyChannel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FeedbackTypeData_NotifyChannel(num)
	return nil
}

// Deprecated: Use FeedbackTypeData_NotifyChannel.Descriptor instead.
func (FeedbackTypeData_NotifyChannel) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1, 2}
}

// Granularity of notifications.
type FeedbackTypeData_NotificationGranularity int32

const (
	// Send notification per each feedback.
	FeedbackTypeData_FEEDBACK FeedbackTypeData_NotificationGranularity = 1
	// Send notification per clustered group of similar feedbacks.
	FeedbackTypeData_CLUSTER FeedbackTypeData_NotificationGranularity = 2
)

// Enum value maps for FeedbackTypeData_NotificationGranularity.
var (
	FeedbackTypeData_NotificationGranularity_name = map[int32]string{
		1: "FEEDBACK",
		2: "CLUSTER",
	}
	FeedbackTypeData_NotificationGranularity_value = map[string]int32{
		"FEEDBACK": 1,
		"CLUSTER":  2,
	}
)

func (x FeedbackTypeData_NotificationGranularity) Enum() *FeedbackTypeData_NotificationGranularity {
	p := new(FeedbackTypeData_NotificationGranularity)
	*p = x
	return p
}

func (x FeedbackTypeData_NotificationGranularity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeedbackTypeData_NotificationGranularity) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[3].Descriptor()
}

func (FeedbackTypeData_NotificationGranularity) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[3]
}

func (x FeedbackTypeData_NotificationGranularity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FeedbackTypeData_NotificationGranularity) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FeedbackTypeData_NotificationGranularity(num)
	return nil
}

// Deprecated: Use FeedbackTypeData_NotificationGranularity.Descriptor instead.
func (FeedbackTypeData_NotificationGranularity) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1, 3}
}

// Product for which feedback can be sent: GMail, Writely etc.
type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *int32   `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Name  *string  `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	Owner []string `protobuf:"bytes,3,rep,name=owner" json:"owner,omitempty"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0}
}

func (x *Product) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Product) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Product) GetOwner() []string {
	if x != nil {
		return x.Owner
	}
	return nil
}

// Contains information needed to check whether particular
// feedback type applies to the page user is browsing and forward
// it's execution to a specific handler. It also carries information
// about the creator.
// TODO(morgwai): design new structure of Type with fields relevant
// for android, web, selenium grouped into submessages.
type FeedbackTypeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// index of feedback type as found in database
	Id *int32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// Specifies whether this feedback type is currently enabled and
	// feedback of this type can be submitted.
	Enabled *bool `protobuf:"varint,2,req,name=enabled" json:"enabled,omitempty"`
	// Problem name of this feedback type on Google Feedback pages.
	ProblemName *string `protobuf:"bytes,3,req,name=problem_name,json=problemName" json:"problem_name,omitempty"`
	// Name of the product to which this feedback type belongs.
	ProductName *string `protobuf:"bytes,4,opt,name=product_name,json=productName" json:"product_name,omitempty"`
	// matcher to execute against page
	Matcher *MatcherData `protobuf:"bytes,6,req,name=matcher" json:"matcher,omitempty"`
	// Comma separated list of email addresses to which email notification
	// is sent upon each new feedback of this type.
	// No email is sent if this field is set to an empty string.
	NotificationEmail *string `protobuf:"bytes,7,req,name=notification_email,json=notificationEmail" json:"notification_email,omitempty"`
	// Kind of feedback type.
	Kind *FeedbackTypeData_Kind `protobuf:"varint,11,opt,name=kind,enum=userfeedback.FeedbackTypeData_Kind,def=1" json:"kind,omitempty"`
	// Prefix to be added to summary of notification email sent for feedback of this
	// type.
	SummaryPrefix *string `protobuf:"bytes,12,opt,name=summary_prefix,json=summaryPrefix" json:"summary_prefix,omitempty"`
	// String template with which "Additional Info" field in extension
	// should be initially filled.
	Template *string `protobuf:"bytes,13,opt,name=template" json:"template,omitempty"`
	// ID of the product this feedback type belongs to.
	ProductId *int32 `protobuf:"varint,14,opt,name=product_id,json=productId" json:"product_id,omitempty"`
	// Tag that is used for marking feedback types that require non-ordinary handling.
	// E.g: This field is equal:
	// "unclassified" for Unclassified feedback,
	// "android" for android feedback
	// "selenium" for selenium feedback
	Tag *string `protobuf:"bytes,15,opt,name=tag" json:"tag,omitempty"`
	// Problem description visible in feedback extension.
	ProblemDescription *string `protobuf:"bytes,16,opt,name=problem_description,json=problemDescription" json:"problem_description,omitempty"`
	// Specifies the visibility of this feedback type.
	Visibility *FeedbackTypeData_Visibility `protobuf:"varint,17,opt,name=visibility,enum=userfeedback.FeedbackTypeData_Visibility,def=2" json:"visibility,omitempty"`
	// Specifies channel via which notification about feedback of this type should be sent.
	NotifyChannel *FeedbackTypeData_NotifyChannel `protobuf:"varint,20,opt,name=notify_channel,json=notifyChannel,enum=userfeedback.FeedbackTypeData_NotifyChannel,def=1" json:"notify_channel,omitempty"`
	// Specifies granularity of notifications send for feedbacks of this type.
	NotificationGranularity *FeedbackTypeData_NotificationGranularity `protobuf:"varint,21,opt,name=notification_granularity,json=notificationGranularity,enum=userfeedback.FeedbackTypeData_NotificationGranularity,def=1" json:"notification_granularity,omitempty"`
	// Threshold for number of feedbacks in a cluster at which notification is sent.
	ClusteringThreshold *int32 `protobuf:"varint,22,opt,name=clustering_threshold,json=clusteringThreshold,def=5" json:"clustering_threshold,omitempty"`
}

// Default values for FeedbackTypeData fields.
const (
	Default_FeedbackTypeData_Kind                    = FeedbackTypeData_PRODUCT
	Default_FeedbackTypeData_Visibility              = FeedbackTypeData_INTERNAL
	Default_FeedbackTypeData_NotifyChannel           = FeedbackTypeData_EMAIL
	Default_FeedbackTypeData_NotificationGranularity = FeedbackTypeData_FEEDBACK
	Default_FeedbackTypeData_ClusteringThreshold     = int32(5)
)

func (x *FeedbackTypeData) Reset() {
	*x = FeedbackTypeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedbackTypeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedbackTypeData) ProtoMessage() {}

func (x *FeedbackTypeData) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedbackTypeData.ProtoReflect.Descriptor instead.
func (*FeedbackTypeData) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1}
}

func (x *FeedbackTypeData) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *FeedbackTypeData) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *FeedbackTypeData) GetProblemName() string {
	if x != nil && x.ProblemName != nil {
		return *x.ProblemName
	}
	return ""
}

func (x *FeedbackTypeData) GetProductName() string {
	if x != nil && x.ProductName != nil {
		return *x.ProductName
	}
	return ""
}

func (x *FeedbackTypeData) GetMatcher() *MatcherData {
	if x != nil {
		return x.Matcher
	}
	return nil
}

func (x *FeedbackTypeData) GetNotificationEmail() string {
	if x != nil && x.NotificationEmail != nil {
		return *x.NotificationEmail
	}
	return ""
}

func (x *FeedbackTypeData) GetKind() FeedbackTypeData_Kind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return Default_FeedbackTypeData_Kind
}

func (x *FeedbackTypeData) GetSummaryPrefix() string {
	if x != nil && x.SummaryPrefix != nil {
		return *x.SummaryPrefix
	}
	return ""
}

func (x *FeedbackTypeData) GetTemplate() string {
	if x != nil && x.Template != nil {
		return *x.Template
	}
	return ""
}

func (x *FeedbackTypeData) GetProductId() int32 {
	if x != nil && x.ProductId != nil {
		return *x.ProductId
	}
	return 0
}

func (x *FeedbackTypeData) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *FeedbackTypeData) GetProblemDescription() string {
	if x != nil && x.ProblemDescription != nil {
		return *x.ProblemDescription
	}
	return ""
}

func (x *FeedbackTypeData) GetVisibility() FeedbackTypeData_Visibility {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return Default_FeedbackTypeData_Visibility
}

func (x *FeedbackTypeData) GetNotifyChannel() FeedbackTypeData_NotifyChannel {
	if x != nil && x.NotifyChannel != nil {
		return *x.NotifyChannel
	}
	return Default_FeedbackTypeData_NotifyChannel
}

func (x *FeedbackTypeData) GetNotificationGranularity() FeedbackTypeData_NotificationGranularity {
	if x != nil && x.NotificationGranularity != nil {
		return *x.NotificationGranularity
	}
	return Default_FeedbackTypeData_NotificationGranularity
}

func (x *FeedbackTypeData) GetClusteringThreshold() int32 {
	if x != nil && x.ClusteringThreshold != nil {
		return *x.ClusteringThreshold
	}
	return Default_FeedbackTypeData_ClusteringThreshold
}

// Used to detect content relevant to particular type of feedback.
type MatcherData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// XPATH expression to match against page.
	ContentMatcher *string `protobuf:"bytes,1,req,name=content_matcher,json=contentMatcher" json:"content_matcher,omitempty"`
	// Regexp matching page URL.
	UrlMatcher *string `protobuf:"bytes,2,req,name=url_matcher,json=urlMatcher" json:"url_matcher,omitempty"`
	// Approval by feedback admins
	UrlMatcherApproved *bool `protobuf:"varint,3,opt,name=url_matcher_approved,json=urlMatcherApproved,def=1" json:"url_matcher_approved,omitempty"`
}

// Default values for MatcherData fields.
const (
	Default_MatcherData_UrlMatcherApproved = bool(true)
)

func (x *MatcherData) Reset() {
	*x = MatcherData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatcherData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatcherData) ProtoMessage() {}

func (x *MatcherData) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatcherData.ProtoReflect.Descriptor instead.
func (*MatcherData) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{2}
}

func (x *MatcherData) GetContentMatcher() string {
	if x != nil && x.ContentMatcher != nil {
		return *x.ContentMatcher
	}
	return ""
}

func (x *MatcherData) GetUrlMatcher() string {
	if x != nil && x.UrlMatcher != nil {
		return *x.UrlMatcher
	}
	return ""
}

func (x *MatcherData) GetUrlMatcherApproved() bool {
	if x != nil && x.UrlMatcherApproved != nil {
		return *x.UrlMatcherApproved
	}
	return Default_MatcherData_UrlMatcherApproved
}

var File_config_proto protoreflect.FileDescriptor

var file_config_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x75, 0x73, 0x65, 0x72, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x43, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x22, 0xf1, 0x07, 0x0a, 0x10, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x66, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x07, 0x20, 0x02, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x40, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x66,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x3a, 0x07, 0x50,
	0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x53, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x66, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x3a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x5a, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x3a, 0x05, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x7b, 0x0a, 0x18, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x66, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x08, 0x46, 0x45,
	0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x52, 0x17, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x34, 0x0a, 0x14, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x35,
	0x52, 0x13, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x20, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x22, 0x28, 0x0a, 0x0a, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10,
	0x02, 0x22, 0x3c, 0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x42, 0x55, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x45, 0x52, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x03, 0x22,
	0x34, 0x0a, 0x17, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x45,
	0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x55, 0x53,
	0x54, 0x45, 0x52, 0x10, 0x02, 0x22, 0x8f, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x72, 0x6c, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x72, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12,
	0x36, 0x0a, 0x14, 0x75, 0x72, 0x6c, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74,
	0x72, 0x75, 0x65, 0x52, 0x12, 0x75, 0x72, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x35, 0x48, 0x03, 0x5a, 0x31, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x2f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f,
	0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_config_proto_rawDescOnce sync.Once
	file_config_proto_rawDescData = file_config_proto_rawDesc
)

func file_config_proto_rawDescGZIP() []byte {
	file_config_proto_rawDescOnce.Do(func() {
		file_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_proto_rawDescData)
	})
	return file_config_proto_rawDescData
}

var file_config_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_config_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_config_proto_goTypes = []interface{}{
	(FeedbackTypeData_Kind)(0),                    // 0: userfeedback.FeedbackTypeData.Kind
	(FeedbackTypeData_Visibility)(0),              // 1: userfeedback.FeedbackTypeData.Visibility
	(FeedbackTypeData_NotifyChannel)(0),           // 2: userfeedback.FeedbackTypeData.NotifyChannel
	(FeedbackTypeData_NotificationGranularity)(0), // 3: userfeedback.FeedbackTypeData.NotificationGranularity
	(*Product)(nil),                               // 4: userfeedback.Product
	(*FeedbackTypeData)(nil),                      // 5: userfeedback.FeedbackTypeData
	(*MatcherData)(nil),                           // 6: userfeedback.MatcherData
}
var file_config_proto_depIdxs = []int32{
	6, // 0: userfeedback.FeedbackTypeData.matcher:type_name -> userfeedback.MatcherData
	0, // 1: userfeedback.FeedbackTypeData.kind:type_name -> userfeedback.FeedbackTypeData.Kind
	1, // 2: userfeedback.FeedbackTypeData.visibility:type_name -> userfeedback.FeedbackTypeData.Visibility
	2, // 3: userfeedback.FeedbackTypeData.notify_channel:type_name -> userfeedback.FeedbackTypeData.NotifyChannel
	3, // 4: userfeedback.FeedbackTypeData.notification_granularity:type_name -> userfeedback.FeedbackTypeData.NotificationGranularity
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_config_proto_init() }
func file_config_proto_init() {
	if File_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedbackTypeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatcherData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_proto_goTypes,
		DependencyIndexes: file_config_proto_depIdxs,
		EnumInfos:         file_config_proto_enumTypes,
		MessageInfos:      file_config_proto_msgTypes,
	}.Build()
	File_config_proto = out.File
	file_config_proto_rawDesc = nil
	file_config_proto_goTypes = nil
	file_config_proto_depIdxs = nil
}
