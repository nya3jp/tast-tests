// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package arc

import (
	"context"
	"time"

	"chromiumos/tast/errors"
	"chromiumos/tast/local/arc"
	"chromiumos/tast/local/sysutil"
	"chromiumos/tast/local/testexec"
	"chromiumos/tast/testing"
)

const (
	// Android native ARM executables expected to be runnable via native bridge.
	// They are generated by ArcNativeBridgeTestHelper in the Android source tree.
	armExec   = "hello_world_arm"
	arm64Exec = "hello_world_arm64"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         NativeBridge,
		Desc:         "Checks whether native bridge is properly set up for ARCVM",
		Contacts:     []string{"youkichihosoi@chromium.org", "arcvm-eng@google.com"},
		SoftwareDeps: []string{"android_vm", "chrome"},
		Attr:         []string{"group:mainline", "informational"},
		Params: []testing.Param{{
			Name:              "arm",
			Val:               []string{armExec},
			ExtraData:         []string{armExec},
			ExtraSoftwareDeps: []string{"native_bridge"},
		}, {
			Name:              "arm64",
			Val:               []string{arm64Exec},
			ExtraData:         []string{arm64Exec},
			ExtraSoftwareDeps: []string{"native_bridge64"},
		}},
		Pre:     arc.VMBooted(),
		Timeout: 5 * time.Minute,
	})
}

func NativeBridge(ctx context.Context, s *testing.State) {
	a := s.PreValue().(arc.PreData).ARC

	// Check whether binfmt_misc has been successfully unmounted.
	ms, err := mountInfoForARCVM(ctx, a)
	if err != nil {
		s.Fatal("Failed to get mount info for ARCVM: ", err)
	}
	const binfmtMiscPath = "/proc/sys/fs/binfmt_misc"
	for _, m := range ms {
		if m.MountPath == binfmtMiscPath {
			s.Fatalf("Failure: %q is not unmounted", binfmtMiscPath)
		}
	}

	// Check whether the property for native bridge library has been properly set.
	const nativeBridgeProp = "ro.boot.native_bridge"
	nb, err := a.GetProp(ctx, nativeBridgeProp)
	if err != nil {
		s.Fatalf("Failed to getprop %q: %v", nativeBridgeProp, err)
	}
	const (
		houdiniLib        = "libhoudini.so"
		ndkTranslationLib = "libndk_translation.so"
	)
	if nb != houdiniLib && nb != ndkTranslationLib {
		s.Fatalf("Failure: the property %q is set to %q; expected to be either %q or %q", nativeBridgeProp, nb, houdiniLib, ndkTranslationLib)
	}

	// Check whether ARM executables can be successfully run.
	for _, exec := range s.Param().([]string) {
		if err := pushAndExecute(ctx, a, s.DataPath(exec)); err != nil {
			s.Fatalf("Failed to run ARM executable %q: %v", exec, err)
		}
	}
}

// pushAndExecute pushes an executable to Android's temporary directory and executes it.
func pushAndExecute(ctx context.Context, a *arc.ARC, execPath string) (retErr error) {
	tmpExecPath, err := a.PushFileToTmpDir(ctx, execPath)
	if err != nil {
		return errors.Wrapf(err, "failed to push %q to tmpdir", execPath)
	}
	defer func() {
		if err := a.Command(ctx, "rm", "-f", tmpExecPath).Run(testexec.DumpLogOnError); err != nil {
			if retErr == nil {
				retErr = errors.Wrapf(err, "failed to remove %q", tmpExecPath)
			} else {
				testing.ContextLogf(ctx, "Failed to remove %q: %v", tmpExecPath, err)
			}
		}
	}()

	if err := a.Command(ctx, "chmod", "0755", tmpExecPath).Run(testexec.DumpLogOnError); err != nil {
		return errors.Wrapf(err, "failed to change the permission of %q", tmpExecPath)
	}
	if err := a.Command(ctx, tmpExecPath).Run(testexec.DumpLogOnError); err != nil {
		return errors.Wrapf(err, "failed to execute %q", tmpExecPath)
	}
	return nil
}

// mountInfoForARCVM returns a list of mount point info for ARCVM.
func mountInfoForARCVM(ctx context.Context, a *arc.ARC) ([]sysutil.MountInfo, error) {
	const mountInfoPath = "/proc/self/mountinfo"
	mi, err := a.ReadFile(ctx, mountInfoPath)
	if err != nil {
		return nil, errors.Wrapf(err, "failed to read mount info file %q", mountInfoPath)
	}
	return sysutil.ParseMountInfo(mi)
}
