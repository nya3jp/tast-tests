// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package security

import (
	"context"
	"fmt"
	"time"

	"chromiumos/tast/ctxutil"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/local/cryptohome"
	"chromiumos/tast/local/vm"
	"chromiumos/tast/testing"
)

func init() {
	testing.AddTest(&testing.Test{
		Func: CPUVulnerability,
		Desc: "Confirm CPU vulnerabilities are mitigated in the guest kernel",
		Contacts: []string{
			"swboyd@chromium.org", // Tast port author
			"cros-containers-dev@google.com",
			"chromeos-security@google.com",
		},
		Attr:         []string{"group:mainline", "informational"},
		Vars:         []string{"keepState"},
		SoftwareDeps: []string{"chrome", "vm_host"},
		Params: []testing.Param{
			// Parameters generated by cpu_vulnerability_test.go. DO NOT EDIT.
			{
				Name:              "artifact",
				ExtraData:         []string{"crostini_guest_images.tar"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Pre:               crostini.StartedByArtifact(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "artifact_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{"crostini_guest_images.tar"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Pre:               crostini.StartedByArtifact(),
				Timeout:           7 * time.Minute,
			}, {
				Name:      "download_stretch",
				ExtraAttr: []string{"informational"},
				Pre:       crostini.StartedByDownloadStretch(),
				Timeout:   10 * time.Minute,
			}, {
				Name:      "download_buster",
				ExtraAttr: []string{"informational"},
				Pre:       crostini.StartedByDownloadBuster(),
				Timeout:   10 * time.Minute,
			},
		},
	})
}

func CPUVulnerability(ctx context.Context, s *testing.State) {
	pre := s.PreValue().(crostini.PreData)
	cr := pre.Chrome
	cont := pre.Container
	defer crostini.RunCrostiniPostTest(ctx, pre)

	ownerID, err := cryptohome.UserHash(ctx, cr.User())
	if err != nil {
		s.Fatal("Failed to get user hash: ", err)
	}

	// Use a shortened context for test operations to reserve time for cleanup.
	ctx, cancel := ctxutil.Shorten(ctx, 5*time.Second)
	defer cancel()

	outputFile := "test.txt"
	// Run commands  in container, redirect the output to a file to check.
	cmd := vm.DefaultContainerCommand(ctx, ownerID, "sh", "-c", fmt.Sprintf("grep -li vulnerable /sys/devices/system/cpu/vulnerabilities/* > %s", outputFile))
	if err := cmd.Run(); err != nil {
		cmd.DumpLog(ctx)
		s.Fatal("Failed to run command: ", err)
	}

	// Check the output of grep
	content, err := cont.ReadFile(ctx, outputFile)
	if err != nil {
		s.Fatal("Failed to cat the result file: ", err)
	}
	if len(content) > 0 {
		s.Fatal("Guest kernel has CPU vulnerabilities: ", content)
	}
}
