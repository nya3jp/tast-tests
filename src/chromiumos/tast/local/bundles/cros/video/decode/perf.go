// Copyright 2019 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package decode

import (
	"encoding/json"
	"os"

	"chromiumos/tast/errors"
	"chromiumos/tast/local/perf"
)

// This file contains helper functions that can be used to parse the log files
// generated by the video_decode_accelerator_perf_tests.

// parseUncappedPerformanceMetrics parses the json log file generated by the
// MeasureUncappedPerformance test.
func parseUncappedPerformanceMetrics(metricsFileName string, p *perf.Values) error {
	f, err := os.Open(metricsFileName)
	if err != nil {
		return errors.Wrapf(err, "failed to open %s", metricsFileName)
	}
	defer f.Close()

	type metricsData struct {
		FrameDeliveryTimePercentile25 float64   `json:"FrameDeliveryTimePercentile25"`
		FrameDeliveryTimePercentile50 float64   `json:"FrameDeliveryTimePercentile50"`
		FrameDeliveryTimePercentile75 float64   `json:"FrameDeliveryTimePercentile75"`
		FrameDeliveryTimes            []float64 `json:"FrameDeliveryTimes"`
	}

	var metrics metricsData
	if err := json.NewDecoder(f).Decode(&metrics); err != nil {
		return errors.Wrapf(err, "failed decoding %s", metricsFileName)
	}

	// TODO(dstaessens@): Remove "tast_" prefix after removing video_VDAPerf in autotest.
	p.Set(perf.Metric{
		Name:      "delivery_time.first",
		Unit:      "milliseconds",
		Direction: perf.SmallerIsBetter,
	}, metrics.FrameDeliveryTimes[0])
	p.Set(perf.Metric{
		Name:      "tast_delivery_time.percentile_0.25",
		Unit:      "milliseconds",
		Direction: perf.SmallerIsBetter,
	}, metrics.FrameDeliveryTimePercentile25)
	p.Set(perf.Metric{
		Name:      "tast_delivery_time.percentile_0.50",
		Unit:      "milliseconds",
		Direction: perf.SmallerIsBetter,
	}, metrics.FrameDeliveryTimePercentile50)
	p.Set(perf.Metric{
		Name:      "tast_delivery_time.percentile_0.75",
		Unit:      "milliseconds",
		Direction: perf.SmallerIsBetter,
	}, metrics.FrameDeliveryTimePercentile75)

	return nil
}

// parseCappedPerformanceMetrics parses the json log file generated by the
// MeasureCappedPerformance test.
func parseCappedPerformanceMetrics(metricsFileName string, p *perf.Values) error {
	f, err := os.Open(metricsFileName)
	if err != nil {
		return errors.Wrapf(err, "failed to open %s", metricsFileName)
	}
	defer f.Close()

	type metricsData struct {
		DroppedFrameRate            float64 `json:"DroppedFrameRate"`
		FrameDecodeTimePercentile50 float64 `json:"FrameDecodeTimePercentile50"`
	}

	var metrics metricsData
	if err := json.NewDecoder(f).Decode(&metrics); err != nil {
		return errors.Wrapf(err, "failed decoding %s", metricsFileName)
	}

	// TODO(dstaessens@): Remove "tast_" prefix after removing video_VDAPerf in autotest.
	p.Set(perf.Metric{
		Name:      "frame_drop_rate",
		Unit:      "ratio",
		Direction: perf.SmallerIsBetter,
	}, metrics.DroppedFrameRate)
	p.Set(perf.Metric{
		Name:      "decode_time.percentile_0.50",
		Unit:      "milliseconds",
		Direction: perf.SmallerIsBetter,
	}, metrics.FrameDecodeTimePercentile50)

	return nil
}
