// Copyright 2022 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// The Params in this test are automatically generated. Don't edit by hand !!!

package video

import (
	"context"

	"chromiumos/tast/local/media/decoding"
	"chromiumos/tast/testing"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         ChromeStackDecoderLegacyPerf,
		LacrosStatus: testing.LacrosVariantUnneeded,
		Desc:         "Measures hardware video decode performance of media::VideoDecoders by running the video_decode_accelerator_perf_tests binary (see go/vd-migration)",
		Contacts: []string{
			"mcasas@chromium.org",
			"hiroh@chromium.org", // Underlying binary author.
			"chromeos-gfx-video@google.com",
		},
		Attr:         []string{"group:graphics", "graphics_video", "graphics_perbuild"},
		SoftwareDeps: []string{"chrome", "video_decoder_legacy_supported"},
		Params: []testing.Param{
			// Parameters generated by chrome_stack_decoder_perf_test.go. DO NOT EDIT.
			{
				Name:              "h264_1080p_30fps",
				Val:               "perf/h264/1080p_30fps_300frames.h264",
				ExtraSoftwareDeps: []string{"autotest-capability:hw_dec_h264_1080_30"},
				ExtraData:         []string{"perf/h264/1080p_30fps_300frames.h264", "perf/h264/1080p_30fps_300frames.h264.json"},
				ExtraAttr:         []string{"graphics_video_decodeaccel"},
			},
			{
				Name:              "h264_1080p_60fps",
				Val:               "perf/h264/1080p_60fps_600frames.h264",
				ExtraSoftwareDeps: []string{"autotest-capability:hw_dec_h264_1080_60"},
				ExtraData:         []string{"perf/h264/1080p_60fps_600frames.h264", "perf/h264/1080p_60fps_600frames.h264.json"},
				ExtraAttr:         []string{"graphics_video_decodeaccel"},
			},
			{
				Name:              "h264_2160p_30fps",
				Val:               "perf/h264/2160p_30fps_300frames.h264",
				ExtraSoftwareDeps: []string{"autotest-capability:hw_dec_h264_2160_30"},
				ExtraData:         []string{"perf/h264/2160p_30fps_300frames.h264", "perf/h264/2160p_30fps_300frames.h264.json"},
				ExtraAttr:         []string{"graphics_video_decodeaccel"},
			},
			{
				Name:              "h264_2160p_60fps",
				Val:               "perf/h264/2160p_60fps_600frames.h264",
				ExtraSoftwareDeps: []string{"autotest-capability:hw_dec_h264_2160_60"},
				ExtraData:         []string{"perf/h264/2160p_60fps_600frames.h264", "perf/h264/2160p_60fps_600frames.h264.json"},
				ExtraAttr:         []string{"graphics_video_decodeaccel"},
			},
			{
				Name:              "vp8_1080p_30fps",
				Val:               "perf/vp8/1080p_30fps_300frames.vp8.ivf",
				ExtraSoftwareDeps: []string{"autotest-capability:hw_dec_vp8_1080_30"},
				ExtraData:         []string{"perf/vp8/1080p_30fps_300frames.vp8.ivf", "perf/vp8/1080p_30fps_300frames.vp8.ivf.json"},
				ExtraAttr:         []string{"graphics_video_decodeaccel"},
			},
			{
				Name:              "vp8_1080p_60fps",
				Val:               "perf/vp8/1080p_60fps_600frames.vp8.ivf",
				ExtraSoftwareDeps: []string{"autotest-capability:hw_dec_vp8_1080_60"},
				ExtraData:         []string{"perf/vp8/1080p_60fps_600frames.vp8.ivf", "perf/vp8/1080p_60fps_600frames.vp8.ivf.json"},
				ExtraAttr:         []string{"graphics_video_decodeaccel"},
			},
			{
				Name:              "vp8_2160p_30fps",
				Val:               "perf/vp8/2160p_30fps_300frames.vp8.ivf",
				ExtraSoftwareDeps: []string{"autotest-capability:hw_dec_vp8_2160_30"},
				ExtraData:         []string{"perf/vp8/2160p_30fps_300frames.vp8.ivf", "perf/vp8/2160p_30fps_300frames.vp8.ivf.json"},
				ExtraAttr:         []string{"graphics_video_decodeaccel"},
			},
			{
				Name:              "vp8_2160p_60fps",
				Val:               "perf/vp8/2160p_60fps_600frames.vp8.ivf",
				ExtraSoftwareDeps: []string{"autotest-capability:hw_dec_vp8_2160_60"},
				ExtraData:         []string{"perf/vp8/2160p_60fps_600frames.vp8.ivf", "perf/vp8/2160p_60fps_600frames.vp8.ivf.json"},
				ExtraAttr:         []string{"graphics_video_decodeaccel"},
			},
			{
				Name:              "vp9_1080p_30fps",
				Val:               "perf/vp9/1080p_30fps_300frames.vp9.ivf",
				ExtraSoftwareDeps: []string{"autotest-capability:hw_dec_vp9_1080_30"},
				ExtraData:         []string{"perf/vp9/1080p_30fps_300frames.vp9.ivf", "perf/vp9/1080p_30fps_300frames.vp9.ivf.json"},
				ExtraAttr:         []string{"graphics_video_decodeaccel"},
			},
			{
				Name:              "vp9_1080p_60fps",
				Val:               "perf/vp9/1080p_60fps_600frames.vp9.ivf",
				ExtraSoftwareDeps: []string{"autotest-capability:hw_dec_vp9_1080_60"},
				ExtraData:         []string{"perf/vp9/1080p_60fps_600frames.vp9.ivf", "perf/vp9/1080p_60fps_600frames.vp9.ivf.json"},
				ExtraAttr:         []string{"graphics_video_decodeaccel"},
			},
			{
				Name:              "vp9_2160p_30fps",
				Val:               "perf/vp9/2160p_30fps_300frames.vp9.ivf",
				ExtraSoftwareDeps: []string{"autotest-capability:hw_dec_vp9_2160_30"},
				ExtraData:         []string{"perf/vp9/2160p_30fps_300frames.vp9.ivf", "perf/vp9/2160p_30fps_300frames.vp9.ivf.json"},
				ExtraAttr:         []string{"graphics_video_decodeaccel"},
			},
			{
				Name:              "vp9_2160p_60fps",
				Val:               "perf/vp9/2160p_60fps_600frames.vp9.ivf",
				ExtraSoftwareDeps: []string{"autotest-capability:hw_dec_vp9_2160_60"},
				ExtraData:         []string{"perf/vp9/2160p_60fps_600frames.vp9.ivf", "perf/vp9/2160p_60fps_600frames.vp9.ivf.json"},
				ExtraAttr:         []string{"graphics_video_decodeaccel"},
			},
		},
	})
}

func ChromeStackDecoderLegacyPerf(ctx context.Context, s *testing.State) {
	if err := decoding.RunAccelVideoPerfTest(ctx, s.OutDir(), s.DataPath(s.Param().(string)), decoding.TestParams{DecoderType: decoding.VDA, DisableGlobalVaapiLock: false, TestCases: decoding.CappedFlag | decoding.UncappedFlag}); err != nil {
		s.Fatal("test failed: ", err)
	}
}
