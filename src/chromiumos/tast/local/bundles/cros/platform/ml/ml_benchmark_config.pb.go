// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ml_benchmark_config.proto

package ml

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BenchmarkReturnStatus int32

const (
	BenchmarkReturnStatus_OK                      BenchmarkReturnStatus = 0
	BenchmarkReturnStatus_INCORRECT_CONFIGURATION BenchmarkReturnStatus = 1
	BenchmarkReturnStatus_INITIALIZATION_FAILED   BenchmarkReturnStatus = 2
	BenchmarkReturnStatus_BENCHMARK_TIMED_OUT     BenchmarkReturnStatus = 3
	BenchmarkReturnStatus_RUNTIME_ERROR           BenchmarkReturnStatus = 4
)

var BenchmarkReturnStatus_name = map[int32]string{
	0: "OK",
	1: "INCORRECT_CONFIGURATION",
	2: "INITIALIZATION_FAILED",
	3: "BENCHMARK_TIMED_OUT",
	4: "RUNTIME_ERROR",
}

var BenchmarkReturnStatus_value = map[string]int32{
	"OK":                      0,
	"INCORRECT_CONFIGURATION": 1,
	"INITIALIZATION_FAILED":   2,
	"BENCHMARK_TIMED_OUT":     3,
	"RUNTIME_ERROR":           4,
}

func (x BenchmarkReturnStatus) String() string {
	return proto.EnumName(BenchmarkReturnStatus_name, int32(x))
}

func (BenchmarkReturnStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c0b7b59edfe74cde, []int{0}
}

type BenchmarkResults struct {
	Status         BenchmarkReturnStatus `protobuf:"varint,1,opt,name=status,proto3,enum=ml.BenchmarkReturnStatus" json:"status,omitempty"`
	ResultsMessage string                `protobuf:"bytes,2,opt,name=results_message,json=resultsMessage,proto3" json:"results_message,omitempty"`
	TotalAccuracy  float32               `protobuf:"fixed32,3,opt,name=total_accuracy,json=totalAccuracy,proto3" json:"total_accuracy,omitempty"`
	// originally, test drivers only outputs the average latency
	// This has been modified to output latencies at different percentiles
	AverageLatencyInUs int64 `protobuf:"varint,4,opt,name=average_latency_in_us,json=averageLatencyInUs,proto3" json:"average_latency_in_us,omitempty"` // Deprecated: Do not use.
	// For new code, use this instead, which allows us to output 50th and 90th
	// Percentile latencies
	PercentileLatenciesInUs map[int32]int64 `protobuf:"bytes,5,rep,name=percentile_latencies_in_us,json=percentileLatenciesInUs,proto3" json:"percentile_latencies_in_us,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral    struct{}        `json:"-"`
	XXX_unrecognized        []byte          `json:"-"`
	XXX_sizecache           int32           `json:"-"`
}

func (m *BenchmarkResults) Reset()         { *m = BenchmarkResults{} }
func (m *BenchmarkResults) String() string { return proto.CompactTextString(m) }
func (*BenchmarkResults) ProtoMessage()    {}
func (*BenchmarkResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0b7b59edfe74cde, []int{0}
}

func (m *BenchmarkResults) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BenchmarkResults.Unmarshal(m, b)
}
func (m *BenchmarkResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BenchmarkResults.Marshal(b, m, deterministic)
}
func (m *BenchmarkResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BenchmarkResults.Merge(m, src)
}
func (m *BenchmarkResults) XXX_Size() int {
	return xxx_messageInfo_BenchmarkResults.Size(m)
}
func (m *BenchmarkResults) XXX_DiscardUnknown() {
	xxx_messageInfo_BenchmarkResults.DiscardUnknown(m)
}

var xxx_messageInfo_BenchmarkResults proto.InternalMessageInfo

func (m *BenchmarkResults) GetStatus() BenchmarkReturnStatus {
	if m != nil {
		return m.Status
	}
	return BenchmarkReturnStatus_OK
}

func (m *BenchmarkResults) GetResultsMessage() string {
	if m != nil {
		return m.ResultsMessage
	}
	return ""
}

func (m *BenchmarkResults) GetTotalAccuracy() float32 {
	if m != nil {
		return m.TotalAccuracy
	}
	return 0
}

// Deprecated: Do not use.
func (m *BenchmarkResults) GetAverageLatencyInUs() int64 {
	if m != nil {
		return m.AverageLatencyInUs
	}
	return 0
}

func (m *BenchmarkResults) GetPercentileLatenciesInUs() map[int32]int64 {
	if m != nil {
		return m.PercentileLatenciesInUs
	}
	return nil
}

func init() {
	proto.RegisterEnum("ml.BenchmarkReturnStatus", BenchmarkReturnStatus_name, BenchmarkReturnStatus_value)
	proto.RegisterType((*BenchmarkResults)(nil), "ml.BenchmarkResults")
	proto.RegisterMapType((map[int32]int64)(nil), "ml.BenchmarkResults.PercentileLatenciesInUsEntry")
}

func init() { proto.RegisterFile("ml_benchmark_config.proto", fileDescriptor_c0b7b59edfe74cde) }

var fileDescriptor_c0b7b59edfe74cde = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xd1, 0x8b, 0xd3, 0x30,
	0x1c, 0xc7, 0x4d, 0x7b, 0x1b, 0xf8, 0x93, 0x9b, 0x35, 0x3a, 0xd6, 0x9d, 0x3e, 0x14, 0x41, 0x2c,
	0x3e, 0x0c, 0xee, 0x44, 0x10, 0xdf, 0xba, 0x5d, 0x4f, 0xe3, 0x6d, 0xad, 0xfc, 0xec, 0x5e, 0x7c,
	0x09, 0xb9, 0x12, 0xe7, 0xb8, 0x34, 0x1b, 0x49, 0x7a, 0xd0, 0x67, 0x5f, 0xfc, 0xb3, 0x65, 0x6d,
	0x27, 0x22, 0x87, 0x6f, 0xc9, 0xe7, 0xf7, 0xfd, 0x84, 0xe4, 0x4b, 0x60, 0x5a, 0x29, 0x7e, 0x23,
	0x75, 0xf9, 0xa3, 0x12, 0xe6, 0x96, 0x97, 0x3b, 0xfd, 0x7d, 0xbb, 0x99, 0xed, 0xcd, 0xce, 0xed,
	0xa8, 0x57, 0xa9, 0x97, 0xbf, 0x7c, 0x08, 0xe6, 0xc7, 0x31, 0x4a, 0x5b, 0x2b, 0x67, 0xe9, 0x39,
	0x0c, 0xad, 0x13, 0xae, 0xb6, 0x21, 0x89, 0x48, 0x3c, 0xba, 0x98, 0xce, 0x2a, 0x35, 0xfb, 0x2b,
	0xe5, 0x6a, 0xa3, 0xbf, 0xb6, 0x01, 0xec, 0x83, 0xf4, 0x35, 0x3c, 0x36, 0x9d, 0xcd, 0x2b, 0x69,
	0xad, 0xd8, 0xc8, 0xd0, 0x8b, 0x48, 0xfc, 0x10, 0x47, 0x3d, 0x5e, 0x75, 0x94, 0xbe, 0x82, 0x91,
	0xdb, 0x39, 0xa1, 0xb8, 0x28, 0xcb, 0xda, 0x88, 0xb2, 0x09, 0xfd, 0x88, 0xc4, 0x1e, 0x9e, 0xb6,
	0x34, 0xe9, 0x21, 0x7d, 0x07, 0x63, 0x71, 0x27, 0x8d, 0xd8, 0x48, 0xae, 0x84, 0x93, 0xba, 0x6c,
	0xf8, 0x56, 0xf3, 0xda, 0x86, 0x27, 0x11, 0x89, 0xfd, 0xb9, 0x17, 0x12, 0xa4, 0x7d, 0x60, 0xd9,
	0xcd, 0x99, 0x5e, 0x5b, 0xaa, 0xe1, 0x6c, 0x2f, 0x4d, 0x29, 0xb5, 0xdb, 0xaa, 0xa3, 0xb9, 0x95,
	0xb6, 0x77, 0x07, 0x91, 0x1f, 0x3f, 0xba, 0x38, 0xff, 0xe7, 0x35, 0xed, 0xf5, 0x66, 0x5f, 0xfe,
	0x68, 0xcb, 0xa3, 0x75, 0x38, 0x31, 0xd5, 0xce, 0x34, 0x38, 0xd9, 0xdf, 0x3f, 0x3d, 0xfb, 0x0c,
	0x2f, 0xfe, 0x27, 0xd2, 0x00, 0xfc, 0x5b, 0xd9, 0xb4, 0x35, 0x0e, 0xf0, 0xb0, 0xa4, 0xcf, 0x60,
	0x70, 0x27, 0x54, 0xdd, 0xd5, 0xe3, 0x63, 0xb7, 0xf9, 0xe0, 0xbd, 0x27, 0x6f, 0x7e, 0x12, 0x18,
	0xdf, 0x5b, 0x32, 0x1d, 0x82, 0x97, 0x5f, 0x07, 0x0f, 0xe8, 0x73, 0x98, 0xb0, 0x6c, 0x91, 0x23,
	0xa6, 0x8b, 0x82, 0x2f, 0xf2, 0xec, 0x8a, 0x7d, 0x5c, 0x63, 0x52, 0xb0, 0x3c, 0x0b, 0x08, 0x9d,
	0xc2, 0x98, 0x65, 0xac, 0x60, 0xc9, 0x92, 0x7d, 0x6b, 0x19, 0xbf, 0x4a, 0xd8, 0x32, 0xbd, 0x0c,
	0x3c, 0x3a, 0x81, 0xa7, 0xf3, 0x34, 0x5b, 0x7c, 0x5a, 0x25, 0x78, 0xcd, 0x0b, 0xb6, 0x4a, 0x2f,
	0x79, 0xbe, 0x2e, 0x02, 0x9f, 0x3e, 0x81, 0x53, 0x5c, 0x67, 0x07, 0xc2, 0x53, 0xc4, 0x1c, 0x83,
	0x93, 0x9b, 0x61, 0xfb, 0x37, 0xde, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x57, 0x83, 0x28, 0x7b,
	0x38, 0x02, 0x00, 0x00,
}
