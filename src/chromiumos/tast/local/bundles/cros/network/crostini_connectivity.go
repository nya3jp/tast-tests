// Copyright 2022 The ChromiumOS Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package network

import (
	"context"
	"net"
	"time"

	"chromiumos/tast/common/testexec"
	"chromiumos/tast/ctxutil"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/local/network/routing"
	"chromiumos/tast/testing"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         CrostiniConnectivity,
		LacrosStatus: testing.LacrosVariantUnneeded,
		Desc:         "Checks IPv4 and IPv6 connectivity inside penguin container",
		Contacts:     []string{"taoyl@google.com", "cros-networking@google.com"},
		Attr:         []string{"group:network"},
		SoftwareDeps: []string{"chrome", "vm_host"},
		HardwareDeps: crostini.CrostiniMinDiskSize,
		Params: []testing.Param{
			// Parameters generated by crostini_connectivity_test.go. DO NOT EDIT.
			{
				Name:              "buster",
				ExtraSoftwareDeps: []string{"dlc"},
				Fixture:           "crostiniBuster",
				Timeout:           10 * time.Minute,
			}, {
				Name:              "bullseye",
				ExtraSoftwareDeps: []string{"dlc"},
				Fixture:           "crostiniBullseye",
				Timeout:           10 * time.Minute,
			},
		},
	})
}

func CrostiniConnectivity(ctx context.Context, s *testing.State) {
	cont := s.FixtValue().(crostini.FixtureData).Cont

	// Use a shortened context for test operations to reserve time for cleanup.
	cleanupCtx := ctx
	ctx, cancel := ctxutil.Shorten(ctx, 10*time.Second)
	defer cancel()

	testEnv := routing.NewTestEnv()
	if err := testEnv.SetUp(ctx); err != nil {
		s.Fatal("Failed to set up routing test env: ", err)
	}
	defer func(ctx context.Context) {
		if err := testEnv.TearDown(ctx); err != nil {
			s.Error("Failed to tear down routing test env: ", err)
		}
	}(cleanupCtx)

	// Check if testEnv prefix propagated into Crostini, and log it for debugging.
	const addressPollTimeout = 5 * time.Second
	if err := testing.Poll(ctx, func(ctx context.Context) error {
		out, err := cont.Command(ctx, "/usr/bin/ip", "addr", "show", "scope", "global").Output(testexec.DumpLogOnError)
		if err != nil {
			return err
		}
		testing.ContextLog(ctx, "Crostini address information: ", string(out))
		return nil
	}, &testing.PollOptions{Timeout: addressPollTimeout}); err != nil {
		s.Fatal("Failed to get address information in Crostini: ", err)
	}

	// ping virtual router address and virtual server address from Crostini.
	routerAddrs, err := testEnv.BaseRouter.WaitForVethInAddrs(ctx, true, true)
	if err != nil {
		s.Fatal("Failed to get inner addrs from router env: ", err)
	}
	serverAddrs, err := testEnv.BaseServer.WaitForVethInAddrs(ctx, true, true)
	if err != nil {
		s.Fatal("Failed to get inner addrs from server env: ", err)
	}

	var pingAddrs []net.IP
	pingAddrs = append(pingAddrs, routerAddrs.IPv4Addr)
	pingAddrs = append(pingAddrs, serverAddrs.IPv4Addr)
	pingAddrs = append(pingAddrs, routerAddrs.IPv6Addrs...)
	pingAddrs = append(pingAddrs, serverAddrs.IPv6Addrs...)
	for _, ip := range pingAddrs {
		if output, err := cont.Command(ctx, "/bin/ping", "-c1", "-w1", ip.String()).Output(); err != nil {
			s.Errorf("Failed to ping %s from Crostini: output %s, %v", ip.String(), output, err)
		} else {
			testing.ContextLogf(ctx, "Succeeded to ping %s from Crostini", ip.String())
		}
	}

}
