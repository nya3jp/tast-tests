// Copyright 2021 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package cuj

// This file contains the generators for CUJ test parameters.
// CUJ tests generally require multiple sub-tests parameterized over
// different test scenarios. As these parameters could be complex
// and change over time, we use this file to manage CUJs and their
// sub-tests corresponding to different parameters.
//
// A CUJ test case parameter will have the following pattern:
// <tier>_<screen model>_<scenario>_<app name>_<app type>_<bluetooth>
// The first two parts defines the tire and screen model (whic could be
// clamshell or tablet). Other parts are optional.
// For example:
// - basic_clamshell_youtube_app
// - basic_clamshell_unlock
// - plus_tablet_netflix_web_bluetooth
// - premium_clamshell
//
// Usage:
//
// To generate test parameters for a CUJ test, you add a
// unit test file to that CUJ test, with the file name end in "_test.go".
// This file should contain a go unit test which calls makeCUJCaseParam()
// in this file and passes the generated param string to genparams.Ensure(),
// along with the name of the test file.
//
// By default, this unit test will ensure that the parameters in the
// test match up with the string generated by the unit tests. When
// run with TAST_GENERATE_UPDATE=1 set, it will instead update the
// parameters in the test file.

// go unit tests for CUJ can be run using the command
// ~/trunk/src/platform/tast/tools/go.sh test -count=1 chromiumos/tast/local/bundles/cros/ui
// parameter regeneration can be done with
// TAST_GENERATE_UPDATE=1 ~/trunk/src/platform/tast/tools/go.sh test -count=1 chromiumos/tast/local/bundles/cros/ui
//
// Tests using this generator will get two sub-tests for each given parameter set:
// a clamshell test for non-touchscreen, and a tablet test for touchscreen.
//
// Tests using this generator should specify test timeout value for each sub-test.
// Tests using this generator can specify test specific fixture for each sub-test.
//
// Any test which is controlled by a generator will have a comment
// above its test parameters indicating which file contains the
// relevant unit test. To modify the parameters, update the test and
// run the above command to regenerate the results.

import (
	"time"

	"chromiumos/tast/common/genparams"
)

// Tier defines the complexity level of a CUJ test scenario.
type Tier string

// Tier enum definition.
const (
	Basic   Tier = "basic"
	Plus         = "plus"
	Premium      = "premium"
)

// ApplicationType indicates the type of the application under test.
type ApplicationType string

// ApplicationType enum definition.
const (
	Web ApplicationType = "web"
	APP                 = "app"
)

// ScreenMode indicates the clamshell or tablet mode of the DUT.
type ScreenMode string

// ScreenMode enum definition.
const (
	Clamshell ScreenMode = "clamshell"
	Tablet               = "tablet"
)

// TestParameters is the parameters passed to each test case.
type TestParameters struct {
	// Tier indicates the tier the test case belongs to.
	Tier
	// Scenario sepcifies the major scenario of the test. E.g. "unlock", "wakeup".
	Scenario string
	// ApplicationName specifies the name of the main test application. E.g. youtube.
	ApplicationName string
	// ApplicationType specifies the type of the main test application.
	ApplicationType
	// EnableBT specifies if BlueTooth peripheral is needed for the test.
	EnableBT bool
	// ScreenMode defines the clamshell or tablet mode of the DUT.
	ScreenMode
}

// TestParam specifies how each set of CUJ tests should be generated.
type TestParam struct {
	// Tier indicates the tier the test case belongs to.
	Tier
	// Scenario sepcifies the major scenario of the test. E.g. "unlock", "wakeup".
	Scenario string
	// ApplicationName specifies the name of the main test application. E.g. youtube.
	ApplicationName string
	// ApplicationType specifies the type of the main test application.
	ApplicationType
	// EnableBT specifies if BlueTooth peripheral is needed for the test.
	EnableBT bool

	// Timeout indicates the timeout for this test case. If
	// unspecified, defaults to 10 * time.Minute.
	Timeout time.Duration
	// Fixture indicates the fixture used for this test case.
	Fixture string
}

type generatedParam struct {
	Name    string
	Fixture string
	Timeout time.Duration
	Val     TestParameters
}

const template = `
{{define "test-parameters-template"}}cuj.TestParameters{
	Tier:            "{{.Tier}}",
	ScreenMode:      "{{.ScreenMode}}",
	{{if .Scenario}}        Scenario:        "{{.Scenario}}",        {{end}}
	{{if .ApplicationName}} ApplicationName: "{{.ApplicationName}}", {{end}}
	{{if .ApplicationType}} ApplicationType: "{{.ApplicationType}}", {{end}}
	{{if .EnableBT}}        EnableBT:        {{.EnableBT}},          {{end}}
}{{end}}
{{range .}} {
	{{if .Name}}              Name:              {{fmt .Name}},                                             {{end}}
	{{if .Fixture}}           Fixture:           {{.Fixture}},                                              {{end}}
	{{if .Timeout}}           Timeout:           {{fmt .Timeout}},                                          {{end}}
	{{if .Val}}               Val:               {{template "test-parameters-template" .Val}},                        {{end}}                             
}, {{end}}`

func combineName(first, second string) string {
	if first == "" {
		return second
	}
	if second == "" {
		return first
	}
	return first + "_" + second
}

// MakeCUJCaseParam takes a list of CUJ TestParam definitions
// and generates a set of test parameters for each.
func MakeCUJCaseParam(t genparams.TestingT, params []TestParam) string {
	var result []generatedParam

	for _, testCase := range params {
		// cuj parameter name will follow this sequence:
		// <tier>_<screen model>_<scenario>_<app name>_<app type>_<bluetooth>
		nonTouchPrefix := combineName(string(testCase.Tier), "clamshell")
		touchPrefix := combineName(string(testCase.Tier), "tablet")
		name := testCase.Scenario
		if testCase.ApplicationName != "" {
			name = combineName(name, string(testCase.ApplicationName))
			name = combineName(name, string(testCase.ApplicationType))
		}
		if testCase.EnableBT {
			name = combineName(name, "bluetooth")
		}

		var timeout time.Duration
		if testCase.Timeout != time.Duration(0) {
			timeout = testCase.Timeout
		} else {
			timeout = 10 * time.Minute
		}

		// Two sub tests: one for touchscreen and one for non-touchscreen.
		testParamNonTouch := generatedParam{
			Name:    combineName(nonTouchPrefix, name),
			Fixture: testCase.Fixture,
			Timeout: timeout,
			Val: TestParameters{
				Tier:            testCase.Tier,
				ScreenMode:      Clamshell,
				Scenario:        testCase.Scenario,
				ApplicationName: testCase.ApplicationName,
				ApplicationType: testCase.ApplicationType,
				EnableBT:        testCase.EnableBT,
			},
		}
		testParamTouch := generatedParam{
			Name:    combineName(touchPrefix, name),
			Fixture: testCase.Fixture,
			Timeout: timeout,
			Val: TestParameters{
				Tier:            testCase.Tier,
				ScreenMode:      Tablet,
				Scenario:        testCase.Scenario,
				ApplicationName: testCase.ApplicationName,
				ApplicationType: testCase.ApplicationType,
				EnableBT:        testCase.EnableBT,
			},
		}
		result = append(result, testParamNonTouch, testParamTouch)

	}
	return genparams.Template(t, template, result)
}
