// Copyright 2021 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package ui

import (
	"context"
	"time"

	"chromiumos/tast/common/chameleon"
	"chromiumos/tast/local/bundles/cros/ui/cuj"
	"chromiumos/tast/local/bundles/cros/ui/videocuj"
	"chromiumos/tast/testing"
	"chromiumos/tast/testing/hwdep"
)

type extendedDisplayCUJParam struct {
	ApplicationName string
	ApplicationType cuj.ApplicationType
}

func init() {
	testing.AddTest(&testing.Test{
		Func:         ExtendedDisplayCUJ,
		Desc:         "Test video entertainment with extended display",
		Contacts:     []string{"vlin@cienet.com"},
		Attr:         []string{"group:crosbolt", "crosbolt_nightly"},
		SoftwareDeps: []string{"chrome", "arc"},
		HardwareDeps: hwdep.D(hwdep.InternalDisplay()),
		Fixture:      "loggedInToCUJUser",
		Vars: []string{
			"ui.netflix_username",
			"ui.netflix_password",
			"perf_level",
			"chameleon",
		},
		Params: []testing.Param{
			// Parameters generated by extended_display_cuj_test.go. DO NOT EDIT.
			{
				Name:    "plus_clamshell_video_netflix_web",
				Timeout: 10 * time.Minute,
				Val: cuj.TestParameters{
					Category: cuj.Category{
						Tier:       cuj.Plus,
						ScreenMode: cuj.Clamshell,
						Scenario:   "video",
					},
					Params: extendedDisplayCUJParam{
						ApplicationName: "netflix",
						ApplicationType: cuj.Web,
					},
				},
			}, {
				Name:    "plus_tablet_video_netflix_web",
				Timeout: 10 * time.Minute,
				Val: cuj.TestParameters{
					Category: cuj.Category{
						Tier:       cuj.Plus,
						ScreenMode: cuj.Tablet,
						Scenario:   "video",
					},
					Params: extendedDisplayCUJParam{
						ApplicationName: "netflix",
						ApplicationType: cuj.Web,
					},
				},
			},
		},
	})
}

// ExtendedDisplayCUJ ...
func ExtendedDisplayCUJ(ctx context.Context, s *testing.State) {
	param := s.Param().(cuj.TestParameters)
	s.Log("Entering ExtendedDisplay screeMode: ", param.Category.ScreenMode)
	tabletMode := param.Category.ScreenMode == cuj.Tablet
	app := videocuj.NetflixWeb

	cr := s.FixtValue().(cuj.FixtureData).Chrome
	a := s.FixtValue().(cuj.FixtureData).ARC
	chameleonAddr := s.RequiredVar("chameleon")

	che, err := chameleon.New(ctx, chameleonAddr)
	if err != nil {
		s.Fatal("Failed to connect to chameleon board: ", err)
	}

	che.Plug(ctx, 3)
	defer che.Unplug(ctx, 3)

	// Wait DUT detect external display
	if err := che.WaitVideoInputStable(ctx, 3, 10*time.Second); err != nil {
		s.Fatal("Failed to plug external display: ", err)
	}

	if param.Category.Scenario == "video" {
		videocuj.Run(ctx, s, cr, a, app, tabletMode, cuj.Plus, true)
	}
}
