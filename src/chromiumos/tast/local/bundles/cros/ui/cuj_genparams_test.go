// Copyright 2021 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package ui

// This file contains the generators for CUJ test parameters.
// CUJ tests generally require multiple sub-tests parameterized over
// different test scenarios. As these parameters could be complex
// and change over time, we use this file to manage CUJs and their
// sub-tests corresponding to different parameters.
//
// A CUJ test case parameter will have the following pattern:
// <tier>_<screen model>_<scenario>_<name_suffix>
// The first two parts defines the tier and screen model (which could be
// clamshell or tablet). Other parts are optional.
// For example:
// - basic_clamshell_youtube_app
// - basic_clamshell_unlock
// - plus_tablet_netflix_web_bluetooth
// - premium_clamshell
//
// Usage:
//
// To generate test parameters for a CUJ test, you add a
// unit test file to that CUJ test, with the file name end in "_test.go".
// This file should contain a go unit test which calls makeCUJCaseParam()
// in this file and passes the generated param string to genparams.Ensure(),
// along with the name of the test file.
//
// By default, this unit test will ensure that the parameters in the
// test match up with the string generated by the unit tests. When
// run with TAST_GENERATE_UPDATE=1 set, it will instead update the
// parameters in the test file.
//
// go unit tests for CUJ can be run using the command
// ~/trunk/src/platform/tast/tools/go.sh test -count=1 chromiumos/tast/local/bundles/cros/ui
// parameter regeneration can be done with
// TAST_GENERATE_UPDATE=1 ~/trunk/src/platform/tast/tools/go.sh test -count=1 chromiumos/tast/local/bundles/cros/ui
//
// Tests using this generator will get two sub-tests for each given parameter set:
// a clamshell test for non-touchscreen, and a tablet test for touchscreen.
//
// Tests using this generator should specify test timeout value for each sub-test.
// Tests using this generator can specify test specific fixture for each sub-test.
//
// Any test which is controlled by a generator will have a comment
// above its test parameters indicating which file contains the
// relevant unit test. To modify the parameters, update the test and
// run the above command to regenerate the results.

import (
	"time"

	"chromiumos/tast/common/genparams"
	"chromiumos/tast/errors"
	"chromiumos/tast/local/bundles/cros/ui/cuj"
)

// generatorParam specifies how each set of CUJ tests should be generated.
type generatorParam struct {
	// Tier indicates the tier the test case belongs to.
	Tier cuj.Tier
	// Scenario specifies the major scenario of the test. E.g. "unlock", "wakeup".
	Scenario string
	// NameSuffix is the test case name provided by the test and will be appended
	// to generated test parameter name.
	NameSuffix string
	// ValParams is a freeform value that will be assigned to cuj.TestParameters.Params
	// field. It can be retrieved from testing.State.Param().(cuj.TestParameters).Params
	// This string is inserted unmodified and unquoted into the generated test case code
	// as the test specific params for each test case.
	ValParams string

	// Timeout indicates the timeout for this test case. If unspecified,
	// defaults to 10 * time.Minute.
	Timeout time.Duration
	// Fixture indicates the fixture used for this test case.
	Fixture string
}

const good = "1"

type generatedParam struct {
	Name       string
	Fixture    string
	Timeout    time.Duration
	ScreenMode string
	Tier       string
	Scenario   string
	ValParams  string
}

const template = `{{range .}} {
	{{if .Name}}            Name:              {{fmt .Name}},                                            {{end}}
	{{if .Fixture}}         Fixture:           {{.Fixture}},                                             {{end}}
	{{if .Timeout}}         Timeout:           {{fmt .Timeout}},                                         {{end}}
	                        Val:               cuj.TestParameters{
								Category:          cuj.Category{
									Tier:              {{.Tier}},
									ScreenMode:        {{.ScreenMode}},
			{{if .Scenario}}		Scenario:          "{{.Scenario}}",									 {{end}}
								},
			{{if .ValParams}}	Params:      {{.Val}},                                                   {{end}}
							},
}, {{end}}`

func combineName(first, second string) string {
	if first == "" {
		return second
	}
	if second == "" {
		return first
	}
	return first + "_" + second
}

func tierConst(tier cuj.Tier) (string, error) {
	switch tier {
	case cuj.Basic:
		return "cuj.Basic", nil
	case cuj.Plus:
		return "cuj.Plus", nil
	case cuj.Premium:
		return "cuj.Premium", nil
	default:
		return "", errors.Errorf("unsupported cuj tier: %s", tier)
	}
}

func screenModeConst(m cuj.ScreenMode) (string, error) {
	switch m {
	case cuj.Clamshell:
		return "cuj.Clamshell", nil
	case cuj.Tablet:
		return "cuj.Tablet", nil
	default:
		return "", errors.Errorf("unsupported cuj screen mode: %s", m)
	}
}

// makeCUJCaseParam takes a list of CUJ TestParam definitions
// and generates a set of test parameters for each.
func makeCUJCaseParam(t genparams.TestingT, params []generatorParam) (string, error) {
	var result []generatedParam

	for _, testCase := range params {
		// cuj parameter name will follow this sequence:
		// <tier>_<screen model>_<scenario>_<name_suffix>
		nonTouchPrefix := combineName(string(testCase.Tier), "clamshell")
		touchPrefix := combineName(string(testCase.Tier), "tablet")
		name := combineName(testCase.Scenario, testCase.NameSuffix)

		var timeout time.Duration
		if testCase.Timeout != time.Duration(0) {
			timeout = testCase.Timeout
		} else {
			timeout = 10 * time.Minute
		}

		tierStr, err := tierConst(testCase.Tier)
		if err != nil {
			return "", err
		}
		clamshellMode, err := screenModeConst(cuj.Clamshell)
		if err != nil {
			return "", err
		}
		tabletMode, err := screenModeConst(cuj.Tablet)
		if err != nil {
			return "", err
		}
		// Two sub tests: one for touchscreen and one for non-touchscreen.
		testParamNonTouch := generatedParam{
			Name:       combineName(nonTouchPrefix, name),
			Fixture:    testCase.Fixture,
			Timeout:    timeout,
			Tier:       tierStr,
			ScreenMode: clamshellMode,
			Scenario:   testCase.Scenario,
			ValParams:  testCase.ValParams,
		}
		testParamTouch := generatedParam{
			Name:       combineName(touchPrefix, name),
			Fixture:    testCase.Fixture,
			Timeout:    timeout,
			Tier:       tierStr,
			ScreenMode: tabletMode,
			Scenario:   testCase.Scenario,
			ValParams:  testCase.ValParams,
		}
		result = append(result, testParamNonTouch, testParamTouch)

	}
	return genparams.Template(t, template, result), nil
}
