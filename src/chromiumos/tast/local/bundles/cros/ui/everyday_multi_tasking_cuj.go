// Copyright 2021 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package ui

import (
	"context"
	"time"

	"chromiumos/tast/local/bundles/cros/ui/cuj"
	et "chromiumos/tast/local/bundles/cros/ui/everydaymultitaskingcuj"
	"chromiumos/tast/testing"
	"chromiumos/tast/testing/hwdep"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         EverydayMultiTaskingCUJ,
		Desc:         "Measures the performance of everyday multi-tasking CUJ",
		Contacts:     []string{"xliu@cienet.com", "jane.yang@cienet.com"},
		Attr:         []string{"group:crosbolt", "crosbolt_nightly"},
		SoftwareDeps: []string{"android_p", "chrome"},
		HardwareDeps: hwdep.D(hwdep.InternalDisplay()),
		Vars: []string{
			"mute",
			"ui.bt_devicename",
		},
		Fixture: "loggedInToCUJUserKeepState",
		Data:    []string{"cca_ui.js"},
		Params: []testing.Param{
			// Parameters generated by everyday_multi_tasking_cuj_test.go. DO NOT EDIT.
			{
				Name:    "basic_clamshell_ytmusic",
				Timeout: 10 * time.Minute,
				Val: cuj.TestParameters{
					Tier:            "basic",
					ScreenMode:      "clamshell",
					ApplicationName: "ytmusic",
				},
			}, {
				Name:    "basic_tablet_ytmusic",
				Timeout: 10 * time.Minute,
				Val: cuj.TestParameters{
					Tier:            "basic",
					ScreenMode:      "tablet",
					ApplicationName: "ytmusic",
				},
			}, {
				Name:    "basic_clamshell_ytmusic_bluetooth",
				Timeout: 10 * time.Minute,
				Val: cuj.TestParameters{
					Tier:            "basic",
					ScreenMode:      "clamshell",
					ApplicationName: "ytmusic",
					EnableBT:        true,
				},
			}, {
				Name:    "basic_tablet_ytmusic_bluetooth",
				Timeout: 10 * time.Minute,
				Val: cuj.TestParameters{
					Tier:            "basic",
					ScreenMode:      "tablet",
					ApplicationName: "ytmusic",
					EnableBT:        true,
				},
			}, {
				Name:    "basic_clamshell_spotify_bluetooth",
				Timeout: 10 * time.Minute,
				Val: cuj.TestParameters{
					Tier:            "basic",
					ScreenMode:      "clamshell",
					ApplicationName: "spotify",
					EnableBT:        true,
				},
			}, {
				Name:    "basic_tablet_spotify_bluetooth",
				Timeout: 10 * time.Minute,
				Val: cuj.TestParameters{
					Tier:            "basic",
					ScreenMode:      "tablet",
					ApplicationName: "spotify",
					EnableBT:        true,
				},
			}, {
				Name:    "plus_clamshell_ytmusic",
				Timeout: 15 * time.Minute,
				Val: cuj.TestParameters{
					Tier:            "plus",
					ScreenMode:      "clamshell",
					ApplicationName: "ytmusic",
				},
			}, {
				Name:    "plus_tablet_ytmusic",
				Timeout: 15 * time.Minute,
				Val: cuj.TestParameters{
					Tier:            "plus",
					ScreenMode:      "tablet",
					ApplicationName: "ytmusic",
				},
			}, {
				Name:    "plus_clamshell_ytmusic_bluetooth",
				Timeout: 15 * time.Minute,
				Val: cuj.TestParameters{
					Tier:            "plus",
					ScreenMode:      "clamshell",
					ApplicationName: "ytmusic",
					EnableBT:        true,
				},
			}, {
				Name:    "plus_tablet_ytmusic_bluetooth",
				Timeout: 15 * time.Minute,
				Val: cuj.TestParameters{
					Tier:            "plus",
					ScreenMode:      "tablet",
					ApplicationName: "ytmusic",
					EnableBT:        true,
				},
			}, {
				Name:    "plus_clamshell_spotify_bluetooth",
				Timeout: 15 * time.Minute,
				Val: cuj.TestParameters{
					Tier:            "plus",
					ScreenMode:      "clamshell",
					ApplicationName: "spotify",
					EnableBT:        true,
				},
			}, {
				Name:    "plus_tablet_spotify_bluetooth",
				Timeout: 15 * time.Minute,
				Val: cuj.TestParameters{
					Tier:            "plus",
					ScreenMode:      "tablet",
					ApplicationName: "spotify",
					EnableBT:        true,
				},
			},
		},
	})
}

func EverydayMultiTaskingCUJ(ctx context.Context, s *testing.State) {
	param := s.Param().(cuj.TestParameters)
	tier := param.Tier
	tabletMode := param.ScreenMode == cuj.Tablet
	enableBT := param.EnableBT
	appName := s.Param().(cuj.TestParameters).ApplicationName

	app := et.YoutubeMusic
	if appName == "spotify" {
		app = et.Spotify
	}
	cr := s.FixtValue().(cuj.FixtureData).Chrome
	a := s.FixtValue().(cuj.FixtureData).ARC
	et.Run(ctx, s, cr, a, tier, app, tabletMode, enableBT)
}
