// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package hal3

// TestConfig is the config for HAL3 tests.
type TestConfig struct {
	// CameraHALs is an list of camera HALs to test, such as "usb".  If
	// unspecified, all available camera HALs would be tested.
	CameraHALs []string
	// CameraFacing is the facing of the camera to test, such as "front" or
	// "back".  This field and CameraHALs are mutually exclusive.
	CameraFacing string
	// GtestFilter would be passed to cros_camera_test as the value of
	// --gtest_filter command line switch.
	GtestFilter string
	// GeneratePerfLog describes whether the performance log file should be
	// generated by cros_camera_test.
	GeneratePerfLog bool
	// RequireRecordingParams describes whether the recording parameters should
	// be generated for cros_camera_test.
	RequireRecordingParams bool
	// ForceJPEGHWEnc is the flag to enforce hardware encode for JPEG, so it
	// won't fall back to SW encode when the HW encode failed.
	ForceJPEGHWEnc bool
	// ForceJPEGHWDec is the flag to enforce hardware decode for JPEG, so it
	// won't fall back to SW decode when the HW decode failed.
	ForceJPEGHWDec bool
	// OutDir is where the test result will be written into.
	OutDir string
}

// DeviceTestConfig returns test config for running HAL3Device test.
func DeviceTestConfig(outDir string) TestConfig {
	return TestConfig{
		GtestFilter: "Camera3DeviceTest/*",
		OutDir:      outDir,
	}
}

// FrameTestConfig returns test config for running HAL3Frame test.
func FrameTestConfig(outDir string) TestConfig {
	return TestConfig{
		GtestFilter: "Camera3FrameTest/*",
		OutDir:      outDir,
	}
}

// JDATestConfig returns test config for running HAL3JDA test.
func JDATestConfig(outDir string) TestConfig {
	return TestConfig{
		CameraHALs:     []string{"usb"},
		GtestFilter:    "*/Camera3SingleFrameTest.GetFrame/0",
		ForceJPEGHWDec: true,
		OutDir:         outDir,
	}
}

// JEATestConfig returns test config for running HAL3JEA test.
func JEATestConfig(outDir string) TestConfig {
	return TestConfig{
		CameraHALs:     []string{"usb"},
		GtestFilter:    "*/Camera3SimpleStillCaptureTest.TakePictureTest/0",
		ForceJPEGHWEnc: true,
		OutDir:         outDir,
	}
}

// ModuleTestConfig returns test config for running HAL3Module test.
func ModuleTestConfig(outDir string) TestConfig {
	return TestConfig{
		GtestFilter:            "Camera3ModuleFixture.*",
		RequireRecordingParams: true,
		OutDir:                 outDir,
	}
}

// PerfTestConfig returns test config for running HAL3Perf test.
func PerfTestConfig(outDir string) TestConfig {
	return TestConfig{
		GtestFilter:     "Camera3StillCaptureTest/Camera3SimpleStillCaptureTest.PerformanceTest/*",
		GeneratePerfLog: true,
		OutDir:          outDir,
	}
}

// PreviewTestConfig returns test config for running HAL3Preview test.
func PreviewTestConfig(outDir string) TestConfig {
	return TestConfig{
		GtestFilter: "Camera3PreviewTest/*",
		OutDir:      outDir,
	}
}

// RecordingTestConfig returns test config for running HAL3Recording test.
func RecordingTestConfig(outDir string) TestConfig {
	return TestConfig{
		GtestFilter:            "Camera3RecordingFixture/*",
		RequireRecordingParams: true,
		OutDir:                 outDir,
	}
}

// StillCaptureTestConfig returns test config for running HAL3StillCapture test.
func StillCaptureTestConfig(outDir string) TestConfig {
	return TestConfig{
		GtestFilter: "Camera3StillCaptureTest/*",
		OutDir:      outDir,
	}
}

// StreamTestConfig returns test config for running HAL3Stream test.
func StreamTestConfig(outDir string) TestConfig {
	return TestConfig{
		GtestFilter: "Camera3StreamTest/*",
		OutDir:      outDir,
	}
}
