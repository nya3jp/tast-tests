// Copyright 2022 The ChromiumOS Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"context"
	"time"

	"chromiumos/tast/common/testexec"
	"chromiumos/tast/ctxutil"
	"chromiumos/tast/local/chrome/uiauto"
	"chromiumos/tast/local/chrome/uiauto/faillog"
	"chromiumos/tast/local/chrome/uiauto/filesapp"
	"chromiumos/tast/local/chrome/uiauto/nodewith"
	"chromiumos/tast/local/chrome/uiauto/role"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/local/screenshot"
	"chromiumos/tast/testing"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         AppVscodeFromFileManager,
		LacrosStatus: testing.LacrosVariantUnneeded,
		Desc:         "Launches Visual Studio Code from File Manager",
		Contacts:     []string{"sophialin@google.com", "clumptini@google.com"},
		Attr:         []string{"group:mainline", "informational"},
		Vars:         screenshot.ScreenDiffVars,
		SoftwareDeps: []string{"chrome", "vm_host", "amd64"},
		Params: []testing.Param{
			// Parameters generated by params_test.go. DO NOT EDIT.
			{
				Name:              "tablet_stable",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniAppStable,
				Fixture:           "crostiniBusterLargeContainerTablet",
				Timeout:           15 * time.Minute,
			}, {
				Name:              "tablet_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniAppUnstable,
				Fixture:           "crostiniBusterLargeContainerTablet",
				Timeout:           15 * time.Minute,
			}, {
				Name:              "clamshell_stable",
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniAppStable,
				Fixture:           "crostiniBusterLargeContainerClamshell",
				Timeout:           15 * time.Minute,
			}, {
				Name:              "clamshell_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniAppUnstable,
				Fixture:           "crostiniBusterLargeContainerClamshell",
				Timeout:           15 * time.Minute,
			},
		},
	})
}
func AppVscodeFromFileManager(ctx context.Context, s *testing.State) {
	const (
		tmpFilename           = "testfile.txt"
		vscodeContextMenuItem = "Visual Studio Code"
	)

	tconn := s.FixtValue().(crostini.FixtureData).Tconn
	cr := s.FixtValue().(crostini.FixtureData).Chrome
	cont := s.FixtValue().(crostini.FixtureData).Cont

	// Use a shortened context for test operations to reserve time for cleanup.
	cleanupCtx := ctx
	ctx, cancel := ctxutil.Shorten(ctx, 5*time.Second)
	defer cancel()

	// Open Files app.
	filesApp, err := filesapp.Launch(ctx, tconn)
	if err != nil {
		s.Fatal("Failed to open Files app: ", err)
	}
	defer filesApp.Close(cleanupCtx)
	defer faillog.DumpUITreeWithScreenshotOnError(cleanupCtx, s.OutDir(), s.HasError, cr, "ui_tree")

	// Create a file in container.
	if err := cont.Command(ctx, "touch", tmpFilename).Run(testexec.DumpLogOnError); err != nil {
		s.Fatal("Failed to create a file in the container: ", err)
	}

	// Right click and launch vscode through context menu
	vscodeWindow := nodewith.NameContaining(tmpFilename).Role(role.Window).First()
	ui := uiauto.New(tconn)

	// Open tmp file with vscode.
	err = uiauto.Combine("open tmp file with vscode via files app",
		filesApp.OpenLinuxFiles(),
		filesApp.ClickContextMenuItemRegex(tmpFilename, filesapp.OpenWith, vscodeContextMenuItem),
		ui.WaitUntilExists(vscodeWindow),
	)(ctx)
	if err != nil {
		s.Fatal("Failed to open tmp file in the vscode: ", err)
	}
}
