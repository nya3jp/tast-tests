// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"context"
	"os"
	"time"

	"chromiumos/tast/common/testexec"
	"chromiumos/tast/ctxutil"
	"chromiumos/tast/errors"
	"chromiumos/tast/local/chrome/uiauto"
	"chromiumos/tast/local/chrome/uiauto/filesapp"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/local/cryptohome"
	"chromiumos/tast/local/input"
	"chromiumos/tast/local/vm"
	"chromiumos/tast/testing"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         HomeDirectoryRenameFile,
		Desc:         "Test renaming a file in Linux files and container using a pre-built crostini image",
		Contacts:     []string{"jinrongwu@google.com", "cros-containers-dev@google.com"},
		Attr:         []string{"group:mainline", "informational"},
		Vars:         []string{"keepState"},
		VarDeps:      []string{"ui.gaiaPoolDefault"},
		SoftwareDeps: []string{"chrome", "vm_host"},
		Params: []testing.Param{
			// Parameters generated by params_test.go. DO NOT EDIT.
			{
				Name:              "stretch_stable",
				ExtraData:         []string{crostini.GetContainerMetadataArtifact("stretch", false), crostini.GetContainerRootfsArtifact("stretch", false)},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Pre:               crostini.StartedByDlcStretch(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "stretch_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{crostini.GetContainerMetadataArtifact("stretch", false), crostini.GetContainerRootfsArtifact("stretch", false)},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Pre:               crostini.StartedByDlcStretch(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "buster_stable",
				ExtraData:         []string{crostini.GetContainerMetadataArtifact("buster", false), crostini.GetContainerRootfsArtifact("buster", false)},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Pre:               crostini.StartedByDlcBuster(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "buster_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{crostini.GetContainerMetadataArtifact("buster", false), crostini.GetContainerRootfsArtifact("buster", false)},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Pre:               crostini.StartedByDlcBuster(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "bullseye_stable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{crostini.GetContainerMetadataArtifact("bullseye", false), crostini.GetContainerRootfsArtifact("bullseye", false)},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Pre:               crostini.StartedByDlcBullseye(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "bullseye_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{crostini.GetContainerMetadataArtifact("bullseye", false), crostini.GetContainerRootfsArtifact("bullseye", false)},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Pre:               crostini.StartedByDlcBullseye(),
				Timeout:           7 * time.Minute,
			},
		},
	})
}

func HomeDirectoryRenameFile(ctx context.Context, s *testing.State) {
	tconn := s.PreValue().(crostini.PreData).TestAPIConn
	cont := s.PreValue().(crostini.PreData).Container
	cr := s.PreValue().(crostini.PreData).Chrome
	kb := s.PreValue().(crostini.PreData).Keyboard
	defer crostini.RunCrostiniPostTest(ctx, s.PreValue().(crostini.PreData))

	// Use a shortened context for test operations to reserve time for cleanup.
	cleanupCtx := ctx
	ctx, cancel := ctxutil.Shorten(ctx, 90*time.Second)
	defer cancel()

	// Open Files app.
	filesApp, err := filesapp.Launch(ctx, tconn)
	if err != nil {
		s.Fatal("Failed to open Files app: ", err)
	}
	defer filesApp.Close(cleanupCtx)

	const (
		fileName     = "testRename.txt"
		newFileName  = "someotherdgsjtey"
		lastFileName = "lastFileName.txt"
	)

	// Create a file in container.
	if err := cont.Command(ctx, "touch", fileName).Run(testexec.DumpLogOnError); err != nil {
		s.Fatal("Failed to create a file in the container: ", err)
	}

	if err := testRenameFileFromLinuxFiles(ctx, filesApp, cont, kb, fileName, newFileName); err != nil {
		s.Fatal("Failed to test Renaming files in Linux files: ", err)
	}

	ownerID, err := cryptohome.UserHash(ctx, cr.NormalizedUser())
	if err != nil {
		s.Fatal("Failed to get user hash: ", err)
	}
	folderPath := "/media/fuse/crostini_" + ownerID + "_termina_penguin/"

	if err := testRenameFileFromContainer(ctx, cont, folderPath, newFileName, lastFileName); err != nil {
		s.Fatal("Failed to test Renaming files in container: ", err)
	}
}

// testRenameFileFromLinuxFiles first renames a file in Linux file then checks it is also renamed in container.
func testRenameFileFromLinuxFiles(ctx context.Context, filesApp *filesapp.FilesApp, cont *vm.Container, kb *input.KeyboardEventWriter, fileName, newFileName string) error {
	// Rename a file in Linux files.
	if err := uiauto.Combine("Rename file", filesApp.OpenLinuxFiles(), filesApp.RenameFile(kb, fileName, newFileName))(ctx); err != nil {
		return errors.Wrapf(err, "failed to rename file %s in Linux files", fileName)
	}

	// Check the old file does not exist in container.
	return testing.Poll(ctx, func(ctx context.Context) error {
		if err := cont.CheckFileDoesNotExistInDir(ctx, ".", fileName); err != nil {
			return err
		}
		return cont.CheckFilesExistInDir(ctx, ".", newFileName)
	}, &testing.PollOptions{Timeout: 5 * time.Second})
}

// testRenameFileFromContainer first renames a file in container then checks it is also renamed in Linux files.
func testRenameFileFromContainer(ctx context.Context, cont *vm.Container, folderPath, fileName, newFileName string) error {
	// Rename a file in container.
	if err := cont.Command(ctx, "mv", fileName, newFileName).Run(testexec.DumpLogOnError); err != nil {
		return errors.Wrapf(err, "failed to rename file %s in container", fileName)
	}

	if err := testing.Poll(ctx, func(ctx context.Context) error {
		// The old file should not exist in Linux files.
		if _, err := os.Stat(folderPath + fileName); !os.IsNotExist(err) {
			return errors.Wrapf(err, "file %s still exists", folderPath+fileName)
		}
		// The new file should exist in Linux files.
		if _, err := os.Stat(folderPath + newFileName); err != nil {
			return errors.Wrapf(err, "file %s does not exist", folderPath+newFileName)
		}
		return nil
	}, &testing.PollOptions{Timeout: 5 * time.Second}); err != nil {
		return err
	}
	return nil
}
