// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"context"
	"reflect"
	"time"

	"chromiumos/tast/ctxutil"
	"chromiumos/tast/local/arc/optin"
	"chromiumos/tast/local/chrome/uiauto"
	"chromiumos/tast/local/chrome/uiauto/filesapp"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/local/crostini/ui/settings"
	"chromiumos/tast/local/crostini/ui/sharedfolders"
	"chromiumos/tast/testing"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         ShareMovies,
		LacrosStatus: testing.LacrosVariantUnneeded,
		Desc:         "Test sharing Play files > Movies with Crostini",
		Contacts:     []string{"jinrongwu@google.com", "cros-containers-dev@google.com"},
		Attr:         []string{"group:mainline", "informational"},
		SoftwareDeps: []string{"chrome", "vm_host"},
		Params: []testing.Param{
			// Parameters generated by params_test.go. DO NOT EDIT.
			{
				Name:              "buster_stable_gaia",
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Fixture:           "crostiniBusterGaia",
				Timeout:           7 * time.Minute,
			}, {
				Name:              "buster_unstable_gaia",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Fixture:           "crostiniBusterGaia",
				Timeout:           7 * time.Minute,
			}, {
				Name:              "bullseye_stable_gaia",
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Fixture:           "crostiniBullseyeGaia",
				Timeout:           7 * time.Minute,
			}, {
				Name:              "bullseye_unstable_gaia",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Fixture:           "crostiniBullseyeGaia",
				Timeout:           7 * time.Minute,
			},
		},
	})
}

func ShareMovies(ctx context.Context, s *testing.State) {
	tconn := s.FixtValue().(crostini.FixtureData).Tconn
	cont := s.FixtValue().(crostini.FixtureData).Cont
	cr := s.FixtValue().(crostini.FixtureData).Chrome

	// Use a shortened context for test operations to reserve time for cleanup.
	cleanupCtx := ctx
	ctx, cancel := ctxutil.Shorten(ctx, 5*time.Second)
	defer cancel()

	// Show Play files.
	// It is necessary to call optin.Perform and optin.WaitForPlayStoreShown to make sure that Play files is shown.
	maxAttempts := 2
	if err := optin.PerformWithRetry(ctx, cr, maxAttempts); err != nil {
		s.Fatal("Failed to optin to Play Store: ", err)
	}
	if err := optin.WaitForPlayStoreShown(ctx, tconn, 2*time.Minute); err != nil {
		s.Fatal("Failed to wait for Play Store: ", err)
	}
	// The PlayStore app restarts itself at the end. We need to wait for this to happen before opening the Files
	// app, or otherwise PlayStore window may reopen on top of Files app and cause the test to fail.
	// We may as well close PlayStore at this point as it is no longer required. The PlayStore restarting itself
	// was measured to take ~1.5 seconds, but the "optin.ClosePlayStore(ctx, tconn)" call waits for PlayStore to
	// be open anyway, before closing it.
	testing.Sleep(ctx, 2*time.Second)
	optin.ClosePlayStore(ctx, tconn)

	sharedFolders := sharedfolders.NewSharedFolders(tconn)
	// Unshare shared folders in the end.
	defer func() {
		if err := sharedFolders.UnshareAll(cont, cr)(cleanupCtx); err != nil {
			s.Error("Failed to unshare all folders: ", err)
		}
	}()

	// Open Files app.
	filesApp, err := filesapp.Launch(ctx, tconn)
	if err != nil {
		s.Fatal("Failed to open Files app: ", err)
	}

	const Movies = "Movies"
	if err := uiauto.Combine("open Play files and click Manage with Linux on Movies",
		filesApp.OpenPlayfiles(),
		filesApp.ClickContextMenuItem(Movies, sharedfolders.ShareWithLinux),
		sharedFolders.AddFolder(filesapp.Playfiles+" › "+Movies))(ctx); err != nil {
		s.Fatal("Failed to share Movies with Crostini: ", err)
	}

	// Verify on Settings.
	st, err := settings.OpenLinuxSettings(ctx, tconn, cr, settings.ManageSharedFolders)
	if err != nil {
		s.Fatal("Failed to open Manage shared folders: ", err)
	}
	shared, err := st.GetSharedFolders(ctx)
	if err != nil {
		s.Fatal("Failed to find the shared folders list: ", err)
	}
	if want := []string{filesapp.Playfiles + " › " + Movies}; !reflect.DeepEqual(shared, want) {
		s.Fatalf("Failed to verify shared folders list, got %s, want %s", shared, want)
	}

	// Verify inside Crostini.
	if list, err := cont.GetFileList(ctx, sharedfolders.MountPath); err != nil {
		s.Fatalf("Failed to get file list of %s: %s", sharedfolders.MountPath, err)
	} else if want := []string{"fonts", sharedfolders.MountFolderPlay}; !reflect.DeepEqual(list, want) {
		s.Fatalf("Failed to verify file list in /mnt/chromeos, got %s, want %s", list, want)
	}

	if list, err := cont.GetFileList(ctx, sharedfolders.MountPathPlay); err != nil {
		s.Fatalf("Failed to get file list of %s: %s", sharedfolders.MountPathPlay, err)
	} else if want := []string{Movies}; !reflect.DeepEqual(list, want) {
		s.Fatalf("Failed to verify file list in /mnt/chromeos/PlayFiles, got %s, want %s", list, want)
	}
}
