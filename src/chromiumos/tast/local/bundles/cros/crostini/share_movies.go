// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"context"
	"reflect"
	"time"

	"chromiumos/tast/ctxutil"
	"chromiumos/tast/errors"
	"chromiumos/tast/local/arc/optin"
	"chromiumos/tast/local/chrome/uiauto"
	"chromiumos/tast/local/chrome/uiauto/filesapp"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/local/crostini/ui/settings"
	"chromiumos/tast/local/crostini/ui/sharedfolders"
	"chromiumos/tast/local/vm"
	"chromiumos/tast/testing"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         ShareMovies,
		LacrosStatus: testing.LacrosVariantUnneeded,
		Desc:         "Test sharing Play files > Movies with Crostini",
		Contacts:     []string{"clumptini+oncall@google.com"},
		Attr:         []string{"group:mainline"},
		SoftwareDeps: []string{"chrome", "vm_host"},
		Params: []testing.Param{
			// Parameters generated by params_test.go. DO NOT EDIT.
			{
				Name:              "buster_stable_gaia",
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Fixture:           "crostiniBusterGaia",
				Timeout:           7 * time.Minute,
			}, {
				Name:              "buster_unstable_gaia",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Fixture:           "crostiniBusterGaia",
				Timeout:           7 * time.Minute,
			}, {
				Name:              "bullseye_stable_gaia",
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Fixture:           "crostiniBullseyeGaia",
				Timeout:           7 * time.Minute,
			}, {
				Name:              "bullseye_unstable_gaia",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Fixture:           "crostiniBullseyeGaia",
				Timeout:           7 * time.Minute,
			},
		},
	})
}

func ShareMovies(ctx context.Context, s *testing.State) {
	tconn := s.FixtValue().(crostini.FixtureData).Tconn
	cont := s.FixtValue().(crostini.FixtureData).Cont
	cr := s.FixtValue().(crostini.FixtureData).Chrome

	// Use a shortened context for test operations to reserve time for cleanup.
	cleanupCtx := ctx
	ctx, cancel := ctxutil.Shorten(ctx, 10*time.Second)
	defer cancel()

	// Show Play files.
	if err := optin.PerformAndClose(ctx, cr, tconn); err != nil {
		s.Fatal("Failed to optin to Play Store: ", err)
	}
	defer func(ctx context.Context) {
		if err := optin.SetPlayStoreEnabled(ctx, tconn, false); err != nil {
			s.Error("Failed to opt out of Play Store: ", err)
		}
	}(cleanupCtx)

	sharedFolders := sharedfolders.NewSharedFolders(tconn)
	// Unshare shared folders in the end.
	defer func(ctx context.Context) {
		if err := sharedFolders.UnshareAll(cont, cr)(ctx); err != nil {
			s.Error("Failed to unshare all folders: ", err)
		}
	}(cleanupCtx)

	// Open Files app.
	filesApp, err := filesapp.Launch(ctx, tconn)
	if err != nil {
		s.Fatal("Failed to open Files app: ", err)
	}
	defer filesApp.Close(cleanupCtx)

	const Movies = "Movies"
	if err := uiauto.Combine("open Play files and click Manage with Linux on Movies",
		filesApp.OpenPlayfiles(),
		filesApp.ClickContextMenuItem(Movies, sharedfolders.ShareWithLinux),
		sharedFolders.AddFolder(filesapp.Playfiles+" › "+Movies))(ctx); err != nil {
		s.Fatal("Failed to share Movies with Crostini: ", err)
	}

	// Verify on Settings.
	st, err := settings.OpenLinuxSettings(ctx, tconn, cr, settings.ManageSharedFolders)
	if err != nil {
		s.Fatal("Failed to open Manage shared folders: ", err)
	}
	defer st.Close(cleanupCtx)

	shared, err := st.GetSharedFolders(ctx)
	if err != nil {
		s.Fatal("Failed to find the shared folders list: ", err)
	}
	if want := []string{filesapp.Playfiles + " › " + Movies}; !reflect.DeepEqual(shared, want) {
		s.Fatalf("Failed to verify shared folders list, got %s, want %s", shared, want)
	}

	// Verify inside Crostini.
	if err := verifyContainerFiles(
		ctx, cont, sharedfolders.MountPath, []string{"fonts", sharedfolders.MountFolderPlay},
	); err != nil {
		s.Fatal("Failed to verify container root files: ", err)
	}

	if err := verifyContainerFiles(
		ctx, cont, sharedfolders.MountPathPlay, []string{Movies},
	); err != nil {
		s.Fatal("Failed to verify container play files: ", err)
	}
}

func verifyContainerFiles(ctx context.Context, cont *vm.Container, path string, wantFiles []string) error {
	return testing.Poll(ctx, func(ctx context.Context) error {
		if list, err := cont.GetFileList(ctx, path); err != nil {
			return errors.Wrapf(err, "failed to get file list of %s", path)
		} else if !reflect.DeepEqual(list, wantFiles) {
			return errors.Wrapf(err, "failed to verify file list in %s, got %s, want %s", path, list, wantFiles)
		}
		return nil

	}, &testing.PollOptions{Timeout: 30 * time.Second, Interval: 5 * time.Second})
}
