// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"context"
	"strings"
	"time"

	"chromiumos/tast/common/testexec"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/testing"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         SharedFontFiles,
		LacrosStatus: testing.LacrosVariantUnneeded,
		Desc:         "Checks that the hostOS font files are shared with the guestOS and they are accessible",
		Contacts:     []string{"matterchen@google.com", "cros-containers-dev@google.com"},
		Attr:         []string{"group:mainline"},
		SoftwareDeps: []string{"chrome", "vm_host"},
		Params: []testing.Param{
			// Parameters generated by params_test.go. DO NOT EDIT.
			{
				Name:              "buster_stable",
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Fixture:           "crostiniBuster",
				Timeout:           7 * time.Minute,
			}, {
				Name:              "buster_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Fixture:           "crostiniBuster",
				Timeout:           7 * time.Minute,
			}, {
				Name:              "bullseye_stable",
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Fixture:           "crostiniBullseye",
				Timeout:           7 * time.Minute,
			}, {
				Name:              "bullseye_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Fixture:           "crostiniBullseye",
				Timeout:           7 * time.Minute,
			},
		},
	})
}

func SharedFontFiles(ctx context.Context, s *testing.State) {
	pre := s.FixtValue().(crostini.FixtureData)
	cont := pre.Cont

	const sharedFonts = "/mnt/chromeos/fonts"
	const sharedFontsAlt = "/usr/share/fonts/chromeos"
	s.Log("1. Verifying mounted fonts dir exists")

	cmd := cont.Command(ctx, "ls", sharedFonts)
	if outBytes, err := cmd.Output(testexec.DumpLogOnError); err != nil {
		s.Fatal("Failed to list fonts directory : ", err)
	} else if len(outBytes) == 0 {
		s.Fatal("Fonts directory is empty")
	}

	s.Log("2. Verifying one of the available fonts comes from mounted fonts dir")
	cmd = cont.Command(ctx, "fc-list")
	if outBytes, err := cmd.Output(testexec.DumpLogOnError); err != nil {
		s.Fatal("Failed to call fc-list : ", err)
	} else {
		outString := string(outBytes)
		// TODO(jamesye): Due to b/206887557 fonts will be bind-mounted at
		// /usr/share/fonts/chromeos. The /mnt/chromeos/fonts path will not
		// appear after a container uprev including crrev.com/c/3539407.
		if !(strings.Contains(outString, sharedFonts) || strings.Contains(outString, sharedFontsAlt)) {
			s.Fatal("Host fonts not part of font-config path")
		}
	}
}
