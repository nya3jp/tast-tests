// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"context"
	"strconv"
	"time"

	"chromiumos/tast/common/testexec"
	"chromiumos/tast/local/audio/crastestclient"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/testing"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         AudioPlaybackConfigurations,
		LacrosStatus: testing.LacrosVariantUnneeded,
		Desc:         "Tests different channel number on the container's audio (through alsa) using a pre-built crostini image",
		Contacts:     []string{"judyhsiao@chromium.org", "cros-containers-dev@google.com", "chromeos-audio-bugs@google.com"},
		Attr:         []string{"group:mainline", "informational"},
		SoftwareDeps: []string{"chrome", "vm_host"},
		Params: []testing.Param{
			// Parameters generated by params_test.go. DO NOT EDIT.
			{
				Name:              "buster_stable",
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Fixture:           "crostiniBuster",
				Timeout:           7 * time.Minute,
			}, {
				Name:              "buster_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Fixture:           "crostiniBuster",
				Timeout:           7 * time.Minute,
			}, {
				Name:              "bullseye_stable",
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Fixture:           "crostiniBullseye",
				Timeout:           7 * time.Minute,
			}, {
				Name:              "bullseye_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Fixture:           "crostiniBullseye",
				Timeout:           7 * time.Minute,
			},
		},
	})
}

// AudioPlaybackConfigurations tests audio playback with varies channel count and sample rate.
func AudioPlaybackConfigurations(ctx context.Context, s *testing.State) {
	const (
		noStreamsTimeout  = 20 * time.Second
		hasStreamsTimeout = 10 * time.Second
	)

	cont := s.FixtValue().(crostini.FixtureData).Cont

	// Use systemctl to control pulseaudio service
	s.Log("stop pulseaudio service")
	if err := cont.Command(ctx, "systemctl", " --user", "stop", "pulseaudio").Run(testexec.DumpLogOnError); err != nil {
		s.Fatal("Fail to stop pulseaudio: ", err)
	}

	rates := []uint32{8000, 11025, 16000, 22050, 32000, 44100, 48000}
	channels := []uint8{2, 4, 6}
	for _, ch := range channels {
		for _, rate := range rates {
			s.Logf("Playback with %d channels, %d Hz", ch, rate)

			s.Log("Wait for all streams to stop")
			if err := crastestclient.WaitForNoStream(ctx, noStreamsTimeout); err != nil {
				s.Fatal("timeout waiting all streams stopped")
			}

			// Starts a goroutine to poll the audio streams created by aplay.
			resCh := crastestclient.StartPollStreamWorker(ctx, hasStreamsTimeout)
			if err := cont.Command(ctx, "aplay", "-r", strconv.Itoa(int(rate)), "-D", "hw:0,0", "-c", strconv.Itoa(int(ch)), "-f", "S16_LE", "-d", "5", "/dev/zero").Run(testexec.DumpLogOnError); err != nil {
				s.Fatalf("Failed to playback with %d channel %d Hz: %v", ch, rate, err)
			}
			// verifying poll stream result.
			res := <-resCh
			if res.Error != nil {
				s.Fatal("Failed to poll streams: ", res.Error)
			}
			if len(res.Streams) != 1 {
				s.Fatalf("Unexpected number of streams: got %d, expect 1", len(res.Streams))
			}
			// Verifies the channel number.
			if res.Streams[0].NumChannels != ch {
				s.Fatalf("Unexpected channel number: got %d, want %d", res.Streams[0].NumChannels, ch)
			}
			// Verifies the sample rate.
			if res.Streams[0].FrameRate != rate {
				s.Fatalf("Unexpected sample rate: got %d, want %d", res.Streams[0].FrameRate, rate)
			}
		}
	}
}
