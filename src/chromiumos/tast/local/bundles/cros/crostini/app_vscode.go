// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"context"
	"fmt"
	"strings"
	"time"

	"chromiumos/tast/ctxutil"
	"chromiumos/tast/errors"
	"chromiumos/tast/local/chrome"
	"chromiumos/tast/local/chrome/uiauto"
	"chromiumos/tast/local/chrome/uiauto/faillog"
	"chromiumos/tast/local/chrome/uiauto/nodewith"
	"chromiumos/tast/local/chrome/uiauto/role"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/local/crostini/ui/terminalapp"
	"chromiumos/tast/local/input"
	"chromiumos/tast/local/screenshot"
	"chromiumos/tast/local/uidetection"
	"chromiumos/tast/local/vm"
	"chromiumos/tast/testing"
)

// https://stackoverflow.com/questions/45033015/how-do-i-turn-off-notifications-globally-in-visual-studio-code.
const disableNotificationsCommand = `cat << EOF >> /usr/share/code/resources/app/out/vs/workbench/workbench.desktop.main.css
.monaco-workbench > .notifications-toasts.visible {
  display: none;
}

.notifications-toasts {
  display: none;
}
EOF
`

func init() {
	testing.AddTest(&testing.Test{
		Func:         AppVscode,
		LacrosStatus: testing.LacrosVariantUnneeded,
		Desc:         "Test Visual Studio Code in Terminal window",
		Contacts:     []string{"jinrongwu@google.com", "cros-containers-dev@google.com"},
		Attr:         []string{"group:mainline", "informational"},
		Vars:         screenshot.ScreenDiffVars,
		SoftwareDeps: []string{"chrome", "vm_host", "amd64"},
		Params: []testing.Param{
			// Parameters generated by params_test.go. DO NOT EDIT.
			{
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniAppTest,
				Fixture:           "crostiniBusterLargeContainer",
				Timeout:           15 * time.Minute,
			},
		},
	})
}
func AppVscode(ctx context.Context, s *testing.State) {
	tconn := s.FixtValue().(crostini.FixtureData).Tconn
	cr := s.FixtValue().(crostini.FixtureData).Chrome
	keyboard := s.FixtValue().(crostini.FixtureData).KB
	cont := s.FixtValue().(crostini.FixtureData).Cont

	// Use a shortened context for test operations to reserve time for cleanup.
	cleanupCtx := ctx
	ctx, cancel := ctxutil.Shorten(ctx, 5*time.Second)
	defer cancel()

	uiauto.RecordScreen(ctx, s, tconn, func() {
		// Open Terminal app.
		terminalApp, err := terminalapp.Launch(ctx, tconn)
		if err != nil {
			s.Fatal("Failed to open Terminal app: ", err)
		}

		restartIfError := true

		defer func() {
			// Restart Crostini in the end in case any error in the middle and Visual Studio Code is not closed.
			// This also closes the Terminal window.
			if restartIfError {
				if err := terminalApp.RestartCrostini(keyboard, cont, cr.NormalizedUser())(cleanupCtx); err != nil {
					s.Log("Failed to restart Crostini: ", err)
				}
			} else {
				terminalApp.Exit(keyboard)(cleanupCtx)
			}
		}()

		// Cursor blinking breaks screenshots.
		cont.WriteFile(ctx, ".config/Code/User/settings.json", `{"editor.cursorBlinking": "solid","workbench.startupEditor": "None"}`)

		d, err := screenshot.NewDifferFromChrome(ctx, s, cr, screenshot.Config{DefaultOptions: screenshot.Options{WindowWidthDP: 666, WindowHeightDP: 714}})
		if err != nil {
			s.Fatal("Failed to start screen differ: ", err)
		}
		defer d.DieOnFailedDiffs()
		// Since defers are executed in a stack, this needs to be the last defer so it doesn't close the window before dumping the tree.
		defer faillog.DumpUITreeWithScreenshotOnError(ctx, s.OutDir(), s.HasError, cr, "ui_tree")
		if err := testCreateFileWithVSCode(ctx, terminalApp, keyboard, tconn, cont, d); err != nil {
			s.Fatal("Failed to create file with Visual Studio Code in Terminal: ", err)
		}

		restartIfError = false
	})
}

func testCreateFileWithVSCode(ctx context.Context, terminalApp *terminalapp.TerminalApp, keyboard *input.KeyboardEventWriter, tconn *chrome.TestConn, cont *vm.Container, d screenshot.Differ) error {
	const (
		testNewFile   = "new.go"
		testSavedFile = "test.go"
		testString    = "//This is a test string."
	)

	ui := uiauto.New(tconn)
	getStarted := nodewith.NameStartingWith("Get Started - Visual Studio Code").Role(role.Window).First()
	appWindowUnsaved := nodewith.NameStartingWith(fmt.Sprintf("● %s - Visual Studio Code", testNewFile)).Role(role.Window).First()
	appWindowSaved := nodewith.NameStartingWith(fmt.Sprintf("%s - Visual Studio Code", testSavedFile)).Role(role.Window).First()

	// Sudo is required because the file the command modifies is read-only.
	cmd := cont.Command(ctx, "sudo", "sh", "-c", disableNotificationsCommand)
	if _, err := cmd.Output(); err != nil {
		return errors.Wrapf(err, "failed to run %v", strings.Join(cmd.Args, " "))
	}

	uda := uidetection.NewDefault(tconn)

	// Even with the workbench.startupEditor set to None,
	// it still opens the Get Started tab when it is opened for the first time.
	// Therefore, open it and close it firstly.
	if err := uiauto.Combine("open VSCode for the first time",
		// Launch Visual Studio Code.
		terminalApp.RunCommand(keyboard, fmt.Sprintf("code --disable-extensions %s", testNewFile)),
		// Wait until the window is stable.
		uda.WaitUntilExists(uidetection.Word("File")),
		// Left click the app window to focus.
		ui.LeftClick(getStarted),
		// Press ctrl+Q to exit window.
		keyboard.AccelAction("ctrl+Q"),
		ui.WaitUntilGone(getStarted))(ctx); err != nil {
		return err
	}

	// UI interaction to save file.
	// File -> Save As -> Type file name -> Save.
	// This corresponds to step 5 at https://testtracker.googleplex.com/testplans/testcase/detail/4163083?id=18920&revision=232.
	saveFile := uiauto.Combine("save file from save as... dialouge",
		uda.LeftClick(uidetection.Word("File")),
		// "Save Workspace As...", "Save", and "Save As..." match the criteria, choose the third one.
		uda.LeftClick(uidetection.Word("Save").Nth(2)),
		uda.WaitUntilExists(uidetection.Word("Desktop")),
		keyboard.AccelAction("ctrl+A"),
		keyboard.TypeAction(testSavedFile),
		uda.LeftClick(uidetection.Word("Save")),
	)

	// Open the VSCode again, this time, it won't open the Get Started tab.
	if err := uiauto.Combine("create file with VSCode",
		// Launch Visual Studio Code.
		terminalApp.RunCommand(keyboard, fmt.Sprintf("code --disable-extensions %s", testNewFile)),
		// Left click the app window and type string.
		ui.LeftClick(appWindowUnsaved),
		// Sometimes the first character got lost if input immediately.
		// Wait until the menu exists, indicating the window is launched.
		uda.WaitUntilExists(uidetection.Word("File")),
		keyboard.TypeAction(testString),
		saveFile,
		ui.WaitUntilExists(appWindowSaved),
		d.DiffWindow(ctx, "vscode", screenshot.Retries(2), screenshot.RetryInterval(time.Second*5)),
		// Press ctrl+Q to exit window.
		keyboard.AccelAction("ctrl+Q"),
		ui.WaitUntilGone(appWindowSaved))(ctx); err != nil {
		return err
	}

	// Check the content of the test file.
	if err := cont.CheckFileContent(ctx, testSavedFile, testString); err != nil {
		return errors.Wrap(err, "failed to verify the content of the file")
	}

	return nil
}
