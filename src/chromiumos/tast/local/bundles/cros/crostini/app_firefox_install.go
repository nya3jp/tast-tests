// Copyright 2022 The ChromiumOS Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"context"
	"regexp"
	"time"

	"chromiumos/tast/common/testexec"
	"chromiumos/tast/ctxutil"
	"chromiumos/tast/errors"
	"chromiumos/tast/local/chrome"
	"chromiumos/tast/local/chrome/uiauto"
	"chromiumos/tast/local/chrome/uiauto/faillog"
	"chromiumos/tast/local/chrome/uiauto/launcher"
	"chromiumos/tast/local/chrome/uiauto/nodewith"
	"chromiumos/tast/local/chrome/uiauto/role"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/local/input"
	"chromiumos/tast/local/uidetection"
	"chromiumos/tast/local/vm"
	"chromiumos/tast/testing"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         AppFirefoxInstall,
		LacrosStatus: testing.LacrosVariantUnneeded,
		Desc:         "Install Firefox, check rendering, and uninstall",
		Contacts:     []string{"ashpakov@google.com", "clumptini@google.com"},
		Attr:         []string{"group:mainline", "informational"},
		SoftwareDeps: []string{"chrome", "vm_host"},
		Params: []testing.Param{
			// Parameters generated by params_test.go. DO NOT EDIT.
			{
				Name:              "tablet_stable",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniAppStable,
				Fixture:           "crostiniBusterLargeContainerTablet",
				Timeout:           15 * time.Minute,
			}, {
				Name:              "tablet_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniAppUnstable,
				Fixture:           "crostiniBusterLargeContainerTablet",
				Timeout:           15 * time.Minute,
			}, {
				Name:              "clamshell_stable",
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniAppStable,
				Fixture:           "crostiniBusterLargeContainerClamshell",
				Timeout:           15 * time.Minute,
			}, {
				Name:              "clamshell_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniAppUnstable,
				Fixture:           "crostiniBusterLargeContainerClamshell",
				Timeout:           15 * time.Minute,
			},
		},
	})
}
func AppFirefoxInstall(ctx context.Context, s *testing.State) {
	const packgeName = "firefox-esr"
	tconn := s.FixtValue().(crostini.FixtureData).Tconn
	keyboard := s.FixtValue().(crostini.FixtureData).KB
	cont := s.FixtValue().(crostini.FixtureData).Cont

	// Use a shortened context for test operations to reserve time for cleanup.
	cleanupCtx := ctx
	ctx, cancel := ctxutil.Shorten(ctx, 30*time.Second)
	defer cancel()
	defer faillog.DumpUITreeOnError(cleanupCtx, s.OutDir(), s.HasError, tconn)

	s.Log("Installing Firefox")
	if err := install(ctx, cont, packgeName); err != nil {
		s.Fatal("Failed to install Firefox: ", err)
	}
	defer func(ctx context.Context) {
		s.Log("Uninstalling Firefox")
		uninstall(ctx, cont, packgeName)
	}(cleanupCtx)

	s.Log("Verifying Firefox")
	if err := verify(ctx, tconn, keyboard); err != nil {
		s.Fatal("Failed to verify: ", err)
	}
}

func install(ctx context.Context, cont *vm.Container, packageName string) error {
	if err := cont.Command(ctx, "sudo", "apt-get", "update").Run(testexec.DumpLogOnError); err != nil {
		return errors.Wrap(err, "failed to run apt-update")
	}
	if err := cont.Command(ctx, "sudo", "apt-get", "-y", "install", packageName).Run(testexec.DumpLogOnError); err != nil {
		return errors.Wrapf(err, "failed to install %s: ", packageName)
	}

	return nil
}

func uninstall(ctx context.Context, cont *vm.Container, packageName string) error {
	if err := cont.Command(ctx, "sudo", "apt-get", "-y", "remove", packageName).Run(testexec.DumpLogOnError); err != nil {
		return errors.Wrapf(err, "failed to uninstall %s: ", packageName)
	}

	return nil
}

func verify(ctx context.Context, tconn *chrome.TestConn, keyboard *input.KeyboardEventWriter) error {
	ud := uidetection.NewDefault(tconn)
	ui := uiauto.New(tconn)
	firefoxWindow := nodewith.NameRegex(regexp.MustCompile(`.*Mozilla Firefox`)).Role(role.Window).First()

	if err := uiauto.Combine("verify Firefox",
		launcher.SearchAndLaunchWithQuery(tconn, keyboard, "f", "Firefox ESR"),
		ui.WaitUntilExists(firefoxWindow),
		ud.WaitUntilExists(uidetection.Word("Firefox").WithinA11yNode(firefoxWindow).First()),
		ui.WithInterval(time.Second).RetryUntil(
			keyboard.AccelAction("ctrl+w"),
			ui.WithTimeout(3*time.Second).WaitUntilGone(firefoxWindow),
		),
	)(ctx); err != nil {
		return errors.Wrap(err, "failed to verify Firefox")
	}

	return nil
}
