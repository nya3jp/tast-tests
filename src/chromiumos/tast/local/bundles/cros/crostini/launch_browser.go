// Copyright 2018 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"context"
	"strings"
	"time"

	"chromiumos/tast/common/testexec"
	"chromiumos/tast/local/chrome/ash"
	"chromiumos/tast/local/chrome/browser"
	"chromiumos/tast/local/chrome/uiauto/faillog"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/testing"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         LaunchBrowser,
		LacrosStatus: testing.LacrosVariantExists,
		Desc:         "Opens a browser window on the host from the container, using several common approaches (/etc/alternatives, $BROWSER, and xdg-open)",
		Contacts:     []string{"davidmunro@google.com", "cros-containers-dev@google.com"},
		Attr:         []string{"group:mainline"},
		SoftwareDeps: []string{"chrome", "vm_host"},
		Params: []testing.Param{
			// Parameters generated by params_test.go. DO NOT EDIT.
			{
				Name:              "buster_stable",
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Fixture:           "crostiniBuster",
				Timeout:           3 * time.Minute,
				Val:               browser.TypeAsh,
			}, {
				Name:              "buster_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Fixture:           "crostiniBuster",
				Timeout:           3 * time.Minute,
				Val:               browser.TypeAsh,
			}, {
				Name:              "bullseye_stable",
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Fixture:           "crostiniBullseye",
				Timeout:           3 * time.Minute,
				Val:               browser.TypeAsh,
			}, {
				Name:              "bullseye_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Fixture:           "crostiniBullseye",
				Timeout:           3 * time.Minute,
				Val:               browser.TypeAsh,
			}, {
				Name:              "bullseye_stable_lacros",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc", "lacros"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Fixture:           "crostiniBullseyeWithLacros",
				Timeout:           3 * time.Minute,
				Val:               browser.TypeLacros,
			},
		},
	})
}

func LaunchBrowser(ctx context.Context, s *testing.State) {
	cont := s.FixtValue().(crostini.FixtureData).Cont
	tconn := s.FixtValue().(crostini.FixtureData).Tconn
	bt := s.Param().(browser.Type)

	checkLaunch := func(title string, command ...string) {
		ctx, cancel := context.WithTimeout(ctx, 10*time.Second)
		defer cancel()

		cmd := cont.Command(ctx, command...)
		s.Logf("Running: %q", strings.Join(cmd.Args, " "))
		if err := cmd.Run(testexec.DumpLogOnError); err != nil {
			s.Error("Failed to launch browser from container: ", err)
			return
		}

		defer faillog.DumpUITreeOnError(ctx, s.OutDir(), s.HasError, tconn)

		pollOptions := &testing.PollOptions{Timeout: time.Minute, Interval: time.Second}
		if err := ash.WaitForCondition(ctx, tconn, ash.BrowserTitleMatch(bt, title), pollOptions); err != nil {
			s.Fatalf("Failed to wait for the window to be open, browser: %v, err: %v", bt, err)
		}

	}

	s.Run(ctx, "testing_sh_c ", func(ctx context.Context, s *testing.State) {
		checkLaunch("browser-env", "sh", "-c", "${BROWSER} http://browser-env.test/")
	})
	s.Run(ctx, "testing_x_www_browser", func(ctx context.Context, s *testing.State) {
		checkLaunch("x-www-browser", "/etc/alternatives/x-www-browser", "http://x-www-browser.test/")
	})
	s.Run(ctx, "testing_xdg_open", func(ctx context.Context, s *testing.State) {
		checkLaunch("xdg-open", "xdg-open", "http://xdg-open.test/")
	})
}
