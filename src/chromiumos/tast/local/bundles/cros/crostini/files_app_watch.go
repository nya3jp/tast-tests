// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"context"
	"time"

	"chromiumos/tast/ctxutil"
	"chromiumos/tast/errors"
	"chromiumos/tast/local/apps"
	"chromiumos/tast/local/chrome"
	"chromiumos/tast/local/chrome/uiauto"
	"chromiumos/tast/local/chrome/uiauto/faillog"
	"chromiumos/tast/local/chrome/uiauto/filesapp"
	"chromiumos/tast/local/chrome/uiauto/nodewith"
	"chromiumos/tast/local/chrome/uiauto/role"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/testing"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         FilesAppWatch,
		LacrosStatus: testing.LacrosVariantUnneeded,
		Desc:         "Checks crostini FilesApp watch",
		Contacts:     []string{"clumptini+oncall@google.com"},
		Attr:         []string{"group:mainline"},
		Vars:         []string{"keepState", "ui.gaiaPoolDefault"},
		SoftwareDeps: []string{"chrome", "vm_host"},
		Params: []testing.Param{
			// Parameters generated by params_test.go. DO NOT EDIT.
			{
				Name:              "buster_stable",
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Fixture:           "crostiniBuster",
				Timeout:           7 * time.Minute,
			}, {
				Name:              "buster_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Fixture:           "crostiniBuster",
				Timeout:           7 * time.Minute,
			}, {
				Name:              "bullseye_stable",
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Fixture:           "crostiniBullseye",
				Timeout:           7 * time.Minute,
			}, {
				Name:              "bullseye_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Fixture:           "crostiniBullseye",
				Timeout:           7 * time.Minute,
			},
		},
	})
}

func FilesAppWatch(ctx context.Context, s *testing.State) {
	pre := s.FixtValue().(crostini.FixtureData)
	tconn := pre.Tconn
	cont := pre.Cont
	cr := pre.Chrome

	const (
		testFileName1   = "FilesAppWatch1.txt"
		testFileName2   = "FilesAppWatch2.txt"
		testFileContent = "FilesAppWatch"
	)

	cleanupCtx := ctx
	ctx, cancel := ctxutil.Shorten(ctx, 5*time.Second)
	defer cancel()

	if err := cont.WriteFile(ctx, testFileName1, testFileContent); err != nil {
		s.Fatal("Create file failed: ", err)
	}
	defer cont.RemoveAll(cleanupCtx, testFileName1)

	// Launch the files application
	files, err := filesapp.Launch(ctx, tconn)
	if err != nil {
		s.Fatal("Launching the Files App failed: ", err)
	}
	defer files.Close(cleanupCtx)

	defer faillog.DumpUITreeWithScreenshotOnError(cleanupCtx, s.OutDir(), s.HasError, cr, "ui_tree")
	// Validate file1.txt is shown in 'Linux files'.
	if err := uiauto.Combine("find file1.txt",
		files.OpenDir("Linux files", "Files - Linux files"),
		files.WithTimeout(10*time.Second).WaitForFile(testFileName1))(ctx); err != nil {
		s.Fatal("Failed to find file1.txt created in the container in Linux files: ", err)
	}
	// Create file2.txt in container and check that FilesApp refreshes.
	if err := cont.WriteFile(ctx, testFileName2, testFileContent); err != nil {
		s.Fatal("Create file failed: ", err)
	}
	defer cont.RemoveAll(cleanupCtx, testFileName2)

	if err := checkFileExistsWithRefresh(ctx, tconn, files, testFileName2); err != nil {
		s.Fatal("Waiting for file2.txt failed: ", err)
	}
}

func checkFileExistsWithRefresh(ctx context.Context, tconn *chrome.TestConn, filesApp *filesapp.FilesApp, fileName string) error {
	refresh := nodewith.Name("Refresh").Role(role.Button).Ancestor(filesapp.WindowFinder(apps.Files.ID))
	if err := uiauto.New(tconn).LeftClickUntil(refresh, filesApp.FileExists(fileName))(ctx); err != nil {
		// Sometimes refresh does not work. Close and reopen Files app instead.
		testing.ContextLogf(ctx, "Failed to find the new file: %s, try to relaunch Files app", err)
		filesApp, err := filesapp.Relaunch(ctx, tconn, filesApp)
		if err != nil {
			return errors.Wrap(err, "failed to relaunch Files app")
		}
		if err := filesApp.OpenLinuxFiles()(ctx); err != nil {
			return errors.Wrap(err, "failed to open Linux files")
		}
		return filesApp.FileExists(fileName)(ctx)
	}
	return nil
}
