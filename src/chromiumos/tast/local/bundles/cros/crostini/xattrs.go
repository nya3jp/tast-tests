// Copyright 2021 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"context"
	"time"

	"chromiumos/tast/common/testexec"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/testing"
)

const (
	expectedOutput = "# file: bin/ping\nsecurity.capability=0sAQAAAgAgAAAAAAAAAAAAAAAAAAA=\n\n"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         Xattrs,
		LacrosStatus: testing.LacrosVariantUnneeded,
		Desc:         "Test that the container image has extended attributes set",
		Contacts:     []string{"sidereal@google.com", "cros-containers-dev@google.com"},
		Attr:         []string{"group:mainline"},
		SoftwareDeps: []string{"chrome", "vm_host"},
		Params: []testing.Param{
			// Parameters generated by params_test.go. DO NOT EDIT.
			{
				Name:              "buster_stable",
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Fixture:           "crostiniBuster",
				Timeout:           7 * time.Minute,
			}, {
				Name:              "buster_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Fixture:           "crostiniBuster",
				Timeout:           7 * time.Minute,
			}, {
				Name:              "bullseye_stable",
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Fixture:           "crostiniBullseye",
				Timeout:           7 * time.Minute,
			}, {
				Name:              "bullseye_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Fixture:           "crostiniBullseye",
				Timeout:           7 * time.Minute,
			},
		},
	})
}

func Xattrs(ctx context.Context, s *testing.State) {
	cont := s.FixtValue().(crostini.FixtureData).Cont

	if output, err := cont.Command(ctx, "getfattr", "-d", "-m", "-", "/bin/ping").Output(testexec.DumpLogOnError); err != nil {
		s.Fatal("Failed to run getfattr: ", err)
	} else if string(output) != expectedOutput {
		s.Fatalf("Got unexpected output from getfattr: %q, expected %q", string(output), expectedOutput)
	}
	s.Log("Got expected output from getfattr")

	if err := cont.Command(ctx, "ping", "-c", "1", "localhost").Run(testexec.DumpLogOnError); err != nil {
		s.Fatal("Failed to ping localhost: ", err)
	}
	s.Log("Was able to ping localhost")
}
