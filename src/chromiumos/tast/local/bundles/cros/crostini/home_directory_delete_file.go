// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"context"
	"os"
	"time"

	"chromiumos/tast/ctxutil"
	"chromiumos/tast/errors"
	"chromiumos/tast/local/chrome/ui"
	"chromiumos/tast/local/chrome/ui/filesapp"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/local/crostini/ui/linuxfiles"
	"chromiumos/tast/local/cryptohome"
	"chromiumos/tast/local/testexec"
	"chromiumos/tast/local/vm"
	"chromiumos/tast/testing"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         HomeDirectoryDeleteFile,
		Desc:         "Test deleting a file in Linux files and container using a pre-built crostini image",
		Contacts:     []string{"jinrongwu@google.com", "cros-containers-dev@google.com"},
		Attr:         []string{"group:mainline", "informational"},
		Vars:         []string{"keepState", "crostini.gaiaUsername", "crostini.gaiaPassword", "crostini.gaiaID"},
		SoftwareDeps: []string{"chrome", "vm_host"},
		Params: []testing.Param{
			// Parameters generated by params_test.go. DO NOT EDIT.
			{
				Name:              "component_stretch_amd64_stable",
				ExtraData:         []string{"crostini_vm_amd64.zip", "crostini_test_container_metadata_stretch_amd64.tar.xz", "crostini_test_container_rootfs_stretch_amd64.tar.xz"},
				ExtraSoftwareDeps: []string{"amd64"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Pre:               crostini.StartedByComponentStretch(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "dlc_stretch_amd64_stable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{"crostini_test_container_metadata_stretch_amd64.tar.xz", "crostini_test_container_rootfs_stretch_amd64.tar.xz"},
				ExtraSoftwareDeps: []string{"amd64", "dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Pre:               crostini.StartedByDlcStretch(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "component_stretch_amd64_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{"crostini_vm_amd64.zip", "crostini_test_container_metadata_stretch_amd64.tar.xz", "crostini_test_container_rootfs_stretch_amd64.tar.xz"},
				ExtraSoftwareDeps: []string{"amd64"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Pre:               crostini.StartedByComponentStretch(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "dlc_stretch_amd64_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{"crostini_test_container_metadata_stretch_amd64.tar.xz", "crostini_test_container_rootfs_stretch_amd64.tar.xz"},
				ExtraSoftwareDeps: []string{"amd64", "dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Pre:               crostini.StartedByDlcStretch(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "component_stretch_arm_stable",
				ExtraData:         []string{"crostini_vm_arm.zip", "crostini_test_container_metadata_stretch_arm.tar.xz", "crostini_test_container_rootfs_stretch_arm.tar.xz"},
				ExtraSoftwareDeps: []string{"arm"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Pre:               crostini.StartedByComponentStretch(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "dlc_stretch_arm_stable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{"crostini_test_container_metadata_stretch_arm.tar.xz", "crostini_test_container_rootfs_stretch_arm.tar.xz"},
				ExtraSoftwareDeps: []string{"arm", "dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Pre:               crostini.StartedByDlcStretch(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "component_stretch_arm_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{"crostini_vm_arm.zip", "crostini_test_container_metadata_stretch_arm.tar.xz", "crostini_test_container_rootfs_stretch_arm.tar.xz"},
				ExtraSoftwareDeps: []string{"arm"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Pre:               crostini.StartedByComponentStretch(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "dlc_stretch_arm_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{"crostini_test_container_metadata_stretch_arm.tar.xz", "crostini_test_container_rootfs_stretch_arm.tar.xz"},
				ExtraSoftwareDeps: []string{"arm", "dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Pre:               crostini.StartedByDlcStretch(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "component_buster_amd64_stable",
				ExtraData:         []string{"crostini_vm_amd64.zip", "crostini_test_container_metadata_buster_amd64.tar.xz", "crostini_test_container_rootfs_buster_amd64.tar.xz"},
				ExtraSoftwareDeps: []string{"amd64"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Pre:               crostini.StartedByComponentBuster(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "dlc_buster_amd64_stable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{"crostini_test_container_metadata_buster_amd64.tar.xz", "crostini_test_container_rootfs_buster_amd64.tar.xz"},
				ExtraSoftwareDeps: []string{"amd64", "dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Pre:               crostini.StartedByDlcBuster(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "component_buster_amd64_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{"crostini_vm_amd64.zip", "crostini_test_container_metadata_buster_amd64.tar.xz", "crostini_test_container_rootfs_buster_amd64.tar.xz"},
				ExtraSoftwareDeps: []string{"amd64"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Pre:               crostini.StartedByComponentBuster(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "dlc_buster_amd64_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{"crostini_test_container_metadata_buster_amd64.tar.xz", "crostini_test_container_rootfs_buster_amd64.tar.xz"},
				ExtraSoftwareDeps: []string{"amd64", "dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Pre:               crostini.StartedByDlcBuster(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "component_buster_arm_stable",
				ExtraData:         []string{"crostini_vm_arm.zip", "crostini_test_container_metadata_buster_arm.tar.xz", "crostini_test_container_rootfs_buster_arm.tar.xz"},
				ExtraSoftwareDeps: []string{"arm"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Pre:               crostini.StartedByComponentBuster(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "dlc_buster_arm_stable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{"crostini_test_container_metadata_buster_arm.tar.xz", "crostini_test_container_rootfs_buster_arm.tar.xz"},
				ExtraSoftwareDeps: []string{"arm", "dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Pre:               crostini.StartedByDlcBuster(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "component_buster_arm_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{"crostini_vm_arm.zip", "crostini_test_container_metadata_buster_arm.tar.xz", "crostini_test_container_rootfs_buster_arm.tar.xz"},
				ExtraSoftwareDeps: []string{"arm"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Pre:               crostini.StartedByComponentBuster(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "dlc_buster_arm_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{"crostini_test_container_metadata_buster_arm.tar.xz", "crostini_test_container_rootfs_buster_arm.tar.xz"},
				ExtraSoftwareDeps: []string{"arm", "dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Pre:               crostini.StartedByDlcBuster(),
				Timeout:           7 * time.Minute,
			},
		},
	})
}

func HomeDirectoryDeleteFile(ctx context.Context, s *testing.State) {
	tconn := s.PreValue().(crostini.PreData).TestAPIConn
	cont := s.PreValue().(crostini.PreData).Container
	cr := s.PreValue().(crostini.PreData).Chrome
	defer crostini.RunCrostiniPostTest(ctx, s.PreValue().(crostini.PreData))

	// Use a shortened context for test operations to reserve time for cleanup.
	cleanupCtx := ctx
	ctx, cancel := ctxutil.Shorten(ctx, 90*time.Second)
	defer cancel()

	// Open Files app.
	filesApp, err := filesapp.Launch(ctx, tconn)
	if err != nil {
		s.Fatal("Failed to open Files app: ", err)
	}
	defer filesApp.Close(cleanupCtx)

	const fileName = "testfile.txt"

	s.Run(ctx, "delete_from_linuxfiles", func(ctx context.Context, s *testing.State) {
		ownerID, err := cryptohome.UserHash(ctx, cr.User())
		if err != nil {
			s.Fatal("Failed to get user hash: ", err)
		}
		filePath := "/media/fuse/crostini_" + ownerID + "_termina_penguin/" + fileName

		// Delete a file from Linux files and check it get deleted in container.
		if err := testDeleteFileFromLinuxFiles(ctx, filesApp, cont, fileName, filePath); err != nil {
			s.Error("Failed to test deleting files from Linux files: ", err)
		}
	})

	s.Run(ctx, "delete_from_container", func(ctx context.Context, s *testing.State) {
		// Delete a file from container and check it get deleted in Linux files.
		if err := testDeleteFileFromContainer(ctx, filesApp, cont, fileName); err != nil {
			s.Error("Failed to test deleting files in container: ", err)
		}
	})
}

// testDeleteFileFromLinuxFiles first deletes a file in Linux files then checks it is also deleted in container.
func testDeleteFileFromLinuxFiles(ctx context.Context, filesApp *filesapp.FilesApp, cont *vm.Container, fileName, filePath string) error {
	// Create a file inside container.
	if err := cont.Command(ctx, "touch", fileName).Run(testexec.DumpLogOnError); err != nil {
		return errors.Wrap(err, "failed to create a file in the container")
	}

	// Delete the file from Chrome OS.
	if err := testing.Poll(ctx, func(ctx context.Context) error {
		if _, err := os.Stat(filePath); err != nil {
			return errors.Wrapf(err, "file %s does not exist", filePath)
		}
		if err := os.Remove(filePath); err != nil {
			return err
		}
		if _, err := os.Stat(filePath); err == nil {
			return errors.Errorf("file %s still exists after deleting", filePath)
		}
		return nil
	}, &testing.PollOptions{Timeout: 15 * time.Second}); err != nil {
		return errors.Wrap(err, "failed to delete the file in Chrome OS")
	}

	// Check the file has been deleted from the container.
	return testing.Poll(ctx, func(ctx context.Context) error {
		if err := cont.CheckFileDoesNotExistInDir(ctx, ".", fileName); err != nil {
			return errors.Wrapf(err, "failed to delete file %s in the container through deleting it from Linux files", fileName)
		}
		return nil
	}, &testing.PollOptions{Interval: 100 * time.Millisecond, Timeout: 15 * time.Second})
}

// testDeleteFileFromContainer first deletes a file in the container then checks it is also deleted in Linux files.
func testDeleteFileFromContainer(ctx context.Context, filesApp *filesapp.FilesApp, cont *vm.Container, fileName string) error {
	// Create a file in the container.
	if err := cont.Command(ctx, "touch", fileName).Run(testexec.DumpLogOnError); err != nil {
		return errors.Wrap(err, "failed to create a file in the container")
	}

	// Open "Linux files".
	if err := filesApp.OpenDir(ctx, linuxfiles.DirName, linuxfiles.Title); err != nil {
		return errors.Wrap(err, "failed to open Linux files after creating files in the container")
	}

	if err := testing.Poll(ctx, func(ctx context.Context) error {
		// Click Refresh.
		if err := filesApp.LeftClickItem(ctx, "Refresh", ui.RoleTypeButton); err != nil {
			return errors.Wrap(err, "failed to click button Refresh on Files app")
		}

		// Check the newly created file is listed in Linux files.
		if err := filesApp.WaitForFile(ctx, fileName, 10*time.Second); err != nil {
			return errors.Wrap(err, "failed to list the file created from crostini in Files app: ")
		}
		return nil
	}, &testing.PollOptions{Timeout: 5 * time.Second}); err != nil {
		return err
	}

	// Delete the file in container.
	if err := cont.Command(ctx, "rm", "-f", fileName).Run(testexec.DumpLogOnError); err != nil {
		return errors.Wrapf(err, "failed to delete file %s in container", fileName)
	}

	// Check the file does not exist in Linux files.
	if err := testing.Poll(ctx, func(ctx context.Context) error {
		return filesApp.CheckFileDoesNotExist(ctx, linuxfiles.Title, fileName, linuxfiles.DirName)
	}, &testing.PollOptions{Timeout: 5 * time.Second}); err != nil {
		return errors.Wrapf(err, "failed to delete file %s in Linux files through deleting it from container", fileName)
	}

	return nil
}
