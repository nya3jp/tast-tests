// Copyright 2021 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"context"
	"fmt"
	"time"

	"chromiumos/tast/ctxutil"
	"chromiumos/tast/local/chrome/uiauto"
	"chromiumos/tast/local/chrome/uiauto/nodewith"
	"chromiumos/tast/local/chrome/uiauto/ossettings"
	"chromiumos/tast/local/chrome/uiauto/role"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/local/crostini/faillog"
	"chromiumos/tast/local/crostini/ui/settings"
	"chromiumos/tast/local/crostini/ui/terminalapp"
	"chromiumos/tast/testing"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         ResizeBackupRestore,
		Desc:         "Test resizing disk of Crostini from the Settings app between backup and restore",
		Contacts:     []string{"nverne@google.com", "cros-containers-dev@google.com"},
		Attr:         []string{"group:mainline", "informational"},
		SoftwareDeps: []string{"chrome", "vm_host"},
		Vars:         []string{"keepState", "ui.gaiaPoolDefault"},
		Params: []testing.Param{
			// Parameters generated by params_test.go. DO NOT EDIT.
			{
				Name:              "stretch_stable",
				ExtraData:         []string{crostini.GetContainerMetadataArtifact("stretch", false), crostini.GetContainerRootfsArtifact("stretch", false)},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Pre:               crostini.StartedByDlcStretch(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "stretch_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{crostini.GetContainerMetadataArtifact("stretch", false), crostini.GetContainerRootfsArtifact("stretch", false)},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Pre:               crostini.StartedByDlcStretch(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "buster_stable",
				ExtraData:         []string{crostini.GetContainerMetadataArtifact("buster", false), crostini.GetContainerRootfsArtifact("buster", false)},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Pre:               crostini.StartedByDlcBuster(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "buster_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{crostini.GetContainerMetadataArtifact("buster", false), crostini.GetContainerRootfsArtifact("buster", false)},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Pre:               crostini.StartedByDlcBuster(),
				Timeout:           7 * time.Minute,
			},
		},
	})
}

// find params for fixed items.
var (
	backupButton         = nodewith.NameStartingWith("Backup Linux").Role(role.Button).Ancestor(ossettings.WindowFinder)
	restoreButton        = nodewith.NameStartingWith("Replace").Role(role.Button).Ancestor(ossettings.WindowFinder)
	backupFileWindow     = nodewith.Name("Backup").Role(role.Window).ClassName("ExtensionViewViews")
	backupSave           = nodewith.Name("Save").Role(role.Button).Ancestor(backupFileWindow)
	backupNotification   = nodewith.NameStartingWith("Backup complete").Role(role.AlertDialog).ClassName("MessagePopupView")
	restoreNotification  = nodewith.NameStartingWith("Restore complete").Role(role.AlertDialog).ClassName("MessagePopupView")
	restoreConfirmButton = nodewith.Name("Restore").Role(role.Button).ClassName("action-button")
	restoreFileWindow    = nodewith.Name("Restore").Role(role.Window).ClassName("ExtensionViewViews")
	restoreTiniFile      = nodewith.NameContaining(".tini").Role(role.StaticText).Ancestor(restoreFileWindow)
	restoreOpen          = nodewith.Name("Open").Role(role.Button).Ancestor(restoreFileWindow)
)

func ResizeBackupRestore(ctx context.Context, s *testing.State) {
	pre := s.PreValue().(crostini.PreData)
	cr := pre.Chrome
	tconn := pre.TestAPIConn
	keyboard := pre.Keyboard
	cont := pre.Container

	// Use a shortened context for test operations to reserve time for cleanup.
	cleanupCtx := ctx
	ctx, cancel := ctxutil.Shorten(ctx, 30*time.Second)
	defer cancel()
	defer crostini.RunCrostiniPostTest(cleanupCtx, pre)

	checksumFiles := func(outputFile string) error {
		const md5cmd = "for d in /home /etc; do echo $d; sudo find $d -type f -a '!' -name '.*' -exec md5sum {} + | LC_ALL=c sort | md5sum; done"
		// Open Terminal app.
		terminalApp, err := terminalapp.Launch(ctx, tconn)
		if err != nil {
			s.Fatal("Failed to open Terminal app: ", err)
		}
		defer terminalApp.Exit(keyboard)(cleanupCtx)
		return uiauto.Combine("Running '"+md5cmd+"'",
			terminalApp.RunCommand(keyboard, fmt.Sprintf("%s > %s 2>&1", md5cmd, outputFile)),
			terminalApp.WaitForPrompt())(ctx)
	}
	const (
		backupFileBaseName = "test-backup"
		checksumPreFile    = "/tmp/checksum_pre.txt"
		checksumPostFile   = "/tmp/checksum_post.txt"
	)
	var checksumPreStr, checksumPostStr string
	var err error

	// Run checksumFiles, output to a new file in the filesystem which can also be
	// used to verify restore.
	if err = checksumFiles(checksumPreFile); err != nil {
		s.Fatal("Failed to run command in Terminal window: ", err)
	}
	checksumPreStr, err = cont.ReadFile(ctx, checksumPreFile)
	if err != nil {
		s.Fatal("Failed to read checksum output file " + checksumPreFile)
	}
	s.Log("Pre checksum " + checksumPreStr)
	// Back up container through settings.
	// Open the Linux settings.
	st, err := settings.OpenLinuxSettings(ctx, tconn, cr, "Backup & restore")
	if err != nil {
		s.Fatal("Failed to open Linux Settings Backup & restore: ", err)
	}

	defer st.Close(ctx)
	defer func() { faillog.DumpUITreeAndScreenshot(ctx, tconn, "resize_backup_restore", err) }()

	if err = st.LeftClickUI(ctx, backupButton); err != nil {
		s.Fatal("Failed to click Backup button: ", err)
	}
	// Set filename
	if err = st.WaitForUI(ctx, backupFileWindow); err != nil {
		s.Fatal("Failed to see Backup File dialog")
	}
	testing.Sleep(ctx, time.Second) // Pause needed so keyboard events are received

	if err = keyboard.Type(ctx, backupFileBaseName); err != nil {
		s.Fatal("Failed to enter backup name " + backupFileBaseName)
	}
	if err = st.LeftClickUI(ctx, backupSave); err != nil {
		s.Fatal("Failed to left click backup Save button")
	}

	// Wait for backup complete
	longOp := uiauto.New(tconn)

	if err = longOp.WithTimeout(5 * time.Minute).WaitUntilExists(backupNotification)(ctx); err != nil {
		s.Fatal("Backup complete notification not found")
	}

	// Resize container disk
	st, err = settings.OpenLinuxSettings(ctx, tconn, cr)
	if err != nil {
		s.Fatal("Failed to open Linux Settings: ", err)
	}
	const targetDiskSizeBytes uint64 = 6 << 30
	st.ResizeDisk(ctx, keyboard, targetDiskSizeBytes, true)

	// Restore container
	st, err = settings.OpenLinuxSettings(ctx, tconn, cr, "Backup & restore")
	if err != nil {
		s.Fatal("Failed to open Linux Settings Backup & restore: ", err)
	}
	if err = st.LeftClickUI(ctx, restoreButton); err != nil {
		s.Fatal("Failed to click Restore button: ", err)
	}
	if err = st.WaitForUI(ctx, restoreConfirmButton); err != nil {
		s.Fatal("Failed to find Confirm Restore dialog and button: ", err)
	}
	if err = st.LeftClickUI(ctx, restoreConfirmButton); err != nil {
		s.Fatal("Failed to click confirm restore action button: ", err)
	}

	// Click on .tini file
	if err = st.WaitForUI(ctx, restoreFileWindow); err != nil {
		s.Fatal("Failed to find Restore file window: ", err)
	}
	if err = st.LeftClickUI(ctx, restoreTiniFile); err != nil {
		s.Fatal("Failed to find .tini in file list: ", err)
	}
	if err = longOp.LeftClick(restoreOpen)(ctx); err != nil {
		s.Fatal("Failed to click Open button in Restore file window: ", err)
	}
	if err = longOp.WithTimeout(5 * time.Minute).WaitUntilExists(restoreNotification)(ctx); err != nil {
		s.Fatal("Restore complete notification not found: ", err)
	}

	// Write post checksum
	if err = checksumFiles(checksumPostFile); err != nil {
		s.Fatal("Failed to run command in Terminal window: ", err)
	}
	checksumPostStr, err = cont.ReadFile(ctx, checksumPostFile)
	if err != nil {
		s.Fatal("Failed to read checksum output file "+checksumPostFile+": ", err)
	}
	s.Log("Post checksum " + checksumPostStr)

	// Verify pre and post checksums are the same.
	if checksumPreStr != checksumPostStr {
		s.Fatal("Checksum mismatch. Got " + checksumPostStr + ", Want " + checksumPreStr)
	}
}
