// Copyright 2022 The ChromiumOS Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"context"
	"time"

	"chromiumos/tast/ctxutil"
	"chromiumos/tast/local/chrome/uiauto"
	"chromiumos/tast/local/chrome/uiauto/nodewith"
	"chromiumos/tast/local/chrome/uiauto/role"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/local/crostini/ui/terminalapp"
	"chromiumos/tast/local/screenshot"
	"chromiumos/tast/testing"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         AppVscodeUninstall,
		LacrosStatus: testing.LacrosVariantUnneeded,
		Desc:         "Uninstall in Terminal app",
		Contacts:     []string{"clumptini+oncall@google.com"},
		Attr:         []string{"group:mainline", "informational"},
		Vars:         screenshot.ScreenDiffVars,
		SoftwareDeps: []string{"chrome", "vm_host", "amd64"},
		Params: []testing.Param{
			// Parameters generated by params_test.go. DO NOT EDIT.
			{
				Name:              "tablet_stable",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniAppStable,
				Fixture:           "crostiniBusterLargeContainerTabletWithSnapshot",
				Timeout:           15 * time.Minute,
			}, {
				Name:              "tablet_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniAppUnstable,
				Fixture:           "crostiniBusterLargeContainerTabletWithSnapshot",
				Timeout:           15 * time.Minute,
			}, {
				Name:              "clamshell_stable",
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniAppStable,
				Fixture:           "crostiniBusterLargeContainerClamshellWithSnapshot",
				Timeout:           15 * time.Minute,
			}, {
				Name:              "clamshell_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniAppUnstable,
				Fixture:           "crostiniBusterLargeContainerClamshellWithSnapshot",
				Timeout:           15 * time.Minute,
			},
		},
	})
}
func AppVscodeUninstall(ctx context.Context, s *testing.State) {
	tconn := s.FixtValue().(crostini.FixtureData).Tconn
	keyboard := s.FixtValue().(crostini.FixtureData).KB

	// Use a shortened context for test operations to reserve time for cleanup.
	cleanupCtx := ctx
	ctx, cancel := ctxutil.Shorten(ctx, 5*time.Second)
	defer cancel()

	// Open Terminal app.
	terminalApp, err := terminalapp.Launch(ctx, tconn)
	if err != nil {
		s.Fatal("Failed to open Terminal app: ", err)
	}
	defer terminalApp.Exit(keyboard)(cleanupCtx)

	ui := uiauto.New(tconn)
	progress := nodewith.NameStartingWith("Progress: [ ").Role(role.StaticText)
	errorMsg := "VSCode not found"
	outError := "VSCode: command not found"
	codeError := nodewith.NameContaining(outError).Role(role.StaticText)
	if err := uiauto.Combine("uninstall Visual Studio Code",
		// Run the command to uninstall.
		terminalApp.RunCommand(keyboard, "sudo apt purge -y --allow-change-held-packages code"),
		// Make sure the uninstallation progress starts
		// and wait for it to finish.
		ui.WaitUntilExists(progress),
		ui.WithTimeout(time.Minute).WaitUntilGone(progress),
		// Run command "code || echo VSCode not found"
		// to check the uninstallation works.
		terminalApp.RunCommand(keyboard, "code || "+errorMsg),
		ui.WaitUntilExists(codeError),
	)(ctx); err != nil {
		s.Fatal("Failed to test uninstalling Visual Studio Code in Terminal app: ", err)
	}
}
