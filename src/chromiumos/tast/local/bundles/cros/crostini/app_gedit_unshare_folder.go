// Copyright 2022 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"context"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"chromiumos/tast/ctxutil"
	"chromiumos/tast/errors"
	"chromiumos/tast/local/chrome/ash"
	"chromiumos/tast/local/chrome/uiauto"
	"chromiumos/tast/local/chrome/uiauto/faillog"
	"chromiumos/tast/local/chrome/uiauto/filesapp"
	"chromiumos/tast/local/chrome/uiauto/nodewith"
	"chromiumos/tast/local/chrome/uiauto/role"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/local/crostini/ui/settings"
	"chromiumos/tast/local/crostini/ui/sharedfolders"
	"chromiumos/tast/local/screenshot"
	"chromiumos/tast/local/uidetection"
	"chromiumos/tast/testing"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         AppGeditUnshareFolder,
		LacrosStatus: testing.LacrosVariantUnneeded,
		Desc:         "Test gedit in Terminal window",
		Contacts:     []string{"zubinpratap@google.com", "cros-containers-dev@google.com"},
		Attr:         []string{"group:mainline", "informational"},
		Vars:         append([]string{"keepState", "ui.gaiaPoolDefault"}, screenshot.ScreenDiffVars...),
		SoftwareDeps: []string{"chrome", "vm_host"},
		Params: []testing.Param{
			// Parameters generated by params_test.go. DO NOT EDIT.
			{
				ExtraData:         []string{crostini.GetContainerMetadataArtifact("buster", true), crostini.GetContainerRootfsArtifact("buster", true)},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniAppTest,
				Pre:               crostini.StartedByDlcBusterLargeContainer(),
				Timeout:           15 * time.Minute,
			},
		},
	})
}

func AppGeditUnshareFolder(ctx context.Context, s *testing.State) {
	var (
		tmpFilename              = "test_file.txt"
		tmpFileCrosDownloadsPath = filepath.Join(filesapp.DownloadPath, tmpFilename)
		tmpFileContents          = "Test file string in file in the Linux shared folder."
		geditWindowAshTitle      = "test_file.txt [Read-Only] (/mnt/chromeos/MyFiles/Downloads) - gedit"
		geditContextMenuItem     = "Open with Text Editor"
	)

	tconn := s.PreValue().(crostini.PreData).TestAPIConn
	cr := s.PreValue().(crostini.PreData).Chrome
	keyboard := s.PreValue().(crostini.PreData).Keyboard
	cont := s.PreValue().(crostini.PreData).Container

	sharedFolders := sharedfolders.NewSharedFolders(tconn)

	// Use a shortened context for test operations to reserve time for cleanup.
	cleanupCtx := ctx
	ctx, cancel := ctxutil.Shorten(ctx, crostini.PostTimeout)
	defer cancel()
	defer crostini.RunCrostiniPostTest(ctx, s.PreValue().(crostini.PreData))
	defer faillog.DumpUITreeOnError(cleanupCtx, s.OutDir(), s.HasError, tconn)

	defer func(ctx context.Context) {
		if err := os.Remove(tmpFileCrosDownloadsPath); err != nil {
			s.Logf("Cleanup: failed to remove file %s on cleanup: %v", tmpFileCrosDownloadsPath, err)
		}
		if err := sharedFolders.UnshareAll(cont, cr)(ctx); err != nil {
			s.Error("Failed to unshare all folders: ", err)
		}
	}(cleanupCtx)

	// Open Files app.
	filesApp, err := filesapp.Launch(ctx, tconn)
	if err != nil {
		s.Fatal("Failed to open Files app: ", err)
	}
	defer filesApp.Close(cleanupCtx)

	if err := setupAndShareFileWithLinux(ctx, filesApp, sharedFolders, tmpFileCrosDownloadsPath, tmpFileContents); err != nil {
		s.Fatal("Failed a setup step in this test: ", err)
	}

	// Open tmp file with Gedit.
	ui := uiauto.New(tconn)
	geditWindow := nodewith.NameContaining(tmpFilename).Role(role.Window).First()
	err = uiauto.Combine("open temp file with Gedit",
		filesApp.OpenDownloads(),
		filesApp.ClickContextMenuItem(tmpFilename, filesapp.OpenWith, geditContextMenuItem),
		ui.WaitUntilExists(geditWindow),
	)(ctx)
	if err != nil {
		s.Fatal("Failed to open tmp file in the Downloads folder: ", err)
	}

	linuxSettings, err := settings.OpenLinuxManagedSharedFoldersSetting(ctx, tconn, cr)
	if err != nil {
		s.Fatal("Failed to open the linux managed shared folders settings page: ", err)
	}

	if err = linuxSettings.UnshareFolder(ctx, sharedfolders.SharedDownloads); err != nil {
		s.Fatal("Failed to unshare the shared folder during the test: ", err)
	}

	// Type text into file and attempt to save.
	geditAshWindow, err := ash.BringWindowToForeground(ctx, tconn, geditWindowAshTitle)
	if err != nil {
		s.Fatal("Failed to bring gedit window to foregreound: ", err)
	}
	defer geditAshWindow.CloseWindow(ctx, tconn)

	if err = uiauto.Combine("type text and attempt to save",
		ui.LeftClick(geditWindow),
		keyboard.AccelAction("enter"), // new line.
		keyboard.TypeAction("adding random text"),
		keyboard.AccelAction("ctrl+S"),
	)(ctx); err != nil {
		s.Fatal("Failed to type text and save after unsharing folder: ", err)
	}

	// TODO(zubinpratap) - add screen differ.

	ud := uidetection.NewDefault(tconn)
	if err = geditAshWindow.CloseWindow(ctx, tconn); err != nil {
		// Since the folder is no longer shared, the "ctrl+S" keyboard action
		// above should not work.  The newly typed text would not save.
		// Therefore the Gedit close window operation is expected to produce
		// a "save file as" dialog window that is displayed over the Gedit window.
		// The absence of such a dialog indicates that "ctrl+S" above succeeded.
		// If "ctrl+s" succeeds, it means the unshare operation failed, which means
		// this test fails.
		if strings.Contains(err.Error(), "window is still present") {
			closeWithoutSavingButton := uidetection.TextBlock([]string{"Close", "without", "Saving"})
			if err := uiauto.Combine("Closing Gedit without saving",
				ud.WaitUntilExists(closeWithoutSavingButton),
				ud.WaitUntilExists(uidetection.TextBlock([]string{"Cancel"})),
				ud.WaitUntilExists(uidetection.TextBlock([]string{"Save", "As "})),
				ud.LeftClick(closeWithoutSavingButton),
			)(ctx); err != nil {
				s.Fatal("Failed to click on 'Close without Saving' button: ", err)
			}
		} else {
			s.Fatal("Unexpected error when closing the Gedit window after typing in text: ", err)
		}
	} else {
		// err is nil, meaning file saved and window closed without
		// UI prompt, which is unexpected.
		s.Fatal("Expected an error when closing the Gedit window after typing in text")
	}
}

func setupAndShareFileWithLinux(
	ctx context.Context,
	filesApp *filesapp.FilesApp,
	sharedFolders *sharedfolders.SharedFolders,
	tmpFileCrosDownloadsPath,
	tmpFileContents string) error {
	// Create a temp text file in the /Downloads folder to use in this test.
	if err := ioutil.WriteFile(tmpFileCrosDownloadsPath, []byte(tmpFileContents), 0644); err != nil {
		return errors.Wrap(err, "failed to create text file in Downloads folder")
	}

	// Right click Downloads and select Share with Linux.
	if err := uiauto.Combine("click Share with Linux on Downloads",
		filesApp.ClickDirectoryContextMenuItem(filesapp.Downloads, sharedfolders.ShareWithLinux),
		sharedFolders.AddFolder(sharedfolders.SharedDownloads),
	)(ctx); err != nil {
		return errors.Wrap(err, "failed to share Downloads folder with Crostini")
	}
	return nil
}
