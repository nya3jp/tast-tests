// Copyright 2022 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"context"
	"regexp"
	"time"

	"chromiumos/tast/common/testexec"
	"chromiumos/tast/ctxutil"
	"chromiumos/tast/local/chrome/uiauto"
	"chromiumos/tast/local/chrome/uiauto/faillog"
	"chromiumos/tast/local/chrome/uiauto/launcher"
	"chromiumos/tast/local/chrome/uiauto/nodewith"
	"chromiumos/tast/local/chrome/uiauto/role"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/local/crostini/ui/terminalapp"
	"chromiumos/tast/local/screenshot"
	"chromiumos/tast/local/uidetection"
	"chromiumos/tast/testing"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         AppGeditInstallUninstall,
		LacrosStatus: testing.LacrosVariantUnneeded,
		Desc:         "Install Gedit, check rendering, icons, saving and uninstall behavior",
		Contacts:     []string{"jinrongwu@google.com", "cros-containers-dev@google.com"},
		Attr:         []string{"group:mainline", "informational"},
		Vars:         screenshot.ScreenDiffVars,
		SoftwareDeps: []string{"chrome", "vm_host"},
		Data:         []string{"logo_gedit.png"},
		Params: []testing.Param{
			// Parameters generated by params_test.go. DO NOT EDIT.
			{
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniAppTest,
				Fixture:           "crostiniBuster",
				Timeout:           15 * time.Minute,
			},
		},
	})
}
func AppGeditInstallUninstall(ctx context.Context, s *testing.State) {
	tconn := s.FixtValue().(crostini.FixtureData).Tconn
	keyboard := s.FixtValue().(crostini.FixtureData).KB
	cont := s.FixtValue().(crostini.FixtureData).Cont

	// Use a shortened context for test operations to reserve time for cleanup.
	cleanupCtx := ctx
	ctx, cancel := ctxutil.Shorten(ctx, 5*time.Second)
	defer cancel()
	defer faillog.DumpUITreeOnError(cleanupCtx, s.OutDir(), s.HasError, tconn)

	s.Log("Installing Gedit")
	if err := cont.Command(ctx, "sudo", "apt-get", "-y", "install", "gedit").Run(testexec.DumpLogOnError); err != nil {
		s.Fatal("Failed to install Gedit: ", err)
	}

	s.Log("Launching Gedit from launcher")
	if err := launcher.SearchAndLaunchWithQuery(tconn, keyboard, "t", "Text Editor")(ctx); err != nil {
		s.Fatal("Failed to launch gedit: ", err)
	}

	ud := uidetection.NewDefault(tconn)
	ui := uiauto.New(tconn)
	geditIcon := uidetection.CustomIcon(s.DataPath("logo_gedit.png"))
	if err := ud.WaitUntilExists(geditIcon)(ctx); err != nil {
		s.Fatal("Failed to find the Gedit icon in the sty")
	}

	closeGeditContextMenuItem := uidetection.Word("Close")

	if err := uiauto.Combine("edit file and save",
		keyboard.TypeAction("Hello, gedit!"),
		keyboard.AccelAction("ctrl+S"), // Bring up the save window
		ud.LeftClick(uidetection.Word("Save")),
		ud.RightClick(geditIcon),
		ud.WaitUntilExists(closeGeditContextMenuItem),
		ud.LeftClick(closeGeditContextMenuItem),
	)(ctx); err != nil {
		s.Fatal("Failed to edit and save the Gedit file: ", err)
	}

	s.Log("Uninstall Gedit from Terminal")
	ta, err := terminalapp.Launch(ctx, tconn)
	if err != nil {
		s.Fatal("Failed to launch terminal: ", err)
	}

	if err = ta.RunCommand(keyboard, "sudo apt-get -y remove gedit")(ctx); err != nil {
		s.Fatal("Failed to run command in Terminal window: ", err)
	}

	// Close terminal.
	terminalNode := nodewith.NameRegex(regexp.MustCompile(`\@penguin\: `)).Role(role.Window).ClassName("BrowserFrame")
	leaveButton := uidetection.Word("Leave").Nth(1)
	if err := uiauto.Combine("close Terminal window",
		ta.WaitForPrompt(),             // Wait until Gedit uninstall streams finish printing.
		ta.ClickShelfMenuItem("Close"), // Closing terminal from the shelf throws up an alert dialogue.
		ud.LeftClick(leaveButton),      // Dialogue has "Cancel" and "Leave buttons"
		ui.WithTimeout(time.Minute).WaitUntilGone(terminalNode),
	)(ctx); err != nil {
		s.Fatal("Failed to close terminal: ", err)
	}
}
