// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"context"
	"time"

	"chromiumos/tast/local/chrome/ui"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/local/input"
	"chromiumos/tast/testing"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         TaskManager,
		Desc:         "Tests Crostini integration with the task manager",
		Contacts:     []string{"davidmunro@chromium.org", "cros-containers-dev@google.com"},
		SoftwareDeps: []string{"chrome", "vm_host"},
		Attr:         []string{"group:mainline", "informational"},
		Vars:         []string{"keepState"},
		Params: []testing.Param{
			// Parameters generated by params_test.go. DO NOT EDIT.
			{
				Name:              "artifact",
				ExtraData:         []string{"crostini_guest_images.tar"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Pre:               crostini.StartedByArtifact(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "artifact_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{"crostini_guest_images.tar"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Pre:               crostini.StartedByArtifact(),
				Timeout:           7 * time.Minute,
			}, {
				Name:      "download_stretch",
				ExtraAttr: []string{"informational"},
				Pre:       crostini.StartedByDownloadStretch(),
				Timeout:   10 * time.Minute,
			}, {
				Name:      "download_buster",
				ExtraAttr: []string{"informational"},
				Pre:       crostini.StartedByDownloadBuster(),
				Timeout:   10 * time.Minute,
			},
		},
	})
}

func TaskManager(ctx context.Context, s *testing.State) {
	tconn := s.PreValue().(crostini.PreData).TestAPIConn
	defer crostini.RunCrostiniPostTest(ctx, s.PreValue().(crostini.PreData))

	keyboard, err := input.Keyboard(ctx)
	if err != nil {
		s.Fatal("Couldn't get keyboard: ", err)
	}
	defer keyboard.Close()

	// \x1b == Escape
	if err := keyboard.Accel(ctx, "Search+\x1b"); err != nil {
		s.Fatal("Couldn't open task manager: ", err)
	}

	s.Log("Find row in task manager")
	taskManagerRootNode, err := ui.FindWithTimeout(ctx, tconn, ui.FindParams{
		Name:      "Task Manager",
		ClassName: "View",
	}, time.Second*10)
	if err != nil {
		s.Fatal("Couldn't find Task Manager node: ", err)
	}
	defer taskManagerRootNode.Release(ctx)

	entry, err := taskManagerRootNode.DescendantWithTimeout(ctx,
		ui.FindParams{Name: "Linux Virtual Machine: termina"}, time.Second*5)
	if err != nil {
		s.Fatal("Couldn't find node for Crostini: ", err)
	}
	entry.Release(ctx)

	if err := keyboard.Accel(ctx, "Ctrl+w"); err != nil {
		s.Fatal("Couldn't close task manager: ", err)
	}
}
