// Copyright 2021 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"context"
	"time"

	"chromiumos/tast/common/testexec"
	"chromiumos/tast/errors"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/testing"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         Notify,
		LacrosStatus: testing.LacrosVariantUnneeded,
		Desc:         "Tests crostini notification integration",
		Contacts:     []string{"sidereal@google.com", "cros-containers-dev@google.com"},
		SoftwareDeps: []string{"chrome", "vm_host"},
		Attr:         []string{"group:mainline"},
		Params: []testing.Param{
			// Parameters generated by params_test.go. DO NOT EDIT.
			{
				Name:              "buster_stable",
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Fixture:           "crostiniBuster",
				Timeout:           7 * time.Minute,
			}, {
				Name:              "buster_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Fixture:           "crostiniBuster",
				Timeout:           7 * time.Minute,
			}, {
				Name:              "bullseye_stable",
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Fixture:           "crostiniBullseye",
				Timeout:           7 * time.Minute,
			}, {
				Name:              "bullseye_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Fixture:           "crostiniBullseye",
				Timeout:           7 * time.Minute,
			},
		},
	})
}

type notification struct {
	ID       string `json:"id"`
	Type     string `json:"type"`
	Title    string `json:"title"`
	Message  string `json:"message"`
	Priority int    `json:"priority"`
	Progress int    `json:"progress"`
}

func Notify(ctx context.Context, s *testing.State) {
	const notificationTitle = "Some test notification"
	const notificationBody = "A notification body with lots more text"

	tconn := s.FixtValue().(crostini.FixtureData).Tconn
	cont := s.FixtValue().(crostini.FixtureData).Cont

	if err := cont.Command(ctx, "notify-send", notificationTitle, notificationBody).Run(testexec.DumpLogOnError); err != nil {
		s.Fatal("Failed to run notify-send: ", err)
	}

	if err := testing.Poll(ctx, func(ctx context.Context) error {
		var notifications []notification
		if err := tconn.Call(ctx,
			&notifications,
			`tast.promisify(chrome.autotestPrivate.getVisibleNotifications)`,
		); err != nil {
			return testing.PollBreak(errors.Wrap(err, "failed to get visible notifications"))
		}

		found := false
		for _, n := range notifications {
			if n.Title == notificationTitle && n.Message == notificationBody {
				found = true
				break
			}
		}
		if !found {
			errors.Errorf("%q %q in %q", notificationTitle, notificationBody, notifications)
		}
		return nil
	}, &testing.PollOptions{
		Timeout: 10 * time.Second,
	}); err != nil {
		s.Fatal("Did not find expected notification: ", err)
	}
}
