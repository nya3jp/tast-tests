// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"context"
	"regexp"
	"time"

	"chromiumos/tast/errors"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/local/testexec"
	"chromiumos/tast/local/vm"
	"chromiumos/tast/testing"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         PulseAudioBasic,
		Desc:         "Runs a basic test on the container's pusleaudio service using a pre-built crostini image",
		Contacts:     []string{"paulhsia@chromium.org", "cros-containers-dev@google.com", "chromeos-audio-bugs@google.com"},
		Attr:         []string{"group:mainline", "informational"},
		Vars:         []string{"keepState"},
		SoftwareDeps: []string{"chrome", "vm_host"},
		Params: []testing.Param{
			// Parameters generated by params_test.go. DO NOT EDIT.
			{
				Name:              "artifact",
				ExtraData:         []string{"crostini_guest_images.tar"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Pre:               crostini.StartedByArtifact(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "artifact_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{"crostini_guest_images.tar"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Pre:               crostini.StartedByArtifact(),
				Timeout:           7 * time.Minute,
			},
		},
	})
}

// testPulseRestart stops pulseaudio server by `stopOpt` and restarts the server by a playback stream.
func testPulseRestart(ctx context.Context, s *testing.State, cont *vm.Container, stopOpt string) error {
	s.Logf("%v pulseaudio service", stopOpt)
	// Use systemctl to control pulseaudio service.
	if err := cont.Command(ctx, "systemctl", " --user", stopOpt, "pulseaudio").Run(testexec.DumpLogOnError); err != nil {
		return errors.Wrapf(err, "fail to %s pulseaudio", stopOpt)
	}

	s.Log("Play zeros with ALSA device")
	if err := cont.Command(ctx, "aplay", "-f", "dat", "-d", " 3", "/dev/zero").Run(testexec.DumpLogOnError); err != nil {
		return errors.Wrap(err, "failed to playback with ALSA devices")
	}

	alsaSinksPattern := regexp.MustCompile("1\talsa_output.hw_0_0\tmodule-alsa-sink.c\ts16le 2ch 48000Hz\t(IDLE|SUSPENDED)\n")
	if out, err := cont.Command(ctx, "pactl", "list", "sinks", "short").Output(testexec.DumpLogOnError); err != nil {
		return errors.Wrap(err, "failed to list pulseaudio sinks")
	} else if res := alsaSinksPattern.Match(out); !res {
		return errors.Errorf("failed to load ALSA device to pulseaudio: %s", string(out))
	}

	return nil
}

func PulseAudioBasic(ctx context.Context, s *testing.State) {
	cont := s.PreValue().(crostini.PreData).Container
	defer crostini.RunCrostiniPostTest(ctx, s.PreValue().(crostini.PreData))

	s.Log("List ALSA output devices")
	if err := cont.Command(ctx, "aplay", "-l").Run(testexec.DumpLogOnError); err != nil {
		s.Fatal("Failed to list ALSA output devices: ", err)
	}

	for _, tc := range []struct {
		StopOpt string
	}{
		{StopOpt: "stop"}, {StopOpt: "restart"}, {StopOpt: "kill"},
	} {
		s.Run(ctx, tc.StopOpt, func(ctx context.Context, s *testing.State) {
			if err := testPulseRestart(ctx, s, cont, tc.StopOpt); err != nil {
				s.Error("Failed in testPulseRestart: ", err)
			}
		})
	}
}
