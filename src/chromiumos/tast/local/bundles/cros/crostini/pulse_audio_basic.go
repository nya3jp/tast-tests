// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"context"
	"regexp"
	"time"

	"chromiumos/tast/common/testexec"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/testing"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         PulseAudioBasic,
		LacrosStatus: testing.LacrosVariantUnneeded,
		Desc:         "Runs a basic test on the container's pusleaudio service using a pre-built crostini image",
		Contacts:     []string{"paulhsia@chromium.org", "cros-containers-dev@google.com", "chromeos-audio-bugs@google.com"},
		Attr:         []string{"group:mainline", "informational"},
		SoftwareDeps: []string{"chrome", "vm_host"},
		Params: []testing.Param{
			// Parameters generated by params_test.go. DO NOT EDIT.
			{
				Name:              "buster_stable",
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Fixture:           "crostiniBuster",
				Timeout:           7 * time.Minute,
			}, {
				Name:              "buster_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Fixture:           "crostiniBuster",
				Timeout:           7 * time.Minute,
			}, {
				Name:              "bullseye_stable",
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Fixture:           "crostiniBullseye",
				Timeout:           7 * time.Minute,
			}, {
				Name:              "bullseye_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Fixture:           "crostiniBullseye",
				Timeout:           7 * time.Minute,
			},
		},
	})
}

var alsaSinksPattern = regexp.MustCompile("1\talsa_output.hw_0_0\tmodule-alsa-sink.c\ts16le 2ch 48000Hz\t(IDLE|SUSPENDED)\n")

func PulseAudioBasic(ctx context.Context, s *testing.State) {
	cont := s.FixtValue().(crostini.FixtureData).Cont

	s.Log("List ALSA output devices")
	if err := cont.Command(ctx, "aplay", "-l").Run(testexec.DumpLogOnError); err != nil {
		s.Fatal("Failed to list ALSA output devices: ", err)
	}

	for _, stopOpt := range []string{"stop", "restart", "kill"} {
		// Stops pulseaudio server by `stopOpt` and restarts the server by a playback stream.
		s.Run(ctx, stopOpt, func(ctx context.Context, s *testing.State) {
			s.Logf("%s pulseaudio service", stopOpt)
			// Use systemctl to control pulseaudio service.
			if err := cont.Command(ctx, "systemctl", " --user", stopOpt, "pulseaudio").Run(testexec.DumpLogOnError); err != nil {
				s.Fatalf("Failed to %s pulseaudio: %v", stopOpt, err)
			}

			testing.ContextLog(ctx, "Play zeros with ALSA device")
			if err := cont.Command(ctx, "aplay", "-f", "dat", "-d", " 3", "/dev/zero").Run(testexec.DumpLogOnError); err != nil {
				s.Fatal("Failed to playback with ALSA devices: ", err)
			}

			if out, err := cont.Command(ctx, "pactl", "list", "sinks", "short").Output(testexec.DumpLogOnError); err != nil {
				s.Fatal("Failed to list pulseaudio sinks: ", err)
			} else if !alsaSinksPattern.Match(out) {
				s.Fatalf("Failed to load ALSA device to pulseaudio: %q", string(out))
			}
		})
	}
}
