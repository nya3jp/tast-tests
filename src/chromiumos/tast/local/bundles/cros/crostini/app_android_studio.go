// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"context"
	"strings"
	"time"

	"chromiumos/tast/ctxutil"
	"chromiumos/tast/local/chrome/uiauto"
	"chromiumos/tast/local/chrome/uiauto/nodewith"
	"chromiumos/tast/local/chrome/uiauto/role"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/local/crostini/ui/terminalapp"
	"chromiumos/tast/local/uidetection"
	"chromiumos/tast/testing"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         AppAndroidStudio,
		LacrosStatus: testing.LacrosVariantUnneeded,
		Desc:         "Test android studio in Terminal window",
		Contacts:     []string{"jinrongwu@google.com", "cros-containers-dev@google.com"},
		Attr:         []string{"group:mainline", "informational"},
		SoftwareDeps: []string{"chrome", "vm_host", "amd64"},
		Params: []testing.Param{
			// Parameters generated by params_test.go. DO NOT EDIT.
			{
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniAppTest,
				Fixture:           "crostiniBusterLargeContainer",
				Timeout:           15 * time.Minute,
			},
		},
	})
}
func AppAndroidStudio(ctx context.Context, s *testing.State) {
	tconn := s.FixtValue().(crostini.FixtureData).Tconn
	cr := s.FixtValue().(crostini.FixtureData).Chrome
	keyboard := s.FixtValue().(crostini.FixtureData).KB
	cont := s.FixtValue().(crostini.FixtureData).Cont

	// Use a shortened context for test operations to reserve time for cleanup.
	cleanupCtx := ctx
	ctx, cancel := ctxutil.Shorten(ctx, 5*time.Second)
	defer cancel()

	// Open Terminal app.
	terminalApp, err := terminalapp.Launch(ctx, tconn)
	if err != nil {
		s.Fatal("Failed to open Terminal app: ", err)
	}
	defer func() {
		// Restart crostini in the end to close all Android Studio related windows.
		// This could be skipped once UI test is implemented against Crostini apps.
		if err := terminalApp.RestartCrostini(keyboard, cont, cr.NormalizedUser())(cleanupCtx); err != nil {
			s.Log("Failed to restart crostini: ", err)
		}
	}()

	androidWindow := nodewith.Name("Import Android Studio Settings From...").Role(role.Window).First()
	if err := uiauto.Combine("Open android studio",
		terminalApp.RunCommand(keyboard, "/android-studio/bin/studio.sh &"),
		uiauto.New(tconn).WaitUntilExists(androidWindow),
		crostini.TakeAppScreenshot("android_studio"))(ctx); err != nil {
		s.Fatal("Failed to start android studio in Terminal: ", err)
	}

	newProjectWindow := nodewith.NameStartingWith("My Application [~/AndroidStudioProjects/MyApplication]").Role(role.Window).First()
	nextButton := uidetection.Word("Next")
	finishButton := uidetection.Word("Finish")
	ud := uidetection.NewDefault(tconn)
	if err := uiauto.Combine("Create a new project with defaults",
		// Two-letter words normally need an exact match.
		ud.LeftClick(uidetection.Word("OK").ExactMatch()),
		// The initialization process may take longer than the default timeout 60s.
		ud.WithTimeout(2*time.Minute).LeftClick(uidetection.TextBlock(strings.Split("Don't send", " "))),
		ud.LeftClick(nextButton),
		ud.WaitUntilExists(uidetection.TextBlock(strings.Split("Install Type", " "), uidetection.MaxEditDistance(2))),
		ud.LeftClick(nextButton),
		ud.WaitUntilExists(uidetection.TextBlock(strings.Split("Select UI Theme", " "))),
		ud.LeftClick(nextButton),
		ud.WaitUntilExists(uidetection.TextBlock(strings.Split("Verify Setting", " "))),
		ud.LeftClick(finishButton),
		// Installing SDK takes longer than the default timeout.
		ud.WithTimeout(5*time.Minute).WaitUntilExists(uidetection.TextBlock(strings.Split("SDK is up to date", " "))),
		ud.LeftClick(finishButton),
		ud.LeftClick(uidetection.TextBlock(strings.Split("Start a new Android Studio project", " "))),
		ud.WaitUntilExists(uidetection.TextBlock(strings.Split("Project Template", " "))),
		ud.LeftClick(nextButton.WithinA11yNode(nodewith.Name("Create New Project").HasClass("Widget"))),
		ud.LeftClick(finishButton),
		uiauto.New(tconn).WaitUntilExists(newProjectWindow),
	)(ctx); err != nil {
		s.Fatal("Failed to create a new project with defaults: ", err)
	}

	//TODO(jinrongwu): UI test on android studio code.
}
