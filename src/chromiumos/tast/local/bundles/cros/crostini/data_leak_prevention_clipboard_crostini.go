// Copyright 2021 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"context"
	"fmt"
	"time"

	"chromiumos/tast/local/crostini"
	"chromiumos/tast/testing"
)

const (
	utf8DataDLP = "Some data that gets copied üî• ‚ùÑ"

	// copyApplet is the data dependency needed to run a copy operation.
	copyAppletDLP      = "copy_applet.py"
	copyAppletTitleDLP = "gtk3_copy_demo"

	// pasteApplet is the data dependency needed to run a paste operation.
	pasteAppletDLP      = "paste_applet.py"
	pasteAppletTitleDLP = "gtk3_paste_demo"
)

// DLPPasteConfig holds the configuration for the paste half of the test.
type pasteDLPConfig struct {
	gdkBackend string
	cmdArgs    []string
}

// waylandDLPPasteConfig is the configuration needed to test pasting into
// a wayland application.
var waylandDLPPasteConfig = &pasteDLPConfig{
	gdkBackend: "wayland",
	cmdArgs:    []string{"env", "GDK_BACKEND=wayland", "python3", pasteAppletDLP},
}

// x11DLPPasteConfig is the configuration needed to test pasting into
// a x11 application.
var x11DLPPasteConfig = &pasteDLPConfig{
	gdkBackend: "x11",
	cmdArgs:    []string{"env", "GDK_BACKEND=x11", "python3", pasteAppletDLP},
}

// testDLPParameters contains all the data needed to run a single test iteration.
type testDLPParameters struct {
	Paste *pasteDLPConfig
}

func init() {

	testing.AddTest(&testing.Test{
		Func:         DataLeakPreventionClipboardCrostini,
		Desc:         "Test copy paste functionality",
		Contacts:     []string{"sidereal@google.com", "cros-containers-dev@google.com"},
		Attr:         []string{"group:mainline", "informational"},
		Vars:         []string{"keepState"},
		VarDeps:      []string{"ui.gaiaPoolDefault"},
		Data:         []string{copyAppletDLP, pasteAppletDLP},
		SoftwareDeps: []string{"chrome", "vm_host"},
		Params: []testing.Param{
			// Parameters generated by copy_paste_test.go. DO NOT EDIT.
			{
				Name:              "to_wayland_stretch_stable",
				ExtraData:         []string{crostini.GetContainerMetadataArtifact("stretch", false), crostini.GetContainerRootfsArtifact("stretch", false)},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Pre:               crostini.StartedByDlcStretch(),
				Timeout:           7 * time.Minute,
				Val: testDLPParameters{
					Paste: waylandDLPPasteConfig,
				},
			}, {
				Name:              "to_wayland_stretch_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{crostini.GetContainerMetadataArtifact("stretch", false), crostini.GetContainerRootfsArtifact("stretch", false)},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Pre:               crostini.StartedByDlcStretch(),
				Timeout:           7 * time.Minute,
				Val: testDLPParameters{
					Paste: waylandDLPPasteConfig,
				},
			}, {
				Name:              "to_wayland_buster_stable",
				ExtraData:         []string{crostini.GetContainerMetadataArtifact("buster", false), crostini.GetContainerRootfsArtifact("buster", false)},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Pre:               crostini.StartedByDlcBuster(),
				Timeout:           7 * time.Minute,
				Val: testDLPParameters{
					Paste: waylandDLPPasteConfig,
				},
			}, {
				Name:              "to_wayland_buster_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{crostini.GetContainerMetadataArtifact("buster", false), crostini.GetContainerRootfsArtifact("buster", false)},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Pre:               crostini.StartedByDlcBuster(),
				Timeout:           7 * time.Minute,
				Val: testDLPParameters{
					Paste: waylandDLPPasteConfig,
				},
			}, {
				Name:              "to_wayland_bullseye_stable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{crostini.GetContainerMetadataArtifact("bullseye", false), crostini.GetContainerRootfsArtifact("bullseye", false)},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Pre:               crostini.StartedByDlcBullseye(),
				Timeout:           7 * time.Minute,
				Val: testDLPParameters{
					Paste: waylandDLPPasteConfig,
				},
			}, {
				Name:              "to_wayland_bullseye_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{crostini.GetContainerMetadataArtifact("bullseye", false), crostini.GetContainerRootfsArtifact("bullseye", false)},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Pre:               crostini.StartedByDlcBullseye(),
				Timeout:           7 * time.Minute,
				Val: testDLPParameters{
					Paste: waylandDLPPasteConfig,
				},
			}, {
				Name:              "to_x11_stretch_stable",
				ExtraData:         []string{crostini.GetContainerMetadataArtifact("stretch", false), crostini.GetContainerRootfsArtifact("stretch", false)},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Pre:               crostini.StartedByDlcStretch(),
				Timeout:           7 * time.Minute,
				Val: testDLPParameters{
					Paste: x11DLPPasteConfig,
				},
			}, {
				Name:              "to_x11_stretch_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{crostini.GetContainerMetadataArtifact("stretch", false), crostini.GetContainerRootfsArtifact("stretch", false)},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Pre:               crostini.StartedByDlcStretch(),
				Timeout:           7 * time.Minute,
				Val: testDLPParameters{
					Paste: x11DLPPasteConfig,
				},
			}, {
				Name:              "to_x11_buster_stable",
				ExtraData:         []string{crostini.GetContainerMetadataArtifact("buster", false), crostini.GetContainerRootfsArtifact("buster", false)},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Pre:               crostini.StartedByDlcBuster(),
				Timeout:           7 * time.Minute,
				Val: testDLPParameters{
					Paste: x11DLPPasteConfig,
				},
			}, {
				Name:              "to_x11_buster_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{crostini.GetContainerMetadataArtifact("buster", false), crostini.GetContainerRootfsArtifact("buster", false)},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Pre:               crostini.StartedByDlcBuster(),
				Timeout:           7 * time.Minute,
				Val: testDLPParameters{
					Paste: x11DLPPasteConfig,
				},
			}, {
				Name:              "to_x11_bullseye_stable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{crostini.GetContainerMetadataArtifact("bullseye", false), crostini.GetContainerRootfsArtifact("bullseye", false)},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Pre:               crostini.StartedByDlcBullseye(),
				Timeout:           7 * time.Minute,
				Val: testDLPParameters{
					Paste: x11DLPPasteConfig,
				},
			}, {
				Name:              "to_x11_bullseye_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{crostini.GetContainerMetadataArtifact("bullseye", false), crostini.GetContainerRootfsArtifact("bullseye", false)},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Pre:               crostini.StartedByDlcBullseye(),
				Timeout:           7 * time.Minute,
				Val: testDLPParameters{
					Paste: x11DLPPasteConfig,
				},
			},
		},
	})
}

func DataLeakPreventionClipboardCrostini(ctx context.Context, s *testing.State) {
	pre := s.PreValue().(crostini.PreData)
	param := s.Param().(testDLPParameters)
	tconn := pre.TestAPIConn
	cont := pre.Container
	defer crostini.RunCrostiniPostTest(ctx, s.PreValue().(crostini.PreData))

	s.Log("Copying testing applets to container")
	if err := cont.PushFile(ctx, s.DataPath(copyAppletDLP), copyAppletDLP); err != nil {
		s.Fatal("Failed to push copy applet to container: ", err)
	}
	if err := cont.PushFile(ctx, s.DataPath(pasteAppletDLP), pasteAppletDLP); err != nil {
		s.Fatal("Failed to push paste applet to container: ", err)
	}

	// Add the names of the backends used by each part of the test to differentiate the data used by each test run.
	copiedData := fmt.Sprintf("%v to %v %s", param.Copy.gdkBackend, param.Paste.gdkBackend, utf8DataDLP)

	output, err := crostini.RunWindowedApp(ctx, tconn, cont, pre.Keyboard, 30*time.Second, nil, false, pasteAppletTitleDLP, param.Paste.cmdArgs)
	if err != nil {
		s.Fatal("Failed to run paste application: ", err)
	}

	if output != copiedData {
		s.Fatalf("Unexpected paste output: got %q, want %q", output, copiedData)
	}
}
