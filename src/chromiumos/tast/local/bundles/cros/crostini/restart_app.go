// Copyright 2021 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"context"
	"regexp"
	"time"

	"chromiumos/tast/ctxutil"
	"chromiumos/tast/errors"
	"chromiumos/tast/local/chrome"
	"chromiumos/tast/local/chrome/ui"
	"chromiumos/tast/local/chrome/ui/launcher"
	"chromiumos/tast/local/chrome/ui/mouse"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/local/crostini/ui/terminalapp"
	"chromiumos/tast/local/input"
	"chromiumos/tast/local/vm"
	"chromiumos/tast/testing"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         RestartApp,
		Desc:         "Test restarting Crostini by launching a linux app",
		Contacts:     []string{"jinrongwu@google.com", "cros-containers-dev@google.com"},
		Attr:         []string{"group:mainline", "informational"},
		Vars:         []string{"keepState"},
		SoftwareDeps: []string{"chrome", "vm_host"},
		Params: []testing.Param{
			// Parameters generated by params_test.go. DO NOT EDIT.
			{
				ExtraData:         []string{vm.ArtifactData(), crostini.GetContainerMetadataArtifact("buster", true), crostini.GetContainerRootfsArtifact("buster", true)},
				ExtraHardwareDeps: crostini.CrostiniAppTest,
				Pre:               crostini.StartedByComponentBusterLargeContainer(),
				Timeout:           15 * time.Minute,
			},
		},
	})
}
func RestartApp(ctx context.Context, s *testing.State) {
	tconn := s.PreValue().(crostini.PreData).TestAPIConn
	keyboard := s.PreValue().(crostini.PreData).Keyboard
	cont := s.PreValue().(crostini.PreData).Container

	// Use a shortened context for test operations to reserve time for cleanup.
	cleanupCtx := ctx
	ctx, cancel := ctxutil.Shorten(ctx, 90*time.Second)
	defer cancel()
	defer crostini.RunCrostiniPostTest(cleanupCtx, s.PreValue().(crostini.PreData))

	terminalApp, err := terminalapp.Launch(ctx, tconn)
	if err != nil {
		s.Fatal("Failed to lauch terminal: ", err)
	}

	if err := terminalApp.ShutdownCrostini(cont)(ctx); err != nil {
		s.Fatal("Failed to shutdown crostini: ", err)
	}

	// Launch gedit.
	if err := launchGedit(ctx, keyboard, tconn); err != nil {
		s.Fatal("Failed to launch gedit after shutdown Crostini: ", err)
	}
}

func launchGedit(ctx context.Context, keyboard *input.KeyboardEventWriter, tconn *chrome.TestConn) error {
	if err := launcher.SearchAndLaunchWithQuery(ctx, tconn, "t", "Text Editor"); err != nil {
		return errors.Wrap(err, "failed to launch gedit")
	}

	// Find the app window.
	var windowFindParams = ui.FindParams{
		Role:       ui.RoleTypeWindow,
		Attributes: map[string]interface{}{"name": regexp.MustCompile(`.* - gedit`)},
	}
	appWindow, err := ui.FindWithTimeout(ctx, tconn, windowFindParams, 3*time.Minute)
	if err != nil {
		return errors.Wrap(err, "failed to find the app window")
	}
	defer appWindow.Release(ctx)

	// Sometimes left click could not focus on the new window. Moving the mouse first to make sure the cursor goes to the app window.
	if err := mouse.Move(ctx, tconn, appWindow.Location.CenterPoint(), 5*time.Second); err != nil {
		return errors.Wrap(err, "failed to move to the center of the app window")
	}

	// Left click the app window.
	if err := appWindow.LeftClick(ctx); err != nil {
		return errors.Wrap(err, "failed left click on the app window")
	}

	// Press ctrl+W twice to exit window.
	if err = keyboard.Accel(ctx, "ctrl+W"); err != nil {
		return errors.Wrap(err, "failed to press ctrl+W on the app window")
	}
	if err = keyboard.Accel(ctx, "ctrl+W"); err != nil {
		return errors.Wrap(err, "failed to press ctrl+W on the app window")
	}

	if err = ui.WaitUntilGone(ctx, tconn, windowFindParams, 15*time.Second); err != nil {
		return errors.Wrap(err, "failed to close Gedit window")
	}

	return nil
}
