// Copyright 2021 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"context"
	"regexp"
	"time"

	"chromiumos/tast/errors"
	"chromiumos/tast/local/chrome"
	"chromiumos/tast/local/chrome/uiauto"
	"chromiumos/tast/local/chrome/uiauto/launcher"
	"chromiumos/tast/local/chrome/uiauto/nodewith"
	"chromiumos/tast/local/chrome/uiauto/role"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/local/crostini/ui/terminalapp"
	"chromiumos/tast/local/input"
	"chromiumos/tast/testing"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         RestartApp,
		LacrosStatus: testing.LacrosVariantUnneeded,
		Desc:         "Test restarting Crostini by launching a linux app",
		Contacts:     []string{"jinrongwu@google.com", "cros-containers-dev@google.com"},
		Attr:         []string{"group:mainline", "informational"},
		SoftwareDeps: []string{"chrome", "vm_host"},
		Params: []testing.Param{
			// Parameters generated by params_test.go. DO NOT EDIT.
			{
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniAppTest,
				Fixture:           "crostiniBusterLargeContainer",
				Timeout:           15 * time.Minute,
			},
		},
	})
}
func RestartApp(ctx context.Context, s *testing.State) {
	tconn := s.FixtValue().(crostini.FixtureData).Tconn
	keyboard := s.FixtValue().(crostini.FixtureData).KB
	cont := s.FixtValue().(crostini.FixtureData).Cont

	terminalApp, err := terminalapp.Launch(ctx, tconn)
	if err != nil {
		s.Fatal("Failed to lauch terminal: ", err)
	}

	if err := terminalApp.ShutdownCrostini(cont)(ctx); err != nil {
		s.Fatal("Failed to shutdown crostini: ", err)
	}

	// Launch gedit.
	if err := launchGedit(ctx, keyboard, tconn); err != nil {
		s.Fatal("Failed to launch gedit after shutdown Crostini: ", err)
	}
}

func launchGedit(ctx context.Context, keyboard *input.KeyboardEventWriter, tconn *chrome.TestConn) error {
	if err := launcher.SearchAndLaunchWithQuery(tconn, keyboard, "t", "Text Editor")(ctx); err != nil {
		return errors.Wrap(err, "failed to launch gedit")
	}

	ui := uiauto.New(tconn)
	appWindow := nodewith.NameRegex(regexp.MustCompile(`.* - gedit`)).Role(role.Window).First()
	return uiauto.Combine("click and close Gedit",
		// Focus on the Gedit window.
		ui.LeftClick(appWindow),

		// Press ctrl+W twice to exit window.
		keyboard.AccelAction("ctrl+W"),
		keyboard.AccelAction("ctrl+W"),

		// Check window close.
		ui.WaitUntilGone(appWindow))(ctx)
}
