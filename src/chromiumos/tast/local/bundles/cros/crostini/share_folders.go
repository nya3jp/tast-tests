// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"context"
	"os"
	"path/filepath"
	"time"

	"chromiumos/tast/ctxutil"
	"chromiumos/tast/errors"
	"chromiumos/tast/local/bundles/cros/crostini/listset"
	"chromiumos/tast/local/chrome"
	"chromiumos/tast/local/chrome/uiauto"
	"chromiumos/tast/local/chrome/uiauto/faillog"
	"chromiumos/tast/local/chrome/uiauto/filesapp"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/local/crostini/ui/settings"
	"chromiumos/tast/local/crostini/ui/sharedfolders"
	"chromiumos/tast/local/vm"
	"chromiumos/tast/testing"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         ShareFolders,
		LacrosStatus: testing.LacrosVariantUnneeded,
		Desc:         "Test sharing folders with Crostini",
		Contacts:     []string{"jinrongwu@google.com", "cros-containers-dev@google.com"},
		Attr:         []string{"group:mainline", "informational"},
		SoftwareDeps: []string{"chrome", "vm_host"},
		Params: []testing.Param{
			// Parameters generated by params_test.go. DO NOT EDIT.
			{
				Name:              "buster_stable",
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Fixture:           "crostiniBuster",
				Timeout:           7 * time.Minute,
			}, {
				Name:              "buster_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Fixture:           "crostiniBuster",
				Timeout:           7 * time.Minute,
			}, {
				Name:              "bullseye_stable",
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Fixture:           "crostiniBullseye",
				Timeout:           7 * time.Minute,
			}, {
				Name:              "bullseye_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Fixture:           "crostiniBullseye",
				Timeout:           7 * time.Minute,
			},
		},
	})
}

func ShareFolders(ctx context.Context, s *testing.State) {
	tconn := s.FixtValue().(crostini.FixtureData).Tconn
	cont := s.FixtValue().(crostini.FixtureData).Cont
	cr := s.FixtValue().(crostini.FixtureData).Chrome

	// Use a shortened context for unshare all folders.
	cleanupCtx := ctx
	ctx, cancel := ctxutil.Shorten(ctx, 5*time.Second)
	defer cancel()

	sharedFolders := sharedfolders.NewSharedFolders(tconn)
	// Clean up shared folders in the end.
	defer func() {
		if err := sharedFolders.UnshareAll(cont, cr)(cleanupCtx); err != nil {
			s.Error("Failed to unshare all folders: ", err)
		}
	}()

	// Create three folders in Downloads.
	const (
		folder1 = "testShareFolder1"
		folder2 = "testShareFolder2"
		folder3 = "testShareFolder3"

		// Shared folder name displayed on Settings page. It is actually a path, e.g, "My files › Downloads › foldername".
		sharedFolder1 = sharedfolders.SharedDownloads + " › " + folder1
		sharedFolder2 = sharedfolders.SharedDownloads + " › " + folder2

		// This folder is not shared.
		// It is created to test that non-shared folders should not be shared while other folders are shared.
		sharedFolder3 = sharedfolders.SharedDownloads + " › " + folder3
	)
	for _, folder := range []string{folder1, folder2, folder3} {
		path := filepath.Join(filesapp.DownloadPath, folder)
		if err := os.MkdirAll(path, 0755); err != nil {
			s.Fatalf("Failed to create %s in Downloads: %q", folder, err)
		}
		defer os.RemoveAll(path)
	}

	// Open Files app.
	filesApp, err := filesapp.Launch(ctx, tconn)
	if err != nil {
		s.Fatal("Failed to open Files app: ", err)
	}

	steps := []uiauto.Action{filesApp.OpenDownloads()}
	// Right click two folders and select Share with Linux.
	for _, folder := range []string{folder1, folder2} {
		steps = append(steps,
			filesApp.ClickContextMenuItem(folder, sharedfolders.ShareWithLinux),
			sharedFolders.AddFolder(sharedfolders.SharedDownloads+" › "+folder))

	}
	if err := uiauto.Combine("click Share with Linux on test folders", steps...)(ctx); err != nil {
		s.Fatal("Failed to share folders: ", err)
	}

	st, err := settings.OpenLinuxSettings(ctx, tconn, cr, settings.ManageSharedFolders)
	if err != nil {
		s.Fatal("Failed to open Manage shared folders: ", err)
	}
	defer st.Close(ctx)

	defer faillog.DumpUITreeOnError(ctx, s.OutDir(), s.HasError, tconn)

	// Check results after sharing two folders.
	if err := checkShareFoldersResults(ctx, tconn, cont, st, []string{folder1, folder2}, []string{sharedFolder1, sharedFolder2}); err != nil {
		s.Fatal("Failed to check share results after sharing two folders: ", err)
	}

	// Unshare folder1.
	if err := st.UnshareFolder(ctx, sharedFolder1); err != nil {
		s.Fatalf("Failed to unshare %s: %s", sharedFolder1, err)
	}

	// Check results after unsharing one folder.
	if err := checkShareFoldersResults(ctx, tconn, cont, st, []string{folder2}, []string{sharedFolder2}); err != nil {
		s.Fatal("Failed to check share results after unshare one folder: ", err)
	}
}

func checkShareFoldersResults(ctx context.Context, tconn *chrome.TestConn, cont *vm.Container, s *settings.Settings, testFolders, sharedFolders []string) error {
	// Check shared folders on the Settings app.
	sharedFoldersList, err := s.GetSharedFolders(ctx)
	if err != nil {
		return errors.Wrap(err, "failed to find the shared folders list")
	}
	if err := listset.CheckListsMatch(sharedFoldersList, sharedFolders...); err != nil {
		return errors.Wrap(err, "failed to verify shared folders list")
	}

	// Check the file list in the container.
	if err := testing.Poll(ctx, func(ctx context.Context) error {
		list, err := cont.GetFileList(ctx, sharedfolders.MountPathDownloads)
		if err != nil {
			return err
		}
		if err := listset.CheckListsMatch(list, testFolders...); err != nil {
			return err
		}
		return nil
	}, &testing.PollOptions{Timeout: 5 * time.Second}); err != nil {
		return errors.Wrap(err, "failed to verify file list in container")
	}

	return nil
}
