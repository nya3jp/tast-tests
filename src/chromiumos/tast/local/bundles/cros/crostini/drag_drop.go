// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"bytes"
	"context"
	"io/ioutil"
	"os"
	"path/filepath"
	"time"

	"chromiumos/tast/errors"
	"chromiumos/tast/local/chrome"
	"chromiumos/tast/local/chrome/ash"
	"chromiumos/tast/local/chrome/ui/filesapp"
	"chromiumos/tast/local/chrome/ui/mouse"
	"chromiumos/tast/local/coords"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/local/crostini/ui/sharedfolders"
	"chromiumos/tast/local/testexec"
	"chromiumos/tast/testing"
)

const (
	// dragApplet and dropApplet are data dependencies.
	dragApplet      = "drag_applet.py"
	dragAppletDest  = "/home/testuser/drag_applet.py"
	dragAppletTitle = "gtk3_drag_demo"

	dropApplet      = "drop_applet.py"
	dropAppletDest  = "/home/testuser/drop_applet.py"
	dropAppletTitle = "gtk3_drop_demo"

	filesappFileName = "filesapp.txt"
	crostiniFileName = "crostini.txt"
)

func init() {

	testing.AddTest(&testing.Test{
		Func:         DragDrop,
		Desc:         "Test drag drop functionality in both directions between FilesApp and crostini",
		Contacts:     []string{"joelhockey@google.com", "cros-containers-dev@google.com"},
		Attr:         []string{"group:mainline", "informational"},
		Vars:         []string{"keepState"},
		Data:         []string{dragApplet, dropApplet},
		SoftwareDeps: []string{"chrome", "vm_host"},
		Params: []testing.Param{
			// Parameters generated by params_test.go. DO NOT EDIT.
			{
				Name:              "stretch_amd64_stable",
				ExtraData:         []string{"crostini_vm_amd64.zip", "crostini_test_container_metadata_stretch_amd64.tar.xz", "crostini_test_container_rootfs_stretch_amd64.tar.xz"},
				ExtraSoftwareDeps: []string{"amd64"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Pre:               crostini.StartedByComponentStretch(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "stretch_amd64_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{"crostini_vm_amd64.zip", "crostini_test_container_metadata_stretch_amd64.tar.xz", "crostini_test_container_rootfs_stretch_amd64.tar.xz"},
				ExtraSoftwareDeps: []string{"amd64"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Pre:               crostini.StartedByComponentStretch(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "stretch_arm_stable",
				ExtraData:         []string{"crostini_vm_arm.zip", "crostini_test_container_metadata_stretch_arm.tar.xz", "crostini_test_container_rootfs_stretch_arm.tar.xz"},
				ExtraSoftwareDeps: []string{"arm"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Pre:               crostini.StartedByComponentStretch(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "stretch_arm_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{"crostini_vm_arm.zip", "crostini_test_container_metadata_stretch_arm.tar.xz", "crostini_test_container_rootfs_stretch_arm.tar.xz"},
				ExtraSoftwareDeps: []string{"arm"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Pre:               crostini.StartedByComponentStretch(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "buster_amd64_stable",
				ExtraData:         []string{"crostini_vm_amd64.zip", "crostini_test_container_metadata_buster_amd64.tar.xz", "crostini_test_container_rootfs_buster_amd64.tar.xz"},
				ExtraSoftwareDeps: []string{"amd64"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Pre:               crostini.StartedByComponentBuster(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "buster_amd64_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{"crostini_vm_amd64.zip", "crostini_test_container_metadata_buster_amd64.tar.xz", "crostini_test_container_rootfs_buster_amd64.tar.xz"},
				ExtraSoftwareDeps: []string{"amd64"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Pre:               crostini.StartedByComponentBuster(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "buster_arm_stable",
				ExtraData:         []string{"crostini_vm_arm.zip", "crostini_test_container_metadata_buster_arm.tar.xz", "crostini_test_container_rootfs_buster_arm.tar.xz"},
				ExtraSoftwareDeps: []string{"arm"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Pre:               crostini.StartedByComponentBuster(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "buster_arm_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{"crostini_vm_arm.zip", "crostini_test_container_metadata_buster_arm.tar.xz", "crostini_test_container_rootfs_buster_arm.tar.xz"},
				ExtraSoftwareDeps: []string{"arm"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Pre:               crostini.StartedByComponentBuster(),
				Timeout:           7 * time.Minute,
			},
		},
	})
}

func DragDrop(ctx context.Context, s *testing.State) {
	pre := s.PreValue().(crostini.PreData)
	tconn := pre.TestAPIConn
	cont := pre.Container
	defer crostini.RunCrostiniPostTest(ctx, s.PreValue().(crostini.PreData))

	s.Log("Copying testing applets to container")
	if err := cont.PushFile(ctx, s.DataPath(dragApplet), dragAppletDest); err != nil {
		s.Fatal("Failed to push drag applet to container: ", err)
	}
	if err := cont.PushFile(ctx, s.DataPath(dropApplet), dropAppletDest); err != nil {
		s.Fatal("Failed to push drop applet to container: ", err)
	}

	// Setup the test file.
	testFileLocation := filepath.Join(filesapp.MyFilesPath, filesappFileName)
	if err := ioutil.WriteFile(testFileLocation, []byte(filesappFileName), 0644); err != nil {
		s.Fatalf("Creating file %s failed: %s", testFileLocation, err)
	}
	defer os.Remove(testFileLocation)

	// Open the Files App left-snapped.
	files, err := filesapp.Launch(ctx, tconn)
	if err != nil {
		s.Fatal("Launching the Files App failed: ", err)
	}
	defer files.Release(ctx)
	_, err = setWindowSnapped(ctx, tconn, "Files - My files", ash.WindowStateLeftSnapped)
	if err != nil {
		s.Fatal("Failed to set Files App left-snapped: ", err)
	}

	// Open drop_applet.py right-snapped.
	s.Logf("Starting %s", dropAppletTitle)
	cmdArgs := []string{"python3", dropApplet}
	cmd := cont.Command(ctx, cmdArgs...)
	var buf bytes.Buffer
	cmd.Stdout = &buf
	if err := cmd.Start(); err != nil {
		s.Fatalf("Failed to start command %v: %v", cmdArgs, err)
	}
	dropAppletWindow, err := setWindowSnapped(ctx, tconn, dropAppletTitle, ash.WindowStateRightSnapped)
	if err != nil {
		s.Fatal("Failed to set drop app righ-snapped: ", err)
	}

	// Drag and drop file from FilesApp to drop app.
	dropPoint := dropAppletWindow.BoundsInRoot.CenterPoint()
	if err = files.DragAndDropFile(ctx, tconn, filesappFileName, dropPoint); err != nil {
		s.Fatal("Failed to drag and drop: ", err)
	}

	// Wait for drop app to close and write dropped filename.
	if err = cmd.Wait(testexec.DumpLogOnError); err != nil {
		s.Fatal("Unexpected wait error: ", err)
	}
	output := string(buf.Bytes())
	expected := "['file:///mnt/chromeos/MyFiles/filesapp.txt']"
	if output != expected {
		s.Fatalf("Unexpected drop output: got %q, want %q", output, expected)
	}

	// Validate file is shared.
	contPath := filepath.Join(sharedfolders.MountPathMyFiles, filesappFileName)
	if err = cont.CheckFileContent(ctx, contPath, filesappFileName); err != nil {
		s.Fatalf("Drag and drop file %s not shared with VM: %v", filesappFileName, err)
	}

	// Drag and drop file from drag app to FilesApp.
	if err = cont.WriteFile(ctx, crostiniFileName, crostiniFileName); err != nil {
		s.Fatal("Create container file failed: ", err)
	}
	defer cont.RemoveAll(ctx, crostiniFileName)
	defer os.Remove(filepath.Join(filesapp.MyFilesPath, crostiniFileName))

	s.Logf("Starting %s", dragAppletTitle)
	cmdArgs = []string{"python3", dragApplet}
	cmd = cont.Command(ctx, cmdArgs...)
	if err := cmd.Start(); err != nil {
		s.Fatalf("Failed to start command %v: %v", cmdArgs, err)
	}
	defer cmd.Wait(testexec.DumpLogOnError)
	dragAppletWindow, err := setWindowSnapped(ctx, tconn, dragAppletTitle, ash.WindowStateRightSnapped)
	if err != nil {
		s.Fatal("Failed to set drag app righ-snapped: ", err)
	}

	dragPoint := dragAppletWindow.BoundsInRoot.CenterPoint()
	dropPoint = coords.Point{dragAppletWindow.BoundsInRoot.Left - 100, 400}
	s.Log("f")
	if err = mouse.Drag(ctx, tconn, dragPoint, dropPoint, time.Second); err != nil {
		s.Fatal("Failed to drag and drop: ", err)
	}

	// Validate file is copied to FilesApp MyFiles.
	if err = files.WaitForFile(ctx, crostiniFileName, 10*time.Second); err != nil {
		s.Fatal("Failed to find the test file in Files app: ", err)
	}
	b, err := ioutil.ReadFile(filepath.Join(filesapp.MyFilesPath, crostiniFileName))
	if err != nil {
		s.Fatal("Failed to read the file in Chrome OS: ", err)
	}
	if string(b) != crostiniFileName {
		s.Fatalf("Failed to verify the content of the file: got %s, want %s", string(b), crostiniFileName)
	}
}

// setWindowSnapped sets the window with specified title right-snapped.
func setWindowSnapped(ctx context.Context, tconn *chrome.TestConn, title string, state ash.WindowStateType) (*ash.Window, error) {
	var window *ash.Window
	if err := ash.WaitForCondition(ctx, tconn, func(w *ash.Window) bool {
		window = w
		return w.Title == title
	}, &testing.PollOptions{Timeout: 30 * time.Second}); err != nil {
		return nil, errors.Wrapf(err, "failed to find window %q", title)
	}
	if err := ash.SetWindowStateAndWait(ctx, tconn, window.ID, state); err != nil {
		return nil, errors.Wrapf(err, "failed to set app %q right-snapped", title)
	}
	return ash.GetWindow(ctx, tconn, window.ID)
}
