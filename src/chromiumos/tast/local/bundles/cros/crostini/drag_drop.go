// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"bytes"
	"context"
	"io/ioutil"
	"os"
	"path/filepath"
	"time"

	"chromiumos/tast/local/chrome/ash"
	"chromiumos/tast/local/chrome/ui/filesapp"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/local/crostini/ui/sharedfolders"
	"chromiumos/tast/local/testexec"
	"chromiumos/tast/testing"
)

const (
	// dropApplet is the data dependency needed to run a drop operation.
	dropApplet      = "drop_applet.py"
	dropAppletTitle = "gtk3_drop_demo"
)

func init() {

	testing.AddTest(&testing.Test{
		Func:         DragDrop,
		Desc:         "Drag a file from FilesApp and drop in crostini applet",
		Contacts:     []string{"joelhockey@google.com", "cros-containers-dev@google.com"},
		Attr:         []string{"group:mainline", "informational"},
		Vars:         []string{"keepState"},
		Data:         []string{dropApplet},
		SoftwareDeps: []string{"chrome", "vm_host"},
		Params: []testing.Param{
			// Parameters generated by params_test.go. DO NOT EDIT.
			{
				Name:              "stretch_amd64_stable",
				ExtraData:         []string{"crostini_vm_amd64.zip", "crostini_test_container_metadata_stretch_amd64.tar.xz", "crostini_test_container_rootfs_stretch_amd64.tar.xz"},
				ExtraSoftwareDeps: []string{"amd64"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Pre:               crostini.StartedByComponentStretch(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "stretch_amd64_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{"crostini_vm_amd64.zip", "crostini_test_container_metadata_stretch_amd64.tar.xz", "crostini_test_container_rootfs_stretch_amd64.tar.xz"},
				ExtraSoftwareDeps: []string{"amd64"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Pre:               crostini.StartedByComponentStretch(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "stretch_arm_stable",
				ExtraData:         []string{"crostini_vm_arm.zip", "crostini_test_container_metadata_stretch_arm.tar.xz", "crostini_test_container_rootfs_stretch_arm.tar.xz"},
				ExtraSoftwareDeps: []string{"arm"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Pre:               crostini.StartedByComponentStretch(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "stretch_arm_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{"crostini_vm_arm.zip", "crostini_test_container_metadata_stretch_arm.tar.xz", "crostini_test_container_rootfs_stretch_arm.tar.xz"},
				ExtraSoftwareDeps: []string{"arm"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Pre:               crostini.StartedByComponentStretch(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "buster_amd64_stable",
				ExtraData:         []string{"crostini_vm_amd64.zip", "crostini_test_container_metadata_buster_amd64.tar.xz", "crostini_test_container_rootfs_buster_amd64.tar.xz"},
				ExtraSoftwareDeps: []string{"amd64"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Pre:               crostini.StartedByComponentBuster(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "buster_amd64_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{"crostini_vm_amd64.zip", "crostini_test_container_metadata_buster_amd64.tar.xz", "crostini_test_container_rootfs_buster_amd64.tar.xz"},
				ExtraSoftwareDeps: []string{"amd64"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Pre:               crostini.StartedByComponentBuster(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "buster_arm_stable",
				ExtraData:         []string{"crostini_vm_arm.zip", "crostini_test_container_metadata_buster_arm.tar.xz", "crostini_test_container_rootfs_buster_arm.tar.xz"},
				ExtraSoftwareDeps: []string{"arm"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Pre:               crostini.StartedByComponentBuster(),
				Timeout:           7 * time.Minute,
			}, {
				Name:              "buster_arm_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraData:         []string{"crostini_vm_arm.zip", "crostini_test_container_metadata_buster_arm.tar.xz", "crostini_test_container_rootfs_buster_arm.tar.xz"},
				ExtraSoftwareDeps: []string{"arm"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Pre:               crostini.StartedByComponentBuster(),
				Timeout:           7 * time.Minute,
			},
		},
	})
}

func DragDrop(ctx context.Context, s *testing.State) {
	pre := s.PreValue().(crostini.PreData)
	tconn := pre.TestAPIConn
	cont := pre.Container
	defer crostini.RunCrostiniPostTest(ctx, s.PreValue().(crostini.PreData))

	s.Log("Copying testing applets to container")
	if err := cont.PushFile(ctx, s.DataPath(dropApplet), dropApplet); err != nil {
		s.Fatal("Failed to push drop applet to container: ", err)
	}

	// Setup the test file.
	const fileDragFromFilesapp = "filesapp.txt"
	path := filepath.Join(filesapp.MyFilesPath, fileDragFromFilesapp)
	if err := ioutil.WriteFile(path, []byte(fileDragFromFilesapp), 0644); err != nil {
		s.Fatalf("Creating file %s failed: %s", path, err)
	}
	defer os.Remove(path)

	// Open the Files App left-snapped.
	files, err := filesapp.Launch(ctx, tconn)
	if err != nil {
		s.Fatal("Launching the Files App failed: ", err)
	}
	defer files.Release(ctx)
	var filesappWindow *ash.Window
	if err := ash.WaitForCondition(ctx, tconn, func(w *ash.Window) bool {
		filesappWindow = w
		return w.Title == "Files - My files"
	}, &testing.PollOptions{Timeout: 30 * time.Second}); err != nil {
		s.Fatal("Failed to find Files App: ", err)
	}
	if err := ash.SetWindowStateAndWait(ctx, tconn, filesappWindow.ID, ash.WindowStateLeftSnapped); err != nil {
		s.Fatal("Failed to set Files App left-snapped: ", err)
	}

	// Open drop_applet.py right-snapped.
	s.Logf("Starting %s", dropAppletTitle)
	cmdArgs := []string{"python3", dropApplet}
	cmd := cont.Command(ctx, cmdArgs...)
	var buf bytes.Buffer
	cmd.Stdout = &buf
	if err := cmd.Start(); err != nil {
		s.Fatal("Failed to start command ", cmdArgs)
	}
	var dropAppletWindow *ash.Window
	if err := ash.WaitForCondition(ctx, tconn, func(w *ash.Window) bool {
		dropAppletWindow = w
		return w.Title == dropAppletTitle
	}, &testing.PollOptions{Timeout: 30 * time.Second}); err != nil {
		s.Fatalf("Failed to find window %q while running %v: %v", dropAppletTitle, cmdArgs, err)
	}
	if err := ash.SetWindowStateAndWait(ctx, tconn, dropAppletWindow.ID, ash.WindowStateRightSnapped); err != nil {
		s.Fatal("Failed to set drop app right-snapped: ", err)
	}
	if dropAppletWindow, err = ash.GetWindow(ctx, tconn, dropAppletWindow.ID); err != nil {
		s.Fatal("Failed to get bounds for righ-snapped drop app: ", err)
	}

	// Drag and drop file.
	dropPoint := dropAppletWindow.BoundsInRoot.CenterPoint()
	if err = files.DragAndDropFile(ctx, fileDragFromFilesapp, dropPoint); err != nil {
		s.Fatal("Failed to drag and drop: ", err)
	}

	// Wait for drop app to close and write dropped filename.
	if err = cmd.Wait(testexec.DumpLogOnError); err != nil {
		s.Fatal("Unexpected wait error: ", err)
	}
	output := string(buf.Bytes())
	expected := "['file:///mnt/chromeos/MyFiles/test.txt']"
	if output != expected {
		s.Fatalf("Unexpected drop output: got %q, want %q", output, expected)
	}

	// Validate file is shared.
	contPath := filepath.Join(sharedfolders.MountPathMyFiles, fileDragFromFilesapp)
	if err = cont.CheckFileContent(ctx, contPath, fileDragFromFilesapp); err != nil {
		s.Fatalf("Drag and drop file %s not shared with VM: %v", fileDragFromFilesapp, err)
	}
}
