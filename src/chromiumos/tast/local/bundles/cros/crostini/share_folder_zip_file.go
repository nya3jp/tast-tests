// Copyright 2021 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"context"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"time"

	"chromiumos/tast/common/testexec"
	"chromiumos/tast/ctxutil"
	"chromiumos/tast/errors"
	"chromiumos/tast/local/bundles/cros/crostini/cleanupfolder"
	"chromiumos/tast/local/chrome/uiauto"
	"chromiumos/tast/local/chrome/uiauto/filesapp"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/local/crostini/ui/sharedfolders"
	"chromiumos/tast/local/crostini/ui/terminalapp"
	"chromiumos/tast/testing"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         ShareFolderZipFile,
		LacrosStatus: testing.LacrosVariantUnneeded,
		Desc:         "Test sharing a folder containing a zip file",
		Contacts:     []string{"jinrongwu@google.com", "cros-containers-dev@google.com"},
		Attr:         []string{"group:mainline", "informational"},
		SoftwareDeps: []string{"chrome", "vm_host"},
		Params: []testing.Param{
			// Parameters generated by params_test.go. DO NOT EDIT.
			{
				Name:              "buster_stable",
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Fixture:           "crostiniBuster",
				Timeout:           7 * time.Minute,
			}, {
				Name:              "buster_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Fixture:           "crostiniBuster",
				Timeout:           7 * time.Minute,
			}, {
				Name:              "bullseye_stable",
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Fixture:           "crostiniBullseye",
				Timeout:           7 * time.Minute,
			}, {
				Name:              "bullseye_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Fixture:           "crostiniBullseye",
				Timeout:           7 * time.Minute,
			},
		},
	})
}

const (
	testFolderZip = "testFolderZip"
	testFileZip1  = "test.txt"
	testFileZip2  = "other.txt"
	testZip       = "test.zip"
)

func ShareFolderZipFile(ctx context.Context, s *testing.State) {
	tconn := s.FixtValue().(crostini.FixtureData).Tconn
	cont := s.FixtValue().(crostini.FixtureData).Cont
	cr := s.FixtValue().(crostini.FixtureData).Chrome
	keyboard := s.FixtValue().(crostini.FixtureData).KB

	// Use a shortened context for unshare all folders.
	cleanupCtx := ctx
	ctx, cancel := ctxutil.Shorten(ctx, 5*time.Second)
	defer cancel()

	sharedFolders := sharedfolders.NewSharedFolders(tconn)
	// Clean up in the end.
	defer func() {
		if err := sharedFolders.UnshareAll(cont, cr)(cleanupCtx); err != nil {
			s.Error("Failed to unshare all folders: ", err)
		}
		if err := cleanupfolder.RemoveAllFilesInDirectory(filesapp.DownloadPath); err != nil {
			s.Errorf("Failed to remove all files in %s: %v", filesapp.DownloadPath, err)
		}
	}()

	// Make sure the downloads directory is empty before we start as any files
	// left over from previous tests will make the test fail.
	if err := cleanupfolder.RemoveAllFilesInDirectory(filesapp.DownloadPath); err != nil {
		s.Fatalf("Failed to remove all files in %s: %v", filesapp.DownloadPath, err)
	}

	// Create test files and folders.
	// This will create a folder in Downloads.
	// Inside the folder, there is a test file and zip file.
	if err := createTestData(ctx); err != nil {
		s.Fatal("Failed to create test data: ", err)
	}

	// Open the Files app.
	filesApp, err := filesapp.Launch(ctx, tconn)
	if err != nil {
		s.Fatal("Failed to open Files app: ", err)
	}
	defer filesApp.Close(cleanupCtx)

	// Right click the test folder and select Share with Linux.
	if err = uiauto.Combine("share with Linux",
		filesApp.OpenDownloads(),
		filesApp.ClickContextMenuItem(testFolderZip, sharedfolders.ShareWithLinux))(ctx); err != nil {
		s.Fatal("Failed to share test folder with zip file with Crostini: ", err)
	}

	// Open Terminal app.
	terminalApp, err := terminalapp.Launch(ctx, tconn)
	if err != nil {
		s.Fatal("Failed to open Terminal app: ", err)
	}
	defer terminalApp.Exit(keyboard)(cleanupCtx)

	//Unzip the shared file from Terminal.
	cmd := fmt.Sprintf("unzip %s/%s/%s", sharedfolders.MountPathDownloads, testFolderZip, testZip)
	if err := terminalApp.RunCommand(keyboard, cmd)(ctx); err != nil {
		s.Fatal("Failed to unzip the shared file from Terminal app: ", err)
	}

	// Check the file list in the container.
	// TODO(jinrongwu): this should be uncommented once crbug/1205692 is resolved.
	/* sharedFolderPath := fmt.Sprintf("%s/%s", sharedfolders.MountPathDownloads, testFolderZip)
	if list, err := cont.GetFileList(ctx, sharedFolderPath); err != nil {
		s.Fatalf("Failed to get file list of %s: %s", sharedFolderPath, err)
	} else if want := []string{testFileZip1, testFileZip2, testZip}; !reflect.DeepEqual(list, want) {
		s.Fatalf("Failed to verify file list in %s, got %s, want %s", sharedFolderPath, list, want)
	} */
}

func createTestData(ctx context.Context) error {
	// Create a folder in Downloads.
	folderPath := filepath.Join(filesapp.DownloadPath, testFolderZip)
	if err := os.MkdirAll(folderPath, 0755); err != nil {
		return errors.Wrap(err, "failed to create test folder in Downloads")
	}

	// Create a file inside the folder.
	filePath := filepath.Join(filesapp.DownloadPath, testFolderZip, testFileZip1)
	if err := ioutil.WriteFile(filePath, []byte("testString"), 0644); err != nil {
		return errors.Wrap(err, "failed to create file in Downloads")
	}

	// Create a zip file.
	zipPath := filepath.Join(filesapp.DownloadPath, testFolderZip, testZip)
	if err := testexec.CommandContext(ctx, "zip", "-j", zipPath, filePath).Run(testexec.DumpLogOnError); err != nil {
		return errors.Wrap(err, "failed to create zip file")
	}

	// Rename the test file so that it would not conflict when extracting later.
	otherFilePath := filepath.Join(filesapp.DownloadPath, testFolderZip, testFileZip2)
	if err := testexec.CommandContext(ctx, "mv", filePath, otherFilePath).Run(testexec.DumpLogOnError); err != nil {
		return errors.Wrap(err, "failed to rename the test file")
	}

	return nil
}
