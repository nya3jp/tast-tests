// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"context"
	"time"

	"chromiumos/tast/ctxutil"
	"chromiumos/tast/errors"
	"chromiumos/tast/local/chrome"
	"chromiumos/tast/local/chrome/uiauto"
	"chromiumos/tast/local/chrome/uiauto/nodewith"
	"chromiumos/tast/local/chrome/uiauto/role"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/local/crostini/ui/terminalapp"
	"chromiumos/tast/local/input"
	"chromiumos/tast/local/vm"
	"chromiumos/tast/testing"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         AppGedit,
		LacrosStatus: testing.LacrosVariantUnknown,
		Desc:         "Test gedit in Terminal window",
		Contacts:     []string{"jinrongwu@google.com", "cros-containers-dev@google.com"},
		Attr:         []string{"group:mainline", "informational"},
		Vars:         []string{"keepState", "ui.gaiaPoolDefault"},
		SoftwareDeps: []string{"chrome", "vm_host"},
		Params: []testing.Param{
			// Parameters generated by params_test.go. DO NOT EDIT.
			{
				ExtraData:         []string{crostini.GetContainerMetadataArtifact("buster", true), crostini.GetContainerRootfsArtifact("buster", true)},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniAppTest,
				Pre:               crostini.StartedByDlcBusterLargeContainer(),
				Timeout:           15 * time.Minute,
			},
		},
	})
}
func AppGedit(ctx context.Context, s *testing.State) {
	tconn := s.PreValue().(crostini.PreData).TestAPIConn
	cr := s.PreValue().(crostini.PreData).Chrome
	keyboard := s.PreValue().(crostini.PreData).Keyboard
	cont := s.PreValue().(crostini.PreData).Container

	// Use a shortened context for test operations to reserve time for cleanup.
	cleanupCtx := ctx
	ctx, cancel := ctxutil.Shorten(ctx, crostini.PostTimeout)
	defer cancel()
	defer crostini.RunCrostiniPostTest(cleanupCtx, s.PreValue().(crostini.PreData))

	// Open Terminal app.
	terminalApp, err := terminalapp.Launch(ctx, tconn)
	if err != nil {
		s.Fatal("Failed to open Terminal app: ", err)
	}

	restartIfError := true

	defer func() {
		// Restart crostini in the end in case any error in the middle and gedit is not closed.
		// This also closes the Terminal window.
		if restartIfError {
			if err := terminalApp.RestartCrostini(keyboard, cont, cr.NormalizedUser())(cleanupCtx); err != nil {
				s.Log("Failed to restart crostini: ", err)
			}
		}
	}()

	// Create a file using gedit in Terminal.
	if err := testCreateFileWithGedit(ctx, terminalApp, keyboard, tconn, cont); err != nil {
		s.Fatal("Failed to create file with gedit in Terminal: ", err)
	}

	restartIfError = false

}

func testCreateFileWithGedit(ctx context.Context, terminalApp *terminalapp.TerminalApp, keyboard *input.KeyboardEventWriter, tconn *chrome.TestConn, cont *vm.Container) error {
	const (
		testFile   = "test.txt"
		testString = "This is a test string"
		uiString   = testFile + " (~/) - gedit"
	)

	ui := uiauto.New(tconn)
	appWindow := nodewith.Name(uiString).Role(role.Window).First()
	if err := uiauto.Combine("Create file with Gedit",
		// Launch Gedit.
		terminalApp.RunCommand(keyboard, "gedit "+testFile),
		// Focus on the Gedit window and input string.
		ui.LeftClick(appWindow),
		keyboard.TypeAction(testString),
		// Press ctrl+S to save the file.
		keyboard.AccelAction("ctrl+S"),
		// Take screenshot.
		crostini.TakeAppScreenshot("gedit"),
		// Press ctrl+W twice to exit window.
		keyboard.AccelAction("ctrl+W"),
		keyboard.AccelAction("ctrl+W"),
		// Check window close.
		ui.WaitUntilGone(appWindow))(ctx); err != nil {
		return err
	}

	// Check the content of the test file.
	if err := cont.CheckFileContent(ctx, testFile, testString+"\n"); err != nil {
		return errors.Wrap(err, "failed to verify the content of the test file")
	}

	return nil
}
