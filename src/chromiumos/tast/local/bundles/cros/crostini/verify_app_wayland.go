// Copyright 2019 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package crostini

import (
	"context"
	"time"

	"chromiumos/tast/local/bundles/cros/crostini/verifyapp"
	"chromiumos/tast/local/chrome/browser"
	"chromiumos/tast/local/chrome/browser/browserfixt"
	"chromiumos/tast/local/crostini"
	"chromiumos/tast/testing"
)

func init() {
	testing.AddTest(&testing.Test{
		Func:         VerifyAppWayland,
		LacrosStatus: testing.LacrosVariantExists,
		Desc:         "Runs a Wayland crostini application from the terminal and verifies that it renders",
		Contacts:     []string{"smbarber@chromium.org", "cros-containers-dev@google.com"},
		Attr:         []string{"group:mainline", "informational"},
		Vars:         []string{"keepState", "ui.gaiaPoolDefault"},
		SoftwareDeps: []string{"chrome", "vm_host"},
		Params: []testing.Param{
			// Parameters generated by params_test.go. DO NOT EDIT.
			{
				Name:              "buster_stable",
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Fixture:           "crostiniBuster",
				Timeout:           2 * time.Minute,
				Val:               browser.TypeAsh,
			}, {
				Name:              "buster_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Fixture:           "crostiniBuster",
				Timeout:           2 * time.Minute,
				Val:               browser.TypeAsh,
			}, {
				Name:              "bullseye_stable",
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Fixture:           "crostiniBullseye",
				Timeout:           2 * time.Minute,
				Val:               browser.TypeAsh,
			}, {
				Name:              "bullseye_unstable",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc"},
				ExtraHardwareDeps: crostini.CrostiniUnstable,
				Fixture:           "crostiniBullseye",
				Timeout:           2 * time.Minute,
				Val:               browser.TypeAsh,
			}, {
				Name:              "bullseye_stable_lacros",
				ExtraAttr:         []string{"informational"},
				ExtraSoftwareDeps: []string{"dlc", "lacros"},
				ExtraHardwareDeps: crostini.CrostiniStable,
				Fixture:           "crostiniBullseyeWithLacros",
				Timeout:           2 * time.Minute,
				Val:               browser.TypeLacros,
			},
		},
	})
}

func VerifyAppWayland(ctx context.Context, s *testing.State) {
	cr := s.FixtValue().(crostini.FixtureData).ParentFixtV.Chrome()
	cont := s.FixtValue().(crostini.FixtureData).Cont

	// Run Lacros (if specified) as non-focused browser, so that the tested Wayland apps work in this situation.
	if _, _, err := browserfixt.SetUp(ctx, s.FixtValue().(crostini.FixtureData).ParentFixtV, s.Param().(browser.Type)); err != nil {
		s.Fatal("Failed to set up browser: ", err)
	}

	verifyapp.RunTest(ctx, s, cr, cont, crostini.WaylandDemoConfig())
}
