// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package encoding

import (
	"encoding/json"
	"os"

	"chromiumos/tast/common/perf"
	"chromiumos/tast/errors"
)

// This file contains helper functions that can be used to parse the log files
// generated by the video_encode_accelerator_perf_tests.

// ParseUncappedPerfMetrics parses the JSON log file generated by the
// MeasureUncappedPerformance test.
func ParseUncappedPerfMetrics(metricsPath string, p *perf.Values, metricPrefix string) error {
	f, err := os.Open(metricsPath)
	if err != nil {
		return err
	}
	defer f.Close()
	var metrics struct {
		BitstreamDeliveryTimeAverage float64
		BitstreamEncodeTimeAverage   float64
		FPS                          float64
	}
	if err := json.NewDecoder(f).Decode(&metrics); err != nil {
		return errors.Wrapf(err, "failed decoding %s", metricsPath)
	}
	p.Set(perf.Metric{
		Name:      metricPrefix + ".delivery_time.average",
		Unit:      "milliseconds",
		Direction: perf.SmallerIsBetter,
	}, metrics.BitstreamDeliveryTimeAverage)
	p.Set(perf.Metric{
		Name:      metricPrefix + ".encode_time.average",
		Unit:      "milliseconds",
		Direction: perf.SmallerIsBetter,
	}, metrics.BitstreamEncodeTimeAverage)
	p.Set(perf.Metric{
		Name:      metricPrefix + ".frames_per_second",
		Unit:      "fps",
		Direction: perf.SmallerIsBetter,
	}, metrics.FPS)
	return nil
}

// ParseQualityPerfMetrics parses the JSON log file generated by the
// MeasureProducedBitstreamQuality test.
func ParseQualityPerfMetrics(metricsPath, scalabilityMode string, p *perf.Values) error {
	f, err := os.Open(metricsPath)
	if err != nil {
		return err
	}
	defer f.Close()
	var metrics struct {
		SSIMAverage      float64
		PSNRAverage      float64
		BitrateDeviation float64
	}
	if err := json.NewDecoder(f).Decode(&metrics); err != nil {
		return errors.Wrapf(err, "failed decoding %s", metricsPath)
	}
	if scalabilityMode != "" {
		scalabilityMode = "." + scalabilityMode
	}
	p.Set(perf.Metric{
		Name:      "ssim" + scalabilityMode + ".average",
		Unit:      "scalar",
		Direction: perf.BiggerIsBetter,
	}, metrics.SSIMAverage)
	p.Set(perf.Metric{
		Name:      "psnr" + scalabilityMode + ".average",
		Unit:      "scalar",
		Direction: perf.BiggerIsBetter,
	}, metrics.PSNRAverage)
	p.Set(perf.Metric{
		Name:      "bitrate_deviation" + scalabilityMode,
		Unit:      "percent",
		Direction: perf.SmallerIsBetter,
	}, metrics.BitrateDeviation)
	return nil
}
