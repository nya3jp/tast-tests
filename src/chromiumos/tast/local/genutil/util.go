// Copyright 2019 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Package main contains shared functions for code generation.
//
// This file is not executed directly, but rather symlinked alongside
// scripts that are executed via "go run" by "go generate".
package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/pkg/errors"
)

const tmplStr = `// Copyright {{.CopyrightYear}} The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package {{.PackageName}}

// Code generated by {{.ExecutableName}}. DO NOT EDIT.
//
// Do not change the above line; see https://golang.org/pkg/cmd/go/internal/generate/
//
// This file contains constants from {{.RepoPath}}
// in the {{.RepoName}} repository at revision {{.RepoRev}}.
// Run "go generate" to regenerate it.

{{/* String that could be used to add any valid Go code, including comments, like the go:generate rule */}}
{{- .PreludeCode}}

{{/* Defines the types */}}
{{- range .Types}}
// {{.Name}} {{.Desc}}
type {{.Name}} {{.NativeType}}
{{- end}}

{{/* Generates the constants for each group */}}
const (
{{- range .Groups}}
	// {{.Desc}}{{$type := .TypeName -}}
{{range .Constants}}
	{{.Name}} {{$type}} = {{.Val}}
{{- end}}
{{end}}
)
`

// tmplArgs represents the arguments, besides groupInfo and typeInfo, used in the template.
type tmplArgs struct {
	PackageName    string // Go package name, e.g. "input"
	RepoName       string // repo name, e.g "Linux kernel"
	RepoRev        string // repo git revision
	RepoPath       string // filepath relative to the repo root, e.g "include/uapi/linux/input-event-codes.h"
	PreludeCode    string // Go code to include at the top of file (typically "//go:generate go run ...")
	CopyrightYear  string // copyright year used in the license, e.g "2018"
	ExecutableName string // name of the executable that generates the constants, e.g "gen/gen_constants.go"
}

// groupInfo describes a group of constants.
type groupInfo struct {
	prefix   string // constant prefix used as group identifier, e.g, the prefix for "KEY_*" should be "KEY".
	typeName string // constant type name, e.g. "EventCode"
	desc     string // human-readable group description used in comment
}

// typeInfo describes a Go type to be defined in the generated code.
type typeInfo struct {
	name       string // type name, e.g "EventCode"
	nativeType string // Go native type, e.g "uint16"
	desc       string // human-readable type description used in comment
}

// constant describes an individual constant.
type constant struct {
	name string // name of the constant, e.g "KEY_ENTER"
	val  int64  // value of the constant, e.g. 0x1c
}

// constantGroups is a map from a group name (e.g. "KEY") to the corresponding constants.
type constantGroups map[string][]constant

// getGroupForName returns group info for the supplied constant.
func getGroupForName(groups []*groupInfo, name string) *groupInfo {
	for _, g := range groups {
		if strings.HasPrefix(name, g.prefix) {
			return g
		}
	}
	return nil
}

// getRepoInfo returns path's location relative to its git repository and the HEAD revision for the repository.
func getRepoInfo(path string) (relPath, rev string, err error) {
	if path, err = filepath.Abs(path); err != nil {
		return "", "", err
	}
	path = filepath.Clean(path)

	// This prints the base path of the repo on the first line and HEAD's revision on the second.
	cmd := exec.Command("git", "rev-parse", "--show-toplevel", "HEAD")
	cmd.Dir = filepath.Dir(path)
	out, err := cmd.Output()
	if err != nil {
		return "", "", err
	}

	lines := strings.Split(strings.TrimSpace(string(out)), "\n")
	if len(lines) != 2 {
		return "", "", errors.Errorf("%q printed %q; wanted 2 lines", strings.Join(cmd.Args, " "), string(out))
	}
	rev = lines[1]
	if relPath, err = filepath.Rel(lines[0], path); err != nil {
		return "", "", err
	}
	return relPath, rev, nil
}

// writeConstants writes consts to path as a Go source file, using a text/template.
// consts, groups, types and args are used to populate the template.
func writeConstants(consts constantGroups, groups []*groupInfo, types []*typeInfo, args tmplArgs, path string) error {
	type constData struct {
		Name, Val string
	}
	type groupData struct {
		TypeName, Desc string
		Constants      []constData
	}

	type typeData struct {
		Name, Desc, NativeType string
	}

	data := struct {
		tmplArgs
		Groups []groupData
		Types  []typeData
	}{
		args,
		nil,
		nil,
	}

	for _, grp := range groups {
		gd := groupData{TypeName: grp.typeName, Desc: grp.desc}
		for _, c := range consts[grp.prefix] {
			gd.Constants = append(gd.Constants, constData{c.name, fmt.Sprintf("%#x", c.val)})
		}
		data.Groups = append(data.Groups, gd)
	}

	for _, typ := range types {
		td := typeData{Name: typ.name, Desc: typ.desc, NativeType: typ.nativeType}
		data.Types = append(data.Types, td)
	}

	f, err := ioutil.TempFile(filepath.Dir(path), "."+filepath.Base(path)+".")
	if err != nil {
		return err
	}
	defer func() {
		if err == nil {
			return
		}
		f.Close()
		os.Remove(f.Name())
	}()

	if err = template.Must(template.New("header").Parse(tmplStr)).Execute(f, data); err != nil {
		return err
	}

	if err = f.Close(); err != nil {
		return err
	}

	return os.Rename(f.Name(), path)
}
