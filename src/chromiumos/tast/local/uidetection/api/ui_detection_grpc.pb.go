// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UiDetectionServiceClient is the client API for UiDetectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UiDetectionServiceClient interface {
	// Runs the detection.
	Detect(ctx context.Context, in *UiDetectionRequest, opts ...grpc.CallOption) (*UiDetectionResponse, error)
}

type uiDetectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUiDetectionServiceClient(cc grpc.ClientConnInterface) UiDetectionServiceClient {
	return &uiDetectionServiceClient{cc}
}

func (c *uiDetectionServiceClient) Detect(ctx context.Context, in *UiDetectionRequest, opts ...grpc.CallOption) (*UiDetectionResponse, error) {
	out := new(UiDetectionResponse)
	err := c.cc.Invoke(ctx, "/chromeos.acuiti.UiDetectionService/Detect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UiDetectionServiceServer is the server API for UiDetectionService service.
// All implementations must embed UnimplementedUiDetectionServiceServer
// for forward compatibility
type UiDetectionServiceServer interface {
	// Runs the detection.
	Detect(context.Context, *UiDetectionRequest) (*UiDetectionResponse, error)
	mustEmbedUnimplementedUiDetectionServiceServer()
}

// UnimplementedUiDetectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUiDetectionServiceServer struct {
}

func (UnimplementedUiDetectionServiceServer) Detect(context.Context, *UiDetectionRequest) (*UiDetectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detect not implemented")
}
func (UnimplementedUiDetectionServiceServer) mustEmbedUnimplementedUiDetectionServiceServer() {}

// UnsafeUiDetectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UiDetectionServiceServer will
// result in compilation errors.
type UnsafeUiDetectionServiceServer interface {
	mustEmbedUnimplementedUiDetectionServiceServer()
}

func RegisterUiDetectionServiceServer(s *grpc.Server, srv UiDetectionServiceServer) {
	s.RegisterService(&_UiDetectionService_serviceDesc, srv)
}

func _UiDetectionService_Detect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UiDetectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UiDetectionServiceServer).Detect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chromeos.acuiti.UiDetectionService/Detect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UiDetectionServiceServer).Detect(ctx, req.(*UiDetectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UiDetectionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chromeos.acuiti.UiDetectionService",
	HandlerType: (*UiDetectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Detect",
			Handler:    _UiDetectionService_Detect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ui_detection.proto",
}
