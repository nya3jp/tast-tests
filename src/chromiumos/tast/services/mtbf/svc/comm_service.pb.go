// Code generated by protoc-gen-go. DO NOT EDIT.
// source: comm_service.proto

package svc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LoginRequest struct {
	// The temporary directory of local service test output (on DUT).
	OutDir               string   `protobuf:"bytes,1,opt,name=outDir,proto3" json:"outDir,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginRequest) Reset()         { *m = LoginRequest{} }
func (m *LoginRequest) String() string { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()    {}
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a84e4af2a21f141, []int{0}
}

func (m *LoginRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginRequest.Unmarshal(m, b)
}
func (m *LoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginRequest.Marshal(b, m, deterministic)
}
func (m *LoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginRequest.Merge(m, src)
}
func (m *LoginRequest) XXX_Size() int {
	return xxx_messageInfo_LoginRequest.Size(m)
}
func (m *LoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoginRequest proto.InternalMessageInfo

func (m *LoginRequest) GetOutDir() string {
	if m != nil {
		return m.OutDir
	}
	return ""
}

type Screenshot struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Screenshot) Reset()         { *m = Screenshot{} }
func (m *Screenshot) String() string { return proto.CompactTextString(m) }
func (*Screenshot) ProtoMessage()    {}
func (*Screenshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a84e4af2a21f141, []int{1}
}

func (m *Screenshot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Screenshot.Unmarshal(m, b)
}
func (m *Screenshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Screenshot.Marshal(b, m, deterministic)
}
func (m *Screenshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Screenshot.Merge(m, src)
}
func (m *Screenshot) XXX_Size() int {
	return xxx_messageInfo_Screenshot.Size(m)
}
func (m *Screenshot) XXX_DiscardUnknown() {
	xxx_messageInfo_Screenshot.DiscardUnknown(m)
}

var xxx_messageInfo_Screenshot proto.InternalMessageInfo

func (m *Screenshot) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterType((*LoginRequest)(nil), "tast.mtbf.svc.LoginRequest")
	proto.RegisterType((*Screenshot)(nil), "tast.mtbf.svc.Screenshot")
}

func init() { proto.RegisterFile("comm_service.proto", fileDescriptor_2a84e4af2a21f141) }

var fileDescriptor_2a84e4af2a21f141 = []byte{
	// 257 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0x3f, 0x4b, 0x03, 0x41,
	0x10, 0xc5, 0x8d, 0x90, 0x88, 0x63, 0xb4, 0xd8, 0x22, 0x84, 0xa4, 0xd1, 0x13, 0x82, 0xd5, 0x2e,
	0x68, 0x65, 0x23, 0x98, 0x33, 0x9d, 0xd5, 0x45, 0x10, 0x6c, 0x24, 0xb7, 0x4c, 0xee, 0x16, 0xb3,
	0x37, 0x71, 0x67, 0xee, 0xc0, 0xcf, 0xe1, 0x17, 0x96, 0xfb, 0x13, 0x88, 0x85, 0x82, 0x96, 0x8f,
	0x7d, 0xef, 0xed, 0xef, 0x31, 0xa0, 0x2c, 0x79, 0xff, 0xca, 0x18, 0x2a, 0x67, 0x51, 0x6f, 0x03,
	0x09, 0xa9, 0x53, 0x59, 0xb1, 0x68, 0x2f, 0xe9, 0x5a, 0x73, 0x65, 0x27, 0xd3, 0x8c, 0x28, 0xdb,
	0xa0, 0x69, 0x1e, 0xd3, 0x72, 0x6d, 0xd0, 0x6f, 0xe5, 0xa3, 0xf5, 0x46, 0x33, 0x18, 0x3e, 0x52,
	0xe6, 0x8a, 0x04, 0xdf, 0x4b, 0x64, 0x51, 0x23, 0x18, 0x50, 0x29, 0x0f, 0x2e, 0x8c, 0x7b, 0xe7,
	0xbd, 0xab, 0xe3, 0xa4, 0x53, 0xd1, 0x0c, 0x60, 0x69, 0x03, 0x62, 0xc1, 0x39, 0x89, 0x1a, 0xc3,
	0x91, 0xa5, 0x42, 0xb0, 0x90, 0xc6, 0x36, 0x4c, 0x76, 0xf2, 0xfa, 0xf3, 0x10, 0x4e, 0x62, 0xf2,
	0x7e, 0xd9, 0x12, 0xa9, 0x3b, 0xe8, 0x37, 0xfd, 0x6a, 0xaa, 0xbf, 0x51, 0xe9, 0xfd, 0x5f, 0x27,
	0x23, 0xdd, 0x32, 0xea, 0x1d, 0xa3, 0x5e, 0xd4, 0x8c, 0xd1, 0x81, 0x5a, 0x74, 0x7c, 0xcf, 0x4e,
	0xf2, 0xfb, 0x24, 0xfe, 0x6f, 0xcd, 0x2d, 0xf4, 0xe3, 0x0d, 0x31, 0xaa, 0x1f, 0x2c, 0xbf, 0x44,
	0xe7, 0x70, 0xf6, 0xb4, 0x7a, 0xc3, 0xbd, 0xf5, 0x7f, 0xee, 0x98, 0x5f, 0xbe, 0x5c, 0xd8, 0x3c,
	0x90, 0x77, 0xa5, 0x27, 0x36, 0xf5, 0x02, 0xd3, 0x9d, 0x8c, 0x4d, 0x3d, 0xc5, 0x70, 0x65, 0xd3,
	0x41, 0x13, 0xbb, 0xf9, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x09, 0x22, 0xc6, 0x5a, 0xd3, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommServiceClient is the client API for CommService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommServiceClient interface {
	// Login do chrome login.
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// LoginWithARC do chrome login and ARC checking.
	LoginWithARC(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Close closes the login session.
	Close(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// TakeScreenshot
	TakeScreenshot(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type commServiceClient struct {
	cc *grpc.ClientConn
}

func NewCommServiceClient(cc *grpc.ClientConn) CommServiceClient {
	return &commServiceClient{cc}
}

func (c *commServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.mtbf.svc.CommService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServiceClient) LoginWithARC(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.mtbf.svc.CommService/LoginWithARC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServiceClient) Close(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.mtbf.svc.CommService/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServiceClient) TakeScreenshot(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.mtbf.svc.CommService/TakeScreenshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommServiceServer is the server API for CommService service.
type CommServiceServer interface {
	// Login do chrome login.
	Login(context.Context, *LoginRequest) (*empty.Empty, error)
	// LoginWithARC do chrome login and ARC checking.
	LoginWithARC(context.Context, *LoginRequest) (*empty.Empty, error)
	// Close closes the login session.
	Close(context.Context, *empty.Empty) (*empty.Empty, error)
	// TakeScreenshot
	TakeScreenshot(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedCommServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCommServiceServer struct {
}

func (*UnimplementedCommServiceServer) Login(ctx context.Context, req *LoginRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedCommServiceServer) LoginWithARC(ctx context.Context, req *LoginRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithARC not implemented")
}
func (*UnimplementedCommServiceServer) Close(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedCommServiceServer) TakeScreenshot(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeScreenshot not implemented")
}

func RegisterCommServiceServer(s *grpc.Server, srv CommServiceServer) {
	s.RegisterService(&_CommService_serviceDesc, srv)
}

func _CommService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.mtbf.svc.CommService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommService_LoginWithARC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServiceServer).LoginWithARC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.mtbf.svc.CommService/LoginWithARC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServiceServer).LoginWithARC(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.mtbf.svc.CommService/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServiceServer).Close(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommService_TakeScreenshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServiceServer).TakeScreenshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.mtbf.svc.CommService/TakeScreenshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServiceServer).TakeScreenshot(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.mtbf.svc.CommService",
	HandlerType: (*CommServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _CommService_Login_Handler,
		},
		{
			MethodName: "LoginWithARC",
			Handler:    _CommService_LoginWithARC_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _CommService_Close_Handler,
		},
		{
			MethodName: "TakeScreenshot",
			Handler:    _CommService_TakeScreenshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comm_service.proto",
}
