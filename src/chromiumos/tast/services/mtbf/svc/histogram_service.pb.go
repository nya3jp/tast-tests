// Code generated by protoc-gen-go. DO NOT EDIT.
// source: histogram_service.proto

package svc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetFirstBucketRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetFirstBucketRequest) Reset()         { *m = GetFirstBucketRequest{} }
func (m *GetFirstBucketRequest) String() string { return proto.CompactTextString(m) }
func (*GetFirstBucketRequest) ProtoMessage()    {}
func (*GetFirstBucketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a967642db1bff8, []int{0}
}

func (m *GetFirstBucketRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFirstBucketRequest.Unmarshal(m, b)
}
func (m *GetFirstBucketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFirstBucketRequest.Marshal(b, m, deterministic)
}
func (m *GetFirstBucketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFirstBucketRequest.Merge(m, src)
}
func (m *GetFirstBucketRequest) XXX_Size() int {
	return xxx_messageInfo_GetFirstBucketRequest.Size(m)
}
func (m *GetFirstBucketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFirstBucketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFirstBucketRequest proto.InternalMessageInfo

func (m *GetFirstBucketRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetFirstBucketResponse struct {
	Min                  int64    `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max                  int64    `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	Count                int64    `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetFirstBucketResponse) Reset()         { *m = GetFirstBucketResponse{} }
func (m *GetFirstBucketResponse) String() string { return proto.CompactTextString(m) }
func (*GetFirstBucketResponse) ProtoMessage()    {}
func (*GetFirstBucketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a967642db1bff8, []int{1}
}

func (m *GetFirstBucketResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFirstBucketResponse.Unmarshal(m, b)
}
func (m *GetFirstBucketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFirstBucketResponse.Marshal(b, m, deterministic)
}
func (m *GetFirstBucketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFirstBucketResponse.Merge(m, src)
}
func (m *GetFirstBucketResponse) XXX_Size() int {
	return xxx_messageInfo_GetFirstBucketResponse.Size(m)
}
func (m *GetFirstBucketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFirstBucketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFirstBucketResponse proto.InternalMessageInfo

func (m *GetFirstBucketResponse) GetMin() int64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *GetFirstBucketResponse) GetMax() int64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *GetFirstBucketResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*GetFirstBucketRequest)(nil), "tast.mtbf.svc.GetFirstBucketRequest")
	proto.RegisterType((*GetFirstBucketResponse)(nil), "tast.mtbf.svc.GetFirstBucketResponse")
}

func init() { proto.RegisterFile("histogram_service.proto", fileDescriptor_94a967642db1bff8) }

var fileDescriptor_94a967642db1bff8 = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0x4f, 0x4b, 0xc4, 0x30,
	0x10, 0xc5, 0x5d, 0xab, 0x82, 0x03, 0xca, 0x12, 0xfc, 0x53, 0x3c, 0x69, 0x55, 0x10, 0x84, 0x04,
	0xf4, 0x1b, 0xec, 0x41, 0x3d, 0xc7, 0x9b, 0x97, 0x25, 0x1b, 0x46, 0x37, 0x48, 0x92, 0x9a, 0x99,
	0x94, 0x7e, 0x7c, 0x69, 0x5a, 0x0f, 0x15, 0xc1, 0xdb, 0x9b, 0xc7, 0x7b, 0xcc, 0x8f, 0x07, 0xe7,
	0x5b, 0x47, 0x1c, 0x3f, 0x92, 0xf1, 0x6b, 0xc2, 0xd4, 0x39, 0x8b, 0xb2, 0x4d, 0x91, 0xa3, 0x38,
	0x62, 0x43, 0x2c, 0x3d, 0x6f, 0xde, 0x25, 0x75, 0xb6, 0xb9, 0x87, 0xd3, 0x67, 0xe4, 0x27, 0x97,
	0x88, 0x57, 0xd9, 0x7e, 0x22, 0x6b, 0xfc, 0xca, 0x48, 0x2c, 0x04, 0xec, 0x05, 0xe3, 0xb1, 0x5e,
	0x5c, 0x2e, 0xee, 0x0e, 0x75, 0xd1, 0x8d, 0x86, 0xb3, 0xdf, 0x61, 0x6a, 0x63, 0x20, 0x14, 0x4b,
	0xa8, 0xbc, 0x0b, 0x25, 0x5c, 0xe9, 0x41, 0x16, 0xc7, 0xf4, 0xf5, 0xee, 0xe4, 0x98, 0x5e, 0x9c,
	0xc0, 0xbe, 0x8d, 0x39, 0x70, 0x5d, 0x15, 0x6f, 0x3c, 0x1e, 0x08, 0x96, 0x2f, 0x3f, 0xa8, 0xaf,
	0x23, 0xa9, 0x58, 0xc3, 0xf1, 0xfc, 0x8f, 0xb8, 0x91, 0x33, 0x6c, 0xf9, 0x27, 0xf3, 0xc5, 0xed,
	0x3f, 0xa9, 0x11, 0xb6, 0xd9, 0x59, 0x5d, 0xbf, 0x5d, 0xd9, 0x6d, 0x8a, 0xde, 0x65, 0x1f, 0x49,
	0x0d, 0x25, 0x35, 0xad, 0x44, 0x6a, 0x68, 0x2b, 0xea, 0xec, 0xe6, 0xa0, 0x0c, 0xf6, 0xf8, 0x1d,
	0x00, 0x00, 0xff, 0xff, 0x39, 0xe3, 0x48, 0x7e, 0x4b, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HistogramServiceClient is the client API for HistogramService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HistogramServiceClient interface {
	// GetFirstBucket returns the first bucket with the requested name
	GetFirstBucket(ctx context.Context, in *GetFirstBucketRequest, opts ...grpc.CallOption) (*GetFirstBucketResponse, error)
}

type histogramServiceClient struct {
	cc *grpc.ClientConn
}

func NewHistogramServiceClient(cc *grpc.ClientConn) HistogramServiceClient {
	return &histogramServiceClient{cc}
}

func (c *histogramServiceClient) GetFirstBucket(ctx context.Context, in *GetFirstBucketRequest, opts ...grpc.CallOption) (*GetFirstBucketResponse, error) {
	out := new(GetFirstBucketResponse)
	err := c.cc.Invoke(ctx, "/tast.mtbf.svc.HistogramService/GetFirstBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HistogramServiceServer is the server API for HistogramService service.
type HistogramServiceServer interface {
	// GetFirstBucket returns the first bucket with the requested name
	GetFirstBucket(context.Context, *GetFirstBucketRequest) (*GetFirstBucketResponse, error)
}

// UnimplementedHistogramServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHistogramServiceServer struct {
}

func (*UnimplementedHistogramServiceServer) GetFirstBucket(ctx context.Context, req *GetFirstBucketRequest) (*GetFirstBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFirstBucket not implemented")
}

func RegisterHistogramServiceServer(s *grpc.Server, srv HistogramServiceServer) {
	s.RegisterService(&_HistogramService_serviceDesc, srv)
}

func _HistogramService_GetFirstBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFirstBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistogramServiceServer).GetFirstBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.mtbf.svc.HistogramService/GetFirstBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistogramServiceServer).GetFirstBucket(ctx, req.(*GetFirstBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HistogramService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.mtbf.svc.HistogramService",
	HandlerType: (*HistogramServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFirstBucket",
			Handler:    _HistogramService_GetFirstBucket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "histogram_service.proto",
}
