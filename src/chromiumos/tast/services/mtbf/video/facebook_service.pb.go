// Code generated by protoc-gen-go. DO NOT EDIT.
// source: facebook_service.proto

package video

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OpenFacebookRequest struct {
	IntentURL            string   `protobuf:"bytes,1,opt,name=intentURL,proto3" json:"intentURL,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpenFacebookRequest) Reset()         { *m = OpenFacebookRequest{} }
func (m *OpenFacebookRequest) String() string { return proto.CompactTextString(m) }
func (*OpenFacebookRequest) ProtoMessage()    {}
func (*OpenFacebookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_afc8b413ad2ff117, []int{0}
}

func (m *OpenFacebookRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenFacebookRequest.Unmarshal(m, b)
}
func (m *OpenFacebookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenFacebookRequest.Marshal(b, m, deterministic)
}
func (m *OpenFacebookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenFacebookRequest.Merge(m, src)
}
func (m *OpenFacebookRequest) XXX_Size() int {
	return xxx_messageInfo_OpenFacebookRequest.Size(m)
}
func (m *OpenFacebookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenFacebookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OpenFacebookRequest proto.InternalMessageInfo

func (m *OpenFacebookRequest) GetIntentURL() string {
	if m != nil {
		return m.IntentURL
	}
	return ""
}

func init() {
	proto.RegisterType((*OpenFacebookRequest)(nil), "tast.mtbf.video.OpenFacebookRequest")
}

func init() { proto.RegisterFile("facebook_service.proto", fileDescriptor_afc8b413ad2ff117) }

var fileDescriptor_afc8b413ad2ff117 = []byte{
	// 198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4b, 0x4b, 0x4c, 0x4e,
	0x4d, 0xca, 0xcf, 0xcf, 0x8e, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0xe2, 0x2f, 0x49, 0x2c, 0x2e, 0xd1, 0xcb, 0x2d, 0x49, 0x4a, 0xd3, 0x2b, 0xcb,
	0x4c, 0x49, 0xcd, 0x97, 0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0x4b, 0x27, 0x95,
	0xa6, 0xe9, 0xa7, 0xe6, 0x16, 0x94, 0x54, 0x42, 0x54, 0x2b, 0x19, 0x73, 0x09, 0xfb, 0x17, 0xa4,
	0xe6, 0xb9, 0x41, 0xcd, 0x0a, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe1, 0xe2, 0xcc,
	0xcc, 0x2b, 0x49, 0xcd, 0x2b, 0x09, 0x0d, 0xf2, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x42,
	0x08, 0x18, 0x25, 0x72, 0xf1, 0xc3, 0x34, 0x04, 0x43, 0xec, 0x16, 0xf2, 0xe3, 0xe2, 0x41, 0x36,
	0x47, 0x48, 0x45, 0x0f, 0xcd, 0x19, 0x7a, 0x58, 0xac, 0x91, 0x12, 0xd3, 0x83, 0xb8, 0x4d, 0x0f,
	0xe6, 0x36, 0x3d, 0x57, 0x90, 0xdb, 0x94, 0x18, 0x9c, 0x54, 0xa3, 0x94, 0x93, 0x33, 0x8a, 0xf2,
	0x73, 0x33, 0x4b, 0x73, 0xf3, 0x8b, 0xf5, 0x41, 0x66, 0xe9, 0x43, 0xbd, 0x59, 0xac, 0x0f, 0x32,
	0x54, 0x1f, 0x6c, 0x68, 0x12, 0x1b, 0x58, 0xa3, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xac, 0x47,
	0x10, 0x63, 0x0d, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FacebookServiceClient is the client API for FacebookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FacebookServiceClient interface {
	// OpenFacebook opens Facebook
	OpenFacebook(ctx context.Context, in *OpenFacebookRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type facebookServiceClient struct {
	cc *grpc.ClientConn
}

func NewFacebookServiceClient(cc *grpc.ClientConn) FacebookServiceClient {
	return &facebookServiceClient{cc}
}

func (c *facebookServiceClient) OpenFacebook(ctx context.Context, in *OpenFacebookRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.mtbf.video.FacebookService/OpenFacebook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FacebookServiceServer is the server API for FacebookService service.
type FacebookServiceServer interface {
	// OpenFacebook opens Facebook
	OpenFacebook(context.Context, *OpenFacebookRequest) (*empty.Empty, error)
}

// UnimplementedFacebookServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFacebookServiceServer struct {
}

func (*UnimplementedFacebookServiceServer) OpenFacebook(ctx context.Context, req *OpenFacebookRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenFacebook not implemented")
}

func RegisterFacebookServiceServer(s *grpc.Server, srv FacebookServiceServer) {
	s.RegisterService(&_FacebookService_serviceDesc, srv)
}

func _FacebookService_OpenFacebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenFacebookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacebookServiceServer).OpenFacebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.mtbf.video.FacebookService/OpenFacebook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacebookServiceServer).OpenFacebook(ctx, req.(*OpenFacebookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FacebookService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.mtbf.video.FacebookService",
	HandlerType: (*FacebookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenFacebook",
			Handler:    _FacebookService_OpenFacebook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "facebook_service.proto",
}
