// Code generated by protoc-gen-go. DO NOT EDIT.
// source: comm_service.proto

/*
Package svcutil is a generated protocol buffer package.

It is generated from these files:
	comm_service.proto

It has these top-level messages:
	Screenshot
*/
package svcutil

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Screenshot struct {
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *Screenshot) Reset()                    { *m = Screenshot{} }
func (m *Screenshot) String() string            { return proto.CompactTextString(m) }
func (*Screenshot) ProtoMessage()               {}
func (*Screenshot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Screenshot) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterType((*Screenshot)(nil), "tast.mtbf.svcutil.Screenshot")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CommService service

type CommServiceClient interface {
	// Login
	Login(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// TakeScreenshot
	TakeScreenshot(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Screenshot, error)
}

type commServiceClient struct {
	cc *grpc.ClientConn
}

func NewCommServiceClient(cc *grpc.ClientConn) CommServiceClient {
	return &commServiceClient{cc}
}

func (c *commServiceClient) Login(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/tast.mtbf.svcutil.CommService/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServiceClient) TakeScreenshot(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Screenshot, error) {
	out := new(Screenshot)
	err := grpc.Invoke(ctx, "/tast.mtbf.svcutil.CommService/TakeScreenshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CommService service

type CommServiceServer interface {
	// Login
	Login(context.Context, *google_protobuf.Empty) (*google_protobuf.Empty, error)
	// TakeScreenshot
	TakeScreenshot(context.Context, *google_protobuf.Empty) (*Screenshot, error)
}

func RegisterCommServiceServer(s *grpc.Server, srv CommServiceServer) {
	s.RegisterService(&_CommService_serviceDesc, srv)
}

func _CommService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.mtbf.svcutil.CommService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServiceServer).Login(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommService_TakeScreenshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServiceServer).TakeScreenshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.mtbf.svcutil.CommService/TakeScreenshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServiceServer).TakeScreenshot(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.mtbf.svcutil.CommService",
	HandlerType: (*CommServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _CommService_Login_Handler,
		},
		{
			MethodName: "TakeScreenshot",
			Handler:    _CommService_TakeScreenshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comm_service.proto",
}

func init() { proto.RegisterFile("comm_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0xce, 0xcf, 0xcd,
	0x8d, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12,
	0x2c, 0x49, 0x2c, 0x2e, 0xd1, 0xcb, 0x2d, 0x49, 0x4a, 0xd3, 0x2b, 0x2e, 0x4b, 0x2e, 0x2d, 0xc9,
	0xcc, 0x91, 0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0x2b, 0x48, 0x2a, 0x4d, 0xd3,
	0x4f, 0xcd, 0x2d, 0x28, 0xa9, 0x84, 0xa8, 0x57, 0x52, 0xe3, 0xe2, 0x0a, 0x4e, 0x2e, 0x4a, 0x4d,
	0xcd, 0x2b, 0xce, 0xc8, 0x2f, 0x11, 0x92, 0xe0, 0x62, 0x4f, 0xce, 0xcf, 0x2b, 0x49, 0xcd, 0x2b,
	0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x09, 0x82, 0x71, 0x8d, 0x26, 0x33, 0x72, 0x71, 0x3b, 0xe7,
	0xe7, 0xe6, 0x06, 0x43, 0x6c, 0x13, 0xb2, 0xe4, 0x62, 0xf5, 0xc9, 0x4f, 0xcf, 0xcc, 0x13, 0x12,
	0xd3, 0x83, 0x18, 0xaf, 0x07, 0x33, 0x5e, 0xcf, 0x15, 0x64, 0xbc, 0x14, 0x0e, 0x71, 0x25, 0x06,
	0x21, 0x4f, 0x2e, 0xbe, 0x90, 0xc4, 0xec, 0x54, 0x24, 0x6b, 0x71, 0x99, 0x21, 0xab, 0x87, 0xe1,
	0x1b, 0x3d, 0x84, 0x36, 0x25, 0x06, 0x27, 0xf5, 0x28, 0xd5, 0xe4, 0x8c, 0xa2, 0xfc, 0xdc, 0xcc,
	0xd2, 0xdc, 0xfc, 0x62, 0x7d, 0x90, 0x62, 0x7d, 0x68, 0x70, 0x14, 0xeb, 0x83, 0x74, 0xe9, 0x43,
	0x75, 0x25, 0xb1, 0x81, 0x4d, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xd5, 0xff, 0x19, 0xde,
	0x33, 0x01, 0x00, 0x00,
}
