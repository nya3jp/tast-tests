// Code generated by protoc-gen-go. DO NOT EDIT.
// source: wifi_service.proto

package wifi

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type VerifyRequest struct {
	Enable               bool     `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyRequest) Reset()         { *m = VerifyRequest{} }
func (m *VerifyRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyRequest) ProtoMessage()    {}
func (*VerifyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{0}
}

func (m *VerifyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VerifyRequest.Unmarshal(m, b)
}
func (m *VerifyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VerifyRequest.Marshal(b, m, deterministic)
}
func (m *VerifyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyRequest.Merge(m, src)
}
func (m *VerifyRequest) XXX_Size() int {
	return xxx_messageInfo_VerifyRequest.Size(m)
}
func (m *VerifyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyRequest proto.InternalMessageInfo

func (m *VerifyRequest) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

type VerifyResponse struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyResponse) Reset()         { *m = VerifyResponse{} }
func (m *VerifyResponse) String() string { return proto.CompactTextString(m) }
func (*VerifyResponse) ProtoMessage()    {}
func (*VerifyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{1}
}

func (m *VerifyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VerifyResponse.Unmarshal(m, b)
}
func (m *VerifyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VerifyResponse.Marshal(b, m, deterministic)
}
func (m *VerifyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyResponse.Merge(m, src)
}
func (m *VerifyResponse) XXX_Size() int {
	return xxx_messageInfo_VerifyResponse.Size(m)
}
func (m *VerifyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyResponse proto.InternalMessageInfo

func (m *VerifyResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*VerifyRequest)(nil), "tast.mtbf.wifi.VerifyRequest")
	proto.RegisterType((*VerifyResponse)(nil), "tast.mtbf.wifi.VerifyResponse")
}

func init() { proto.RegisterFile("wifi_service.proto", fileDescriptor_7d1eecb28f2859f1) }

var fileDescriptor_7d1eecb28f2859f1 = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xb1, 0x4a, 0x04, 0x31,
	0x10, 0x86, 0x6f, 0x9b, 0x55, 0x23, 0x5e, 0x91, 0xe2, 0x90, 0x15, 0x45, 0x82, 0xe0, 0x55, 0x13,
	0xd0, 0xd2, 0x4e, 0xb4, 0xb0, 0x5d, 0x41, 0xc1, 0x46, 0x76, 0x8f, 0xc9, 0x39, 0x70, 0x7b, 0x59,
	0x33, 0x13, 0xe5, 0x1e, 0xc4, 0xf7, 0x95, 0x6c, 0xf6, 0x8a, 0x2b, 0xb6, 0x9c, 0xfc, 0xdf, 0x9f,
	0x7c, 0x19, 0xa5, 0x7f, 0xc9, 0xd1, 0x27, 0x63, 0xf8, 0xa1, 0x15, 0x42, 0x1f, 0xbc, 0x78, 0x3d,
	0x97, 0x86, 0x05, 0x3a, 0x69, 0x1d, 0xa4, 0xb4, 0xba, 0x58, 0x7b, 0xbf, 0xde, 0xa0, 0x1d, 0xd2,
	0x36, 0x3a, 0x8b, 0x5d, 0x2f, 0xbb, 0x0c, 0x9b, 0x5b, 0x75, 0xf6, 0x86, 0x81, 0xdc, 0xae, 0xc6,
	0xef, 0x88, 0x2c, 0x7a, 0xa1, 0x4a, 0xdc, 0x36, 0xed, 0x06, 0xcf, 0x8b, 0xeb, 0x62, 0x79, 0x5c,
	0x8f, 0x93, 0x59, 0xaa, 0xf9, 0x1e, 0xe4, 0xde, 0x6f, 0x19, 0x13, 0xc9, 0xd2, 0x48, 0xe4, 0x81,
	0x3c, 0xa9, 0xc7, 0xe9, 0xee, 0xaf, 0x50, 0xa7, 0xef, 0xe4, 0xe8, 0x35, 0x5b, 0xe9, 0x07, 0x75,
	0xf4, 0x44, 0x9c, 0x2e, 0xd1, 0x0b, 0xc8, 0x2e, 0xb0, 0x77, 0x81, 0xe7, 0xe4, 0x52, 0x4d, 0x9c,
	0x9b, 0x99, 0x7e, 0x51, 0x65, 0x7e, 0x56, 0x5f, 0xc2, 0xe1, 0xbf, 0xe0, 0xc0, 0xbb, 0xba, 0x9a,
	0x8a, 0xb3, 0xad, 0x99, 0x3d, 0xde, 0x7c, 0x98, 0xd5, 0x57, 0xf0, 0x1d, 0xc5, 0xce, 0xb3, 0x4d,
	0xb4, 0x1d, 0x17, 0xc7, 0x36, 0xd5, 0x6c, 0xaa, 0xb5, 0xe5, 0xa0, 0x70, 0xff, 0x1f, 0x00, 0x00,
	0xff, 0xff, 0xdb, 0x67, 0xf5, 0x2c, 0x5a, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WifiServiceClient is the client API for WifiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WifiServiceClient interface {
	// Disable disables Wi-Fi.
	Disable(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Verify verifies whether Wi-Fi service is enable or not.
	Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error)
}

type wifiServiceClient struct {
	cc *grpc.ClientConn
}

func NewWifiServiceClient(cc *grpc.ClientConn) WifiServiceClient {
	return &wifiServiceClient{cc}
}

func (c *wifiServiceClient) Disable(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.mtbf.wifi.WifiService/Disable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error) {
	out := new(VerifyResponse)
	err := c.cc.Invoke(ctx, "/tast.mtbf.wifi.WifiService/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WifiServiceServer is the server API for WifiService service.
type WifiServiceServer interface {
	// Disable disables Wi-Fi.
	Disable(context.Context, *empty.Empty) (*empty.Empty, error)
	// Verify verifies whether Wi-Fi service is enable or not.
	Verify(context.Context, *VerifyRequest) (*VerifyResponse, error)
}

// UnimplementedWifiServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWifiServiceServer struct {
}

func (*UnimplementedWifiServiceServer) Disable(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (*UnimplementedWifiServiceServer) Verify(ctx context.Context, req *VerifyRequest) (*VerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}

func RegisterWifiServiceServer(s *grpc.Server, srv WifiServiceServer) {
	s.RegisterService(&_WifiService_serviceDesc, srv)
}

func _WifiService_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.mtbf.wifi.WifiService/Disable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).Disable(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.mtbf.wifi.WifiService/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).Verify(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WifiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.mtbf.wifi.WifiService",
	HandlerType: (*WifiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Disable",
			Handler:    _WifiService_Disable_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _WifiService_Verify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wifi_service.proto",
}
