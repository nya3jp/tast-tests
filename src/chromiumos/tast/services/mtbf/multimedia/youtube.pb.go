// Code generated by protoc-gen-go. DO NOT EDIT.
// source: youtube.proto

package multimedia

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IsPlayingRequest struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Timeout              int64    `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsPlayingRequest) Reset()         { *m = IsPlayingRequest{} }
func (m *IsPlayingRequest) String() string { return proto.CompactTextString(m) }
func (*IsPlayingRequest) ProtoMessage()    {}
func (*IsPlayingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a2b7823624ac331, []int{0}
}

func (m *IsPlayingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsPlayingRequest.Unmarshal(m, b)
}
func (m *IsPlayingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsPlayingRequest.Marshal(b, m, deterministic)
}
func (m *IsPlayingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsPlayingRequest.Merge(m, src)
}
func (m *IsPlayingRequest) XXX_Size() int {
	return xxx_messageInfo_IsPlayingRequest.Size(m)
}
func (m *IsPlayingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsPlayingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsPlayingRequest proto.InternalMessageInfo

func (m *IsPlayingRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *IsPlayingRequest) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type IsPlayingResponse struct {
	IsPlaying            bool     `protobuf:"varint,1,opt,name=isPlaying,proto3" json:"isPlaying,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsPlayingResponse) Reset()         { *m = IsPlayingResponse{} }
func (m *IsPlayingResponse) String() string { return proto.CompactTextString(m) }
func (*IsPlayingResponse) ProtoMessage()    {}
func (*IsPlayingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a2b7823624ac331, []int{1}
}

func (m *IsPlayingResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsPlayingResponse.Unmarshal(m, b)
}
func (m *IsPlayingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsPlayingResponse.Marshal(b, m, deterministic)
}
func (m *IsPlayingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsPlayingResponse.Merge(m, src)
}
func (m *IsPlayingResponse) XXX_Size() int {
	return xxx_messageInfo_IsPlayingResponse.Size(m)
}
func (m *IsPlayingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsPlayingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsPlayingResponse proto.InternalMessageInfo

func (m *IsPlayingResponse) GetIsPlaying() bool {
	if m != nil {
		return m.IsPlaying
	}
	return false
}

type PlayYoutubeVideoRequest struct {
	URL                  string   `protobuf:"bytes,1,opt,name=URL,proto3" json:"URL,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayYoutubeVideoRequest) Reset()         { *m = PlayYoutubeVideoRequest{} }
func (m *PlayYoutubeVideoRequest) String() string { return proto.CompactTextString(m) }
func (*PlayYoutubeVideoRequest) ProtoMessage()    {}
func (*PlayYoutubeVideoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a2b7823624ac331, []int{2}
}

func (m *PlayYoutubeVideoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayYoutubeVideoRequest.Unmarshal(m, b)
}
func (m *PlayYoutubeVideoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayYoutubeVideoRequest.Marshal(b, m, deterministic)
}
func (m *PlayYoutubeVideoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayYoutubeVideoRequest.Merge(m, src)
}
func (m *PlayYoutubeVideoRequest) XXX_Size() int {
	return xxx_messageInfo_PlayYoutubeVideoRequest.Size(m)
}
func (m *PlayYoutubeVideoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayYoutubeVideoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlayYoutubeVideoRequest proto.InternalMessageInfo

func (m *PlayYoutubeVideoRequest) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func init() {
	proto.RegisterType((*IsPlayingRequest)(nil), "tast.mtbf.multimedia.IsPlayingRequest")
	proto.RegisterType((*IsPlayingResponse)(nil), "tast.mtbf.multimedia.IsPlayingResponse")
	proto.RegisterType((*PlayYoutubeVideoRequest)(nil), "tast.mtbf.multimedia.PlayYoutubeVideoRequest")
}

func init() { proto.RegisterFile("youtube.proto", fileDescriptor_8a2b7823624ac331) }

var fileDescriptor_8a2b7823624ac331 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x50, 0x4f, 0x4b, 0xc3, 0x30,
	0x14, 0xa7, 0x0e, 0xd4, 0x06, 0x94, 0x1a, 0x44, 0x4b, 0xf5, 0x30, 0x7a, 0xd0, 0xa2, 0x98, 0xa0,
	0xde, 0x3d, 0x08, 0x1e, 0x84, 0x1d, 0x24, 0x32, 0x61, 0xe2, 0xa5, 0xdd, 0xde, 0x6a, 0xa0, 0xd9,
	0xab, 0x4d, 0x22, 0xf4, 0x23, 0xfa, 0xad, 0x24, 0xed, 0xea, 0xc6, 0xa8, 0xec, 0x96, 0x3c, 0x7e,
	0xff, 0xc9, 0x41, 0x8d, 0xd6, 0xd8, 0x0c, 0x58, 0x59, 0xa1, 0x41, 0x7a, 0x6c, 0x52, 0x6d, 0x98,
	0x32, 0xd9, 0x9c, 0x29, 0x5b, 0x18, 0xa9, 0x60, 0x26, 0xd3, 0xe8, 0x2c, 0x47, 0xcc, 0x0b, 0xe0,
	0x0d, 0x26, 0xb3, 0x73, 0x0e, 0xaa, 0x34, 0x75, 0x4b, 0x89, 0x1f, 0x48, 0xf0, 0xac, 0x5f, 0x8a,
	0xb4, 0x96, 0x8b, 0x5c, 0xc0, 0x97, 0x05, 0x6d, 0x68, 0x40, 0x06, 0xb6, 0x2a, 0x42, 0x6f, 0xe8,
	0x25, 0xbe, 0x70, 0x4f, 0x1a, 0x92, 0x3d, 0xa7, 0x86, 0xd6, 0x84, 0x3b, 0x43, 0x2f, 0x19, 0x88,
	0xee, 0x1b, 0xdf, 0x92, 0xa3, 0x35, 0xbe, 0x2e, 0x71, 0xa1, 0x81, 0x9e, 0x13, 0x5f, 0x76, 0xc7,
	0x46, 0x66, 0x5f, 0xac, 0x0e, 0xf1, 0x35, 0x39, 0x75, 0xcf, 0x49, 0x1b, 0xfd, 0x4d, 0xce, 0x00,
	0xd7, 0x9c, 0xc7, 0x62, 0xd4, 0x39, 0x8f, 0xc5, 0xe8, 0xee, 0xc7, 0x23, 0x87, 0x4b, 0xe4, 0x2b,
	0x54, 0xdf, 0x72, 0x0a, 0xf4, 0x83, 0xf8, 0x7f, 0x96, 0xf4, 0x82, 0xf5, 0x75, 0x66, 0x9b, 0x9d,
	0xa2, 0xcb, 0xad, 0xb8, 0x65, 0xf6, 0x09, 0x09, 0x36, 0xd3, 0xd1, 0x9b, 0x7e, 0xf2, 0x3f, 0x2d,
	0xa2, 0x13, 0xd6, 0x2e, 0xce, 0xba, 0xc5, 0xd9, 0x93, 0x5b, 0xfc, 0xf1, 0xea, 0x3d, 0x99, 0x7e,
	0x56, 0xa8, 0xa4, 0x55, 0xa8, 0xb9, 0x93, 0xe4, 0xba, 0xed, 0xa4, 0xb9, 0xd3, 0xe6, 0x2b, 0xed,
	0x6c, 0xb7, 0xe1, 0xde, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x53, 0x71, 0xf4, 0xe2, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// YoutubeServiceClient is the client API for YoutubeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type YoutubeServiceClient interface {
	IsPlaying(ctx context.Context, in *IsPlayingRequest, opts ...grpc.CallOption) (*IsPlayingResponse, error)
	PlayYoutubeVideo(ctx context.Context, in *PlayYoutubeVideoRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type youtubeServiceClient struct {
	cc *grpc.ClientConn
}

func NewYoutubeServiceClient(cc *grpc.ClientConn) YoutubeServiceClient {
	return &youtubeServiceClient{cc}
}

func (c *youtubeServiceClient) IsPlaying(ctx context.Context, in *IsPlayingRequest, opts ...grpc.CallOption) (*IsPlayingResponse, error) {
	out := new(IsPlayingResponse)
	err := c.cc.Invoke(ctx, "/tast.mtbf.multimedia.YoutubeService/IsPlaying", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *youtubeServiceClient) PlayYoutubeVideo(ctx context.Context, in *PlayYoutubeVideoRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.mtbf.multimedia.YoutubeService/PlayYoutubeVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YoutubeServiceServer is the server API for YoutubeService service.
type YoutubeServiceServer interface {
	IsPlaying(context.Context, *IsPlayingRequest) (*IsPlayingResponse, error)
	PlayYoutubeVideo(context.Context, *PlayYoutubeVideoRequest) (*empty.Empty, error)
}

// UnimplementedYoutubeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedYoutubeServiceServer struct {
}

func (*UnimplementedYoutubeServiceServer) IsPlaying(ctx context.Context, req *IsPlayingRequest) (*IsPlayingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPlaying not implemented")
}
func (*UnimplementedYoutubeServiceServer) PlayYoutubeVideo(ctx context.Context, req *PlayYoutubeVideoRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayYoutubeVideo not implemented")
}

func RegisterYoutubeServiceServer(s *grpc.Server, srv YoutubeServiceServer) {
	s.RegisterService(&_YoutubeService_serviceDesc, srv)
}

func _YoutubeService_IsPlaying_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsPlayingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YoutubeServiceServer).IsPlaying(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.mtbf.multimedia.YoutubeService/IsPlaying",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YoutubeServiceServer).IsPlaying(ctx, req.(*IsPlayingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YoutubeService_PlayYoutubeVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayYoutubeVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YoutubeServiceServer).PlayYoutubeVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.mtbf.multimedia.YoutubeService/PlayYoutubeVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YoutubeServiceServer).PlayYoutubeVideo(ctx, req.(*PlayYoutubeVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _YoutubeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.mtbf.multimedia.YoutubeService",
	HandlerType: (*YoutubeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsPlaying",
			Handler:    _YoutubeService_IsPlaying_Handler,
		},
		{
			MethodName: "PlayYoutubeVideo",
			Handler:    _YoutubeService_PlayYoutubeVideo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "youtube.proto",
}
