// Code generated by protoc-gen-go. DO NOT EDIT.
// source: camera_service.proto

package camera

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SwitchToPortraitModeRequest struct {
	OutDir               string   `protobuf:"bytes,1,opt,name=outDir,proto3" json:"outDir,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SwitchToPortraitModeRequest) Reset()         { *m = SwitchToPortraitModeRequest{} }
func (m *SwitchToPortraitModeRequest) String() string { return proto.CompactTextString(m) }
func (*SwitchToPortraitModeRequest) ProtoMessage()    {}
func (*SwitchToPortraitModeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56c31f684d2ed878, []int{0}
}

func (m *SwitchToPortraitModeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SwitchToPortraitModeRequest.Unmarshal(m, b)
}
func (m *SwitchToPortraitModeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SwitchToPortraitModeRequest.Marshal(b, m, deterministic)
}
func (m *SwitchToPortraitModeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwitchToPortraitModeRequest.Merge(m, src)
}
func (m *SwitchToPortraitModeRequest) XXX_Size() int {
	return xxx_messageInfo_SwitchToPortraitModeRequest.Size(m)
}
func (m *SwitchToPortraitModeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SwitchToPortraitModeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SwitchToPortraitModeRequest proto.InternalMessageInfo

func (m *SwitchToPortraitModeRequest) GetOutDir() string {
	if m != nil {
		return m.OutDir
	}
	return ""
}

type SwitchCameraRequest struct {
	OutDir               string   `protobuf:"bytes,1,opt,name=outDir,proto3" json:"outDir,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SwitchCameraRequest) Reset()         { *m = SwitchCameraRequest{} }
func (m *SwitchCameraRequest) String() string { return proto.CompactTextString(m) }
func (*SwitchCameraRequest) ProtoMessage()    {}
func (*SwitchCameraRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56c31f684d2ed878, []int{1}
}

func (m *SwitchCameraRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SwitchCameraRequest.Unmarshal(m, b)
}
func (m *SwitchCameraRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SwitchCameraRequest.Marshal(b, m, deterministic)
}
func (m *SwitchCameraRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwitchCameraRequest.Merge(m, src)
}
func (m *SwitchCameraRequest) XXX_Size() int {
	return xxx_messageInfo_SwitchCameraRequest.Size(m)
}
func (m *SwitchCameraRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SwitchCameraRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SwitchCameraRequest proto.InternalMessageInfo

func (m *SwitchCameraRequest) GetOutDir() string {
	if m != nil {
		return m.OutDir
	}
	return ""
}

type GetNumOfCamerasRequest struct {
	OutDir               string   `protobuf:"bytes,1,opt,name=outDir,proto3" json:"outDir,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNumOfCamerasRequest) Reset()         { *m = GetNumOfCamerasRequest{} }
func (m *GetNumOfCamerasRequest) String() string { return proto.CompactTextString(m) }
func (*GetNumOfCamerasRequest) ProtoMessage()    {}
func (*GetNumOfCamerasRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56c31f684d2ed878, []int{2}
}

func (m *GetNumOfCamerasRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNumOfCamerasRequest.Unmarshal(m, b)
}
func (m *GetNumOfCamerasRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNumOfCamerasRequest.Marshal(b, m, deterministic)
}
func (m *GetNumOfCamerasRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNumOfCamerasRequest.Merge(m, src)
}
func (m *GetNumOfCamerasRequest) XXX_Size() int {
	return xxx_messageInfo_GetNumOfCamerasRequest.Size(m)
}
func (m *GetNumOfCamerasRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNumOfCamerasRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNumOfCamerasRequest proto.InternalMessageInfo

func (m *GetNumOfCamerasRequest) GetOutDir() string {
	if m != nil {
		return m.OutDir
	}
	return ""
}

type GetNumOfCamerasResponse struct {
	OutDir               string   `protobuf:"bytes,1,opt,name=outDir,proto3" json:"outDir,omitempty"`
	Num                  int64    `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNumOfCamerasResponse) Reset()         { *m = GetNumOfCamerasResponse{} }
func (m *GetNumOfCamerasResponse) String() string { return proto.CompactTextString(m) }
func (*GetNumOfCamerasResponse) ProtoMessage()    {}
func (*GetNumOfCamerasResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_56c31f684d2ed878, []int{3}
}

func (m *GetNumOfCamerasResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNumOfCamerasResponse.Unmarshal(m, b)
}
func (m *GetNumOfCamerasResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNumOfCamerasResponse.Marshal(b, m, deterministic)
}
func (m *GetNumOfCamerasResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNumOfCamerasResponse.Merge(m, src)
}
func (m *GetNumOfCamerasResponse) XXX_Size() int {
	return xxx_messageInfo_GetNumOfCamerasResponse.Size(m)
}
func (m *GetNumOfCamerasResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNumOfCamerasResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNumOfCamerasResponse proto.InternalMessageInfo

func (m *GetNumOfCamerasResponse) GetOutDir() string {
	if m != nil {
		return m.OutDir
	}
	return ""
}

func (m *GetNumOfCamerasResponse) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

type GetModeStateRequest struct {
	OutDir               string   `protobuf:"bytes,1,opt,name=outDir,proto3" json:"outDir,omitempty"`
	Mode                 string   `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetModeStateRequest) Reset()         { *m = GetModeStateRequest{} }
func (m *GetModeStateRequest) String() string { return proto.CompactTextString(m) }
func (*GetModeStateRequest) ProtoMessage()    {}
func (*GetModeStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56c31f684d2ed878, []int{4}
}

func (m *GetModeStateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetModeStateRequest.Unmarshal(m, b)
}
func (m *GetModeStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetModeStateRequest.Marshal(b, m, deterministic)
}
func (m *GetModeStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetModeStateRequest.Merge(m, src)
}
func (m *GetModeStateRequest) XXX_Size() int {
	return xxx_messageInfo_GetModeStateRequest.Size(m)
}
func (m *GetModeStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetModeStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetModeStateRequest proto.InternalMessageInfo

func (m *GetModeStateRequest) GetOutDir() string {
	if m != nil {
		return m.OutDir
	}
	return ""
}

func (m *GetModeStateRequest) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

type GetModeStateResponse struct {
	OutDir               string   `protobuf:"bytes,1,opt,name=outDir,proto3" json:"outDir,omitempty"`
	Active               bool     `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetModeStateResponse) Reset()         { *m = GetModeStateResponse{} }
func (m *GetModeStateResponse) String() string { return proto.CompactTextString(m) }
func (*GetModeStateResponse) ProtoMessage()    {}
func (*GetModeStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_56c31f684d2ed878, []int{5}
}

func (m *GetModeStateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetModeStateResponse.Unmarshal(m, b)
}
func (m *GetModeStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetModeStateResponse.Marshal(b, m, deterministic)
}
func (m *GetModeStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetModeStateResponse.Merge(m, src)
}
func (m *GetModeStateResponse) XXX_Size() int {
	return xxx_messageInfo_GetModeStateResponse.Size(m)
}
func (m *GetModeStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetModeStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetModeStateResponse proto.InternalMessageInfo

func (m *GetModeStateResponse) GetOutDir() string {
	if m != nil {
		return m.OutDir
	}
	return ""
}

func (m *GetModeStateResponse) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type CheckElementExistRequest struct {
	OutDir               string   `protobuf:"bytes,1,opt,name=outDir,proto3" json:"outDir,omitempty"`
	Selector             string   `protobuf:"bytes,2,opt,name=selector,proto3" json:"selector,omitempty"`
	Expected             bool     `protobuf:"varint,3,opt,name=expected,proto3" json:"expected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckElementExistRequest) Reset()         { *m = CheckElementExistRequest{} }
func (m *CheckElementExistRequest) String() string { return proto.CompactTextString(m) }
func (*CheckElementExistRequest) ProtoMessage()    {}
func (*CheckElementExistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56c31f684d2ed878, []int{6}
}

func (m *CheckElementExistRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckElementExistRequest.Unmarshal(m, b)
}
func (m *CheckElementExistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckElementExistRequest.Marshal(b, m, deterministic)
}
func (m *CheckElementExistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckElementExistRequest.Merge(m, src)
}
func (m *CheckElementExistRequest) XXX_Size() int {
	return xxx_messageInfo_CheckElementExistRequest.Size(m)
}
func (m *CheckElementExistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckElementExistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckElementExistRequest proto.InternalMessageInfo

func (m *CheckElementExistRequest) GetOutDir() string {
	if m != nil {
		return m.OutDir
	}
	return ""
}

func (m *CheckElementExistRequest) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

func (m *CheckElementExistRequest) GetExpected() bool {
	if m != nil {
		return m.Expected
	}
	return false
}

type CloseCameraRequest struct {
	OutDir               string   `protobuf:"bytes,1,opt,name=outDir,proto3" json:"outDir,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloseCameraRequest) Reset()         { *m = CloseCameraRequest{} }
func (m *CloseCameraRequest) String() string { return proto.CompactTextString(m) }
func (*CloseCameraRequest) ProtoMessage()    {}
func (*CloseCameraRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56c31f684d2ed878, []int{7}
}

func (m *CloseCameraRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloseCameraRequest.Unmarshal(m, b)
}
func (m *CloseCameraRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloseCameraRequest.Marshal(b, m, deterministic)
}
func (m *CloseCameraRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseCameraRequest.Merge(m, src)
}
func (m *CloseCameraRequest) XXX_Size() int {
	return xxx_messageInfo_CloseCameraRequest.Size(m)
}
func (m *CloseCameraRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseCameraRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CloseCameraRequest proto.InternalMessageInfo

func (m *CloseCameraRequest) GetOutDir() string {
	if m != nil {
		return m.OutDir
	}
	return ""
}

func init() {
	proto.RegisterType((*SwitchToPortraitModeRequest)(nil), "tast.mtbf.camera.SwitchToPortraitModeRequest")
	proto.RegisterType((*SwitchCameraRequest)(nil), "tast.mtbf.camera.SwitchCameraRequest")
	proto.RegisterType((*GetNumOfCamerasRequest)(nil), "tast.mtbf.camera.GetNumOfCamerasRequest")
	proto.RegisterType((*GetNumOfCamerasResponse)(nil), "tast.mtbf.camera.GetNumOfCamerasResponse")
	proto.RegisterType((*GetModeStateRequest)(nil), "tast.mtbf.camera.GetModeStateRequest")
	proto.RegisterType((*GetModeStateResponse)(nil), "tast.mtbf.camera.GetModeStateResponse")
	proto.RegisterType((*CheckElementExistRequest)(nil), "tast.mtbf.camera.CheckElementExistRequest")
	proto.RegisterType((*CloseCameraRequest)(nil), "tast.mtbf.camera.CloseCameraRequest")
}

func init() { proto.RegisterFile("camera_service.proto", fileDescriptor_56c31f684d2ed878) }

var fileDescriptor_56c31f684d2ed878 = []byte{
	// 434 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xe1, 0x6a, 0xd4, 0x40,
	0x10, 0xc7, 0x39, 0xaf, 0x1c, 0xed, 0x58, 0xb1, 0x6e, 0x8f, 0x18, 0xd2, 0x2f, 0x25, 0xd4, 0x72,
	0x8a, 0xdd, 0x88, 0xe2, 0x03, 0x68, 0x3c, 0xfb, 0x41, 0xaa, 0x92, 0x13, 0x04, 0xa1, 0x48, 0x6e,
	0x6f, 0xd2, 0x8b, 0x66, 0x6f, 0xe3, 0xee, 0xa4, 0xd6, 0x57, 0xf2, 0x29, 0x25, 0xd9, 0x58, 0xae,
	0x4d, 0xd2, 0xdc, 0xb7, 0x1d, 0x76, 0xfe, 0xbf, 0x9d, 0xcd, 0xfe, 0x08, 0x8c, 0x45, 0x2c, 0x51,
	0xc7, 0xdf, 0x0d, 0xea, 0xcb, 0x54, 0x20, 0xcf, 0xb5, 0x22, 0xc5, 0xf6, 0x28, 0x36, 0xc4, 0x25,
	0xcd, 0x13, 0x6e, 0xf7, 0xbd, 0x83, 0x0b, 0xa5, 0x2e, 0x32, 0x0c, 0xaa, 0xfd, 0x79, 0x91, 0x04,
	0x28, 0x73, 0xfa, 0x63, 0xdb, 0xfd, 0xd7, 0x70, 0x30, 0xfb, 0x9d, 0x92, 0x58, 0x7e, 0x51, 0x9f,
	0x95, 0x26, 0x1d, 0xa7, 0x74, 0xa6, 0x16, 0x18, 0xe1, 0xaf, 0x02, 0x0d, 0x31, 0x07, 0x46, 0xaa,
	0xa0, 0x77, 0xa9, 0x76, 0x07, 0x87, 0x83, 0xc9, 0x4e, 0x54, 0x57, 0xfe, 0x09, 0xec, 0xdb, 0x58,
	0x58, 0x9d, 0xd1, 0xd7, 0xfe, 0x02, 0x9c, 0x53, 0xa4, 0x8f, 0x85, 0xfc, 0x94, 0xd8, 0x80, 0xe9,
	0x4b, 0x84, 0xf0, 0xb8, 0x91, 0x30, 0xb9, 0x5a, 0x19, 0xec, 0x8a, 0xb0, 0x3d, 0x18, 0xae, 0x0a,
	0xe9, 0xde, 0x3b, 0x1c, 0x4c, 0x86, 0x51, 0xb9, 0xf4, 0xdf, 0xc0, 0xfe, 0x29, 0x56, 0xf7, 0x99,
	0x51, 0x4c, 0x7d, 0x97, 0x62, 0x0c, 0xb6, 0xa4, 0x5a, 0x60, 0x45, 0xd8, 0x89, 0xaa, 0xb5, 0xff,
	0x1e, 0xc6, 0x37, 0x11, 0x3d, 0x43, 0x38, 0x30, 0x8a, 0x05, 0xa5, 0x97, 0x96, 0xb2, 0x1d, 0xd5,
	0x95, 0xff, 0x03, 0xdc, 0x70, 0x89, 0xe2, 0xe7, 0x34, 0x43, 0x89, 0x2b, 0x9a, 0x5e, 0xa5, 0x86,
	0xfa, 0xe6, 0xf1, 0x60, 0xdb, 0x60, 0x86, 0x82, 0x94, 0xae, 0x67, 0xba, 0xae, 0xcb, 0x3d, 0xbc,
	0xca, 0x51, 0x10, 0x2e, 0xdc, 0x61, 0x75, 0xd2, 0x75, 0xed, 0x3f, 0x07, 0x16, 0x66, 0xca, 0xe0,
	0x46, 0x6f, 0xf3, 0xf2, 0xef, 0x16, 0x3c, 0xb0, 0x9d, 0x33, 0x2b, 0x12, 0x3b, 0x87, 0x71, 0x9b,
	0x13, 0xec, 0x84, 0xdf, 0x76, 0x8b, 0xdf, 0xe1, 0x8e, 0xe7, 0x70, 0x2b, 0x1e, 0xff, 0x2f, 0x1e,
	0x9f, 0x96, 0xe2, 0xb1, 0x33, 0xd8, 0x5d, 0x77, 0x87, 0x3d, 0xe9, 0xc2, 0xde, 0x98, 0xbf, 0x13,
	0x97, 0xc0, 0xc3, 0x5b, 0xa6, 0xb0, 0x49, 0x93, 0xd8, 0xae, 0x9f, 0xf7, 0x74, 0x83, 0xce, 0xfa,
	0xc5, 0xcf, 0x61, 0x77, 0xdd, 0x84, 0xb6, 0xb1, 0x5b, 0x64, 0xf3, 0x8e, 0xfb, 0xda, 0x6a, 0xfc,
	0x57, 0x78, 0xd4, 0x10, 0x84, 0x3d, 0x6b, 0x86, 0xbb, 0x2c, 0xea, 0xfc, 0x3e, 0x1f, 0xe0, 0xfe,
	0x9a, 0x0d, 0xec, 0xa8, 0x05, 0xd9, 0x90, 0xa5, 0x0b, 0xf6, 0xf6, 0xf8, 0xdb, 0x91, 0x58, 0x6a,
	0x25, 0xd3, 0x42, 0x2a, 0x13, 0x94, 0xa4, 0xa0, 0xfe, 0xfd, 0x98, 0xa0, 0x44, 0x06, 0x16, 0x39,
	0x1f, 0x55, 0xb9, 0x57, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x67, 0xc9, 0x33, 0xa4, 0x04,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CameraServiceClient is the client API for CameraService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CameraServiceClient interface {
	SwitchToPortraitMode(ctx context.Context, in *SwitchToPortraitModeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SwitchCamera(ctx context.Context, in *SwitchCameraRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetNumOfCameras(ctx context.Context, in *GetNumOfCamerasRequest, opts ...grpc.CallOption) (*GetNumOfCamerasResponse, error)
	GetModeState(ctx context.Context, in *GetModeStateRequest, opts ...grpc.CallOption) (*GetModeStateResponse, error)
	CheckElementExist(ctx context.Context, in *CheckElementExistRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CloseCamera(ctx context.Context, in *CloseCameraRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type cameraServiceClient struct {
	cc *grpc.ClientConn
}

func NewCameraServiceClient(cc *grpc.ClientConn) CameraServiceClient {
	return &cameraServiceClient{cc}
}

func (c *cameraServiceClient) SwitchToPortraitMode(ctx context.Context, in *SwitchToPortraitModeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.mtbf.camera.CameraService/SwitchToPortraitMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) SwitchCamera(ctx context.Context, in *SwitchCameraRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.mtbf.camera.CameraService/SwitchCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) GetNumOfCameras(ctx context.Context, in *GetNumOfCamerasRequest, opts ...grpc.CallOption) (*GetNumOfCamerasResponse, error) {
	out := new(GetNumOfCamerasResponse)
	err := c.cc.Invoke(ctx, "/tast.mtbf.camera.CameraService/GetNumOfCameras", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) GetModeState(ctx context.Context, in *GetModeStateRequest, opts ...grpc.CallOption) (*GetModeStateResponse, error) {
	out := new(GetModeStateResponse)
	err := c.cc.Invoke(ctx, "/tast.mtbf.camera.CameraService/GetModeState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) CheckElementExist(ctx context.Context, in *CheckElementExistRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.mtbf.camera.CameraService/CheckElementExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) CloseCamera(ctx context.Context, in *CloseCameraRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.mtbf.camera.CameraService/CloseCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CameraServiceServer is the server API for CameraService service.
type CameraServiceServer interface {
	SwitchToPortraitMode(context.Context, *SwitchToPortraitModeRequest) (*empty.Empty, error)
	SwitchCamera(context.Context, *SwitchCameraRequest) (*empty.Empty, error)
	GetNumOfCameras(context.Context, *GetNumOfCamerasRequest) (*GetNumOfCamerasResponse, error)
	GetModeState(context.Context, *GetModeStateRequest) (*GetModeStateResponse, error)
	CheckElementExist(context.Context, *CheckElementExistRequest) (*empty.Empty, error)
	CloseCamera(context.Context, *CloseCameraRequest) (*empty.Empty, error)
}

// UnimplementedCameraServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCameraServiceServer struct {
}

func (*UnimplementedCameraServiceServer) SwitchToPortraitMode(ctx context.Context, req *SwitchToPortraitModeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchToPortraitMode not implemented")
}
func (*UnimplementedCameraServiceServer) SwitchCamera(ctx context.Context, req *SwitchCameraRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchCamera not implemented")
}
func (*UnimplementedCameraServiceServer) GetNumOfCameras(ctx context.Context, req *GetNumOfCamerasRequest) (*GetNumOfCamerasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumOfCameras not implemented")
}
func (*UnimplementedCameraServiceServer) GetModeState(ctx context.Context, req *GetModeStateRequest) (*GetModeStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModeState not implemented")
}
func (*UnimplementedCameraServiceServer) CheckElementExist(ctx context.Context, req *CheckElementExistRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckElementExist not implemented")
}
func (*UnimplementedCameraServiceServer) CloseCamera(ctx context.Context, req *CloseCameraRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseCamera not implemented")
}

func RegisterCameraServiceServer(s *grpc.Server, srv CameraServiceServer) {
	s.RegisterService(&_CameraService_serviceDesc, srv)
}

func _CameraService_SwitchToPortraitMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchToPortraitModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).SwitchToPortraitMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.mtbf.camera.CameraService/SwitchToPortraitMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).SwitchToPortraitMode(ctx, req.(*SwitchToPortraitModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_SwitchCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).SwitchCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.mtbf.camera.CameraService/SwitchCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).SwitchCamera(ctx, req.(*SwitchCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_GetNumOfCameras_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNumOfCamerasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).GetNumOfCameras(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.mtbf.camera.CameraService/GetNumOfCameras",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).GetNumOfCameras(ctx, req.(*GetNumOfCamerasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_GetModeState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModeStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).GetModeState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.mtbf.camera.CameraService/GetModeState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).GetModeState(ctx, req.(*GetModeStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_CheckElementExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckElementExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).CheckElementExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.mtbf.camera.CameraService/CheckElementExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).CheckElementExist(ctx, req.(*CheckElementExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_CloseCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).CloseCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.mtbf.camera.CameraService/CloseCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).CloseCamera(ctx, req.(*CloseCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CameraService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.mtbf.camera.CameraService",
	HandlerType: (*CameraServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SwitchToPortraitMode",
			Handler:    _CameraService_SwitchToPortraitMode_Handler,
		},
		{
			MethodName: "SwitchCamera",
			Handler:    _CameraService_SwitchCamera_Handler,
		},
		{
			MethodName: "GetNumOfCameras",
			Handler:    _CameraService_GetNumOfCameras_Handler,
		},
		{
			MethodName: "GetModeState",
			Handler:    _CameraService_GetModeState_Handler,
		},
		{
			MethodName: "CheckElementExist",
			Handler:    _CameraService_CheckElementExist_Handler,
		},
		{
			MethodName: "CloseCamera",
			Handler:    _CameraService_CloseCamera_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "camera_service.proto",
}
