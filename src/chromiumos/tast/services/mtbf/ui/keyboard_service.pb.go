// Code generated by protoc-gen-go. DO NOT EDIT.
// source: keyboard_service.proto

package ui

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type KeyboardAccelRequest struct {
	Command              string   `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Times                int64    `protobuf:"varint,2,opt,name=times,proto3" json:"times,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyboardAccelRequest) Reset()         { *m = KeyboardAccelRequest{} }
func (m *KeyboardAccelRequest) String() string { return proto.CompactTextString(m) }
func (*KeyboardAccelRequest) ProtoMessage()    {}
func (*KeyboardAccelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d57e055cc4259a6, []int{0}
}

func (m *KeyboardAccelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyboardAccelRequest.Unmarshal(m, b)
}
func (m *KeyboardAccelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyboardAccelRequest.Marshal(b, m, deterministic)
}
func (m *KeyboardAccelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyboardAccelRequest.Merge(m, src)
}
func (m *KeyboardAccelRequest) XXX_Size() int {
	return xxx_messageInfo_KeyboardAccelRequest.Size(m)
}
func (m *KeyboardAccelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyboardAccelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KeyboardAccelRequest proto.InternalMessageInfo

func (m *KeyboardAccelRequest) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *KeyboardAccelRequest) GetTimes() int64 {
	if m != nil {
		return m.Times
	}
	return 0
}

type KeyboardTypeRequest struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyboardTypeRequest) Reset()         { *m = KeyboardTypeRequest{} }
func (m *KeyboardTypeRequest) String() string { return proto.CompactTextString(m) }
func (*KeyboardTypeRequest) ProtoMessage()    {}
func (*KeyboardTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d57e055cc4259a6, []int{1}
}

func (m *KeyboardTypeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyboardTypeRequest.Unmarshal(m, b)
}
func (m *KeyboardTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyboardTypeRequest.Marshal(b, m, deterministic)
}
func (m *KeyboardTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyboardTypeRequest.Merge(m, src)
}
func (m *KeyboardTypeRequest) XXX_Size() int {
	return xxx_messageInfo_KeyboardTypeRequest.Size(m)
}
func (m *KeyboardTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyboardTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KeyboardTypeRequest proto.InternalMessageInfo

func (m *KeyboardTypeRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*KeyboardAccelRequest)(nil), "tast.mtbf.ui.KeyboardAccelRequest")
	proto.RegisterType((*KeyboardTypeRequest)(nil), "tast.mtbf.ui.KeyboardTypeRequest")
}

func init() { proto.RegisterFile("keyboard_service.proto", fileDescriptor_8d57e055cc4259a6) }

var fileDescriptor_8d57e055cc4259a6 = []byte{
	// 246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x15, 0x68, 0x41, 0x9c, 0x90, 0x90, 0x4c, 0x55, 0x45, 0x65, 0x09, 0x99, 0xca, 0x62,
	0x4b, 0xf0, 0x04, 0x05, 0xc1, 0xc2, 0x16, 0x98, 0x58, 0x50, 0xe2, 0x5e, 0x8b, 0x45, 0xcd, 0x85,
	0xf8, 0x8c, 0xc8, 0xa3, 0xf0, 0xb6, 0x28, 0x71, 0x2c, 0x75, 0x48, 0x37, 0x9f, 0x7c, 0xfe, 0xfe,
	0xef, 0x37, 0xcc, 0x3f, 0xb1, 0xad, 0xa8, 0x6c, 0xd6, 0xef, 0x0e, 0x9b, 0x1f, 0xa3, 0x51, 0xd6,
	0x0d, 0x31, 0x89, 0x73, 0x2e, 0x1d, 0x4b, 0xcb, 0xd5, 0x46, 0x7a, 0xb3, 0xb8, 0xda, 0x12, 0x6d,
	0x77, 0xa8, 0xfa, 0xbb, 0xca, 0x6f, 0x14, 0xda, 0x9a, 0xdb, 0xb0, 0x9a, 0x3f, 0xc1, 0xec, 0x79,
	0x80, 0xac, 0xb4, 0xc6, 0x5d, 0x81, 0xdf, 0x1e, 0x1d, 0x8b, 0x14, 0x4e, 0x35, 0x59, 0x5b, 0x7e,
	0xad, 0xd3, 0x24, 0x4b, 0x96, 0x67, 0x45, 0x1c, 0xc5, 0x0c, 0xa6, 0x6c, 0x2c, 0xba, 0xf4, 0x28,
	0x4b, 0x96, 0xc7, 0x45, 0x18, 0xf2, 0x1b, 0xb8, 0x8c, 0x9c, 0xd7, 0xb6, 0xc6, 0x88, 0x11, 0x30,
	0x61, 0xfc, 0xe5, 0x81, 0xd1, 0x9f, 0x6f, 0xff, 0x12, 0xb8, 0x88, 0xbb, 0x2f, 0xc1, 0x5b, 0x3c,
	0xc0, 0xb4, 0x8f, 0x17, 0xb9, 0xdc, 0x77, 0x97, 0x63, 0x6e, 0x8b, 0xb9, 0x0c, 0x8d, 0x64, 0x6c,
	0x24, 0x1f, 0xbb, 0x46, 0x62, 0x05, 0x93, 0x2e, 0x5b, 0x5c, 0x8f, 0x33, 0xf6, 0xbc, 0x0e, 0x21,
	0xee, 0xf3, 0xb7, 0x4c, 0x7f, 0x34, 0x64, 0x8d, 0xb7, 0xe4, 0x54, 0x87, 0x51, 0xc3, 0xd7, 0x3a,
	0xd5, 0xf1, 0x94, 0x37, 0xd5, 0x49, 0xff, 0xe6, 0xee, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x72, 0xc8,
	0x82, 0xe8, 0x7e, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KeyboardServiceClient is the client API for KeyboardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeyboardServiceClient interface {
	// Accel sends keyboard command to DUT
	Accel(ctx context.Context, in *KeyboardAccelRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Type(ctx context.Context, in *KeyboardTypeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type keyboardServiceClient struct {
	cc *grpc.ClientConn
}

func NewKeyboardServiceClient(cc *grpc.ClientConn) KeyboardServiceClient {
	return &keyboardServiceClient{cc}
}

func (c *keyboardServiceClient) Accel(ctx context.Context, in *KeyboardAccelRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.mtbf.ui.KeyboardService/Accel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyboardServiceClient) Type(ctx context.Context, in *KeyboardTypeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.mtbf.ui.KeyboardService/Type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyboardServiceServer is the server API for KeyboardService service.
type KeyboardServiceServer interface {
	// Accel sends keyboard command to DUT
	Accel(context.Context, *KeyboardAccelRequest) (*empty.Empty, error)
	Type(context.Context, *KeyboardTypeRequest) (*empty.Empty, error)
}

// UnimplementedKeyboardServiceServer can be embedded to have forward compatible implementations.
type UnimplementedKeyboardServiceServer struct {
}

func (*UnimplementedKeyboardServiceServer) Accel(ctx context.Context, req *KeyboardAccelRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accel not implemented")
}
func (*UnimplementedKeyboardServiceServer) Type(ctx context.Context, req *KeyboardTypeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Type not implemented")
}

func RegisterKeyboardServiceServer(s *grpc.Server, srv KeyboardServiceServer) {
	s.RegisterService(&_KeyboardService_serviceDesc, srv)
}

func _KeyboardService_Accel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyboardAccelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyboardServiceServer).Accel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.mtbf.ui.KeyboardService/Accel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyboardServiceServer).Accel(ctx, req.(*KeyboardAccelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyboardService_Type_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyboardTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyboardServiceServer).Type(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.mtbf.ui.KeyboardService/Type",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyboardServiceServer).Type(ctx, req.(*KeyboardTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyboardService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.mtbf.ui.KeyboardService",
	HandlerType: (*KeyboardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Accel",
			Handler:    _KeyboardService_Accel_Handler,
		},
		{
			MethodName: "Type",
			Handler:    _KeyboardService_Type_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keyboard_service.proto",
}
