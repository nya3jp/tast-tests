// Code generated by protoc-gen-go. DO NOT EDIT.
// source: filesapp.proto

package ui

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FileRequest struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Open                 bool     `protobuf:"varint,2,opt,name=open,proto3" json:"open,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileRequest) Reset()         { *m = FileRequest{} }
func (m *FileRequest) String() string { return proto.CompactTextString(m) }
func (*FileRequest) ProtoMessage()    {}
func (*FileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a4f0d012a0edbc2, []int{0}
}

func (m *FileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileRequest.Unmarshal(m, b)
}
func (m *FileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileRequest.Marshal(b, m, deterministic)
}
func (m *FileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileRequest.Merge(m, src)
}
func (m *FileRequest) XXX_Size() int {
	return xxx_messageInfo_FileRequest.Size(m)
}
func (m *FileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FileRequest proto.InternalMessageInfo

func (m *FileRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *FileRequest) GetOpen() bool {
	if m != nil {
		return m.Open
	}
	return false
}

type FileResponse struct {
	Name                 string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Size                 int64                `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	ModTime              *timestamp.Timestamp `protobuf:"bytes,3,opt,name=mod_time,json=modTime,proto3" json:"mod_time,omitempty"`
	IsDir                bool                 `protobuf:"varint,4,opt,name=is_dir,json=isDir,proto3" json:"is_dir,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *FileResponse) Reset()         { *m = FileResponse{} }
func (m *FileResponse) String() string { return proto.CompactTextString(m) }
func (*FileResponse) ProtoMessage()    {}
func (*FileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a4f0d012a0edbc2, []int{1}
}

func (m *FileResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileResponse.Unmarshal(m, b)
}
func (m *FileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileResponse.Marshal(b, m, deterministic)
}
func (m *FileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileResponse.Merge(m, src)
}
func (m *FileResponse) XXX_Size() int {
	return xxx_messageInfo_FileResponse.Size(m)
}
func (m *FileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FileResponse proto.InternalMessageInfo

func (m *FileResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileResponse) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *FileResponse) GetModTime() *timestamp.Timestamp {
	if m != nil {
		return m.ModTime
	}
	return nil
}

func (m *FileResponse) GetIsDir() bool {
	if m != nil {
		return m.IsDir
	}
	return false
}

func init() {
	proto.RegisterType((*FileRequest)(nil), "tast.mtbf.ui.FileRequest")
	proto.RegisterType((*FileResponse)(nil), "tast.mtbf.ui.FileResponse")
}

func init() { proto.RegisterFile("filesapp.proto", fileDescriptor_4a4f0d012a0edbc2) }

var fileDescriptor_4a4f0d012a0edbc2 = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xcf, 0x4b, 0xfb, 0x40,
	0x10, 0xc5, 0xc9, 0xb7, 0x3f, 0xbe, 0x75, 0x5b, 0x04, 0x17, 0x94, 0x18, 0x0f, 0x86, 0x9e, 0x7a,
	0xda, 0x40, 0xa5, 0x78, 0xf2, 0xa0, 0xd6, 0x82, 0xd7, 0xd4, 0x93, 0x97, 0xb2, 0x6d, 0xa6, 0xed,
	0x42, 0x36, 0xb3, 0x66, 0x36, 0x8a, 0x9e, 0xfd, 0xeb, 0xfc, 0xab, 0x64, 0x37, 0x06, 0x8a, 0x5a,
	0x6f, 0x6f, 0x67, 0xe6, 0xbd, 0xfd, 0xf0, 0xd8, 0xe1, 0x5a, 0xe5, 0x40, 0xd2, 0x18, 0x61, 0x4a,
	0xb4, 0xc8, 0x07, 0x56, 0x92, 0x15, 0xda, 0x2e, 0xd7, 0xa2, 0x52, 0xd1, 0xd9, 0x06, 0x71, 0x93,
	0x43, 0xe2, 0x77, 0xcb, 0x6a, 0x9d, 0x80, 0x36, 0xf6, 0xb5, 0x3e, 0x8d, 0xce, 0xbf, 0x2f, 0xad,
	0xd2, 0x40, 0x56, 0xea, 0xaf, 0xac, 0xe1, 0x84, 0xf5, 0x67, 0x2a, 0x87, 0x14, 0x9e, 0x2a, 0x20,
	0xcb, 0x39, 0x6b, 0x1b, 0x69, 0xb7, 0x61, 0x10, 0x07, 0xa3, 0x83, 0xd4, 0x6b, 0x37, 0x43, 0x03,
	0x45, 0xf8, 0x2f, 0x0e, 0x46, 0xbd, 0xd4, 0xeb, 0xe1, 0x7b, 0xc0, 0x06, 0xb5, 0x8f, 0x0c, 0x16,
	0x04, 0xee, 0xa8, 0x90, 0x1a, 0x1a, 0xa3, 0xd3, 0x6e, 0x46, 0xea, 0x0d, 0xbc, 0xb1, 0x95, 0x7a,
	0xcd, 0x27, 0xac, 0xa7, 0x31, 0x5b, 0x38, 0x8c, 0xb0, 0x15, 0x07, 0xa3, 0xfe, 0x38, 0x12, 0x35,
	0xa3, 0x68, 0x18, 0xc5, 0x43, 0xc3, 0x98, 0xfe, 0xd7, 0x98, 0xb9, 0x17, 0x3f, 0x66, 0x5d, 0x45,
	0x8b, 0x4c, 0x95, 0x61, 0xdb, 0x53, 0x74, 0x14, 0x4d, 0x55, 0x39, 0xfe, 0x08, 0x58, 0xcf, 0x61,
	0xd0, 0xb5, 0x31, 0xfc, 0x92, 0x75, 0x6e, 0x73, 0x24, 0xe0, 0x27, 0x3f, 0x12, 0xef, 0x5c, 0x25,
	0xd1, 0x9e, 0x39, 0x9f, 0xb1, 0xa3, 0x39, 0xe4, 0xb0, 0xb2, 0xf7, 0xc5, 0x14, 0x5f, 0x8a, 0x1c,
	0x65, 0x46, 0xfc, 0x54, 0xec, 0xb6, 0x2c, 0x76, 0x4a, 0xda, 0x9b, 0x73, 0xc5, 0xda, 0x73, 0x2b,
	0xed, 0x5f, 0xd6, 0xe8, 0xb7, 0x55, 0x5d, 0xe1, 0xcd, 0xf0, 0x31, 0x5e, 0x6d, 0x4b, 0xd4, 0xaa,
	0xd2, 0x48, 0x89, 0xbb, 0x4b, 0x08, 0xca, 0x67, 0xb5, 0x02, 0x4a, 0x9c, 0x21, 0xa9, 0xd4, 0xb2,
	0xeb, 0xbf, 0xbc, 0xf8, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x7c, 0x56, 0x44, 0x83, 0x13, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FilesAppClient is the client API for FilesApp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FilesAppClient interface {
	// Close closes the Files App.
	Close(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// SelectInDownloads launches the Files App, selecting a file by the relative
	// path insides the Downloads directory. It opens the file if the request's
	// Open field set to true.
	SelectInDownloads(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Stat returns the file information by the absolute path. It does NOT launch
	// the Files App.
	Stat(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error)
}

type filesAppClient struct {
	cc *grpc.ClientConn
}

func NewFilesAppClient(cc *grpc.ClientConn) FilesAppClient {
	return &filesAppClient{cc}
}

func (c *filesAppClient) Close(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.mtbf.ui.FilesApp/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesAppClient) SelectInDownloads(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.mtbf.ui.FilesApp/SelectInDownloads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesAppClient) Stat(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error) {
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, "/tast.mtbf.ui.FilesApp/Stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesAppServer is the server API for FilesApp service.
type FilesAppServer interface {
	// Close closes the Files App.
	Close(context.Context, *empty.Empty) (*empty.Empty, error)
	// SelectInDownloads launches the Files App, selecting a file by the relative
	// path insides the Downloads directory. It opens the file if the request's
	// Open field set to true.
	SelectInDownloads(context.Context, *FileRequest) (*empty.Empty, error)
	// Stat returns the file information by the absolute path. It does NOT launch
	// the Files App.
	Stat(context.Context, *FileRequest) (*FileResponse, error)
}

// UnimplementedFilesAppServer can be embedded to have forward compatible implementations.
type UnimplementedFilesAppServer struct {
}

func (*UnimplementedFilesAppServer) Close(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedFilesAppServer) SelectInDownloads(ctx context.Context, req *FileRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectInDownloads not implemented")
}
func (*UnimplementedFilesAppServer) Stat(ctx context.Context, req *FileRequest) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}

func RegisterFilesAppServer(s *grpc.Server, srv FilesAppServer) {
	s.RegisterService(&_FilesApp_serviceDesc, srv)
}

func _FilesApp_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesAppServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.mtbf.ui.FilesApp/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesAppServer).Close(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesApp_SelectInDownloads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesAppServer).SelectInDownloads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.mtbf.ui.FilesApp/SelectInDownloads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesAppServer).SelectInDownloads(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesApp_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesAppServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.mtbf.ui.FilesApp/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesAppServer).Stat(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FilesApp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.mtbf.ui.FilesApp",
	HandlerType: (*FilesAppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Close",
			Handler:    _FilesApp_Close_Handler,
		},
		{
			MethodName: "SelectInDownloads",
			Handler:    _FilesApp_SelectInDownloads_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _FilesApp_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "filesapp.proto",
}
