// Code generated by protoc-gen-go. DO NOT EDIT.
// source: shelf.proto

package ui

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("shelf.proto", fileDescriptor_997c08397bcb74ab) }

var fileDescriptor_997c08397bcb74ab = []byte{
	// 151 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0xce, 0x48, 0xcd,
	0x49, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x29, 0x49, 0x2c, 0x2e, 0xd1, 0xcb, 0x2d,
	0x49, 0x4a, 0xd3, 0x2b, 0xcd, 0x94, 0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0xcb,
	0x25, 0x95, 0xa6, 0xe9, 0xa7, 0xe6, 0x16, 0x94, 0x54, 0x42, 0x94, 0x1a, 0x79, 0x72, 0xb1, 0x06,
	0x83, 0x74, 0x0a, 0x39, 0x70, 0xf1, 0xf9, 0x17, 0xa4, 0xe6, 0x05, 0x57, 0x16, 0x97, 0xa4, 0xe6,
	0x86, 0x14, 0x25, 0x56, 0x0a, 0x89, 0xe9, 0x41, 0x34, 0xea, 0xc1, 0x34, 0xea, 0xb9, 0x82, 0x34,
	0x4a, 0xe1, 0x10, 0x77, 0x52, 0x8a, 0x52, 0x48, 0xce, 0x28, 0xca, 0xcf, 0xcd, 0x2c, 0xcd, 0xcd,
	0x2f, 0xd6, 0x07, 0x39, 0x41, 0xbf, 0x38, 0xb5, 0xa8, 0x2c, 0x33, 0x39, 0xb5, 0x58, 0x1f, 0xe4,
	0x16, 0xfd, 0xd2, 0xcc, 0x24, 0x36, 0xb0, 0x1e, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x11,
	0xb9, 0x6c, 0x10, 0xaf, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ShelfClient is the client API for Shelf service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ShelfClient interface {
	OpenSystemTray(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type shelfClient struct {
	cc *grpc.ClientConn
}

func NewShelfClient(cc *grpc.ClientConn) ShelfClient {
	return &shelfClient{cc}
}

func (c *shelfClient) OpenSystemTray(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.mtbf.ui.Shelf/OpenSystemTray", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShelfServer is the server API for Shelf service.
type ShelfServer interface {
	OpenSystemTray(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedShelfServer can be embedded to have forward compatible implementations.
type UnimplementedShelfServer struct {
}

func (*UnimplementedShelfServer) OpenSystemTray(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenSystemTray not implemented")
}

func RegisterShelfServer(s *grpc.Server, srv ShelfServer) {
	s.RegisterService(&_Shelf_serviceDesc, srv)
}

func _Shelf_OpenSystemTray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShelfServer).OpenSystemTray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.mtbf.ui.Shelf/OpenSystemTray",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShelfServer).OpenSystemTray(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Shelf_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.mtbf.ui.Shelf",
	HandlerType: (*ShelfServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenSystemTray",
			Handler:    _Shelf_OpenSystemTray_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shelf.proto",
}
