// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: upstart_service.proto

package platform

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CheckJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobName string `protobuf:"bytes,1,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
}

func (x *CheckJobRequest) Reset() {
	*x = CheckJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_upstart_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckJobRequest) ProtoMessage() {}

func (x *CheckJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_upstart_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckJobRequest.ProtoReflect.Descriptor instead.
func (*CheckJobRequest) Descriptor() ([]byte, []int) {
	return file_upstart_service_proto_rawDescGZIP(), []int{0}
}

func (x *CheckJobRequest) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

type JobStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobName string `protobuf:"bytes,1,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
}

func (x *JobStatusRequest) Reset() {
	*x = JobStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_upstart_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatusRequest) ProtoMessage() {}

func (x *JobStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_upstart_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatusRequest.ProtoReflect.Descriptor instead.
func (*JobStatusRequest) Descriptor() ([]byte, []int) {
	return file_upstart_service_proto_rawDescGZIP(), []int{1}
}

func (x *JobStatusRequest) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

// Definitions of "goal" and "state" described in
// https://chromium.googlesource.com/chromiumos/platform/tast-tests/+/HEAD/src/chromiumos/tast/local/upstart/upstart.go
type JobStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Goal  string `protobuf:"bytes,1,opt,name=goal,proto3" json:"goal,omitempty"`
	State string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Pid   int32  `protobuf:"varint,3,opt,name=pid,proto3" json:"pid,omitempty"`
}

func (x *JobStatusResponse) Reset() {
	*x = JobStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_upstart_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatusResponse) ProtoMessage() {}

func (x *JobStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_upstart_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatusResponse.ProtoReflect.Descriptor instead.
func (*JobStatusResponse) Descriptor() ([]byte, []int) {
	return file_upstart_service_proto_rawDescGZIP(), []int{2}
}

func (x *JobStatusResponse) GetGoal() string {
	if x != nil {
		return x.Goal
	}
	return ""
}

func (x *JobStatusResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *JobStatusResponse) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type StartJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobName string `protobuf:"bytes,1,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	Args    []*Arg `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *StartJobRequest) Reset() {
	*x = StartJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_upstart_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartJobRequest) ProtoMessage() {}

func (x *StartJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_upstart_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartJobRequest.ProtoReflect.Descriptor instead.
func (*StartJobRequest) Descriptor() ([]byte, []int) {
	return file_upstart_service_proto_rawDescGZIP(), []int{3}
}

func (x *StartJobRequest) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *StartJobRequest) GetArgs() []*Arg {
	if x != nil {
		return x.Args
	}
	return nil
}

type StopJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobName string `protobuf:"bytes,1,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
}

func (x *StopJobRequest) Reset() {
	*x = StopJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_upstart_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopJobRequest) ProtoMessage() {}

func (x *StopJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_upstart_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopJobRequest.ProtoReflect.Descriptor instead.
func (*StopJobRequest) Descriptor() ([]byte, []int) {
	return file_upstart_service_proto_rawDescGZIP(), []int{4}
}

func (x *StopJobRequest) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

type EnableJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobName string `protobuf:"bytes,1,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
}

func (x *EnableJobRequest) Reset() {
	*x = EnableJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_upstart_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableJobRequest) ProtoMessage() {}

func (x *EnableJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_upstart_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableJobRequest.ProtoReflect.Descriptor instead.
func (*EnableJobRequest) Descriptor() ([]byte, []int) {
	return file_upstart_service_proto_rawDescGZIP(), []int{5}
}

func (x *EnableJobRequest) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

type DisableJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobName string `protobuf:"bytes,1,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
}

func (x *DisableJobRequest) Reset() {
	*x = DisableJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_upstart_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableJobRequest) ProtoMessage() {}

func (x *DisableJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_upstart_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableJobRequest.ProtoReflect.Descriptor instead.
func (*DisableJobRequest) Descriptor() ([]byte, []int) {
	return file_upstart_service_proto_rawDescGZIP(), []int{6}
}

func (x *DisableJobRequest) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

type IsJobEnabledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobName string `protobuf:"bytes,1,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
}

func (x *IsJobEnabledRequest) Reset() {
	*x = IsJobEnabledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_upstart_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsJobEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsJobEnabledRequest) ProtoMessage() {}

func (x *IsJobEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_upstart_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsJobEnabledRequest.ProtoReflect.Descriptor instead.
func (*IsJobEnabledRequest) Descriptor() ([]byte, []int) {
	return file_upstart_service_proto_rawDescGZIP(), []int{7}
}

func (x *IsJobEnabledRequest) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

type IsJobEnabledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *IsJobEnabledResponse) Reset() {
	*x = IsJobEnabledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_upstart_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsJobEnabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsJobEnabledResponse) ProtoMessage() {}

func (x *IsJobEnabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_upstart_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsJobEnabledResponse.ProtoReflect.Descriptor instead.
func (*IsJobEnabledResponse) Descriptor() ([]byte, []int) {
	return file_upstart_service_proto_rawDescGZIP(), []int{8}
}

func (x *IsJobEnabledResponse) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type Arg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Arg) Reset() {
	*x = Arg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_upstart_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Arg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Arg) ProtoMessage() {}

func (x *Arg) ProtoReflect() protoreflect.Message {
	mi := &file_upstart_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Arg.ProtoReflect.Descriptor instead.
func (*Arg) Descriptor() ([]byte, []int) {
	return file_upstart_service_proto_rawDescGZIP(), []int{9}
}

func (x *Arg) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Arg) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_upstart_service_proto protoreflect.FileDescriptor

var file_upstart_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x75, 0x70, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72,
	0x6f, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2c, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6a,
	0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a,
	0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2d, 0x0a, 0x10, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f,
	0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f,
	0x62, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x11, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x22, 0x5f, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x41, 0x72, 0x67, 0x52, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x2b, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x70, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2d, 0x0a, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x2e, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x13, 0x49, 0x73, 0x4a, 0x6f, 0x62, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f,
	0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f,
	0x62, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x14, 0x49, 0x73, 0x4a, 0x6f, 0x62, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x2d, 0x0a, 0x03, 0x41, 0x72, 0x67, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0xcc, 0x04, 0x0a, 0x0e, 0x55, 0x70, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x12, 0x23, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f,
	0x73, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x24, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x49, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x23, 0x2e, 0x74,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x07, 0x53,
	0x74, 0x6f, 0x70, 0x4a, 0x6f, 0x62, 0x12, 0x22, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72,
	0x6f, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x53, 0x74, 0x6f, 0x70,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x09, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4a, 0x6f,
	0x62, 0x12, 0x24, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x4d, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4a, 0x6f, 0x62, 0x12,
	0x25, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x63, 0x0a, 0x0c, 0x49, 0x73, 0x4a, 0x6f, 0x62, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x27, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x49, 0x73, 0x4a, 0x6f, 0x62, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x49,
	0x73, 0x4a, 0x6f, 0x62, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x28, 0x5a, 0x26, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75,
	0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_upstart_service_proto_rawDescOnce sync.Once
	file_upstart_service_proto_rawDescData = file_upstart_service_proto_rawDesc
)

func file_upstart_service_proto_rawDescGZIP() []byte {
	file_upstart_service_proto_rawDescOnce.Do(func() {
		file_upstart_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_upstart_service_proto_rawDescData)
	})
	return file_upstart_service_proto_rawDescData
}

var file_upstart_service_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_upstart_service_proto_goTypes = []interface{}{
	(*CheckJobRequest)(nil),      // 0: tast.cros.platform.CheckJobRequest
	(*JobStatusRequest)(nil),     // 1: tast.cros.platform.JobStatusRequest
	(*JobStatusResponse)(nil),    // 2: tast.cros.platform.JobStatusResponse
	(*StartJobRequest)(nil),      // 3: tast.cros.platform.StartJobRequest
	(*StopJobRequest)(nil),       // 4: tast.cros.platform.StopJobRequest
	(*EnableJobRequest)(nil),     // 5: tast.cros.platform.EnableJobRequest
	(*DisableJobRequest)(nil),    // 6: tast.cros.platform.DisableJobRequest
	(*IsJobEnabledRequest)(nil),  // 7: tast.cros.platform.IsJobEnabledRequest
	(*IsJobEnabledResponse)(nil), // 8: tast.cros.platform.IsJobEnabledResponse
	(*Arg)(nil),                  // 9: tast.cros.platform.Arg
	(*empty.Empty)(nil),          // 10: google.protobuf.Empty
}
var file_upstart_service_proto_depIdxs = []int32{
	9,  // 0: tast.cros.platform.StartJobRequest.args:type_name -> tast.cros.platform.Arg
	0,  // 1: tast.cros.platform.UpstartService.CheckJob:input_type -> tast.cros.platform.CheckJobRequest
	1,  // 2: tast.cros.platform.UpstartService.JobStatus:input_type -> tast.cros.platform.JobStatusRequest
	3,  // 3: tast.cros.platform.UpstartService.StartJob:input_type -> tast.cros.platform.StartJobRequest
	4,  // 4: tast.cros.platform.UpstartService.StopJob:input_type -> tast.cros.platform.StopJobRequest
	5,  // 5: tast.cros.platform.UpstartService.EnableJob:input_type -> tast.cros.platform.EnableJobRequest
	6,  // 6: tast.cros.platform.UpstartService.DisableJob:input_type -> tast.cros.platform.DisableJobRequest
	7,  // 7: tast.cros.platform.UpstartService.IsJobEnabled:input_type -> tast.cros.platform.IsJobEnabledRequest
	10, // 8: tast.cros.platform.UpstartService.CheckJob:output_type -> google.protobuf.Empty
	2,  // 9: tast.cros.platform.UpstartService.JobStatus:output_type -> tast.cros.platform.JobStatusResponse
	10, // 10: tast.cros.platform.UpstartService.StartJob:output_type -> google.protobuf.Empty
	10, // 11: tast.cros.platform.UpstartService.StopJob:output_type -> google.protobuf.Empty
	10, // 12: tast.cros.platform.UpstartService.EnableJob:output_type -> google.protobuf.Empty
	10, // 13: tast.cros.platform.UpstartService.DisableJob:output_type -> google.protobuf.Empty
	8,  // 14: tast.cros.platform.UpstartService.IsJobEnabled:output_type -> tast.cros.platform.IsJobEnabledResponse
	8,  // [8:15] is the sub-list for method output_type
	1,  // [1:8] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_upstart_service_proto_init() }
func file_upstart_service_proto_init() {
	if File_upstart_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_upstart_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_upstart_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_upstart_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_upstart_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_upstart_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_upstart_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_upstart_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_upstart_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsJobEnabledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_upstart_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsJobEnabledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_upstart_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Arg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_upstart_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_upstart_service_proto_goTypes,
		DependencyIndexes: file_upstart_service_proto_depIdxs,
		MessageInfos:      file_upstart_service_proto_msgTypes,
	}.Build()
	File_upstart_service_proto = out.File
	file_upstart_service_proto_rawDesc = nil
	file_upstart_service_proto_goTypes = nil
	file_upstart_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UpstartServiceClient is the client API for UpstartService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UpstartServiceClient interface {
	// Check that the given upstart job is running.
	CheckJob(ctx context.Context, in *CheckJobRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// JobStatus returns the current status of job.
	JobStatus(ctx context.Context, in *JobStatusRequest, opts ...grpc.CallOption) (*JobStatusResponse, error)
	// StartJob starts job. If it is already running, this returns an error.
	StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// StopJob stops job. If it is not currently running, this is a no-op.
	StopJob(ctx context.Context, in *StopJobRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// EnableJob enables an upstart job that was previously disabled.
	EnableJob(ctx context.Context, in *EnableJobRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// DisableJob disables an upstart job, which takes effect on the next reboot.
	DisableJob(ctx context.Context, in *DisableJobRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// IsJobEnabled checks if the given upstart job is enabled.
	IsJobEnabled(ctx context.Context, in *IsJobEnabledRequest, opts ...grpc.CallOption) (*IsJobEnabledResponse, error)
}

type upstartServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpstartServiceClient(cc grpc.ClientConnInterface) UpstartServiceClient {
	return &upstartServiceClient{cc}
}

func (c *upstartServiceClient) CheckJob(ctx context.Context, in *CheckJobRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.platform.UpstartService/CheckJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstartServiceClient) JobStatus(ctx context.Context, in *JobStatusRequest, opts ...grpc.CallOption) (*JobStatusResponse, error) {
	out := new(JobStatusResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.platform.UpstartService/JobStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstartServiceClient) StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.platform.UpstartService/StartJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstartServiceClient) StopJob(ctx context.Context, in *StopJobRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.platform.UpstartService/StopJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstartServiceClient) EnableJob(ctx context.Context, in *EnableJobRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.platform.UpstartService/EnableJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstartServiceClient) DisableJob(ctx context.Context, in *DisableJobRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.platform.UpstartService/DisableJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstartServiceClient) IsJobEnabled(ctx context.Context, in *IsJobEnabledRequest, opts ...grpc.CallOption) (*IsJobEnabledResponse, error) {
	out := new(IsJobEnabledResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.platform.UpstartService/IsJobEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpstartServiceServer is the server API for UpstartService service.
type UpstartServiceServer interface {
	// Check that the given upstart job is running.
	CheckJob(context.Context, *CheckJobRequest) (*empty.Empty, error)
	// JobStatus returns the current status of job.
	JobStatus(context.Context, *JobStatusRequest) (*JobStatusResponse, error)
	// StartJob starts job. If it is already running, this returns an error.
	StartJob(context.Context, *StartJobRequest) (*empty.Empty, error)
	// StopJob stops job. If it is not currently running, this is a no-op.
	StopJob(context.Context, *StopJobRequest) (*empty.Empty, error)
	// EnableJob enables an upstart job that was previously disabled.
	EnableJob(context.Context, *EnableJobRequest) (*empty.Empty, error)
	// DisableJob disables an upstart job, which takes effect on the next reboot.
	DisableJob(context.Context, *DisableJobRequest) (*empty.Empty, error)
	// IsJobEnabled checks if the given upstart job is enabled.
	IsJobEnabled(context.Context, *IsJobEnabledRequest) (*IsJobEnabledResponse, error)
}

// UnimplementedUpstartServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUpstartServiceServer struct {
}

func (*UnimplementedUpstartServiceServer) CheckJob(context.Context, *CheckJobRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckJob not implemented")
}
func (*UnimplementedUpstartServiceServer) JobStatus(context.Context, *JobStatusRequest) (*JobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobStatus not implemented")
}
func (*UnimplementedUpstartServiceServer) StartJob(context.Context, *StartJobRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartJob not implemented")
}
func (*UnimplementedUpstartServiceServer) StopJob(context.Context, *StopJobRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopJob not implemented")
}
func (*UnimplementedUpstartServiceServer) EnableJob(context.Context, *EnableJobRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableJob not implemented")
}
func (*UnimplementedUpstartServiceServer) DisableJob(context.Context, *DisableJobRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableJob not implemented")
}
func (*UnimplementedUpstartServiceServer) IsJobEnabled(context.Context, *IsJobEnabledRequest) (*IsJobEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsJobEnabled not implemented")
}

func RegisterUpstartServiceServer(s *grpc.Server, srv UpstartServiceServer) {
	s.RegisterService(&_UpstartService_serviceDesc, srv)
}

func _UpstartService_CheckJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstartServiceServer).CheckJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.platform.UpstartService/CheckJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstartServiceServer).CheckJob(ctx, req.(*CheckJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpstartService_JobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstartServiceServer).JobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.platform.UpstartService/JobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstartServiceServer).JobStatus(ctx, req.(*JobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpstartService_StartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstartServiceServer).StartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.platform.UpstartService/StartJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstartServiceServer).StartJob(ctx, req.(*StartJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpstartService_StopJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstartServiceServer).StopJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.platform.UpstartService/StopJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstartServiceServer).StopJob(ctx, req.(*StopJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpstartService_EnableJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstartServiceServer).EnableJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.platform.UpstartService/EnableJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstartServiceServer).EnableJob(ctx, req.(*EnableJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpstartService_DisableJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstartServiceServer).DisableJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.platform.UpstartService/DisableJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstartServiceServer).DisableJob(ctx, req.(*DisableJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpstartService_IsJobEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsJobEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstartServiceServer).IsJobEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.platform.UpstartService/IsJobEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstartServiceServer).IsJobEnabled(ctx, req.(*IsJobEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UpstartService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.platform.UpstartService",
	HandlerType: (*UpstartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckJob",
			Handler:    _UpstartService_CheckJob_Handler,
		},
		{
			MethodName: "JobStatus",
			Handler:    _UpstartService_JobStatus_Handler,
		},
		{
			MethodName: "StartJob",
			Handler:    _UpstartService_StartJob_Handler,
		},
		{
			MethodName: "StopJob",
			Handler:    _UpstartService_StopJob_Handler,
		},
		{
			MethodName: "EnableJob",
			Handler:    _UpstartService_EnableJob_Handler,
		},
		{
			MethodName: "DisableJob",
			Handler:    _UpstartService_DisableJob_Handler,
		},
		{
			MethodName: "IsJobEnabled",
			Handler:    _UpstartService_IsJobEnabled_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "upstart_service.proto",
}
