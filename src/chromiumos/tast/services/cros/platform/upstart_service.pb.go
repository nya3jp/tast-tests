// Code generated by protoc-gen-go. DO NOT EDIT.
// source: upstart_service.proto

package platform

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CheckJobRequest struct {
	JobName              string   `protobuf:"bytes,1,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckJobRequest) Reset()         { *m = CheckJobRequest{} }
func (m *CheckJobRequest) String() string { return proto.CompactTextString(m) }
func (*CheckJobRequest) ProtoMessage()    {}
func (*CheckJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f9a7bba326af3c8, []int{0}
}

func (m *CheckJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckJobRequest.Unmarshal(m, b)
}
func (m *CheckJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckJobRequest.Marshal(b, m, deterministic)
}
func (m *CheckJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckJobRequest.Merge(m, src)
}
func (m *CheckJobRequest) XXX_Size() int {
	return xxx_messageInfo_CheckJobRequest.Size(m)
}
func (m *CheckJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckJobRequest proto.InternalMessageInfo

func (m *CheckJobRequest) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

type JobStatusRequest struct {
	JobName              string   `protobuf:"bytes,1,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobStatusRequest) Reset()         { *m = JobStatusRequest{} }
func (m *JobStatusRequest) String() string { return proto.CompactTextString(m) }
func (*JobStatusRequest) ProtoMessage()    {}
func (*JobStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f9a7bba326af3c8, []int{1}
}

func (m *JobStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobStatusRequest.Unmarshal(m, b)
}
func (m *JobStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobStatusRequest.Marshal(b, m, deterministic)
}
func (m *JobStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobStatusRequest.Merge(m, src)
}
func (m *JobStatusRequest) XXX_Size() int {
	return xxx_messageInfo_JobStatusRequest.Size(m)
}
func (m *JobStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JobStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JobStatusRequest proto.InternalMessageInfo

func (m *JobStatusRequest) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

// Definitions of "goal" and "state" described in
// https://chromium.googlesource.com/chromiumos/platform/tast-tests/+/HEAD/src/chromiumos/tast/local/upstart/upstart.go
type JobStatusResponse struct {
	Goal                 string   `protobuf:"bytes,1,opt,name=goal,proto3" json:"goal,omitempty"`
	State                string   `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Pid                  int32    `protobuf:"varint,3,opt,name=pid,proto3" json:"pid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobStatusResponse) Reset()         { *m = JobStatusResponse{} }
func (m *JobStatusResponse) String() string { return proto.CompactTextString(m) }
func (*JobStatusResponse) ProtoMessage()    {}
func (*JobStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f9a7bba326af3c8, []int{2}
}

func (m *JobStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobStatusResponse.Unmarshal(m, b)
}
func (m *JobStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobStatusResponse.Marshal(b, m, deterministic)
}
func (m *JobStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobStatusResponse.Merge(m, src)
}
func (m *JobStatusResponse) XXX_Size() int {
	return xxx_messageInfo_JobStatusResponse.Size(m)
}
func (m *JobStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JobStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JobStatusResponse proto.InternalMessageInfo

func (m *JobStatusResponse) GetGoal() string {
	if m != nil {
		return m.Goal
	}
	return ""
}

func (m *JobStatusResponse) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *JobStatusResponse) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

type StartJobRequest struct {
	JobName              string   `protobuf:"bytes,1,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	Args                 []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartJobRequest) Reset()         { *m = StartJobRequest{} }
func (m *StartJobRequest) String() string { return proto.CompactTextString(m) }
func (*StartJobRequest) ProtoMessage()    {}
func (*StartJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f9a7bba326af3c8, []int{3}
}

func (m *StartJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartJobRequest.Unmarshal(m, b)
}
func (m *StartJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartJobRequest.Marshal(b, m, deterministic)
}
func (m *StartJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartJobRequest.Merge(m, src)
}
func (m *StartJobRequest) XXX_Size() int {
	return xxx_messageInfo_StartJobRequest.Size(m)
}
func (m *StartJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartJobRequest proto.InternalMessageInfo

func (m *StartJobRequest) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

func (m *StartJobRequest) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

type StopJobRequest struct {
	JobName              string   `protobuf:"bytes,1,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopJobRequest) Reset()         { *m = StopJobRequest{} }
func (m *StopJobRequest) String() string { return proto.CompactTextString(m) }
func (*StopJobRequest) ProtoMessage()    {}
func (*StopJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f9a7bba326af3c8, []int{4}
}

func (m *StopJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopJobRequest.Unmarshal(m, b)
}
func (m *StopJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopJobRequest.Marshal(b, m, deterministic)
}
func (m *StopJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopJobRequest.Merge(m, src)
}
func (m *StopJobRequest) XXX_Size() int {
	return xxx_messageInfo_StopJobRequest.Size(m)
}
func (m *StopJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopJobRequest proto.InternalMessageInfo

func (m *StopJobRequest) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

type EnableJobRequest struct {
	JobName              string   `protobuf:"bytes,1,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnableJobRequest) Reset()         { *m = EnableJobRequest{} }
func (m *EnableJobRequest) String() string { return proto.CompactTextString(m) }
func (*EnableJobRequest) ProtoMessage()    {}
func (*EnableJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f9a7bba326af3c8, []int{5}
}

func (m *EnableJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnableJobRequest.Unmarshal(m, b)
}
func (m *EnableJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnableJobRequest.Marshal(b, m, deterministic)
}
func (m *EnableJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnableJobRequest.Merge(m, src)
}
func (m *EnableJobRequest) XXX_Size() int {
	return xxx_messageInfo_EnableJobRequest.Size(m)
}
func (m *EnableJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnableJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnableJobRequest proto.InternalMessageInfo

func (m *EnableJobRequest) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

type DisableJobRequest struct {
	JobName              string   `protobuf:"bytes,1,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DisableJobRequest) Reset()         { *m = DisableJobRequest{} }
func (m *DisableJobRequest) String() string { return proto.CompactTextString(m) }
func (*DisableJobRequest) ProtoMessage()    {}
func (*DisableJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f9a7bba326af3c8, []int{6}
}

func (m *DisableJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DisableJobRequest.Unmarshal(m, b)
}
func (m *DisableJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DisableJobRequest.Marshal(b, m, deterministic)
}
func (m *DisableJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisableJobRequest.Merge(m, src)
}
func (m *DisableJobRequest) XXX_Size() int {
	return xxx_messageInfo_DisableJobRequest.Size(m)
}
func (m *DisableJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DisableJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DisableJobRequest proto.InternalMessageInfo

func (m *DisableJobRequest) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

type IsJobEnabledRequest struct {
	JobName              string   `protobuf:"bytes,1,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsJobEnabledRequest) Reset()         { *m = IsJobEnabledRequest{} }
func (m *IsJobEnabledRequest) String() string { return proto.CompactTextString(m) }
func (*IsJobEnabledRequest) ProtoMessage()    {}
func (*IsJobEnabledRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f9a7bba326af3c8, []int{7}
}

func (m *IsJobEnabledRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsJobEnabledRequest.Unmarshal(m, b)
}
func (m *IsJobEnabledRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsJobEnabledRequest.Marshal(b, m, deterministic)
}
func (m *IsJobEnabledRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsJobEnabledRequest.Merge(m, src)
}
func (m *IsJobEnabledRequest) XXX_Size() int {
	return xxx_messageInfo_IsJobEnabledRequest.Size(m)
}
func (m *IsJobEnabledRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsJobEnabledRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsJobEnabledRequest proto.InternalMessageInfo

func (m *IsJobEnabledRequest) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

type IsJobEnabledResponse struct {
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsJobEnabledResponse) Reset()         { *m = IsJobEnabledResponse{} }
func (m *IsJobEnabledResponse) String() string { return proto.CompactTextString(m) }
func (*IsJobEnabledResponse) ProtoMessage()    {}
func (*IsJobEnabledResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f9a7bba326af3c8, []int{8}
}

func (m *IsJobEnabledResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsJobEnabledResponse.Unmarshal(m, b)
}
func (m *IsJobEnabledResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsJobEnabledResponse.Marshal(b, m, deterministic)
}
func (m *IsJobEnabledResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsJobEnabledResponse.Merge(m, src)
}
func (m *IsJobEnabledResponse) XXX_Size() int {
	return xxx_messageInfo_IsJobEnabledResponse.Size(m)
}
func (m *IsJobEnabledResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsJobEnabledResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsJobEnabledResponse proto.InternalMessageInfo

func (m *IsJobEnabledResponse) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func init() {
	proto.RegisterType((*CheckJobRequest)(nil), "tast.cros.platform.CheckJobRequest")
	proto.RegisterType((*JobStatusRequest)(nil), "tast.cros.platform.JobStatusRequest")
	proto.RegisterType((*JobStatusResponse)(nil), "tast.cros.platform.JobStatusResponse")
	proto.RegisterType((*StartJobRequest)(nil), "tast.cros.platform.StartJobRequest")
	proto.RegisterType((*StopJobRequest)(nil), "tast.cros.platform.StopJobRequest")
	proto.RegisterType((*EnableJobRequest)(nil), "tast.cros.platform.EnableJobRequest")
	proto.RegisterType((*DisableJobRequest)(nil), "tast.cros.platform.DisableJobRequest")
	proto.RegisterType((*IsJobEnabledRequest)(nil), "tast.cros.platform.IsJobEnabledRequest")
	proto.RegisterType((*IsJobEnabledResponse)(nil), "tast.cros.platform.IsJobEnabledResponse")
}

func init() { proto.RegisterFile("upstart_service.proto", fileDescriptor_1f9a7bba326af3c8) }

var fileDescriptor_1f9a7bba326af3c8 = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xdb, 0x8e, 0xd3, 0x30,
	0x10, 0x86, 0xb7, 0xdb, 0x5d, 0xda, 0x8e, 0xd0, 0x1e, 0xcc, 0x82, 0x42, 0xb8, 0xa9, 0xc2, 0x29,
	0x12, 0xe0, 0x20, 0x78, 0x01, 0x04, 0xac, 0xd0, 0x16, 0x01, 0x52, 0x22, 0x6e, 0xf6, 0xa6, 0xb2,
	0x53, 0x37, 0x4d, 0x49, 0x3a, 0x21, 0x76, 0x90, 0x78, 0x47, 0x1e, 0x0a, 0x39, 0x4e, 0x4a, 0x49,
	0xa3, 0x34, 0x77, 0x63, 0xeb, 0x9f, 0x7f, 0x66, 0x3c, 0x9f, 0x0c, 0xf7, 0x8b, 0x4c, 0x2a, 0x96,
	0xab, 0xb9, 0x14, 0xf9, 0xaf, 0x38, 0x14, 0x34, 0xcb, 0x51, 0x21, 0x21, 0x8a, 0x49, 0x45, 0xc3,
	0x1c, 0x25, 0xcd, 0x12, 0xa6, 0x96, 0x98, 0xa7, 0xf6, 0xa3, 0x08, 0x31, 0x4a, 0x84, 0x57, 0x2a,
	0x78, 0xb1, 0xf4, 0x44, 0x9a, 0xa9, 0xdf, 0x26, 0xc1, 0x79, 0x09, 0xe7, 0x1f, 0x56, 0x22, 0xfc,
	0x31, 0x43, 0xee, 0x8b, 0x9f, 0x85, 0x90, 0x8a, 0x3c, 0x84, 0xf1, 0x1a, 0xf9, 0x7c, 0xc3, 0x52,
	0x61, 0x0d, 0xa6, 0x03, 0x77, 0xe2, 0x8f, 0xd6, 0xc8, 0xbf, 0xb2, 0x54, 0x38, 0xaf, 0xe0, 0x62,
	0x86, 0x3c, 0x50, 0x4c, 0x15, 0xb2, 0x87, 0xfc, 0x1b, 0x5c, 0xee, 0xc8, 0x65, 0x86, 0x1b, 0x29,
	0x08, 0x81, 0x93, 0x08, 0x59, 0x52, 0x69, 0xcb, 0x98, 0x5c, 0xc1, 0xa9, 0x54, 0x4c, 0x09, 0xeb,
	0xb8, 0xbc, 0x34, 0x07, 0x72, 0x01, 0xc3, 0x2c, 0x5e, 0x58, 0xc3, 0xe9, 0xc0, 0x3d, 0xf5, 0x75,
	0xe8, 0xbc, 0x83, 0xf3, 0x40, 0x4f, 0xdd, 0xab, 0x5b, 0x5d, 0x89, 0xe5, 0x91, 0xb4, 0x8e, 0xa7,
	0x43, 0x5d, 0x49, 0xc7, 0xce, 0x0b, 0x38, 0x0b, 0x14, 0x66, 0xbd, 0xc7, 0xbd, 0xde, 0x30, 0x9e,
	0x88, 0x7e, 0x72, 0x0a, 0x97, 0x1f, 0x63, 0xd9, 0x5f, 0xff, 0x1a, 0xee, 0xdd, 0xc8, 0x19, 0x72,
	0x53, 0x63, 0xd1, 0x2b, 0xe3, 0xea, 0xff, 0x8c, 0xea, 0x4d, 0x2d, 0x18, 0x09, 0x73, 0x55, 0x66,
	0x8c, 0xfd, 0xfa, 0xf8, 0xe6, 0xcf, 0x09, 0x9c, 0x7d, 0x37, 0xa8, 0x04, 0x86, 0x14, 0x72, 0x03,
	0xe3, 0x7a, 0xe5, 0xe4, 0x31, 0xdd, 0x07, 0x86, 0x36, 0x80, 0xb0, 0x1f, 0x50, 0x43, 0x10, 0xad,
	0x09, 0xa2, 0xd7, 0x9a, 0x20, 0xe7, 0x88, 0xdc, 0xc2, 0x64, 0xbb, 0x60, 0xf2, 0xa4, 0xcd, 0xab,
	0x89, 0x8b, 0xfd, 0xf4, 0x80, 0xca, 0x4c, 0xe4, 0x1c, 0xe9, 0x36, 0xeb, 0x5d, 0xb7, 0xb7, 0xd9,
	0x20, 0xa1, 0xa3, 0xcd, 0x4f, 0x30, 0xaa, 0x96, 0x4e, 0x9c, 0x76, 0xa7, 0x5d, 0x22, 0x3a, 0x8c,
	0x3e, 0xc3, 0x64, 0x0b, 0x44, 0xfb, 0xbc, 0x4d, 0x5e, 0x3a, 0xcc, 0xbe, 0x00, 0xfc, 0xc3, 0x85,
	0xb4, 0xbe, 0xcb, 0x1e, 0x4e, 0x1d, 0x76, 0x21, 0xdc, 0xdd, 0x65, 0x83, 0x3c, 0x6f, 0x33, 0x6c,
	0xe1, 0xcd, 0x76, 0x0f, 0x0b, 0xeb, 0xa5, 0xbc, 0x77, 0x6f, 0x9f, 0x85, 0xab, 0x1c, 0xd3, 0xb8,
	0x48, 0x51, 0x7a, 0x3a, 0xcf, 0xab, 0x3e, 0x20, 0xe9, 0x69, 0x03, 0xaf, 0x36, 0xe0, 0x77, 0xca,
	0x06, 0xdf, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x87, 0x30, 0x15, 0xa9, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UpstartServiceClient is the client API for UpstartService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UpstartServiceClient interface {
	// Check that the given upstart job is running.
	CheckJob(ctx context.Context, in *CheckJobRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// JobStatus returns the current status of job.
	JobStatus(ctx context.Context, in *JobStatusRequest, opts ...grpc.CallOption) (*JobStatusResponse, error)
	// StartJob starts job. If it is already running, this returns an error.
	StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// StopJob stops job. If it is not currently running, this is a no-op.
	StopJob(ctx context.Context, in *StopJobRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// EnableJob enables an upstart job that was previously disabled.
	EnableJob(ctx context.Context, in *EnableJobRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// DisableJob disables an upstart job, which takes effect on the next reboot.
	DisableJob(ctx context.Context, in *DisableJobRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// IsJobEnabled checks if the given upstart job is enabled.
	IsJobEnabled(ctx context.Context, in *IsJobEnabledRequest, opts ...grpc.CallOption) (*IsJobEnabledResponse, error)
}

type upstartServiceClient struct {
	cc *grpc.ClientConn
}

func NewUpstartServiceClient(cc *grpc.ClientConn) UpstartServiceClient {
	return &upstartServiceClient{cc}
}

func (c *upstartServiceClient) CheckJob(ctx context.Context, in *CheckJobRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.platform.UpstartService/CheckJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstartServiceClient) JobStatus(ctx context.Context, in *JobStatusRequest, opts ...grpc.CallOption) (*JobStatusResponse, error) {
	out := new(JobStatusResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.platform.UpstartService/JobStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstartServiceClient) StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.platform.UpstartService/StartJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstartServiceClient) StopJob(ctx context.Context, in *StopJobRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.platform.UpstartService/StopJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstartServiceClient) EnableJob(ctx context.Context, in *EnableJobRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.platform.UpstartService/EnableJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstartServiceClient) DisableJob(ctx context.Context, in *DisableJobRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.platform.UpstartService/DisableJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstartServiceClient) IsJobEnabled(ctx context.Context, in *IsJobEnabledRequest, opts ...grpc.CallOption) (*IsJobEnabledResponse, error) {
	out := new(IsJobEnabledResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.platform.UpstartService/IsJobEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpstartServiceServer is the server API for UpstartService service.
type UpstartServiceServer interface {
	// Check that the given upstart job is running.
	CheckJob(context.Context, *CheckJobRequest) (*empty.Empty, error)
	// JobStatus returns the current status of job.
	JobStatus(context.Context, *JobStatusRequest) (*JobStatusResponse, error)
	// StartJob starts job. If it is already running, this returns an error.
	StartJob(context.Context, *StartJobRequest) (*empty.Empty, error)
	// StopJob stops job. If it is not currently running, this is a no-op.
	StopJob(context.Context, *StopJobRequest) (*empty.Empty, error)
	// EnableJob enables an upstart job that was previously disabled.
	EnableJob(context.Context, *EnableJobRequest) (*empty.Empty, error)
	// DisableJob disables an upstart job, which takes effect on the next reboot.
	DisableJob(context.Context, *DisableJobRequest) (*empty.Empty, error)
	// IsJobEnabled checks if the given upstart job is enabled.
	IsJobEnabled(context.Context, *IsJobEnabledRequest) (*IsJobEnabledResponse, error)
}

// UnimplementedUpstartServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUpstartServiceServer struct {
}

func (*UnimplementedUpstartServiceServer) CheckJob(ctx context.Context, req *CheckJobRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckJob not implemented")
}
func (*UnimplementedUpstartServiceServer) JobStatus(ctx context.Context, req *JobStatusRequest) (*JobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobStatus not implemented")
}
func (*UnimplementedUpstartServiceServer) StartJob(ctx context.Context, req *StartJobRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartJob not implemented")
}
func (*UnimplementedUpstartServiceServer) StopJob(ctx context.Context, req *StopJobRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopJob not implemented")
}
func (*UnimplementedUpstartServiceServer) EnableJob(ctx context.Context, req *EnableJobRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableJob not implemented")
}
func (*UnimplementedUpstartServiceServer) DisableJob(ctx context.Context, req *DisableJobRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableJob not implemented")
}
func (*UnimplementedUpstartServiceServer) IsJobEnabled(ctx context.Context, req *IsJobEnabledRequest) (*IsJobEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsJobEnabled not implemented")
}

func RegisterUpstartServiceServer(s *grpc.Server, srv UpstartServiceServer) {
	s.RegisterService(&_UpstartService_serviceDesc, srv)
}

func _UpstartService_CheckJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstartServiceServer).CheckJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.platform.UpstartService/CheckJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstartServiceServer).CheckJob(ctx, req.(*CheckJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpstartService_JobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstartServiceServer).JobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.platform.UpstartService/JobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstartServiceServer).JobStatus(ctx, req.(*JobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpstartService_StartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstartServiceServer).StartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.platform.UpstartService/StartJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstartServiceServer).StartJob(ctx, req.(*StartJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpstartService_StopJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstartServiceServer).StopJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.platform.UpstartService/StopJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstartServiceServer).StopJob(ctx, req.(*StopJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpstartService_EnableJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstartServiceServer).EnableJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.platform.UpstartService/EnableJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstartServiceServer).EnableJob(ctx, req.(*EnableJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpstartService_DisableJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstartServiceServer).DisableJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.platform.UpstartService/DisableJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstartServiceServer).DisableJob(ctx, req.(*DisableJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpstartService_IsJobEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsJobEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstartServiceServer).IsJobEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.platform.UpstartService/IsJobEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstartServiceServer).IsJobEnabled(ctx, req.(*IsJobEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UpstartService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.platform.UpstartService",
	HandlerType: (*UpstartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckJob",
			Handler:    _UpstartService_CheckJob_Handler,
		},
		{
			MethodName: "JobStatus",
			Handler:    _UpstartService_JobStatus_Handler,
		},
		{
			MethodName: "StartJob",
			Handler:    _UpstartService_StartJob_Handler,
		},
		{
			MethodName: "StopJob",
			Handler:    _UpstartService_StopJob_Handler,
		},
		{
			MethodName: "EnableJob",
			Handler:    _UpstartService_EnableJob_Handler,
		},
		{
			MethodName: "DisableJob",
			Handler:    _UpstartService_DisableJob_Handler,
		},
		{
			MethodName: "IsJobEnabled",
			Handler:    _UpstartService_IsJobEnabled_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "upstart_service.proto",
}
