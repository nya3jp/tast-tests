// Copyright 2022 The ChromiumOS Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: dbus_service.proto

package platform

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnableDbusActivationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
}

func (x *EnableDbusActivationRequest) Reset() {
	*x = EnableDbusActivationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbus_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableDbusActivationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableDbusActivationRequest) ProtoMessage() {}

func (x *EnableDbusActivationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbus_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableDbusActivationRequest.ProtoReflect.Descriptor instead.
func (*EnableDbusActivationRequest) Descriptor() ([]byte, []int) {
	return file_dbus_service_proto_rawDescGZIP(), []int{0}
}

func (x *EnableDbusActivationRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

type DisableDbusActivationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
}

func (x *DisableDbusActivationRequest) Reset() {
	*x = DisableDbusActivationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbus_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableDbusActivationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableDbusActivationRequest) ProtoMessage() {}

func (x *DisableDbusActivationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbus_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableDbusActivationRequest.ProtoReflect.Descriptor instead.
func (*DisableDbusActivationRequest) Descriptor() ([]byte, []int) {
	return file_dbus_service_proto_rawDescGZIP(), []int{1}
}

func (x *DisableDbusActivationRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

type IsDbusActivationEnabledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
}

func (x *IsDbusActivationEnabledRequest) Reset() {
	*x = IsDbusActivationEnabledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbus_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsDbusActivationEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDbusActivationEnabledRequest) ProtoMessage() {}

func (x *IsDbusActivationEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbus_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDbusActivationEnabledRequest.ProtoReflect.Descriptor instead.
func (*IsDbusActivationEnabledRequest) Descriptor() ([]byte, []int) {
	return file_dbus_service_proto_rawDescGZIP(), []int{2}
}

func (x *IsDbusActivationEnabledRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

type IsDbusActivationEnabledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *IsDbusActivationEnabledResponse) Reset() {
	*x = IsDbusActivationEnabledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbus_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsDbusActivationEnabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDbusActivationEnabledResponse) ProtoMessage() {}

func (x *IsDbusActivationEnabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbus_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDbusActivationEnabledResponse.ProtoReflect.Descriptor instead.
func (*IsDbusActivationEnabledResponse) Descriptor() ([]byte, []int) {
	return file_dbus_service_proto_rawDescGZIP(), []int{3}
}

func (x *IsDbusActivationEnabledResponse) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

var File_dbus_service_proto protoreflect.FileDescriptor

var file_dbus_service_proto_rawDesc = []byte{
	0x0a, 0x12, 0x64, 0x62, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x40, 0x0a, 0x1b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x62, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x1c, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x62, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x1e, 0x49, 0x73,
	0x44, 0x62, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x3b, 0x0a, 0x1f, 0x49, 0x73, 0x44, 0x62, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x32, 0xdc, 0x02, 0x0a,
	0x0b, 0x44, 0x62, 0x75, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x61, 0x0a, 0x14,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x62, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x62, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x63, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x62, 0x75, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x62, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x17, 0x49, 0x73, 0x44, 0x62, 0x75, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x32, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x49, 0x73, 0x44, 0x62, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x49, 0x73, 0x44, 0x62, 0x75, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x28, 0x5a, 0x26, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dbus_service_proto_rawDescOnce sync.Once
	file_dbus_service_proto_rawDescData = file_dbus_service_proto_rawDesc
)

func file_dbus_service_proto_rawDescGZIP() []byte {
	file_dbus_service_proto_rawDescOnce.Do(func() {
		file_dbus_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_dbus_service_proto_rawDescData)
	})
	return file_dbus_service_proto_rawDescData
}

var file_dbus_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_dbus_service_proto_goTypes = []interface{}{
	(*EnableDbusActivationRequest)(nil),     // 0: tast.cros.platform.EnableDbusActivationRequest
	(*DisableDbusActivationRequest)(nil),    // 1: tast.cros.platform.DisableDbusActivationRequest
	(*IsDbusActivationEnabledRequest)(nil),  // 2: tast.cros.platform.IsDbusActivationEnabledRequest
	(*IsDbusActivationEnabledResponse)(nil), // 3: tast.cros.platform.IsDbusActivationEnabledResponse
	(*emptypb.Empty)(nil),                   // 4: google.protobuf.Empty
}
var file_dbus_service_proto_depIdxs = []int32{
	0, // 0: tast.cros.platform.DbusService.EnableDbusActivation:input_type -> tast.cros.platform.EnableDbusActivationRequest
	1, // 1: tast.cros.platform.DbusService.DisableDbusActivation:input_type -> tast.cros.platform.DisableDbusActivationRequest
	2, // 2: tast.cros.platform.DbusService.IsDbusActivationEnabled:input_type -> tast.cros.platform.IsDbusActivationEnabledRequest
	4, // 3: tast.cros.platform.DbusService.EnableDbusActivation:output_type -> google.protobuf.Empty
	4, // 4: tast.cros.platform.DbusService.DisableDbusActivation:output_type -> google.protobuf.Empty
	3, // 5: tast.cros.platform.DbusService.IsDbusActivationEnabled:output_type -> tast.cros.platform.IsDbusActivationEnabledResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_dbus_service_proto_init() }
func file_dbus_service_proto_init() {
	if File_dbus_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dbus_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableDbusActivationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbus_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableDbusActivationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbus_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsDbusActivationEnabledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbus_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsDbusActivationEnabledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dbus_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dbus_service_proto_goTypes,
		DependencyIndexes: file_dbus_service_proto_depIdxs,
		MessageInfos:      file_dbus_service_proto_msgTypes,
	}.Build()
	File_dbus_service_proto = out.File
	file_dbus_service_proto_rawDesc = nil
	file_dbus_service_proto_goTypes = nil
	file_dbus_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DbusServiceClient is the client API for DbusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DbusServiceClient interface {
	// Enables DBus activation for given service.
	EnableDbusActivation(ctx context.Context, in *EnableDbusActivationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Disables DBus activation for given service.
	DisableDbusActivation(ctx context.Context, in *DisableDbusActivationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Check that given service has bus activation enabled.
	IsDbusActivationEnabled(ctx context.Context, in *IsDbusActivationEnabledRequest, opts ...grpc.CallOption) (*IsDbusActivationEnabledResponse, error)
}

type dbusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDbusServiceClient(cc grpc.ClientConnInterface) DbusServiceClient {
	return &dbusServiceClient{cc}
}

func (c *dbusServiceClient) EnableDbusActivation(ctx context.Context, in *EnableDbusActivationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.platform.DbusService/EnableDbusActivation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbusServiceClient) DisableDbusActivation(ctx context.Context, in *DisableDbusActivationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.platform.DbusService/DisableDbusActivation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbusServiceClient) IsDbusActivationEnabled(ctx context.Context, in *IsDbusActivationEnabledRequest, opts ...grpc.CallOption) (*IsDbusActivationEnabledResponse, error) {
	out := new(IsDbusActivationEnabledResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.platform.DbusService/IsDbusActivationEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DbusServiceServer is the server API for DbusService service.
type DbusServiceServer interface {
	// Enables DBus activation for given service.
	EnableDbusActivation(context.Context, *EnableDbusActivationRequest) (*emptypb.Empty, error)
	// Disables DBus activation for given service.
	DisableDbusActivation(context.Context, *DisableDbusActivationRequest) (*emptypb.Empty, error)
	// Check that given service has bus activation enabled.
	IsDbusActivationEnabled(context.Context, *IsDbusActivationEnabledRequest) (*IsDbusActivationEnabledResponse, error)
}

// UnimplementedDbusServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDbusServiceServer struct {
}

func (*UnimplementedDbusServiceServer) EnableDbusActivation(context.Context, *EnableDbusActivationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableDbusActivation not implemented")
}
func (*UnimplementedDbusServiceServer) DisableDbusActivation(context.Context, *DisableDbusActivationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableDbusActivation not implemented")
}
func (*UnimplementedDbusServiceServer) IsDbusActivationEnabled(context.Context, *IsDbusActivationEnabledRequest) (*IsDbusActivationEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsDbusActivationEnabled not implemented")
}

func RegisterDbusServiceServer(s *grpc.Server, srv DbusServiceServer) {
	s.RegisterService(&_DbusService_serviceDesc, srv)
}

func _DbusService_EnableDbusActivation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableDbusActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbusServiceServer).EnableDbusActivation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.platform.DbusService/EnableDbusActivation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbusServiceServer).EnableDbusActivation(ctx, req.(*EnableDbusActivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbusService_DisableDbusActivation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableDbusActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbusServiceServer).DisableDbusActivation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.platform.DbusService/DisableDbusActivation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbusServiceServer).DisableDbusActivation(ctx, req.(*DisableDbusActivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbusService_IsDbusActivationEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsDbusActivationEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbusServiceServer).IsDbusActivationEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.platform.DbusService/IsDbusActivationEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbusServiceServer).IsDbusActivationEnabled(ctx, req.(*IsDbusActivationEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DbusService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.platform.DbusService",
	HandlerType: (*DbusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnableDbusActivation",
			Handler:    _DbusService_EnableDbusActivation_Handler,
		},
		{
			MethodName: "DisableDbusActivation",
			Handler:    _DbusService_DisableDbusActivation_Handler,
		},
		{
			MethodName: "IsDbusActivationEnabled",
			Handler:    _DbusService_IsDbusActivationEnabled_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dbus_service.proto",
}
