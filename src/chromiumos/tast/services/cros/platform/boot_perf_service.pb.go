// Code generated by protoc-gen-go. DO NOT EDIT.
// source: boot_perf_service.proto

package platform

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetBootPerfMetricsResponse struct {
	// Key: metric name. Value: boot metric. Example: "seconds_power_on_to_login" => 10.0.
	Metrics              map[string]float64 `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetBootPerfMetricsResponse) Reset()         { *m = GetBootPerfMetricsResponse{} }
func (m *GetBootPerfMetricsResponse) String() string { return proto.CompactTextString(m) }
func (*GetBootPerfMetricsResponse) ProtoMessage()    {}
func (*GetBootPerfMetricsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8aab8a0af14796b3, []int{0}
}

func (m *GetBootPerfMetricsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBootPerfMetricsResponse.Unmarshal(m, b)
}
func (m *GetBootPerfMetricsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBootPerfMetricsResponse.Marshal(b, m, deterministic)
}
func (m *GetBootPerfMetricsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBootPerfMetricsResponse.Merge(m, src)
}
func (m *GetBootPerfMetricsResponse) XXX_Size() int {
	return xxx_messageInfo_GetBootPerfMetricsResponse.Size(m)
}
func (m *GetBootPerfMetricsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBootPerfMetricsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBootPerfMetricsResponse proto.InternalMessageInfo

func (m *GetBootPerfMetricsResponse) GetMetrics() map[string]float64 {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type GetBootPerfRawDataResponse struct {
	// Key: file name. Value: file content. Example: "uptime-chrome-exec" => "3.92 24.14"
	RawData              map[string][]byte `protobuf:"bytes,1,rep,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetBootPerfRawDataResponse) Reset()         { *m = GetBootPerfRawDataResponse{} }
func (m *GetBootPerfRawDataResponse) String() string { return proto.CompactTextString(m) }
func (*GetBootPerfRawDataResponse) ProtoMessage()    {}
func (*GetBootPerfRawDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8aab8a0af14796b3, []int{1}
}

func (m *GetBootPerfRawDataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBootPerfRawDataResponse.Unmarshal(m, b)
}
func (m *GetBootPerfRawDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBootPerfRawDataResponse.Marshal(b, m, deterministic)
}
func (m *GetBootPerfRawDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBootPerfRawDataResponse.Merge(m, src)
}
func (m *GetBootPerfRawDataResponse) XXX_Size() int {
	return xxx_messageInfo_GetBootPerfRawDataResponse.Size(m)
}
func (m *GetBootPerfRawDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBootPerfRawDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBootPerfRawDataResponse proto.InternalMessageInfo

func (m *GetBootPerfRawDataResponse) GetRawData() map[string][]byte {
	if m != nil {
		return m.RawData
	}
	return nil
}

func init() {
	proto.RegisterType((*GetBootPerfMetricsResponse)(nil), "tast.cros.platform.GetBootPerfMetricsResponse")
	proto.RegisterMapType((map[string]float64)(nil), "tast.cros.platform.GetBootPerfMetricsResponse.MetricsEntry")
	proto.RegisterType((*GetBootPerfRawDataResponse)(nil), "tast.cros.platform.GetBootPerfRawDataResponse")
	proto.RegisterMapType((map[string][]byte)(nil), "tast.cros.platform.GetBootPerfRawDataResponse.RawDataEntry")
}

func init() { proto.RegisterFile("boot_perf_service.proto", fileDescriptor_8aab8a0af14796b3) }

var fileDescriptor_8aab8a0af14796b3 = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xcf, 0x4e, 0xc2, 0x40,
	0x10, 0xc6, 0x59, 0x88, 0xff, 0x56, 0x12, 0xc8, 0xc6, 0x28, 0xa9, 0x17, 0xd2, 0x83, 0xe9, 0x69,
	0x9b, 0xe0, 0xc5, 0xe0, 0x0d, 0x21, 0x9e, 0x4c, 0x4c, 0x8d, 0x1e, 0x3c, 0x48, 0xb6, 0x75, 0x0a,
	0x8d, 0x2d, 0xd3, 0xec, 0x0e, 0x10, 0x9e, 0x4a, 0x1f, 0xc8, 0x87, 0x31, 0xa5, 0xad, 0x41, 0x08,
	0xf1, 0xdf, 0xad, 0xdf, 0x4c, 0xe7, 0x37, 0x5f, 0xf6, 0xdb, 0xe5, 0x27, 0x3e, 0x22, 0x0d, 0x53,
	0xd0, 0xe1, 0xd0, 0x80, 0x9e, 0x45, 0x01, 0xc8, 0x54, 0x23, 0xa1, 0x10, 0xa4, 0x0c, 0xc9, 0x40,
	0xa3, 0x91, 0x69, 0xac, 0x28, 0x44, 0x9d, 0x58, 0xa7, 0x23, 0xc4, 0x51, 0x0c, 0xee, 0xf2, 0x0f,
	0x7f, 0x1a, 0xba, 0x90, 0xa4, 0xb4, 0xc8, 0x07, 0xec, 0x57, 0xc6, 0xad, 0x6b, 0xa0, 0x1e, 0x22,
	0xdd, 0x82, 0x0e, 0x6f, 0x80, 0x74, 0x14, 0x18, 0x0f, 0x4c, 0x8a, 0x13, 0x03, 0xe2, 0x9e, 0xef,
	0x25, 0x79, 0xa9, 0xc5, 0xda, 0x35, 0xe7, 0xb0, 0x73, 0x29, 0x37, 0x37, 0xc8, 0xed, 0x00, 0x59,
	0xe8, 0xc1, 0x84, 0xf4, 0xc2, 0x2b, 0x59, 0x56, 0x97, 0xd7, 0x57, 0x1b, 0xa2, 0xc9, 0x6b, 0x2f,
	0xb0, 0x68, 0xb1, 0x36, 0x73, 0x0e, 0xbc, 0xec, 0x53, 0x1c, 0xf1, 0x9d, 0x99, 0x8a, 0xa7, 0xd0,
	0xaa, 0xb6, 0x99, 0xc3, 0xbc, 0x5c, 0x74, 0xab, 0x17, 0xcc, 0x7e, 0xfb, 0xea, 0xd8, 0x53, 0xf3,
	0xbe, 0x22, 0xf5, 0xe9, 0xf8, 0x81, 0xef, 0x6b, 0x35, 0x1f, 0x3e, 0x2b, 0x52, 0x3f, 0xb4, 0xbc,
	0x46, 0x90, 0x85, 0x2e, 0x2c, 0xeb, 0x5c, 0x65, 0x96, 0x57, 0x1b, 0xdf, 0x59, 0xae, 0xaf, 0x58,
	0xee, 0xbc, 0x57, 0x79, 0xa3, 0xdc, 0x76, 0x97, 0xe7, 0x25, 0xae, 0x78, 0x63, 0x30, 0x51, 0x7e,
	0x0c, 0x59, 0x23, 0x18, 0x2b, 0x4d, 0xe2, 0x58, 0xe6, 0x49, 0xc9, 0x32, 0x29, 0x39, 0xc8, 0x92,
	0xb2, 0xb6, 0xd4, 0xed, 0x8a, 0xe8, 0xf3, 0x66, 0x3f, 0x32, 0xff, 0xa5, 0x3c, 0x71, 0xb1, 0x99,
	0xe0, 0x56, 0x8e, 0xfc, 0xdd, 0x0d, 0xd8, 0xe0, 0x17, 0xa7, 0xf8, 0x67, 0xfe, 0x5a, 0x5c, 0x76,
	0xa5, 0xe7, 0x3c, 0x9e, 0x05, 0x63, 0x8d, 0x49, 0x34, 0x4d, 0xd0, 0xb8, 0xd9, 0xb4, 0x5b, 0xbc,
	0x0a, 0xe3, 0x66, 0x18, 0xb7, 0xc4, 0xf8, 0xbb, 0xcb, 0x5d, 0xe7, 0x1f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x75, 0xac, 0xa1, 0xa6, 0x40, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BootPerfServiceClient is the client API for BootPerfService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BootPerfServiceClient interface {
	//  Enables bootchart collection for next system boot.
	EnableBootchart(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Disables bootchart collection for next system boot.
	DisableBootchart(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Collects boot perf metrics from the device.
	GetBootPerfMetrics(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetBootPerfMetricsResponse, error)
	// Saves boot perf raw data and other files like console-ramoops for debugging.
	GetBootPerfRawData(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetBootPerfRawDataResponse, error)
}

type bootPerfServiceClient struct {
	cc *grpc.ClientConn
}

func NewBootPerfServiceClient(cc *grpc.ClientConn) BootPerfServiceClient {
	return &bootPerfServiceClient{cc}
}

func (c *bootPerfServiceClient) EnableBootchart(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.platform.BootPerfService/EnableBootchart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootPerfServiceClient) DisableBootchart(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.platform.BootPerfService/DisableBootchart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootPerfServiceClient) GetBootPerfMetrics(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetBootPerfMetricsResponse, error) {
	out := new(GetBootPerfMetricsResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.platform.BootPerfService/GetBootPerfMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootPerfServiceClient) GetBootPerfRawData(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetBootPerfRawDataResponse, error) {
	out := new(GetBootPerfRawDataResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.platform.BootPerfService/GetBootPerfRawData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BootPerfServiceServer is the server API for BootPerfService service.
type BootPerfServiceServer interface {
	//  Enables bootchart collection for next system boot.
	EnableBootchart(context.Context, *empty.Empty) (*empty.Empty, error)
	// Disables bootchart collection for next system boot.
	DisableBootchart(context.Context, *empty.Empty) (*empty.Empty, error)
	// Collects boot perf metrics from the device.
	GetBootPerfMetrics(context.Context, *empty.Empty) (*GetBootPerfMetricsResponse, error)
	// Saves boot perf raw data and other files like console-ramoops for debugging.
	GetBootPerfRawData(context.Context, *empty.Empty) (*GetBootPerfRawDataResponse, error)
}

// UnimplementedBootPerfServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBootPerfServiceServer struct {
}

func (*UnimplementedBootPerfServiceServer) EnableBootchart(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableBootchart not implemented")
}
func (*UnimplementedBootPerfServiceServer) DisableBootchart(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableBootchart not implemented")
}
func (*UnimplementedBootPerfServiceServer) GetBootPerfMetrics(ctx context.Context, req *empty.Empty) (*GetBootPerfMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBootPerfMetrics not implemented")
}
func (*UnimplementedBootPerfServiceServer) GetBootPerfRawData(ctx context.Context, req *empty.Empty) (*GetBootPerfRawDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBootPerfRawData not implemented")
}

func RegisterBootPerfServiceServer(s *grpc.Server, srv BootPerfServiceServer) {
	s.RegisterService(&_BootPerfService_serviceDesc, srv)
}

func _BootPerfService_EnableBootchart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootPerfServiceServer).EnableBootchart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.platform.BootPerfService/EnableBootchart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootPerfServiceServer).EnableBootchart(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BootPerfService_DisableBootchart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootPerfServiceServer).DisableBootchart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.platform.BootPerfService/DisableBootchart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootPerfServiceServer).DisableBootchart(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BootPerfService_GetBootPerfMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootPerfServiceServer).GetBootPerfMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.platform.BootPerfService/GetBootPerfMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootPerfServiceServer).GetBootPerfMetrics(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BootPerfService_GetBootPerfRawData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootPerfServiceServer).GetBootPerfRawData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.platform.BootPerfService/GetBootPerfRawData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootPerfServiceServer).GetBootPerfRawData(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _BootPerfService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.platform.BootPerfService",
	HandlerType: (*BootPerfServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnableBootchart",
			Handler:    _BootPerfService_EnableBootchart_Handler,
		},
		{
			MethodName: "DisableBootchart",
			Handler:    _BootPerfService_DisableBootchart_Handler,
		},
		{
			MethodName: "GetBootPerfMetrics",
			Handler:    _BootPerfService_GetBootPerfMetrics_Handler,
		},
		{
			MethodName: "GetBootPerfRawData",
			Handler:    _BootPerfService_GetBootPerfRawData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "boot_perf_service.proto",
}
