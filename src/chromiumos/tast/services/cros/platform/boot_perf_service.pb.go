// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: boot_perf_service.proto

package platform

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetBootPerfMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key: metric name. Value: boot metric. Example: "seconds_power_on_to_login" => 10.0.
	Metrics map[string]float64 `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *GetBootPerfMetricsResponse) Reset() {
	*x = GetBootPerfMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boot_perf_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBootPerfMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBootPerfMetricsResponse) ProtoMessage() {}

func (x *GetBootPerfMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_boot_perf_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBootPerfMetricsResponse.ProtoReflect.Descriptor instead.
func (*GetBootPerfMetricsResponse) Descriptor() ([]byte, []int) {
	return file_boot_perf_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetBootPerfMetricsResponse) GetMetrics() map[string]float64 {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type GetBootPerfRawDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key: file name. Value: file content. Example: "uptime-chrome-exec" => "3.92 24.14"
	RawData map[string][]byte `protobuf:"bytes,1,rep,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetBootPerfRawDataResponse) Reset() {
	*x = GetBootPerfRawDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boot_perf_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBootPerfRawDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBootPerfRawDataResponse) ProtoMessage() {}

func (x *GetBootPerfRawDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_boot_perf_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBootPerfRawDataResponse.ProtoReflect.Descriptor instead.
func (*GetBootPerfRawDataResponse) Descriptor() ([]byte, []int) {
	return file_boot_perf_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetBootPerfRawDataResponse) GetRawData() map[string][]byte {
	if x != nil {
		return x.RawData
	}
	return nil
}

var File_boot_perf_service_proto protoreflect.FileDescriptor

var file_boot_perf_service_proto_rawDesc = []byte{
	0x0a, 0x17, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x74, 0x61, 0x73, 0x74, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaf, 0x01, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x66, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x74, 0x61, 0x73,
	0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x66, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x1a, 0x3a, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb0, 0x01, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x66, 0x52, 0x61, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x08, 0x72,
	0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x66, 0x52, 0x61,
	0x77, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x61,
	0x77, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0x3a, 0x0a, 0x0c, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32,
	0xdc, 0x02, 0x0a, 0x0f, 0x42, 0x6f, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x6f,
	0x74, 0x63, 0x68, 0x61, 0x72, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x63, 0x68, 0x61, 0x72, 0x74, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5e,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x66, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2e, 0x2e, 0x74,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x66, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x66, 0x52, 0x61, 0x77,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2e, 0x2e, 0x74,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x66, 0x52, 0x61, 0x77,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x28,
	0x5a, 0x26, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x61, 0x73,
	0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_boot_perf_service_proto_rawDescOnce sync.Once
	file_boot_perf_service_proto_rawDescData = file_boot_perf_service_proto_rawDesc
)

func file_boot_perf_service_proto_rawDescGZIP() []byte {
	file_boot_perf_service_proto_rawDescOnce.Do(func() {
		file_boot_perf_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_boot_perf_service_proto_rawDescData)
	})
	return file_boot_perf_service_proto_rawDescData
}

var file_boot_perf_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_boot_perf_service_proto_goTypes = []interface{}{
	(*GetBootPerfMetricsResponse)(nil), // 0: tast.cros.platform.GetBootPerfMetricsResponse
	(*GetBootPerfRawDataResponse)(nil), // 1: tast.cros.platform.GetBootPerfRawDataResponse
	nil,                                // 2: tast.cros.platform.GetBootPerfMetricsResponse.MetricsEntry
	nil,                                // 3: tast.cros.platform.GetBootPerfRawDataResponse.RawDataEntry
	(*empty.Empty)(nil),                // 4: google.protobuf.Empty
}
var file_boot_perf_service_proto_depIdxs = []int32{
	2, // 0: tast.cros.platform.GetBootPerfMetricsResponse.metrics:type_name -> tast.cros.platform.GetBootPerfMetricsResponse.MetricsEntry
	3, // 1: tast.cros.platform.GetBootPerfRawDataResponse.raw_data:type_name -> tast.cros.platform.GetBootPerfRawDataResponse.RawDataEntry
	4, // 2: tast.cros.platform.BootPerfService.EnableBootchart:input_type -> google.protobuf.Empty
	4, // 3: tast.cros.platform.BootPerfService.DisableBootchart:input_type -> google.protobuf.Empty
	4, // 4: tast.cros.platform.BootPerfService.GetBootPerfMetrics:input_type -> google.protobuf.Empty
	4, // 5: tast.cros.platform.BootPerfService.GetBootPerfRawData:input_type -> google.protobuf.Empty
	4, // 6: tast.cros.platform.BootPerfService.EnableBootchart:output_type -> google.protobuf.Empty
	4, // 7: tast.cros.platform.BootPerfService.DisableBootchart:output_type -> google.protobuf.Empty
	0, // 8: tast.cros.platform.BootPerfService.GetBootPerfMetrics:output_type -> tast.cros.platform.GetBootPerfMetricsResponse
	1, // 9: tast.cros.platform.BootPerfService.GetBootPerfRawData:output_type -> tast.cros.platform.GetBootPerfRawDataResponse
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_boot_perf_service_proto_init() }
func file_boot_perf_service_proto_init() {
	if File_boot_perf_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_boot_perf_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBootPerfMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boot_perf_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBootPerfRawDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_boot_perf_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_boot_perf_service_proto_goTypes,
		DependencyIndexes: file_boot_perf_service_proto_depIdxs,
		MessageInfos:      file_boot_perf_service_proto_msgTypes,
	}.Build()
	File_boot_perf_service_proto = out.File
	file_boot_perf_service_proto_rawDesc = nil
	file_boot_perf_service_proto_goTypes = nil
	file_boot_perf_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BootPerfServiceClient is the client API for BootPerfService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BootPerfServiceClient interface {
	//  Enables bootchart collection for next system boot.
	EnableBootchart(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Disables bootchart collection for next system boot.
	DisableBootchart(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Collects boot perf metrics from the device.
	GetBootPerfMetrics(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetBootPerfMetricsResponse, error)
	// Saves boot perf raw data and other files like console-ramoops for debugging.
	GetBootPerfRawData(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetBootPerfRawDataResponse, error)
}

type bootPerfServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBootPerfServiceClient(cc grpc.ClientConnInterface) BootPerfServiceClient {
	return &bootPerfServiceClient{cc}
}

func (c *bootPerfServiceClient) EnableBootchart(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.platform.BootPerfService/EnableBootchart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootPerfServiceClient) DisableBootchart(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.platform.BootPerfService/DisableBootchart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootPerfServiceClient) GetBootPerfMetrics(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetBootPerfMetricsResponse, error) {
	out := new(GetBootPerfMetricsResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.platform.BootPerfService/GetBootPerfMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootPerfServiceClient) GetBootPerfRawData(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetBootPerfRawDataResponse, error) {
	out := new(GetBootPerfRawDataResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.platform.BootPerfService/GetBootPerfRawData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BootPerfServiceServer is the server API for BootPerfService service.
type BootPerfServiceServer interface {
	//  Enables bootchart collection for next system boot.
	EnableBootchart(context.Context, *empty.Empty) (*empty.Empty, error)
	// Disables bootchart collection for next system boot.
	DisableBootchart(context.Context, *empty.Empty) (*empty.Empty, error)
	// Collects boot perf metrics from the device.
	GetBootPerfMetrics(context.Context, *empty.Empty) (*GetBootPerfMetricsResponse, error)
	// Saves boot perf raw data and other files like console-ramoops for debugging.
	GetBootPerfRawData(context.Context, *empty.Empty) (*GetBootPerfRawDataResponse, error)
}

// UnimplementedBootPerfServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBootPerfServiceServer struct {
}

func (*UnimplementedBootPerfServiceServer) EnableBootchart(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableBootchart not implemented")
}
func (*UnimplementedBootPerfServiceServer) DisableBootchart(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableBootchart not implemented")
}
func (*UnimplementedBootPerfServiceServer) GetBootPerfMetrics(context.Context, *empty.Empty) (*GetBootPerfMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBootPerfMetrics not implemented")
}
func (*UnimplementedBootPerfServiceServer) GetBootPerfRawData(context.Context, *empty.Empty) (*GetBootPerfRawDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBootPerfRawData not implemented")
}

func RegisterBootPerfServiceServer(s *grpc.Server, srv BootPerfServiceServer) {
	s.RegisterService(&_BootPerfService_serviceDesc, srv)
}

func _BootPerfService_EnableBootchart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootPerfServiceServer).EnableBootchart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.platform.BootPerfService/EnableBootchart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootPerfServiceServer).EnableBootchart(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BootPerfService_DisableBootchart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootPerfServiceServer).DisableBootchart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.platform.BootPerfService/DisableBootchart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootPerfServiceServer).DisableBootchart(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BootPerfService_GetBootPerfMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootPerfServiceServer).GetBootPerfMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.platform.BootPerfService/GetBootPerfMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootPerfServiceServer).GetBootPerfMetrics(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BootPerfService_GetBootPerfRawData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootPerfServiceServer).GetBootPerfRawData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.platform.BootPerfService/GetBootPerfRawData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootPerfServiceServer).GetBootPerfRawData(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _BootPerfService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.platform.BootPerfService",
	HandlerType: (*BootPerfServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnableBootchart",
			Handler:    _BootPerfService_EnableBootchart_Handler,
		},
		{
			MethodName: "DisableBootchart",
			Handler:    _BootPerfService_DisableBootchart_Handler,
		},
		{
			MethodName: "GetBootPerfMetrics",
			Handler:    _BootPerfService_GetBootPerfMetrics_Handler,
		},
		{
			MethodName: "GetBootPerfRawData",
			Handler:    _BootPerfService_GetBootPerfRawData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "boot_perf_service.proto",
}
