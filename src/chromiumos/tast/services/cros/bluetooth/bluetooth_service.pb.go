// Copyright 2022 The ChromiumOS Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: bluetooth_service.proto

package bluetooth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bluetooth_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bluetooth_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_bluetooth_service_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DeviceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type InitializeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Floss bool `protobuf:"varint,1,opt,name=floss,proto3" json:"floss,omitempty"`
}

func (x *InitializeRequest) Reset() {
	*x = InitializeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bluetooth_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeRequest) ProtoMessage() {}

func (x *InitializeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bluetooth_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeRequest.ProtoReflect.Descriptor instead.
func (*InitializeRequest) Descriptor() ([]byte, []int) {
	return file_bluetooth_service_proto_rawDescGZIP(), []int{1}
}

func (x *InitializeRequest) GetFloss() bool {
	if x != nil {
		return x.Floss
	}
	return false
}

type PollForAdapterStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State bool `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *PollForAdapterStateRequest) Reset() {
	*x = PollForAdapterStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bluetooth_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollForAdapterStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollForAdapterStateRequest) ProtoMessage() {}

func (x *PollForAdapterStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bluetooth_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollForAdapterStateRequest.ProtoReflect.Descriptor instead.
func (*PollForAdapterStateRequest) Descriptor() ([]byte, []int) {
	return file_bluetooth_service_proto_rawDescGZIP(), []int{2}
}

func (x *PollForAdapterStateRequest) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

type DevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceInfos []*DeviceInfo `protobuf:"bytes,1,rep,name=device_infos,json=deviceInfos,proto3" json:"device_infos,omitempty"`
}

func (x *DevicesResponse) Reset() {
	*x = DevicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bluetooth_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicesResponse) ProtoMessage() {}

func (x *DevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bluetooth_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicesResponse.ProtoReflect.Descriptor instead.
func (*DevicesResponse) Descriptor() ([]byte, []int) {
	return file_bluetooth_service_proto_rawDescGZIP(), []int{3}
}

func (x *DevicesResponse) GetDeviceInfos() []*DeviceInfo {
	if x != nil {
		return x.DeviceInfos
	}
	return nil
}

var File_bluetooth_service_proto protoreflect.FileDescriptor

var file_bluetooth_service_proto_rawDesc = []byte{
	0x0a, 0x17, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x74, 0x61, 0x73, 0x74, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3a, 0x0a, 0x0a, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x29, 0x0a, 0x11, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6c, 0x6f,
	0x73, 0x73, 0x22, 0x32, 0x0a, 0x1a, 0x50, 0x6f, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x55, 0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x74, 0x6f, 0x6f, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x32, 0x8d, 0x04,
	0x0a, 0x10, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x12, 0x26, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x3a, 0x0a, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x60,
	0x0a, 0x13, 0x50, 0x6f, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f,
	0x73, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x2e, 0x50, 0x6f, 0x6c, 0x6c,
	0x46, 0x6f, 0x72, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x49, 0x0a, 0x07, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x41, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x70, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x39, 0x0a, 0x05, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x29, 0x5a,
	0x27, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x74,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x62,
	0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bluetooth_service_proto_rawDescOnce sync.Once
	file_bluetooth_service_proto_rawDescData = file_bluetooth_service_proto_rawDesc
)

func file_bluetooth_service_proto_rawDescGZIP() []byte {
	file_bluetooth_service_proto_rawDescOnce.Do(func() {
		file_bluetooth_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_bluetooth_service_proto_rawDescData)
	})
	return file_bluetooth_service_proto_rawDescData
}

var file_bluetooth_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_bluetooth_service_proto_goTypes = []interface{}{
	(*DeviceInfo)(nil),                 // 0: tast.cros.bluetooth.DeviceInfo
	(*InitializeRequest)(nil),          // 1: tast.cros.bluetooth.InitializeRequest
	(*PollForAdapterStateRequest)(nil), // 2: tast.cros.bluetooth.PollForAdapterStateRequest
	(*DevicesResponse)(nil),            // 3: tast.cros.bluetooth.DevicesResponse
	(*emptypb.Empty)(nil),              // 4: google.protobuf.Empty
}
var file_bluetooth_service_proto_depIdxs = []int32{
	0, // 0: tast.cros.bluetooth.DevicesResponse.device_infos:type_name -> tast.cros.bluetooth.DeviceInfo
	1, // 1: tast.cros.bluetooth.BluetoothService.Initialize:input_type -> tast.cros.bluetooth.InitializeRequest
	4, // 2: tast.cros.bluetooth.BluetoothService.Enable:input_type -> google.protobuf.Empty
	2, // 3: tast.cros.bluetooth.BluetoothService.PollForAdapterState:input_type -> tast.cros.bluetooth.PollForAdapterStateRequest
	4, // 4: tast.cros.bluetooth.BluetoothService.Devices:input_type -> google.protobuf.Empty
	4, // 5: tast.cros.bluetooth.BluetoothService.StartDiscovery:input_type -> google.protobuf.Empty
	4, // 6: tast.cros.bluetooth.BluetoothService.StopDiscovery:input_type -> google.protobuf.Empty
	4, // 7: tast.cros.bluetooth.BluetoothService.Reset:input_type -> google.protobuf.Empty
	4, // 8: tast.cros.bluetooth.BluetoothService.Initialize:output_type -> google.protobuf.Empty
	4, // 9: tast.cros.bluetooth.BluetoothService.Enable:output_type -> google.protobuf.Empty
	4, // 10: tast.cros.bluetooth.BluetoothService.PollForAdapterState:output_type -> google.protobuf.Empty
	3, // 11: tast.cros.bluetooth.BluetoothService.Devices:output_type -> tast.cros.bluetooth.DevicesResponse
	4, // 12: tast.cros.bluetooth.BluetoothService.StartDiscovery:output_type -> google.protobuf.Empty
	4, // 13: tast.cros.bluetooth.BluetoothService.StopDiscovery:output_type -> google.protobuf.Empty
	4, // 14: tast.cros.bluetooth.BluetoothService.Reset:output_type -> google.protobuf.Empty
	8, // [8:15] is the sub-list for method output_type
	1, // [1:8] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_bluetooth_service_proto_init() }
func file_bluetooth_service_proto_init() {
	if File_bluetooth_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bluetooth_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bluetooth_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bluetooth_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollForAdapterStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bluetooth_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bluetooth_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bluetooth_service_proto_goTypes,
		DependencyIndexes: file_bluetooth_service_proto_depIdxs,
		MessageInfos:      file_bluetooth_service_proto_msgTypes,
	}.Build()
	File_bluetooth_service_proto = out.File
	file_bluetooth_service_proto_rawDesc = nil
	file_bluetooth_service_proto_goTypes = nil
	file_bluetooth_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BluetoothServiceClient is the client API for BluetoothService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BluetoothServiceClient interface {
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Enable(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PollForAdapterState(ctx context.Context, in *PollForAdapterStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Devices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DevicesResponse, error)
	StartDiscovery(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StopDiscovery(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Reset(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type bluetoothServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBluetoothServiceClient(cc grpc.ClientConnInterface) BluetoothServiceClient {
	return &bluetoothServiceClient{cc}
}

func (c *bluetoothServiceClient) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.bluetooth.BluetoothService/Initialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothServiceClient) Enable(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.bluetooth.BluetoothService/Enable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothServiceClient) PollForAdapterState(ctx context.Context, in *PollForAdapterStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.bluetooth.BluetoothService/PollForAdapterState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothServiceClient) Devices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DevicesResponse, error) {
	out := new(DevicesResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.bluetooth.BluetoothService/Devices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothServiceClient) StartDiscovery(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.bluetooth.BluetoothService/StartDiscovery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothServiceClient) StopDiscovery(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.bluetooth.BluetoothService/StopDiscovery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothServiceClient) Reset(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.bluetooth.BluetoothService/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BluetoothServiceServer is the server API for BluetoothService service.
type BluetoothServiceServer interface {
	Initialize(context.Context, *InitializeRequest) (*emptypb.Empty, error)
	Enable(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	PollForAdapterState(context.Context, *PollForAdapterStateRequest) (*emptypb.Empty, error)
	Devices(context.Context, *emptypb.Empty) (*DevicesResponse, error)
	StartDiscovery(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	StopDiscovery(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	Reset(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
}

// UnimplementedBluetoothServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBluetoothServiceServer struct {
}

func (*UnimplementedBluetoothServiceServer) Initialize(context.Context, *InitializeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (*UnimplementedBluetoothServiceServer) Enable(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}
func (*UnimplementedBluetoothServiceServer) PollForAdapterState(context.Context, *PollForAdapterStateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollForAdapterState not implemented")
}
func (*UnimplementedBluetoothServiceServer) Devices(context.Context, *emptypb.Empty) (*DevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Devices not implemented")
}
func (*UnimplementedBluetoothServiceServer) StartDiscovery(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDiscovery not implemented")
}
func (*UnimplementedBluetoothServiceServer) StopDiscovery(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDiscovery not implemented")
}
func (*UnimplementedBluetoothServiceServer) Reset(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}

func RegisterBluetoothServiceServer(s *grpc.Server, srv BluetoothServiceServer) {
	s.RegisterService(&_BluetoothService_serviceDesc, srv)
}

func _BluetoothService_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothServiceServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.bluetooth.BluetoothService/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothServiceServer).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluetoothService_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothServiceServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.bluetooth.BluetoothService/Enable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothServiceServer).Enable(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluetoothService_PollForAdapterState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollForAdapterStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothServiceServer).PollForAdapterState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.bluetooth.BluetoothService/PollForAdapterState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothServiceServer).PollForAdapterState(ctx, req.(*PollForAdapterStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluetoothService_Devices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothServiceServer).Devices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.bluetooth.BluetoothService/Devices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothServiceServer).Devices(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluetoothService_StartDiscovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothServiceServer).StartDiscovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.bluetooth.BluetoothService/StartDiscovery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothServiceServer).StartDiscovery(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluetoothService_StopDiscovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothServiceServer).StopDiscovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.bluetooth.BluetoothService/StopDiscovery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothServiceServer).StopDiscovery(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluetoothService_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothServiceServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.bluetooth.BluetoothService/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothServiceServer).Reset(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _BluetoothService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.bluetooth.BluetoothService",
	HandlerType: (*BluetoothServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _BluetoothService_Initialize_Handler,
		},
		{
			MethodName: "Enable",
			Handler:    _BluetoothService_Enable_Handler,
		},
		{
			MethodName: "PollForAdapterState",
			Handler:    _BluetoothService_PollForAdapterState_Handler,
		},
		{
			MethodName: "Devices",
			Handler:    _BluetoothService_Devices_Handler,
		},
		{
			MethodName: "StartDiscovery",
			Handler:    _BluetoothService_StartDiscovery_Handler,
		},
		{
			MethodName: "StopDiscovery",
			Handler:    _BluetoothService_StopDiscovery_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _BluetoothService_Reset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bluetooth_service.proto",
}
