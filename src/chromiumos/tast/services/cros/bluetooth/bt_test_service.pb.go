// Copyright 2022 The ChromiumOS Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: bt_test_service.proto

package bluetooth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChromeNewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableFeatures               []string `protobuf:"bytes,1,rep,name=enableFeatures,proto3" json:"enableFeatures,omitempty"`
	DisableFeatures              []string `protobuf:"bytes,2,rep,name=disableFeatures,proto3" json:"disableFeatures,omitempty"`
	NoLogin                      bool     `protobuf:"varint,3,opt,name=noLogin,proto3" json:"noLogin,omitempty"`
	SigninProfileTestExtensionID string   `protobuf:"bytes,4,opt,name=signinProfileTestExtensionID,proto3" json:"signinProfileTestExtensionID,omitempty"`
}

func (x *ChromeNewRequest) Reset() {
	*x = ChromeNewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bt_test_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeNewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeNewRequest) ProtoMessage() {}

func (x *ChromeNewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bt_test_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeNewRequest.ProtoReflect.Descriptor instead.
func (*ChromeNewRequest) Descriptor() ([]byte, []int) {
	return file_bt_test_service_proto_rawDescGZIP(), []int{0}
}

func (x *ChromeNewRequest) GetEnableFeatures() []string {
	if x != nil {
		return x.EnableFeatures
	}
	return nil
}

func (x *ChromeNewRequest) GetDisableFeatures() []string {
	if x != nil {
		return x.DisableFeatures
	}
	return nil
}

func (x *ChromeNewRequest) GetNoLogin() bool {
	if x != nil {
		return x.NoLogin
	}
	return false
}

func (x *ChromeNewRequest) GetSigninProfileTestExtensionID() string {
	if x != nil {
		return x.SigninProfileTestExtensionID
	}
	return ""
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacAddress     string `protobuf:"bytes,1,opt,name=macAddress,proto3" json:"macAddress,omitempty"`
	AdvertisedName string `protobuf:"bytes,2,opt,name=advertisedName,proto3" json:"advertisedName,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bt_test_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_bt_test_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_bt_test_service_proto_rawDescGZIP(), []int{1}
}

func (x *Device) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *Device) GetAdvertisedName() string {
	if x != nil {
		return x.AdvertisedName
	}
	return ""
}

type DiscoverDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The device to discover.
	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *DiscoverDeviceRequest) Reset() {
	*x = DiscoverDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bt_test_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverDeviceRequest) ProtoMessage() {}

func (x *DiscoverDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bt_test_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverDeviceRequest.ProtoReflect.Descriptor instead.
func (*DiscoverDeviceRequest) Descriptor() ([]byte, []int) {
	return file_bt_test_service_proto_rawDescGZIP(), []int{2}
}

func (x *DiscoverDeviceRequest) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type ServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success        bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	UiTreeFilePath string `protobuf:"bytes,2,opt,name=uiTreeFilePath,proto3" json:"uiTreeFilePath,omitempty"`
}

func (x *ServiceResponse) Reset() {
	*x = ServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bt_test_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceResponse) ProtoMessage() {}

func (x *ServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bt_test_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceResponse.ProtoReflect.Descriptor instead.
func (*ServiceResponse) Descriptor() ([]byte, []int) {
	return file_bt_test_service_proto_rawDescGZIP(), []int{3}
}

func (x *ServiceResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ServiceResponse) GetUiTreeFilePath() string {
	if x != nil {
		return x.UiTreeFilePath
	}
	return ""
}

var File_bt_test_service_proto protoreflect.FileDescriptor

var file_bt_test_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x62, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72,
	0x6f, 0x73, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc2, 0x01, 0x0a, 0x10, 0x43, 0x68,
	0x72, 0x6f, 0x6d, 0x65, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x6e, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1c, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x50,
	0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x4c, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x53,
	0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x75,
	0x69, 0x54, 0x72, 0x65, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x69, 0x54, 0x72, 0x65, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x32, 0xb0, 0x04, 0x0a, 0x0d, 0x42, 0x54, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4e,
	0x65, 0x77, 0x12, 0x25, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4e,
	0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x16, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6c,
	0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x4b, 0x0a, 0x17, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6c, 0x75, 0x65, 0x74,
	0x6f, 0x6f, 0x74, 0x68, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a,
	0x14, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x2e, 0x74, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x55, 0x0a, 0x13, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24,
	0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x74,
	0x6f, 0x6f, 0x74, 0x68, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x29, 0x5a, 0x27, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69,
	0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74,
	0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bt_test_service_proto_rawDescOnce sync.Once
	file_bt_test_service_proto_rawDescData = file_bt_test_service_proto_rawDesc
)

func file_bt_test_service_proto_rawDescGZIP() []byte {
	file_bt_test_service_proto_rawDescOnce.Do(func() {
		file_bt_test_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_bt_test_service_proto_rawDescData)
	})
	return file_bt_test_service_proto_rawDescData
}

var file_bt_test_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_bt_test_service_proto_goTypes = []interface{}{
	(*ChromeNewRequest)(nil),      // 0: tast.cros.bluetooth.ChromeNewRequest
	(*Device)(nil),                // 1: tast.cros.bluetooth.Device
	(*DiscoverDeviceRequest)(nil), // 2: tast.cros.bluetooth.DiscoverDeviceRequest
	(*ServiceResponse)(nil),       // 3: tast.cros.bluetooth.ServiceResponse
	(*emptypb.Empty)(nil),         // 4: google.protobuf.Empty
}
var file_bt_test_service_proto_depIdxs = []int32{
	1, // 0: tast.cros.bluetooth.DiscoverDeviceRequest.device:type_name -> tast.cros.bluetooth.Device
	0, // 1: tast.cros.bluetooth.BTTestService.ChromeNew:input_type -> tast.cros.bluetooth.ChromeNewRequest
	4, // 2: tast.cros.bluetooth.BTTestService.ChromeClose:input_type -> google.protobuf.Empty
	4, // 3: tast.cros.bluetooth.BTTestService.EnableBluetoothAdapter:input_type -> google.protobuf.Empty
	4, // 4: tast.cros.bluetooth.BTTestService.DisableBluetoothAdapter:input_type -> google.protobuf.Empty
	4, // 5: tast.cros.bluetooth.BTTestService.DisconnectAllDevices:input_type -> google.protobuf.Empty
	2, // 6: tast.cros.bluetooth.BTTestService.DiscoverDevice:input_type -> tast.cros.bluetooth.DiscoverDeviceRequest
	4, // 7: tast.cros.bluetooth.BTTestService.WaitForCancelButton:input_type -> google.protobuf.Empty
	4, // 8: tast.cros.bluetooth.BTTestService.ChromeNew:output_type -> google.protobuf.Empty
	4, // 9: tast.cros.bluetooth.BTTestService.ChromeClose:output_type -> google.protobuf.Empty
	4, // 10: tast.cros.bluetooth.BTTestService.EnableBluetoothAdapter:output_type -> google.protobuf.Empty
	4, // 11: tast.cros.bluetooth.BTTestService.DisableBluetoothAdapter:output_type -> google.protobuf.Empty
	4, // 12: tast.cros.bluetooth.BTTestService.DisconnectAllDevices:output_type -> google.protobuf.Empty
	4, // 13: tast.cros.bluetooth.BTTestService.DiscoverDevice:output_type -> google.protobuf.Empty
	3, // 14: tast.cros.bluetooth.BTTestService.WaitForCancelButton:output_type -> tast.cros.bluetooth.ServiceResponse
	8, // [8:15] is the sub-list for method output_type
	1, // [1:8] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_bt_test_service_proto_init() }
func file_bt_test_service_proto_init() {
	if File_bt_test_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bt_test_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeNewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bt_test_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bt_test_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoverDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bt_test_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bt_test_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bt_test_service_proto_goTypes,
		DependencyIndexes: file_bt_test_service_proto_depIdxs,
		MessageInfos:      file_bt_test_service_proto_msgTypes,
	}.Build()
	File_bt_test_service_proto = out.File
	file_bt_test_service_proto_rawDesc = nil
	file_bt_test_service_proto_goTypes = nil
	file_bt_test_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BTTestServiceClient is the client API for BTTestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BTTestServiceClient interface {
	// ChromeNew logs into chrome. ChromeClose must be called later.
	ChromeNew(ctx context.Context, in *ChromeNewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ChromeClose cleans up resources from ChromeNew.
	ChromeClose(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// EnableBluetoothAdapter powers on the bluetooth adapter.
	EnableBluetoothAdapter(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DisableBluetoothAdapter powers off the bluetooth adapter.
	DisableBluetoothAdapter(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DisconnectAllDevices disconnects all connected bluetooth devices.
	DisconnectAllDevices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DiscoverDevice confirms that the DUT can discover the provided bluetooth
	// device. Fails if the device is not found or if the discovered matching
	// device's attributes do not match those provided.
	DiscoverDevice(ctx context.Context, in *DiscoverDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WaitForCancelButton Waits for cancel button to become available.
	WaitForCancelButton(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServiceResponse, error)
}

type bTTestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBTTestServiceClient(cc grpc.ClientConnInterface) BTTestServiceClient {
	return &bTTestServiceClient{cc}
}

func (c *bTTestServiceClient) ChromeNew(ctx context.Context, in *ChromeNewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.bluetooth.BTTestService/ChromeNew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bTTestServiceClient) ChromeClose(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.bluetooth.BTTestService/ChromeClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bTTestServiceClient) EnableBluetoothAdapter(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.bluetooth.BTTestService/EnableBluetoothAdapter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bTTestServiceClient) DisableBluetoothAdapter(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.bluetooth.BTTestService/DisableBluetoothAdapter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bTTestServiceClient) DisconnectAllDevices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.bluetooth.BTTestService/DisconnectAllDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bTTestServiceClient) DiscoverDevice(ctx context.Context, in *DiscoverDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.bluetooth.BTTestService/DiscoverDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bTTestServiceClient) WaitForCancelButton(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.bluetooth.BTTestService/WaitForCancelButton", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BTTestServiceServer is the server API for BTTestService service.
type BTTestServiceServer interface {
	// ChromeNew logs into chrome. ChromeClose must be called later.
	ChromeNew(context.Context, *ChromeNewRequest) (*emptypb.Empty, error)
	// ChromeClose cleans up resources from ChromeNew.
	ChromeClose(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// EnableBluetoothAdapter powers on the bluetooth adapter.
	EnableBluetoothAdapter(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// DisableBluetoothAdapter powers off the bluetooth adapter.
	DisableBluetoothAdapter(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// DisconnectAllDevices disconnects all connected bluetooth devices.
	DisconnectAllDevices(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// DiscoverDevice confirms that the DUT can discover the provided bluetooth
	// device. Fails if the device is not found or if the discovered matching
	// device's attributes do not match those provided.
	DiscoverDevice(context.Context, *DiscoverDeviceRequest) (*emptypb.Empty, error)
	// WaitForCancelButton Waits for cancel button to become available.
	WaitForCancelButton(context.Context, *emptypb.Empty) (*ServiceResponse, error)
}

// UnimplementedBTTestServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBTTestServiceServer struct {
}

func (*UnimplementedBTTestServiceServer) ChromeNew(context.Context, *ChromeNewRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChromeNew not implemented")
}
func (*UnimplementedBTTestServiceServer) ChromeClose(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChromeClose not implemented")
}
func (*UnimplementedBTTestServiceServer) EnableBluetoothAdapter(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableBluetoothAdapter not implemented")
}
func (*UnimplementedBTTestServiceServer) DisableBluetoothAdapter(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableBluetoothAdapter not implemented")
}
func (*UnimplementedBTTestServiceServer) DisconnectAllDevices(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectAllDevices not implemented")
}
func (*UnimplementedBTTestServiceServer) DiscoverDevice(context.Context, *DiscoverDeviceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverDevice not implemented")
}
func (*UnimplementedBTTestServiceServer) WaitForCancelButton(context.Context, *emptypb.Empty) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForCancelButton not implemented")
}

func RegisterBTTestServiceServer(s *grpc.Server, srv BTTestServiceServer) {
	s.RegisterService(&_BTTestService_serviceDesc, srv)
}

func _BTTestService_ChromeNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChromeNewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BTTestServiceServer).ChromeNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.bluetooth.BTTestService/ChromeNew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BTTestServiceServer).ChromeNew(ctx, req.(*ChromeNewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BTTestService_ChromeClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BTTestServiceServer).ChromeClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.bluetooth.BTTestService/ChromeClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BTTestServiceServer).ChromeClose(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BTTestService_EnableBluetoothAdapter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BTTestServiceServer).EnableBluetoothAdapter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.bluetooth.BTTestService/EnableBluetoothAdapter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BTTestServiceServer).EnableBluetoothAdapter(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BTTestService_DisableBluetoothAdapter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BTTestServiceServer).DisableBluetoothAdapter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.bluetooth.BTTestService/DisableBluetoothAdapter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BTTestServiceServer).DisableBluetoothAdapter(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BTTestService_DisconnectAllDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BTTestServiceServer).DisconnectAllDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.bluetooth.BTTestService/DisconnectAllDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BTTestServiceServer).DisconnectAllDevices(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BTTestService_DiscoverDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BTTestServiceServer).DiscoverDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.bluetooth.BTTestService/DiscoverDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BTTestServiceServer).DiscoverDevice(ctx, req.(*DiscoverDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BTTestService_WaitForCancelButton_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BTTestServiceServer).WaitForCancelButton(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.bluetooth.BTTestService/WaitForCancelButton",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BTTestServiceServer).WaitForCancelButton(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _BTTestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.bluetooth.BTTestService",
	HandlerType: (*BTTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChromeNew",
			Handler:    _BTTestService_ChromeNew_Handler,
		},
		{
			MethodName: "ChromeClose",
			Handler:    _BTTestService_ChromeClose_Handler,
		},
		{
			MethodName: "EnableBluetoothAdapter",
			Handler:    _BTTestService_EnableBluetoothAdapter_Handler,
		},
		{
			MethodName: "DisableBluetoothAdapter",
			Handler:    _BTTestService_DisableBluetoothAdapter_Handler,
		},
		{
			MethodName: "DisconnectAllDevices",
			Handler:    _BTTestService_DisconnectAllDevices_Handler,
		},
		{
			MethodName: "DiscoverDevice",
			Handler:    _BTTestService_DiscoverDevice_Handler,
		},
		{
			MethodName: "WaitForCancelButton",
			Handler:    _BTTestService_WaitForCancelButton_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bt_test_service.proto",
}
