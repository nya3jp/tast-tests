// Code generated by protoc-gen-go. DO NOT EDIT.
// source: boot_lockbox_service.proto

package security

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ReadBootLockboxRequest struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadBootLockboxRequest) Reset()         { *m = ReadBootLockboxRequest{} }
func (m *ReadBootLockboxRequest) String() string { return proto.CompactTextString(m) }
func (*ReadBootLockboxRequest) ProtoMessage()    {}
func (*ReadBootLockboxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c1fd4f38c1ac2f6, []int{0}
}

func (m *ReadBootLockboxRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadBootLockboxRequest.Unmarshal(m, b)
}
func (m *ReadBootLockboxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadBootLockboxRequest.Marshal(b, m, deterministic)
}
func (m *ReadBootLockboxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadBootLockboxRequest.Merge(m, src)
}
func (m *ReadBootLockboxRequest) XXX_Size() int {
	return xxx_messageInfo_ReadBootLockboxRequest.Size(m)
}
func (m *ReadBootLockboxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadBootLockboxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadBootLockboxRequest proto.InternalMessageInfo

func (m *ReadBootLockboxRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type ReadBootLockboxResponse struct {
	Value                []byte   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadBootLockboxResponse) Reset()         { *m = ReadBootLockboxResponse{} }
func (m *ReadBootLockboxResponse) String() string { return proto.CompactTextString(m) }
func (*ReadBootLockboxResponse) ProtoMessage()    {}
func (*ReadBootLockboxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c1fd4f38c1ac2f6, []int{1}
}

func (m *ReadBootLockboxResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadBootLockboxResponse.Unmarshal(m, b)
}
func (m *ReadBootLockboxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadBootLockboxResponse.Marshal(b, m, deterministic)
}
func (m *ReadBootLockboxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadBootLockboxResponse.Merge(m, src)
}
func (m *ReadBootLockboxResponse) XXX_Size() int {
	return xxx_messageInfo_ReadBootLockboxResponse.Size(m)
}
func (m *ReadBootLockboxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadBootLockboxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReadBootLockboxResponse proto.InternalMessageInfo

func (m *ReadBootLockboxResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type StoreBootLockboxRequest struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StoreBootLockboxRequest) Reset()         { *m = StoreBootLockboxRequest{} }
func (m *StoreBootLockboxRequest) String() string { return proto.CompactTextString(m) }
func (*StoreBootLockboxRequest) ProtoMessage()    {}
func (*StoreBootLockboxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c1fd4f38c1ac2f6, []int{2}
}

func (m *StoreBootLockboxRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StoreBootLockboxRequest.Unmarshal(m, b)
}
func (m *StoreBootLockboxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StoreBootLockboxRequest.Marshal(b, m, deterministic)
}
func (m *StoreBootLockboxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreBootLockboxRequest.Merge(m, src)
}
func (m *StoreBootLockboxRequest) XXX_Size() int {
	return xxx_messageInfo_StoreBootLockboxRequest.Size(m)
}
func (m *StoreBootLockboxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreBootLockboxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StoreBootLockboxRequest proto.InternalMessageInfo

func (m *StoreBootLockboxRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *StoreBootLockboxRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*ReadBootLockboxRequest)(nil), "tast.cros.security.ReadBootLockboxRequest")
	proto.RegisterType((*ReadBootLockboxResponse)(nil), "tast.cros.security.ReadBootLockboxResponse")
	proto.RegisterType((*StoreBootLockboxRequest)(nil), "tast.cros.security.StoreBootLockboxRequest")
}

func init() { proto.RegisterFile("boot_lockbox_service.proto", fileDescriptor_8c1fd4f38c1ac2f6) }

var fileDescriptor_8c1fd4f38c1ac2f6 = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0xfb, 0xc7, 0x08, 0x0e, 0x1e, 0x64, 0x90, 0x56, 0xe2, 0x45, 0x72, 0x90, 0x52, 0x61,
	0x17, 0xf4, 0x20, 0x1e, 0xad, 0x78, 0x93, 0x1e, 0xd2, 0x9b, 0x97, 0x92, 0xc4, 0xb1, 0x86, 0x26,
	0x4e, 0xdc, 0xd9, 0x54, 0xf3, 0xd9, 0xfc, 0x72, 0x92, 0xac, 0xc5, 0x42, 0x1b, 0x28, 0xde, 0x92,
	0xe5, 0xbd, 0x1f, 0xfb, 0x7e, 0x2c, 0xf8, 0x31, 0xb3, 0x9d, 0x67, 0x9c, 0x2c, 0x63, 0xfe, 0x9a,
	0x0b, 0x99, 0x55, 0x9a, 0x90, 0x2a, 0x0c, 0x5b, 0x46, 0xb4, 0x91, 0x58, 0x95, 0x18, 0x16, 0x25,
	0x94, 0x94, 0x26, 0xb5, 0x95, 0x7f, 0xbe, 0x60, 0x5e, 0x64, 0xa4, 0x9b, 0x44, 0x5c, 0xbe, 0x6a,
	0xca, 0x0b, 0x5b, 0xb9, 0x42, 0x30, 0x86, 0x41, 0x48, 0xd1, 0xcb, 0x84, 0xd9, 0x3e, 0x39, 0x62,
	0x48, 0x1f, 0x25, 0x89, 0xc5, 0x13, 0xe8, 0x2f, 0xa9, 0x3a, 0xeb, 0x5e, 0x74, 0x47, 0x47, 0x61,
	0xfd, 0x19, 0x68, 0x18, 0x6e, 0x65, 0xa5, 0xe0, 0x77, 0x21, 0x3c, 0x05, 0x6f, 0x15, 0x65, 0x25,
	0x35, 0xf1, 0xe3, 0xd0, 0xfd, 0x04, 0xf7, 0x30, 0x9c, 0x59, 0x36, 0xb4, 0x0f, 0xfd, 0x0f, 0xd1,
	0xdb, 0x40, 0x5c, 0x7f, 0xf7, 0x00, 0x37, 0xea, 0x33, 0xb7, 0x16, 0x6f, 0xa1, 0x3f, 0xa5, 0x4f,
	0x1c, 0x28, 0xb7, 0x4d, 0xad, 0xb7, 0xa9, 0xc7, 0x7a, 0x9b, 0xdf, 0x72, 0x1e, 0x74, 0xf0, 0x0e,
	0xbc, 0x87, 0x8c, 0x85, 0xfe, 0x51, 0x8d, 0xe0, 0xa0, 0x9e, 0x8f, 0x63, 0xb5, 0x2d, 0x59, 0xed,
	0x96, 0xe8, 0x5f, 0xed, 0x95, 0x75, 0x12, 0x83, 0x0e, 0x4e, 0xc1, 0x6b, 0x84, 0xe1, 0xce, 0x5e,
	0x8b, 0xcb, 0xf6, 0x2b, 0x4f, 0x46, 0xcf, 0x97, 0xc9, 0x9b, 0xe1, 0x3c, 0x2d, 0x73, 0x16, 0x5d,
	0x23, 0xf5, 0xef, 0x7b, 0x11, 0x5d, 0xb3, 0xf5, 0x9a, 0x1d, 0x1f, 0x36, 0xdd, 0x9b, 0x9f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x85, 0x65, 0xf2, 0x5d, 0x5d, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BootLockboxServiceClient is the client API for BootLockboxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BootLockboxServiceClient interface {
	// New logs into a Chrome session as a fake user. Close must be called later
	// to clean up the associated resources.
	New(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Close releases the resources obtained by New.
	Close(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Reads a value from Boot Lockbox.
	Read(ctx context.Context, in *ReadBootLockboxRequest, opts ...grpc.CallOption) (*ReadBootLockboxResponse, error)
	// Stores a value to Boot Lockbox.
	Store(ctx context.Context, in *StoreBootLockboxRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type bootLockboxServiceClient struct {
	cc *grpc.ClientConn
}

func NewBootLockboxServiceClient(cc *grpc.ClientConn) BootLockboxServiceClient {
	return &bootLockboxServiceClient{cc}
}

func (c *bootLockboxServiceClient) New(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.security.BootLockboxService/New", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootLockboxServiceClient) Close(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.security.BootLockboxService/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootLockboxServiceClient) Read(ctx context.Context, in *ReadBootLockboxRequest, opts ...grpc.CallOption) (*ReadBootLockboxResponse, error) {
	out := new(ReadBootLockboxResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.security.BootLockboxService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootLockboxServiceClient) Store(ctx context.Context, in *StoreBootLockboxRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.security.BootLockboxService/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BootLockboxServiceServer is the server API for BootLockboxService service.
type BootLockboxServiceServer interface {
	// New logs into a Chrome session as a fake user. Close must be called later
	// to clean up the associated resources.
	New(context.Context, *empty.Empty) (*empty.Empty, error)
	// Close releases the resources obtained by New.
	Close(context.Context, *empty.Empty) (*empty.Empty, error)
	// Reads a value from Boot Lockbox.
	Read(context.Context, *ReadBootLockboxRequest) (*ReadBootLockboxResponse, error)
	// Stores a value to Boot Lockbox.
	Store(context.Context, *StoreBootLockboxRequest) (*empty.Empty, error)
}

// UnimplementedBootLockboxServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBootLockboxServiceServer struct {
}

func (*UnimplementedBootLockboxServiceServer) New(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method New not implemented")
}
func (*UnimplementedBootLockboxServiceServer) Close(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedBootLockboxServiceServer) Read(ctx context.Context, req *ReadBootLockboxRequest) (*ReadBootLockboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedBootLockboxServiceServer) Store(ctx context.Context, req *StoreBootLockboxRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}

func RegisterBootLockboxServiceServer(s *grpc.Server, srv BootLockboxServiceServer) {
	s.RegisterService(&_BootLockboxService_serviceDesc, srv)
}

func _BootLockboxService_New_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootLockboxServiceServer).New(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.security.BootLockboxService/New",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootLockboxServiceServer).New(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BootLockboxService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootLockboxServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.security.BootLockboxService/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootLockboxServiceServer).Close(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BootLockboxService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadBootLockboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootLockboxServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.security.BootLockboxService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootLockboxServiceServer).Read(ctx, req.(*ReadBootLockboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BootLockboxService_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreBootLockboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootLockboxServiceServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.security.BootLockboxService/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootLockboxServiceServer).Store(ctx, req.(*StoreBootLockboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BootLockboxService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.security.BootLockboxService",
	HandlerType: (*BootLockboxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "New",
			Handler:    _BootLockboxService_New_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _BootLockboxService_Close_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _BootLockboxService_Read_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _BootLockboxService_Store_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "boot_lockbox_service.proto",
}
