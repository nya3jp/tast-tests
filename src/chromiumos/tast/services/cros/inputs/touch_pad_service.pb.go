// Code generated by protoc-gen-go. DO NOT EDIT.
// source: touch_pad_service.proto

package inputs

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ReadEvtestTouchPadRequest sets the timeout for detection on the touch pad.
type ReadEvtestTouchpadRequest struct {
	Duration             uint32   `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadEvtestTouchpadRequest) Reset()         { *m = ReadEvtestTouchpadRequest{} }
func (m *ReadEvtestTouchpadRequest) String() string { return proto.CompactTextString(m) }
func (*ReadEvtestTouchpadRequest) ProtoMessage()    {}
func (*ReadEvtestTouchpadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a275744a33c3184a, []int{0}
}

func (m *ReadEvtestTouchpadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadEvtestTouchpadRequest.Unmarshal(m, b)
}
func (m *ReadEvtestTouchpadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadEvtestTouchpadRequest.Marshal(b, m, deterministic)
}
func (m *ReadEvtestTouchpadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadEvtestTouchpadRequest.Merge(m, src)
}
func (m *ReadEvtestTouchpadRequest) XXX_Size() int {
	return xxx_messageInfo_ReadEvtestTouchpadRequest.Size(m)
}
func (m *ReadEvtestTouchpadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadEvtestTouchpadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadEvtestTouchpadRequest proto.InternalMessageInfo

func (m *ReadEvtestTouchpadRequest) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

// ReadEvtestTouchPadResponse returns a bool value to indicate whether any touch pad action is received by evtest.
type ReadEvtestTouchpadResponse struct {
	TpEventDetected      bool     `protobuf:"varint,1,opt,name=tp_event_detected,json=tpEventDetected,proto3" json:"tp_event_detected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadEvtestTouchpadResponse) Reset()         { *m = ReadEvtestTouchpadResponse{} }
func (m *ReadEvtestTouchpadResponse) String() string { return proto.CompactTextString(m) }
func (*ReadEvtestTouchpadResponse) ProtoMessage()    {}
func (*ReadEvtestTouchpadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a275744a33c3184a, []int{1}
}

func (m *ReadEvtestTouchpadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadEvtestTouchpadResponse.Unmarshal(m, b)
}
func (m *ReadEvtestTouchpadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadEvtestTouchpadResponse.Marshal(b, m, deterministic)
}
func (m *ReadEvtestTouchpadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadEvtestTouchpadResponse.Merge(m, src)
}
func (m *ReadEvtestTouchpadResponse) XXX_Size() int {
	return xxx_messageInfo_ReadEvtestTouchpadResponse.Size(m)
}
func (m *ReadEvtestTouchpadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadEvtestTouchpadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReadEvtestTouchpadResponse proto.InternalMessageInfo

func (m *ReadEvtestTouchpadResponse) GetTpEventDetected() bool {
	if m != nil {
		return m.TpEventDetected
	}
	return false
}

func init() {
	proto.RegisterType((*ReadEvtestTouchpadRequest)(nil), "tast.cros.inputs.ReadEvtestTouchpadRequest")
	proto.RegisterType((*ReadEvtestTouchpadResponse)(nil), "tast.cros.inputs.ReadEvtestTouchpadResponse")
}

func init() { proto.RegisterFile("touch_pad_service.proto", fileDescriptor_a275744a33c3184a) }

var fileDescriptor_a275744a33c3184a = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x4f, 0x4b, 0xf3, 0x40,
	0x10, 0x87, 0xdb, 0xf7, 0xf0, 0x52, 0x57, 0x4a, 0x75, 0x0f, 0xfe, 0x89, 0x17, 0x09, 0x22, 0xa2,
	0xb2, 0x0b, 0x7a, 0xf0, 0x24, 0xa2, 0x35, 0xe0, 0xc9, 0x43, 0xf4, 0xe4, 0x25, 0xa4, 0xd9, 0xb1,
	0x0d, 0x34, 0x99, 0x6d, 0x66, 0x36, 0xc5, 0x4f, 0xe8, 0xd7, 0x92, 0x4d, 0xda, 0x1e, 0xd4, 0x82,
	0xf4, 0xb8, 0xb3, 0x33, 0x0f, 0xf3, 0xfc, 0x76, 0xc5, 0x3e, 0xa3, 0xcb, 0x26, 0x89, 0x4d, 0x4d,
	0x42, 0x50, 0xd5, 0x79, 0x06, 0xca, 0x56, 0xc8, 0x28, 0x77, 0x38, 0x25, 0x56, 0x59, 0x85, 0xa4,
	0xf2, 0xd2, 0x3a, 0xa6, 0xe0, 0x68, 0x8c, 0x38, 0x9e, 0x82, 0x6e, 0xee, 0x47, 0xee, 0x5d, 0x43,
	0x61, 0xf9, 0xa3, 0x6d, 0x0f, 0x6f, 0xc4, 0x61, 0x0c, 0xa9, 0x89, 0x6a, 0x06, 0xe2, 0x57, 0xcf,
	0xb4, 0xa9, 0x89, 0x61, 0xe6, 0x80, 0x58, 0x06, 0xa2, 0x67, 0x5c, 0x95, 0x72, 0x8e, 0xe5, 0x41,
	0xf7, 0xb8, 0x7b, 0xd6, 0x8f, 0x57, 0xe7, 0xf0, 0x49, 0x04, 0xbf, 0x0d, 0x92, 0xc5, 0x92, 0x40,
	0x9e, 0x8b, 0x5d, 0xb6, 0x09, 0xd4, 0x50, 0x72, 0x62, 0x80, 0x21, 0x63, 0x30, 0x0d, 0xa2, 0x17,
	0x0f, 0xd8, 0x46, 0xbe, 0xfe, 0xb8, 0x28, 0x5f, 0x7d, 0xfe, 0x13, 0x83, 0x25, 0xe0, 0xa5, 0x75,
	0x91, 0xb7, 0x62, 0xeb, 0x19, 0xe6, 0xc3, 0x49, 0x85, 0x05, 0xc8, 0x3d, 0xd5, 0x1a, 0xa8, 0xa5,
	0x81, 0x8a, 0xbc, 0x41, 0xb0, 0xa6, 0x1e, 0x76, 0xe4, 0x9d, 0xd8, 0x1e, 0x4e, 0x91, 0x60, 0x63,
	0xc0, 0xbd, 0xe8, 0xaf, 0x56, 0x9a, 0xe7, 0x76, 0x13, 0xc4, 0x4c, 0xc8, 0x9f, 0x01, 0xc9, 0x0b,
	0xf5, 0xfd, 0x7d, 0xd4, 0xda, 0xfc, 0x83, 0xcb, 0xbf, 0x35, 0xb7, 0x99, 0x87, 0x9d, 0x87, 0xd3,
	0xb7, 0x93, 0xcc, 0x1b, 0xe7, 0xae, 0x40, 0xd2, 0x7e, 0x56, 0x2f, 0x3e, 0x07, 0x69, 0x0f, 0xd1,
	0x2d, 0x64, 0xf4, 0xbf, 0x59, 0xf6, 0xfa, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x74, 0xdd, 0xb5,
	0x45, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TouchpadServiceClient is the client API for TouchpadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TouchpadServiceClient interface {
	// NewChrome logs into a Chrome session as a fake user. CloseChrome must be called later
	// to clean up the associated resources.
	NewChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// CloseChrome releases the resources obtained by NewChrome.
	CloseChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// touchpadSwipe injects a swipe event to the touchpad.
	TouchpadSwipe(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// ReadEvtestTouchPad reads from the evtest output and decodes the touchpad actions that evtest receives.
	ReadEvtestTouchpad(ctx context.Context, in *ReadEvtestTouchpadRequest, opts ...grpc.CallOption) (*ReadEvtestTouchpadResponse, error)
}

type touchpadServiceClient struct {
	cc *grpc.ClientConn
}

func NewTouchpadServiceClient(cc *grpc.ClientConn) TouchpadServiceClient {
	return &touchpadServiceClient{cc}
}

func (c *touchpadServiceClient) NewChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.inputs.TouchpadService/NewChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *touchpadServiceClient) CloseChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.inputs.TouchpadService/CloseChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *touchpadServiceClient) TouchpadSwipe(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.inputs.TouchpadService/TouchpadSwipe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *touchpadServiceClient) ReadEvtestTouchpad(ctx context.Context, in *ReadEvtestTouchpadRequest, opts ...grpc.CallOption) (*ReadEvtestTouchpadResponse, error) {
	out := new(ReadEvtestTouchpadResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.inputs.TouchpadService/ReadEvtestTouchpad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TouchpadServiceServer is the server API for TouchpadService service.
type TouchpadServiceServer interface {
	// NewChrome logs into a Chrome session as a fake user. CloseChrome must be called later
	// to clean up the associated resources.
	NewChrome(context.Context, *empty.Empty) (*empty.Empty, error)
	// CloseChrome releases the resources obtained by NewChrome.
	CloseChrome(context.Context, *empty.Empty) (*empty.Empty, error)
	// touchpadSwipe injects a swipe event to the touchpad.
	TouchpadSwipe(context.Context, *empty.Empty) (*empty.Empty, error)
	// ReadEvtestTouchPad reads from the evtest output and decodes the touchpad actions that evtest receives.
	ReadEvtestTouchpad(context.Context, *ReadEvtestTouchpadRequest) (*ReadEvtestTouchpadResponse, error)
}

// UnimplementedTouchpadServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTouchpadServiceServer struct {
}

func (*UnimplementedTouchpadServiceServer) NewChrome(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewChrome not implemented")
}
func (*UnimplementedTouchpadServiceServer) CloseChrome(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseChrome not implemented")
}
func (*UnimplementedTouchpadServiceServer) TouchpadSwipe(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TouchpadSwipe not implemented")
}
func (*UnimplementedTouchpadServiceServer) ReadEvtestTouchpad(ctx context.Context, req *ReadEvtestTouchpadRequest) (*ReadEvtestTouchpadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadEvtestTouchpad not implemented")
}

func RegisterTouchpadServiceServer(s *grpc.Server, srv TouchpadServiceServer) {
	s.RegisterService(&_TouchpadService_serviceDesc, srv)
}

func _TouchpadService_NewChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TouchpadServiceServer).NewChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.inputs.TouchpadService/NewChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TouchpadServiceServer).NewChrome(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TouchpadService_CloseChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TouchpadServiceServer).CloseChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.inputs.TouchpadService/CloseChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TouchpadServiceServer).CloseChrome(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TouchpadService_TouchpadSwipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TouchpadServiceServer).TouchpadSwipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.inputs.TouchpadService/TouchpadSwipe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TouchpadServiceServer).TouchpadSwipe(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TouchpadService_ReadEvtestTouchpad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadEvtestTouchpadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TouchpadServiceServer).ReadEvtestTouchpad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.inputs.TouchpadService/ReadEvtestTouchpad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TouchpadServiceServer).ReadEvtestTouchpad(ctx, req.(*ReadEvtestTouchpadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TouchpadService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.inputs.TouchpadService",
	HandlerType: (*TouchpadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewChrome",
			Handler:    _TouchpadService_NewChrome_Handler,
		},
		{
			MethodName: "CloseChrome",
			Handler:    _TouchpadService_CloseChrome_Handler,
		},
		{
			MethodName: "TouchpadSwipe",
			Handler:    _TouchpadService_TouchpadSwipe_Handler,
		},
		{
			MethodName: "ReadEvtestTouchpad",
			Handler:    _TouchpadService_ReadEvtestTouchpad_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "touch_pad_service.proto",
}
