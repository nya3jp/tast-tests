// Code generated by protoc-gen-go. DO NOT EDIT.
// source: touch_screen_service.proto

package inputs

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// FindPhysicalTouchscreenResponse provides the path to /dev/input/event* for a physical trackscreen.
type FindPhysicalTouchscreenResponse struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindPhysicalTouchscreenResponse) Reset()         { *m = FindPhysicalTouchscreenResponse{} }
func (m *FindPhysicalTouchscreenResponse) String() string { return proto.CompactTextString(m) }
func (*FindPhysicalTouchscreenResponse) ProtoMessage()    {}
func (*FindPhysicalTouchscreenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_648c25399346cfa8, []int{0}
}

func (m *FindPhysicalTouchscreenResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindPhysicalTouchscreenResponse.Unmarshal(m, b)
}
func (m *FindPhysicalTouchscreenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindPhysicalTouchscreenResponse.Marshal(b, m, deterministic)
}
func (m *FindPhysicalTouchscreenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindPhysicalTouchscreenResponse.Merge(m, src)
}
func (m *FindPhysicalTouchscreenResponse) XXX_Size() int {
	return xxx_messageInfo_FindPhysicalTouchscreenResponse.Size(m)
}
func (m *FindPhysicalTouchscreenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindPhysicalTouchscreenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindPhysicalTouchscreenResponse proto.InternalMessageInfo

func (m *FindPhysicalTouchscreenResponse) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func init() {
	proto.RegisterType((*FindPhysicalTouchscreenResponse)(nil), "tast.cros.inputs.FindPhysicalTouchscreenResponse")
}

func init() { proto.RegisterFile("touch_screen_service.proto", fileDescriptor_648c25399346cfa8) }

var fileDescriptor_648c25399346cfa8 = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0x5b, 0x11, 0xa1, 0x11, 0x44, 0xe6, 0xa0, 0xb2, 0x1e, 0x94, 0x45, 0xc4, 0xd3, 0x04,
	0x15, 0x8f, 0x22, 0xb4, 0xe8, 0x51, 0xa4, 0xf6, 0xe4, 0xa5, 0x6c, 0xe3, 0xb4, 0x1b, 0xd8, 0xdd,
	0x09, 0x99, 0xac, 0xd2, 0xb7, 0xf3, 0xd1, 0x24, 0x1b, 0x85, 0x22, 0x2c, 0xa2, 0xb7, 0x90, 0x99,
	0x7c, 0xff, 0x37, 0x13, 0x95, 0x05, 0x6e, 0x4d, 0x39, 0x17, 0xe3, 0x89, 0x9a, 0xb9, 0x90, 0x7f,
	0xb3, 0x86, 0xd0, 0x79, 0x0e, 0x0c, 0xfb, 0xa1, 0x90, 0x80, 0xc6, 0xb3, 0xa0, 0x6d, 0x5c, 0x1b,
	0x24, 0x3b, 0x5e, 0x31, 0xaf, 0x2a, 0xd2, 0x5d, 0x7d, 0xd1, 0x2e, 0x35, 0xd5, 0x2e, 0xac, 0x53,
	0x7b, 0x7e, 0xa3, 0x4e, 0x1e, 0x6c, 0xf3, 0xfa, 0x54, 0xae, 0xc5, 0x9a, 0xa2, 0x9a, 0x45, 0x70,
	0xe2, 0x4e, 0x49, 0x1c, 0x37, 0x42, 0x00, 0x6a, 0xdb, 0x15, 0xa1, 0x3c, 0x1a, 0x9e, 0x0e, 0x2f,
	0x46, 0xd3, 0xee, 0x7c, 0xf5, 0xb1, 0xa5, 0x60, 0xa3, 0xf7, 0x39, 0x29, 0xc0, 0xad, 0x1a, 0x3d,
	0xd2, 0xfb, 0xa4, 0xf4, 0x5c, 0x13, 0x1c, 0x60, 0x0a, 0xc6, 0xef, 0x60, 0xbc, 0x8f, 0xc1, 0x59,
	0xcf, 0x7d, 0x3e, 0x80, 0x3b, 0xb5, 0x3b, 0xa9, 0x58, 0xe8, 0xdf, 0x80, 0xa5, 0x3a, 0xec, 0x99,
	0xa6, 0x17, 0x76, 0x89, 0x3f, 0x17, 0x86, 0xbf, 0x2c, 0x24, 0x1f, 0xc0, 0x58, 0xed, 0x6d, 0x14,
	0x66, 0x85, 0xfb, 0xbb, 0xeb, 0xf8, 0xfc, 0xe5, 0xcc, 0xc4, 0x39, 0x6d, 0x5b, 0xb3, 0xe8, 0x28,
	0xa1, 0xbf, 0x7e, 0x52, 0x74, 0xb4, 0xd1, 0xc9, 0x66, 0xb1, 0xd3, 0xbd, 0xbc, 0xfe, 0x0c, 0x00,
	0x00, 0xff, 0xff, 0xf5, 0xe9, 0x66, 0x5c, 0xf5, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TouchscreenServiceClient is the client API for TouchscreenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TouchscreenServiceClient interface {
	// NewChrome logs into a Chrome session as a fake user. CloseChrome must be called later
	// to clean up the associated resources.
	NewChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// CloseChrome releases the resources obtained by NewChrome.
	CloseChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// FindPhysicalTouchscreen finds /dev/input/event* file for a physical touchscreen.
	FindPhysicalTouchscreen(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FindPhysicalTouchscreenResponse, error)
	// TouchscreenTap injects a tap event to the touch screen.
	TouchscreenTap(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type touchscreenServiceClient struct {
	cc *grpc.ClientConn
}

func NewTouchscreenServiceClient(cc *grpc.ClientConn) TouchscreenServiceClient {
	return &touchscreenServiceClient{cc}
}

func (c *touchscreenServiceClient) NewChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.inputs.TouchscreenService/NewChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *touchscreenServiceClient) CloseChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.inputs.TouchscreenService/CloseChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *touchscreenServiceClient) FindPhysicalTouchscreen(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FindPhysicalTouchscreenResponse, error) {
	out := new(FindPhysicalTouchscreenResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.inputs.TouchscreenService/FindPhysicalTouchscreen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *touchscreenServiceClient) TouchscreenTap(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.inputs.TouchscreenService/TouchscreenTap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TouchscreenServiceServer is the server API for TouchscreenService service.
type TouchscreenServiceServer interface {
	// NewChrome logs into a Chrome session as a fake user. CloseChrome must be called later
	// to clean up the associated resources.
	NewChrome(context.Context, *empty.Empty) (*empty.Empty, error)
	// CloseChrome releases the resources obtained by NewChrome.
	CloseChrome(context.Context, *empty.Empty) (*empty.Empty, error)
	// FindPhysicalTouchscreen finds /dev/input/event* file for a physical touchscreen.
	FindPhysicalTouchscreen(context.Context, *empty.Empty) (*FindPhysicalTouchscreenResponse, error)
	// TouchscreenTap injects a tap event to the touch screen.
	TouchscreenTap(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedTouchscreenServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTouchscreenServiceServer struct {
}

func (*UnimplementedTouchscreenServiceServer) NewChrome(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewChrome not implemented")
}
func (*UnimplementedTouchscreenServiceServer) CloseChrome(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseChrome not implemented")
}
func (*UnimplementedTouchscreenServiceServer) FindPhysicalTouchscreen(ctx context.Context, req *empty.Empty) (*FindPhysicalTouchscreenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPhysicalTouchscreen not implemented")
}
func (*UnimplementedTouchscreenServiceServer) TouchscreenTap(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TouchscreenTap not implemented")
}

func RegisterTouchscreenServiceServer(s *grpc.Server, srv TouchscreenServiceServer) {
	s.RegisterService(&_TouchscreenService_serviceDesc, srv)
}

func _TouchscreenService_NewChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TouchscreenServiceServer).NewChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.inputs.TouchscreenService/NewChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TouchscreenServiceServer).NewChrome(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TouchscreenService_CloseChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TouchscreenServiceServer).CloseChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.inputs.TouchscreenService/CloseChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TouchscreenServiceServer).CloseChrome(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TouchscreenService_FindPhysicalTouchscreen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TouchscreenServiceServer).FindPhysicalTouchscreen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.inputs.TouchscreenService/FindPhysicalTouchscreen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TouchscreenServiceServer).FindPhysicalTouchscreen(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TouchscreenService_TouchscreenTap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TouchscreenServiceServer).TouchscreenTap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.inputs.TouchscreenService/TouchscreenTap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TouchscreenServiceServer).TouchscreenTap(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _TouchscreenService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.inputs.TouchscreenService",
	HandlerType: (*TouchscreenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewChrome",
			Handler:    _TouchscreenService_NewChrome_Handler,
		},
		{
			MethodName: "CloseChrome",
			Handler:    _TouchscreenService_CloseChrome_Handler,
		},
		{
			MethodName: "FindPhysicalTouchscreen",
			Handler:    _TouchscreenService_FindPhysicalTouchscreen_Handler,
		},
		{
			MethodName: "TouchscreenTap",
			Handler:    _TouchscreenService_TouchscreenTap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "touch_screen_service.proto",
}
