// Copyright 2022 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: keyboard_service.proto

package inputs

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *TypeRequest) Reset() {
	*x = TypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyboard_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeRequest) ProtoMessage() {}

func (x *TypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keyboard_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeRequest.ProtoReflect.Descriptor instead.
func (*TypeRequest) Descriptor() ([]byte, []int) {
	return file_keyboard_service_proto_rawDescGZIP(), []int{0}
}

func (x *TypeRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type AccelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *AccelRequest) Reset() {
	*x = AccelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyboard_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccelRequest) ProtoMessage() {}

func (x *AccelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keyboard_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccelRequest.ProtoReflect.Descriptor instead.
func (*AccelRequest) Descriptor() ([]byte, []int) {
	return file_keyboard_service_proto_rawDescGZIP(), []int{1}
}

func (x *AccelRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type AccelPressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *AccelPressRequest) Reset() {
	*x = AccelPressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyboard_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccelPressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccelPressRequest) ProtoMessage() {}

func (x *AccelPressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keyboard_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccelPressRequest.ProtoReflect.Descriptor instead.
func (*AccelPressRequest) Descriptor() ([]byte, []int) {
	return file_keyboard_service_proto_rawDescGZIP(), []int{2}
}

func (x *AccelPressRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type AccelReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *AccelReleaseRequest) Reset() {
	*x = AccelReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyboard_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccelReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccelReleaseRequest) ProtoMessage() {}

func (x *AccelReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keyboard_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccelReleaseRequest.ProtoReflect.Descriptor instead.
func (*AccelReleaseRequest) Descriptor() ([]byte, []int) {
	return file_keyboard_service_proto_rawDescGZIP(), []int{3}
}

func (x *AccelReleaseRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

var File_keyboard_service_proto protoreflect.FileDescriptor

var file_keyboard_service_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x2e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x20, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x25, 0x0a, 0x11, 0x41, 0x63,
	0x63, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x22, 0x27, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x32, 0xb3, 0x02, 0x0a, 0x0f, 0x4b,
	0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72,
	0x6f, 0x73, 0x2e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x41, 0x0a, 0x05, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x12, 0x1e, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x2e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x23, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x4f, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12,
	0x25, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x42, 0x26, 0x5a, 0x24, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74,
	0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f,
	0x73, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_keyboard_service_proto_rawDescOnce sync.Once
	file_keyboard_service_proto_rawDescData = file_keyboard_service_proto_rawDesc
)

func file_keyboard_service_proto_rawDescGZIP() []byte {
	file_keyboard_service_proto_rawDescOnce.Do(func() {
		file_keyboard_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_keyboard_service_proto_rawDescData)
	})
	return file_keyboard_service_proto_rawDescData
}

var file_keyboard_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_keyboard_service_proto_goTypes = []interface{}{
	(*TypeRequest)(nil),         // 0: tast.cros.inputs.TypeRequest
	(*AccelRequest)(nil),        // 1: tast.cros.inputs.AccelRequest
	(*AccelPressRequest)(nil),   // 2: tast.cros.inputs.AccelPressRequest
	(*AccelReleaseRequest)(nil), // 3: tast.cros.inputs.AccelReleaseRequest
	(*empty.Empty)(nil),         // 4: google.protobuf.Empty
}
var file_keyboard_service_proto_depIdxs = []int32{
	0, // 0: tast.cros.inputs.KeyboardService.Type:input_type -> tast.cros.inputs.TypeRequest
	1, // 1: tast.cros.inputs.KeyboardService.Accel:input_type -> tast.cros.inputs.AccelRequest
	2, // 2: tast.cros.inputs.KeyboardService.AccelPress:input_type -> tast.cros.inputs.AccelPressRequest
	3, // 3: tast.cros.inputs.KeyboardService.AccelRelease:input_type -> tast.cros.inputs.AccelReleaseRequest
	4, // 4: tast.cros.inputs.KeyboardService.Type:output_type -> google.protobuf.Empty
	4, // 5: tast.cros.inputs.KeyboardService.Accel:output_type -> google.protobuf.Empty
	4, // 6: tast.cros.inputs.KeyboardService.AccelPress:output_type -> google.protobuf.Empty
	4, // 7: tast.cros.inputs.KeyboardService.AccelRelease:output_type -> google.protobuf.Empty
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_keyboard_service_proto_init() }
func file_keyboard_service_proto_init() {
	if File_keyboard_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_keyboard_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyboard_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyboard_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccelPressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyboard_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccelReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_keyboard_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_keyboard_service_proto_goTypes,
		DependencyIndexes: file_keyboard_service_proto_depIdxs,
		MessageInfos:      file_keyboard_service_proto_msgTypes,
	}.Build()
	File_keyboard_service_proto = out.File
	file_keyboard_service_proto_rawDesc = nil
	file_keyboard_service_proto_goTypes = nil
	file_keyboard_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KeyboardServiceClient is the client API for KeyboardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeyboardServiceClient interface {
	// Type injects key events suitable for generating the string s.
	// Only characters that can be typed using a QWERTY keyboard are supported,
	// and the current keyboard layout must be QWERTY. The left Shift key is
	// automatically pressed and released for uppercase letters or other
	// characters that can be typed using Shift.
	Type(ctx context.Context, in *TypeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Accel injects a sequence of key events simulating the accelerator (a.k.a.
	// hotkey) described by s being typed.
	// Accelerators are described as a sequence of '+'-separated, case-insensitive
	// key characters or names. In addition to non-whitespace characters that are
	// present on a QWERTY keyboard, the following key names may be used:
	//	Modifiers:     "Ctrl", "Alt", "Search", "Shift"
	//	Whitespace:    "Enter", "Space", "Tab", "Backspace"
	//	Function keys: "F1", "F2", ..., "F12"
	// "Shift" must be included for keys that are typed using Shift; for example,
	// use "Ctrl+Shift+/" rather than "Ctrl+?".
	Accel(ctx context.Context, in *AccelRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// AccelPress injects a sequence of key events simulating pressing the
	// accelerator (a.k.a. hotkey) described by s.
	AccelPress(ctx context.Context, in *AccelPressRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// AccelRelease injects a sequence of key events simulating release the
	// accelerator (a.k.a. hotkey) described by s.
	AccelRelease(ctx context.Context, in *AccelReleaseRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type keyboardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyboardServiceClient(cc grpc.ClientConnInterface) KeyboardServiceClient {
	return &keyboardServiceClient{cc}
}

func (c *keyboardServiceClient) Type(ctx context.Context, in *TypeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.inputs.KeyboardService/Type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyboardServiceClient) Accel(ctx context.Context, in *AccelRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.inputs.KeyboardService/Accel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyboardServiceClient) AccelPress(ctx context.Context, in *AccelPressRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.inputs.KeyboardService/AccelPress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyboardServiceClient) AccelRelease(ctx context.Context, in *AccelReleaseRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.inputs.KeyboardService/AccelRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyboardServiceServer is the server API for KeyboardService service.
type KeyboardServiceServer interface {
	// Type injects key events suitable for generating the string s.
	// Only characters that can be typed using a QWERTY keyboard are supported,
	// and the current keyboard layout must be QWERTY. The left Shift key is
	// automatically pressed and released for uppercase letters or other
	// characters that can be typed using Shift.
	Type(context.Context, *TypeRequest) (*empty.Empty, error)
	// Accel injects a sequence of key events simulating the accelerator (a.k.a.
	// hotkey) described by s being typed.
	// Accelerators are described as a sequence of '+'-separated, case-insensitive
	// key characters or names. In addition to non-whitespace characters that are
	// present on a QWERTY keyboard, the following key names may be used:
	//	Modifiers:     "Ctrl", "Alt", "Search", "Shift"
	//	Whitespace:    "Enter", "Space", "Tab", "Backspace"
	//	Function keys: "F1", "F2", ..., "F12"
	// "Shift" must be included for keys that are typed using Shift; for example,
	// use "Ctrl+Shift+/" rather than "Ctrl+?".
	Accel(context.Context, *AccelRequest) (*empty.Empty, error)
	// AccelPress injects a sequence of key events simulating pressing the
	// accelerator (a.k.a. hotkey) described by s.
	AccelPress(context.Context, *AccelPressRequest) (*empty.Empty, error)
	// AccelRelease injects a sequence of key events simulating release the
	// accelerator (a.k.a. hotkey) described by s.
	AccelRelease(context.Context, *AccelReleaseRequest) (*empty.Empty, error)
}

// UnimplementedKeyboardServiceServer can be embedded to have forward compatible implementations.
type UnimplementedKeyboardServiceServer struct {
}

func (*UnimplementedKeyboardServiceServer) Type(context.Context, *TypeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Type not implemented")
}
func (*UnimplementedKeyboardServiceServer) Accel(context.Context, *AccelRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accel not implemented")
}
func (*UnimplementedKeyboardServiceServer) AccelPress(context.Context, *AccelPressRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccelPress not implemented")
}
func (*UnimplementedKeyboardServiceServer) AccelRelease(context.Context, *AccelReleaseRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccelRelease not implemented")
}

func RegisterKeyboardServiceServer(s *grpc.Server, srv KeyboardServiceServer) {
	s.RegisterService(&_KeyboardService_serviceDesc, srv)
}

func _KeyboardService_Type_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyboardServiceServer).Type(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.inputs.KeyboardService/Type",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyboardServiceServer).Type(ctx, req.(*TypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyboardService_Accel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyboardServiceServer).Accel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.inputs.KeyboardService/Accel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyboardServiceServer).Accel(ctx, req.(*AccelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyboardService_AccelPress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccelPressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyboardServiceServer).AccelPress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.inputs.KeyboardService/AccelPress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyboardServiceServer).AccelPress(ctx, req.(*AccelPressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyboardService_AccelRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccelReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyboardServiceServer).AccelRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.inputs.KeyboardService/AccelRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyboardServiceServer).AccelRelease(ctx, req.(*AccelReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyboardService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.inputs.KeyboardService",
	HandlerType: (*KeyboardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Type",
			Handler:    _KeyboardService_Type_Handler,
		},
		{
			MethodName: "Accel",
			Handler:    _KeyboardService_Accel_Handler,
		},
		{
			MethodName: "AccelPress",
			Handler:    _KeyboardService_AccelPress_Handler,
		},
		{
			MethodName: "AccelRelease",
			Handler:    _KeyboardService_AccelRelease_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keyboard_service.proto",
}
