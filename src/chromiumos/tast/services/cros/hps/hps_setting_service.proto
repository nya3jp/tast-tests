syntax = "proto3";

package tast.cros.hps;

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/duration.proto";

option go_package = "chromiumos/tast/services/cros/hps";

// Provides operations on local DUT.
service HpsService {

  // StartUIWithCustomScreenPrivacySetting changes the settings in screen privacy accordingly.
  rpc StartUIWithCustomScreenPrivacySetting(StartUIWithCustomScreenPrivacySettingRequest) returns (google.protobuf.Empty) {}

  // WaitForHps waits for hpsd to be ready, and optionally to finish enabling the requested features.
  // This includes booting the HPS peripheral and potentially flashing its firmware.
  rpc WaitForHps(WaitForHpsRequest) returns (google.protobuf.Empty){}

  // CheckForLockScreen checks if the screen is at lock status.
  rpc CheckForLockScreen(google.protobuf.Empty) returns (google.protobuf.Empty) {}

  // OpenHPSInternalPage opens hps-internal page for debugging purpose.
  rpc OpenHPSInternalsPage(google.protobuf.Empty) returns (google.protobuf.Empty){}

  // DimMetrics gets the quick dim/lock delays after the lol is enabled/disabled.
  rpc RetrieveDimMetrics(google.protobuf.BoolValue) returns (RetrieveDimMetricsResponse){}

  // RetrieveHpsSenseSignal gets current HpsSenseSignal from powerd.
  rpc RetrieveHpsSenseSignal(google.protobuf.Empty) returns (HpsSenseSignalResponse) {}

  // CheckSPAEyeIcon checks if the eye icon is at the right bottom side of the screen when there is spa alert.
  rpc CheckSPAEyeIcon(google.protobuf.Empty) returns (google.protobuf.BoolValue) {}

}

message StartUIWithCustomScreenPrivacySettingRequest {
  string setting = 1;  // Option being "Lock on Leave" or "Viewing protection".
  bool enable = 2;
}

// Note that the HPS D-Bus method names use the older terminology:
// "sense" = presence detection, for "Lock on leave" functionality
// "notify" = second person detection, for "Viewing protection" functionality
message WaitForHpsRequest {
  bool wait_for_sense = 1;   // Also wait for HPS to enable feature 0 ("sense")
  bool wait_for_notify = 2;  // Also wait for HPS to enable feature 1 ("notify")
}

message RetrieveDimMetricsResponse {
	google.protobuf.Duration dimDelay = 1;
	google.protobuf.Duration screenOffDelay = 2;
	google.protobuf.Duration lockDelay = 3;
}

message HpsSenseSignalResponse {
  string raw_value = 1;
}
