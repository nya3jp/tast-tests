// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: hps_setting_service.proto

package hps

import (
	context "context"
	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StartUIWithCustomScreenPrivacySettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Setting string `protobuf:"bytes,1,opt,name=setting,proto3" json:"setting,omitempty"` // Option being "Lock on Leave" or "Viewing protection".
	Enable  bool   `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *StartUIWithCustomScreenPrivacySettingRequest) Reset() {
	*x = StartUIWithCustomScreenPrivacySettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hps_setting_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartUIWithCustomScreenPrivacySettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartUIWithCustomScreenPrivacySettingRequest) ProtoMessage() {}

func (x *StartUIWithCustomScreenPrivacySettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hps_setting_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartUIWithCustomScreenPrivacySettingRequest.ProtoReflect.Descriptor instead.
func (*StartUIWithCustomScreenPrivacySettingRequest) Descriptor() ([]byte, []int) {
	return file_hps_setting_service_proto_rawDescGZIP(), []int{0}
}

func (x *StartUIWithCustomScreenPrivacySettingRequest) GetSetting() string {
	if x != nil {
		return x.Setting
	}
	return ""
}

func (x *StartUIWithCustomScreenPrivacySettingRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type DimSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DimDelay       *duration.Duration `protobuf:"bytes,2,opt,name=dimDelay,proto3" json:"dimDelay,omitempty"`
	ScreenOffDelay *duration.Duration `protobuf:"bytes,3,opt,name=screenOffDelay,proto3" json:"screenOffDelay,omitempty"`
	LockDelay      *duration.Duration `protobuf:"bytes,4,opt,name=lockDelay,proto3" json:"lockDelay,omitempty"`
}

func (x *DimSettings) Reset() {
	*x = DimSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hps_setting_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DimSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DimSettings) ProtoMessage() {}

func (x *DimSettings) ProtoReflect() protoreflect.Message {
	mi := &file_hps_setting_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DimSettings.ProtoReflect.Descriptor instead.
func (*DimSettings) Descriptor() ([]byte, []int) {
	return file_hps_setting_service_proto_rawDescGZIP(), []int{1}
}

func (x *DimSettings) GetDimDelay() *duration.Duration {
	if x != nil {
		return x.DimDelay
	}
	return nil
}

func (x *DimSettings) GetScreenOffDelay() *duration.Duration {
	if x != nil {
		return x.ScreenOffDelay
	}
	return nil
}

func (x *DimSettings) GetLockDelay() *duration.Duration {
	if x != nil {
		return x.LockDelay
	}
	return nil
}

var File_hps_setting_service_proto protoreflect.FileDescriptor

var file_hps_setting_service_proto_rawDesc = []byte{
	0x0a, 0x19, 0x68, 0x70, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x74, 0x61, 0x73,
	0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x68, 0x70, 0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x60, 0x0a, 0x2c, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x55, 0x49, 0x57, 0x69, 0x74, 0x68, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x0b, 0x44, 0x69,
	0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x69, 0x6d,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x69, 0x6d, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x12, 0x41, 0x0a, 0x0e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x32, 0xa9, 0x03, 0x0a,
	0x0a, 0x48, 0x70, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7e, 0x0a, 0x25, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x55, 0x49, 0x57, 0x69, 0x74, 0x68, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x2e, 0x68, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x55, 0x49, 0x57, 0x69, 0x74, 0x68,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x57,
	0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x44, 0x62, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x12,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x6e, 0x48, 0x50, 0x53, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x44, 0x69, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1a, 0x2e, 0x74, 0x61, 0x73,
	0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x68, 0x70, 0x73, 0x2e, 0x44, 0x69, 0x6d, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x00, 0x42, 0x23, 0x5a, 0x21, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x68, 0x70, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hps_setting_service_proto_rawDescOnce sync.Once
	file_hps_setting_service_proto_rawDescData = file_hps_setting_service_proto_rawDesc
)

func file_hps_setting_service_proto_rawDescGZIP() []byte {
	file_hps_setting_service_proto_rawDescOnce.Do(func() {
		file_hps_setting_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_hps_setting_service_proto_rawDescData)
	})
	return file_hps_setting_service_proto_rawDescData
}

var file_hps_setting_service_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_hps_setting_service_proto_goTypes = []interface{}{
	(*StartUIWithCustomScreenPrivacySettingRequest)(nil), // 0: tast.cros.hps.StartUIWithCustomScreenPrivacySettingRequest
	(*DimSettings)(nil),        // 1: tast.cros.hps.DimSettings
	(*duration.Duration)(nil),  // 2: google.protobuf.Duration
	(*empty.Empty)(nil),        // 3: google.protobuf.Empty
	(*wrappers.BoolValue)(nil), // 4: google.protobuf.BoolValue
}
var file_hps_setting_service_proto_depIdxs = []int32{
	2, // 0: tast.cros.hps.DimSettings.dimDelay:type_name -> google.protobuf.Duration
	2, // 1: tast.cros.hps.DimSettings.screenOffDelay:type_name -> google.protobuf.Duration
	2, // 2: tast.cros.hps.DimSettings.lockDelay:type_name -> google.protobuf.Duration
	0, // 3: tast.cros.hps.HpsService.StartUIWithCustomScreenPrivacySetting:input_type -> tast.cros.hps.StartUIWithCustomScreenPrivacySettingRequest
	3, // 4: tast.cros.hps.HpsService.WaitForDbus:input_type -> google.protobuf.Empty
	3, // 5: tast.cros.hps.HpsService.CheckForLockScreen:input_type -> google.protobuf.Empty
	3, // 6: tast.cros.hps.HpsService.OpenHPSInternalPage:input_type -> google.protobuf.Empty
	4, // 7: tast.cros.hps.HpsService.GetDimMetrics:input_type -> google.protobuf.BoolValue
	3, // 8: tast.cros.hps.HpsService.StartUIWithCustomScreenPrivacySetting:output_type -> google.protobuf.Empty
	3, // 9: tast.cros.hps.HpsService.WaitForDbus:output_type -> google.protobuf.Empty
	3, // 10: tast.cros.hps.HpsService.CheckForLockScreen:output_type -> google.protobuf.Empty
	3, // 11: tast.cros.hps.HpsService.OpenHPSInternalPage:output_type -> google.protobuf.Empty
	1, // 12: tast.cros.hps.HpsService.GetDimMetrics:output_type -> tast.cros.hps.DimSettings
	8, // [8:13] is the sub-list for method output_type
	3, // [3:8] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_hps_setting_service_proto_init() }
func file_hps_setting_service_proto_init() {
	if File_hps_setting_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hps_setting_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartUIWithCustomScreenPrivacySettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hps_setting_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DimSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hps_setting_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hps_setting_service_proto_goTypes,
		DependencyIndexes: file_hps_setting_service_proto_depIdxs,
		MessageInfos:      file_hps_setting_service_proto_msgTypes,
	}.Build()
	File_hps_setting_service_proto = out.File
	file_hps_setting_service_proto_rawDesc = nil
	file_hps_setting_service_proto_goTypes = nil
	file_hps_setting_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HpsServiceClient is the client API for HpsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HpsServiceClient interface {
	// StartUIWithCustomScreenPrivacySetting changes the settings in screen privacy accordingly.
	StartUIWithCustomScreenPrivacySetting(ctx context.Context, in *StartUIWithCustomScreenPrivacySettingRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// WaitForDbus performs a polling and waits for the firmware being flashed
	WaitForDbus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	//
	CheckForLockScreen(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// OpenHPSInternalPage opens hps-internal page for debugging purpose
	OpenHPSInternalPage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetDelays gets the quick dim/lock delays after the lol is enabled/disabled
	GetDimMetrics(ctx context.Context, in *wrappers.BoolValue, opts ...grpc.CallOption) (*DimSettings, error)
}

type hpsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHpsServiceClient(cc grpc.ClientConnInterface) HpsServiceClient {
	return &hpsServiceClient{cc}
}

func (c *hpsServiceClient) StartUIWithCustomScreenPrivacySetting(ctx context.Context, in *StartUIWithCustomScreenPrivacySettingRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.hps.HpsService/StartUIWithCustomScreenPrivacySetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hpsServiceClient) WaitForDbus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.hps.HpsService/WaitForDbus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hpsServiceClient) CheckForLockScreen(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.hps.HpsService/CheckForLockScreen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hpsServiceClient) OpenHPSInternalPage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.hps.HpsService/OpenHPSInternalPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hpsServiceClient) GetDimMetrics(ctx context.Context, in *wrappers.BoolValue, opts ...grpc.CallOption) (*DimSettings, error) {
	out := new(DimSettings)
	err := c.cc.Invoke(ctx, "/tast.cros.hps.HpsService/GetDimMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HpsServiceServer is the server API for HpsService service.
type HpsServiceServer interface {
	// StartUIWithCustomScreenPrivacySetting changes the settings in screen privacy accordingly.
	StartUIWithCustomScreenPrivacySetting(context.Context, *StartUIWithCustomScreenPrivacySettingRequest) (*empty.Empty, error)
	// WaitForDbus performs a polling and waits for the firmware being flashed
	WaitForDbus(context.Context, *empty.Empty) (*empty.Empty, error)
	//
	CheckForLockScreen(context.Context, *empty.Empty) (*empty.Empty, error)
	// OpenHPSInternalPage opens hps-internal page for debugging purpose
	OpenHPSInternalPage(context.Context, *empty.Empty) (*empty.Empty, error)
	// GetDelays gets the quick dim/lock delays after the lol is enabled/disabled
	GetDimMetrics(context.Context, *wrappers.BoolValue) (*DimSettings, error)
}

// UnimplementedHpsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHpsServiceServer struct {
}

func (*UnimplementedHpsServiceServer) StartUIWithCustomScreenPrivacySetting(context.Context, *StartUIWithCustomScreenPrivacySettingRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartUIWithCustomScreenPrivacySetting not implemented")
}
func (*UnimplementedHpsServiceServer) WaitForDbus(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForDbus not implemented")
}
func (*UnimplementedHpsServiceServer) CheckForLockScreen(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckForLockScreen not implemented")
}
func (*UnimplementedHpsServiceServer) OpenHPSInternalPage(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenHPSInternalPage not implemented")
}
func (*UnimplementedHpsServiceServer) GetDimMetrics(context.Context, *wrappers.BoolValue) (*DimSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDimMetrics not implemented")
}

func RegisterHpsServiceServer(s *grpc.Server, srv HpsServiceServer) {
	s.RegisterService(&_HpsService_serviceDesc, srv)
}

func _HpsService_StartUIWithCustomScreenPrivacySetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartUIWithCustomScreenPrivacySettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpsServiceServer).StartUIWithCustomScreenPrivacySetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hps.HpsService/StartUIWithCustomScreenPrivacySetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpsServiceServer).StartUIWithCustomScreenPrivacySetting(ctx, req.(*StartUIWithCustomScreenPrivacySettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HpsService_WaitForDbus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpsServiceServer).WaitForDbus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hps.HpsService/WaitForDbus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpsServiceServer).WaitForDbus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HpsService_CheckForLockScreen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpsServiceServer).CheckForLockScreen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hps.HpsService/CheckForLockScreen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpsServiceServer).CheckForLockScreen(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HpsService_OpenHPSInternalPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpsServiceServer).OpenHPSInternalPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hps.HpsService/OpenHPSInternalPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpsServiceServer).OpenHPSInternalPage(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HpsService_GetDimMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.BoolValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpsServiceServer).GetDimMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hps.HpsService/GetDimMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpsServiceServer).GetDimMetrics(ctx, req.(*wrappers.BoolValue))
	}
	return interceptor(ctx, in, info, handler)
}

var _HpsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.hps.HpsService",
	HandlerType: (*HpsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartUIWithCustomScreenPrivacySetting",
			Handler:    _HpsService_StartUIWithCustomScreenPrivacySetting_Handler,
		},
		{
			MethodName: "WaitForDbus",
			Handler:    _HpsService_WaitForDbus_Handler,
		},
		{
			MethodName: "CheckForLockScreen",
			Handler:    _HpsService_CheckForLockScreen_Handler,
		},
		{
			MethodName: "OpenHPSInternalPage",
			Handler:    _HpsService_OpenHPSInternalPage_Handler,
		},
		{
			MethodName: "GetDimMetrics",
			Handler:    _HpsService_GetDimMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hps_setting_service.proto",
}
