// Copyright 2022 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: tape.proto

package tape

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SaveGenericAccountInfoToFileRequest stores request parameters to save a generic account to a DUT.
type SaveGenericAccountInfoToFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path     string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *SaveGenericAccountInfoToFileRequest) Reset() {
	*x = SaveGenericAccountInfoToFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tape_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveGenericAccountInfoToFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveGenericAccountInfoToFileRequest) ProtoMessage() {}

func (x *SaveGenericAccountInfoToFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tape_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveGenericAccountInfoToFileRequest.ProtoReflect.Descriptor instead.
func (*SaveGenericAccountInfoToFileRequest) Descriptor() ([]byte, []int) {
	return file_tape_proto_rawDescGZIP(), []int{0}
}

func (x *SaveGenericAccountInfoToFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *SaveGenericAccountInfoToFileRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SaveGenericAccountInfoToFileRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// RemoveGenericAccountInfoRequest stores request parameters required to remove generic account information from a DUT.
type RemoveGenericAccountInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *RemoveGenericAccountInfoRequest) Reset() {
	*x = RemoveGenericAccountInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tape_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveGenericAccountInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveGenericAccountInfoRequest) ProtoMessage() {}

func (x *RemoveGenericAccountInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tape_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveGenericAccountInfoRequest.ProtoReflect.Descriptor instead.
func (*RemoveGenericAccountInfoRequest) Descriptor() ([]byte, []int) {
	return file_tape_proto_rawDescGZIP(), []int{1}
}

func (x *RemoveGenericAccountInfoRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

var File_tape_proto protoreflect.FileDescriptor

var file_tape_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x61, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x74, 0x61,
	0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x74, 0x61, 0x70, 0x65, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x71, 0x0a, 0x23, 0x53, 0x61, 0x76,
	0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x54, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x35, 0x0a, 0x1f,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x32, 0xe3, 0x01, 0x0a, 0x0b, 0x54, 0x61, 0x70, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x1c, 0x53, 0x61, 0x76, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x6f, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x33, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e,
	0x74, 0x61, 0x70, 0x65, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x6f, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x65, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f,
	0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x74, 0x61, 0x70, 0x65, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x24, 0x5a, 0x22, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x74, 0x61, 0x70, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tape_proto_rawDescOnce sync.Once
	file_tape_proto_rawDescData = file_tape_proto_rawDesc
)

func file_tape_proto_rawDescGZIP() []byte {
	file_tape_proto_rawDescOnce.Do(func() {
		file_tape_proto_rawDescData = protoimpl.X.CompressGZIP(file_tape_proto_rawDescData)
	})
	return file_tape_proto_rawDescData
}

var file_tape_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_tape_proto_goTypes = []interface{}{
	(*SaveGenericAccountInfoToFileRequest)(nil), // 0: tast.cros.tape.SaveGenericAccountInfoToFileRequest
	(*RemoveGenericAccountInfoRequest)(nil),     // 1: tast.cros.tape.RemoveGenericAccountInfoRequest
	(*empty.Empty)(nil),                         // 2: google.protobuf.Empty
}
var file_tape_proto_depIdxs = []int32{
	0, // 0: tast.cros.tape.TapeService.SaveGenericAccountInfoToFile:input_type -> tast.cros.tape.SaveGenericAccountInfoToFileRequest
	1, // 1: tast.cros.tape.TapeService.RemoveGenericAccountInfo:input_type -> tast.cros.tape.RemoveGenericAccountInfoRequest
	2, // 2: tast.cros.tape.TapeService.SaveGenericAccountInfoToFile:output_type -> google.protobuf.Empty
	2, // 3: tast.cros.tape.TapeService.RemoveGenericAccountInfo:output_type -> google.protobuf.Empty
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_tape_proto_init() }
func file_tape_proto_init() {
	if File_tape_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tape_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveGenericAccountInfoToFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tape_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveGenericAccountInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tape_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tape_proto_goTypes,
		DependencyIndexes: file_tape_proto_depIdxs,
		MessageInfos:      file_tape_proto_msgTypes,
	}.Build()
	File_tape_proto = out.File
	file_tape_proto_rawDesc = nil
	file_tape_proto_goTypes = nil
	file_tape_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TapeServiceClient is the client API for TapeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TapeServiceClient interface {
	SaveGenericAccountInfoToFile(ctx context.Context, in *SaveGenericAccountInfoToFileRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RemoveGenericAccountInfo(ctx context.Context, in *RemoveGenericAccountInfoRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type tapeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTapeServiceClient(cc grpc.ClientConnInterface) TapeServiceClient {
	return &tapeServiceClient{cc}
}

func (c *tapeServiceClient) SaveGenericAccountInfoToFile(ctx context.Context, in *SaveGenericAccountInfoToFileRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.tape.TapeService/SaveGenericAccountInfoToFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapeServiceClient) RemoveGenericAccountInfo(ctx context.Context, in *RemoveGenericAccountInfoRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.tape.TapeService/RemoveGenericAccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TapeServiceServer is the server API for TapeService service.
type TapeServiceServer interface {
	SaveGenericAccountInfoToFile(context.Context, *SaveGenericAccountInfoToFileRequest) (*empty.Empty, error)
	RemoveGenericAccountInfo(context.Context, *RemoveGenericAccountInfoRequest) (*empty.Empty, error)
}

// UnimplementedTapeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTapeServiceServer struct {
}

func (*UnimplementedTapeServiceServer) SaveGenericAccountInfoToFile(context.Context, *SaveGenericAccountInfoToFileRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveGenericAccountInfoToFile not implemented")
}
func (*UnimplementedTapeServiceServer) RemoveGenericAccountInfo(context.Context, *RemoveGenericAccountInfoRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGenericAccountInfo not implemented")
}

func RegisterTapeServiceServer(s *grpc.Server, srv TapeServiceServer) {
	s.RegisterService(&_TapeService_serviceDesc, srv)
}

func _TapeService_SaveGenericAccountInfoToFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveGenericAccountInfoToFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapeServiceServer).SaveGenericAccountInfoToFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.tape.TapeService/SaveGenericAccountInfoToFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapeServiceServer).SaveGenericAccountInfoToFile(ctx, req.(*SaveGenericAccountInfoToFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapeService_RemoveGenericAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGenericAccountInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapeServiceServer).RemoveGenericAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.tape.TapeService/RemoveGenericAccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapeServiceServer).RemoveGenericAccountInfo(ctx, req.(*RemoveGenericAccountInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TapeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.tape.TapeService",
	HandlerType: (*TapeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveGenericAccountInfoToFile",
			Handler:    _TapeService_SaveGenericAccountInfoToFile_Handler,
		},
		{
			MethodName: "RemoveGenericAccountInfo",
			Handler:    _TapeService_RemoveGenericAccountInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tape.proto",
}
