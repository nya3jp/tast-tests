// Copyright 2021 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: webauthn_service.proto

package hwsec

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BrowserType int32

const (
	BrowserType_ASH    BrowserType = 0
	BrowserType_LACROS BrowserType = 1
)

// Enum value maps for BrowserType.
var (
	BrowserType_name = map[int32]string{
		0: "ASH",
		1: "LACROS",
	}
	BrowserType_value = map[string]int32{
		"ASH":    0,
		"LACROS": 1,
	}
)

func (x BrowserType) Enum() *BrowserType {
	p := new(BrowserType)
	*p = x
	return p
}

func (x BrowserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BrowserType) Descriptor() protoreflect.EnumDescriptor {
	return file_webauthn_service_proto_enumTypes[0].Descriptor()
}

func (BrowserType) Type() protoreflect.EnumType {
	return &file_webauthn_service_proto_enumTypes[0]
}

func (x BrowserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BrowserType.Descriptor instead.
func (BrowserType) EnumDescriptor() ([]byte, []int) {
	return file_webauthn_service_proto_rawDescGZIP(), []int{0}
}

type UserVerification int32

const (
	UserVerification_DISCOURAGED UserVerification = 0
	UserVerification_PREFERRED   UserVerification = 1
	UserVerification_REQUIRED    UserVerification = 2
)

// Enum value maps for UserVerification.
var (
	UserVerification_name = map[int32]string{
		0: "DISCOURAGED",
		1: "PREFERRED",
		2: "REQUIRED",
	}
	UserVerification_value = map[string]int32{
		"DISCOURAGED": 0,
		"PREFERRED":   1,
		"REQUIRED":    2,
	}
)

func (x UserVerification) Enum() *UserVerification {
	p := new(UserVerification)
	*p = x
	return p
}

func (x UserVerification) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserVerification) Descriptor() protoreflect.EnumDescriptor {
	return file_webauthn_service_proto_enumTypes[1].Descriptor()
}

func (UserVerification) Type() protoreflect.EnumType {
	return &file_webauthn_service_proto_enumTypes[1]
}

func (x UserVerification) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserVerification.Descriptor instead.
func (UserVerification) EnumDescriptor() ([]byte, []int) {
	return file_webauthn_service_proto_rawDescGZIP(), []int{1}
}

type AuthenticatorType int32

const (
	AuthenticatorType_UNSPECIFIED    AuthenticatorType = 0
	AuthenticatorType_PLATFORM       AuthenticatorType = 1
	AuthenticatorType_CROSS_PLATFORM AuthenticatorType = 2
)

// Enum value maps for AuthenticatorType.
var (
	AuthenticatorType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "PLATFORM",
		2: "CROSS_PLATFORM",
	}
	AuthenticatorType_value = map[string]int32{
		"UNSPECIFIED":    0,
		"PLATFORM":       1,
		"CROSS_PLATFORM": 2,
	}
)

func (x AuthenticatorType) Enum() *AuthenticatorType {
	p := new(AuthenticatorType)
	*p = x
	return p
}

func (x AuthenticatorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthenticatorType) Descriptor() protoreflect.EnumDescriptor {
	return file_webauthn_service_proto_enumTypes[2].Descriptor()
}

func (AuthenticatorType) Type() protoreflect.EnumType {
	return &file_webauthn_service_proto_enumTypes[2]
}

func (x AuthenticatorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthenticatorType.Descriptor instead.
func (AuthenticatorType) EnumDescriptor() ([]byte, []int) {
	return file_webauthn_service_proto_rawDescGZIP(), []int{2}
}

type NewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrowserType BrowserType `protobuf:"varint,4,opt,name=browser_type,json=browserType,proto3,enum=tast.cros.hwsec.BrowserType" json:"browser_type,omitempty"`
	// KeepState controls whether to keep existing user profiles.
	KeepState bool `protobuf:"varint,5,opt,name=keep_state,json=keepState,proto3" json:"keep_state,omitempty"`
}

func (x *NewRequest) Reset() {
	*x = NewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webauthn_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewRequest) ProtoMessage() {}

func (x *NewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_webauthn_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewRequest.ProtoReflect.Descriptor instead.
func (*NewRequest) Descriptor() ([]byte, []int) {
	return file_webauthn_service_proto_rawDescGZIP(), []int{0}
}

func (x *NewRequest) GetBrowserType() BrowserType {
	if x != nil {
		return x.BrowserType
	}
	return BrowserType_ASH
}

func (x *NewRequest) GetKeepState() bool {
	if x != nil {
		return x.KeepState
	}
	return false
}

type EnterPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *EnterPasswordRequest) Reset() {
	*x = EnterPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webauthn_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterPasswordRequest) ProtoMessage() {}

func (x *EnterPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_webauthn_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterPasswordRequest.ProtoReflect.Descriptor instead.
func (*EnterPasswordRequest) Descriptor() ([]byte, []int) {
	return file_webauthn_service_proto_rawDescGZIP(), []int{1}
}

func (x *EnterPasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type StartWebauthnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserVerification  UserVerification  `protobuf:"varint,1,opt,name=user_verification,json=userVerification,proto3,enum=tast.cros.hwsec.UserVerification" json:"user_verification,omitempty"`
	AuthenticatorType AuthenticatorType `protobuf:"varint,2,opt,name=authenticator_type,json=authenticatorType,proto3,enum=tast.cros.hwsec.AuthenticatorType" json:"authenticator_type,omitempty"`
	HasDialog         bool              `protobuf:"varint,3,opt,name=has_dialog,json=hasDialog,proto3" json:"has_dialog,omitempty"`
}

func (x *StartWebauthnRequest) Reset() {
	*x = StartWebauthnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webauthn_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartWebauthnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWebauthnRequest) ProtoMessage() {}

func (x *StartWebauthnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_webauthn_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWebauthnRequest.ProtoReflect.Descriptor instead.
func (*StartWebauthnRequest) Descriptor() ([]byte, []int) {
	return file_webauthn_service_proto_rawDescGZIP(), []int{2}
}

func (x *StartWebauthnRequest) GetUserVerification() UserVerification {
	if x != nil {
		return x.UserVerification
	}
	return UserVerification_DISCOURAGED
}

func (x *StartWebauthnRequest) GetAuthenticatorType() AuthenticatorType {
	if x != nil {
		return x.AuthenticatorType
	}
	return AuthenticatorType_UNSPECIFIED
}

func (x *StartWebauthnRequest) GetHasDialog() bool {
	if x != nil {
		return x.HasDialog
	}
	return false
}

type StartMakeCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *StartMakeCredentialRequest) Reset() {
	*x = StartMakeCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webauthn_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartMakeCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartMakeCredentialRequest) ProtoMessage() {}

func (x *StartMakeCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_webauthn_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartMakeCredentialRequest.ProtoReflect.Descriptor instead.
func (*StartMakeCredentialRequest) Descriptor() ([]byte, []int) {
	return file_webauthn_service_proto_rawDescGZIP(), []int{3}
}

func (x *StartMakeCredentialRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type StartGetAssertionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *StartGetAssertionRequest) Reset() {
	*x = StartGetAssertionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webauthn_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartGetAssertionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartGetAssertionRequest) ProtoMessage() {}

func (x *StartGetAssertionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_webauthn_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartGetAssertionRequest.ProtoReflect.Descriptor instead.
func (*StartGetAssertionRequest) Descriptor() ([]byte, []int) {
	return file_webauthn_service_proto_rawDescGZIP(), []int{4}
}

func (x *StartGetAssertionRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

var File_webauthn_service_proto protoreflect.FileDescriptor

var file_webauthn_service_proto_rawDesc = []byte{
	0x0a, 0x16, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x2e, 0x68, 0x77, 0x73, 0x65, 0x63, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x72, 0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x61, 0x73,
	0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x68, 0x77, 0x73, 0x65, 0x63, 0x2e, 0x42, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x04, 0x22, 0x32, 0x0a, 0x14, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xd8,
	0x01, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x68,
	0x77, 0x73, 0x65, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e,
	0x68, 0x77, 0x73, 0x65, 0x63, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61,
	0x73, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x68, 0x61, 0x73, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x22, 0x38, 0x0a, 0x1a, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x4d, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x36, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x22, 0x0a, 0x0b, 0x42,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53,
	0x48, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x41, 0x43, 0x52, 0x4f, 0x53, 0x10, 0x01, 0x2a,
	0x40, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x52, 0x41, 0x47,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x02, 0x2a, 0x46, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4c, 0x41, 0x54, 0x46,
	0x4f, 0x52, 0x4d, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x5f, 0x50,
	0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x02, 0x32, 0xb7, 0x05, 0x0a, 0x0f, 0x57, 0x65,
	0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a,
	0x03, 0x4e, 0x65, 0x77, 0x12, 0x1b, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x2e, 0x68, 0x77, 0x73, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x05, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57,
	0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x12, 0x25, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x2e, 0x68, 0x77, 0x73, 0x65, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57,
	0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x45, 0x6e, 0x64, 0x57,
	0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x13, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x4d, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0x2b, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x68, 0x77, 0x73,
	0x65, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x4d, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x58, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f,
	0x73, 0x2e, 0x68, 0x77, 0x73, 0x65, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x11, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x50, 0x0a, 0x0d, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x25, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x68,
	0x77, 0x73, 0x65, 0x63, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x42, 0x25, 0x5a, 0x23, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f,
	0x73, 0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x63, 0x72, 0x6f, 0x73, 0x2f, 0x68, 0x77, 0x73, 0x65, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_webauthn_service_proto_rawDescOnce sync.Once
	file_webauthn_service_proto_rawDescData = file_webauthn_service_proto_rawDesc
)

func file_webauthn_service_proto_rawDescGZIP() []byte {
	file_webauthn_service_proto_rawDescOnce.Do(func() {
		file_webauthn_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_webauthn_service_proto_rawDescData)
	})
	return file_webauthn_service_proto_rawDescData
}

var file_webauthn_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_webauthn_service_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_webauthn_service_proto_goTypes = []interface{}{
	(BrowserType)(0),                   // 0: tast.cros.hwsec.BrowserType
	(UserVerification)(0),              // 1: tast.cros.hwsec.UserVerification
	(AuthenticatorType)(0),             // 2: tast.cros.hwsec.AuthenticatorType
	(*NewRequest)(nil),                 // 3: tast.cros.hwsec.NewRequest
	(*EnterPasswordRequest)(nil),       // 4: tast.cros.hwsec.EnterPasswordRequest
	(*StartWebauthnRequest)(nil),       // 5: tast.cros.hwsec.StartWebauthnRequest
	(*StartMakeCredentialRequest)(nil), // 6: tast.cros.hwsec.StartMakeCredentialRequest
	(*StartGetAssertionRequest)(nil),   // 7: tast.cros.hwsec.StartGetAssertionRequest
	(*emptypb.Empty)(nil),              // 8: google.protobuf.Empty
}
var file_webauthn_service_proto_depIdxs = []int32{
	0,  // 0: tast.cros.hwsec.NewRequest.browser_type:type_name -> tast.cros.hwsec.BrowserType
	1,  // 1: tast.cros.hwsec.StartWebauthnRequest.user_verification:type_name -> tast.cros.hwsec.UserVerification
	2,  // 2: tast.cros.hwsec.StartWebauthnRequest.authenticator_type:type_name -> tast.cros.hwsec.AuthenticatorType
	3,  // 3: tast.cros.hwsec.WebauthnService.New:input_type -> tast.cros.hwsec.NewRequest
	8,  // 4: tast.cros.hwsec.WebauthnService.Close:input_type -> google.protobuf.Empty
	5,  // 5: tast.cros.hwsec.WebauthnService.StartWebauthn:input_type -> tast.cros.hwsec.StartWebauthnRequest
	8,  // 6: tast.cros.hwsec.WebauthnService.EndWebauthn:input_type -> google.protobuf.Empty
	6,  // 7: tast.cros.hwsec.WebauthnService.StartMakeCredential:input_type -> tast.cros.hwsec.StartMakeCredentialRequest
	8,  // 8: tast.cros.hwsec.WebauthnService.CheckMakeCredential:input_type -> google.protobuf.Empty
	7,  // 9: tast.cros.hwsec.WebauthnService.StartGetAssertion:input_type -> tast.cros.hwsec.StartGetAssertionRequest
	8,  // 10: tast.cros.hwsec.WebauthnService.CheckGetAssertion:input_type -> google.protobuf.Empty
	4,  // 11: tast.cros.hwsec.WebauthnService.EnterPassword:input_type -> tast.cros.hwsec.EnterPasswordRequest
	8,  // 12: tast.cros.hwsec.WebauthnService.New:output_type -> google.protobuf.Empty
	8,  // 13: tast.cros.hwsec.WebauthnService.Close:output_type -> google.protobuf.Empty
	8,  // 14: tast.cros.hwsec.WebauthnService.StartWebauthn:output_type -> google.protobuf.Empty
	8,  // 15: tast.cros.hwsec.WebauthnService.EndWebauthn:output_type -> google.protobuf.Empty
	8,  // 16: tast.cros.hwsec.WebauthnService.StartMakeCredential:output_type -> google.protobuf.Empty
	8,  // 17: tast.cros.hwsec.WebauthnService.CheckMakeCredential:output_type -> google.protobuf.Empty
	8,  // 18: tast.cros.hwsec.WebauthnService.StartGetAssertion:output_type -> google.protobuf.Empty
	8,  // 19: tast.cros.hwsec.WebauthnService.CheckGetAssertion:output_type -> google.protobuf.Empty
	8,  // 20: tast.cros.hwsec.WebauthnService.EnterPassword:output_type -> google.protobuf.Empty
	12, // [12:21] is the sub-list for method output_type
	3,  // [3:12] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_webauthn_service_proto_init() }
func file_webauthn_service_proto_init() {
	if File_webauthn_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_webauthn_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webauthn_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webauthn_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartWebauthnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webauthn_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartMakeCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webauthn_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartGetAssertionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_webauthn_service_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_webauthn_service_proto_goTypes,
		DependencyIndexes: file_webauthn_service_proto_depIdxs,
		EnumInfos:         file_webauthn_service_proto_enumTypes,
		MessageInfos:      file_webauthn_service_proto_msgTypes,
	}.Build()
	File_webauthn_service_proto = out.File
	file_webauthn_service_proto_rawDesc = nil
	file_webauthn_service_proto_goTypes = nil
	file_webauthn_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WebauthnServiceClient is the client API for WebauthnService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WebauthnServiceClient interface {
	// New logs into a Chrome session as a fake user. Close must be called later
	// to clean up the associated resources.
	New(ctx context.Context, in *NewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Close releases the resources obtained by New.
	Close(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StartWebauthn(ctx context.Context, in *StartWebauthnRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EndWebauthn(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StartMakeCredential(ctx context.Context, in *StartMakeCredentialRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckMakeCredential(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StartGetAssertion(ctx context.Context, in *StartGetAssertionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckGetAssertion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EnterPassword(ctx context.Context, in *EnterPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type webauthnServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebauthnServiceClient(cc grpc.ClientConnInterface) WebauthnServiceClient {
	return &webauthnServiceClient{cc}
}

func (c *webauthnServiceClient) New(ctx context.Context, in *NewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.WebauthnService/New", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webauthnServiceClient) Close(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.WebauthnService/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webauthnServiceClient) StartWebauthn(ctx context.Context, in *StartWebauthnRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.WebauthnService/StartWebauthn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webauthnServiceClient) EndWebauthn(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.WebauthnService/EndWebauthn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webauthnServiceClient) StartMakeCredential(ctx context.Context, in *StartMakeCredentialRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.WebauthnService/StartMakeCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webauthnServiceClient) CheckMakeCredential(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.WebauthnService/CheckMakeCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webauthnServiceClient) StartGetAssertion(ctx context.Context, in *StartGetAssertionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.WebauthnService/StartGetAssertion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webauthnServiceClient) CheckGetAssertion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.WebauthnService/CheckGetAssertion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webauthnServiceClient) EnterPassword(ctx context.Context, in *EnterPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.WebauthnService/EnterPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebauthnServiceServer is the server API for WebauthnService service.
type WebauthnServiceServer interface {
	// New logs into a Chrome session as a fake user. Close must be called later
	// to clean up the associated resources.
	New(context.Context, *NewRequest) (*emptypb.Empty, error)
	// Close releases the resources obtained by New.
	Close(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	StartWebauthn(context.Context, *StartWebauthnRequest) (*emptypb.Empty, error)
	EndWebauthn(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	StartMakeCredential(context.Context, *StartMakeCredentialRequest) (*emptypb.Empty, error)
	CheckMakeCredential(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	StartGetAssertion(context.Context, *StartGetAssertionRequest) (*emptypb.Empty, error)
	CheckGetAssertion(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	EnterPassword(context.Context, *EnterPasswordRequest) (*emptypb.Empty, error)
}

// UnimplementedWebauthnServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWebauthnServiceServer struct {
}

func (*UnimplementedWebauthnServiceServer) New(context.Context, *NewRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method New not implemented")
}
func (*UnimplementedWebauthnServiceServer) Close(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedWebauthnServiceServer) StartWebauthn(context.Context, *StartWebauthnRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartWebauthn not implemented")
}
func (*UnimplementedWebauthnServiceServer) EndWebauthn(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndWebauthn not implemented")
}
func (*UnimplementedWebauthnServiceServer) StartMakeCredential(context.Context, *StartMakeCredentialRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMakeCredential not implemented")
}
func (*UnimplementedWebauthnServiceServer) CheckMakeCredential(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMakeCredential not implemented")
}
func (*UnimplementedWebauthnServiceServer) StartGetAssertion(context.Context, *StartGetAssertionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGetAssertion not implemented")
}
func (*UnimplementedWebauthnServiceServer) CheckGetAssertion(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckGetAssertion not implemented")
}
func (*UnimplementedWebauthnServiceServer) EnterPassword(context.Context, *EnterPasswordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterPassword not implemented")
}

func RegisterWebauthnServiceServer(s *grpc.Server, srv WebauthnServiceServer) {
	s.RegisterService(&_WebauthnService_serviceDesc, srv)
}

func _WebauthnService_New_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebauthnServiceServer).New(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.WebauthnService/New",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebauthnServiceServer).New(ctx, req.(*NewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebauthnService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebauthnServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.WebauthnService/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebauthnServiceServer).Close(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebauthnService_StartWebauthn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartWebauthnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebauthnServiceServer).StartWebauthn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.WebauthnService/StartWebauthn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebauthnServiceServer).StartWebauthn(ctx, req.(*StartWebauthnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebauthnService_EndWebauthn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebauthnServiceServer).EndWebauthn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.WebauthnService/EndWebauthn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebauthnServiceServer).EndWebauthn(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebauthnService_StartMakeCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMakeCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebauthnServiceServer).StartMakeCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.WebauthnService/StartMakeCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebauthnServiceServer).StartMakeCredential(ctx, req.(*StartMakeCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebauthnService_CheckMakeCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebauthnServiceServer).CheckMakeCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.WebauthnService/CheckMakeCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebauthnServiceServer).CheckMakeCredential(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebauthnService_StartGetAssertion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartGetAssertionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebauthnServiceServer).StartGetAssertion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.WebauthnService/StartGetAssertion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebauthnServiceServer).StartGetAssertion(ctx, req.(*StartGetAssertionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebauthnService_CheckGetAssertion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebauthnServiceServer).CheckGetAssertion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.WebauthnService/CheckGetAssertion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebauthnServiceServer).CheckGetAssertion(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebauthnService_EnterPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnterPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebauthnServiceServer).EnterPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.WebauthnService/EnterPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebauthnServiceServer).EnterPassword(ctx, req.(*EnterPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WebauthnService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.hwsec.WebauthnService",
	HandlerType: (*WebauthnServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "New",
			Handler:    _WebauthnService_New_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _WebauthnService_Close_Handler,
		},
		{
			MethodName: "StartWebauthn",
			Handler:    _WebauthnService_StartWebauthn_Handler,
		},
		{
			MethodName: "EndWebauthn",
			Handler:    _WebauthnService_EndWebauthn_Handler,
		},
		{
			MethodName: "StartMakeCredential",
			Handler:    _WebauthnService_StartMakeCredential_Handler,
		},
		{
			MethodName: "CheckMakeCredential",
			Handler:    _WebauthnService_CheckMakeCredential_Handler,
		},
		{
			MethodName: "StartGetAssertion",
			Handler:    _WebauthnService_StartGetAssertion_Handler,
		},
		{
			MethodName: "CheckGetAssertion",
			Handler:    _WebauthnService_CheckGetAssertion_Handler,
		},
		{
			MethodName: "EnterPassword",
			Handler:    _WebauthnService_EnterPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webauthn_service.proto",
}
