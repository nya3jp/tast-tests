// Code generated by protoc-gen-go. DO NOT EDIT.
// source: attestation_client_service.proto

package hwsec

import (
	attestation_proto "chromiumos/system_api/attestation_proto"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("attestation_client_service.proto", fileDescriptor_409539be86ff0a06) }

var fileDescriptor_409539be86ff0a06 = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x5d, 0x4b, 0xc3, 0x30,
	0x14, 0x86, 0x05, 0x61, 0x60, 0x10, 0x06, 0xf1, 0xc2, 0x31, 0x75, 0x0c, 0x45, 0x86, 0x1f, 0xb4,
	0xa0, 0xbf, 0x40, 0xcb, 0x9c, 0x43, 0xaf, 0xd6, 0x3b, 0x6f, 0x46, 0x2c, 0x67, 0x6b, 0x20, 0x4b,
	0x6a, 0xce, 0xd9, 0x64, 0x7f, 0xce, 0xdf, 0x26, 0x6d, 0x96, 0xb9, 0x8f, 0xd6, 0xed, 0xb6, 0xe7,
	0x39, 0xef, 0x93, 0xc2, 0x79, 0x59, 0x5b, 0x10, 0x01, 0x92, 0x20, 0x69, 0xf4, 0x30, 0x51, 0x12,
	0x34, 0x0d, 0x11, 0xec, 0x4c, 0x26, 0x10, 0x64, 0xd6, 0x90, 0xe1, 0x75, 0x12, 0x48, 0x41, 0x62,
	0x0d, 0x06, 0xe9, 0x37, 0x42, 0xd2, 0xac, 0x4b, 0x4d, 0x60, 0x47, 0xc2, 0x13, 0x0f, 0x3f, 0x35,
	0xd6, 0x78, 0xfa, 0x8b, 0x89, 0x8a, 0x94, 0xd8, 0x85, 0xf0, 0x3e, 0x3b, 0xea, 0x01, 0xc5, 0x24,
	0x68, 0x8a, 0xfc, 0x22, 0x58, 0xd1, 0x05, 0xcb, 0xef, 0x03, 0xf8, 0x9a, 0x02, 0x52, 0xf3, 0xac,
	0x6a, 0x9c, 0xa9, 0xf9, 0xe5, 0x01, 0x1f, 0xb3, 0x93, 0xc8, 0x82, 0x20, 0xe8, 0x6a, 0x6b, 0x94,
	0x5a, 0x6c, 0xf1, 0xce, 0xda, 0x56, 0x09, 0xe1, 0xe3, 0xaf, 0x77, 0x83, 0x4e, 0x34, 0x60, 0xc7,
	0x2f, 0x52, 0x4b, 0x4c, 0xdd, 0x94, 0xb7, 0xd7, 0x16, 0x57, 0x47, 0x3e, 0xba, 0xf5, 0x0f, 0xe1,
	0x32, 0x67, 0xac, 0xe1, 0x8c, 0x11, 0x58, 0x92, 0x23, 0x99, 0x08, 0x02, 0xff, 0x07, 0xf7, 0x25,
	0x0f, 0xdb, 0xc6, 0xbc, 0xeb, 0x76, 0x4f, 0x7a, 0xe9, 0x75, 0xcf, 0xd9, 0xe9, 0xad, 0xc2, 0xca,
	0xbd, 0xd5, 0xb4, 0xf3, 0x22, 0x3b, 0x8d, 0xe5, 0x58, 0x77, 0xf3, 0x5b, 0xc9, 0xac, 0x44, 0x88,
	0x52, 0xa1, 0x14, 0xe8, 0x31, 0xf0, 0xbb, 0xb5, 0xa0, 0x0a, 0xca, 0x5b, 0x6f, 0xf6, 0x83, 0x97,
	0x17, 0x92, 0x13, 0xb1, 0x9c, 0x64, 0x6a, 0x45, 0xd8, 0xd9, 0xca, 0xd8, 0x20, 0xca, 0x2f, 0xa4,
	0x14, 0x74, 0xa2, 0x77, 0xc6, 0x7a, 0x40, 0x6f, 0x30, 0xef, 0xeb, 0x91, 0xe1, 0xad, 0xcd, 0xbb,
	0x5d, 0x0c, 0x7c, 0xec, 0x79, 0xe5, 0xbc, 0x48, 0x7b, 0xee, 0xbc, 0x1e, 0x7e, 0x5c, 0x25, 0xa9,
	0x35, 0x13, 0x39, 0x9d, 0x18, 0x0c, 0xf3, 0xc6, 0x85, 0x8b, 0x16, 0x62, 0x98, 0x57, 0x2f, 0x2c,
	0xaa, 0xf7, 0x59, 0x2b, 0x0a, 0xf7, 0xf8, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x82, 0xf4, 0x17,
	0xb6, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AttestationClientServiceClient is the client API for AttestationClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AttestationClientServiceClient interface {
	// GetStatus returns the attestation status.
	GetStatus(ctx context.Context, in *attestation_proto.GetStatusRequest, opts ...grpc.CallOption) (*attestation_proto.GetStatusReply, error)
	// CreateEnrollRequest creates enroll request.
	CreateEnrollRequest(ctx context.Context, in *attestation_proto.CreateEnrollRequestRequest, opts ...grpc.CallOption) (*attestation_proto.CreateEnrollRequestReply, error)
	// FinishEnroll finish enroll request.
	FinishEnroll(ctx context.Context, in *attestation_proto.FinishEnrollRequest, opts ...grpc.CallOption) (*attestation_proto.FinishEnrollReply, error)
	// CreateCertificateRequest create certificate request.
	CreateCertificateRequest(ctx context.Context, in *attestation_proto.CreateCertificateRequestRequest, opts ...grpc.CallOption) (*attestation_proto.CreateCertificateRequestReply, error)
	// FinishCertificateRequest finish certificate request.
	FinishCertificateRequest(ctx context.Context, in *attestation_proto.FinishCertificateRequestRequest, opts ...grpc.CallOption) (*attestation_proto.FinishCertificateRequestReply, error)
	// SignEnterpriseChallenge sign enterprise challenge.
	SignEnterpriseChallenge(ctx context.Context, in *attestation_proto.SignEnterpriseChallengeRequest, opts ...grpc.CallOption) (*attestation_proto.SignEnterpriseChallengeReply, error)
	// SignSimpleChallenge sign simple challenge.
	SignSimpleChallenge(ctx context.Context, in *attestation_proto.SignSimpleChallengeRequest, opts ...grpc.CallOption) (*attestation_proto.SignSimpleChallengeReply, error)
	// GetKeyInfo returns the key info.
	GetKeyInfo(ctx context.Context, in *attestation_proto.GetKeyInfoRequest, opts ...grpc.CallOption) (*attestation_proto.GetKeyInfoReply, error)
}

type attestationClientServiceClient struct {
	cc *grpc.ClientConn
}

func NewAttestationClientServiceClient(cc *grpc.ClientConn) AttestationClientServiceClient {
	return &attestationClientServiceClient{cc}
}

func (c *attestationClientServiceClient) GetStatus(ctx context.Context, in *attestation_proto.GetStatusRequest, opts ...grpc.CallOption) (*attestation_proto.GetStatusReply, error) {
	out := new(attestation_proto.GetStatusReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationClientService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationClientServiceClient) CreateEnrollRequest(ctx context.Context, in *attestation_proto.CreateEnrollRequestRequest, opts ...grpc.CallOption) (*attestation_proto.CreateEnrollRequestReply, error) {
	out := new(attestation_proto.CreateEnrollRequestReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationClientService/CreateEnrollRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationClientServiceClient) FinishEnroll(ctx context.Context, in *attestation_proto.FinishEnrollRequest, opts ...grpc.CallOption) (*attestation_proto.FinishEnrollReply, error) {
	out := new(attestation_proto.FinishEnrollReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationClientService/FinishEnroll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationClientServiceClient) CreateCertificateRequest(ctx context.Context, in *attestation_proto.CreateCertificateRequestRequest, opts ...grpc.CallOption) (*attestation_proto.CreateCertificateRequestReply, error) {
	out := new(attestation_proto.CreateCertificateRequestReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationClientService/CreateCertificateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationClientServiceClient) FinishCertificateRequest(ctx context.Context, in *attestation_proto.FinishCertificateRequestRequest, opts ...grpc.CallOption) (*attestation_proto.FinishCertificateRequestReply, error) {
	out := new(attestation_proto.FinishCertificateRequestReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationClientService/FinishCertificateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationClientServiceClient) SignEnterpriseChallenge(ctx context.Context, in *attestation_proto.SignEnterpriseChallengeRequest, opts ...grpc.CallOption) (*attestation_proto.SignEnterpriseChallengeReply, error) {
	out := new(attestation_proto.SignEnterpriseChallengeReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationClientService/SignEnterpriseChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationClientServiceClient) SignSimpleChallenge(ctx context.Context, in *attestation_proto.SignSimpleChallengeRequest, opts ...grpc.CallOption) (*attestation_proto.SignSimpleChallengeReply, error) {
	out := new(attestation_proto.SignSimpleChallengeReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationClientService/SignSimpleChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationClientServiceClient) GetKeyInfo(ctx context.Context, in *attestation_proto.GetKeyInfoRequest, opts ...grpc.CallOption) (*attestation_proto.GetKeyInfoReply, error) {
	out := new(attestation_proto.GetKeyInfoReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationClientService/GetKeyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttestationClientServiceServer is the server API for AttestationClientService service.
type AttestationClientServiceServer interface {
	// GetStatus returns the attestation status.
	GetStatus(context.Context, *attestation_proto.GetStatusRequest) (*attestation_proto.GetStatusReply, error)
	// CreateEnrollRequest creates enroll request.
	CreateEnrollRequest(context.Context, *attestation_proto.CreateEnrollRequestRequest) (*attestation_proto.CreateEnrollRequestReply, error)
	// FinishEnroll finish enroll request.
	FinishEnroll(context.Context, *attestation_proto.FinishEnrollRequest) (*attestation_proto.FinishEnrollReply, error)
	// CreateCertificateRequest create certificate request.
	CreateCertificateRequest(context.Context, *attestation_proto.CreateCertificateRequestRequest) (*attestation_proto.CreateCertificateRequestReply, error)
	// FinishCertificateRequest finish certificate request.
	FinishCertificateRequest(context.Context, *attestation_proto.FinishCertificateRequestRequest) (*attestation_proto.FinishCertificateRequestReply, error)
	// SignEnterpriseChallenge sign enterprise challenge.
	SignEnterpriseChallenge(context.Context, *attestation_proto.SignEnterpriseChallengeRequest) (*attestation_proto.SignEnterpriseChallengeReply, error)
	// SignSimpleChallenge sign simple challenge.
	SignSimpleChallenge(context.Context, *attestation_proto.SignSimpleChallengeRequest) (*attestation_proto.SignSimpleChallengeReply, error)
	// GetKeyInfo returns the key info.
	GetKeyInfo(context.Context, *attestation_proto.GetKeyInfoRequest) (*attestation_proto.GetKeyInfoReply, error)
}

// UnimplementedAttestationClientServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAttestationClientServiceServer struct {
}

func (*UnimplementedAttestationClientServiceServer) GetStatus(ctx context.Context, req *attestation_proto.GetStatusRequest) (*attestation_proto.GetStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (*UnimplementedAttestationClientServiceServer) CreateEnrollRequest(ctx context.Context, req *attestation_proto.CreateEnrollRequestRequest) (*attestation_proto.CreateEnrollRequestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnrollRequest not implemented")
}
func (*UnimplementedAttestationClientServiceServer) FinishEnroll(ctx context.Context, req *attestation_proto.FinishEnrollRequest) (*attestation_proto.FinishEnrollReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishEnroll not implemented")
}
func (*UnimplementedAttestationClientServiceServer) CreateCertificateRequest(ctx context.Context, req *attestation_proto.CreateCertificateRequestRequest) (*attestation_proto.CreateCertificateRequestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCertificateRequest not implemented")
}
func (*UnimplementedAttestationClientServiceServer) FinishCertificateRequest(ctx context.Context, req *attestation_proto.FinishCertificateRequestRequest) (*attestation_proto.FinishCertificateRequestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishCertificateRequest not implemented")
}
func (*UnimplementedAttestationClientServiceServer) SignEnterpriseChallenge(ctx context.Context, req *attestation_proto.SignEnterpriseChallengeRequest) (*attestation_proto.SignEnterpriseChallengeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignEnterpriseChallenge not implemented")
}
func (*UnimplementedAttestationClientServiceServer) SignSimpleChallenge(ctx context.Context, req *attestation_proto.SignSimpleChallengeRequest) (*attestation_proto.SignSimpleChallengeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignSimpleChallenge not implemented")
}
func (*UnimplementedAttestationClientServiceServer) GetKeyInfo(ctx context.Context, req *attestation_proto.GetKeyInfoRequest) (*attestation_proto.GetKeyInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyInfo not implemented")
}

func RegisterAttestationClientServiceServer(s *grpc.Server, srv AttestationClientServiceServer) {
	s.RegisterService(&_AttestationClientService_serviceDesc, srv)
}

func _AttestationClientService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationClientServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationClientService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationClientServiceServer).GetStatus(ctx, req.(*attestation_proto.GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationClientService_CreateEnrollRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.CreateEnrollRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationClientServiceServer).CreateEnrollRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationClientService/CreateEnrollRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationClientServiceServer).CreateEnrollRequest(ctx, req.(*attestation_proto.CreateEnrollRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationClientService_FinishEnroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.FinishEnrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationClientServiceServer).FinishEnroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationClientService/FinishEnroll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationClientServiceServer).FinishEnroll(ctx, req.(*attestation_proto.FinishEnrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationClientService_CreateCertificateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.CreateCertificateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationClientServiceServer).CreateCertificateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationClientService/CreateCertificateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationClientServiceServer).CreateCertificateRequest(ctx, req.(*attestation_proto.CreateCertificateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationClientService_FinishCertificateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.FinishCertificateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationClientServiceServer).FinishCertificateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationClientService/FinishCertificateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationClientServiceServer).FinishCertificateRequest(ctx, req.(*attestation_proto.FinishCertificateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationClientService_SignEnterpriseChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.SignEnterpriseChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationClientServiceServer).SignEnterpriseChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationClientService/SignEnterpriseChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationClientServiceServer).SignEnterpriseChallenge(ctx, req.(*attestation_proto.SignEnterpriseChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationClientService_SignSimpleChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.SignSimpleChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationClientServiceServer).SignSimpleChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationClientService/SignSimpleChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationClientServiceServer).SignSimpleChallenge(ctx, req.(*attestation_proto.SignSimpleChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationClientService_GetKeyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.GetKeyInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationClientServiceServer).GetKeyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationClientService/GetKeyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationClientServiceServer).GetKeyInfo(ctx, req.(*attestation_proto.GetKeyInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AttestationClientService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.hwsec.AttestationClientService",
	HandlerType: (*AttestationClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _AttestationClientService_GetStatus_Handler,
		},
		{
			MethodName: "CreateEnrollRequest",
			Handler:    _AttestationClientService_CreateEnrollRequest_Handler,
		},
		{
			MethodName: "FinishEnroll",
			Handler:    _AttestationClientService_FinishEnroll_Handler,
		},
		{
			MethodName: "CreateCertificateRequest",
			Handler:    _AttestationClientService_CreateCertificateRequest_Handler,
		},
		{
			MethodName: "FinishCertificateRequest",
			Handler:    _AttestationClientService_FinishCertificateRequest_Handler,
		},
		{
			MethodName: "SignEnterpriseChallenge",
			Handler:    _AttestationClientService_SignEnterpriseChallenge_Handler,
		},
		{
			MethodName: "SignSimpleChallenge",
			Handler:    _AttestationClientService_SignSimpleChallenge_Handler,
		},
		{
			MethodName: "GetKeyInfo",
			Handler:    _AttestationClientService_GetKeyInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "attestation_client_service.proto",
}
