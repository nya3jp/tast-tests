// Code generated by protoc-gen-go. DO NOT EDIT.
// source: attestation_dbus_service.proto

package hwsec

import (
	attestation_proto "chromiumos/system_api/attestation_proto"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("attestation_dbus_service.proto", fileDescriptor_8a7058988c079328) }

var fileDescriptor_8a7058988c079328 = []byte{
	// 443 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xed, 0x8a, 0xd3, 0x40,
	0x14, 0x86, 0x05, 0x41, 0xd8, 0x41, 0x29, 0x8c, 0xe0, 0xc7, 0xaa, 0xf5, 0x63, 0x91, 0xa2, 0xab,
	0x29, 0xe8, 0x15, 0xb8, 0xed, 0x5a, 0x4b, 0xfd, 0x21, 0x8d, 0x22, 0xe8, 0x8f, 0x65, 0x36, 0x3d,
	0x6d, 0x06, 0x27, 0x33, 0x71, 0xce, 0xc9, 0x4a, 0x2e, 0xcd, 0xbb, 0x5b, 0x92, 0xe9, 0x64, 0x93,
	0x6c, 0xd2, 0xed, 0xdf, 0xbe, 0xcf, 0x79, 0xde, 0x74, 0x38, 0x1c, 0x36, 0x14, 0x44, 0x80, 0x24,
	0x48, 0x1a, 0x7d, 0xb6, 0x3a, 0xcf, 0xf0, 0x0c, 0xc1, 0x5e, 0xc8, 0x08, 0x82, 0xd4, 0x1a, 0x32,
	0x7c, 0x40, 0x02, 0x29, 0x88, 0xac, 0xc1, 0x20, 0xfe, 0x87, 0x10, 0x1d, 0x0e, 0xa4, 0x26, 0xb0,
	0x6b, 0xe1, 0x89, 0x0f, 0xff, 0x0f, 0xd8, 0x83, 0x4f, 0x57, 0x92, 0xe9, 0x49, 0x86, 0xa1, 0x53,
	0xf0, 0x39, 0x3b, 0x98, 0x01, 0x85, 0x24, 0x28, 0x43, 0xfe, 0x2c, 0xa8, 0x55, 0x05, 0xd5, 0xef,
	0x4b, 0xf8, 0x9b, 0x01, 0xd2, 0xe1, 0x93, 0xbe, 0x38, 0x55, 0xf9, 0xab, 0x5b, 0x7c, 0xc3, 0xee,
	0x4f, 0x2c, 0x08, 0x82, 0x53, 0x6d, 0x8d, 0x52, 0xdb, 0x29, 0x3e, 0x6a, 0x4c, 0x75, 0x10, 0x5e,
	0xff, 0xfa, 0x66, 0xd0, 0x15, 0x2d, 0xd9, 0xdd, 0xcf, 0x52, 0x4b, 0x8c, 0x5d, 0xca, 0x5f, 0x34,
	0x06, 0xeb, 0x91, 0x57, 0x0f, 0x77, 0x10, 0xce, 0x79, 0xc1, 0x1e, 0xb9, 0xc6, 0x09, 0x58, 0x92,
	0x6b, 0x19, 0x09, 0x02, 0xff, 0x0f, 0xde, 0x75, 0x7c, 0xd8, 0x75, 0xcc, 0x77, 0xbd, 0xdd, 0x93,
	0xae, 0x7a, 0xdd, 0xe7, 0xdc, 0xd8, 0xdb, 0x87, 0x75, 0xf7, 0xf6, 0xd3, 0xae, 0x17, 0xd9, 0xc3,
	0x50, 0x6e, 0xf4, 0x69, 0xb1, 0x29, 0xa9, 0x95, 0x08, 0x93, 0x58, 0x28, 0x05, 0x7a, 0x03, 0xfc,
	0xb8, 0x21, 0xea, 0xa1, 0x7c, 0xeb, 0x9b, 0xfd, 0xe0, 0x6a, 0x43, 0x0a, 0x22, 0x94, 0x49, 0xaa,
	0x6a, 0x85, 0xa3, 0x6b, 0x8e, 0x16, 0xd1, 0xbd, 0x21, 0x9d, 0xa0, 0x2b, 0xfa, 0xca, 0xd8, 0x0c,
	0x68, 0x01, 0xf9, 0x5c, 0xaf, 0x0d, 0x1f, 0xb6, 0xf7, 0x76, 0x1b, 0x78, 0xed, 0xd3, 0xde, 0xdc,
	0xd9, 0x7e, 0xb3, 0xc1, 0x0c, 0xc8, 0xed, 0x4b, 0x02, 0x9a, 0xe6, 0x53, 0x7e, 0xd4, 0x1e, 0xa9,
	0xa5, 0x2b, 0xef, 0x7d, 0xb9, 0x1b, 0x72, 0xf2, 0x1f, 0xec, 0x5e, 0x58, 0x36, 0x7e, 0x13, 0xb9,
	0x32, 0x62, 0xc5, 0x9b, 0x53, 0x8d, 0xcc, 0x8b, 0x9f, 0xef, 0x42, 0x9c, 0x36, 0x67, 0x8f, 0x97,
	0xb0, 0x91, 0x48, 0x60, 0x17, 0x90, 0xff, 0x94, 0x14, 0x4f, 0x62, 0x91, 0xe2, 0x77, 0xf3, 0x07,
	0x34, 0x7f, 0xdf, 0x98, 0xef, 0xe5, 0x7c, 0xdd, 0xf1, 0xbe, 0x78, 0xf5, 0xf8, 0x53, 0x50, 0x40,
	0xb0, 0x80, 0x1c, 0x5b, 0x8f, 0x7f, 0x15, 0x74, 0x3f, 0x7e, 0x3d, 0x2f, 0x6d, 0x27, 0xa3, 0x2f,
	0xb7, 0x7f, 0x1d, 0x45, 0xb1, 0x35, 0x89, 0xcc, 0x12, 0x83, 0xe3, 0xe2, 0xd8, 0x8d, 0xb7, 0x07,
	0x10, 0xc7, 0xc5, 0xd5, 0x1b, 0x97, 0x57, 0xef, 0xfc, 0x4e, 0x79, 0xeb, 0x3e, 0x5e, 0x06, 0x00,
	0x00, 0xff, 0xff, 0x45, 0x57, 0xda, 0x50, 0x2f, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AttestationDBusServiceClient is the client API for AttestationDBusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AttestationDBusServiceClient interface {
	// GetStatus returns the attestation status.
	GetStatus(ctx context.Context, in *attestation_proto.GetStatusRequest, opts ...grpc.CallOption) (*attestation_proto.GetStatusReply, error)
	// CreateEnrollRequest creates enroll request.
	CreateEnrollRequest(ctx context.Context, in *attestation_proto.CreateEnrollRequestRequest, opts ...grpc.CallOption) (*attestation_proto.CreateEnrollRequestReply, error)
	// FinishEnroll finish enroll request.
	FinishEnroll(ctx context.Context, in *attestation_proto.FinishEnrollRequest, opts ...grpc.CallOption) (*attestation_proto.FinishEnrollReply, error)
	// CreateCertificateRequest create certificate request.
	CreateCertificateRequest(ctx context.Context, in *attestation_proto.CreateCertificateRequestRequest, opts ...grpc.CallOption) (*attestation_proto.CreateCertificateRequestReply, error)
	// FinishCertificateRequest finish certificate request.
	FinishCertificateRequest(ctx context.Context, in *attestation_proto.FinishCertificateRequestRequest, opts ...grpc.CallOption) (*attestation_proto.FinishCertificateRequestReply, error)
	// SignEnterpriseChallenge sign enterprise challenge.
	SignEnterpriseChallenge(ctx context.Context, in *attestation_proto.SignEnterpriseChallengeRequest, opts ...grpc.CallOption) (*attestation_proto.SignEnterpriseChallengeReply, error)
	// SignSimpleChallenge sign simple challenge.
	SignSimpleChallenge(ctx context.Context, in *attestation_proto.SignSimpleChallengeRequest, opts ...grpc.CallOption) (*attestation_proto.SignSimpleChallengeReply, error)
	// GetKeyInfo returns the key info.
	GetKeyInfo(ctx context.Context, in *attestation_proto.GetKeyInfoRequest, opts ...grpc.CallOption) (*attestation_proto.GetKeyInfoReply, error)
	// GetEnrollmentID returns the enrollment id.
	GetEnrollmentID(ctx context.Context, in *attestation_proto.GetEnrollmentIdRequest, opts ...grpc.CallOption) (*attestation_proto.GetEnrollmentIdReply, error)
	// SetKeyPayload sets a payload for a key.
	SetKeyPayload(ctx context.Context, in *attestation_proto.SetKeyPayloadRequest, opts ...grpc.CallOption) (*attestation_proto.SetKeyPayloadReply, error)
	// RegisterKeyWithChapsToken registers the key into chaps.
	RegisterKeyWithChapsToken(ctx context.Context, in *attestation_proto.RegisterKeyWithChapsTokenRequest, opts ...grpc.CallOption) (*attestation_proto.RegisterKeyWithChapsTokenReply, error)
	// DeleteKeys delete user's keys.
	DeleteKeys(ctx context.Context, in *attestation_proto.DeleteKeysRequest, opts ...grpc.CallOption) (*attestation_proto.DeleteKeysReply, error)
}

type attestationDBusServiceClient struct {
	cc *grpc.ClientConn
}

func NewAttestationDBusServiceClient(cc *grpc.ClientConn) AttestationDBusServiceClient {
	return &attestationDBusServiceClient{cc}
}

func (c *attestationDBusServiceClient) GetStatus(ctx context.Context, in *attestation_proto.GetStatusRequest, opts ...grpc.CallOption) (*attestation_proto.GetStatusReply, error) {
	out := new(attestation_proto.GetStatusReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationDBusService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationDBusServiceClient) CreateEnrollRequest(ctx context.Context, in *attestation_proto.CreateEnrollRequestRequest, opts ...grpc.CallOption) (*attestation_proto.CreateEnrollRequestReply, error) {
	out := new(attestation_proto.CreateEnrollRequestReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationDBusService/CreateEnrollRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationDBusServiceClient) FinishEnroll(ctx context.Context, in *attestation_proto.FinishEnrollRequest, opts ...grpc.CallOption) (*attestation_proto.FinishEnrollReply, error) {
	out := new(attestation_proto.FinishEnrollReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationDBusService/FinishEnroll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationDBusServiceClient) CreateCertificateRequest(ctx context.Context, in *attestation_proto.CreateCertificateRequestRequest, opts ...grpc.CallOption) (*attestation_proto.CreateCertificateRequestReply, error) {
	out := new(attestation_proto.CreateCertificateRequestReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationDBusService/CreateCertificateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationDBusServiceClient) FinishCertificateRequest(ctx context.Context, in *attestation_proto.FinishCertificateRequestRequest, opts ...grpc.CallOption) (*attestation_proto.FinishCertificateRequestReply, error) {
	out := new(attestation_proto.FinishCertificateRequestReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationDBusService/FinishCertificateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationDBusServiceClient) SignEnterpriseChallenge(ctx context.Context, in *attestation_proto.SignEnterpriseChallengeRequest, opts ...grpc.CallOption) (*attestation_proto.SignEnterpriseChallengeReply, error) {
	out := new(attestation_proto.SignEnterpriseChallengeReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationDBusService/SignEnterpriseChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationDBusServiceClient) SignSimpleChallenge(ctx context.Context, in *attestation_proto.SignSimpleChallengeRequest, opts ...grpc.CallOption) (*attestation_proto.SignSimpleChallengeReply, error) {
	out := new(attestation_proto.SignSimpleChallengeReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationDBusService/SignSimpleChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationDBusServiceClient) GetKeyInfo(ctx context.Context, in *attestation_proto.GetKeyInfoRequest, opts ...grpc.CallOption) (*attestation_proto.GetKeyInfoReply, error) {
	out := new(attestation_proto.GetKeyInfoReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationDBusService/GetKeyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationDBusServiceClient) GetEnrollmentID(ctx context.Context, in *attestation_proto.GetEnrollmentIdRequest, opts ...grpc.CallOption) (*attestation_proto.GetEnrollmentIdReply, error) {
	out := new(attestation_proto.GetEnrollmentIdReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationDBusService/GetEnrollmentID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationDBusServiceClient) SetKeyPayload(ctx context.Context, in *attestation_proto.SetKeyPayloadRequest, opts ...grpc.CallOption) (*attestation_proto.SetKeyPayloadReply, error) {
	out := new(attestation_proto.SetKeyPayloadReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationDBusService/SetKeyPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationDBusServiceClient) RegisterKeyWithChapsToken(ctx context.Context, in *attestation_proto.RegisterKeyWithChapsTokenRequest, opts ...grpc.CallOption) (*attestation_proto.RegisterKeyWithChapsTokenReply, error) {
	out := new(attestation_proto.RegisterKeyWithChapsTokenReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationDBusService/RegisterKeyWithChapsToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationDBusServiceClient) DeleteKeys(ctx context.Context, in *attestation_proto.DeleteKeysRequest, opts ...grpc.CallOption) (*attestation_proto.DeleteKeysReply, error) {
	out := new(attestation_proto.DeleteKeysReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationDBusService/DeleteKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttestationDBusServiceServer is the server API for AttestationDBusService service.
type AttestationDBusServiceServer interface {
	// GetStatus returns the attestation status.
	GetStatus(context.Context, *attestation_proto.GetStatusRequest) (*attestation_proto.GetStatusReply, error)
	// CreateEnrollRequest creates enroll request.
	CreateEnrollRequest(context.Context, *attestation_proto.CreateEnrollRequestRequest) (*attestation_proto.CreateEnrollRequestReply, error)
	// FinishEnroll finish enroll request.
	FinishEnroll(context.Context, *attestation_proto.FinishEnrollRequest) (*attestation_proto.FinishEnrollReply, error)
	// CreateCertificateRequest create certificate request.
	CreateCertificateRequest(context.Context, *attestation_proto.CreateCertificateRequestRequest) (*attestation_proto.CreateCertificateRequestReply, error)
	// FinishCertificateRequest finish certificate request.
	FinishCertificateRequest(context.Context, *attestation_proto.FinishCertificateRequestRequest) (*attestation_proto.FinishCertificateRequestReply, error)
	// SignEnterpriseChallenge sign enterprise challenge.
	SignEnterpriseChallenge(context.Context, *attestation_proto.SignEnterpriseChallengeRequest) (*attestation_proto.SignEnterpriseChallengeReply, error)
	// SignSimpleChallenge sign simple challenge.
	SignSimpleChallenge(context.Context, *attestation_proto.SignSimpleChallengeRequest) (*attestation_proto.SignSimpleChallengeReply, error)
	// GetKeyInfo returns the key info.
	GetKeyInfo(context.Context, *attestation_proto.GetKeyInfoRequest) (*attestation_proto.GetKeyInfoReply, error)
	// GetEnrollmentID returns the enrollment id.
	GetEnrollmentID(context.Context, *attestation_proto.GetEnrollmentIdRequest) (*attestation_proto.GetEnrollmentIdReply, error)
	// SetKeyPayload sets a payload for a key.
	SetKeyPayload(context.Context, *attestation_proto.SetKeyPayloadRequest) (*attestation_proto.SetKeyPayloadReply, error)
	// RegisterKeyWithChapsToken registers the key into chaps.
	RegisterKeyWithChapsToken(context.Context, *attestation_proto.RegisterKeyWithChapsTokenRequest) (*attestation_proto.RegisterKeyWithChapsTokenReply, error)
	// DeleteKeys delete user's keys.
	DeleteKeys(context.Context, *attestation_proto.DeleteKeysRequest) (*attestation_proto.DeleteKeysReply, error)
}

// UnimplementedAttestationDBusServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAttestationDBusServiceServer struct {
}

func (*UnimplementedAttestationDBusServiceServer) GetStatus(ctx context.Context, req *attestation_proto.GetStatusRequest) (*attestation_proto.GetStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (*UnimplementedAttestationDBusServiceServer) CreateEnrollRequest(ctx context.Context, req *attestation_proto.CreateEnrollRequestRequest) (*attestation_proto.CreateEnrollRequestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnrollRequest not implemented")
}
func (*UnimplementedAttestationDBusServiceServer) FinishEnroll(ctx context.Context, req *attestation_proto.FinishEnrollRequest) (*attestation_proto.FinishEnrollReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishEnroll not implemented")
}
func (*UnimplementedAttestationDBusServiceServer) CreateCertificateRequest(ctx context.Context, req *attestation_proto.CreateCertificateRequestRequest) (*attestation_proto.CreateCertificateRequestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCertificateRequest not implemented")
}
func (*UnimplementedAttestationDBusServiceServer) FinishCertificateRequest(ctx context.Context, req *attestation_proto.FinishCertificateRequestRequest) (*attestation_proto.FinishCertificateRequestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishCertificateRequest not implemented")
}
func (*UnimplementedAttestationDBusServiceServer) SignEnterpriseChallenge(ctx context.Context, req *attestation_proto.SignEnterpriseChallengeRequest) (*attestation_proto.SignEnterpriseChallengeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignEnterpriseChallenge not implemented")
}
func (*UnimplementedAttestationDBusServiceServer) SignSimpleChallenge(ctx context.Context, req *attestation_proto.SignSimpleChallengeRequest) (*attestation_proto.SignSimpleChallengeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignSimpleChallenge not implemented")
}
func (*UnimplementedAttestationDBusServiceServer) GetKeyInfo(ctx context.Context, req *attestation_proto.GetKeyInfoRequest) (*attestation_proto.GetKeyInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyInfo not implemented")
}
func (*UnimplementedAttestationDBusServiceServer) GetEnrollmentID(ctx context.Context, req *attestation_proto.GetEnrollmentIdRequest) (*attestation_proto.GetEnrollmentIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnrollmentID not implemented")
}
func (*UnimplementedAttestationDBusServiceServer) SetKeyPayload(ctx context.Context, req *attestation_proto.SetKeyPayloadRequest) (*attestation_proto.SetKeyPayloadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetKeyPayload not implemented")
}
func (*UnimplementedAttestationDBusServiceServer) RegisterKeyWithChapsToken(ctx context.Context, req *attestation_proto.RegisterKeyWithChapsTokenRequest) (*attestation_proto.RegisterKeyWithChapsTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterKeyWithChapsToken not implemented")
}
func (*UnimplementedAttestationDBusServiceServer) DeleteKeys(ctx context.Context, req *attestation_proto.DeleteKeysRequest) (*attestation_proto.DeleteKeysReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKeys not implemented")
}

func RegisterAttestationDBusServiceServer(s *grpc.Server, srv AttestationDBusServiceServer) {
	s.RegisterService(&_AttestationDBusService_serviceDesc, srv)
}

func _AttestationDBusService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationDBusServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationDBusService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationDBusServiceServer).GetStatus(ctx, req.(*attestation_proto.GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationDBusService_CreateEnrollRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.CreateEnrollRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationDBusServiceServer).CreateEnrollRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationDBusService/CreateEnrollRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationDBusServiceServer).CreateEnrollRequest(ctx, req.(*attestation_proto.CreateEnrollRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationDBusService_FinishEnroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.FinishEnrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationDBusServiceServer).FinishEnroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationDBusService/FinishEnroll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationDBusServiceServer).FinishEnroll(ctx, req.(*attestation_proto.FinishEnrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationDBusService_CreateCertificateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.CreateCertificateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationDBusServiceServer).CreateCertificateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationDBusService/CreateCertificateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationDBusServiceServer).CreateCertificateRequest(ctx, req.(*attestation_proto.CreateCertificateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationDBusService_FinishCertificateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.FinishCertificateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationDBusServiceServer).FinishCertificateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationDBusService/FinishCertificateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationDBusServiceServer).FinishCertificateRequest(ctx, req.(*attestation_proto.FinishCertificateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationDBusService_SignEnterpriseChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.SignEnterpriseChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationDBusServiceServer).SignEnterpriseChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationDBusService/SignEnterpriseChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationDBusServiceServer).SignEnterpriseChallenge(ctx, req.(*attestation_proto.SignEnterpriseChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationDBusService_SignSimpleChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.SignSimpleChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationDBusServiceServer).SignSimpleChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationDBusService/SignSimpleChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationDBusServiceServer).SignSimpleChallenge(ctx, req.(*attestation_proto.SignSimpleChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationDBusService_GetKeyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.GetKeyInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationDBusServiceServer).GetKeyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationDBusService/GetKeyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationDBusServiceServer).GetKeyInfo(ctx, req.(*attestation_proto.GetKeyInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationDBusService_GetEnrollmentID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.GetEnrollmentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationDBusServiceServer).GetEnrollmentID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationDBusService/GetEnrollmentID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationDBusServiceServer).GetEnrollmentID(ctx, req.(*attestation_proto.GetEnrollmentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationDBusService_SetKeyPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.SetKeyPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationDBusServiceServer).SetKeyPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationDBusService/SetKeyPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationDBusServiceServer).SetKeyPayload(ctx, req.(*attestation_proto.SetKeyPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationDBusService_RegisterKeyWithChapsToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.RegisterKeyWithChapsTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationDBusServiceServer).RegisterKeyWithChapsToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationDBusService/RegisterKeyWithChapsToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationDBusServiceServer).RegisterKeyWithChapsToken(ctx, req.(*attestation_proto.RegisterKeyWithChapsTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationDBusService_DeleteKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.DeleteKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationDBusServiceServer).DeleteKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationDBusService/DeleteKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationDBusServiceServer).DeleteKeys(ctx, req.(*attestation_proto.DeleteKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AttestationDBusService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.hwsec.AttestationDBusService",
	HandlerType: (*AttestationDBusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _AttestationDBusService_GetStatus_Handler,
		},
		{
			MethodName: "CreateEnrollRequest",
			Handler:    _AttestationDBusService_CreateEnrollRequest_Handler,
		},
		{
			MethodName: "FinishEnroll",
			Handler:    _AttestationDBusService_FinishEnroll_Handler,
		},
		{
			MethodName: "CreateCertificateRequest",
			Handler:    _AttestationDBusService_CreateCertificateRequest_Handler,
		},
		{
			MethodName: "FinishCertificateRequest",
			Handler:    _AttestationDBusService_FinishCertificateRequest_Handler,
		},
		{
			MethodName: "SignEnterpriseChallenge",
			Handler:    _AttestationDBusService_SignEnterpriseChallenge_Handler,
		},
		{
			MethodName: "SignSimpleChallenge",
			Handler:    _AttestationDBusService_SignSimpleChallenge_Handler,
		},
		{
			MethodName: "GetKeyInfo",
			Handler:    _AttestationDBusService_GetKeyInfo_Handler,
		},
		{
			MethodName: "GetEnrollmentID",
			Handler:    _AttestationDBusService_GetEnrollmentID_Handler,
		},
		{
			MethodName: "SetKeyPayload",
			Handler:    _AttestationDBusService_SetKeyPayload_Handler,
		},
		{
			MethodName: "RegisterKeyWithChapsToken",
			Handler:    _AttestationDBusService_RegisterKeyWithChapsToken_Handler,
		},
		{
			MethodName: "DeleteKeys",
			Handler:    _AttestationDBusService_DeleteKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "attestation_dbus_service.proto",
}
