// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: attestation_dbus_service.proto

package hwsec

import (
	attestation_proto "chromiumos/system_api/attestation_proto"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_attestation_dbus_service_proto protoreflect.FileDescriptor

var file_attestation_dbus_service_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x62,
	0x75, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0f, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x68, 0x77, 0x73, 0x65,
	0x63, 0x1a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x32, 0xb9, 0x09, 0x0a, 0x16, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x42, 0x75, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x2e, 0x61, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x52, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x12, 0x20, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2c, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x76, 0x0a,
	0x18, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x61, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x17, 0x53, 0x69, 0x67, 0x6e, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x12, 0x2b, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x13, 0x53, 0x69,
	0x67, 0x6e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x12, 0x27, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1e, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x5b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x23, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x55,
	0x0a, 0x0d, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x21, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x19, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x57, 0x69, 0x74, 0x68, 0x43, 0x68, 0x61, 0x70, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x2d, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x57, 0x69, 0x74, 0x68,
	0x43, 0x68, 0x61, 0x70, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x57, 0x69, 0x74, 0x68, 0x43,
	0x68, 0x61, 0x70, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x4c, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1e,
	0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x27,
	0x48, 0x03, 0x5a, 0x23, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74,
	0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f,
	0x73, 0x2f, 0x68, 0x77, 0x73, 0x65, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_attestation_dbus_service_proto_goTypes = []interface{}{
	(*attestation_proto.GetStatusRequest)(nil),                 // 0: attestation.GetStatusRequest
	(*attestation_proto.CreateEnrollRequestRequest)(nil),       // 1: attestation.CreateEnrollRequestRequest
	(*attestation_proto.FinishEnrollRequest)(nil),              // 2: attestation.FinishEnrollRequest
	(*attestation_proto.CreateCertificateRequestRequest)(nil),  // 3: attestation.CreateCertificateRequestRequest
	(*attestation_proto.FinishCertificateRequestRequest)(nil),  // 4: attestation.FinishCertificateRequestRequest
	(*attestation_proto.SignEnterpriseChallengeRequest)(nil),   // 5: attestation.SignEnterpriseChallengeRequest
	(*attestation_proto.SignSimpleChallengeRequest)(nil),       // 6: attestation.SignSimpleChallengeRequest
	(*attestation_proto.GetKeyInfoRequest)(nil),                // 7: attestation.GetKeyInfoRequest
	(*attestation_proto.GetEnrollmentIdRequest)(nil),           // 8: attestation.GetEnrollmentIdRequest
	(*attestation_proto.SetKeyPayloadRequest)(nil),             // 9: attestation.SetKeyPayloadRequest
	(*attestation_proto.RegisterKeyWithChapsTokenRequest)(nil), // 10: attestation.RegisterKeyWithChapsTokenRequest
	(*attestation_proto.DeleteKeysRequest)(nil),                // 11: attestation.DeleteKeysRequest
	(*attestation_proto.GetStatusReply)(nil),                   // 12: attestation.GetStatusReply
	(*attestation_proto.CreateEnrollRequestReply)(nil),         // 13: attestation.CreateEnrollRequestReply
	(*attestation_proto.FinishEnrollReply)(nil),                // 14: attestation.FinishEnrollReply
	(*attestation_proto.CreateCertificateRequestReply)(nil),    // 15: attestation.CreateCertificateRequestReply
	(*attestation_proto.FinishCertificateRequestReply)(nil),    // 16: attestation.FinishCertificateRequestReply
	(*attestation_proto.SignEnterpriseChallengeReply)(nil),     // 17: attestation.SignEnterpriseChallengeReply
	(*attestation_proto.SignSimpleChallengeReply)(nil),         // 18: attestation.SignSimpleChallengeReply
	(*attestation_proto.GetKeyInfoReply)(nil),                  // 19: attestation.GetKeyInfoReply
	(*attestation_proto.GetEnrollmentIdReply)(nil),             // 20: attestation.GetEnrollmentIdReply
	(*attestation_proto.SetKeyPayloadReply)(nil),               // 21: attestation.SetKeyPayloadReply
	(*attestation_proto.RegisterKeyWithChapsTokenReply)(nil),   // 22: attestation.RegisterKeyWithChapsTokenReply
	(*attestation_proto.DeleteKeysReply)(nil),                  // 23: attestation.DeleteKeysReply
}
var file_attestation_dbus_service_proto_depIdxs = []int32{
	0,  // 0: tast.cros.hwsec.AttestationDBusService.GetStatus:input_type -> attestation.GetStatusRequest
	1,  // 1: tast.cros.hwsec.AttestationDBusService.CreateEnrollRequest:input_type -> attestation.CreateEnrollRequestRequest
	2,  // 2: tast.cros.hwsec.AttestationDBusService.FinishEnroll:input_type -> attestation.FinishEnrollRequest
	3,  // 3: tast.cros.hwsec.AttestationDBusService.CreateCertificateRequest:input_type -> attestation.CreateCertificateRequestRequest
	4,  // 4: tast.cros.hwsec.AttestationDBusService.FinishCertificateRequest:input_type -> attestation.FinishCertificateRequestRequest
	5,  // 5: tast.cros.hwsec.AttestationDBusService.SignEnterpriseChallenge:input_type -> attestation.SignEnterpriseChallengeRequest
	6,  // 6: tast.cros.hwsec.AttestationDBusService.SignSimpleChallenge:input_type -> attestation.SignSimpleChallengeRequest
	7,  // 7: tast.cros.hwsec.AttestationDBusService.GetKeyInfo:input_type -> attestation.GetKeyInfoRequest
	8,  // 8: tast.cros.hwsec.AttestationDBusService.GetEnrollmentID:input_type -> attestation.GetEnrollmentIdRequest
	9,  // 9: tast.cros.hwsec.AttestationDBusService.SetKeyPayload:input_type -> attestation.SetKeyPayloadRequest
	10, // 10: tast.cros.hwsec.AttestationDBusService.RegisterKeyWithChapsToken:input_type -> attestation.RegisterKeyWithChapsTokenRequest
	11, // 11: tast.cros.hwsec.AttestationDBusService.DeleteKeys:input_type -> attestation.DeleteKeysRequest
	12, // 12: tast.cros.hwsec.AttestationDBusService.GetStatus:output_type -> attestation.GetStatusReply
	13, // 13: tast.cros.hwsec.AttestationDBusService.CreateEnrollRequest:output_type -> attestation.CreateEnrollRequestReply
	14, // 14: tast.cros.hwsec.AttestationDBusService.FinishEnroll:output_type -> attestation.FinishEnrollReply
	15, // 15: tast.cros.hwsec.AttestationDBusService.CreateCertificateRequest:output_type -> attestation.CreateCertificateRequestReply
	16, // 16: tast.cros.hwsec.AttestationDBusService.FinishCertificateRequest:output_type -> attestation.FinishCertificateRequestReply
	17, // 17: tast.cros.hwsec.AttestationDBusService.SignEnterpriseChallenge:output_type -> attestation.SignEnterpriseChallengeReply
	18, // 18: tast.cros.hwsec.AttestationDBusService.SignSimpleChallenge:output_type -> attestation.SignSimpleChallengeReply
	19, // 19: tast.cros.hwsec.AttestationDBusService.GetKeyInfo:output_type -> attestation.GetKeyInfoReply
	20, // 20: tast.cros.hwsec.AttestationDBusService.GetEnrollmentID:output_type -> attestation.GetEnrollmentIdReply
	21, // 21: tast.cros.hwsec.AttestationDBusService.SetKeyPayload:output_type -> attestation.SetKeyPayloadReply
	22, // 22: tast.cros.hwsec.AttestationDBusService.RegisterKeyWithChapsToken:output_type -> attestation.RegisterKeyWithChapsTokenReply
	23, // 23: tast.cros.hwsec.AttestationDBusService.DeleteKeys:output_type -> attestation.DeleteKeysReply
	12, // [12:24] is the sub-list for method output_type
	0,  // [0:12] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_attestation_dbus_service_proto_init() }
func file_attestation_dbus_service_proto_init() {
	if File_attestation_dbus_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_attestation_dbus_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_attestation_dbus_service_proto_goTypes,
		DependencyIndexes: file_attestation_dbus_service_proto_depIdxs,
	}.Build()
	File_attestation_dbus_service_proto = out.File
	file_attestation_dbus_service_proto_rawDesc = nil
	file_attestation_dbus_service_proto_goTypes = nil
	file_attestation_dbus_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AttestationDBusServiceClient is the client API for AttestationDBusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AttestationDBusServiceClient interface {
	// GetStatus returns the attestation status.
	GetStatus(ctx context.Context, in *attestation_proto.GetStatusRequest, opts ...grpc.CallOption) (*attestation_proto.GetStatusReply, error)
	// CreateEnrollRequest creates enroll request.
	CreateEnrollRequest(ctx context.Context, in *attestation_proto.CreateEnrollRequestRequest, opts ...grpc.CallOption) (*attestation_proto.CreateEnrollRequestReply, error)
	// FinishEnroll finish enroll request.
	FinishEnroll(ctx context.Context, in *attestation_proto.FinishEnrollRequest, opts ...grpc.CallOption) (*attestation_proto.FinishEnrollReply, error)
	// CreateCertificateRequest create certificate request.
	CreateCertificateRequest(ctx context.Context, in *attestation_proto.CreateCertificateRequestRequest, opts ...grpc.CallOption) (*attestation_proto.CreateCertificateRequestReply, error)
	// FinishCertificateRequest finish certificate request.
	FinishCertificateRequest(ctx context.Context, in *attestation_proto.FinishCertificateRequestRequest, opts ...grpc.CallOption) (*attestation_proto.FinishCertificateRequestReply, error)
	// SignEnterpriseChallenge sign enterprise challenge.
	SignEnterpriseChallenge(ctx context.Context, in *attestation_proto.SignEnterpriseChallengeRequest, opts ...grpc.CallOption) (*attestation_proto.SignEnterpriseChallengeReply, error)
	// SignSimpleChallenge sign simple challenge.
	SignSimpleChallenge(ctx context.Context, in *attestation_proto.SignSimpleChallengeRequest, opts ...grpc.CallOption) (*attestation_proto.SignSimpleChallengeReply, error)
	// GetKeyInfo returns the key info.
	GetKeyInfo(ctx context.Context, in *attestation_proto.GetKeyInfoRequest, opts ...grpc.CallOption) (*attestation_proto.GetKeyInfoReply, error)
	// GetEnrollmentID returns the enrollment id.
	GetEnrollmentID(ctx context.Context, in *attestation_proto.GetEnrollmentIdRequest, opts ...grpc.CallOption) (*attestation_proto.GetEnrollmentIdReply, error)
	// SetKeyPayload sets a payload for a key.
	SetKeyPayload(ctx context.Context, in *attestation_proto.SetKeyPayloadRequest, opts ...grpc.CallOption) (*attestation_proto.SetKeyPayloadReply, error)
	// RegisterKeyWithChapsToken registers the key into chaps.
	RegisterKeyWithChapsToken(ctx context.Context, in *attestation_proto.RegisterKeyWithChapsTokenRequest, opts ...grpc.CallOption) (*attestation_proto.RegisterKeyWithChapsTokenReply, error)
	// DeleteKeys delete user's keys.
	DeleteKeys(ctx context.Context, in *attestation_proto.DeleteKeysRequest, opts ...grpc.CallOption) (*attestation_proto.DeleteKeysReply, error)
}

type attestationDBusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttestationDBusServiceClient(cc grpc.ClientConnInterface) AttestationDBusServiceClient {
	return &attestationDBusServiceClient{cc}
}

func (c *attestationDBusServiceClient) GetStatus(ctx context.Context, in *attestation_proto.GetStatusRequest, opts ...grpc.CallOption) (*attestation_proto.GetStatusReply, error) {
	out := new(attestation_proto.GetStatusReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationDBusService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationDBusServiceClient) CreateEnrollRequest(ctx context.Context, in *attestation_proto.CreateEnrollRequestRequest, opts ...grpc.CallOption) (*attestation_proto.CreateEnrollRequestReply, error) {
	out := new(attestation_proto.CreateEnrollRequestReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationDBusService/CreateEnrollRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationDBusServiceClient) FinishEnroll(ctx context.Context, in *attestation_proto.FinishEnrollRequest, opts ...grpc.CallOption) (*attestation_proto.FinishEnrollReply, error) {
	out := new(attestation_proto.FinishEnrollReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationDBusService/FinishEnroll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationDBusServiceClient) CreateCertificateRequest(ctx context.Context, in *attestation_proto.CreateCertificateRequestRequest, opts ...grpc.CallOption) (*attestation_proto.CreateCertificateRequestReply, error) {
	out := new(attestation_proto.CreateCertificateRequestReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationDBusService/CreateCertificateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationDBusServiceClient) FinishCertificateRequest(ctx context.Context, in *attestation_proto.FinishCertificateRequestRequest, opts ...grpc.CallOption) (*attestation_proto.FinishCertificateRequestReply, error) {
	out := new(attestation_proto.FinishCertificateRequestReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationDBusService/FinishCertificateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationDBusServiceClient) SignEnterpriseChallenge(ctx context.Context, in *attestation_proto.SignEnterpriseChallengeRequest, opts ...grpc.CallOption) (*attestation_proto.SignEnterpriseChallengeReply, error) {
	out := new(attestation_proto.SignEnterpriseChallengeReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationDBusService/SignEnterpriseChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationDBusServiceClient) SignSimpleChallenge(ctx context.Context, in *attestation_proto.SignSimpleChallengeRequest, opts ...grpc.CallOption) (*attestation_proto.SignSimpleChallengeReply, error) {
	out := new(attestation_proto.SignSimpleChallengeReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationDBusService/SignSimpleChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationDBusServiceClient) GetKeyInfo(ctx context.Context, in *attestation_proto.GetKeyInfoRequest, opts ...grpc.CallOption) (*attestation_proto.GetKeyInfoReply, error) {
	out := new(attestation_proto.GetKeyInfoReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationDBusService/GetKeyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationDBusServiceClient) GetEnrollmentID(ctx context.Context, in *attestation_proto.GetEnrollmentIdRequest, opts ...grpc.CallOption) (*attestation_proto.GetEnrollmentIdReply, error) {
	out := new(attestation_proto.GetEnrollmentIdReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationDBusService/GetEnrollmentID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationDBusServiceClient) SetKeyPayload(ctx context.Context, in *attestation_proto.SetKeyPayloadRequest, opts ...grpc.CallOption) (*attestation_proto.SetKeyPayloadReply, error) {
	out := new(attestation_proto.SetKeyPayloadReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationDBusService/SetKeyPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationDBusServiceClient) RegisterKeyWithChapsToken(ctx context.Context, in *attestation_proto.RegisterKeyWithChapsTokenRequest, opts ...grpc.CallOption) (*attestation_proto.RegisterKeyWithChapsTokenReply, error) {
	out := new(attestation_proto.RegisterKeyWithChapsTokenReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationDBusService/RegisterKeyWithChapsToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationDBusServiceClient) DeleteKeys(ctx context.Context, in *attestation_proto.DeleteKeysRequest, opts ...grpc.CallOption) (*attestation_proto.DeleteKeysReply, error) {
	out := new(attestation_proto.DeleteKeysReply)
	err := c.cc.Invoke(ctx, "/tast.cros.hwsec.AttestationDBusService/DeleteKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttestationDBusServiceServer is the server API for AttestationDBusService service.
type AttestationDBusServiceServer interface {
	// GetStatus returns the attestation status.
	GetStatus(context.Context, *attestation_proto.GetStatusRequest) (*attestation_proto.GetStatusReply, error)
	// CreateEnrollRequest creates enroll request.
	CreateEnrollRequest(context.Context, *attestation_proto.CreateEnrollRequestRequest) (*attestation_proto.CreateEnrollRequestReply, error)
	// FinishEnroll finish enroll request.
	FinishEnroll(context.Context, *attestation_proto.FinishEnrollRequest) (*attestation_proto.FinishEnrollReply, error)
	// CreateCertificateRequest create certificate request.
	CreateCertificateRequest(context.Context, *attestation_proto.CreateCertificateRequestRequest) (*attestation_proto.CreateCertificateRequestReply, error)
	// FinishCertificateRequest finish certificate request.
	FinishCertificateRequest(context.Context, *attestation_proto.FinishCertificateRequestRequest) (*attestation_proto.FinishCertificateRequestReply, error)
	// SignEnterpriseChallenge sign enterprise challenge.
	SignEnterpriseChallenge(context.Context, *attestation_proto.SignEnterpriseChallengeRequest) (*attestation_proto.SignEnterpriseChallengeReply, error)
	// SignSimpleChallenge sign simple challenge.
	SignSimpleChallenge(context.Context, *attestation_proto.SignSimpleChallengeRequest) (*attestation_proto.SignSimpleChallengeReply, error)
	// GetKeyInfo returns the key info.
	GetKeyInfo(context.Context, *attestation_proto.GetKeyInfoRequest) (*attestation_proto.GetKeyInfoReply, error)
	// GetEnrollmentID returns the enrollment id.
	GetEnrollmentID(context.Context, *attestation_proto.GetEnrollmentIdRequest) (*attestation_proto.GetEnrollmentIdReply, error)
	// SetKeyPayload sets a payload for a key.
	SetKeyPayload(context.Context, *attestation_proto.SetKeyPayloadRequest) (*attestation_proto.SetKeyPayloadReply, error)
	// RegisterKeyWithChapsToken registers the key into chaps.
	RegisterKeyWithChapsToken(context.Context, *attestation_proto.RegisterKeyWithChapsTokenRequest) (*attestation_proto.RegisterKeyWithChapsTokenReply, error)
	// DeleteKeys delete user's keys.
	DeleteKeys(context.Context, *attestation_proto.DeleteKeysRequest) (*attestation_proto.DeleteKeysReply, error)
}

// UnimplementedAttestationDBusServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAttestationDBusServiceServer struct {
}

func (*UnimplementedAttestationDBusServiceServer) GetStatus(context.Context, *attestation_proto.GetStatusRequest) (*attestation_proto.GetStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (*UnimplementedAttestationDBusServiceServer) CreateEnrollRequest(context.Context, *attestation_proto.CreateEnrollRequestRequest) (*attestation_proto.CreateEnrollRequestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnrollRequest not implemented")
}
func (*UnimplementedAttestationDBusServiceServer) FinishEnroll(context.Context, *attestation_proto.FinishEnrollRequest) (*attestation_proto.FinishEnrollReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishEnroll not implemented")
}
func (*UnimplementedAttestationDBusServiceServer) CreateCertificateRequest(context.Context, *attestation_proto.CreateCertificateRequestRequest) (*attestation_proto.CreateCertificateRequestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCertificateRequest not implemented")
}
func (*UnimplementedAttestationDBusServiceServer) FinishCertificateRequest(context.Context, *attestation_proto.FinishCertificateRequestRequest) (*attestation_proto.FinishCertificateRequestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishCertificateRequest not implemented")
}
func (*UnimplementedAttestationDBusServiceServer) SignEnterpriseChallenge(context.Context, *attestation_proto.SignEnterpriseChallengeRequest) (*attestation_proto.SignEnterpriseChallengeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignEnterpriseChallenge not implemented")
}
func (*UnimplementedAttestationDBusServiceServer) SignSimpleChallenge(context.Context, *attestation_proto.SignSimpleChallengeRequest) (*attestation_proto.SignSimpleChallengeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignSimpleChallenge not implemented")
}
func (*UnimplementedAttestationDBusServiceServer) GetKeyInfo(context.Context, *attestation_proto.GetKeyInfoRequest) (*attestation_proto.GetKeyInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyInfo not implemented")
}
func (*UnimplementedAttestationDBusServiceServer) GetEnrollmentID(context.Context, *attestation_proto.GetEnrollmentIdRequest) (*attestation_proto.GetEnrollmentIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnrollmentID not implemented")
}
func (*UnimplementedAttestationDBusServiceServer) SetKeyPayload(context.Context, *attestation_proto.SetKeyPayloadRequest) (*attestation_proto.SetKeyPayloadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetKeyPayload not implemented")
}
func (*UnimplementedAttestationDBusServiceServer) RegisterKeyWithChapsToken(context.Context, *attestation_proto.RegisterKeyWithChapsTokenRequest) (*attestation_proto.RegisterKeyWithChapsTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterKeyWithChapsToken not implemented")
}
func (*UnimplementedAttestationDBusServiceServer) DeleteKeys(context.Context, *attestation_proto.DeleteKeysRequest) (*attestation_proto.DeleteKeysReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKeys not implemented")
}

func RegisterAttestationDBusServiceServer(s *grpc.Server, srv AttestationDBusServiceServer) {
	s.RegisterService(&_AttestationDBusService_serviceDesc, srv)
}

func _AttestationDBusService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationDBusServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationDBusService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationDBusServiceServer).GetStatus(ctx, req.(*attestation_proto.GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationDBusService_CreateEnrollRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.CreateEnrollRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationDBusServiceServer).CreateEnrollRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationDBusService/CreateEnrollRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationDBusServiceServer).CreateEnrollRequest(ctx, req.(*attestation_proto.CreateEnrollRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationDBusService_FinishEnroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.FinishEnrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationDBusServiceServer).FinishEnroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationDBusService/FinishEnroll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationDBusServiceServer).FinishEnroll(ctx, req.(*attestation_proto.FinishEnrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationDBusService_CreateCertificateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.CreateCertificateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationDBusServiceServer).CreateCertificateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationDBusService/CreateCertificateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationDBusServiceServer).CreateCertificateRequest(ctx, req.(*attestation_proto.CreateCertificateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationDBusService_FinishCertificateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.FinishCertificateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationDBusServiceServer).FinishCertificateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationDBusService/FinishCertificateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationDBusServiceServer).FinishCertificateRequest(ctx, req.(*attestation_proto.FinishCertificateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationDBusService_SignEnterpriseChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.SignEnterpriseChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationDBusServiceServer).SignEnterpriseChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationDBusService/SignEnterpriseChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationDBusServiceServer).SignEnterpriseChallenge(ctx, req.(*attestation_proto.SignEnterpriseChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationDBusService_SignSimpleChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.SignSimpleChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationDBusServiceServer).SignSimpleChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationDBusService/SignSimpleChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationDBusServiceServer).SignSimpleChallenge(ctx, req.(*attestation_proto.SignSimpleChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationDBusService_GetKeyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.GetKeyInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationDBusServiceServer).GetKeyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationDBusService/GetKeyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationDBusServiceServer).GetKeyInfo(ctx, req.(*attestation_proto.GetKeyInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationDBusService_GetEnrollmentID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.GetEnrollmentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationDBusServiceServer).GetEnrollmentID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationDBusService/GetEnrollmentID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationDBusServiceServer).GetEnrollmentID(ctx, req.(*attestation_proto.GetEnrollmentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationDBusService_SetKeyPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.SetKeyPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationDBusServiceServer).SetKeyPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationDBusService/SetKeyPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationDBusServiceServer).SetKeyPayload(ctx, req.(*attestation_proto.SetKeyPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationDBusService_RegisterKeyWithChapsToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.RegisterKeyWithChapsTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationDBusServiceServer).RegisterKeyWithChapsToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationDBusService/RegisterKeyWithChapsToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationDBusServiceServer).RegisterKeyWithChapsToken(ctx, req.(*attestation_proto.RegisterKeyWithChapsTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationDBusService_DeleteKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(attestation_proto.DeleteKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationDBusServiceServer).DeleteKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.hwsec.AttestationDBusService/DeleteKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationDBusServiceServer).DeleteKeys(ctx, req.(*attestation_proto.DeleteKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AttestationDBusService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.hwsec.AttestationDBusService",
	HandlerType: (*AttestationDBusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _AttestationDBusService_GetStatus_Handler,
		},
		{
			MethodName: "CreateEnrollRequest",
			Handler:    _AttestationDBusService_CreateEnrollRequest_Handler,
		},
		{
			MethodName: "FinishEnroll",
			Handler:    _AttestationDBusService_FinishEnroll_Handler,
		},
		{
			MethodName: "CreateCertificateRequest",
			Handler:    _AttestationDBusService_CreateCertificateRequest_Handler,
		},
		{
			MethodName: "FinishCertificateRequest",
			Handler:    _AttestationDBusService_FinishCertificateRequest_Handler,
		},
		{
			MethodName: "SignEnterpriseChallenge",
			Handler:    _AttestationDBusService_SignEnterpriseChallenge_Handler,
		},
		{
			MethodName: "SignSimpleChallenge",
			Handler:    _AttestationDBusService_SignSimpleChallenge_Handler,
		},
		{
			MethodName: "GetKeyInfo",
			Handler:    _AttestationDBusService_GetKeyInfo_Handler,
		},
		{
			MethodName: "GetEnrollmentID",
			Handler:    _AttestationDBusService_GetEnrollmentID_Handler,
		},
		{
			MethodName: "SetKeyPayload",
			Handler:    _AttestationDBusService_SetKeyPayload_Handler,
		},
		{
			MethodName: "RegisterKeyWithChapsToken",
			Handler:    _AttestationDBusService_RegisterKeyWithChapsToken_Handler,
		},
		{
			MethodName: "DeleteKeys",
			Handler:    _AttestationDBusService_DeleteKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "attestation_dbus_service.proto",
}
