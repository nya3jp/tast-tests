// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bluetooth_service.proto

package network

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SetBluetoothPoweredRequest struct {
	Powered              bool     `protobuf:"varint,1,opt,name=powered,proto3" json:"powered,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetBluetoothPoweredRequest) Reset()         { *m = SetBluetoothPoweredRequest{} }
func (m *SetBluetoothPoweredRequest) String() string { return proto.CompactTextString(m) }
func (*SetBluetoothPoweredRequest) ProtoMessage()    {}
func (*SetBluetoothPoweredRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8a85ab5c487a308, []int{0}
}

func (m *SetBluetoothPoweredRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetBluetoothPoweredRequest.Unmarshal(m, b)
}
func (m *SetBluetoothPoweredRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetBluetoothPoweredRequest.Marshal(b, m, deterministic)
}
func (m *SetBluetoothPoweredRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetBluetoothPoweredRequest.Merge(m, src)
}
func (m *SetBluetoothPoweredRequest) XXX_Size() int {
	return xxx_messageInfo_SetBluetoothPoweredRequest.Size(m)
}
func (m *SetBluetoothPoweredRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetBluetoothPoweredRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetBluetoothPoweredRequest proto.InternalMessageInfo

func (m *SetBluetoothPoweredRequest) GetPowered() bool {
	if m != nil {
		return m.Powered
	}
	return false
}

type GetBluetoothPoweredResponse struct {
	Powered              bool     `protobuf:"varint,1,opt,name=powered,proto3" json:"powered,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBluetoothPoweredResponse) Reset()         { *m = GetBluetoothPoweredResponse{} }
func (m *GetBluetoothPoweredResponse) String() string { return proto.CompactTextString(m) }
func (*GetBluetoothPoweredResponse) ProtoMessage()    {}
func (*GetBluetoothPoweredResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8a85ab5c487a308, []int{1}
}

func (m *GetBluetoothPoweredResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBluetoothPoweredResponse.Unmarshal(m, b)
}
func (m *GetBluetoothPoweredResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBluetoothPoweredResponse.Marshal(b, m, deterministic)
}
func (m *GetBluetoothPoweredResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBluetoothPoweredResponse.Merge(m, src)
}
func (m *GetBluetoothPoweredResponse) XXX_Size() int {
	return xxx_messageInfo_GetBluetoothPoweredResponse.Size(m)
}
func (m *GetBluetoothPoweredResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBluetoothPoweredResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBluetoothPoweredResponse proto.InternalMessageInfo

func (m *GetBluetoothPoweredResponse) GetPowered() bool {
	if m != nil {
		return m.Powered
	}
	return false
}

func init() {
	proto.RegisterType((*SetBluetoothPoweredRequest)(nil), "tast.cros.network.SetBluetoothPoweredRequest")
	proto.RegisterType((*GetBluetoothPoweredResponse)(nil), "tast.cros.network.GetBluetoothPoweredResponse")
}

func init() { proto.RegisterFile("bluetooth_service.proto", fileDescriptor_d8a85ab5c487a308) }

var fileDescriptor_d8a85ab5c487a308 = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x40, 0x5b, 0x0f, 0x2a, 0x7b, 0xd2, 0x2d, 0x68, 0x49, 0x2e, 0x12, 0x10, 0xbd, 0x38, 0x0b,
	0x0a, 0x7a, 0x2f, 0xa8, 0x47, 0xa5, 0x05, 0x0f, 0x1e, 0x2c, 0x49, 0x3a, 0xb6, 0xc1, 0x24, 0x13,
	0x77, 0x66, 0x2d, 0xfe, 0x8f, 0x1f, 0x2a, 0x69, 0x9a, 0x5e, 0xdc, 0xf5, 0xb8, 0xcb, 0xbc, 0x9d,
	0xf7, 0x58, 0x75, 0x9a, 0x95, 0x0e, 0x85, 0x48, 0x56, 0x73, 0x46, 0xfb, 0x55, 0xe4, 0x08, 0x8d,
	0x25, 0x21, 0x7d, 0x2c, 0x29, 0x0b, 0xe4, 0x96, 0x18, 0x6a, 0x94, 0x35, 0xd9, 0x8f, 0x28, 0x5e,
	0x12, 0x2d, 0x4b, 0x34, 0x9b, 0x81, 0xcc, 0xbd, 0x1b, 0xac, 0x1a, 0xf9, 0xee, 0xe6, 0x93, 0x5b,
	0x15, 0xcd, 0x50, 0x26, 0xfd, 0x6b, 0xcf, 0xb4, 0x46, 0x8b, 0x8b, 0x29, 0x7e, 0x3a, 0x64, 0xd1,
	0x63, 0x75, 0xd0, 0x74, 0x37, 0xe3, 0xe1, 0xd9, 0xf0, 0xf2, 0x70, 0xda, 0x1f, 0x93, 0x3b, 0x15,
	0x3f, 0xfa, 0x38, 0x6e, 0xa8, 0x66, 0x0c, 0x83, 0xd7, 0x3f, 0x7b, 0xea, 0x68, 0x87, 0xcd, 0x3a,
	0x77, 0xfd, 0xa6, 0x46, 0x1e, 0x0b, 0x7d, 0x05, 0x7f, 0x6a, 0x20, 0x6c, 0x1b, 0x9d, 0x40, 0x57,
	0x0a, 0x7d, 0x29, 0xdc, 0xb7, 0xa5, 0xc9, 0x40, 0xcf, 0xd5, 0xc8, 0x63, 0xab, 0x03, 0x40, 0x04,
	0x9e, 0xbd, 0xff, 0xd4, 0x26, 0x03, 0xfd, 0xa4, 0xe2, 0x97, 0xb4, 0x2c, 0x16, 0xa9, 0xe0, 0x6e,
	0xea, 0xc1, 0xd5, 0xb9, 0x14, 0x54, 0xa7, 0x65, 0x70, 0x51, 0xd0, 0x78, 0x72, 0xf1, 0x7a, 0x9e,
	0xaf, 0x2c, 0x55, 0x85, 0xab, 0x88, 0x4d, 0xab, 0x63, 0xb6, 0x1f, 0xcd, 0xa6, 0xf5, 0x32, 0x5b,
	0xaf, 0x6c, 0x7f, 0x83, 0xde, 0xfc, 0x06, 0x00, 0x00, 0xff, 0xff, 0x6b, 0xc3, 0x99, 0x4f, 0x12,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BluetoothServiceClient is the client API for BluetoothService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BluetoothServiceClient interface {
	// SetBluetoothPowered enables/disables the Bluetooth device through dbus.
	SetBluetoothPowered(ctx context.Context, in *SetBluetoothPoweredRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetBluetoothPowered returns the status of the bluetooth adapter.
	GetBluetoothPowered(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetBluetoothPoweredResponse, error)
	// ValidateBluetoothFunctional checks to see whether the Bluetooth device is usable.
	ValidateBluetoothFunctional(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type bluetoothServiceClient struct {
	cc *grpc.ClientConn
}

func NewBluetoothServiceClient(cc *grpc.ClientConn) BluetoothServiceClient {
	return &bluetoothServiceClient{cc}
}

func (c *bluetoothServiceClient) SetBluetoothPowered(ctx context.Context, in *SetBluetoothPoweredRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.BluetoothService/SetBluetoothPowered", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothServiceClient) GetBluetoothPowered(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetBluetoothPoweredResponse, error) {
	out := new(GetBluetoothPoweredResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.BluetoothService/GetBluetoothPowered", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothServiceClient) ValidateBluetoothFunctional(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.BluetoothService/ValidateBluetoothFunctional", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BluetoothServiceServer is the server API for BluetoothService service.
type BluetoothServiceServer interface {
	// SetBluetoothPowered enables/disables the Bluetooth device through dbus.
	SetBluetoothPowered(context.Context, *SetBluetoothPoweredRequest) (*empty.Empty, error)
	// GetBluetoothPowered returns the status of the bluetooth adapter.
	GetBluetoothPowered(context.Context, *empty.Empty) (*GetBluetoothPoweredResponse, error)
	// ValidateBluetoothFunctional checks to see whether the Bluetooth device is usable.
	ValidateBluetoothFunctional(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedBluetoothServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBluetoothServiceServer struct {
}

func (*UnimplementedBluetoothServiceServer) SetBluetoothPowered(ctx context.Context, req *SetBluetoothPoweredRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBluetoothPowered not implemented")
}
func (*UnimplementedBluetoothServiceServer) GetBluetoothPowered(ctx context.Context, req *empty.Empty) (*GetBluetoothPoweredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBluetoothPowered not implemented")
}
func (*UnimplementedBluetoothServiceServer) ValidateBluetoothFunctional(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateBluetoothFunctional not implemented")
}

func RegisterBluetoothServiceServer(s *grpc.Server, srv BluetoothServiceServer) {
	s.RegisterService(&_BluetoothService_serviceDesc, srv)
}

func _BluetoothService_SetBluetoothPowered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBluetoothPoweredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothServiceServer).SetBluetoothPowered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.BluetoothService/SetBluetoothPowered",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothServiceServer).SetBluetoothPowered(ctx, req.(*SetBluetoothPoweredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluetoothService_GetBluetoothPowered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothServiceServer).GetBluetoothPowered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.BluetoothService/GetBluetoothPowered",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothServiceServer).GetBluetoothPowered(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluetoothService_ValidateBluetoothFunctional_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothServiceServer).ValidateBluetoothFunctional(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.BluetoothService/ValidateBluetoothFunctional",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothServiceServer).ValidateBluetoothFunctional(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _BluetoothService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.network.BluetoothService",
	HandlerType: (*BluetoothServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetBluetoothPowered",
			Handler:    _BluetoothService_SetBluetoothPowered_Handler,
		},
		{
			MethodName: "GetBluetoothPowered",
			Handler:    _BluetoothService_GetBluetoothPowered_Handler,
		},
		{
			MethodName: "ValidateBluetoothFunctional",
			Handler:    _BluetoothService_ValidateBluetoothFunctional_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bluetooth_service.proto",
}
