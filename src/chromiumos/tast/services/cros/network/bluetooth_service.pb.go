// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bluetooth_service.proto

package network

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SetBluetoothStatusRequest struct {
	State                bool     `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	Credentials          string   `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetBluetoothStatusRequest) Reset()         { *m = SetBluetoothStatusRequest{} }
func (m *SetBluetoothStatusRequest) String() string { return proto.CompactTextString(m) }
func (*SetBluetoothStatusRequest) ProtoMessage()    {}
func (*SetBluetoothStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8a85ab5c487a308, []int{0}
}

func (m *SetBluetoothStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetBluetoothStatusRequest.Unmarshal(m, b)
}
func (m *SetBluetoothStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetBluetoothStatusRequest.Marshal(b, m, deterministic)
}
func (m *SetBluetoothStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetBluetoothStatusRequest.Merge(m, src)
}
func (m *SetBluetoothStatusRequest) XXX_Size() int {
	return xxx_messageInfo_SetBluetoothStatusRequest.Size(m)
}
func (m *SetBluetoothStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetBluetoothStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetBluetoothStatusRequest proto.InternalMessageInfo

func (m *SetBluetoothStatusRequest) GetState() bool {
	if m != nil {
		return m.State
	}
	return false
}

func (m *SetBluetoothStatusRequest) GetCredentials() string {
	if m != nil {
		return m.Credentials
	}
	return ""
}

type GetBluetoothStatusResponse struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBluetoothStatusResponse) Reset()         { *m = GetBluetoothStatusResponse{} }
func (m *GetBluetoothStatusResponse) String() string { return proto.CompactTextString(m) }
func (*GetBluetoothStatusResponse) ProtoMessage()    {}
func (*GetBluetoothStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8a85ab5c487a308, []int{1}
}

func (m *GetBluetoothStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBluetoothStatusResponse.Unmarshal(m, b)
}
func (m *GetBluetoothStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBluetoothStatusResponse.Marshal(b, m, deterministic)
}
func (m *GetBluetoothStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBluetoothStatusResponse.Merge(m, src)
}
func (m *GetBluetoothStatusResponse) XXX_Size() int {
	return xxx_messageInfo_GetBluetoothStatusResponse.Size(m)
}
func (m *GetBluetoothStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBluetoothStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBluetoothStatusResponse proto.InternalMessageInfo

func (m *GetBluetoothStatusResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func init() {
	proto.RegisterType((*SetBluetoothStatusRequest)(nil), "tast.cros.network.SetBluetoothStatusRequest")
	proto.RegisterType((*GetBluetoothStatusResponse)(nil), "tast.cros.network.GetBluetoothStatusResponse")
}

func init() { proto.RegisterFile("bluetooth_service.proto", fileDescriptor_d8a85ab5c487a308) }

var fileDescriptor_d8a85ab5c487a308 = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xdf, 0x4a, 0xc3, 0x50,
	0x0c, 0xc6, 0x57, 0xc1, 0xa1, 0xc7, 0x1b, 0x0d, 0x32, 0x67, 0xbd, 0x29, 0x05, 0x71, 0x17, 0x7a,
	0x0e, 0xa8, 0x4f, 0x30, 0x10, 0xef, 0xdb, 0x3b, 0x51, 0xa4, 0xad, 0x71, 0x2b, 0xb6, 0x4d, 0x3d,
	0xc9, 0x51, 0x7c, 0x4a, 0x5f, 0x49, 0xfa, 0x67, 0x38, 0xe8, 0x7a, 0x99, 0xf0, 0xe5, 0x97, 0x7c,
	0x5f, 0xd4, 0x59, 0x5a, 0x38, 0x14, 0x22, 0x59, 0xbf, 0x32, 0xda, 0xaf, 0x3c, 0x43, 0x5d, 0x5b,
	0x12, 0x82, 0x13, 0x49, 0x58, 0x74, 0x66, 0x89, 0x75, 0x85, 0xf2, 0x4d, 0xf6, 0xc3, 0xbf, 0x58,
	0x11, 0xad, 0x0a, 0x34, 0xad, 0x20, 0x75, 0xef, 0x06, 0xcb, 0x5a, 0x7e, 0x3a, 0x7d, 0x18, 0xab,
	0xf3, 0x18, 0x65, 0xb9, 0xa1, 0xc5, 0x92, 0x88, 0xe3, 0x08, 0x3f, 0x1d, 0xb2, 0xc0, 0xa9, 0xda,
	0x67, 0x49, 0x04, 0xe7, 0x5e, 0xe0, 0x2d, 0x0e, 0xa2, 0xae, 0x80, 0x40, 0x1d, 0x65, 0x16, 0xdf,
	0xb0, 0x92, 0x3c, 0x29, 0x78, 0xbe, 0x17, 0x78, 0x8b, 0xc3, 0x68, 0xbb, 0x15, 0xde, 0x2b, 0xff,
	0x71, 0x07, 0x94, 0x6b, 0xaa, 0x18, 0x61, 0xa6, 0xa6, 0xdc, 0x76, 0x7a, 0x6c, 0x5f, 0xdd, 0xfe,
	0x7a, 0xea, 0xf8, 0x7f, 0xa6, 0x73, 0x05, 0xcf, 0x0a, 0x86, 0xf7, 0xc1, 0xb5, 0x1e, 0xd8, 0xd4,
	0xa3, 0x36, 0xfc, 0x99, 0xee, 0x12, 0xd0, 0x9b, 0x04, 0xf4, 0x43, 0x93, 0x40, 0x38, 0x81, 0x17,
	0x05, 0xc3, 0x43, 0x61, 0x44, 0xef, 0xdf, 0xec, 0xd8, 0x3a, 0xee, 0x33, 0x9c, 0x2c, 0xaf, 0x9e,
	0x2e, 0xb3, 0xb5, 0xa5, 0x32, 0x77, 0x25, 0xb1, 0x69, 0x86, 0x4d, 0xff, 0x2d, 0x36, 0x0d, 0xc5,
	0xf4, 0x94, 0x74, 0xda, 0x6e, 0xba, 0xfb, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x57, 0x8d, 0x03, 0xd8,
	0xd7, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BluetoothServiceClient is the client API for BluetoothService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BluetoothServiceClient interface {
	// SetBluetoothStatus persistently enables/disables the Bluetooth device through the ui.
	SetBluetoothStatus(ctx context.Context, in *SetBluetoothStatusRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetBluetoothStatus returns the status of the bluetooth adapter.
	GetBluetoothStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetBluetoothStatusResponse, error)
}

type bluetoothServiceClient struct {
	cc *grpc.ClientConn
}

func NewBluetoothServiceClient(cc *grpc.ClientConn) BluetoothServiceClient {
	return &bluetoothServiceClient{cc}
}

func (c *bluetoothServiceClient) SetBluetoothStatus(ctx context.Context, in *SetBluetoothStatusRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.BluetoothService/SetBluetoothStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothServiceClient) GetBluetoothStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetBluetoothStatusResponse, error) {
	out := new(GetBluetoothStatusResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.BluetoothService/GetBluetoothStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BluetoothServiceServer is the server API for BluetoothService service.
type BluetoothServiceServer interface {
	// SetBluetoothStatus persistently enables/disables the Bluetooth device through the ui.
	SetBluetoothStatus(context.Context, *SetBluetoothStatusRequest) (*empty.Empty, error)
	// GetBluetoothStatus returns the status of the bluetooth adapter.
	GetBluetoothStatus(context.Context, *empty.Empty) (*GetBluetoothStatusResponse, error)
}

// UnimplementedBluetoothServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBluetoothServiceServer struct {
}

func (*UnimplementedBluetoothServiceServer) SetBluetoothStatus(ctx context.Context, req *SetBluetoothStatusRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBluetoothStatus not implemented")
}
func (*UnimplementedBluetoothServiceServer) GetBluetoothStatus(ctx context.Context, req *empty.Empty) (*GetBluetoothStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBluetoothStatus not implemented")
}

func RegisterBluetoothServiceServer(s *grpc.Server, srv BluetoothServiceServer) {
	s.RegisterService(&_BluetoothService_serviceDesc, srv)
}

func _BluetoothService_SetBluetoothStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBluetoothStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothServiceServer).SetBluetoothStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.BluetoothService/SetBluetoothStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothServiceServer).SetBluetoothStatus(ctx, req.(*SetBluetoothStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluetoothService_GetBluetoothStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothServiceServer).GetBluetoothStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.BluetoothService/GetBluetoothStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothServiceServer).GetBluetoothStatus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _BluetoothService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.network.BluetoothService",
	HandlerType: (*BluetoothServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetBluetoothStatus",
			Handler:    _BluetoothService_SetBluetoothStatus_Handler,
		},
		{
			MethodName: "GetBluetoothStatus",
			Handler:    _BluetoothService_GetBluetoothStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bluetooth_service.proto",
}
