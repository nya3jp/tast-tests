// Code generated by protoc-gen-go. DO NOT EDIT.
// source: wifi_service.proto

package network

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ConnectRequest struct {
	Ssid string `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
	// hidden denotes that if the SSID is hidden.
	Hidden bool `protobuf:"varint,2,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// security is the SecurityClass (defined in shill/service.go) of the WiFi
	// service to Connect.
	Security string `protobuf:"bytes,3,opt,name=security,proto3" json:"security,omitempty"`
	// shillprops is the shill properties the DUT should set to Connect to the
	// WiFi service.
	Shillprops           map[string]*ShillVal `protobuf:"bytes,4,rep,name=shillprops,proto3" json:"shillprops,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ConnectRequest) Reset()         { *m = ConnectRequest{} }
func (m *ConnectRequest) String() string { return proto.CompactTextString(m) }
func (*ConnectRequest) ProtoMessage()    {}
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{0}
}

func (m *ConnectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectRequest.Unmarshal(m, b)
}
func (m *ConnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectRequest.Marshal(b, m, deterministic)
}
func (m *ConnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectRequest.Merge(m, src)
}
func (m *ConnectRequest) XXX_Size() int {
	return xxx_messageInfo_ConnectRequest.Size(m)
}
func (m *ConnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectRequest proto.InternalMessageInfo

func (m *ConnectRequest) GetSsid() string {
	if m != nil {
		return m.Ssid
	}
	return ""
}

func (m *ConnectRequest) GetHidden() bool {
	if m != nil {
		return m.Hidden
	}
	return false
}

func (m *ConnectRequest) GetSecurity() string {
	if m != nil {
		return m.Security
	}
	return ""
}

func (m *ConnectRequest) GetShillprops() map[string]*ShillVal {
	if m != nil {
		return m.Shillprops
	}
	return nil
}

type ShillVal struct {
	// Types that are valid to be assigned to Val:
	//	*ShillVal_Str
	//	*ShillVal_Bool
	Val                  isShillVal_Val `protobuf_oneof:"val"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ShillVal) Reset()         { *m = ShillVal{} }
func (m *ShillVal) String() string { return proto.CompactTextString(m) }
func (*ShillVal) ProtoMessage()    {}
func (*ShillVal) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{1}
}

func (m *ShillVal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShillVal.Unmarshal(m, b)
}
func (m *ShillVal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShillVal.Marshal(b, m, deterministic)
}
func (m *ShillVal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShillVal.Merge(m, src)
}
func (m *ShillVal) XXX_Size() int {
	return xxx_messageInfo_ShillVal.Size(m)
}
func (m *ShillVal) XXX_DiscardUnknown() {
	xxx_messageInfo_ShillVal.DiscardUnknown(m)
}

var xxx_messageInfo_ShillVal proto.InternalMessageInfo

type isShillVal_Val interface {
	isShillVal_Val()
}

type ShillVal_Str struct {
	Str string `protobuf:"bytes,1,opt,name=str,proto3,oneof"`
}

type ShillVal_Bool struct {
	Bool bool `protobuf:"varint,2,opt,name=bool,proto3,oneof"`
}

func (*ShillVal_Str) isShillVal_Val() {}

func (*ShillVal_Bool) isShillVal_Val() {}

func (m *ShillVal) GetVal() isShillVal_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (m *ShillVal) GetStr() string {
	if x, ok := m.GetVal().(*ShillVal_Str); ok {
		return x.Str
	}
	return ""
}

func (m *ShillVal) GetBool() bool {
	if x, ok := m.GetVal().(*ShillVal_Bool); ok {
		return x.Bool
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ShillVal) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ShillVal_Str)(nil),
		(*ShillVal_Bool)(nil),
	}
}

type ConnectResponse struct {
	ServicePath          string   `protobuf:"bytes,1,opt,name=service_path,json=servicePath,proto3" json:"service_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectResponse) Reset()         { *m = ConnectResponse{} }
func (m *ConnectResponse) String() string { return proto.CompactTextString(m) }
func (*ConnectResponse) ProtoMessage()    {}
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{2}
}

func (m *ConnectResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectResponse.Unmarshal(m, b)
}
func (m *ConnectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectResponse.Marshal(b, m, deterministic)
}
func (m *ConnectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectResponse.Merge(m, src)
}
func (m *ConnectResponse) XXX_Size() int {
	return xxx_messageInfo_ConnectResponse.Size(m)
}
func (m *ConnectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectResponse proto.InternalMessageInfo

func (m *ConnectResponse) GetServicePath() string {
	if m != nil {
		return m.ServicePath
	}
	return ""
}

type DisconnectRequest struct {
	ServicePath          string   `protobuf:"bytes,1,opt,name=service_path,json=servicePath,proto3" json:"service_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DisconnectRequest) Reset()         { *m = DisconnectRequest{} }
func (m *DisconnectRequest) String() string { return proto.CompactTextString(m) }
func (*DisconnectRequest) ProtoMessage()    {}
func (*DisconnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{3}
}

func (m *DisconnectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DisconnectRequest.Unmarshal(m, b)
}
func (m *DisconnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DisconnectRequest.Marshal(b, m, deterministic)
}
func (m *DisconnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisconnectRequest.Merge(m, src)
}
func (m *DisconnectRequest) XXX_Size() int {
	return xxx_messageInfo_DisconnectRequest.Size(m)
}
func (m *DisconnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DisconnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DisconnectRequest proto.InternalMessageInfo

func (m *DisconnectRequest) GetServicePath() string {
	if m != nil {
		return m.ServicePath
	}
	return ""
}

type DeleteEntriesForSSIDRequest struct {
	Ssid                 string   `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteEntriesForSSIDRequest) Reset()         { *m = DeleteEntriesForSSIDRequest{} }
func (m *DeleteEntriesForSSIDRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteEntriesForSSIDRequest) ProtoMessage()    {}
func (*DeleteEntriesForSSIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{4}
}

func (m *DeleteEntriesForSSIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteEntriesForSSIDRequest.Unmarshal(m, b)
}
func (m *DeleteEntriesForSSIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteEntriesForSSIDRequest.Marshal(b, m, deterministic)
}
func (m *DeleteEntriesForSSIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteEntriesForSSIDRequest.Merge(m, src)
}
func (m *DeleteEntriesForSSIDRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteEntriesForSSIDRequest.Size(m)
}
func (m *DeleteEntriesForSSIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteEntriesForSSIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteEntriesForSSIDRequest proto.InternalMessageInfo

func (m *DeleteEntriesForSSIDRequest) GetSsid() string {
	if m != nil {
		return m.Ssid
	}
	return ""
}

type QueryServiceRequest struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryServiceRequest) Reset()         { *m = QueryServiceRequest{} }
func (m *QueryServiceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryServiceRequest) ProtoMessage()    {}
func (*QueryServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{5}
}

func (m *QueryServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryServiceRequest.Unmarshal(m, b)
}
func (m *QueryServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryServiceRequest.Marshal(b, m, deterministic)
}
func (m *QueryServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceRequest.Merge(m, src)
}
func (m *QueryServiceRequest) XXX_Size() int {
	return xxx_messageInfo_QueryServiceRequest.Size(m)
}
func (m *QueryServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceRequest proto.InternalMessageInfo

func (m *QueryServiceRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type QueryServiceResponse struct {
	Hidden               bool     `protobuf:"varint,1,opt,name=hidden,proto3" json:"hidden,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryServiceResponse) Reset()         { *m = QueryServiceResponse{} }
func (m *QueryServiceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryServiceResponse) ProtoMessage()    {}
func (*QueryServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{6}
}

func (m *QueryServiceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryServiceResponse.Unmarshal(m, b)
}
func (m *QueryServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryServiceResponse.Marshal(b, m, deterministic)
}
func (m *QueryServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceResponse.Merge(m, src)
}
func (m *QueryServiceResponse) XXX_Size() int {
	return xxx_messageInfo_QueryServiceResponse.Size(m)
}
func (m *QueryServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceResponse proto.InternalMessageInfo

func (m *QueryServiceResponse) GetHidden() bool {
	if m != nil {
		return m.Hidden
	}
	return false
}

type GetInterfaceResponse struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetInterfaceResponse) Reset()         { *m = GetInterfaceResponse{} }
func (m *GetInterfaceResponse) String() string { return proto.CompactTextString(m) }
func (*GetInterfaceResponse) ProtoMessage()    {}
func (*GetInterfaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{7}
}

func (m *GetInterfaceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetInterfaceResponse.Unmarshal(m, b)
}
func (m *GetInterfaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetInterfaceResponse.Marshal(b, m, deterministic)
}
func (m *GetInterfaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInterfaceResponse.Merge(m, src)
}
func (m *GetInterfaceResponse) XXX_Size() int {
	return xxx_messageInfo_GetInterfaceResponse.Size(m)
}
func (m *GetInterfaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInterfaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetInterfaceResponse proto.InternalMessageInfo

func (m *GetInterfaceResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetIPv4AddrsRequest struct {
	InterfaceName        string   `protobuf:"bytes,1,opt,name=interfaceName,proto3" json:"interfaceName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetIPv4AddrsRequest) Reset()         { *m = GetIPv4AddrsRequest{} }
func (m *GetIPv4AddrsRequest) String() string { return proto.CompactTextString(m) }
func (*GetIPv4AddrsRequest) ProtoMessage()    {}
func (*GetIPv4AddrsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{8}
}

func (m *GetIPv4AddrsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetIPv4AddrsRequest.Unmarshal(m, b)
}
func (m *GetIPv4AddrsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetIPv4AddrsRequest.Marshal(b, m, deterministic)
}
func (m *GetIPv4AddrsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIPv4AddrsRequest.Merge(m, src)
}
func (m *GetIPv4AddrsRequest) XXX_Size() int {
	return xxx_messageInfo_GetIPv4AddrsRequest.Size(m)
}
func (m *GetIPv4AddrsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIPv4AddrsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetIPv4AddrsRequest proto.InternalMessageInfo

func (m *GetIPv4AddrsRequest) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type GetIPv4AddrsResponse struct {
	Ipv4                 []string `protobuf:"bytes,1,rep,name=ipv4,proto3" json:"ipv4,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetIPv4AddrsResponse) Reset()         { *m = GetIPv4AddrsResponse{} }
func (m *GetIPv4AddrsResponse) String() string { return proto.CompactTextString(m) }
func (*GetIPv4AddrsResponse) ProtoMessage()    {}
func (*GetIPv4AddrsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{9}
}

func (m *GetIPv4AddrsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetIPv4AddrsResponse.Unmarshal(m, b)
}
func (m *GetIPv4AddrsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetIPv4AddrsResponse.Marshal(b, m, deterministic)
}
func (m *GetIPv4AddrsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIPv4AddrsResponse.Merge(m, src)
}
func (m *GetIPv4AddrsResponse) XXX_Size() int {
	return xxx_messageInfo_GetIPv4AddrsResponse.Size(m)
}
func (m *GetIPv4AddrsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIPv4AddrsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetIPv4AddrsResponse proto.InternalMessageInfo

func (m *GetIPv4AddrsResponse) GetIpv4() []string {
	if m != nil {
		return m.Ipv4
	}
	return nil
}

type ToggleInterfaceRequest struct {
	InterfaceName        string   `protobuf:"bytes,1,opt,name=interfaceName,proto3" json:"interfaceName,omitempty"`
	Enable               bool     `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ToggleInterfaceRequest) Reset()         { *m = ToggleInterfaceRequest{} }
func (m *ToggleInterfaceRequest) String() string { return proto.CompactTextString(m) }
func (*ToggleInterfaceRequest) ProtoMessage()    {}
func (*ToggleInterfaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{10}
}

func (m *ToggleInterfaceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ToggleInterfaceRequest.Unmarshal(m, b)
}
func (m *ToggleInterfaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ToggleInterfaceRequest.Marshal(b, m, deterministic)
}
func (m *ToggleInterfaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToggleInterfaceRequest.Merge(m, src)
}
func (m *ToggleInterfaceRequest) XXX_Size() int {
	return xxx_messageInfo_ToggleInterfaceRequest.Size(m)
}
func (m *ToggleInterfaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ToggleInterfaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ToggleInterfaceRequest proto.InternalMessageInfo

func (m *ToggleInterfaceRequest) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *ToggleInterfaceRequest) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func init() {
	proto.RegisterType((*ConnectRequest)(nil), "tast.cros.network.ConnectRequest")
	proto.RegisterMapType((map[string]*ShillVal)(nil), "tast.cros.network.ConnectRequest.ShillpropsEntry")
	proto.RegisterType((*ShillVal)(nil), "tast.cros.network.ShillVal")
	proto.RegisterType((*ConnectResponse)(nil), "tast.cros.network.ConnectResponse")
	proto.RegisterType((*DisconnectRequest)(nil), "tast.cros.network.DisconnectRequest")
	proto.RegisterType((*DeleteEntriesForSSIDRequest)(nil), "tast.cros.network.DeleteEntriesForSSIDRequest")
	proto.RegisterType((*QueryServiceRequest)(nil), "tast.cros.network.QueryServiceRequest")
	proto.RegisterType((*QueryServiceResponse)(nil), "tast.cros.network.QueryServiceResponse")
	proto.RegisterType((*GetInterfaceResponse)(nil), "tast.cros.network.GetInterfaceResponse")
	proto.RegisterType((*GetIPv4AddrsRequest)(nil), "tast.cros.network.GetIPv4AddrsRequest")
	proto.RegisterType((*GetIPv4AddrsResponse)(nil), "tast.cros.network.GetIPv4AddrsResponse")
	proto.RegisterType((*ToggleInterfaceRequest)(nil), "tast.cros.network.ToggleInterfaceRequest")
}

func init() { proto.RegisterFile("wifi_service.proto", fileDescriptor_7d1eecb28f2859f1) }

var fileDescriptor_7d1eecb28f2859f1 = []byte{
	// 650 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xdf, 0x4f, 0x1a, 0x41,
	0x10, 0x06, 0x41, 0xa5, 0x83, 0x2d, 0x75, 0x24, 0x86, 0xe0, 0x0b, 0x6e, 0x6c, 0xd5, 0x3e, 0x1c,
	0xd1, 0x9a, 0xa6, 0xa9, 0x7d, 0xa9, 0x62, 0xab, 0x49, 0xd3, 0xe8, 0x41, 0x6d, 0xe2, 0x8b, 0x3d,
	0x60, 0x80, 0x8d, 0xc7, 0xed, 0x75, 0x77, 0xc1, 0xf0, 0x17, 0xf4, 0xff, 0xea, 0x5f, 0xd6, 0xdc,
	0x2f, 0x38, 0xf0, 0xc0, 0xd6, 0xb7, 0x99, 0xbd, 0xef, 0x9b, 0x99, 0x9d, 0xfd, 0xbe, 0x03, 0xbc,
	0xe7, 0x1d, 0x7e, 0xab, 0x48, 0x0e, 0x79, 0x8b, 0x0c, 0x57, 0x0a, 0x2d, 0x70, 0x5d, 0x5b, 0x4a,
	0x1b, 0x2d, 0x29, 0x94, 0xe1, 0x90, 0xbe, 0x17, 0xf2, 0xae, 0xbc, 0xd5, 0x15, 0xa2, 0x6b, 0x53,
	0xd5, 0x07, 0x34, 0x07, 0x9d, 0x2a, 0xf5, 0x5d, 0x3d, 0x0a, 0xf0, 0xec, 0xf7, 0x12, 0xbc, 0x38,
	0x15, 0x8e, 0x43, 0x2d, 0x6d, 0xd2, 0xaf, 0x01, 0x29, 0x8d, 0x08, 0x59, 0xa5, 0x78, 0xbb, 0x94,
	0xae, 0xa4, 0xf7, 0x9e, 0x99, 0x7e, 0x8c, 0x9b, 0xb0, 0xd2, 0xe3, 0xed, 0x36, 0x39, 0xa5, 0xa5,
	0x4a, 0x7a, 0x2f, 0x67, 0x86, 0x19, 0x96, 0x21, 0xa7, 0xa8, 0x35, 0x90, 0x5c, 0x8f, 0x4a, 0x19,
	0x1f, 0x3f, 0xce, 0xf1, 0x0a, 0x40, 0xf5, 0xb8, 0x6d, 0xbb, 0x52, 0xb8, 0xaa, 0x94, 0xad, 0x64,
	0xf6, 0xf2, 0x87, 0x07, 0xc6, 0x83, 0xf9, 0x8c, 0xe9, 0xf6, 0x46, 0x7d, 0xcc, 0x39, 0x73, 0xb4,
	0x1c, 0x99, 0xb1, 0x22, 0xe5, 0x1b, 0x28, 0xcc, 0x7c, 0xc6, 0x97, 0x90, 0xb9, 0xa3, 0x51, 0x38,
	0xac, 0x17, 0xe2, 0x01, 0x2c, 0x0f, 0x2d, 0x7b, 0x40, 0xfe, 0xa8, 0xf9, 0xc3, 0xad, 0x84, 0x96,
	0x7e, 0x91, 0x6b, 0xcb, 0x36, 0x03, 0xe4, 0x87, 0xa5, 0xf7, 0x69, 0x76, 0x0c, 0xb9, 0xe8, 0x18,
	0x11, 0x32, 0x4a, 0xcb, 0xa0, 0xe8, 0x79, 0xca, 0xf4, 0x12, 0x2c, 0x42, 0xb6, 0x29, 0x84, 0x1d,
	0x2c, 0xe0, 0x3c, 0x65, 0xfa, 0xd9, 0xc9, 0x32, 0x64, 0x86, 0x96, 0xcd, 0x8e, 0xa0, 0x30, 0xbe,
	0x86, 0x72, 0x85, 0xa3, 0x08, 0xb7, 0x61, 0x2d, 0x7c, 0x9a, 0x5b, 0xd7, 0xd2, 0xbd, 0x70, 0xc2,
	0x7c, 0x78, 0x76, 0x69, 0xe9, 0x1e, 0x7b, 0x07, 0xeb, 0x35, 0xae, 0x5a, 0xd3, 0xeb, 0xff, 0x07,
	0xde, 0x01, 0x6c, 0xd5, 0xc8, 0x26, 0x4d, 0xde, 0x0a, 0x38, 0xa9, 0xcf, 0x42, 0xd6, 0xeb, 0x17,
	0xb5, 0x05, 0x0f, 0xc8, 0xf6, 0x61, 0xe3, 0x6a, 0x40, 0x72, 0x54, 0x0f, 0xca, 0xc4, 0xa0, 0xb1,
	0x26, 0x7e, 0xcc, 0x0c, 0x28, 0x4e, 0x43, 0xc3, 0x0b, 0x4d, 0x34, 0x90, 0x8e, 0x6b, 0x80, 0xbd,
	0x81, 0xe2, 0x17, 0xd2, 0x17, 0x8e, 0x26, 0xd9, 0xb1, 0x62, 0x78, 0x84, 0xac, 0x63, 0xf5, 0x29,
	0xaa, 0xed, 0xc5, 0xec, 0x18, 0x36, 0x3c, 0xec, 0xe5, 0xf0, 0xe8, 0x53, 0xbb, 0x2d, 0x55, 0x34,
	0xc6, 0x0e, 0x3c, 0xe7, 0x11, 0xff, 0xdb, 0x84, 0x33, 0x7d, 0x18, 0x35, 0x9a, 0x90, 0x27, 0x8d,
	0xb8, 0x3b, 0x3c, 0x2a, 0xa5, 0x2b, 0x19, 0xaf, 0x91, 0x17, 0xb3, 0x6b, 0xd8, 0x6c, 0x88, 0x6e,
	0xd7, 0xa6, 0xd8, 0x5c, 0xff, 0xd1, 0xcb, 0xbb, 0x2c, 0x39, 0x56, 0xd3, 0xa6, 0x48, 0xf0, 0x41,
	0x76, 0xf8, 0x67, 0x05, 0xf2, 0x3f, 0x78, 0x87, 0x87, 0xcb, 0xc1, 0x63, 0x58, 0xbd, 0x70, 0xb8,
	0xae, 0x7d, 0x6f, 0xe0, 0xa6, 0x11, 0x18, 0xcd, 0x88, 0x8c, 0x66, 0x9c, 0x79, 0x46, 0x2b, 0xcf,
	0x39, 0x67, 0x29, 0x3c, 0x85, 0x82, 0x49, 0xdc, 0xe1, 0xba, 0x41, 0x4a, 0xd7, 0xb5, 0xa5, 0xe9,
	0x09, 0x45, 0x3e, 0x42, 0xae, 0x41, 0x96, 0xac, 0x89, 0x7b, 0xe7, 0x09, 0x6c, 0x13, 0x56, 0x43,
	0xe1, 0xe2, 0xf6, 0xa3, 0xde, 0x2c, 0xb3, 0x45, 0x90, 0xe0, 0x35, 0x58, 0x0a, 0xbf, 0x02, 0x4c,
	0x64, 0x8d, 0x3b, 0x09, 0x9c, 0x07, 0xaa, 0x5f, 0x30, 0xe1, 0x4f, 0x28, 0x26, 0x89, 0x1d, 0x8d,
	0xa4, 0xba, 0xf3, 0x5d, 0xb1, 0xa0, 0x83, 0x05, 0x6b, 0x71, 0xc1, 0xe3, 0xeb, 0x84, 0xca, 0x09,
	0xe6, 0x29, 0xef, 0x3e, 0x8a, 0x1b, 0xaf, 0xe4, 0x0a, 0xd6, 0xe2, 0x1e, 0x99, 0xfb, 0x50, 0x49,
	0x25, 0x93, 0xcc, 0xc5, 0x52, 0x78, 0x0d, 0x85, 0x19, 0x85, 0xe3, 0x7e, 0x02, 0x3b, 0xd9, 0x05,
	0x8b, 0xb7, 0x11, 0x77, 0x59, 0xe2, 0x36, 0x12, 0x3c, 0x3c, 0x77, 0xf4, 0x59, 0xbb, 0xb2, 0xd4,
	0xc9, 0xee, 0xcd, 0xab, 0x56, 0x4f, 0x8a, 0x3e, 0x1f, 0xf4, 0x85, 0xaa, 0x7a, 0xb4, 0x6a, 0xf8,
	0x7b, 0x53, 0x55, 0x8f, 0x5f, 0x0d, 0xf9, 0xcd, 0x15, 0x7f, 0xba, 0xb7, 0x7f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x94, 0x1e, 0x2b, 0xdd, 0xea, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WifiServiceClient is the client API for WifiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WifiServiceClient interface {
	// InitDUT initialize the DUT for WiFi testing.
	InitDUT(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// ReinitTestState cleans and sets up the environment for a single WiFi testcase.
	ReinitTestState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// TearDown reverts the settings made in InitDUT (and also ReinitTestState).
	TearDown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Connect attempts to connect WiFi network.
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
	// Disconnect attempts to disconnect from a service.
	Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// DeleteEntriesForSSID deletes all WiFi profile entries for a given ssid.
	DeleteEntriesForSSID(ctx context.Context, in *DeleteEntriesForSSIDRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// QueryService queries shill service information.
	QueryService(ctx context.Context, in *QueryServiceRequest, opts ...grpc.CallOption) (*QueryServiceResponse, error)
	// GetInterface returns the WiFi device interface name (e.g., wlan0).
	GetInterface(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetInterfaceResponse, error)
	// ToggleInterface enables/disables the WiFi interface from shill.
	ToggleInterface(ctx context.Context, in *ToggleInterfaceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetIPv4Addrs returns the IPv4 addresses for the network interface.
	GetIPv4Addrs(ctx context.Context, in *GetIPv4AddrsRequest, opts ...grpc.CallOption) (*GetIPv4AddrsResponse, error)
}

type wifiServiceClient struct {
	cc *grpc.ClientConn
}

func NewWifiServiceClient(cc *grpc.ClientConn) WifiServiceClient {
	return &wifiServiceClient{cc}
}

func (c *wifiServiceClient) InitDUT(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/InitDUT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) ReinitTestState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/ReinitTestState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) TearDown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/TearDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) DeleteEntriesForSSID(ctx context.Context, in *DeleteEntriesForSSIDRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/DeleteEntriesForSSID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) QueryService(ctx context.Context, in *QueryServiceRequest, opts ...grpc.CallOption) (*QueryServiceResponse, error) {
	out := new(QueryServiceResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/QueryService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) GetInterface(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetInterfaceResponse, error) {
	out := new(GetInterfaceResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/GetInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) ToggleInterface(ctx context.Context, in *ToggleInterfaceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/ToggleInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) GetIPv4Addrs(ctx context.Context, in *GetIPv4AddrsRequest, opts ...grpc.CallOption) (*GetIPv4AddrsResponse, error) {
	out := new(GetIPv4AddrsResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/GetIPv4Addrs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WifiServiceServer is the server API for WifiService service.
type WifiServiceServer interface {
	// InitDUT initialize the DUT for WiFi testing.
	InitDUT(context.Context, *empty.Empty) (*empty.Empty, error)
	// ReinitTestState cleans and sets up the environment for a single WiFi testcase.
	ReinitTestState(context.Context, *empty.Empty) (*empty.Empty, error)
	// TearDown reverts the settings made in InitDUT (and also ReinitTestState).
	TearDown(context.Context, *empty.Empty) (*empty.Empty, error)
	// Connect attempts to connect WiFi network.
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	// Disconnect attempts to disconnect from a service.
	Disconnect(context.Context, *DisconnectRequest) (*empty.Empty, error)
	// DeleteEntriesForSSID deletes all WiFi profile entries for a given ssid.
	DeleteEntriesForSSID(context.Context, *DeleteEntriesForSSIDRequest) (*empty.Empty, error)
	// QueryService queries shill service information.
	QueryService(context.Context, *QueryServiceRequest) (*QueryServiceResponse, error)
	// GetInterface returns the WiFi device interface name (e.g., wlan0).
	GetInterface(context.Context, *empty.Empty) (*GetInterfaceResponse, error)
	// ToggleInterface enables/disables the WiFi interface from shill.
	ToggleInterface(context.Context, *ToggleInterfaceRequest) (*empty.Empty, error)
	// GetIPv4Addrs returns the IPv4 addresses for the network interface.
	GetIPv4Addrs(context.Context, *GetIPv4AddrsRequest) (*GetIPv4AddrsResponse, error)
}

// UnimplementedWifiServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWifiServiceServer struct {
}

func (*UnimplementedWifiServiceServer) InitDUT(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDUT not implemented")
}
func (*UnimplementedWifiServiceServer) ReinitTestState(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReinitTestState not implemented")
}
func (*UnimplementedWifiServiceServer) TearDown(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TearDown not implemented")
}
func (*UnimplementedWifiServiceServer) Connect(ctx context.Context, req *ConnectRequest) (*ConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedWifiServiceServer) Disconnect(ctx context.Context, req *DisconnectRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (*UnimplementedWifiServiceServer) DeleteEntriesForSSID(ctx context.Context, req *DeleteEntriesForSSIDRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntriesForSSID not implemented")
}
func (*UnimplementedWifiServiceServer) QueryService(ctx context.Context, req *QueryServiceRequest) (*QueryServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryService not implemented")
}
func (*UnimplementedWifiServiceServer) GetInterface(ctx context.Context, req *empty.Empty) (*GetInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterface not implemented")
}
func (*UnimplementedWifiServiceServer) ToggleInterface(ctx context.Context, req *ToggleInterfaceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleInterface not implemented")
}
func (*UnimplementedWifiServiceServer) GetIPv4Addrs(ctx context.Context, req *GetIPv4AddrsRequest) (*GetIPv4AddrsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIPv4Addrs not implemented")
}

func RegisterWifiServiceServer(s *grpc.Server, srv WifiServiceServer) {
	s.RegisterService(&_WifiService_serviceDesc, srv)
}

func _WifiService_InitDUT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).InitDUT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/InitDUT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).InitDUT(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_ReinitTestState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).ReinitTestState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/ReinitTestState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).ReinitTestState(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_TearDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).TearDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/TearDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).TearDown(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).Disconnect(ctx, req.(*DisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_DeleteEntriesForSSID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntriesForSSIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).DeleteEntriesForSSID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/DeleteEntriesForSSID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).DeleteEntriesForSSID(ctx, req.(*DeleteEntriesForSSIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_QueryService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).QueryService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/QueryService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).QueryService(ctx, req.(*QueryServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_GetInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).GetInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/GetInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).GetInterface(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_ToggleInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).ToggleInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/ToggleInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).ToggleInterface(ctx, req.(*ToggleInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_GetIPv4Addrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIPv4AddrsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).GetIPv4Addrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/GetIPv4Addrs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).GetIPv4Addrs(ctx, req.(*GetIPv4AddrsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WifiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.network.WifiService",
	HandlerType: (*WifiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitDUT",
			Handler:    _WifiService_InitDUT_Handler,
		},
		{
			MethodName: "ReinitTestState",
			Handler:    _WifiService_ReinitTestState_Handler,
		},
		{
			MethodName: "TearDown",
			Handler:    _WifiService_TearDown_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _WifiService_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _WifiService_Disconnect_Handler,
		},
		{
			MethodName: "DeleteEntriesForSSID",
			Handler:    _WifiService_DeleteEntriesForSSID_Handler,
		},
		{
			MethodName: "QueryService",
			Handler:    _WifiService_QueryService_Handler,
		},
		{
			MethodName: "GetInterface",
			Handler:    _WifiService_GetInterface_Handler,
		},
		{
			MethodName: "ToggleInterface",
			Handler:    _WifiService_ToggleInterface_Handler,
		},
		{
			MethodName: "GetIPv4Addrs",
			Handler:    _WifiService_GetIPv4Addrs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wifi_service.proto",
}
