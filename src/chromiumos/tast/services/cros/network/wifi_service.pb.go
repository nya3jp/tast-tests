// Code generated by protoc-gen-go. DO NOT EDIT.
// source: wifi_service.proto

package network

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Criterion checking methods.
type ExpectShillPropertyRequest_CheckMethod int32

const (
	// Check if the property value is expected; if not, wait until it is expected.
	ExpectShillPropertyRequest_CHECK_WAIT ExpectShillPropertyRequest_CheckMethod = 0
	// Check on property change.
	ExpectShillPropertyRequest_ON_CHANGE ExpectShillPropertyRequest_CheckMethod = 1
	// Check if the property value is expected.
	ExpectShillPropertyRequest_CHECK_ONLY ExpectShillPropertyRequest_CheckMethod = 2
)

var ExpectShillPropertyRequest_CheckMethod_name = map[int32]string{
	0: "CHECK_WAIT",
	1: "ON_CHANGE",
	2: "CHECK_ONLY",
}

var ExpectShillPropertyRequest_CheckMethod_value = map[string]int32{
	"CHECK_WAIT": 0,
	"ON_CHANGE":  1,
	"CHECK_ONLY": 2,
}

func (x ExpectShillPropertyRequest_CheckMethod) String() string {
	return proto.EnumName(ExpectShillPropertyRequest_CheckMethod_name, int32(x))
}

func (ExpectShillPropertyRequest_CheckMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{29, 0}
}

type ConnectRequest struct {
	Ssid []byte `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
	// hidden denotes that if the SSID is hidden.
	Hidden bool `protobuf:"varint,2,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// security is the SecurityClass (defined in shill/service.go) of the WiFi
	// service to Connect.
	Security string `protobuf:"bytes,3,opt,name=security,proto3" json:"security,omitempty"`
	// shillprops is the shill properties the DUT should set to Connect to the
	// WiFi service.
	Shillprops           map[string]*ShillVal `protobuf:"bytes,4,rep,name=shillprops,proto3" json:"shillprops,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ConnectRequest) Reset()         { *m = ConnectRequest{} }
func (m *ConnectRequest) String() string { return proto.CompactTextString(m) }
func (*ConnectRequest) ProtoMessage()    {}
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{0}
}

func (m *ConnectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectRequest.Unmarshal(m, b)
}
func (m *ConnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectRequest.Marshal(b, m, deterministic)
}
func (m *ConnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectRequest.Merge(m, src)
}
func (m *ConnectRequest) XXX_Size() int {
	return xxx_messageInfo_ConnectRequest.Size(m)
}
func (m *ConnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectRequest proto.InternalMessageInfo

func (m *ConnectRequest) GetSsid() []byte {
	if m != nil {
		return m.Ssid
	}
	return nil
}

func (m *ConnectRequest) GetHidden() bool {
	if m != nil {
		return m.Hidden
	}
	return false
}

func (m *ConnectRequest) GetSecurity() string {
	if m != nil {
		return m.Security
	}
	return ""
}

func (m *ConnectRequest) GetShillprops() map[string]*ShillVal {
	if m != nil {
		return m.Shillprops
	}
	return nil
}

type ShillVal struct {
	// Types that are valid to be assigned to Val:
	//	*ShillVal_Str
	//	*ShillVal_Bool
	//	*ShillVal_Uint32
	//	*ShillVal_StrArray
	//	*ShillVal_Uint32Array
	Val                  isShillVal_Val `protobuf_oneof:"val"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ShillVal) Reset()         { *m = ShillVal{} }
func (m *ShillVal) String() string { return proto.CompactTextString(m) }
func (*ShillVal) ProtoMessage()    {}
func (*ShillVal) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{1}
}

func (m *ShillVal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShillVal.Unmarshal(m, b)
}
func (m *ShillVal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShillVal.Marshal(b, m, deterministic)
}
func (m *ShillVal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShillVal.Merge(m, src)
}
func (m *ShillVal) XXX_Size() int {
	return xxx_messageInfo_ShillVal.Size(m)
}
func (m *ShillVal) XXX_DiscardUnknown() {
	xxx_messageInfo_ShillVal.DiscardUnknown(m)
}

var xxx_messageInfo_ShillVal proto.InternalMessageInfo

type isShillVal_Val interface {
	isShillVal_Val()
}

type ShillVal_Str struct {
	Str string `protobuf:"bytes,1,opt,name=str,proto3,oneof"`
}

type ShillVal_Bool struct {
	Bool bool `protobuf:"varint,2,opt,name=bool,proto3,oneof"`
}

type ShillVal_Uint32 struct {
	Uint32 uint32 `protobuf:"varint,3,opt,name=uint32,proto3,oneof"`
}

type ShillVal_StrArray struct {
	StrArray *StrArray `protobuf:"bytes,4,opt,name=str_array,json=strArray,proto3,oneof"`
}

type ShillVal_Uint32Array struct {
	Uint32Array *Uint32Array `protobuf:"bytes,5,opt,name=uint32_array,json=uint32Array,proto3,oneof"`
}

func (*ShillVal_Str) isShillVal_Val() {}

func (*ShillVal_Bool) isShillVal_Val() {}

func (*ShillVal_Uint32) isShillVal_Val() {}

func (*ShillVal_StrArray) isShillVal_Val() {}

func (*ShillVal_Uint32Array) isShillVal_Val() {}

func (m *ShillVal) GetVal() isShillVal_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (m *ShillVal) GetStr() string {
	if x, ok := m.GetVal().(*ShillVal_Str); ok {
		return x.Str
	}
	return ""
}

func (m *ShillVal) GetBool() bool {
	if x, ok := m.GetVal().(*ShillVal_Bool); ok {
		return x.Bool
	}
	return false
}

func (m *ShillVal) GetUint32() uint32 {
	if x, ok := m.GetVal().(*ShillVal_Uint32); ok {
		return x.Uint32
	}
	return 0
}

func (m *ShillVal) GetStrArray() *StrArray {
	if x, ok := m.GetVal().(*ShillVal_StrArray); ok {
		return x.StrArray
	}
	return nil
}

func (m *ShillVal) GetUint32Array() *Uint32Array {
	if x, ok := m.GetVal().(*ShillVal_Uint32Array); ok {
		return x.Uint32Array
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ShillVal) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ShillVal_Str)(nil),
		(*ShillVal_Bool)(nil),
		(*ShillVal_Uint32)(nil),
		(*ShillVal_StrArray)(nil),
		(*ShillVal_Uint32Array)(nil),
	}
}

type StrArray struct {
	Vals                 []string `protobuf:"bytes,1,rep,name=vals,proto3" json:"vals,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StrArray) Reset()         { *m = StrArray{} }
func (m *StrArray) String() string { return proto.CompactTextString(m) }
func (*StrArray) ProtoMessage()    {}
func (*StrArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{2}
}

func (m *StrArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StrArray.Unmarshal(m, b)
}
func (m *StrArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StrArray.Marshal(b, m, deterministic)
}
func (m *StrArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StrArray.Merge(m, src)
}
func (m *StrArray) XXX_Size() int {
	return xxx_messageInfo_StrArray.Size(m)
}
func (m *StrArray) XXX_DiscardUnknown() {
	xxx_messageInfo_StrArray.DiscardUnknown(m)
}

var xxx_messageInfo_StrArray proto.InternalMessageInfo

func (m *StrArray) GetVals() []string {
	if m != nil {
		return m.Vals
	}
	return nil
}

type Uint32Array struct {
	Vals                 []uint32 `protobuf:"varint,1,rep,packed,name=vals,proto3" json:"vals,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Uint32Array) Reset()         { *m = Uint32Array{} }
func (m *Uint32Array) String() string { return proto.CompactTextString(m) }
func (*Uint32Array) ProtoMessage()    {}
func (*Uint32Array) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{3}
}

func (m *Uint32Array) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Uint32Array.Unmarshal(m, b)
}
func (m *Uint32Array) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Uint32Array.Marshal(b, m, deterministic)
}
func (m *Uint32Array) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Uint32Array.Merge(m, src)
}
func (m *Uint32Array) XXX_Size() int {
	return xxx_messageInfo_Uint32Array.Size(m)
}
func (m *Uint32Array) XXX_DiscardUnknown() {
	xxx_messageInfo_Uint32Array.DiscardUnknown(m)
}

var xxx_messageInfo_Uint32Array proto.InternalMessageInfo

func (m *Uint32Array) GetVals() []uint32 {
	if m != nil {
		return m.Vals
	}
	return nil
}

// ConnectResponse is the response of Connect call which includes the
// object path of connected service and timing data of the connection
// (all time in nanosecond unit).
type ConnectResponse struct {
	ServicePath          string   `protobuf:"bytes,1,opt,name=service_path,json=servicePath,proto3" json:"service_path,omitempty"`
	DiscoveryTime        int64    `protobuf:"varint,2,opt,name=discovery_time,json=discoveryTime,proto3" json:"discovery_time,omitempty"`
	AssociationTime      int64    `protobuf:"varint,3,opt,name=association_time,json=associationTime,proto3" json:"association_time,omitempty"`
	ConfigurationTime    int64    `protobuf:"varint,4,opt,name=configuration_time,json=configurationTime,proto3" json:"configuration_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectResponse) Reset()         { *m = ConnectResponse{} }
func (m *ConnectResponse) String() string { return proto.CompactTextString(m) }
func (*ConnectResponse) ProtoMessage()    {}
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{4}
}

func (m *ConnectResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectResponse.Unmarshal(m, b)
}
func (m *ConnectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectResponse.Marshal(b, m, deterministic)
}
func (m *ConnectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectResponse.Merge(m, src)
}
func (m *ConnectResponse) XXX_Size() int {
	return xxx_messageInfo_ConnectResponse.Size(m)
}
func (m *ConnectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectResponse proto.InternalMessageInfo

func (m *ConnectResponse) GetServicePath() string {
	if m != nil {
		return m.ServicePath
	}
	return ""
}

func (m *ConnectResponse) GetDiscoveryTime() int64 {
	if m != nil {
		return m.DiscoveryTime
	}
	return 0
}

func (m *ConnectResponse) GetAssociationTime() int64 {
	if m != nil {
		return m.AssociationTime
	}
	return 0
}

func (m *ConnectResponse) GetConfigurationTime() int64 {
	if m != nil {
		return m.ConfigurationTime
	}
	return 0
}

type DiscoverBSSIDRequest struct {
	Bssid                string   `protobuf:"bytes,1,opt,name=bssid,proto3" json:"bssid,omitempty"`
	Interface            string   `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
	Ssid                 []byte   `protobuf:"bytes,3,opt,name=ssid,proto3" json:"ssid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiscoverBSSIDRequest) Reset()         { *m = DiscoverBSSIDRequest{} }
func (m *DiscoverBSSIDRequest) String() string { return proto.CompactTextString(m) }
func (*DiscoverBSSIDRequest) ProtoMessage()    {}
func (*DiscoverBSSIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{5}
}

func (m *DiscoverBSSIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscoverBSSIDRequest.Unmarshal(m, b)
}
func (m *DiscoverBSSIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscoverBSSIDRequest.Marshal(b, m, deterministic)
}
func (m *DiscoverBSSIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoverBSSIDRequest.Merge(m, src)
}
func (m *DiscoverBSSIDRequest) XXX_Size() int {
	return xxx_messageInfo_DiscoverBSSIDRequest.Size(m)
}
func (m *DiscoverBSSIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoverBSSIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoverBSSIDRequest proto.InternalMessageInfo

func (m *DiscoverBSSIDRequest) GetBssid() string {
	if m != nil {
		return m.Bssid
	}
	return ""
}

func (m *DiscoverBSSIDRequest) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *DiscoverBSSIDRequest) GetSsid() []byte {
	if m != nil {
		return m.Ssid
	}
	return nil
}

type DiscoverBSSIDResponse struct {
	DiscoveryTime        int64    `protobuf:"varint,1,opt,name=discovery_time,json=discoveryTime,proto3" json:"discovery_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiscoverBSSIDResponse) Reset()         { *m = DiscoverBSSIDResponse{} }
func (m *DiscoverBSSIDResponse) String() string { return proto.CompactTextString(m) }
func (*DiscoverBSSIDResponse) ProtoMessage()    {}
func (*DiscoverBSSIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{6}
}

func (m *DiscoverBSSIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscoverBSSIDResponse.Unmarshal(m, b)
}
func (m *DiscoverBSSIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscoverBSSIDResponse.Marshal(b, m, deterministic)
}
func (m *DiscoverBSSIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoverBSSIDResponse.Merge(m, src)
}
func (m *DiscoverBSSIDResponse) XXX_Size() int {
	return xxx_messageInfo_DiscoverBSSIDResponse.Size(m)
}
func (m *DiscoverBSSIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoverBSSIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoverBSSIDResponse proto.InternalMessageInfo

func (m *DiscoverBSSIDResponse) GetDiscoveryTime() int64 {
	if m != nil {
		return m.DiscoveryTime
	}
	return 0
}

type DisconnectRequest struct {
	ServicePath          string   `protobuf:"bytes,1,opt,name=service_path,json=servicePath,proto3" json:"service_path,omitempty"`
	RemoveProfile        bool     `protobuf:"varint,2,opt,name=remove_profile,json=removeProfile,proto3" json:"remove_profile,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DisconnectRequest) Reset()         { *m = DisconnectRequest{} }
func (m *DisconnectRequest) String() string { return proto.CompactTextString(m) }
func (*DisconnectRequest) ProtoMessage()    {}
func (*DisconnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{7}
}

func (m *DisconnectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DisconnectRequest.Unmarshal(m, b)
}
func (m *DisconnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DisconnectRequest.Marshal(b, m, deterministic)
}
func (m *DisconnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisconnectRequest.Merge(m, src)
}
func (m *DisconnectRequest) XXX_Size() int {
	return xxx_messageInfo_DisconnectRequest.Size(m)
}
func (m *DisconnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DisconnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DisconnectRequest proto.InternalMessageInfo

func (m *DisconnectRequest) GetServicePath() string {
	if m != nil {
		return m.ServicePath
	}
	return ""
}

func (m *DisconnectRequest) GetRemoveProfile() bool {
	if m != nil {
		return m.RemoveProfile
	}
	return false
}

type DeleteEntriesForSSIDRequest struct {
	Ssid                 []byte   `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteEntriesForSSIDRequest) Reset()         { *m = DeleteEntriesForSSIDRequest{} }
func (m *DeleteEntriesForSSIDRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteEntriesForSSIDRequest) ProtoMessage()    {}
func (*DeleteEntriesForSSIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{8}
}

func (m *DeleteEntriesForSSIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteEntriesForSSIDRequest.Unmarshal(m, b)
}
func (m *DeleteEntriesForSSIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteEntriesForSSIDRequest.Marshal(b, m, deterministic)
}
func (m *DeleteEntriesForSSIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteEntriesForSSIDRequest.Merge(m, src)
}
func (m *DeleteEntriesForSSIDRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteEntriesForSSIDRequest.Size(m)
}
func (m *DeleteEntriesForSSIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteEntriesForSSIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteEntriesForSSIDRequest proto.InternalMessageInfo

func (m *DeleteEntriesForSSIDRequest) GetSsid() []byte {
	if m != nil {
		return m.Ssid
	}
	return nil
}

type QueryServiceRequest struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryServiceRequest) Reset()         { *m = QueryServiceRequest{} }
func (m *QueryServiceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryServiceRequest) ProtoMessage()    {}
func (*QueryServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{9}
}

func (m *QueryServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryServiceRequest.Unmarshal(m, b)
}
func (m *QueryServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryServiceRequest.Marshal(b, m, deterministic)
}
func (m *QueryServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceRequest.Merge(m, src)
}
func (m *QueryServiceRequest) XXX_Size() int {
	return xxx_messageInfo_QueryServiceRequest.Size(m)
}
func (m *QueryServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceRequest proto.InternalMessageInfo

func (m *QueryServiceRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type QueryServiceResponse struct {
	Name                 string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Device               string                     `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	Type                 string                     `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Mode                 string                     `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	State                string                     `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	Visible              bool                       `protobuf:"varint,6,opt,name=visible,proto3" json:"visible,omitempty"`
	IsConnected          bool                       `protobuf:"varint,7,opt,name=is_connected,json=isConnected,proto3" json:"is_connected,omitempty"`
	Wifi                 *QueryServiceResponse_Wifi `protobuf:"bytes,8,opt,name=wifi,proto3" json:"wifi,omitempty"`
	Guid                 string                     `protobuf:"bytes,9,opt,name=guid,proto3" json:"guid,omitempty"`
	ConnectionId         int32                      `protobuf:"varint,10,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *QueryServiceResponse) Reset()         { *m = QueryServiceResponse{} }
func (m *QueryServiceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryServiceResponse) ProtoMessage()    {}
func (*QueryServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{10}
}

func (m *QueryServiceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryServiceResponse.Unmarshal(m, b)
}
func (m *QueryServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryServiceResponse.Marshal(b, m, deterministic)
}
func (m *QueryServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceResponse.Merge(m, src)
}
func (m *QueryServiceResponse) XXX_Size() int {
	return xxx_messageInfo_QueryServiceResponse.Size(m)
}
func (m *QueryServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceResponse proto.InternalMessageInfo

func (m *QueryServiceResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryServiceResponse) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *QueryServiceResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *QueryServiceResponse) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *QueryServiceResponse) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *QueryServiceResponse) GetVisible() bool {
	if m != nil {
		return m.Visible
	}
	return false
}

func (m *QueryServiceResponse) GetIsConnected() bool {
	if m != nil {
		return m.IsConnected
	}
	return false
}

func (m *QueryServiceResponse) GetWifi() *QueryServiceResponse_Wifi {
	if m != nil {
		return m.Wifi
	}
	return nil
}

func (m *QueryServiceResponse) GetGuid() string {
	if m != nil {
		return m.Guid
	}
	return ""
}

func (m *QueryServiceResponse) GetConnectionId() int32 {
	if m != nil {
		return m.ConnectionId
	}
	return 0
}

type QueryServiceResponse_Wifi struct {
	Bssid                string   `protobuf:"bytes,1,opt,name=bssid,proto3" json:"bssid,omitempty"`
	Frequency            uint32   `protobuf:"varint,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
	FrequencyList        []uint32 `protobuf:"varint,3,rep,packed,name=frequency_list,json=frequencyList,proto3" json:"frequency_list,omitempty"`
	HexSsid              string   `protobuf:"bytes,4,opt,name=hex_ssid,json=hexSsid,proto3" json:"hex_ssid,omitempty"`
	HiddenSsid           bool     `protobuf:"varint,5,opt,name=hidden_ssid,json=hiddenSsid,proto3" json:"hidden_ssid,omitempty"`
	PhyMode              uint32   `protobuf:"varint,6,opt,name=phy_mode,json=phyMode,proto3" json:"phy_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryServiceResponse_Wifi) Reset()         { *m = QueryServiceResponse_Wifi{} }
func (m *QueryServiceResponse_Wifi) String() string { return proto.CompactTextString(m) }
func (*QueryServiceResponse_Wifi) ProtoMessage()    {}
func (*QueryServiceResponse_Wifi) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{10, 0}
}

func (m *QueryServiceResponse_Wifi) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryServiceResponse_Wifi.Unmarshal(m, b)
}
func (m *QueryServiceResponse_Wifi) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryServiceResponse_Wifi.Marshal(b, m, deterministic)
}
func (m *QueryServiceResponse_Wifi) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceResponse_Wifi.Merge(m, src)
}
func (m *QueryServiceResponse_Wifi) XXX_Size() int {
	return xxx_messageInfo_QueryServiceResponse_Wifi.Size(m)
}
func (m *QueryServiceResponse_Wifi) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceResponse_Wifi.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceResponse_Wifi proto.InternalMessageInfo

func (m *QueryServiceResponse_Wifi) GetBssid() string {
	if m != nil {
		return m.Bssid
	}
	return ""
}

func (m *QueryServiceResponse_Wifi) GetFrequency() uint32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *QueryServiceResponse_Wifi) GetFrequencyList() []uint32 {
	if m != nil {
		return m.FrequencyList
	}
	return nil
}

func (m *QueryServiceResponse_Wifi) GetHexSsid() string {
	if m != nil {
		return m.HexSsid
	}
	return ""
}

func (m *QueryServiceResponse_Wifi) GetHiddenSsid() bool {
	if m != nil {
		return m.HiddenSsid
	}
	return false
}

func (m *QueryServiceResponse_Wifi) GetPhyMode() uint32 {
	if m != nil {
		return m.PhyMode
	}
	return 0
}

type GetInterfaceResponse struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetInterfaceResponse) Reset()         { *m = GetInterfaceResponse{} }
func (m *GetInterfaceResponse) String() string { return proto.CompactTextString(m) }
func (*GetInterfaceResponse) ProtoMessage()    {}
func (*GetInterfaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{11}
}

func (m *GetInterfaceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetInterfaceResponse.Unmarshal(m, b)
}
func (m *GetInterfaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetInterfaceResponse.Marshal(b, m, deterministic)
}
func (m *GetInterfaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInterfaceResponse.Merge(m, src)
}
func (m *GetInterfaceResponse) XXX_Size() int {
	return xxx_messageInfo_GetInterfaceResponse.Size(m)
}
func (m *GetInterfaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInterfaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetInterfaceResponse proto.InternalMessageInfo

func (m *GetInterfaceResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetIPv4AddrsRequest struct {
	InterfaceName        string   `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetIPv4AddrsRequest) Reset()         { *m = GetIPv4AddrsRequest{} }
func (m *GetIPv4AddrsRequest) String() string { return proto.CompactTextString(m) }
func (*GetIPv4AddrsRequest) ProtoMessage()    {}
func (*GetIPv4AddrsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{12}
}

func (m *GetIPv4AddrsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetIPv4AddrsRequest.Unmarshal(m, b)
}
func (m *GetIPv4AddrsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetIPv4AddrsRequest.Marshal(b, m, deterministic)
}
func (m *GetIPv4AddrsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIPv4AddrsRequest.Merge(m, src)
}
func (m *GetIPv4AddrsRequest) XXX_Size() int {
	return xxx_messageInfo_GetIPv4AddrsRequest.Size(m)
}
func (m *GetIPv4AddrsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIPv4AddrsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetIPv4AddrsRequest proto.InternalMessageInfo

func (m *GetIPv4AddrsRequest) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type GetIPv4AddrsResponse struct {
	Ipv4                 []string `protobuf:"bytes,1,rep,name=ipv4,proto3" json:"ipv4,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetIPv4AddrsResponse) Reset()         { *m = GetIPv4AddrsResponse{} }
func (m *GetIPv4AddrsResponse) String() string { return proto.CompactTextString(m) }
func (*GetIPv4AddrsResponse) ProtoMessage()    {}
func (*GetIPv4AddrsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{13}
}

func (m *GetIPv4AddrsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetIPv4AddrsResponse.Unmarshal(m, b)
}
func (m *GetIPv4AddrsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetIPv4AddrsResponse.Marshal(b, m, deterministic)
}
func (m *GetIPv4AddrsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIPv4AddrsResponse.Merge(m, src)
}
func (m *GetIPv4AddrsResponse) XXX_Size() int {
	return xxx_messageInfo_GetIPv4AddrsResponse.Size(m)
}
func (m *GetIPv4AddrsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIPv4AddrsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetIPv4AddrsResponse proto.InternalMessageInfo

func (m *GetIPv4AddrsResponse) GetIpv4() []string {
	if m != nil {
		return m.Ipv4
	}
	return nil
}

type GetHardwareAddrRequest struct {
	InterfaceName        string   `protobuf:"bytes,1,opt,name=interfaceName,proto3" json:"interfaceName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHardwareAddrRequest) Reset()         { *m = GetHardwareAddrRequest{} }
func (m *GetHardwareAddrRequest) String() string { return proto.CompactTextString(m) }
func (*GetHardwareAddrRequest) ProtoMessage()    {}
func (*GetHardwareAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{14}
}

func (m *GetHardwareAddrRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHardwareAddrRequest.Unmarshal(m, b)
}
func (m *GetHardwareAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHardwareAddrRequest.Marshal(b, m, deterministic)
}
func (m *GetHardwareAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHardwareAddrRequest.Merge(m, src)
}
func (m *GetHardwareAddrRequest) XXX_Size() int {
	return xxx_messageInfo_GetHardwareAddrRequest.Size(m)
}
func (m *GetHardwareAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHardwareAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetHardwareAddrRequest proto.InternalMessageInfo

func (m *GetHardwareAddrRequest) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type GetHardwareAddrResponse struct {
	HwAddr               string   `protobuf:"bytes,1,opt,name=hw_addr,json=hwAddr,proto3" json:"hw_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHardwareAddrResponse) Reset()         { *m = GetHardwareAddrResponse{} }
func (m *GetHardwareAddrResponse) String() string { return proto.CompactTextString(m) }
func (*GetHardwareAddrResponse) ProtoMessage()    {}
func (*GetHardwareAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{15}
}

func (m *GetHardwareAddrResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHardwareAddrResponse.Unmarshal(m, b)
}
func (m *GetHardwareAddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHardwareAddrResponse.Marshal(b, m, deterministic)
}
func (m *GetHardwareAddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHardwareAddrResponse.Merge(m, src)
}
func (m *GetHardwareAddrResponse) XXX_Size() int {
	return xxx_messageInfo_GetHardwareAddrResponse.Size(m)
}
func (m *GetHardwareAddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHardwareAddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetHardwareAddrResponse proto.InternalMessageInfo

func (m *GetHardwareAddrResponse) GetHwAddr() string {
	if m != nil {
		return m.HwAddr
	}
	return ""
}

type ExpectWifiFrequenciesRequest struct {
	// SSID to look up. Required.
	Ssid []byte `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
	// Expected list of frequencies for the SSID.
	Frequencies          []uint32 `protobuf:"varint,2,rep,packed,name=frequencies,proto3" json:"frequencies,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExpectWifiFrequenciesRequest) Reset()         { *m = ExpectWifiFrequenciesRequest{} }
func (m *ExpectWifiFrequenciesRequest) String() string { return proto.CompactTextString(m) }
func (*ExpectWifiFrequenciesRequest) ProtoMessage()    {}
func (*ExpectWifiFrequenciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{16}
}

func (m *ExpectWifiFrequenciesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpectWifiFrequenciesRequest.Unmarshal(m, b)
}
func (m *ExpectWifiFrequenciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpectWifiFrequenciesRequest.Marshal(b, m, deterministic)
}
func (m *ExpectWifiFrequenciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpectWifiFrequenciesRequest.Merge(m, src)
}
func (m *ExpectWifiFrequenciesRequest) XXX_Size() int {
	return xxx_messageInfo_ExpectWifiFrequenciesRequest.Size(m)
}
func (m *ExpectWifiFrequenciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpectWifiFrequenciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExpectWifiFrequenciesRequest proto.InternalMessageInfo

func (m *ExpectWifiFrequenciesRequest) GetSsid() []byte {
	if m != nil {
		return m.Ssid
	}
	return nil
}

func (m *ExpectWifiFrequenciesRequest) GetFrequencies() []uint32 {
	if m != nil {
		return m.Frequencies
	}
	return nil
}

type BgscanConfig struct {
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// ShortInterval time in seconds, only value in uint16 range is valid as dbus property type is uint16.
	ShortInterval uint32 `protobuf:"varint,2,opt,name=short_interval,json=shortInterval,proto3" json:"short_interval,omitempty"`
	// LongInterval time in seconds, only value in uint16 range is valid as dbus property type is uint16.
	LongInterval         uint32   `protobuf:"varint,3,opt,name=long_interval,json=longInterval,proto3" json:"long_interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgscanConfig) Reset()         { *m = BgscanConfig{} }
func (m *BgscanConfig) String() string { return proto.CompactTextString(m) }
func (*BgscanConfig) ProtoMessage()    {}
func (*BgscanConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{17}
}

func (m *BgscanConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgscanConfig.Unmarshal(m, b)
}
func (m *BgscanConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgscanConfig.Marshal(b, m, deterministic)
}
func (m *BgscanConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgscanConfig.Merge(m, src)
}
func (m *BgscanConfig) XXX_Size() int {
	return xxx_messageInfo_BgscanConfig.Size(m)
}
func (m *BgscanConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_BgscanConfig.DiscardUnknown(m)
}

var xxx_messageInfo_BgscanConfig proto.InternalMessageInfo

func (m *BgscanConfig) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *BgscanConfig) GetShortInterval() uint32 {
	if m != nil {
		return m.ShortInterval
	}
	return 0
}

func (m *BgscanConfig) GetLongInterval() uint32 {
	if m != nil {
		return m.LongInterval
	}
	return 0
}

type GetBgscanConfigResponse struct {
	Config               *BgscanConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetBgscanConfigResponse) Reset()         { *m = GetBgscanConfigResponse{} }
func (m *GetBgscanConfigResponse) String() string { return proto.CompactTextString(m) }
func (*GetBgscanConfigResponse) ProtoMessage()    {}
func (*GetBgscanConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{18}
}

func (m *GetBgscanConfigResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBgscanConfigResponse.Unmarshal(m, b)
}
func (m *GetBgscanConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBgscanConfigResponse.Marshal(b, m, deterministic)
}
func (m *GetBgscanConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBgscanConfigResponse.Merge(m, src)
}
func (m *GetBgscanConfigResponse) XXX_Size() int {
	return xxx_messageInfo_GetBgscanConfigResponse.Size(m)
}
func (m *GetBgscanConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBgscanConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBgscanConfigResponse proto.InternalMessageInfo

func (m *GetBgscanConfigResponse) GetConfig() *BgscanConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type SetBgscanConfigRequest struct {
	Config               *BgscanConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SetBgscanConfigRequest) Reset()         { *m = SetBgscanConfigRequest{} }
func (m *SetBgscanConfigRequest) String() string { return proto.CompactTextString(m) }
func (*SetBgscanConfigRequest) ProtoMessage()    {}
func (*SetBgscanConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{19}
}

func (m *SetBgscanConfigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetBgscanConfigRequest.Unmarshal(m, b)
}
func (m *SetBgscanConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetBgscanConfigRequest.Marshal(b, m, deterministic)
}
func (m *SetBgscanConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetBgscanConfigRequest.Merge(m, src)
}
func (m *SetBgscanConfigRequest) XXX_Size() int {
	return xxx_messageInfo_SetBgscanConfigRequest.Size(m)
}
func (m *SetBgscanConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetBgscanConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetBgscanConfigRequest proto.InternalMessageInfo

func (m *SetBgscanConfigRequest) GetConfig() *BgscanConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type AssureDisconnectRequest struct {
	ServicePath          string   `protobuf:"bytes,1,opt,name=service_path,json=servicePath,proto3" json:"service_path,omitempty"`
	Timeout              int64    `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssureDisconnectRequest) Reset()         { *m = AssureDisconnectRequest{} }
func (m *AssureDisconnectRequest) String() string { return proto.CompactTextString(m) }
func (*AssureDisconnectRequest) ProtoMessage()    {}
func (*AssureDisconnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{20}
}

func (m *AssureDisconnectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssureDisconnectRequest.Unmarshal(m, b)
}
func (m *AssureDisconnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssureDisconnectRequest.Marshal(b, m, deterministic)
}
func (m *AssureDisconnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssureDisconnectRequest.Merge(m, src)
}
func (m *AssureDisconnectRequest) XXX_Size() int {
	return xxx_messageInfo_AssureDisconnectRequest.Size(m)
}
func (m *AssureDisconnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AssureDisconnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AssureDisconnectRequest proto.InternalMessageInfo

func (m *AssureDisconnectRequest) GetServicePath() string {
	if m != nil {
		return m.ServicePath
	}
	return ""
}

func (m *AssureDisconnectRequest) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type DisableEnableTestRequest struct {
	InterfaceName        string   `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	ServicePath          string   `protobuf:"bytes,2,opt,name=service_path,json=servicePath,proto3" json:"service_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DisableEnableTestRequest) Reset()         { *m = DisableEnableTestRequest{} }
func (m *DisableEnableTestRequest) String() string { return proto.CompactTextString(m) }
func (*DisableEnableTestRequest) ProtoMessage()    {}
func (*DisableEnableTestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{21}
}

func (m *DisableEnableTestRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DisableEnableTestRequest.Unmarshal(m, b)
}
func (m *DisableEnableTestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DisableEnableTestRequest.Marshal(b, m, deterministic)
}
func (m *DisableEnableTestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisableEnableTestRequest.Merge(m, src)
}
func (m *DisableEnableTestRequest) XXX_Size() int {
	return xxx_messageInfo_DisableEnableTestRequest.Size(m)
}
func (m *DisableEnableTestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DisableEnableTestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DisableEnableTestRequest proto.InternalMessageInfo

func (m *DisableEnableTestRequest) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *DisableEnableTestRequest) GetServicePath() string {
	if m != nil {
		return m.ServicePath
	}
	return ""
}

type RequestScansRequest struct {
	Count                int32    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestScansRequest) Reset()         { *m = RequestScansRequest{} }
func (m *RequestScansRequest) String() string { return proto.CompactTextString(m) }
func (*RequestScansRequest) ProtoMessage()    {}
func (*RequestScansRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{22}
}

func (m *RequestScansRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestScansRequest.Unmarshal(m, b)
}
func (m *RequestScansRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestScansRequest.Marshal(b, m, deterministic)
}
func (m *RequestScansRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestScansRequest.Merge(m, src)
}
func (m *RequestScansRequest) XXX_Size() int {
	return xxx_messageInfo_RequestScansRequest.Size(m)
}
func (m *RequestScansRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestScansRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RequestScansRequest proto.InternalMessageInfo

func (m *RequestScansRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type SetMACRandomizeRequest struct {
	Enable               bool     `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetMACRandomizeRequest) Reset()         { *m = SetMACRandomizeRequest{} }
func (m *SetMACRandomizeRequest) String() string { return proto.CompactTextString(m) }
func (*SetMACRandomizeRequest) ProtoMessage()    {}
func (*SetMACRandomizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{23}
}

func (m *SetMACRandomizeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetMACRandomizeRequest.Unmarshal(m, b)
}
func (m *SetMACRandomizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetMACRandomizeRequest.Marshal(b, m, deterministic)
}
func (m *SetMACRandomizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetMACRandomizeRequest.Merge(m, src)
}
func (m *SetMACRandomizeRequest) XXX_Size() int {
	return xxx_messageInfo_SetMACRandomizeRequest.Size(m)
}
func (m *SetMACRandomizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetMACRandomizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetMACRandomizeRequest proto.InternalMessageInfo

func (m *SetMACRandomizeRequest) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

type SetMACRandomizeResponse struct {
	OldSetting           bool     `protobuf:"varint,1,opt,name=old_setting,json=oldSetting,proto3" json:"old_setting,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetMACRandomizeResponse) Reset()         { *m = SetMACRandomizeResponse{} }
func (m *SetMACRandomizeResponse) String() string { return proto.CompactTextString(m) }
func (*SetMACRandomizeResponse) ProtoMessage()    {}
func (*SetMACRandomizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{24}
}

func (m *SetMACRandomizeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetMACRandomizeResponse.Unmarshal(m, b)
}
func (m *SetMACRandomizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetMACRandomizeResponse.Marshal(b, m, deterministic)
}
func (m *SetMACRandomizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetMACRandomizeResponse.Merge(m, src)
}
func (m *SetMACRandomizeResponse) XXX_Size() int {
	return xxx_messageInfo_SetMACRandomizeResponse.Size(m)
}
func (m *SetMACRandomizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetMACRandomizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetMACRandomizeResponse proto.InternalMessageInfo

func (m *SetMACRandomizeResponse) GetOldSetting() bool {
	if m != nil {
		return m.OldSetting
	}
	return false
}

type ConfigureAndAssertAutoConnectRequest struct {
	Props                map[string]*ShillVal `protobuf:"bytes,1,rep,name=props,proto3" json:"props,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ConfigureAndAssertAutoConnectRequest) Reset()         { *m = ConfigureAndAssertAutoConnectRequest{} }
func (m *ConfigureAndAssertAutoConnectRequest) String() string { return proto.CompactTextString(m) }
func (*ConfigureAndAssertAutoConnectRequest) ProtoMessage()    {}
func (*ConfigureAndAssertAutoConnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{25}
}

func (m *ConfigureAndAssertAutoConnectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigureAndAssertAutoConnectRequest.Unmarshal(m, b)
}
func (m *ConfigureAndAssertAutoConnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigureAndAssertAutoConnectRequest.Marshal(b, m, deterministic)
}
func (m *ConfigureAndAssertAutoConnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigureAndAssertAutoConnectRequest.Merge(m, src)
}
func (m *ConfigureAndAssertAutoConnectRequest) XXX_Size() int {
	return xxx_messageInfo_ConfigureAndAssertAutoConnectRequest.Size(m)
}
func (m *ConfigureAndAssertAutoConnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigureAndAssertAutoConnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigureAndAssertAutoConnectRequest proto.InternalMessageInfo

func (m *ConfigureAndAssertAutoConnectRequest) GetProps() map[string]*ShillVal {
	if m != nil {
		return m.Props
	}
	return nil
}

type ConfigureAndAssertAutoConnectResponse struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigureAndAssertAutoConnectResponse) Reset()         { *m = ConfigureAndAssertAutoConnectResponse{} }
func (m *ConfigureAndAssertAutoConnectResponse) String() string { return proto.CompactTextString(m) }
func (*ConfigureAndAssertAutoConnectResponse) ProtoMessage()    {}
func (*ConfigureAndAssertAutoConnectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{26}
}

func (m *ConfigureAndAssertAutoConnectResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigureAndAssertAutoConnectResponse.Unmarshal(m, b)
}
func (m *ConfigureAndAssertAutoConnectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigureAndAssertAutoConnectResponse.Marshal(b, m, deterministic)
}
func (m *ConfigureAndAssertAutoConnectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigureAndAssertAutoConnectResponse.Merge(m, src)
}
func (m *ConfigureAndAssertAutoConnectResponse) XXX_Size() int {
	return xxx_messageInfo_ConfigureAndAssertAutoConnectResponse.Size(m)
}
func (m *ConfigureAndAssertAutoConnectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigureAndAssertAutoConnectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigureAndAssertAutoConnectResponse proto.InternalMessageInfo

func (m *ConfigureAndAssertAutoConnectResponse) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type GetCurrentTimeResponse struct {
	NowSecond            int64    `protobuf:"varint,1,opt,name=now_second,json=nowSecond,proto3" json:"now_second,omitempty"`
	NowNanosecond        int64    `protobuf:"varint,2,opt,name=now_nanosecond,json=nowNanosecond,proto3" json:"now_nanosecond,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCurrentTimeResponse) Reset()         { *m = GetCurrentTimeResponse{} }
func (m *GetCurrentTimeResponse) String() string { return proto.CompactTextString(m) }
func (*GetCurrentTimeResponse) ProtoMessage()    {}
func (*GetCurrentTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{27}
}

func (m *GetCurrentTimeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCurrentTimeResponse.Unmarshal(m, b)
}
func (m *GetCurrentTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCurrentTimeResponse.Marshal(b, m, deterministic)
}
func (m *GetCurrentTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCurrentTimeResponse.Merge(m, src)
}
func (m *GetCurrentTimeResponse) XXX_Size() int {
	return xxx_messageInfo_GetCurrentTimeResponse.Size(m)
}
func (m *GetCurrentTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCurrentTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCurrentTimeResponse proto.InternalMessageInfo

func (m *GetCurrentTimeResponse) GetNowSecond() int64 {
	if m != nil {
		return m.NowSecond
	}
	return 0
}

func (m *GetCurrentTimeResponse) GetNowNanosecond() int64 {
	if m != nil {
		return m.NowNanosecond
	}
	return 0
}

type SelectedServiceResponse struct {
	ServicePath          string   `protobuf:"bytes,1,opt,name=service_path,json=servicePath,proto3" json:"service_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SelectedServiceResponse) Reset()         { *m = SelectedServiceResponse{} }
func (m *SelectedServiceResponse) String() string { return proto.CompactTextString(m) }
func (*SelectedServiceResponse) ProtoMessage()    {}
func (*SelectedServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{28}
}

func (m *SelectedServiceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SelectedServiceResponse.Unmarshal(m, b)
}
func (m *SelectedServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SelectedServiceResponse.Marshal(b, m, deterministic)
}
func (m *SelectedServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectedServiceResponse.Merge(m, src)
}
func (m *SelectedServiceResponse) XXX_Size() int {
	return xxx_messageInfo_SelectedServiceResponse.Size(m)
}
func (m *SelectedServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectedServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SelectedServiceResponse proto.InternalMessageInfo

func (m *SelectedServiceResponse) GetServicePath() string {
	if m != nil {
		return m.ServicePath
	}
	return ""
}

type ExpectShillPropertyRequest struct {
	// Shill object path (e.g. Service or Device).
	ObjectPath           string                                  `protobuf:"bytes,1,opt,name=object_path,json=objectPath,proto3" json:"object_path,omitempty"`
	Props                []*ExpectShillPropertyRequest_Criterion `protobuf:"bytes,2,rep,name=props,proto3" json:"props,omitempty"`
	MonitorProps         []string                                `protobuf:"bytes,3,rep,name=monitor_props,json=monitorProps,proto3" json:"monitor_props,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *ExpectShillPropertyRequest) Reset()         { *m = ExpectShillPropertyRequest{} }
func (m *ExpectShillPropertyRequest) String() string { return proto.CompactTextString(m) }
func (*ExpectShillPropertyRequest) ProtoMessage()    {}
func (*ExpectShillPropertyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{29}
}

func (m *ExpectShillPropertyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpectShillPropertyRequest.Unmarshal(m, b)
}
func (m *ExpectShillPropertyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpectShillPropertyRequest.Marshal(b, m, deterministic)
}
func (m *ExpectShillPropertyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpectShillPropertyRequest.Merge(m, src)
}
func (m *ExpectShillPropertyRequest) XXX_Size() int {
	return xxx_messageInfo_ExpectShillPropertyRequest.Size(m)
}
func (m *ExpectShillPropertyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpectShillPropertyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExpectShillPropertyRequest proto.InternalMessageInfo

func (m *ExpectShillPropertyRequest) GetObjectPath() string {
	if m != nil {
		return m.ObjectPath
	}
	return ""
}

func (m *ExpectShillPropertyRequest) GetProps() []*ExpectShillPropertyRequest_Criterion {
	if m != nil {
		return m.Props
	}
	return nil
}

func (m *ExpectShillPropertyRequest) GetMonitorProps() []string {
	if m != nil {
		return m.MonitorProps
	}
	return nil
}

type ExpectShillPropertyRequest_Criterion struct {
	// The shill property name.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The expected property values.
	AnyOf []*ShillVal `protobuf:"bytes,2,rep,name=any_of,json=anyOf,proto3" json:"any_of,omitempty"`
	// The unexpected property values.
	NoneOf               []*ShillVal                            `protobuf:"bytes,3,rep,name=none_of,json=noneOf,proto3" json:"none_of,omitempty"`
	Method               ExpectShillPropertyRequest_CheckMethod `protobuf:"varint,4,opt,name=method,proto3,enum=tast.cros.network.ExpectShillPropertyRequest_CheckMethod" json:"method,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *ExpectShillPropertyRequest_Criterion) Reset()         { *m = ExpectShillPropertyRequest_Criterion{} }
func (m *ExpectShillPropertyRequest_Criterion) String() string { return proto.CompactTextString(m) }
func (*ExpectShillPropertyRequest_Criterion) ProtoMessage()    {}
func (*ExpectShillPropertyRequest_Criterion) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{29, 0}
}

func (m *ExpectShillPropertyRequest_Criterion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpectShillPropertyRequest_Criterion.Unmarshal(m, b)
}
func (m *ExpectShillPropertyRequest_Criterion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpectShillPropertyRequest_Criterion.Marshal(b, m, deterministic)
}
func (m *ExpectShillPropertyRequest_Criterion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpectShillPropertyRequest_Criterion.Merge(m, src)
}
func (m *ExpectShillPropertyRequest_Criterion) XXX_Size() int {
	return xxx_messageInfo_ExpectShillPropertyRequest_Criterion.Size(m)
}
func (m *ExpectShillPropertyRequest_Criterion) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpectShillPropertyRequest_Criterion.DiscardUnknown(m)
}

var xxx_messageInfo_ExpectShillPropertyRequest_Criterion proto.InternalMessageInfo

func (m *ExpectShillPropertyRequest_Criterion) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ExpectShillPropertyRequest_Criterion) GetAnyOf() []*ShillVal {
	if m != nil {
		return m.AnyOf
	}
	return nil
}

func (m *ExpectShillPropertyRequest_Criterion) GetNoneOf() []*ShillVal {
	if m != nil {
		return m.NoneOf
	}
	return nil
}

func (m *ExpectShillPropertyRequest_Criterion) GetMethod() ExpectShillPropertyRequest_CheckMethod {
	if m != nil {
		return m.Method
	}
	return ExpectShillPropertyRequest_CHECK_WAIT
}

type ShillPropertyChangedSignal struct {
	Prop                 string    `protobuf:"bytes,1,opt,name=prop,proto3" json:"prop,omitempty"`
	Val                  *ShillVal `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ShillPropertyChangedSignal) Reset()         { *m = ShillPropertyChangedSignal{} }
func (m *ShillPropertyChangedSignal) String() string { return proto.CompactTextString(m) }
func (*ShillPropertyChangedSignal) ProtoMessage()    {}
func (*ShillPropertyChangedSignal) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{30}
}

func (m *ShillPropertyChangedSignal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShillPropertyChangedSignal.Unmarshal(m, b)
}
func (m *ShillPropertyChangedSignal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShillPropertyChangedSignal.Marshal(b, m, deterministic)
}
func (m *ShillPropertyChangedSignal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShillPropertyChangedSignal.Merge(m, src)
}
func (m *ShillPropertyChangedSignal) XXX_Size() int {
	return xxx_messageInfo_ShillPropertyChangedSignal.Size(m)
}
func (m *ShillPropertyChangedSignal) XXX_DiscardUnknown() {
	xxx_messageInfo_ShillPropertyChangedSignal.DiscardUnknown(m)
}

var xxx_messageInfo_ShillPropertyChangedSignal proto.InternalMessageInfo

func (m *ShillPropertyChangedSignal) GetProp() string {
	if m != nil {
		return m.Prop
	}
	return ""
}

func (m *ShillPropertyChangedSignal) GetVal() *ShillVal {
	if m != nil {
		return m.Val
	}
	return nil
}

type ExpectShillPropertyResponse struct {
	Key                  string                        `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Val                  *ShillVal                     `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
	Props                []*ShillPropertyChangedSignal `protobuf:"bytes,3,rep,name=props,proto3" json:"props,omitempty"`
	MonitorDone          bool                          `protobuf:"varint,4,opt,name=monitor_done,json=monitorDone,proto3" json:"monitor_done,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ExpectShillPropertyResponse) Reset()         { *m = ExpectShillPropertyResponse{} }
func (m *ExpectShillPropertyResponse) String() string { return proto.CompactTextString(m) }
func (*ExpectShillPropertyResponse) ProtoMessage()    {}
func (*ExpectShillPropertyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{31}
}

func (m *ExpectShillPropertyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpectShillPropertyResponse.Unmarshal(m, b)
}
func (m *ExpectShillPropertyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpectShillPropertyResponse.Marshal(b, m, deterministic)
}
func (m *ExpectShillPropertyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpectShillPropertyResponse.Merge(m, src)
}
func (m *ExpectShillPropertyResponse) XXX_Size() int {
	return xxx_messageInfo_ExpectShillPropertyResponse.Size(m)
}
func (m *ExpectShillPropertyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpectShillPropertyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExpectShillPropertyResponse proto.InternalMessageInfo

func (m *ExpectShillPropertyResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ExpectShillPropertyResponse) GetVal() *ShillVal {
	if m != nil {
		return m.Val
	}
	return nil
}

func (m *ExpectShillPropertyResponse) GetProps() []*ShillPropertyChangedSignal {
	if m != nil {
		return m.Props
	}
	return nil
}

func (m *ExpectShillPropertyResponse) GetMonitorDone() bool {
	if m != nil {
		return m.MonitorDone
	}
	return false
}

type ProfileBasicTestRequest struct {
	Ap0                  *ProfileBasicTestRequest_Config `protobuf:"bytes,1,opt,name=ap0,proto3" json:"ap0,omitempty"`
	Ap1                  *ProfileBasicTestRequest_Config `protobuf:"bytes,2,opt,name=ap1,proto3" json:"ap1,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *ProfileBasicTestRequest) Reset()         { *m = ProfileBasicTestRequest{} }
func (m *ProfileBasicTestRequest) String() string { return proto.CompactTextString(m) }
func (*ProfileBasicTestRequest) ProtoMessage()    {}
func (*ProfileBasicTestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{32}
}

func (m *ProfileBasicTestRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProfileBasicTestRequest.Unmarshal(m, b)
}
func (m *ProfileBasicTestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProfileBasicTestRequest.Marshal(b, m, deterministic)
}
func (m *ProfileBasicTestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileBasicTestRequest.Merge(m, src)
}
func (m *ProfileBasicTestRequest) XXX_Size() int {
	return xxx_messageInfo_ProfileBasicTestRequest.Size(m)
}
func (m *ProfileBasicTestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileBasicTestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileBasicTestRequest proto.InternalMessageInfo

func (m *ProfileBasicTestRequest) GetAp0() *ProfileBasicTestRequest_Config {
	if m != nil {
		return m.Ap0
	}
	return nil
}

func (m *ProfileBasicTestRequest) GetAp1() *ProfileBasicTestRequest_Config {
	if m != nil {
		return m.Ap1
	}
	return nil
}

// The configuration for connecting to a certain AP, as like ConnectRequest.
type ProfileBasicTestRequest_Config struct {
	Ssid                 []byte               `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
	Security             string               `protobuf:"bytes,2,opt,name=security,proto3" json:"security,omitempty"`
	Ip                   string               `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	ShillProps           map[string]*ShillVal `protobuf:"bytes,4,rep,name=shill_props,json=shillProps,proto3" json:"shill_props,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ProfileBasicTestRequest_Config) Reset()         { *m = ProfileBasicTestRequest_Config{} }
func (m *ProfileBasicTestRequest_Config) String() string { return proto.CompactTextString(m) }
func (*ProfileBasicTestRequest_Config) ProtoMessage()    {}
func (*ProfileBasicTestRequest_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{32, 0}
}

func (m *ProfileBasicTestRequest_Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProfileBasicTestRequest_Config.Unmarshal(m, b)
}
func (m *ProfileBasicTestRequest_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProfileBasicTestRequest_Config.Marshal(b, m, deterministic)
}
func (m *ProfileBasicTestRequest_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileBasicTestRequest_Config.Merge(m, src)
}
func (m *ProfileBasicTestRequest_Config) XXX_Size() int {
	return xxx_messageInfo_ProfileBasicTestRequest_Config.Size(m)
}
func (m *ProfileBasicTestRequest_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileBasicTestRequest_Config.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileBasicTestRequest_Config proto.InternalMessageInfo

func (m *ProfileBasicTestRequest_Config) GetSsid() []byte {
	if m != nil {
		return m.Ssid
	}
	return nil
}

func (m *ProfileBasicTestRequest_Config) GetSecurity() string {
	if m != nil {
		return m.Security
	}
	return ""
}

func (m *ProfileBasicTestRequest_Config) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ProfileBasicTestRequest_Config) GetShillProps() map[string]*ShillVal {
	if m != nil {
		return m.ShillProps
	}
	return nil
}

type RequestRoamRequest struct {
	InterfaceName        string   `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	Bssid                string   `protobuf:"bytes,2,opt,name=bssid,proto3" json:"bssid,omitempty"`
	Timeout              int64    `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestRoamRequest) Reset()         { *m = RequestRoamRequest{} }
func (m *RequestRoamRequest) String() string { return proto.CompactTextString(m) }
func (*RequestRoamRequest) ProtoMessage()    {}
func (*RequestRoamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{33}
}

func (m *RequestRoamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestRoamRequest.Unmarshal(m, b)
}
func (m *RequestRoamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestRoamRequest.Marshal(b, m, deterministic)
}
func (m *RequestRoamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestRoamRequest.Merge(m, src)
}
func (m *RequestRoamRequest) XXX_Size() int {
	return xxx_messageInfo_RequestRoamRequest.Size(m)
}
func (m *RequestRoamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestRoamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RequestRoamRequest proto.InternalMessageInfo

func (m *RequestRoamRequest) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *RequestRoamRequest) GetBssid() string {
	if m != nil {
		return m.Bssid
	}
	return ""
}

func (m *RequestRoamRequest) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type DHCPProperties struct {
	VendorClass          string   `protobuf:"bytes,1,opt,name=vendor_class,json=vendorClass,proto3" json:"vendor_class,omitempty"`
	Hostname             string   `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DHCPProperties) Reset()         { *m = DHCPProperties{} }
func (m *DHCPProperties) String() string { return proto.CompactTextString(m) }
func (*DHCPProperties) ProtoMessage()    {}
func (*DHCPProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{34}
}

func (m *DHCPProperties) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DHCPProperties.Unmarshal(m, b)
}
func (m *DHCPProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DHCPProperties.Marshal(b, m, deterministic)
}
func (m *DHCPProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPProperties.Merge(m, src)
}
func (m *DHCPProperties) XXX_Size() int {
	return xxx_messageInfo_DHCPProperties.Size(m)
}
func (m *DHCPProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPProperties.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPProperties proto.InternalMessageInfo

func (m *DHCPProperties) GetVendorClass() string {
	if m != nil {
		return m.VendorClass
	}
	return ""
}

func (m *DHCPProperties) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

type SetDHCPPropertiesRequest struct {
	Props                *DHCPProperties `protobuf:"bytes,1,opt,name=props,proto3" json:"props,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SetDHCPPropertiesRequest) Reset()         { *m = SetDHCPPropertiesRequest{} }
func (m *SetDHCPPropertiesRequest) String() string { return proto.CompactTextString(m) }
func (*SetDHCPPropertiesRequest) ProtoMessage()    {}
func (*SetDHCPPropertiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{35}
}

func (m *SetDHCPPropertiesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetDHCPPropertiesRequest.Unmarshal(m, b)
}
func (m *SetDHCPPropertiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetDHCPPropertiesRequest.Marshal(b, m, deterministic)
}
func (m *SetDHCPPropertiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDHCPPropertiesRequest.Merge(m, src)
}
func (m *SetDHCPPropertiesRequest) XXX_Size() int {
	return xxx_messageInfo_SetDHCPPropertiesRequest.Size(m)
}
func (m *SetDHCPPropertiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDHCPPropertiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetDHCPPropertiesRequest proto.InternalMessageInfo

func (m *SetDHCPPropertiesRequest) GetProps() *DHCPProperties {
	if m != nil {
		return m.Props
	}
	return nil
}

type SetDHCPPropertiesResponse struct {
	Props                *DHCPProperties `protobuf:"bytes,1,opt,name=props,proto3" json:"props,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SetDHCPPropertiesResponse) Reset()         { *m = SetDHCPPropertiesResponse{} }
func (m *SetDHCPPropertiesResponse) String() string { return proto.CompactTextString(m) }
func (*SetDHCPPropertiesResponse) ProtoMessage()    {}
func (*SetDHCPPropertiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{36}
}

func (m *SetDHCPPropertiesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetDHCPPropertiesResponse.Unmarshal(m, b)
}
func (m *SetDHCPPropertiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetDHCPPropertiesResponse.Marshal(b, m, deterministic)
}
func (m *SetDHCPPropertiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDHCPPropertiesResponse.Merge(m, src)
}
func (m *SetDHCPPropertiesResponse) XXX_Size() int {
	return xxx_messageInfo_SetDHCPPropertiesResponse.Size(m)
}
func (m *SetDHCPPropertiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDHCPPropertiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetDHCPPropertiesResponse proto.InternalMessageInfo

func (m *SetDHCPPropertiesResponse) GetProps() *DHCPProperties {
	if m != nil {
		return m.Props
	}
	return nil
}

type ReassociateRequest struct {
	InterfaceName        string   `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	Timeout              int64    `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReassociateRequest) Reset()         { *m = ReassociateRequest{} }
func (m *ReassociateRequest) String() string { return proto.CompactTextString(m) }
func (*ReassociateRequest) ProtoMessage()    {}
func (*ReassociateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{37}
}

func (m *ReassociateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReassociateRequest.Unmarshal(m, b)
}
func (m *ReassociateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReassociateRequest.Marshal(b, m, deterministic)
}
func (m *ReassociateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReassociateRequest.Merge(m, src)
}
func (m *ReassociateRequest) XXX_Size() int {
	return xxx_messageInfo_ReassociateRequest.Size(m)
}
func (m *ReassociateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReassociateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReassociateRequest proto.InternalMessageInfo

func (m *ReassociateRequest) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *ReassociateRequest) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type GetWifiEnabledResponse struct {
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetWifiEnabledResponse) Reset()         { *m = GetWifiEnabledResponse{} }
func (m *GetWifiEnabledResponse) String() string { return proto.CompactTextString(m) }
func (*GetWifiEnabledResponse) ProtoMessage()    {}
func (*GetWifiEnabledResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{38}
}

func (m *GetWifiEnabledResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetWifiEnabledResponse.Unmarshal(m, b)
}
func (m *GetWifiEnabledResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetWifiEnabledResponse.Marshal(b, m, deterministic)
}
func (m *GetWifiEnabledResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWifiEnabledResponse.Merge(m, src)
}
func (m *GetWifiEnabledResponse) XXX_Size() int {
	return xxx_messageInfo_GetWifiEnabledResponse.Size(m)
}
func (m *GetWifiEnabledResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWifiEnabledResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetWifiEnabledResponse proto.InternalMessageInfo

func (m *GetWifiEnabledResponse) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type SetWifiEnabledRequest struct {
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetWifiEnabledRequest) Reset()         { *m = SetWifiEnabledRequest{} }
func (m *SetWifiEnabledRequest) String() string { return proto.CompactTextString(m) }
func (*SetWifiEnabledRequest) ProtoMessage()    {}
func (*SetWifiEnabledRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{39}
}

func (m *SetWifiEnabledRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetWifiEnabledRequest.Unmarshal(m, b)
}
func (m *SetWifiEnabledRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetWifiEnabledRequest.Marshal(b, m, deterministic)
}
func (m *SetWifiEnabledRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetWifiEnabledRequest.Merge(m, src)
}
func (m *SetWifiEnabledRequest) XXX_Size() int {
	return xxx_messageInfo_SetWifiEnabledRequest.Size(m)
}
func (m *SetWifiEnabledRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetWifiEnabledRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetWifiEnabledRequest proto.InternalMessageInfo

func (m *SetWifiEnabledRequest) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type WaitForBSSIDRequest struct {
	Ssid                 []byte   `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
	Bssid                string   `protobuf:"bytes,2,opt,name=bssid,proto3" json:"bssid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WaitForBSSIDRequest) Reset()         { *m = WaitForBSSIDRequest{} }
func (m *WaitForBSSIDRequest) String() string { return proto.CompactTextString(m) }
func (*WaitForBSSIDRequest) ProtoMessage()    {}
func (*WaitForBSSIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{40}
}

func (m *WaitForBSSIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WaitForBSSIDRequest.Unmarshal(m, b)
}
func (m *WaitForBSSIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WaitForBSSIDRequest.Marshal(b, m, deterministic)
}
func (m *WaitForBSSIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitForBSSIDRequest.Merge(m, src)
}
func (m *WaitForBSSIDRequest) XXX_Size() int {
	return xxx_messageInfo_WaitForBSSIDRequest.Size(m)
}
func (m *WaitForBSSIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitForBSSIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WaitForBSSIDRequest proto.InternalMessageInfo

func (m *WaitForBSSIDRequest) GetSsid() []byte {
	if m != nil {
		return m.Ssid
	}
	return nil
}

func (m *WaitForBSSIDRequest) GetBssid() string {
	if m != nil {
		return m.Bssid
	}
	return ""
}

type MACRandomizeSupportResponse struct {
	Supported            bool     `protobuf:"varint,1,opt,name=supported,proto3" json:"supported,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACRandomizeSupportResponse) Reset()         { *m = MACRandomizeSupportResponse{} }
func (m *MACRandomizeSupportResponse) String() string { return proto.CompactTextString(m) }
func (*MACRandomizeSupportResponse) ProtoMessage()    {}
func (*MACRandomizeSupportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{41}
}

func (m *MACRandomizeSupportResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MACRandomizeSupportResponse.Unmarshal(m, b)
}
func (m *MACRandomizeSupportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MACRandomizeSupportResponse.Marshal(b, m, deterministic)
}
func (m *MACRandomizeSupportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACRandomizeSupportResponse.Merge(m, src)
}
func (m *MACRandomizeSupportResponse) XXX_Size() int {
	return xxx_messageInfo_MACRandomizeSupportResponse.Size(m)
}
func (m *MACRandomizeSupportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MACRandomizeSupportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MACRandomizeSupportResponse proto.InternalMessageInfo

func (m *MACRandomizeSupportResponse) GetSupported() bool {
	if m != nil {
		return m.Supported
	}
	return false
}

type GetMACRandomizeResponse struct {
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMACRandomizeResponse) Reset()         { *m = GetMACRandomizeResponse{} }
func (m *GetMACRandomizeResponse) String() string { return proto.CompactTextString(m) }
func (*GetMACRandomizeResponse) ProtoMessage()    {}
func (*GetMACRandomizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{42}
}

func (m *GetMACRandomizeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMACRandomizeResponse.Unmarshal(m, b)
}
func (m *GetMACRandomizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMACRandomizeResponse.Marshal(b, m, deterministic)
}
func (m *GetMACRandomizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMACRandomizeResponse.Merge(m, src)
}
func (m *GetMACRandomizeResponse) XXX_Size() int {
	return xxx_messageInfo_GetMACRandomizeResponse.Size(m)
}
func (m *GetMACRandomizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMACRandomizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMACRandomizeResponse proto.InternalMessageInfo

func (m *GetMACRandomizeResponse) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type EAPAuthSkippedResponse struct {
	Skipped              bool     `protobuf:"varint,1,opt,name=skipped,proto3" json:"skipped,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EAPAuthSkippedResponse) Reset()         { *m = EAPAuthSkippedResponse{} }
func (m *EAPAuthSkippedResponse) String() string { return proto.CompactTextString(m) }
func (*EAPAuthSkippedResponse) ProtoMessage()    {}
func (*EAPAuthSkippedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{43}
}

func (m *EAPAuthSkippedResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EAPAuthSkippedResponse.Unmarshal(m, b)
}
func (m *EAPAuthSkippedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EAPAuthSkippedResponse.Marshal(b, m, deterministic)
}
func (m *EAPAuthSkippedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EAPAuthSkippedResponse.Merge(m, src)
}
func (m *EAPAuthSkippedResponse) XXX_Size() int {
	return xxx_messageInfo_EAPAuthSkippedResponse.Size(m)
}
func (m *EAPAuthSkippedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EAPAuthSkippedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EAPAuthSkippedResponse proto.InternalMessageInfo

func (m *EAPAuthSkippedResponse) GetSkipped() bool {
	if m != nil {
		return m.Skipped
	}
	return false
}

type SuspendAssertConnectRequest struct {
	WakeUpTimeout        int64    `protobuf:"varint,1,opt,name=wake_up_timeout,json=wakeUpTimeout,proto3" json:"wake_up_timeout,omitempty"`
	ServicePath          string   `protobuf:"bytes,2,opt,name=service_path,json=servicePath,proto3" json:"service_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SuspendAssertConnectRequest) Reset()         { *m = SuspendAssertConnectRequest{} }
func (m *SuspendAssertConnectRequest) String() string { return proto.CompactTextString(m) }
func (*SuspendAssertConnectRequest) ProtoMessage()    {}
func (*SuspendAssertConnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{44}
}

func (m *SuspendAssertConnectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SuspendAssertConnectRequest.Unmarshal(m, b)
}
func (m *SuspendAssertConnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SuspendAssertConnectRequest.Marshal(b, m, deterministic)
}
func (m *SuspendAssertConnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuspendAssertConnectRequest.Merge(m, src)
}
func (m *SuspendAssertConnectRequest) XXX_Size() int {
	return xxx_messageInfo_SuspendAssertConnectRequest.Size(m)
}
func (m *SuspendAssertConnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SuspendAssertConnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SuspendAssertConnectRequest proto.InternalMessageInfo

func (m *SuspendAssertConnectRequest) GetWakeUpTimeout() int64 {
	if m != nil {
		return m.WakeUpTimeout
	}
	return 0
}

func (m *SuspendAssertConnectRequest) GetServicePath() string {
	if m != nil {
		return m.ServicePath
	}
	return ""
}

type SuspendAssertConnectResponse struct {
	ReconnectTime        int64    `protobuf:"varint,1,opt,name=reconnect_time,json=reconnectTime,proto3" json:"reconnect_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SuspendAssertConnectResponse) Reset()         { *m = SuspendAssertConnectResponse{} }
func (m *SuspendAssertConnectResponse) String() string { return proto.CompactTextString(m) }
func (*SuspendAssertConnectResponse) ProtoMessage()    {}
func (*SuspendAssertConnectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{45}
}

func (m *SuspendAssertConnectResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SuspendAssertConnectResponse.Unmarshal(m, b)
}
func (m *SuspendAssertConnectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SuspendAssertConnectResponse.Marshal(b, m, deterministic)
}
func (m *SuspendAssertConnectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuspendAssertConnectResponse.Merge(m, src)
}
func (m *SuspendAssertConnectResponse) XXX_Size() int {
	return xxx_messageInfo_SuspendAssertConnectResponse.Size(m)
}
func (m *SuspendAssertConnectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SuspendAssertConnectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SuspendAssertConnectResponse proto.InternalMessageInfo

func (m *SuspendAssertConnectResponse) GetReconnectTime() int64 {
	if m != nil {
		return m.ReconnectTime
	}
	return 0
}

type GetGlobalFTPropertyResponse struct {
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetGlobalFTPropertyResponse) Reset()         { *m = GetGlobalFTPropertyResponse{} }
func (m *GetGlobalFTPropertyResponse) String() string { return proto.CompactTextString(m) }
func (*GetGlobalFTPropertyResponse) ProtoMessage()    {}
func (*GetGlobalFTPropertyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{46}
}

func (m *GetGlobalFTPropertyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetGlobalFTPropertyResponse.Unmarshal(m, b)
}
func (m *GetGlobalFTPropertyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetGlobalFTPropertyResponse.Marshal(b, m, deterministic)
}
func (m *GetGlobalFTPropertyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGlobalFTPropertyResponse.Merge(m, src)
}
func (m *GetGlobalFTPropertyResponse) XXX_Size() int {
	return xxx_messageInfo_GetGlobalFTPropertyResponse.Size(m)
}
func (m *GetGlobalFTPropertyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGlobalFTPropertyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetGlobalFTPropertyResponse proto.InternalMessageInfo

func (m *GetGlobalFTPropertyResponse) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type SetGlobalFTPropertyRequest struct {
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetGlobalFTPropertyRequest) Reset()         { *m = SetGlobalFTPropertyRequest{} }
func (m *SetGlobalFTPropertyRequest) String() string { return proto.CompactTextString(m) }
func (*SetGlobalFTPropertyRequest) ProtoMessage()    {}
func (*SetGlobalFTPropertyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{47}
}

func (m *SetGlobalFTPropertyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetGlobalFTPropertyRequest.Unmarshal(m, b)
}
func (m *SetGlobalFTPropertyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetGlobalFTPropertyRequest.Marshal(b, m, deterministic)
}
func (m *SetGlobalFTPropertyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetGlobalFTPropertyRequest.Merge(m, src)
}
func (m *SetGlobalFTPropertyRequest) XXX_Size() int {
	return xxx_messageInfo_SetGlobalFTPropertyRequest.Size(m)
}
func (m *SetGlobalFTPropertyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetGlobalFTPropertyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetGlobalFTPropertyRequest proto.InternalMessageInfo

func (m *SetGlobalFTPropertyRequest) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func init() {
	proto.RegisterEnum("tast.cros.network.ExpectShillPropertyRequest_CheckMethod", ExpectShillPropertyRequest_CheckMethod_name, ExpectShillPropertyRequest_CheckMethod_value)
	proto.RegisterType((*ConnectRequest)(nil), "tast.cros.network.ConnectRequest")
	proto.RegisterMapType((map[string]*ShillVal)(nil), "tast.cros.network.ConnectRequest.ShillpropsEntry")
	proto.RegisterType((*ShillVal)(nil), "tast.cros.network.ShillVal")
	proto.RegisterType((*StrArray)(nil), "tast.cros.network.StrArray")
	proto.RegisterType((*Uint32Array)(nil), "tast.cros.network.Uint32Array")
	proto.RegisterType((*ConnectResponse)(nil), "tast.cros.network.ConnectResponse")
	proto.RegisterType((*DiscoverBSSIDRequest)(nil), "tast.cros.network.DiscoverBSSIDRequest")
	proto.RegisterType((*DiscoverBSSIDResponse)(nil), "tast.cros.network.DiscoverBSSIDResponse")
	proto.RegisterType((*DisconnectRequest)(nil), "tast.cros.network.DisconnectRequest")
	proto.RegisterType((*DeleteEntriesForSSIDRequest)(nil), "tast.cros.network.DeleteEntriesForSSIDRequest")
	proto.RegisterType((*QueryServiceRequest)(nil), "tast.cros.network.QueryServiceRequest")
	proto.RegisterType((*QueryServiceResponse)(nil), "tast.cros.network.QueryServiceResponse")
	proto.RegisterType((*QueryServiceResponse_Wifi)(nil), "tast.cros.network.QueryServiceResponse.Wifi")
	proto.RegisterType((*GetInterfaceResponse)(nil), "tast.cros.network.GetInterfaceResponse")
	proto.RegisterType((*GetIPv4AddrsRequest)(nil), "tast.cros.network.GetIPv4AddrsRequest")
	proto.RegisterType((*GetIPv4AddrsResponse)(nil), "tast.cros.network.GetIPv4AddrsResponse")
	proto.RegisterType((*GetHardwareAddrRequest)(nil), "tast.cros.network.GetHardwareAddrRequest")
	proto.RegisterType((*GetHardwareAddrResponse)(nil), "tast.cros.network.GetHardwareAddrResponse")
	proto.RegisterType((*ExpectWifiFrequenciesRequest)(nil), "tast.cros.network.ExpectWifiFrequenciesRequest")
	proto.RegisterType((*BgscanConfig)(nil), "tast.cros.network.BgscanConfig")
	proto.RegisterType((*GetBgscanConfigResponse)(nil), "tast.cros.network.GetBgscanConfigResponse")
	proto.RegisterType((*SetBgscanConfigRequest)(nil), "tast.cros.network.SetBgscanConfigRequest")
	proto.RegisterType((*AssureDisconnectRequest)(nil), "tast.cros.network.AssureDisconnectRequest")
	proto.RegisterType((*DisableEnableTestRequest)(nil), "tast.cros.network.DisableEnableTestRequest")
	proto.RegisterType((*RequestScansRequest)(nil), "tast.cros.network.RequestScansRequest")
	proto.RegisterType((*SetMACRandomizeRequest)(nil), "tast.cros.network.SetMACRandomizeRequest")
	proto.RegisterType((*SetMACRandomizeResponse)(nil), "tast.cros.network.SetMACRandomizeResponse")
	proto.RegisterType((*ConfigureAndAssertAutoConnectRequest)(nil), "tast.cros.network.ConfigureAndAssertAutoConnectRequest")
	proto.RegisterMapType((map[string]*ShillVal)(nil), "tast.cros.network.ConfigureAndAssertAutoConnectRequest.PropsEntry")
	proto.RegisterType((*ConfigureAndAssertAutoConnectResponse)(nil), "tast.cros.network.ConfigureAndAssertAutoConnectResponse")
	proto.RegisterType((*GetCurrentTimeResponse)(nil), "tast.cros.network.GetCurrentTimeResponse")
	proto.RegisterType((*SelectedServiceResponse)(nil), "tast.cros.network.SelectedServiceResponse")
	proto.RegisterType((*ExpectShillPropertyRequest)(nil), "tast.cros.network.ExpectShillPropertyRequest")
	proto.RegisterType((*ExpectShillPropertyRequest_Criterion)(nil), "tast.cros.network.ExpectShillPropertyRequest.Criterion")
	proto.RegisterType((*ShillPropertyChangedSignal)(nil), "tast.cros.network.ShillPropertyChangedSignal")
	proto.RegisterType((*ExpectShillPropertyResponse)(nil), "tast.cros.network.ExpectShillPropertyResponse")
	proto.RegisterType((*ProfileBasicTestRequest)(nil), "tast.cros.network.ProfileBasicTestRequest")
	proto.RegisterType((*ProfileBasicTestRequest_Config)(nil), "tast.cros.network.ProfileBasicTestRequest.Config")
	proto.RegisterMapType((map[string]*ShillVal)(nil), "tast.cros.network.ProfileBasicTestRequest.Config.ShillPropsEntry")
	proto.RegisterType((*RequestRoamRequest)(nil), "tast.cros.network.RequestRoamRequest")
	proto.RegisterType((*DHCPProperties)(nil), "tast.cros.network.DHCPProperties")
	proto.RegisterType((*SetDHCPPropertiesRequest)(nil), "tast.cros.network.SetDHCPPropertiesRequest")
	proto.RegisterType((*SetDHCPPropertiesResponse)(nil), "tast.cros.network.SetDHCPPropertiesResponse")
	proto.RegisterType((*ReassociateRequest)(nil), "tast.cros.network.ReassociateRequest")
	proto.RegisterType((*GetWifiEnabledResponse)(nil), "tast.cros.network.GetWifiEnabledResponse")
	proto.RegisterType((*SetWifiEnabledRequest)(nil), "tast.cros.network.SetWifiEnabledRequest")
	proto.RegisterType((*WaitForBSSIDRequest)(nil), "tast.cros.network.WaitForBSSIDRequest")
	proto.RegisterType((*MACRandomizeSupportResponse)(nil), "tast.cros.network.MACRandomizeSupportResponse")
	proto.RegisterType((*GetMACRandomizeResponse)(nil), "tast.cros.network.GetMACRandomizeResponse")
	proto.RegisterType((*EAPAuthSkippedResponse)(nil), "tast.cros.network.EAPAuthSkippedResponse")
	proto.RegisterType((*SuspendAssertConnectRequest)(nil), "tast.cros.network.SuspendAssertConnectRequest")
	proto.RegisterType((*SuspendAssertConnectResponse)(nil), "tast.cros.network.SuspendAssertConnectResponse")
	proto.RegisterType((*GetGlobalFTPropertyResponse)(nil), "tast.cros.network.GetGlobalFTPropertyResponse")
	proto.RegisterType((*SetGlobalFTPropertyRequest)(nil), "tast.cros.network.SetGlobalFTPropertyRequest")
}

func init() { proto.RegisterFile("wifi_service.proto", fileDescriptor_7d1eecb28f2859f1) }

var fileDescriptor_7d1eecb28f2859f1 = []byte{
	// 2474 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x19, 0x5d, 0x53, 0x1b, 0xc9,
	0x51, 0x1f, 0x7c, 0xa9, 0xc5, 0x97, 0x07, 0x0e, 0xcb, 0xc2, 0x77, 0xc6, 0x1b, 0xfb, 0x8c, 0xef,
	0xce, 0xc2, 0x60, 0x57, 0x7c, 0xb1, 0x5d, 0x97, 0x13, 0x02, 0x1b, 0x2a, 0x36, 0xc6, 0x2b, 0xb0,
	0x2f, 0xae, 0x8a, 0x37, 0x8b, 0x76, 0x40, 0x63, 0xa4, 0x9d, 0xcd, 0xce, 0x08, 0xac, 0x3c, 0xe6,
	0x25, 0xf9, 0x01, 0xf9, 0x1d, 0x79, 0x4b, 0x55, 0x7e, 0x41, 0x9e, 0xf2, 0x9c, 0x54, 0xe5, 0x6f,
	0xe4, 0x0f, 0xa4, 0x66, 0x76, 0x76, 0xb5, 0x2b, 0xcd, 0x0a, 0x44, 0xd5, 0xbd, 0x50, 0x3b, 0xad,
	0xee, 0x9e, 0x9e, 0xfe, 0xee, 0x06, 0xd0, 0x39, 0x39, 0x26, 0x16, 0xc3, 0xfe, 0x19, 0x69, 0xe0,
	0x8a, 0xe7, 0x53, 0x4e, 0xd1, 0x35, 0x6e, 0x33, 0x5e, 0x69, 0xf8, 0x94, 0x55, 0x5c, 0xcc, 0xcf,
	0xa9, 0x7f, 0x5a, 0x5e, 0x3e, 0xa1, 0xf4, 0xa4, 0x85, 0xd7, 0x24, 0xc2, 0x51, 0xe7, 0x78, 0x0d,
	0xb7, 0x3d, 0xde, 0x0d, 0xf0, 0x8d, 0x3f, 0xe7, 0x60, 0xb6, 0x46, 0x5d, 0x17, 0x37, 0xb8, 0x89,
	0xff, 0xd0, 0xc1, 0x8c, 0x23, 0x04, 0x63, 0x8c, 0x11, 0xa7, 0x94, 0x5d, 0xc9, 0xae, 0x4e, 0x9b,
	0xf2, 0x1b, 0x2d, 0xc1, 0x44, 0x93, 0x38, 0x0e, 0x76, 0x4b, 0xb9, 0x95, 0xec, 0xea, 0x94, 0xa9,
	0x4e, 0xa8, 0x0c, 0x53, 0x0c, 0x37, 0x3a, 0x3e, 0xe1, 0xdd, 0x52, 0x7e, 0x25, 0xbb, 0x5a, 0x30,
	0xa3, 0x33, 0x7a, 0x0b, 0xc0, 0x9a, 0xa4, 0xd5, 0xf2, 0x7c, 0xea, 0xb1, 0xd2, 0xd8, 0x4a, 0x7e,
	0xb5, 0xb8, 0xb1, 0x5e, 0x19, 0x90, 0xaf, 0x92, 0xbc, 0xbe, 0x52, 0x8f, 0x68, 0xb6, 0x5d, 0xee,
	0x77, 0xcd, 0x18, 0x93, 0xf2, 0x07, 0x98, 0xeb, 0xfb, 0x19, 0xcd, 0x43, 0xfe, 0x14, 0x77, 0xa5,
	0xb0, 0x05, 0x53, 0x7c, 0xa2, 0x75, 0x18, 0x3f, 0xb3, 0x5b, 0x1d, 0x2c, 0x45, 0x2d, 0x6e, 0x2c,
	0x6b, 0xae, 0x94, 0x4c, 0xde, 0xd9, 0x2d, 0x33, 0xc0, 0x7c, 0x9a, 0xfb, 0x3e, 0x6b, 0xfc, 0x3b,
	0x0b, 0x53, 0x21, 0x1c, 0x21, 0xc8, 0x33, 0xee, 0x07, 0x5c, 0x77, 0x32, 0xa6, 0x38, 0xa0, 0x45,
	0x18, 0x3b, 0xa2, 0xb4, 0x15, 0x68, 0x60, 0x27, 0x63, 0xca, 0x13, 0x2a, 0xc1, 0x44, 0x87, 0xb8,
	0xfc, 0xd1, 0x86, 0x7c, 0xff, 0xcc, 0x4e, 0xc6, 0x54, 0x67, 0xf4, 0x14, 0x0a, 0x8c, 0xfb, 0x96,
	0xed, 0xfb, 0x76, 0xb7, 0x34, 0x96, 0x2e, 0x0b, 0xf7, 0xab, 0x02, 0x65, 0x27, 0x63, 0x4e, 0x31,
	0xf5, 0x8d, 0x6a, 0x30, 0x1d, 0x70, 0x51, 0xe4, 0xe3, 0x92, 0xfc, 0x2b, 0x0d, 0xf9, 0xa1, 0x44,
	0x0b, 0x39, 0x14, 0x3b, 0xbd, 0xe3, 0xe6, 0x38, 0xe4, 0xcf, 0xec, 0x96, 0xf1, 0x15, 0x4c, 0x85,
	0x77, 0x08, 0xdb, 0x9e, 0xd9, 0x2d, 0x56, 0xca, 0xae, 0xe4, 0x57, 0x0b, 0xa6, 0xfc, 0x36, 0x6e,
	0x43, 0x31, 0xc6, 0x24, 0x81, 0x32, 0xa3, 0x50, 0xfe, 0x9e, 0x85, 0xb9, 0xc8, 0x4c, 0xcc, 0xa3,
	0x2e, 0xc3, 0xe8, 0x36, 0x4c, 0x2b, 0xd7, 0xb3, 0x3c, 0x9b, 0x37, 0x95, 0x05, 0x8a, 0x0a, 0xb6,
	0x6f, 0xf3, 0x26, 0xba, 0x0b, 0xb3, 0x0e, 0x61, 0x0d, 0x7a, 0x86, 0xfd, 0xae, 0xc5, 0x49, 0x3b,
	0x30, 0x49, 0xde, 0x9c, 0x89, 0xa0, 0x07, 0xa4, 0x8d, 0xd1, 0x7d, 0x98, 0xb7, 0x19, 0xa3, 0x0d,
	0x62, 0x73, 0x42, 0xdd, 0x00, 0x31, 0x2f, 0x11, 0xe7, 0x62, 0x70, 0x89, 0xfa, 0x00, 0x50, 0x83,
	0xba, 0xc7, 0xe4, 0xa4, 0xe3, 0xc7, 0x90, 0xc7, 0x24, 0xf2, 0xb5, 0xc4, 0x2f, 0x02, 0xdd, 0xf8,
	0x08, 0x8b, 0x5b, 0xea, 0xaa, 0xcd, 0x7a, 0x7d, 0x77, 0x2b, 0x74, 0xf1, 0x45, 0x18, 0x3f, 0x8a,
	0x7c, 0xbc, 0x60, 0x06, 0x07, 0x74, 0x13, 0x0a, 0xc4, 0xe5, 0xd8, 0x3f, 0xb6, 0x1b, 0x81, 0xa4,
	0x05, 0xb3, 0x07, 0x88, 0xc2, 0x22, 0xdf, 0x0b, 0x0b, 0xe3, 0x07, 0xf8, 0xa2, 0x8f, 0xbf, 0x52,
	0xce, 0xe0, 0xcb, 0xb3, 0x9a, 0x97, 0x1b, 0xbf, 0x83, 0x6b, 0x92, 0x3e, 0x11, 0x7f, 0x97, 0x53,
	0xac, 0x8f, 0xdb, 0xf4, 0x0c, 0x5b, 0x9e, 0x4f, 0x8f, 0x49, 0x0b, 0xab, 0xb0, 0x9c, 0x09, 0xa0,
	0xfb, 0x01, 0xd0, 0x58, 0x87, 0xe5, 0x2d, 0xdc, 0xc2, 0x1c, 0x8b, 0x50, 0x21, 0x98, 0xbd, 0xa0,
	0x7e, 0x5c, 0x0b, 0x9a, 0x40, 0x37, 0xee, 0xc3, 0xc2, 0xdb, 0x0e, 0xf6, 0xbb, 0xf5, 0xe0, 0xb6,
	0x18, 0x6a, 0x4c, 0x16, 0xf9, 0x6d, 0xfc, 0x2f, 0x0f, 0x8b, 0x49, 0x5c, 0xf5, 0x78, 0x04, 0x63,
	0xae, 0xad, 0x9e, 0x5c, 0x30, 0xe5, 0xb7, 0x48, 0x20, 0x0e, 0x16, 0x58, 0x4a, 0xb1, 0xea, 0x24,
	0x70, 0x79, 0xd7, 0xc3, 0x2a, 0x79, 0xc8, 0x6f, 0x01, 0x6b, 0x53, 0x27, 0x30, 0x6b, 0xc1, 0x94,
	0xdf, 0xc2, 0x62, 0x8c, 0xdb, 0x1c, 0xcb, 0x48, 0x28, 0x98, 0xc1, 0x01, 0x95, 0x60, 0xf2, 0x8c,
	0x30, 0x72, 0xd4, 0xc2, 0xa5, 0x09, 0xa9, 0x80, 0xf0, 0x28, 0x94, 0x48, 0x98, 0xa5, 0x34, 0x8b,
	0x9d, 0xd2, 0xa4, 0xfc, 0xb9, 0x48, 0x58, 0x2d, 0x04, 0xa1, 0x1f, 0x61, 0x4c, 0x24, 0xd0, 0xd2,
	0x94, 0x8c, 0xad, 0xef, 0x34, 0xb1, 0xa5, 0x7b, 0x5d, 0xe5, 0x3d, 0x39, 0x26, 0xa6, 0xa4, 0x14,
	0x82, 0x9e, 0x74, 0x88, 0x53, 0x2a, 0x04, 0x82, 0x8a, 0x6f, 0xf4, 0x0b, 0x98, 0x51, 0xb7, 0x0a,
	0xf7, 0x24, 0x4e, 0x09, 0x56, 0xb2, 0xab, 0xe3, 0xe6, 0x74, 0x0f, 0xb8, 0xeb, 0x94, 0xff, 0x91,
	0x85, 0x31, 0xc1, 0x27, 0xdd, 0x11, 0x8f, 0x7d, 0xa1, 0x79, 0xb7, 0xd1, 0x95, 0xfa, 0x9a, 0x31,
	0x7b, 0x00, 0x61, 0xfc, 0xe8, 0x60, 0xb5, 0x08, 0xe3, 0xa5, 0xbc, 0x0c, 0xd5, 0x99, 0x08, 0xfa,
	0x8a, 0x30, 0x8e, 0x6e, 0xc0, 0x54, 0x13, 0x7f, 0xb6, 0x24, 0xf7, 0x40, 0x93, 0x93, 0x4d, 0xfc,
	0xb9, 0x2e, 0xf8, 0xdf, 0x82, 0x62, 0x90, 0xbf, 0x83, 0x5f, 0xc7, 0xa5, 0x6e, 0x20, 0x00, 0x49,
	0x84, 0x1b, 0x30, 0xe5, 0x35, 0xbb, 0x96, 0xb4, 0xc2, 0x84, 0xbc, 0x7f, 0xd2, 0x6b, 0x76, 0x5f,
	0x53, 0x07, 0x1b, 0xdf, 0xc0, 0xe2, 0x4b, 0xcc, 0x77, 0xc3, 0xb0, 0x18, 0x66, 0x74, 0xe3, 0x39,
	0x2c, 0x08, 0xdc, 0xfd, 0xb3, 0xc7, 0x55, 0xc7, 0xf1, 0x59, 0xe8, 0x4c, 0x77, 0x61, 0x36, 0x0a,
	0x2b, 0x2b, 0x46, 0x34, 0x13, 0x41, 0xf7, 0x04, 0xb5, 0xba, 0xa9, 0x47, 0xdd, 0xbb, 0x89, 0x78,
	0x67, 0x8f, 0xc3, 0x1c, 0x26, 0xbe, 0x8d, 0x1f, 0x60, 0xe9, 0x25, 0xe6, 0x3b, 0xb6, 0xef, 0x9c,
	0xdb, 0x3e, 0x16, 0xf8, 0xe1, 0x65, 0x77, 0x20, 0xc9, 0x56, 0x7f, 0xd7, 0x06, 0x5c, 0x1f, 0xa0,
	0x57, 0xd7, 0x5d, 0x87, 0xc9, 0xe6, 0xb9, 0x65, 0x3b, 0x8e, 0x2a, 0x07, 0xe6, 0x44, 0xf3, 0x5c,
	0x20, 0x18, 0x07, 0x70, 0x73, 0xfb, 0xb3, 0x87, 0x1b, 0x5c, 0x58, 0xf2, 0x85, 0xd2, 0x3d, 0xc1,
	0x6c, 0x58, 0x1d, 0x5d, 0x81, 0xe2, 0x71, 0x0f, 0xb3, 0x94, 0x93, 0x86, 0x8b, 0x83, 0x0c, 0x1f,
	0xa6, 0x37, 0x4f, 0x58, 0xc3, 0x76, 0x6b, 0x32, 0x9b, 0x89, 0xc0, 0x69, 0x63, 0xde, 0xa4, 0xa1,
	0x8b, 0xa8, 0x93, 0x50, 0x22, 0x6b, 0x52, 0x9f, 0x5b, 0xf2, 0x21, 0x67, 0x76, 0x4b, 0x39, 0xca,
	0x8c, 0x84, 0xee, 0x2a, 0xa0, 0x70, 0xc7, 0x16, 0x75, 0x4f, 0x7a, 0x58, 0xb2, 0x4a, 0x99, 0xd3,
	0x02, 0x18, 0x22, 0x19, 0xa6, 0x7c, 0x7d, 0xfc, 0xda, 0xe8, 0xf5, 0x4f, 0x60, 0x22, 0x48, 0xab,
	0xf2, 0xfa, 0xe2, 0xc6, 0x2d, 0x4d, 0x98, 0x24, 0x08, 0x15, 0xba, 0xf1, 0x16, 0x96, 0xea, 0xfd,
	0x3c, 0x03, 0xbd, 0x5c, 0x99, 0xe5, 0x3b, 0xb8, 0x5e, 0x65, 0xac, 0xe3, 0xe3, 0x2b, 0xe5, 0xcc,
	0x12, 0x4c, 0x8a, 0x44, 0x4c, 0x3b, 0x5c, 0x55, 0xa1, 0xf0, 0x68, 0x38, 0x50, 0xda, 0x22, 0xcc,
	0x3e, 0x6a, 0xe1, 0x6d, 0x57, 0xfc, 0x3d, 0xc0, 0x8c, 0x8f, 0xe6, 0xab, 0x03, 0xf7, 0xe7, 0x06,
	0xee, 0x37, 0xbe, 0x85, 0x05, 0xc5, 0xb4, 0xde, 0xb0, 0x5d, 0x16, 0x2b, 0x45, 0x0d, 0xda, 0x71,
	0xb9, 0xe4, 0x3b, 0x6e, 0x06, 0x07, 0xe3, 0xa1, 0xd4, 0xde, 0xeb, 0x6a, 0xcd, 0xb4, 0x5d, 0x87,
	0xb6, 0xc9, 0x1f, 0xa3, 0x4c, 0xbc, 0x04, 0x13, 0x58, 0x4a, 0x29, 0x09, 0xa6, 0x4c, 0x75, 0x32,
	0x9e, 0xc2, 0xf5, 0x01, 0x0a, 0x65, 0xc3, 0x5b, 0x50, 0xa4, 0x2d, 0xc7, 0x62, 0x98, 0x73, 0xe2,
	0x9e, 0x28, 0x3a, 0xa0, 0x2d, 0xa7, 0x1e, 0x40, 0x8c, 0xff, 0x64, 0xe1, 0x4e, 0x4d, 0x15, 0x4f,
	0x5c, 0x75, 0x9d, 0x2a, 0x63, 0xd8, 0xe7, 0xd5, 0x0e, 0xa7, 0x7d, 0xad, 0xe1, 0x4f, 0x30, 0x1e,
	0x74, 0x73, 0x59, 0xd9, 0xcd, 0x6d, 0xea, 0xbb, 0xb9, 0x0b, 0xf9, 0x54, 0xf6, 0x7b, 0xed, 0x5d,
	0xc0, 0xb0, 0x7c, 0x08, 0xb0, 0xff, 0x33, 0x34, 0x75, 0xcf, 0xe0, 0xee, 0x05, 0x02, 0xf5, 0x92,
	0xca, 0x40, 0x81, 0xfb, 0x28, 0x93, 0x4a, 0xad, 0xe3, 0xfb, 0xd8, 0xe5, 0xa2, 0x5e, 0x47, 0xd8,
	0x5f, 0x02, 0xb8, 0xf4, 0xdc, 0x62, 0xb8, 0x41, 0x5d, 0x47, 0x95, 0xf6, 0x82, 0x4b, 0xcf, 0xeb,
	0x12, 0x20, 0x9c, 0x46, 0xfc, 0xec, 0xda, 0x2e, 0x55, 0x28, 0xaa, 0xef, 0x71, 0xe9, 0xf9, 0x5e,
	0x04, 0x34, 0x9e, 0x0b, 0x93, 0xb5, 0x64, 0x31, 0xea, 0x2f, 0xa1, 0x17, 0xfb, 0xb3, 0xf1, 0xaf,
	0x3c, 0x94, 0x83, 0xfc, 0x23, 0x1f, 0x2e, 0xb4, 0x87, 0x7d, 0xde, 0x0d, 0x4d, 0x25, 0x8c, 0x7e,
	0xf4, 0x09, 0x37, 0x78, 0x9c, 0x01, 0x04, 0x20, 0x19, 0x0f, 0xaf, 0x43, 0x5b, 0xe6, 0xa4, 0x2d,
	0x9f, 0x68, 0x34, 0x9a, 0xce, 0xbe, 0x52, 0xf3, 0x09, 0xc7, 0x3e, 0xa1, 0xae, 0x32, 0xa0, 0x48,
	0x34, 0x6d, 0xea, 0x12, 0x4e, 0x7d, 0x2b, 0x60, 0x9b, 0x97, 0xe9, 0x79, 0x5a, 0x01, 0xa5, 0x71,
	0xcb, 0xff, 0xcd, 0x42, 0x21, 0xa2, 0xd4, 0x58, 0x79, 0x03, 0x26, 0x6c, 0xb7, 0x6b, 0xd1, 0x63,
	0x25, 0xd4, 0x70, 0x33, 0xdb, 0x6e, 0xf7, 0xcd, 0x31, 0x7a, 0x0c, 0x93, 0x2e, 0x75, 0xb1, 0x20,
	0xca, 0x5f, 0x4c, 0x34, 0x21, 0x70, 0xdf, 0x1c, 0xa3, 0xb7, 0x51, 0x5a, 0x15, 0xb5, 0x71, 0x76,
	0xe3, 0x57, 0x23, 0x3e, 0xbf, 0x89, 0x1b, 0xa7, 0xaf, 0x25, 0x83, 0x30, 0x23, 0x1b, 0xcf, 0xa1,
	0x18, 0x03, 0xa3, 0x59, 0x80, 0xda, 0xce, 0x76, 0xed, 0x37, 0xd6, 0xfb, 0xea, 0xee, 0xc1, 0x7c,
	0x06, 0xcd, 0x40, 0xe1, 0xcd, 0x9e, 0x55, 0xdb, 0xa9, 0xee, 0xbd, 0xdc, 0x9e, 0xcf, 0xf6, 0x7e,
	0x7e, 0xb3, 0xf7, 0xea, 0xb7, 0xf3, 0x39, 0xc3, 0x82, 0x72, 0xe2, 0xa6, 0x5a, 0xd3, 0x76, 0x4f,
	0xb0, 0x53, 0x27, 0x27, 0xae, 0x9c, 0x47, 0xc6, 0x84, 0x56, 0x23, 0xf7, 0xf4, 0xa9, 0x87, 0x1e,
	0xc8, 0xf6, 0xfe, 0x32, 0x01, 0x21, 0xc7, 0x80, 0x7f, 0x66, 0x61, 0x59, 0xfb, 0x22, 0xe5, 0x72,
	0x83, 0xd6, 0x18, 0xed, 0x02, 0x54, 0x0b, 0x1d, 0x2a, 0x30, 0xc3, 0x83, 0x34, 0x02, 0xed, 0x0b,
	0x43, 0x37, 0xba, 0x0d, 0xa1, 0xc7, 0x58, 0x0e, 0x75, 0x83, 0x1e, 0x70, 0xca, 0x2c, 0x2a, 0xd8,
	0x16, 0x75, 0xb1, 0xf1, 0xb7, 0x3c, 0x5c, 0x57, 0x1d, 0xee, 0xa6, 0xcd, 0x48, 0x23, 0x9e, 0xae,
	0x6b, 0x90, 0xb7, 0xbd, 0x87, 0xaa, 0xb0, 0xe8, 0x86, 0xcd, 0x14, 0x42, 0x95, 0xb6, 0x4c, 0x41,
	0x1d, 0x30, 0x59, 0x57, 0xef, 0xbe, 0x1a, 0x93, 0xf5, 0xf2, 0x5f, 0x72, 0x30, 0xa1, 0x4a, 0xb8,
	0xae, 0x11, 0x88, 0x0f, 0xce, 0xb9, 0xbe, 0xc1, 0x79, 0x16, 0x72, 0xc4, 0x53, 0x1d, 0x71, 0x8e,
	0x78, 0xe8, 0x08, 0x8a, 0x72, 0x06, 0xb6, 0xe2, 0x93, 0x74, 0x75, 0x64, 0xb9, 0x7a, 0xda, 0x4f,
	0x4c, 0xd6, 0xfb, 0x89, 0xc9, 0xfa, 0xe7, 0x48, 0xc2, 0xa7, 0x80, 0x94, 0x24, 0x26, 0xb5, 0xdb,
	0x23, 0x56, 0xd6, 0xa8, 0x43, 0xce, 0xc5, 0x3b, 0xe4, 0x58, 0x31, 0xcf, 0x27, 0x8b, 0xf9, 0x1b,
	0x98, 0xdd, 0xda, 0xa9, 0xed, 0x2b, 0x27, 0x23, 0x58, 0xba, 0xd4, 0x19, 0x76, 0x1d, 0xea, 0x5b,
	0x8d, 0x96, 0xcd, 0x58, 0x98, 0x4b, 0x03, 0x58, 0x4d, 0x80, 0x84, 0x35, 0x9a, 0x94, 0x71, 0x29,
	0x85, 0xb2, 0x46, 0x78, 0x36, 0xea, 0x50, 0xaa, 0x63, 0x9e, 0xe4, 0xd9, 0x6b, 0x65, 0xa2, 0x7a,
	0x28, 0x14, 0x72, 0x5b, 0xa3, 0x90, 0x3e, 0xc2, 0x00, 0xdf, 0x38, 0x80, 0x1b, 0x1a, 0xa6, 0x51,
	0xcf, 0x75, 0x45, 0xae, 0x87, 0x42, 0xd1, 0xe1, 0xc8, 0x8c, 0x47, 0x54, 0x74, 0x7a, 0x7f, 0xb4,
	0x21, 0xeb, 0xa0, 0xe8, 0x72, 0x83, 0xfe, 0xc8, 0x89, 0x24, 0x2d, 0xc1, 0x64, 0xd0, 0x7e, 0x38,
	0xaa, 0xab, 0x08, 0x8f, 0xc6, 0x3a, 0x7c, 0x51, 0xef, 0xa3, 0x09, 0xa4, 0x49, 0x27, 0xf9, 0x35,
	0x2c, 0xbc, 0xb7, 0x09, 0x7f, 0x41, 0x93, 0xb3, 0xba, 0x2e, 0x7a, 0xb4, 0x4e, 0x61, 0x3c, 0x83,
	0xe5, 0x78, 0xff, 0x53, 0xef, 0x78, 0x1e, 0xf5, 0x7b, 0x25, 0xfe, 0x26, 0x14, 0x58, 0x00, 0x8a,
	0xee, 0xee, 0x01, 0x8c, 0x47, 0xb2, 0x07, 0xd6, 0xf6, 0x4f, 0xe9, 0x22, 0x6f, 0xc0, 0xd2, 0x76,
	0x75, 0xbf, 0xda, 0xe1, 0xcd, 0xfa, 0x29, 0xf1, 0xbc, 0xa4, 0x66, 0x58, 0x00, 0x0a, 0x69, 0xd4,
	0xd1, 0x68, 0xc2, 0x72, 0xbd, 0xc3, 0x3c, 0x1c, 0x76, 0x23, 0x7d, 0x2d, 0xd6, 0xd7, 0x30, 0x77,
	0x6e, 0x9f, 0x62, 0xab, 0xe3, 0x59, 0xa1, 0x39, 0xd4, 0xea, 0x40, 0x80, 0x0f, 0xbd, 0x83, 0x00,
	0x78, 0x99, 0x8e, 0x73, 0x1b, 0x6e, 0xea, 0x6f, 0xea, 0x2d, 0x29, 0x7c, 0xac, 0x1a, 0xe9, 0xc4,
	0x92, 0x22, 0x82, 0xca, 0x25, 0xc5, 0x13, 0x58, 0x7e, 0x89, 0xf9, 0xcb, 0x16, 0x3d, 0xb2, 0x5b,
	0x2f, 0x0e, 0x06, 0xea, 0x46, 0xba, 0x76, 0x7e, 0x09, 0xe5, 0xba, 0x8e, 0xf0, 0x02, 0x47, 0xd8,
	0xf8, 0x53, 0x19, 0x8a, 0xc2, 0x73, 0x54, 0x53, 0x84, 0x9e, 0xc1, 0xe4, 0xae, 0x4b, 0xf8, 0xd6,
	0xe1, 0x01, 0x5a, 0xaa, 0x04, 0xcb, 0xcc, 0x4a, 0xb8, 0xcc, 0xac, 0x6c, 0xb7, 0x3d, 0xde, 0x2d,
	0xa7, 0xc0, 0x8d, 0x0c, 0xaa, 0xc1, 0x9c, 0x89, 0x89, 0x4b, 0xb8, 0x48, 0x88, 0x75, 0xb9, 0x35,
	0x18, 0x9d, 0xc9, 0x73, 0x98, 0x3a, 0xc0, 0xb6, 0xbf, 0x45, 0xcf, 0xdd, 0x2b, 0x50, 0x9b, 0x30,
	0xa9, 0x54, 0x8f, 0x6e, 0x5f, 0xb8, 0xff, 0x2c, 0x1b, 0xc3, 0x50, 0x02, 0x9d, 0x1b, 0x19, 0xf4,
	0x0a, 0xa0, 0x37, 0x05, 0xa1, 0x3b, 0xba, 0x14, 0xd1, 0x3f, 0x24, 0x0d, 0x91, 0xf0, 0xf7, 0xb0,
	0xa8, 0x5b, 0x14, 0xa1, 0x8a, 0x8e, 0x6f, 0xfa, 0x46, 0x69, 0xc8, 0x0d, 0x36, 0x4c, 0xc7, 0xb7,
	0x29, 0xe8, 0xeb, 0x0b, 0xd7, 0x2d, 0x01, 0xc7, 0x7b, 0x97, 0x5c, 0xcb, 0x18, 0x19, 0xf4, 0x16,
	0xa6, 0xe3, 0x9b, 0x89, 0x54, 0x43, 0xe9, 0x58, 0xea, 0x56, 0x1a, 0x81, 0xd4, 0xf1, 0x15, 0x84,
	0x56, 0x6a, 0xcd, 0x86, 0x23, 0xf5, 0x8a, 0xfe, 0x5d, 0x86, 0x91, 0x41, 0x9f, 0x60, 0xae, 0x6f,
	0xf3, 0x80, 0xee, 0xeb, 0xa9, 0x35, 0xdb, 0x8d, 0xf2, 0x37, 0x97, 0x41, 0x8d, 0xee, 0x3a, 0x82,
	0x2f, 0xb4, 0x1b, 0x0b, 0xb4, 0x96, 0xda, 0xfd, 0xea, 0x77, 0x1b, 0x43, 0x0c, 0xfd, 0x5e, 0xbe,
	0x27, 0xb9, 0xc2, 0x48, 0x31, 0x44, 0x8a, 0xf0, 0xba, 0x3d, 0x84, 0x91, 0x41, 0xef, 0x60, 0xae,
	0x6f, 0xa1, 0xa0, 0x55, 0x94, 0x7e, 0xe9, 0x30, 0x44, 0xe0, 0x9f, 0x60, 0xbe, 0x7f, 0xab, 0x80,
	0x74, 0x92, 0xa5, 0xac, 0x1e, 0x86, 0x70, 0xfe, 0x20, 0xb7, 0xbb, 0xc9, 0xbd, 0x02, 0xfa, 0x56,
	0x1f, 0xaa, 0xda, 0xed, 0xc3, 0x10, 0xde, 0xfb, 0x30, 0x1d, 0xdf, 0x26, 0x68, 0x3d, 0x53, 0xb3,
	0x6e, 0x18, 0xc2, 0xf1, 0x93, 0xd4, 0x6f, 0xbc, 0x00, 0xa6, 0xe9, 0x57, 0xb3, 0x96, 0xd0, 0xda,
	0x32, 0x65, 0x1f, 0x61, 0x64, 0xd0, 0x8f, 0x30, 0x2d, 0x4a, 0xbd, 0x90, 0x6c, 0xd7, 0x69, 0x5d,
	0x25, 0x23, 0xff, 0x35, 0x0b, 0x5f, 0x0e, 0x9d, 0xec, 0xd1, 0x93, 0x2b, 0x2e, 0x27, 0xca, 0xdf,
	0x8f, 0x4e, 0x18, 0x3d, 0xec, 0x10, 0x66, 0x93, 0x2b, 0x83, 0xd4, 0xa7, 0xa5, 0x04, 0xb9, 0x66,
	0xdb, 0x10, 0x04, 0x55, 0xdf, 0xa6, 0x60, 0xa4, 0xa0, 0x4a, 0xd9, 0x32, 0x18, 0x19, 0xf4, 0x19,
	0x16, 0x34, 0x33, 0x21, 0x7a, 0x30, 0xd2, 0x34, 0x5c, 0xae, 0x5c, 0x16, 0x3d, 0xbc, 0xf7, 0x61,
	0x56, 0x84, 0x5d, 0xff, 0xb8, 0xa2, 0x0d, 0xbb, 0x94, 0x99, 0x66, 0x88, 0x6b, 0x38, 0x30, 0x93,
	0xf8, 0xa7, 0x0c, 0xba, 0x97, 0x56, 0x1d, 0xfb, 0xfe, 0x2d, 0x54, 0x5e, 0xbd, 0x18, 0x31, 0xd2,
	0xdc, 0x1e, 0x14, 0x63, 0x43, 0x0d, 0xba, 0x9b, 0x1e, 0x7f, 0xb1, 0xa1, 0x67, 0x88, 0xd4, 0x1e,
	0x5c, 0x1b, 0x98, 0x08, 0xb4, 0xc9, 0x22, 0x6d, 0x18, 0x29, 0x7f, 0x77, 0x39, 0xe4, 0xe4, 0x0b,
	0xa2, 0x69, 0x21, 0xe5, 0x05, 0xfd, 0xd3, 0xc4, 0x90, 0x17, 0x04, 0xbe, 0x1f, 0x6b, 0xf9, 0x47,
	0xf5, 0x7d, 0xcd, 0x84, 0x61, 0x64, 0xd0, 0x01, 0xcc, 0x26, 0x27, 0x09, 0xb4, 0xaa, 0x7f, 0xe8,
	0xe0, 0xb0, 0x31, 0x3c, 0x7f, 0xc6, 0x87, 0x0d, 0x6d, 0xfe, 0xd4, 0x4c, 0x23, 0x43, 0x38, 0x5a,
	0xb0, 0xa0, 0x99, 0x3e, 0x52, 0x75, 0xa0, 0x8b, 0x99, 0x21, 0xd3, 0x4b, 0x54, 0x59, 0x13, 0x09,
	0x7a, 0xc4, 0xca, 0x9a, 0x92, 0x8d, 0xdf, 0xc3, 0x6c, 0x72, 0x8a, 0x19, 0xc9, 0x70, 0xfa, 0x01,
	0x48, 0xc6, 0x78, 0x17, 0x16, 0x75, 0x03, 0x88, 0xb6, 0xad, 0x1c, 0x32, 0x13, 0x95, 0xd7, 0x2e,
	0x8d, 0x1f, 0xbd, 0xc9, 0x92, 0xff, 0x7a, 0xea, 0x9f, 0x3d, 0x46, 0xb2, 0xc6, 0x90, 0xa1, 0xc7,
	0xc8, 0xa0, 0x8f, 0xb0, 0xa0, 0x19, 0x6e, 0xb4, 0x99, 0x33, 0x7d, 0x08, 0x4a, 0x77, 0xa7, 0xcd,
	0x7b, 0x1f, 0xee, 0x36, 0x9a, 0x3e, 0x6d, 0x93, 0x4e, 0x9b, 0xb2, 0x35, 0xc1, 0x74, 0x4d, 0xcd,
	0x76, 0x6c, 0x4d, 0x70, 0x5f, 0x53, 0xdc, 0x8f, 0x26, 0x24, 0xe9, 0xa3, 0xff, 0x07, 0x00, 0x00,
	0xff, 0xff, 0x0c, 0xcc, 0xd1, 0x79, 0x0e, 0x22, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WifiServiceClient is the client API for WifiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WifiServiceClient interface {
	// InitDUT initialize the DUT for WiFi testing.
	InitDUT(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// ReinitTestState cleans and sets up the environment for a single WiFi testcase.
	ReinitTestState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// TearDown reverts the settings made in InitDUT (and also ReinitTestState).
	TearDown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Connect attempts to connect WiFi network.
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
	// Disconnect attempts to disconnect from a service.
	Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// DeleteEntriesForSSID deletes all WiFi profile entries for a given ssid.
	DeleteEntriesForSSID(ctx context.Context, in *DeleteEntriesForSSIDRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// QueryService queries shill service information.
	QueryService(ctx context.Context, in *QueryServiceRequest, opts ...grpc.CallOption) (*QueryServiceResponse, error)
	// GetInterface returns the WiFi device interface name (e.g., wlan0).
	GetInterface(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetInterfaceResponse, error)
	// GetIPv4Addrs returns the IPv4 addresses for the network interface.
	GetIPv4Addrs(ctx context.Context, in *GetIPv4AddrsRequest, opts ...grpc.CallOption) (*GetIPv4AddrsResponse, error)
	// GetHardwareAddr returns the HardwareAddr for the network interface.
	GetHardwareAddr(ctx context.Context, in *GetHardwareAddrRequest, opts ...grpc.CallOption) (*GetHardwareAddrResponse, error)
	// ExpectWifiFrequencies checks if the device discovers the given SSID on the specific frequencies.
	ExpectWifiFrequencies(ctx context.Context, in *ExpectWifiFrequenciesRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetBgscanConfig returns the bgscan configuration the device's WiFi module currently uses.
	GetBgscanConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetBgscanConfigResponse, error)
	// SetBgscanConfig sets the device's WiFi module's bgscan configuration.
	SetBgscanConfig(ctx context.Context, in *SetBgscanConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// AssureDisconnect assures that the WiFi service has disconnected within timeout (nanoseconds).
	AssureDisconnect(ctx context.Context, in *AssureDisconnectRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// DisableEnableTest disables and then enables the WiFi interface.
	// This is the main body of the DisableEnable test.
	DisableEnableTest(ctx context.Context, in *DisableEnableTestRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// RequestScans requests shill to trigger active scans on WiFi devices.
	RequestScans(ctx context.Context, in *RequestScansRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// SetMACRandomize sets the MAC randomization setting on the WiFi device.
	// The original setting is returned for ease of restoring.
	SetMACRandomize(ctx context.Context, in *SetMACRandomizeRequest, opts ...grpc.CallOption) (*SetMACRandomizeResponse, error)
	// WaitScanIdle waits for not scanning state. If there's a running scan, it can
	// wait for it to be done with timeout 10 seconds.
	// This is useful when the test sets some parameters regarding scans and wants
	// to avoid noices due to not yet ended scans.
	WaitScanIdle(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// ConfigureAndAssertAutoConnect configures the matched shill service and then
	// waits for the IsConnected property becomes true.
	// Note that this function does not attempt to connect; it waits for auto
	// connect instead.
	ConfigureAndAssertAutoConnect(ctx context.Context, in *ConfigureAndAssertAutoConnectRequest, opts ...grpc.CallOption) (*ConfigureAndAssertAutoConnectResponse, error)
	// GetCurrentTime returns the current local time in the given format.
	GetCurrentTime(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetCurrentTimeResponse, error)
	// SelectedService returns the object path of selected service of WiFi service.
	SelectedService(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SelectedServiceResponse, error)
	// ExpectShillProperty is a streaming gRPC, takes a shill service path, expects a list of property
	// criteria in order, and takes a list of shill properties to monitor. When a property's value is
	// expected, it responds the property's (key, value) pair. The method sends an empty response as the
	// property watcher is set. A property matching criterion consists of a property name, a list of
	// expected values, a list of excluded values, and a "CheckType". We say a criterion is met iff the
	// property value is in one of the expected values and not in any of the excluded values. If the
	// property value is one of the excluded values, the method fails immediately. The call monitors the
	// specified shill properties and returns the monitor results as a chronological list of pairs
	// (changed property, changed value) at the end.
	// For CheckMethod, it has three methods:
	// 1. CHECK_ONLY: checks if the criterion is met.
	// 2. ON_CHANGE: waits for the property changes to the expected values.
	// 3. CHECK_WAIT: checks if the criterion is met; if not, waits until the property's value is met.
	ExpectShillProperty(ctx context.Context, in *ExpectShillPropertyRequest, opts ...grpc.CallOption) (WifiService_ExpectShillPropertyClient, error)
	// ProfileBasicTest is the main body of the ProfileBasic test, which creates,
	// pushes, and pops the profiles and asserts the connection states between
	// those operations.
	ProfileBasicTest(ctx context.Context, in *ProfileBasicTestRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// DiscoverBSSID discovers the specified BSSID by running a scan.
	DiscoverBSSID(ctx context.Context, in *DiscoverBSSIDRequest, opts ...grpc.CallOption) (*DiscoverBSSIDResponse, error)
	// RequestRoam requests DUT to roam to the specified BSSID and waits until
	// the DUT has roamed.
	RequestRoam(ctx context.Context, in *RequestRoamRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// SetDHCPProperties sets the DHCP properties in shill and returns the original
	// values.
	SetDHCPProperties(ctx context.Context, in *SetDHCPPropertiesRequest, opts ...grpc.CallOption) (*SetDHCPPropertiesResponse, error)
	// Reassociate triggers reassociation with the current AP and waits until it
	// has reconnected or the timeout (in nanoseconds) expires.
	Reassociate(ctx context.Context, in *ReassociateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetWifiEnabled checks to see if Wifi is an enabled technology on shill.
	// This call will wait for WiFi to appear in available technologies so we
	// can get correct enabled setting.
	GetWifiEnabled(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetWifiEnabledResponse, error)
	// SetWifiEnabled persistently enables/disables Wifi via shill.
	SetWifiEnabled(ctx context.Context, in *SetWifiEnabledRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// WaitForBSSID waits for a specific BSSID to be found.
	WaitForBSSID(ctx context.Context, in *WaitForBSSIDRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// MACRandomizeSupport tells if MAC randomization is supported for the WiFi device.
	MACRandomizeSupport(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MACRandomizeSupportResponse, error)
	// GetMACRandomize tells if MAC randomization is enabled for the WiFi device.
	GetMACRandomize(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetMACRandomizeResponse, error)
	// EAPAuthSkipped is a streaming gRPC, who watches wpa_supplicant's D-Bus signals until the next connection
	// completes, and tells that the EAP authentication is skipped (i.e., PMKSA is cached and used) or not.
	// Note that the method sends an empty response as the signal watcher is set.
	EAPAuthSkipped(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (WifiService_EAPAuthSkippedClient, error)
	// SuspendAssertConnect suspends the DUT and waits for connection after resuming.
	SuspendAssertConnect(ctx context.Context, in *SuspendAssertConnectRequest, opts ...grpc.CallOption) (*SuspendAssertConnectResponse, error)
	// GetGlobalFTProperty returns the WiFi.GlobalFTEnabled manager property value.
	GetGlobalFTProperty(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetGlobalFTPropertyResponse, error)
	// SetGlobalFTProperty set the WiFi.GlobalFTEnabled manager property value.
	SetGlobalFTProperty(ctx context.Context, in *SetGlobalFTPropertyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type wifiServiceClient struct {
	cc *grpc.ClientConn
}

func NewWifiServiceClient(cc *grpc.ClientConn) WifiServiceClient {
	return &wifiServiceClient{cc}
}

func (c *wifiServiceClient) InitDUT(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/InitDUT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) ReinitTestState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/ReinitTestState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) TearDown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/TearDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) DeleteEntriesForSSID(ctx context.Context, in *DeleteEntriesForSSIDRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/DeleteEntriesForSSID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) QueryService(ctx context.Context, in *QueryServiceRequest, opts ...grpc.CallOption) (*QueryServiceResponse, error) {
	out := new(QueryServiceResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/QueryService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) GetInterface(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetInterfaceResponse, error) {
	out := new(GetInterfaceResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/GetInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) GetIPv4Addrs(ctx context.Context, in *GetIPv4AddrsRequest, opts ...grpc.CallOption) (*GetIPv4AddrsResponse, error) {
	out := new(GetIPv4AddrsResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/GetIPv4Addrs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) GetHardwareAddr(ctx context.Context, in *GetHardwareAddrRequest, opts ...grpc.CallOption) (*GetHardwareAddrResponse, error) {
	out := new(GetHardwareAddrResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/GetHardwareAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) ExpectWifiFrequencies(ctx context.Context, in *ExpectWifiFrequenciesRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/ExpectWifiFrequencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) GetBgscanConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetBgscanConfigResponse, error) {
	out := new(GetBgscanConfigResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/GetBgscanConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) SetBgscanConfig(ctx context.Context, in *SetBgscanConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/SetBgscanConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) AssureDisconnect(ctx context.Context, in *AssureDisconnectRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/AssureDisconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) DisableEnableTest(ctx context.Context, in *DisableEnableTestRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/DisableEnableTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) RequestScans(ctx context.Context, in *RequestScansRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/RequestScans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) SetMACRandomize(ctx context.Context, in *SetMACRandomizeRequest, opts ...grpc.CallOption) (*SetMACRandomizeResponse, error) {
	out := new(SetMACRandomizeResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/SetMACRandomize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) WaitScanIdle(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/WaitScanIdle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) ConfigureAndAssertAutoConnect(ctx context.Context, in *ConfigureAndAssertAutoConnectRequest, opts ...grpc.CallOption) (*ConfigureAndAssertAutoConnectResponse, error) {
	out := new(ConfigureAndAssertAutoConnectResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/ConfigureAndAssertAutoConnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) GetCurrentTime(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetCurrentTimeResponse, error) {
	out := new(GetCurrentTimeResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/GetCurrentTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) SelectedService(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SelectedServiceResponse, error) {
	out := new(SelectedServiceResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/SelectedService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) ExpectShillProperty(ctx context.Context, in *ExpectShillPropertyRequest, opts ...grpc.CallOption) (WifiService_ExpectShillPropertyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WifiService_serviceDesc.Streams[0], "/tast.cros.network.WifiService/ExpectShillProperty", opts...)
	if err != nil {
		return nil, err
	}
	x := &wifiServiceExpectShillPropertyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WifiService_ExpectShillPropertyClient interface {
	Recv() (*ExpectShillPropertyResponse, error)
	grpc.ClientStream
}

type wifiServiceExpectShillPropertyClient struct {
	grpc.ClientStream
}

func (x *wifiServiceExpectShillPropertyClient) Recv() (*ExpectShillPropertyResponse, error) {
	m := new(ExpectShillPropertyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wifiServiceClient) ProfileBasicTest(ctx context.Context, in *ProfileBasicTestRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/ProfileBasicTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) DiscoverBSSID(ctx context.Context, in *DiscoverBSSIDRequest, opts ...grpc.CallOption) (*DiscoverBSSIDResponse, error) {
	out := new(DiscoverBSSIDResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/DiscoverBSSID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) RequestRoam(ctx context.Context, in *RequestRoamRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/RequestRoam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) SetDHCPProperties(ctx context.Context, in *SetDHCPPropertiesRequest, opts ...grpc.CallOption) (*SetDHCPPropertiesResponse, error) {
	out := new(SetDHCPPropertiesResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/SetDHCPProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) Reassociate(ctx context.Context, in *ReassociateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/Reassociate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) GetWifiEnabled(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetWifiEnabledResponse, error) {
	out := new(GetWifiEnabledResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/GetWifiEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) SetWifiEnabled(ctx context.Context, in *SetWifiEnabledRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/SetWifiEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) WaitForBSSID(ctx context.Context, in *WaitForBSSIDRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/WaitForBSSID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) MACRandomizeSupport(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MACRandomizeSupportResponse, error) {
	out := new(MACRandomizeSupportResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/MACRandomizeSupport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) GetMACRandomize(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetMACRandomizeResponse, error) {
	out := new(GetMACRandomizeResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/GetMACRandomize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) EAPAuthSkipped(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (WifiService_EAPAuthSkippedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WifiService_serviceDesc.Streams[1], "/tast.cros.network.WifiService/EAPAuthSkipped", opts...)
	if err != nil {
		return nil, err
	}
	x := &wifiServiceEAPAuthSkippedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WifiService_EAPAuthSkippedClient interface {
	Recv() (*EAPAuthSkippedResponse, error)
	grpc.ClientStream
}

type wifiServiceEAPAuthSkippedClient struct {
	grpc.ClientStream
}

func (x *wifiServiceEAPAuthSkippedClient) Recv() (*EAPAuthSkippedResponse, error) {
	m := new(EAPAuthSkippedResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wifiServiceClient) SuspendAssertConnect(ctx context.Context, in *SuspendAssertConnectRequest, opts ...grpc.CallOption) (*SuspendAssertConnectResponse, error) {
	out := new(SuspendAssertConnectResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/SuspendAssertConnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) GetGlobalFTProperty(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetGlobalFTPropertyResponse, error) {
	out := new(GetGlobalFTPropertyResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/GetGlobalFTProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) SetGlobalFTProperty(ctx context.Context, in *SetGlobalFTPropertyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/SetGlobalFTProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WifiServiceServer is the server API for WifiService service.
type WifiServiceServer interface {
	// InitDUT initialize the DUT for WiFi testing.
	InitDUT(context.Context, *empty.Empty) (*empty.Empty, error)
	// ReinitTestState cleans and sets up the environment for a single WiFi testcase.
	ReinitTestState(context.Context, *empty.Empty) (*empty.Empty, error)
	// TearDown reverts the settings made in InitDUT (and also ReinitTestState).
	TearDown(context.Context, *empty.Empty) (*empty.Empty, error)
	// Connect attempts to connect WiFi network.
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	// Disconnect attempts to disconnect from a service.
	Disconnect(context.Context, *DisconnectRequest) (*empty.Empty, error)
	// DeleteEntriesForSSID deletes all WiFi profile entries for a given ssid.
	DeleteEntriesForSSID(context.Context, *DeleteEntriesForSSIDRequest) (*empty.Empty, error)
	// QueryService queries shill service information.
	QueryService(context.Context, *QueryServiceRequest) (*QueryServiceResponse, error)
	// GetInterface returns the WiFi device interface name (e.g., wlan0).
	GetInterface(context.Context, *empty.Empty) (*GetInterfaceResponse, error)
	// GetIPv4Addrs returns the IPv4 addresses for the network interface.
	GetIPv4Addrs(context.Context, *GetIPv4AddrsRequest) (*GetIPv4AddrsResponse, error)
	// GetHardwareAddr returns the HardwareAddr for the network interface.
	GetHardwareAddr(context.Context, *GetHardwareAddrRequest) (*GetHardwareAddrResponse, error)
	// ExpectWifiFrequencies checks if the device discovers the given SSID on the specific frequencies.
	ExpectWifiFrequencies(context.Context, *ExpectWifiFrequenciesRequest) (*empty.Empty, error)
	// GetBgscanConfig returns the bgscan configuration the device's WiFi module currently uses.
	GetBgscanConfig(context.Context, *empty.Empty) (*GetBgscanConfigResponse, error)
	// SetBgscanConfig sets the device's WiFi module's bgscan configuration.
	SetBgscanConfig(context.Context, *SetBgscanConfigRequest) (*empty.Empty, error)
	// AssureDisconnect assures that the WiFi service has disconnected within timeout (nanoseconds).
	AssureDisconnect(context.Context, *AssureDisconnectRequest) (*empty.Empty, error)
	// DisableEnableTest disables and then enables the WiFi interface.
	// This is the main body of the DisableEnable test.
	DisableEnableTest(context.Context, *DisableEnableTestRequest) (*empty.Empty, error)
	// RequestScans requests shill to trigger active scans on WiFi devices.
	RequestScans(context.Context, *RequestScansRequest) (*empty.Empty, error)
	// SetMACRandomize sets the MAC randomization setting on the WiFi device.
	// The original setting is returned for ease of restoring.
	SetMACRandomize(context.Context, *SetMACRandomizeRequest) (*SetMACRandomizeResponse, error)
	// WaitScanIdle waits for not scanning state. If there's a running scan, it can
	// wait for it to be done with timeout 10 seconds.
	// This is useful when the test sets some parameters regarding scans and wants
	// to avoid noices due to not yet ended scans.
	WaitScanIdle(context.Context, *empty.Empty) (*empty.Empty, error)
	// ConfigureAndAssertAutoConnect configures the matched shill service and then
	// waits for the IsConnected property becomes true.
	// Note that this function does not attempt to connect; it waits for auto
	// connect instead.
	ConfigureAndAssertAutoConnect(context.Context, *ConfigureAndAssertAutoConnectRequest) (*ConfigureAndAssertAutoConnectResponse, error)
	// GetCurrentTime returns the current local time in the given format.
	GetCurrentTime(context.Context, *empty.Empty) (*GetCurrentTimeResponse, error)
	// SelectedService returns the object path of selected service of WiFi service.
	SelectedService(context.Context, *empty.Empty) (*SelectedServiceResponse, error)
	// ExpectShillProperty is a streaming gRPC, takes a shill service path, expects a list of property
	// criteria in order, and takes a list of shill properties to monitor. When a property's value is
	// expected, it responds the property's (key, value) pair. The method sends an empty response as the
	// property watcher is set. A property matching criterion consists of a property name, a list of
	// expected values, a list of excluded values, and a "CheckType". We say a criterion is met iff the
	// property value is in one of the expected values and not in any of the excluded values. If the
	// property value is one of the excluded values, the method fails immediately. The call monitors the
	// specified shill properties and returns the monitor results as a chronological list of pairs
	// (changed property, changed value) at the end.
	// For CheckMethod, it has three methods:
	// 1. CHECK_ONLY: checks if the criterion is met.
	// 2. ON_CHANGE: waits for the property changes to the expected values.
	// 3. CHECK_WAIT: checks if the criterion is met; if not, waits until the property's value is met.
	ExpectShillProperty(*ExpectShillPropertyRequest, WifiService_ExpectShillPropertyServer) error
	// ProfileBasicTest is the main body of the ProfileBasic test, which creates,
	// pushes, and pops the profiles and asserts the connection states between
	// those operations.
	ProfileBasicTest(context.Context, *ProfileBasicTestRequest) (*empty.Empty, error)
	// DiscoverBSSID discovers the specified BSSID by running a scan.
	DiscoverBSSID(context.Context, *DiscoverBSSIDRequest) (*DiscoverBSSIDResponse, error)
	// RequestRoam requests DUT to roam to the specified BSSID and waits until
	// the DUT has roamed.
	RequestRoam(context.Context, *RequestRoamRequest) (*empty.Empty, error)
	// SetDHCPProperties sets the DHCP properties in shill and returns the original
	// values.
	SetDHCPProperties(context.Context, *SetDHCPPropertiesRequest) (*SetDHCPPropertiesResponse, error)
	// Reassociate triggers reassociation with the current AP and waits until it
	// has reconnected or the timeout (in nanoseconds) expires.
	Reassociate(context.Context, *ReassociateRequest) (*empty.Empty, error)
	// GetWifiEnabled checks to see if Wifi is an enabled technology on shill.
	// This call will wait for WiFi to appear in available technologies so we
	// can get correct enabled setting.
	GetWifiEnabled(context.Context, *empty.Empty) (*GetWifiEnabledResponse, error)
	// SetWifiEnabled persistently enables/disables Wifi via shill.
	SetWifiEnabled(context.Context, *SetWifiEnabledRequest) (*empty.Empty, error)
	// WaitForBSSID waits for a specific BSSID to be found.
	WaitForBSSID(context.Context, *WaitForBSSIDRequest) (*empty.Empty, error)
	// MACRandomizeSupport tells if MAC randomization is supported for the WiFi device.
	MACRandomizeSupport(context.Context, *empty.Empty) (*MACRandomizeSupportResponse, error)
	// GetMACRandomize tells if MAC randomization is enabled for the WiFi device.
	GetMACRandomize(context.Context, *empty.Empty) (*GetMACRandomizeResponse, error)
	// EAPAuthSkipped is a streaming gRPC, who watches wpa_supplicant's D-Bus signals until the next connection
	// completes, and tells that the EAP authentication is skipped (i.e., PMKSA is cached and used) or not.
	// Note that the method sends an empty response as the signal watcher is set.
	EAPAuthSkipped(*empty.Empty, WifiService_EAPAuthSkippedServer) error
	// SuspendAssertConnect suspends the DUT and waits for connection after resuming.
	SuspendAssertConnect(context.Context, *SuspendAssertConnectRequest) (*SuspendAssertConnectResponse, error)
	// GetGlobalFTProperty returns the WiFi.GlobalFTEnabled manager property value.
	GetGlobalFTProperty(context.Context, *empty.Empty) (*GetGlobalFTPropertyResponse, error)
	// SetGlobalFTProperty set the WiFi.GlobalFTEnabled manager property value.
	SetGlobalFTProperty(context.Context, *SetGlobalFTPropertyRequest) (*empty.Empty, error)
}

// UnimplementedWifiServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWifiServiceServer struct {
}

func (*UnimplementedWifiServiceServer) InitDUT(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDUT not implemented")
}
func (*UnimplementedWifiServiceServer) ReinitTestState(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReinitTestState not implemented")
}
func (*UnimplementedWifiServiceServer) TearDown(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TearDown not implemented")
}
func (*UnimplementedWifiServiceServer) Connect(ctx context.Context, req *ConnectRequest) (*ConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedWifiServiceServer) Disconnect(ctx context.Context, req *DisconnectRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (*UnimplementedWifiServiceServer) DeleteEntriesForSSID(ctx context.Context, req *DeleteEntriesForSSIDRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntriesForSSID not implemented")
}
func (*UnimplementedWifiServiceServer) QueryService(ctx context.Context, req *QueryServiceRequest) (*QueryServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryService not implemented")
}
func (*UnimplementedWifiServiceServer) GetInterface(ctx context.Context, req *empty.Empty) (*GetInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterface not implemented")
}
func (*UnimplementedWifiServiceServer) GetIPv4Addrs(ctx context.Context, req *GetIPv4AddrsRequest) (*GetIPv4AddrsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIPv4Addrs not implemented")
}
func (*UnimplementedWifiServiceServer) GetHardwareAddr(ctx context.Context, req *GetHardwareAddrRequest) (*GetHardwareAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHardwareAddr not implemented")
}
func (*UnimplementedWifiServiceServer) ExpectWifiFrequencies(ctx context.Context, req *ExpectWifiFrequenciesRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpectWifiFrequencies not implemented")
}
func (*UnimplementedWifiServiceServer) GetBgscanConfig(ctx context.Context, req *empty.Empty) (*GetBgscanConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBgscanConfig not implemented")
}
func (*UnimplementedWifiServiceServer) SetBgscanConfig(ctx context.Context, req *SetBgscanConfigRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBgscanConfig not implemented")
}
func (*UnimplementedWifiServiceServer) AssureDisconnect(ctx context.Context, req *AssureDisconnectRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssureDisconnect not implemented")
}
func (*UnimplementedWifiServiceServer) DisableEnableTest(ctx context.Context, req *DisableEnableTestRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableEnableTest not implemented")
}
func (*UnimplementedWifiServiceServer) RequestScans(ctx context.Context, req *RequestScansRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestScans not implemented")
}
func (*UnimplementedWifiServiceServer) SetMACRandomize(ctx context.Context, req *SetMACRandomizeRequest) (*SetMACRandomizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMACRandomize not implemented")
}
func (*UnimplementedWifiServiceServer) WaitScanIdle(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitScanIdle not implemented")
}
func (*UnimplementedWifiServiceServer) ConfigureAndAssertAutoConnect(ctx context.Context, req *ConfigureAndAssertAutoConnectRequest) (*ConfigureAndAssertAutoConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureAndAssertAutoConnect not implemented")
}
func (*UnimplementedWifiServiceServer) GetCurrentTime(ctx context.Context, req *empty.Empty) (*GetCurrentTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentTime not implemented")
}
func (*UnimplementedWifiServiceServer) SelectedService(ctx context.Context, req *empty.Empty) (*SelectedServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectedService not implemented")
}
func (*UnimplementedWifiServiceServer) ExpectShillProperty(req *ExpectShillPropertyRequest, srv WifiService_ExpectShillPropertyServer) error {
	return status.Errorf(codes.Unimplemented, "method ExpectShillProperty not implemented")
}
func (*UnimplementedWifiServiceServer) ProfileBasicTest(ctx context.Context, req *ProfileBasicTestRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileBasicTest not implemented")
}
func (*UnimplementedWifiServiceServer) DiscoverBSSID(ctx context.Context, req *DiscoverBSSIDRequest) (*DiscoverBSSIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverBSSID not implemented")
}
func (*UnimplementedWifiServiceServer) RequestRoam(ctx context.Context, req *RequestRoamRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestRoam not implemented")
}
func (*UnimplementedWifiServiceServer) SetDHCPProperties(ctx context.Context, req *SetDHCPPropertiesRequest) (*SetDHCPPropertiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDHCPProperties not implemented")
}
func (*UnimplementedWifiServiceServer) Reassociate(ctx context.Context, req *ReassociateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reassociate not implemented")
}
func (*UnimplementedWifiServiceServer) GetWifiEnabled(ctx context.Context, req *empty.Empty) (*GetWifiEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWifiEnabled not implemented")
}
func (*UnimplementedWifiServiceServer) SetWifiEnabled(ctx context.Context, req *SetWifiEnabledRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWifiEnabled not implemented")
}
func (*UnimplementedWifiServiceServer) WaitForBSSID(ctx context.Context, req *WaitForBSSIDRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForBSSID not implemented")
}
func (*UnimplementedWifiServiceServer) MACRandomizeSupport(ctx context.Context, req *empty.Empty) (*MACRandomizeSupportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MACRandomizeSupport not implemented")
}
func (*UnimplementedWifiServiceServer) GetMACRandomize(ctx context.Context, req *empty.Empty) (*GetMACRandomizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMACRandomize not implemented")
}
func (*UnimplementedWifiServiceServer) EAPAuthSkipped(req *empty.Empty, srv WifiService_EAPAuthSkippedServer) error {
	return status.Errorf(codes.Unimplemented, "method EAPAuthSkipped not implemented")
}
func (*UnimplementedWifiServiceServer) SuspendAssertConnect(ctx context.Context, req *SuspendAssertConnectRequest) (*SuspendAssertConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendAssertConnect not implemented")
}
func (*UnimplementedWifiServiceServer) GetGlobalFTProperty(ctx context.Context, req *empty.Empty) (*GetGlobalFTPropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGlobalFTProperty not implemented")
}
func (*UnimplementedWifiServiceServer) SetGlobalFTProperty(ctx context.Context, req *SetGlobalFTPropertyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGlobalFTProperty not implemented")
}

func RegisterWifiServiceServer(s *grpc.Server, srv WifiServiceServer) {
	s.RegisterService(&_WifiService_serviceDesc, srv)
}

func _WifiService_InitDUT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).InitDUT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/InitDUT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).InitDUT(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_ReinitTestState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).ReinitTestState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/ReinitTestState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).ReinitTestState(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_TearDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).TearDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/TearDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).TearDown(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).Disconnect(ctx, req.(*DisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_DeleteEntriesForSSID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntriesForSSIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).DeleteEntriesForSSID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/DeleteEntriesForSSID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).DeleteEntriesForSSID(ctx, req.(*DeleteEntriesForSSIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_QueryService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).QueryService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/QueryService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).QueryService(ctx, req.(*QueryServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_GetInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).GetInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/GetInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).GetInterface(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_GetIPv4Addrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIPv4AddrsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).GetIPv4Addrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/GetIPv4Addrs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).GetIPv4Addrs(ctx, req.(*GetIPv4AddrsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_GetHardwareAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHardwareAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).GetHardwareAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/GetHardwareAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).GetHardwareAddr(ctx, req.(*GetHardwareAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_ExpectWifiFrequencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpectWifiFrequenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).ExpectWifiFrequencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/ExpectWifiFrequencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).ExpectWifiFrequencies(ctx, req.(*ExpectWifiFrequenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_GetBgscanConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).GetBgscanConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/GetBgscanConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).GetBgscanConfig(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_SetBgscanConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBgscanConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).SetBgscanConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/SetBgscanConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).SetBgscanConfig(ctx, req.(*SetBgscanConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_AssureDisconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssureDisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).AssureDisconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/AssureDisconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).AssureDisconnect(ctx, req.(*AssureDisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_DisableEnableTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableEnableTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).DisableEnableTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/DisableEnableTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).DisableEnableTest(ctx, req.(*DisableEnableTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_RequestScans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestScansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).RequestScans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/RequestScans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).RequestScans(ctx, req.(*RequestScansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_SetMACRandomize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMACRandomizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).SetMACRandomize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/SetMACRandomize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).SetMACRandomize(ctx, req.(*SetMACRandomizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_WaitScanIdle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).WaitScanIdle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/WaitScanIdle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).WaitScanIdle(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_ConfigureAndAssertAutoConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureAndAssertAutoConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).ConfigureAndAssertAutoConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/ConfigureAndAssertAutoConnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).ConfigureAndAssertAutoConnect(ctx, req.(*ConfigureAndAssertAutoConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_GetCurrentTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).GetCurrentTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/GetCurrentTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).GetCurrentTime(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_SelectedService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).SelectedService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/SelectedService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).SelectedService(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_ExpectShillProperty_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExpectShillPropertyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WifiServiceServer).ExpectShillProperty(m, &wifiServiceExpectShillPropertyServer{stream})
}

type WifiService_ExpectShillPropertyServer interface {
	Send(*ExpectShillPropertyResponse) error
	grpc.ServerStream
}

type wifiServiceExpectShillPropertyServer struct {
	grpc.ServerStream
}

func (x *wifiServiceExpectShillPropertyServer) Send(m *ExpectShillPropertyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WifiService_ProfileBasicTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileBasicTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).ProfileBasicTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/ProfileBasicTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).ProfileBasicTest(ctx, req.(*ProfileBasicTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_DiscoverBSSID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverBSSIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).DiscoverBSSID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/DiscoverBSSID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).DiscoverBSSID(ctx, req.(*DiscoverBSSIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_RequestRoam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRoamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).RequestRoam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/RequestRoam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).RequestRoam(ctx, req.(*RequestRoamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_SetDHCPProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDHCPPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).SetDHCPProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/SetDHCPProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).SetDHCPProperties(ctx, req.(*SetDHCPPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_Reassociate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReassociateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).Reassociate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/Reassociate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).Reassociate(ctx, req.(*ReassociateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_GetWifiEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).GetWifiEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/GetWifiEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).GetWifiEnabled(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_SetWifiEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetWifiEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).SetWifiEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/SetWifiEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).SetWifiEnabled(ctx, req.(*SetWifiEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_WaitForBSSID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitForBSSIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).WaitForBSSID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/WaitForBSSID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).WaitForBSSID(ctx, req.(*WaitForBSSIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_MACRandomizeSupport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).MACRandomizeSupport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/MACRandomizeSupport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).MACRandomizeSupport(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_GetMACRandomize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).GetMACRandomize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/GetMACRandomize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).GetMACRandomize(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_EAPAuthSkipped_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WifiServiceServer).EAPAuthSkipped(m, &wifiServiceEAPAuthSkippedServer{stream})
}

type WifiService_EAPAuthSkippedServer interface {
	Send(*EAPAuthSkippedResponse) error
	grpc.ServerStream
}

type wifiServiceEAPAuthSkippedServer struct {
	grpc.ServerStream
}

func (x *wifiServiceEAPAuthSkippedServer) Send(m *EAPAuthSkippedResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WifiService_SuspendAssertConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendAssertConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).SuspendAssertConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/SuspendAssertConnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).SuspendAssertConnect(ctx, req.(*SuspendAssertConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_GetGlobalFTProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).GetGlobalFTProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/GetGlobalFTProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).GetGlobalFTProperty(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_SetGlobalFTProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGlobalFTPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).SetGlobalFTProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/SetGlobalFTProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).SetGlobalFTProperty(ctx, req.(*SetGlobalFTPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WifiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.network.WifiService",
	HandlerType: (*WifiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitDUT",
			Handler:    _WifiService_InitDUT_Handler,
		},
		{
			MethodName: "ReinitTestState",
			Handler:    _WifiService_ReinitTestState_Handler,
		},
		{
			MethodName: "TearDown",
			Handler:    _WifiService_TearDown_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _WifiService_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _WifiService_Disconnect_Handler,
		},
		{
			MethodName: "DeleteEntriesForSSID",
			Handler:    _WifiService_DeleteEntriesForSSID_Handler,
		},
		{
			MethodName: "QueryService",
			Handler:    _WifiService_QueryService_Handler,
		},
		{
			MethodName: "GetInterface",
			Handler:    _WifiService_GetInterface_Handler,
		},
		{
			MethodName: "GetIPv4Addrs",
			Handler:    _WifiService_GetIPv4Addrs_Handler,
		},
		{
			MethodName: "GetHardwareAddr",
			Handler:    _WifiService_GetHardwareAddr_Handler,
		},
		{
			MethodName: "ExpectWifiFrequencies",
			Handler:    _WifiService_ExpectWifiFrequencies_Handler,
		},
		{
			MethodName: "GetBgscanConfig",
			Handler:    _WifiService_GetBgscanConfig_Handler,
		},
		{
			MethodName: "SetBgscanConfig",
			Handler:    _WifiService_SetBgscanConfig_Handler,
		},
		{
			MethodName: "AssureDisconnect",
			Handler:    _WifiService_AssureDisconnect_Handler,
		},
		{
			MethodName: "DisableEnableTest",
			Handler:    _WifiService_DisableEnableTest_Handler,
		},
		{
			MethodName: "RequestScans",
			Handler:    _WifiService_RequestScans_Handler,
		},
		{
			MethodName: "SetMACRandomize",
			Handler:    _WifiService_SetMACRandomize_Handler,
		},
		{
			MethodName: "WaitScanIdle",
			Handler:    _WifiService_WaitScanIdle_Handler,
		},
		{
			MethodName: "ConfigureAndAssertAutoConnect",
			Handler:    _WifiService_ConfigureAndAssertAutoConnect_Handler,
		},
		{
			MethodName: "GetCurrentTime",
			Handler:    _WifiService_GetCurrentTime_Handler,
		},
		{
			MethodName: "SelectedService",
			Handler:    _WifiService_SelectedService_Handler,
		},
		{
			MethodName: "ProfileBasicTest",
			Handler:    _WifiService_ProfileBasicTest_Handler,
		},
		{
			MethodName: "DiscoverBSSID",
			Handler:    _WifiService_DiscoverBSSID_Handler,
		},
		{
			MethodName: "RequestRoam",
			Handler:    _WifiService_RequestRoam_Handler,
		},
		{
			MethodName: "SetDHCPProperties",
			Handler:    _WifiService_SetDHCPProperties_Handler,
		},
		{
			MethodName: "Reassociate",
			Handler:    _WifiService_Reassociate_Handler,
		},
		{
			MethodName: "GetWifiEnabled",
			Handler:    _WifiService_GetWifiEnabled_Handler,
		},
		{
			MethodName: "SetWifiEnabled",
			Handler:    _WifiService_SetWifiEnabled_Handler,
		},
		{
			MethodName: "WaitForBSSID",
			Handler:    _WifiService_WaitForBSSID_Handler,
		},
		{
			MethodName: "MACRandomizeSupport",
			Handler:    _WifiService_MACRandomizeSupport_Handler,
		},
		{
			MethodName: "GetMACRandomize",
			Handler:    _WifiService_GetMACRandomize_Handler,
		},
		{
			MethodName: "SuspendAssertConnect",
			Handler:    _WifiService_SuspendAssertConnect_Handler,
		},
		{
			MethodName: "GetGlobalFTProperty",
			Handler:    _WifiService_GetGlobalFTProperty_Handler,
		},
		{
			MethodName: "SetGlobalFTProperty",
			Handler:    _WifiService_SetGlobalFTProperty_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExpectShillProperty",
			Handler:       _WifiService_ExpectShillProperty_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EAPAuthSkipped",
			Handler:       _WifiService_EAPAuthSkipped_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "wifi_service.proto",
}
