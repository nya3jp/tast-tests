// Code generated by protoc-gen-go. DO NOT EDIT.
// source: wifi_service.proto

package network

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ConnectRequest struct {
	Ssid []byte `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
	// hidden denotes that if the SSID is hidden.
	Hidden bool `protobuf:"varint,2,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// security is the SecurityClass (defined in shill/service.go) of the WiFi
	// service to Connect.
	Security string `protobuf:"bytes,3,opt,name=security,proto3" json:"security,omitempty"`
	// shillprops is the shill properties the DUT should set to Connect to the
	// WiFi service.
	Shillprops           map[string]*ShillVal `protobuf:"bytes,4,rep,name=shillprops,proto3" json:"shillprops,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ConnectRequest) Reset()         { *m = ConnectRequest{} }
func (m *ConnectRequest) String() string { return proto.CompactTextString(m) }
func (*ConnectRequest) ProtoMessage()    {}
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{0}
}

func (m *ConnectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectRequest.Unmarshal(m, b)
}
func (m *ConnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectRequest.Marshal(b, m, deterministic)
}
func (m *ConnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectRequest.Merge(m, src)
}
func (m *ConnectRequest) XXX_Size() int {
	return xxx_messageInfo_ConnectRequest.Size(m)
}
func (m *ConnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectRequest proto.InternalMessageInfo

func (m *ConnectRequest) GetSsid() []byte {
	if m != nil {
		return m.Ssid
	}
	return nil
}

func (m *ConnectRequest) GetHidden() bool {
	if m != nil {
		return m.Hidden
	}
	return false
}

func (m *ConnectRequest) GetSecurity() string {
	if m != nil {
		return m.Security
	}
	return ""
}

func (m *ConnectRequest) GetShillprops() map[string]*ShillVal {
	if m != nil {
		return m.Shillprops
	}
	return nil
}

type ShillVal struct {
	// Types that are valid to be assigned to Val:
	//	*ShillVal_Str
	//	*ShillVal_Bool
	//	*ShillVal_StrArray
	Val                  isShillVal_Val `protobuf_oneof:"val"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ShillVal) Reset()         { *m = ShillVal{} }
func (m *ShillVal) String() string { return proto.CompactTextString(m) }
func (*ShillVal) ProtoMessage()    {}
func (*ShillVal) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{1}
}

func (m *ShillVal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShillVal.Unmarshal(m, b)
}
func (m *ShillVal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShillVal.Marshal(b, m, deterministic)
}
func (m *ShillVal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShillVal.Merge(m, src)
}
func (m *ShillVal) XXX_Size() int {
	return xxx_messageInfo_ShillVal.Size(m)
}
func (m *ShillVal) XXX_DiscardUnknown() {
	xxx_messageInfo_ShillVal.DiscardUnknown(m)
}

var xxx_messageInfo_ShillVal proto.InternalMessageInfo

type isShillVal_Val interface {
	isShillVal_Val()
}

type ShillVal_Str struct {
	Str string `protobuf:"bytes,1,opt,name=str,proto3,oneof"`
}

type ShillVal_Bool struct {
	Bool bool `protobuf:"varint,2,opt,name=bool,proto3,oneof"`
}

type ShillVal_StrArray struct {
	StrArray *StrArray `protobuf:"bytes,3,opt,name=strArray,proto3,oneof"`
}

func (*ShillVal_Str) isShillVal_Val() {}

func (*ShillVal_Bool) isShillVal_Val() {}

func (*ShillVal_StrArray) isShillVal_Val() {}

func (m *ShillVal) GetVal() isShillVal_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (m *ShillVal) GetStr() string {
	if x, ok := m.GetVal().(*ShillVal_Str); ok {
		return x.Str
	}
	return ""
}

func (m *ShillVal) GetBool() bool {
	if x, ok := m.GetVal().(*ShillVal_Bool); ok {
		return x.Bool
	}
	return false
}

func (m *ShillVal) GetStrArray() *StrArray {
	if x, ok := m.GetVal().(*ShillVal_StrArray); ok {
		return x.StrArray
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ShillVal) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ShillVal_Str)(nil),
		(*ShillVal_Bool)(nil),
		(*ShillVal_StrArray)(nil),
	}
}

type StrArray struct {
	Vals                 []string `protobuf:"bytes,1,rep,name=vals,proto3" json:"vals,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StrArray) Reset()         { *m = StrArray{} }
func (m *StrArray) String() string { return proto.CompactTextString(m) }
func (*StrArray) ProtoMessage()    {}
func (*StrArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{2}
}

func (m *StrArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StrArray.Unmarshal(m, b)
}
func (m *StrArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StrArray.Marshal(b, m, deterministic)
}
func (m *StrArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StrArray.Merge(m, src)
}
func (m *StrArray) XXX_Size() int {
	return xxx_messageInfo_StrArray.Size(m)
}
func (m *StrArray) XXX_DiscardUnknown() {
	xxx_messageInfo_StrArray.DiscardUnknown(m)
}

var xxx_messageInfo_StrArray proto.InternalMessageInfo

func (m *StrArray) GetVals() []string {
	if m != nil {
		return m.Vals
	}
	return nil
}

// ConnectResponse is the response of Connect call which includes the
// object path of connected service and timing data of the connection
// (all time in nanosecond unit).
type ConnectResponse struct {
	ServicePath          string   `protobuf:"bytes,1,opt,name=service_path,json=servicePath,proto3" json:"service_path,omitempty"`
	DiscoveryTime        int64    `protobuf:"varint,2,opt,name=discovery_time,json=discoveryTime,proto3" json:"discovery_time,omitempty"`
	AssociationTime      int64    `protobuf:"varint,3,opt,name=association_time,json=associationTime,proto3" json:"association_time,omitempty"`
	ConfigurationTime    int64    `protobuf:"varint,4,opt,name=configuration_time,json=configurationTime,proto3" json:"configuration_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectResponse) Reset()         { *m = ConnectResponse{} }
func (m *ConnectResponse) String() string { return proto.CompactTextString(m) }
func (*ConnectResponse) ProtoMessage()    {}
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{3}
}

func (m *ConnectResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectResponse.Unmarshal(m, b)
}
func (m *ConnectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectResponse.Marshal(b, m, deterministic)
}
func (m *ConnectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectResponse.Merge(m, src)
}
func (m *ConnectResponse) XXX_Size() int {
	return xxx_messageInfo_ConnectResponse.Size(m)
}
func (m *ConnectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectResponse proto.InternalMessageInfo

func (m *ConnectResponse) GetServicePath() string {
	if m != nil {
		return m.ServicePath
	}
	return ""
}

func (m *ConnectResponse) GetDiscoveryTime() int64 {
	if m != nil {
		return m.DiscoveryTime
	}
	return 0
}

func (m *ConnectResponse) GetAssociationTime() int64 {
	if m != nil {
		return m.AssociationTime
	}
	return 0
}

func (m *ConnectResponse) GetConfigurationTime() int64 {
	if m != nil {
		return m.ConfigurationTime
	}
	return 0
}

type DiscoverServiceRequest struct {
	Shillprops           map[string]*ShillVal `protobuf:"bytes,4,rep,name=shillprops,proto3" json:"shillprops,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DiscoverServiceRequest) Reset()         { *m = DiscoverServiceRequest{} }
func (m *DiscoverServiceRequest) String() string { return proto.CompactTextString(m) }
func (*DiscoverServiceRequest) ProtoMessage()    {}
func (*DiscoverServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{4}
}

func (m *DiscoverServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscoverServiceRequest.Unmarshal(m, b)
}
func (m *DiscoverServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscoverServiceRequest.Marshal(b, m, deterministic)
}
func (m *DiscoverServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoverServiceRequest.Merge(m, src)
}
func (m *DiscoverServiceRequest) XXX_Size() int {
	return xxx_messageInfo_DiscoverServiceRequest.Size(m)
}
func (m *DiscoverServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoverServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoverServiceRequest proto.InternalMessageInfo

func (m *DiscoverServiceRequest) GetShillprops() map[string]*ShillVal {
	if m != nil {
		return m.Shillprops
	}
	return nil
}

type DiscoverServiceResponse struct {
	ServicePath          string   `protobuf:"bytes,1,opt,name=service_path,json=servicePath,proto3" json:"service_path,omitempty"`
	DiscoveryTime        int64    `protobuf:"varint,2,opt,name=discovery_time,json=discoveryTime,proto3" json:"discovery_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiscoverServiceResponse) Reset()         { *m = DiscoverServiceResponse{} }
func (m *DiscoverServiceResponse) String() string { return proto.CompactTextString(m) }
func (*DiscoverServiceResponse) ProtoMessage()    {}
func (*DiscoverServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{5}
}

func (m *DiscoverServiceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscoverServiceResponse.Unmarshal(m, b)
}
func (m *DiscoverServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscoverServiceResponse.Marshal(b, m, deterministic)
}
func (m *DiscoverServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoverServiceResponse.Merge(m, src)
}
func (m *DiscoverServiceResponse) XXX_Size() int {
	return xxx_messageInfo_DiscoverServiceResponse.Size(m)
}
func (m *DiscoverServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoverServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoverServiceResponse proto.InternalMessageInfo

func (m *DiscoverServiceResponse) GetServicePath() string {
	if m != nil {
		return m.ServicePath
	}
	return ""
}

func (m *DiscoverServiceResponse) GetDiscoveryTime() int64 {
	if m != nil {
		return m.DiscoveryTime
	}
	return 0
}

type DisconnectRequest struct {
	ServicePath          string   `protobuf:"bytes,1,opt,name=service_path,json=servicePath,proto3" json:"service_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DisconnectRequest) Reset()         { *m = DisconnectRequest{} }
func (m *DisconnectRequest) String() string { return proto.CompactTextString(m) }
func (*DisconnectRequest) ProtoMessage()    {}
func (*DisconnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{6}
}

func (m *DisconnectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DisconnectRequest.Unmarshal(m, b)
}
func (m *DisconnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DisconnectRequest.Marshal(b, m, deterministic)
}
func (m *DisconnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisconnectRequest.Merge(m, src)
}
func (m *DisconnectRequest) XXX_Size() int {
	return xxx_messageInfo_DisconnectRequest.Size(m)
}
func (m *DisconnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DisconnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DisconnectRequest proto.InternalMessageInfo

func (m *DisconnectRequest) GetServicePath() string {
	if m != nil {
		return m.ServicePath
	}
	return ""
}

type DeleteEntriesForSSIDRequest struct {
	Ssid                 []byte   `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteEntriesForSSIDRequest) Reset()         { *m = DeleteEntriesForSSIDRequest{} }
func (m *DeleteEntriesForSSIDRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteEntriesForSSIDRequest) ProtoMessage()    {}
func (*DeleteEntriesForSSIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{7}
}

func (m *DeleteEntriesForSSIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteEntriesForSSIDRequest.Unmarshal(m, b)
}
func (m *DeleteEntriesForSSIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteEntriesForSSIDRequest.Marshal(b, m, deterministic)
}
func (m *DeleteEntriesForSSIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteEntriesForSSIDRequest.Merge(m, src)
}
func (m *DeleteEntriesForSSIDRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteEntriesForSSIDRequest.Size(m)
}
func (m *DeleteEntriesForSSIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteEntriesForSSIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteEntriesForSSIDRequest proto.InternalMessageInfo

func (m *DeleteEntriesForSSIDRequest) GetSsid() []byte {
	if m != nil {
		return m.Ssid
	}
	return nil
}

type QueryServiceRequest struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryServiceRequest) Reset()         { *m = QueryServiceRequest{} }
func (m *QueryServiceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryServiceRequest) ProtoMessage()    {}
func (*QueryServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{8}
}

func (m *QueryServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryServiceRequest.Unmarshal(m, b)
}
func (m *QueryServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryServiceRequest.Marshal(b, m, deterministic)
}
func (m *QueryServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceRequest.Merge(m, src)
}
func (m *QueryServiceRequest) XXX_Size() int {
	return xxx_messageInfo_QueryServiceRequest.Size(m)
}
func (m *QueryServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceRequest proto.InternalMessageInfo

func (m *QueryServiceRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type QueryServiceResponse struct {
	Name                 string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Device               string                     `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	Type                 string                     `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Mode                 string                     `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	State                string                     `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	Visible              bool                       `protobuf:"varint,6,opt,name=visible,proto3" json:"visible,omitempty"`
	IsConnected          bool                       `protobuf:"varint,7,opt,name=is_connected,json=isConnected,proto3" json:"is_connected,omitempty"`
	Wifi                 *QueryServiceResponse_Wifi `protobuf:"bytes,8,opt,name=wifi,proto3" json:"wifi,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *QueryServiceResponse) Reset()         { *m = QueryServiceResponse{} }
func (m *QueryServiceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryServiceResponse) ProtoMessage()    {}
func (*QueryServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{9}
}

func (m *QueryServiceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryServiceResponse.Unmarshal(m, b)
}
func (m *QueryServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryServiceResponse.Marshal(b, m, deterministic)
}
func (m *QueryServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceResponse.Merge(m, src)
}
func (m *QueryServiceResponse) XXX_Size() int {
	return xxx_messageInfo_QueryServiceResponse.Size(m)
}
func (m *QueryServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceResponse proto.InternalMessageInfo

func (m *QueryServiceResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryServiceResponse) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *QueryServiceResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *QueryServiceResponse) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *QueryServiceResponse) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *QueryServiceResponse) GetVisible() bool {
	if m != nil {
		return m.Visible
	}
	return false
}

func (m *QueryServiceResponse) GetIsConnected() bool {
	if m != nil {
		return m.IsConnected
	}
	return false
}

func (m *QueryServiceResponse) GetWifi() *QueryServiceResponse_Wifi {
	if m != nil {
		return m.Wifi
	}
	return nil
}

type QueryServiceResponse_Wifi struct {
	Bssid                string   `protobuf:"bytes,1,opt,name=bssid,proto3" json:"bssid,omitempty"`
	FtEnabled            bool     `protobuf:"varint,2,opt,name=ft_enabled,json=ftEnabled,proto3" json:"ft_enabled,omitempty"`
	Frequency            uint32   `protobuf:"varint,3,opt,name=frequency,proto3" json:"frequency,omitempty"`
	FrequencyList        []uint32 `protobuf:"varint,4,rep,packed,name=frequency_list,json=frequencyList,proto3" json:"frequency_list,omitempty"`
	HexSsid              string   `protobuf:"bytes,5,opt,name=hex_ssid,json=hexSsid,proto3" json:"hex_ssid,omitempty"`
	HiddenSsid           bool     `protobuf:"varint,6,opt,name=hidden_ssid,json=hiddenSsid,proto3" json:"hidden_ssid,omitempty"`
	PhyMode              uint32   `protobuf:"varint,7,opt,name=phy_mode,json=phyMode,proto3" json:"phy_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryServiceResponse_Wifi) Reset()         { *m = QueryServiceResponse_Wifi{} }
func (m *QueryServiceResponse_Wifi) String() string { return proto.CompactTextString(m) }
func (*QueryServiceResponse_Wifi) ProtoMessage()    {}
func (*QueryServiceResponse_Wifi) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{9, 0}
}

func (m *QueryServiceResponse_Wifi) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryServiceResponse_Wifi.Unmarshal(m, b)
}
func (m *QueryServiceResponse_Wifi) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryServiceResponse_Wifi.Marshal(b, m, deterministic)
}
func (m *QueryServiceResponse_Wifi) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceResponse_Wifi.Merge(m, src)
}
func (m *QueryServiceResponse_Wifi) XXX_Size() int {
	return xxx_messageInfo_QueryServiceResponse_Wifi.Size(m)
}
func (m *QueryServiceResponse_Wifi) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceResponse_Wifi.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceResponse_Wifi proto.InternalMessageInfo

func (m *QueryServiceResponse_Wifi) GetBssid() string {
	if m != nil {
		return m.Bssid
	}
	return ""
}

func (m *QueryServiceResponse_Wifi) GetFtEnabled() bool {
	if m != nil {
		return m.FtEnabled
	}
	return false
}

func (m *QueryServiceResponse_Wifi) GetFrequency() uint32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *QueryServiceResponse_Wifi) GetFrequencyList() []uint32 {
	if m != nil {
		return m.FrequencyList
	}
	return nil
}

func (m *QueryServiceResponse_Wifi) GetHexSsid() string {
	if m != nil {
		return m.HexSsid
	}
	return ""
}

func (m *QueryServiceResponse_Wifi) GetHiddenSsid() bool {
	if m != nil {
		return m.HiddenSsid
	}
	return false
}

func (m *QueryServiceResponse_Wifi) GetPhyMode() uint32 {
	if m != nil {
		return m.PhyMode
	}
	return 0
}

type GetInterfaceResponse struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetInterfaceResponse) Reset()         { *m = GetInterfaceResponse{} }
func (m *GetInterfaceResponse) String() string { return proto.CompactTextString(m) }
func (*GetInterfaceResponse) ProtoMessage()    {}
func (*GetInterfaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{10}
}

func (m *GetInterfaceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetInterfaceResponse.Unmarshal(m, b)
}
func (m *GetInterfaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetInterfaceResponse.Marshal(b, m, deterministic)
}
func (m *GetInterfaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInterfaceResponse.Merge(m, src)
}
func (m *GetInterfaceResponse) XXX_Size() int {
	return xxx_messageInfo_GetInterfaceResponse.Size(m)
}
func (m *GetInterfaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInterfaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetInterfaceResponse proto.InternalMessageInfo

func (m *GetInterfaceResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetIPv4AddrsRequest struct {
	InterfaceName        string   `protobuf:"bytes,1,opt,name=interfaceName,proto3" json:"interfaceName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetIPv4AddrsRequest) Reset()         { *m = GetIPv4AddrsRequest{} }
func (m *GetIPv4AddrsRequest) String() string { return proto.CompactTextString(m) }
func (*GetIPv4AddrsRequest) ProtoMessage()    {}
func (*GetIPv4AddrsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{11}
}

func (m *GetIPv4AddrsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetIPv4AddrsRequest.Unmarshal(m, b)
}
func (m *GetIPv4AddrsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetIPv4AddrsRequest.Marshal(b, m, deterministic)
}
func (m *GetIPv4AddrsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIPv4AddrsRequest.Merge(m, src)
}
func (m *GetIPv4AddrsRequest) XXX_Size() int {
	return xxx_messageInfo_GetIPv4AddrsRequest.Size(m)
}
func (m *GetIPv4AddrsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIPv4AddrsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetIPv4AddrsRequest proto.InternalMessageInfo

func (m *GetIPv4AddrsRequest) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type GetIPv4AddrsResponse struct {
	Ipv4                 []string `protobuf:"bytes,1,rep,name=ipv4,proto3" json:"ipv4,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetIPv4AddrsResponse) Reset()         { *m = GetIPv4AddrsResponse{} }
func (m *GetIPv4AddrsResponse) String() string { return proto.CompactTextString(m) }
func (*GetIPv4AddrsResponse) ProtoMessage()    {}
func (*GetIPv4AddrsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{12}
}

func (m *GetIPv4AddrsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetIPv4AddrsResponse.Unmarshal(m, b)
}
func (m *GetIPv4AddrsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetIPv4AddrsResponse.Marshal(b, m, deterministic)
}
func (m *GetIPv4AddrsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIPv4AddrsResponse.Merge(m, src)
}
func (m *GetIPv4AddrsResponse) XXX_Size() int {
	return xxx_messageInfo_GetIPv4AddrsResponse.Size(m)
}
func (m *GetIPv4AddrsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIPv4AddrsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetIPv4AddrsResponse proto.InternalMessageInfo

func (m *GetIPv4AddrsResponse) GetIpv4() []string {
	if m != nil {
		return m.Ipv4
	}
	return nil
}

type ExpectWifiFrequenciesRequest struct {
	// SSID to look up. Required.
	Ssid []byte `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
	// Expected list of frequencies for the SSID.
	Frequencies          []uint32 `protobuf:"varint,2,rep,packed,name=frequencies,proto3" json:"frequencies,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExpectWifiFrequenciesRequest) Reset()         { *m = ExpectWifiFrequenciesRequest{} }
func (m *ExpectWifiFrequenciesRequest) String() string { return proto.CompactTextString(m) }
func (*ExpectWifiFrequenciesRequest) ProtoMessage()    {}
func (*ExpectWifiFrequenciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{13}
}

func (m *ExpectWifiFrequenciesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpectWifiFrequenciesRequest.Unmarshal(m, b)
}
func (m *ExpectWifiFrequenciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpectWifiFrequenciesRequest.Marshal(b, m, deterministic)
}
func (m *ExpectWifiFrequenciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpectWifiFrequenciesRequest.Merge(m, src)
}
func (m *ExpectWifiFrequenciesRequest) XXX_Size() int {
	return xxx_messageInfo_ExpectWifiFrequenciesRequest.Size(m)
}
func (m *ExpectWifiFrequenciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpectWifiFrequenciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExpectWifiFrequenciesRequest proto.InternalMessageInfo

func (m *ExpectWifiFrequenciesRequest) GetSsid() []byte {
	if m != nil {
		return m.Ssid
	}
	return nil
}

func (m *ExpectWifiFrequenciesRequest) GetFrequencies() []uint32 {
	if m != nil {
		return m.Frequencies
	}
	return nil
}

type GetBgscanMethodResponse struct {
	Method               string   `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBgscanMethodResponse) Reset()         { *m = GetBgscanMethodResponse{} }
func (m *GetBgscanMethodResponse) String() string { return proto.CompactTextString(m) }
func (*GetBgscanMethodResponse) ProtoMessage()    {}
func (*GetBgscanMethodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{14}
}

func (m *GetBgscanMethodResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBgscanMethodResponse.Unmarshal(m, b)
}
func (m *GetBgscanMethodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBgscanMethodResponse.Marshal(b, m, deterministic)
}
func (m *GetBgscanMethodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBgscanMethodResponse.Merge(m, src)
}
func (m *GetBgscanMethodResponse) XXX_Size() int {
	return xxx_messageInfo_GetBgscanMethodResponse.Size(m)
}
func (m *GetBgscanMethodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBgscanMethodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBgscanMethodResponse proto.InternalMessageInfo

func (m *GetBgscanMethodResponse) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

type SetBgscanMethodRequest struct {
	Method               string   `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetBgscanMethodRequest) Reset()         { *m = SetBgscanMethodRequest{} }
func (m *SetBgscanMethodRequest) String() string { return proto.CompactTextString(m) }
func (*SetBgscanMethodRequest) ProtoMessage()    {}
func (*SetBgscanMethodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{15}
}

func (m *SetBgscanMethodRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetBgscanMethodRequest.Unmarshal(m, b)
}
func (m *SetBgscanMethodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetBgscanMethodRequest.Marshal(b, m, deterministic)
}
func (m *SetBgscanMethodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetBgscanMethodRequest.Merge(m, src)
}
func (m *SetBgscanMethodRequest) XXX_Size() int {
	return xxx_messageInfo_SetBgscanMethodRequest.Size(m)
}
func (m *SetBgscanMethodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetBgscanMethodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetBgscanMethodRequest proto.InternalMessageInfo

func (m *SetBgscanMethodRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

type AssureDisconnectRequest struct {
	ServicePath          string   `protobuf:"bytes,1,opt,name=service_path,json=servicePath,proto3" json:"service_path,omitempty"`
	Timeout              int64    `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssureDisconnectRequest) Reset()         { *m = AssureDisconnectRequest{} }
func (m *AssureDisconnectRequest) String() string { return proto.CompactTextString(m) }
func (*AssureDisconnectRequest) ProtoMessage()    {}
func (*AssureDisconnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{16}
}

func (m *AssureDisconnectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssureDisconnectRequest.Unmarshal(m, b)
}
func (m *AssureDisconnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssureDisconnectRequest.Marshal(b, m, deterministic)
}
func (m *AssureDisconnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssureDisconnectRequest.Merge(m, src)
}
func (m *AssureDisconnectRequest) XXX_Size() int {
	return xxx_messageInfo_AssureDisconnectRequest.Size(m)
}
func (m *AssureDisconnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AssureDisconnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AssureDisconnectRequest proto.InternalMessageInfo

func (m *AssureDisconnectRequest) GetServicePath() string {
	if m != nil {
		return m.ServicePath
	}
	return ""
}

func (m *AssureDisconnectRequest) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type DisableEnableTestRequest struct {
	InterfaceName        string   `protobuf:"bytes,1,opt,name=interfaceName,proto3" json:"interfaceName,omitempty"`
	ServicePath          string   `protobuf:"bytes,2,opt,name=servicePath,proto3" json:"servicePath,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DisableEnableTestRequest) Reset()         { *m = DisableEnableTestRequest{} }
func (m *DisableEnableTestRequest) String() string { return proto.CompactTextString(m) }
func (*DisableEnableTestRequest) ProtoMessage()    {}
func (*DisableEnableTestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{17}
}

func (m *DisableEnableTestRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DisableEnableTestRequest.Unmarshal(m, b)
}
func (m *DisableEnableTestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DisableEnableTestRequest.Marshal(b, m, deterministic)
}
func (m *DisableEnableTestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisableEnableTestRequest.Merge(m, src)
}
func (m *DisableEnableTestRequest) XXX_Size() int {
	return xxx_messageInfo_DisableEnableTestRequest.Size(m)
}
func (m *DisableEnableTestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DisableEnableTestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DisableEnableTestRequest proto.InternalMessageInfo

func (m *DisableEnableTestRequest) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *DisableEnableTestRequest) GetServicePath() string {
	if m != nil {
		return m.ServicePath
	}
	return ""
}

type RequestScansRequest struct {
	Count                int32    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestScansRequest) Reset()         { *m = RequestScansRequest{} }
func (m *RequestScansRequest) String() string { return proto.CompactTextString(m) }
func (*RequestScansRequest) ProtoMessage()    {}
func (*RequestScansRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{18}
}

func (m *RequestScansRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestScansRequest.Unmarshal(m, b)
}
func (m *RequestScansRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestScansRequest.Marshal(b, m, deterministic)
}
func (m *RequestScansRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestScansRequest.Merge(m, src)
}
func (m *RequestScansRequest) XXX_Size() int {
	return xxx_messageInfo_RequestScansRequest.Size(m)
}
func (m *RequestScansRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestScansRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RequestScansRequest proto.InternalMessageInfo

func (m *RequestScansRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type SetMACRandomizeRequest struct {
	Enable               bool     `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetMACRandomizeRequest) Reset()         { *m = SetMACRandomizeRequest{} }
func (m *SetMACRandomizeRequest) String() string { return proto.CompactTextString(m) }
func (*SetMACRandomizeRequest) ProtoMessage()    {}
func (*SetMACRandomizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{19}
}

func (m *SetMACRandomizeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetMACRandomizeRequest.Unmarshal(m, b)
}
func (m *SetMACRandomizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetMACRandomizeRequest.Marshal(b, m, deterministic)
}
func (m *SetMACRandomizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetMACRandomizeRequest.Merge(m, src)
}
func (m *SetMACRandomizeRequest) XXX_Size() int {
	return xxx_messageInfo_SetMACRandomizeRequest.Size(m)
}
func (m *SetMACRandomizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetMACRandomizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetMACRandomizeRequest proto.InternalMessageInfo

func (m *SetMACRandomizeRequest) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

type SetMACRandomizeResponse struct {
	OldSetting           bool     `protobuf:"varint,1,opt,name=old_setting,json=oldSetting,proto3" json:"old_setting,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetMACRandomizeResponse) Reset()         { *m = SetMACRandomizeResponse{} }
func (m *SetMACRandomizeResponse) String() string { return proto.CompactTextString(m) }
func (*SetMACRandomizeResponse) ProtoMessage()    {}
func (*SetMACRandomizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d1eecb28f2859f1, []int{20}
}

func (m *SetMACRandomizeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetMACRandomizeResponse.Unmarshal(m, b)
}
func (m *SetMACRandomizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetMACRandomizeResponse.Marshal(b, m, deterministic)
}
func (m *SetMACRandomizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetMACRandomizeResponse.Merge(m, src)
}
func (m *SetMACRandomizeResponse) XXX_Size() int {
	return xxx_messageInfo_SetMACRandomizeResponse.Size(m)
}
func (m *SetMACRandomizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetMACRandomizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetMACRandomizeResponse proto.InternalMessageInfo

func (m *SetMACRandomizeResponse) GetOldSetting() bool {
	if m != nil {
		return m.OldSetting
	}
	return false
}

func init() {
	proto.RegisterType((*ConnectRequest)(nil), "tast.cros.network.ConnectRequest")
	proto.RegisterMapType((map[string]*ShillVal)(nil), "tast.cros.network.ConnectRequest.ShillpropsEntry")
	proto.RegisterType((*ShillVal)(nil), "tast.cros.network.ShillVal")
	proto.RegisterType((*StrArray)(nil), "tast.cros.network.StrArray")
	proto.RegisterType((*ConnectResponse)(nil), "tast.cros.network.ConnectResponse")
	proto.RegisterType((*DiscoverServiceRequest)(nil), "tast.cros.network.DiscoverServiceRequest")
	proto.RegisterMapType((map[string]*ShillVal)(nil), "tast.cros.network.DiscoverServiceRequest.ShillpropsEntry")
	proto.RegisterType((*DiscoverServiceResponse)(nil), "tast.cros.network.DiscoverServiceResponse")
	proto.RegisterType((*DisconnectRequest)(nil), "tast.cros.network.DisconnectRequest")
	proto.RegisterType((*DeleteEntriesForSSIDRequest)(nil), "tast.cros.network.DeleteEntriesForSSIDRequest")
	proto.RegisterType((*QueryServiceRequest)(nil), "tast.cros.network.QueryServiceRequest")
	proto.RegisterType((*QueryServiceResponse)(nil), "tast.cros.network.QueryServiceResponse")
	proto.RegisterType((*QueryServiceResponse_Wifi)(nil), "tast.cros.network.QueryServiceResponse.Wifi")
	proto.RegisterType((*GetInterfaceResponse)(nil), "tast.cros.network.GetInterfaceResponse")
	proto.RegisterType((*GetIPv4AddrsRequest)(nil), "tast.cros.network.GetIPv4AddrsRequest")
	proto.RegisterType((*GetIPv4AddrsResponse)(nil), "tast.cros.network.GetIPv4AddrsResponse")
	proto.RegisterType((*ExpectWifiFrequenciesRequest)(nil), "tast.cros.network.ExpectWifiFrequenciesRequest")
	proto.RegisterType((*GetBgscanMethodResponse)(nil), "tast.cros.network.GetBgscanMethodResponse")
	proto.RegisterType((*SetBgscanMethodRequest)(nil), "tast.cros.network.SetBgscanMethodRequest")
	proto.RegisterType((*AssureDisconnectRequest)(nil), "tast.cros.network.AssureDisconnectRequest")
	proto.RegisterType((*DisableEnableTestRequest)(nil), "tast.cros.network.DisableEnableTestRequest")
	proto.RegisterType((*RequestScansRequest)(nil), "tast.cros.network.RequestScansRequest")
	proto.RegisterType((*SetMACRandomizeRequest)(nil), "tast.cros.network.SetMACRandomizeRequest")
	proto.RegisterType((*SetMACRandomizeResponse)(nil), "tast.cros.network.SetMACRandomizeResponse")
}

func init() { proto.RegisterFile("wifi_service.proto", fileDescriptor_7d1eecb28f2859f1) }

var fileDescriptor_7d1eecb28f2859f1 = []byte{
	// 1264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xdd, 0x72, 0x13, 0x37,
	0x14, 0xb6, 0x63, 0x27, 0xb6, 0x8f, 0x1d, 0x0c, 0x22, 0x4d, 0x96, 0x40, 0x4b, 0xd0, 0x40, 0x09,
	0xd0, 0xda, 0x0d, 0x65, 0x3a, 0x05, 0x7a, 0x41, 0x88, 0x03, 0x64, 0x06, 0x3a, 0xb0, 0x4e, 0xa1,
	0xe5, 0xc6, 0x5d, 0xef, 0xca, 0xb1, 0x60, 0xbd, 0x72, 0x57, 0xb2, 0xc1, 0x7d, 0x81, 0x3e, 0x47,
	0x1f, 0xa2, 0xcf, 0xd1, 0xcb, 0x4e, 0xdf, 0xa6, 0xa3, 0x9f, 0xb5, 0xd7, 0x46, 0x6b, 0x0a, 0xd3,
	0x99, 0xde, 0xe9, 0x9c, 0x3d, 0x3f, 0xdf, 0x7e, 0x3a, 0xfa, 0x24, 0x40, 0x6f, 0x68, 0x8f, 0x76,
	0x38, 0x89, 0xc7, 0xd4, 0x27, 0x8d, 0x61, 0xcc, 0x04, 0x43, 0x67, 0x84, 0xc7, 0x45, 0xc3, 0x8f,
	0x19, 0x6f, 0x44, 0x44, 0xbc, 0x61, 0xf1, 0xeb, 0xed, 0xf3, 0x27, 0x8c, 0x9d, 0x84, 0xa4, 0xa9,
	0x02, 0xba, 0xa3, 0x5e, 0x93, 0x0c, 0x86, 0x62, 0xa2, 0xe3, 0xf1, 0x6f, 0x2b, 0x70, 0xea, 0x80,
	0x45, 0x11, 0xf1, 0x85, 0x4b, 0x7e, 0x19, 0x11, 0x2e, 0x10, 0x82, 0x22, 0xe7, 0x34, 0x70, 0xf2,
	0x3b, 0xf9, 0xdd, 0x9a, 0xab, 0xd6, 0x68, 0x13, 0xd6, 0xfa, 0x34, 0x08, 0x48, 0xe4, 0xac, 0xec,
	0xe4, 0x77, 0xcb, 0xae, 0xb1, 0xd0, 0x36, 0x94, 0x39, 0xf1, 0x47, 0x31, 0x15, 0x13, 0xa7, 0xb0,
	0x93, 0xdf, 0xad, 0xb8, 0x53, 0x1b, 0x3d, 0x03, 0xe0, 0x7d, 0x1a, 0x86, 0xc3, 0x98, 0x0d, 0xb9,
	0x53, 0xdc, 0x29, 0xec, 0x56, 0x6f, 0xee, 0x35, 0xde, 0xc1, 0xd7, 0x98, 0x6f, 0xdf, 0x68, 0x4f,
	0x73, 0x0e, 0x23, 0x11, 0x4f, 0xdc, 0x54, 0x91, 0xed, 0x97, 0x50, 0x5f, 0xf8, 0x8c, 0x4e, 0x43,
	0xe1, 0x35, 0x99, 0x28, 0xb0, 0x15, 0x57, 0x2e, 0xd1, 0x1e, 0xac, 0x8e, 0xbd, 0x70, 0x44, 0x14,
	0xd4, 0xea, 0xcd, 0xf3, 0x96, 0x96, 0xaa, 0xc8, 0x73, 0x2f, 0x74, 0x75, 0xe4, 0x9d, 0x95, 0x6f,
	0xf3, 0x78, 0x0c, 0xe5, 0xc4, 0x8d, 0x10, 0x14, 0xb8, 0x88, 0x75, 0xd1, 0x47, 0x39, 0x57, 0x1a,
	0x68, 0x03, 0x8a, 0x5d, 0xc6, 0x42, 0x4d, 0xc0, 0xa3, 0x9c, 0xab, 0x2c, 0x74, 0x1b, 0xca, 0x5c,
	0xc4, 0xfb, 0x71, 0xec, 0x69, 0x02, 0x32, 0xfa, 0x99, 0x90, 0x47, 0x39, 0x77, 0x1a, 0x7e, 0x7f,
	0x15, 0x0a, 0x63, 0x2f, 0xc4, 0x9f, 0x41, 0x39, 0xf9, 0x2c, 0xa9, 0x1f, 0x7b, 0x21, 0x77, 0xf2,
	0x3b, 0x85, 0xdd, 0x8a, 0xab, 0xd6, 0xf8, 0x8f, 0x3c, 0xd4, 0xa7, 0x14, 0xf1, 0x21, 0x8b, 0x38,
	0x41, 0x97, 0xa0, 0x66, 0xb6, 0xbd, 0x33, 0xf4, 0x44, 0xdf, 0xfc, 0x7d, 0xd5, 0xf8, 0x9e, 0x7a,
	0xa2, 0x8f, 0xae, 0xc0, 0xa9, 0x80, 0x72, 0x9f, 0x8d, 0x49, 0x3c, 0xe9, 0x08, 0x3a, 0xd0, 0x74,
	0x14, 0xdc, 0xf5, 0xa9, 0xf7, 0x98, 0x0e, 0x08, 0xba, 0x06, 0xa7, 0x3d, 0xce, 0x99, 0x4f, 0x3d,
	0x41, 0x59, 0xa4, 0x03, 0x0b, 0x2a, 0xb0, 0x9e, 0xf2, 0xab, 0xd0, 0x2f, 0x01, 0xf9, 0x2c, 0xea,
	0xd1, 0x93, 0x51, 0x9c, 0x0a, 0x2e, 0xaa, 0xe0, 0x33, 0x73, 0x5f, 0x64, 0x38, 0xfe, 0x33, 0x0f,
	0x9b, 0x2d, 0xd3, 0xab, 0xad, 0x81, 0x25, 0x13, 0xf6, 0x93, 0x65, 0x32, 0x6e, 0x5b, 0x68, 0xb3,
	0xa7, 0xff, 0x6f, 0x13, 0xe2, 0xc3, 0xd6, 0x3b, 0x88, 0xfe, 0xeb, 0x0d, 0xc1, 0xdf, 0xc0, 0x19,
	0xd5, 0x64, 0xee, 0x48, 0xbe, 0xbf, 0x3c, 0xde, 0x83, 0xf3, 0x2d, 0x12, 0x12, 0x41, 0xe4, 0x4f,
	0x53, 0xc2, 0x1f, 0xb0, 0xb8, 0xdd, 0x3e, 0x6a, 0x2d, 0x39, 0xd4, 0xf8, 0x1a, 0x9c, 0x7d, 0x36,
	0x22, 0xf1, 0x64, 0x61, 0x77, 0x10, 0x14, 0x53, 0x4d, 0xd4, 0x1a, 0xff, 0x5d, 0x80, 0x8d, 0xf9,
	0x58, 0xf3, 0xe3, 0x08, 0x8a, 0x91, 0x37, 0x20, 0x49, 0xb0, 0x5c, 0x4b, 0xb1, 0x08, 0x88, 0x8c,
	0x52, 0x7f, 0x58, 0x71, 0x8d, 0x25, 0x63, 0xc5, 0x64, 0x48, 0x8c, 0x50, 0xa8, 0xb5, 0xf4, 0x0d,
	0x58, 0xa0, 0xc7, 0xa8, 0xe2, 0xaa, 0x35, 0xda, 0x80, 0x55, 0x2e, 0x3c, 0x41, 0x9c, 0x55, 0xe5,
	0xd4, 0x06, 0x72, 0xa0, 0x34, 0xa6, 0x9c, 0x76, 0x43, 0xe2, 0xac, 0x29, 0x0d, 0x4a, 0x4c, 0xc9,
	0x0e, 0xe5, 0x1d, 0x43, 0x19, 0x09, 0x9c, 0x92, 0xfa, 0x5c, 0xa5, 0xfc, 0x20, 0x71, 0xa1, 0x7b,
	0x50, 0x94, 0x62, 0xe9, 0x94, 0xd5, 0x86, 0x7f, 0x61, 0xd9, 0x70, 0xdb, 0xdf, 0x35, 0x5e, 0xd0,
	0x1e, 0x75, 0x55, 0xe6, 0xf6, 0x5f, 0x79, 0x28, 0x4a, 0x53, 0xa2, 0xeb, 0x4e, 0xa9, 0xac, 0xb8,
	0xda, 0x40, 0x9f, 0x02, 0xf4, 0x44, 0x87, 0x44, 0x5e, 0x37, 0x24, 0x81, 0x11, 0xc9, 0x4a, 0x4f,
	0x1c, 0x6a, 0x07, 0xba, 0x00, 0x95, 0x5e, 0x2c, 0xf9, 0x8d, 0x7c, 0xad, 0x13, 0xeb, 0xee, 0xcc,
	0x21, 0x47, 0x63, 0x6a, 0x74, 0x42, 0xca, 0x85, 0x3a, 0x13, 0xeb, 0xee, 0xfa, 0xd4, 0xfb, 0x98,
	0x72, 0x81, 0xce, 0x41, 0xb9, 0x4f, 0xde, 0x76, 0x54, 0x73, 0x4d, 0x4d, 0xa9, 0x4f, 0xde, 0xb6,
	0x65, 0xfb, 0x8b, 0x50, 0xd5, 0x8a, 0xac, 0xbf, 0x6a, 0x82, 0x40, 0xbb, 0x54, 0xc0, 0x39, 0x28,
	0x0f, 0xfb, 0x93, 0x8e, 0xe2, 0xba, 0xa4, 0xfa, 0x97, 0x86, 0xfd, 0xc9, 0x13, 0x16, 0x10, 0x7c,
	0x1d, 0x36, 0x1e, 0x12, 0x71, 0x14, 0x09, 0x12, 0xf7, 0xbc, 0xe5, 0x5b, 0x8b, 0xef, 0xc2, 0x59,
	0x19, 0xfb, 0x74, 0x7c, 0x6b, 0x3f, 0x08, 0x62, 0x9e, 0x8c, 0xcc, 0x65, 0x58, 0xa7, 0x49, 0xfe,
	0xf7, 0xb3, 0x9c, 0x79, 0x67, 0xd2, 0x68, 0x96, 0x3c, 0x6b, 0x44, 0x87, 0xe3, 0x5b, 0x89, 0xea,
	0xc9, 0x35, 0x3e, 0x86, 0x0b, 0x87, 0x6f, 0x87, 0xc4, 0x17, 0x92, 0xf3, 0x07, 0x86, 0x06, 0x4a,
	0xf8, 0xb2, 0x4b, 0x6a, 0x07, 0xaa, 0xbd, 0x59, 0xa4, 0xb3, 0xa2, 0x38, 0x4c, 0xbb, 0xf0, 0x1e,
	0x6c, 0x3d, 0x24, 0xe2, 0xfe, 0x09, 0xf7, 0xbd, 0xe8, 0x09, 0x11, 0x7d, 0x16, 0x4c, 0x41, 0x6c,
	0xc2, 0xda, 0x40, 0x79, 0x0c, 0x76, 0x63, 0xe1, 0xaf, 0x60, 0xb3, 0xbd, 0x98, 0xa2, 0x21, 0x64,
	0x65, 0x3c, 0x87, 0xad, 0x7d, 0xce, 0x47, 0x31, 0xf9, 0x98, 0x73, 0x2c, 0xc7, 0x5c, 0x8a, 0x03,
	0x1b, 0x09, 0xa3, 0x0f, 0x89, 0x89, 0xbb, 0xe0, 0xb4, 0x28, 0x97, 0xf3, 0xa4, 0xa7, 0xea, 0x98,
	0x70, 0xf1, 0x41, 0x1b, 0x20, 0x09, 0x4a, 0xb5, 0x32, 0xa7, 0x73, 0x4e, 0x45, 0x6e, 0xc0, 0x59,
	0x53, 0xb2, 0xed, 0x7b, 0xd1, 0x94, 0xed, 0x0d, 0x58, 0xf5, 0xd9, 0x28, 0x12, 0xaa, 0xec, 0xaa,
	0xab, 0x0d, 0x43, 0xcd, 0x93, 0xfd, 0x03, 0xd7, 0x8b, 0x02, 0x36, 0xa0, 0xbf, 0x92, 0x14, 0x35,
	0xfa, 0x28, 0xa8, 0x84, 0xb2, 0x6b, 0x2c, 0x7c, 0x07, 0xb6, 0xde, 0xc9, 0x30, 0xfc, 0x5f, 0x84,
	0x2a, 0x0b, 0x83, 0x0e, 0x27, 0x42, 0xd0, 0xe8, 0xc4, 0xe4, 0x01, 0x0b, 0x83, 0xb6, 0xf6, 0xdc,
	0xfc, 0xbd, 0x06, 0x55, 0x39, 0x0c, 0xe6, 0x8c, 0xa2, 0xbb, 0x50, 0x3a, 0x8a, 0xa8, 0x68, 0xfd,
	0x70, 0x8c, 0x36, 0x1b, 0xfa, 0x89, 0xd3, 0x48, 0x9e, 0x38, 0x8d, 0x43, 0xf9, 0xc4, 0xd9, 0xce,
	0xf0, 0xe3, 0x1c, 0x3a, 0x80, 0xba, 0x4b, 0x68, 0x44, 0x85, 0x24, 0xb1, 0xad, 0xf4, 0xe5, 0xc3,
	0x8b, 0x7c, 0x07, 0xe5, 0x63, 0xe2, 0xc5, 0x2d, 0xf6, 0x26, 0xfa, 0x88, 0x6c, 0x17, 0x4a, 0x46,
	0x9f, 0xd0, 0xa5, 0xf7, 0xbe, 0x8a, 0xb6, 0xf1, 0xb2, 0x10, 0x4d, 0x21, 0xce, 0xa1, 0xc7, 0x00,
	0xb3, 0xa1, 0x43, 0x97, 0xb3, 0xae, 0xd4, 0xb9, 0xca, 0xd9, 0x08, 0x7f, 0x86, 0x0d, 0xdb, 0x95,
	0x82, 0x1a, 0xb6, 0xba, 0xd9, 0x77, 0xcf, 0x92, 0x0e, 0x1e, 0xd4, 0xd2, 0xba, 0x8b, 0x3e, 0x7f,
	0xaf, 0x30, 0xeb, 0x8a, 0x57, 0xff, 0xa5, 0x80, 0xe3, 0x1c, 0x7a, 0x06, 0xb5, 0xb4, 0xba, 0x65,
	0x6e, 0x94, 0xad, 0xa4, 0x4d, 0x16, 0x35, 0xea, 0xb4, 0x8e, 0x59, 0x51, 0x5b, 0x54, 0x32, 0xb3,
	0xc5, 0xa2, 0x20, 0xe2, 0x1c, 0xea, 0xc2, 0x27, 0x56, 0xf9, 0x43, 0x4d, 0x4b, 0x8d, 0x65, 0x42,
	0xb9, 0x84, 0xfc, 0x17, 0x50, 0x5f, 0x10, 0xc3, 0x4c, 0x72, 0xae, 0xdb, 0x91, 0xdb, 0x84, 0x14,
	0xe7, 0xd0, 0x73, 0xa8, 0x2f, 0x48, 0x26, 0xba, 0x66, 0x7b, 0x62, 0x59, 0x65, 0x75, 0x09, 0xe0,
	0x1f, 0xe1, 0xf4, 0xa2, 0xb0, 0x22, 0x1b, 0xb2, 0x0c, 0xf5, 0x5d, 0x52, 0xf9, 0xa5, 0x7a, 0x74,
	0xcd, 0x4b, 0x2b, 0xba, 0x61, 0x3f, 0x3e, 0x56, 0x01, 0x5e, 0x52, 0xfb, 0x29, 0xd4, 0xd2, 0x92,
	0x6a, 0x9d, 0x16, 0x8b, 0xe6, 0x2e, 0xa9, 0xf8, 0x4a, 0xf1, 0x9b, 0x56, 0xd1, 0x2c, 0x7e, 0x2d,
	0xda, 0x6c, 0xdd, 0xcb, 0x0c, 0x51, 0xc6, 0x39, 0x74, 0x0f, 0x6a, 0x2f, 0x3c, 0xaa, 0x90, 0x1d,
	0x05, 0xe1, 0xc7, 0xa8, 0xe4, 0x2b, 0xa8, 0x2f, 0xbc, 0x9a, 0xad, 0x68, 0xed, 0x6f, 0x7d, 0x2b,
	0xda, 0x8c, 0x47, 0x38, 0xce, 0xdd, 0xbf, 0xfa, 0xf2, 0x8a, 0xdf, 0x8f, 0xd9, 0x80, 0x8e, 0x06,
	0x8c, 0x37, 0x65, 0x66, 0xd3, 0xdc, 0x6e, 0xbc, 0x29, 0x4b, 0x34, 0x4d, 0x89, 0xee, 0x9a, 0x82,
	0xf9, 0xf5, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2a, 0xba, 0x7c, 0xba, 0x43, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WifiServiceClient is the client API for WifiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WifiServiceClient interface {
	// InitDUT initialize the DUT for WiFi testing.
	InitDUT(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// ReinitTestState cleans and sets up the environment for a single WiFi testcase.
	ReinitTestState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// TearDown reverts the settings made in InitDUT (and also ReinitTestState).
	TearDown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Connect attempts to connect WiFi network.
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
	// Disconnect attempts to disconnect from a service.
	Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// DeleteEntriesForSSID deletes all WiFi profile entries for a given ssid.
	DeleteEntriesForSSID(ctx context.Context, in *DeleteEntriesForSSIDRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// QueryService queries shill service information.
	QueryService(ctx context.Context, in *QueryServiceRequest, opts ...grpc.CallOption) (*QueryServiceResponse, error)
	// GetInterface returns the WiFi device interface name (e.g., wlan0).
	GetInterface(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetInterfaceResponse, error)
	// GetIPv4Addrs returns the IPv4 addresses for the network interface.
	GetIPv4Addrs(ctx context.Context, in *GetIPv4AddrsRequest, opts ...grpc.CallOption) (*GetIPv4AddrsResponse, error)
	// ExpectWifiFrequencies checks if the device discovers the given SSID on the specific frequencies.
	ExpectWifiFrequencies(ctx context.Context, in *ExpectWifiFrequenciesRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetBgscanMethod returns the bgscan method the device's WiFi module currently uses.
	GetBgscanMethod(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetBgscanMethodResponse, error)
	// SetBgscanMethod sets the device's WiFi module's bgscan method.
	SetBgscanMethod(ctx context.Context, in *SetBgscanMethodRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// AssureDisconnect assures that the WiFi service has disconnected within timeout (nanoseconds).
	AssureDisconnect(ctx context.Context, in *AssureDisconnectRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// DisableEnableTest disables and then enables the WiFi interface.
	// This is the main body of the DisableEnable test.
	DisableEnableTest(ctx context.Context, in *DisableEnableTestRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// RequestScans requests shill to trigger active scans on WiFi devices.
	RequestScans(ctx context.Context, in *RequestScansRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// SetMACRandomize sets the MAC randomization setting on the WiFi device.
	// The original setting is returned for ease of restoring.
	SetMACRandomize(ctx context.Context, in *SetMACRandomizeRequest, opts ...grpc.CallOption) (*SetMACRandomizeResponse, error)
	// WaitScanIdle waits for not scanning state. If there's a running scan, it can
	// wait for it to be done with timeout 10 seconds.
	// This is useful when the test sets some parameters regarding scans and wants
	// to avoid noices due to not yet ended scans.
	WaitScanIdle(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// DiscoverService discovers a WiFi service with the given properties.
	DiscoverService(ctx context.Context, in *DiscoverServiceRequest, opts ...grpc.CallOption) (*DiscoverServiceResponse, error)
}

type wifiServiceClient struct {
	cc *grpc.ClientConn
}

func NewWifiServiceClient(cc *grpc.ClientConn) WifiServiceClient {
	return &wifiServiceClient{cc}
}

func (c *wifiServiceClient) InitDUT(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/InitDUT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) ReinitTestState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/ReinitTestState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) TearDown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/TearDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) DeleteEntriesForSSID(ctx context.Context, in *DeleteEntriesForSSIDRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/DeleteEntriesForSSID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) QueryService(ctx context.Context, in *QueryServiceRequest, opts ...grpc.CallOption) (*QueryServiceResponse, error) {
	out := new(QueryServiceResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/QueryService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) GetInterface(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetInterfaceResponse, error) {
	out := new(GetInterfaceResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/GetInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) GetIPv4Addrs(ctx context.Context, in *GetIPv4AddrsRequest, opts ...grpc.CallOption) (*GetIPv4AddrsResponse, error) {
	out := new(GetIPv4AddrsResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/GetIPv4Addrs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) ExpectWifiFrequencies(ctx context.Context, in *ExpectWifiFrequenciesRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/ExpectWifiFrequencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) GetBgscanMethod(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetBgscanMethodResponse, error) {
	out := new(GetBgscanMethodResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/GetBgscanMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) SetBgscanMethod(ctx context.Context, in *SetBgscanMethodRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/SetBgscanMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) AssureDisconnect(ctx context.Context, in *AssureDisconnectRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/AssureDisconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) DisableEnableTest(ctx context.Context, in *DisableEnableTestRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/DisableEnableTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) RequestScans(ctx context.Context, in *RequestScansRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/RequestScans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) SetMACRandomize(ctx context.Context, in *SetMACRandomizeRequest, opts ...grpc.CallOption) (*SetMACRandomizeResponse, error) {
	out := new(SetMACRandomizeResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/SetMACRandomize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) WaitScanIdle(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/WaitScanIdle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) DiscoverService(ctx context.Context, in *DiscoverServiceRequest, opts ...grpc.CallOption) (*DiscoverServiceResponse, error) {
	out := new(DiscoverServiceResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/DiscoverService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WifiServiceServer is the server API for WifiService service.
type WifiServiceServer interface {
	// InitDUT initialize the DUT for WiFi testing.
	InitDUT(context.Context, *empty.Empty) (*empty.Empty, error)
	// ReinitTestState cleans and sets up the environment for a single WiFi testcase.
	ReinitTestState(context.Context, *empty.Empty) (*empty.Empty, error)
	// TearDown reverts the settings made in InitDUT (and also ReinitTestState).
	TearDown(context.Context, *empty.Empty) (*empty.Empty, error)
	// Connect attempts to connect WiFi network.
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	// Disconnect attempts to disconnect from a service.
	Disconnect(context.Context, *DisconnectRequest) (*empty.Empty, error)
	// DeleteEntriesForSSID deletes all WiFi profile entries for a given ssid.
	DeleteEntriesForSSID(context.Context, *DeleteEntriesForSSIDRequest) (*empty.Empty, error)
	// QueryService queries shill service information.
	QueryService(context.Context, *QueryServiceRequest) (*QueryServiceResponse, error)
	// GetInterface returns the WiFi device interface name (e.g., wlan0).
	GetInterface(context.Context, *empty.Empty) (*GetInterfaceResponse, error)
	// GetIPv4Addrs returns the IPv4 addresses for the network interface.
	GetIPv4Addrs(context.Context, *GetIPv4AddrsRequest) (*GetIPv4AddrsResponse, error)
	// ExpectWifiFrequencies checks if the device discovers the given SSID on the specific frequencies.
	ExpectWifiFrequencies(context.Context, *ExpectWifiFrequenciesRequest) (*empty.Empty, error)
	// GetBgscanMethod returns the bgscan method the device's WiFi module currently uses.
	GetBgscanMethod(context.Context, *empty.Empty) (*GetBgscanMethodResponse, error)
	// SetBgscanMethod sets the device's WiFi module's bgscan method.
	SetBgscanMethod(context.Context, *SetBgscanMethodRequest) (*empty.Empty, error)
	// AssureDisconnect assures that the WiFi service has disconnected within timeout (nanoseconds).
	AssureDisconnect(context.Context, *AssureDisconnectRequest) (*empty.Empty, error)
	// DisableEnableTest disables and then enables the WiFi interface.
	// This is the main body of the DisableEnable test.
	DisableEnableTest(context.Context, *DisableEnableTestRequest) (*empty.Empty, error)
	// RequestScans requests shill to trigger active scans on WiFi devices.
	RequestScans(context.Context, *RequestScansRequest) (*empty.Empty, error)
	// SetMACRandomize sets the MAC randomization setting on the WiFi device.
	// The original setting is returned for ease of restoring.
	SetMACRandomize(context.Context, *SetMACRandomizeRequest) (*SetMACRandomizeResponse, error)
	// WaitScanIdle waits for not scanning state. If there's a running scan, it can
	// wait for it to be done with timeout 10 seconds.
	// This is useful when the test sets some parameters regarding scans and wants
	// to avoid noices due to not yet ended scans.
	WaitScanIdle(context.Context, *empty.Empty) (*empty.Empty, error)
	// DiscoverService discovers a WiFi service with the given properties.
	DiscoverService(context.Context, *DiscoverServiceRequest) (*DiscoverServiceResponse, error)
}

// UnimplementedWifiServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWifiServiceServer struct {
}

func (*UnimplementedWifiServiceServer) InitDUT(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDUT not implemented")
}
func (*UnimplementedWifiServiceServer) ReinitTestState(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReinitTestState not implemented")
}
func (*UnimplementedWifiServiceServer) TearDown(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TearDown not implemented")
}
func (*UnimplementedWifiServiceServer) Connect(ctx context.Context, req *ConnectRequest) (*ConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedWifiServiceServer) Disconnect(ctx context.Context, req *DisconnectRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (*UnimplementedWifiServiceServer) DeleteEntriesForSSID(ctx context.Context, req *DeleteEntriesForSSIDRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntriesForSSID not implemented")
}
func (*UnimplementedWifiServiceServer) QueryService(ctx context.Context, req *QueryServiceRequest) (*QueryServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryService not implemented")
}
func (*UnimplementedWifiServiceServer) GetInterface(ctx context.Context, req *empty.Empty) (*GetInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterface not implemented")
}
func (*UnimplementedWifiServiceServer) GetIPv4Addrs(ctx context.Context, req *GetIPv4AddrsRequest) (*GetIPv4AddrsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIPv4Addrs not implemented")
}
func (*UnimplementedWifiServiceServer) ExpectWifiFrequencies(ctx context.Context, req *ExpectWifiFrequenciesRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpectWifiFrequencies not implemented")
}
func (*UnimplementedWifiServiceServer) GetBgscanMethod(ctx context.Context, req *empty.Empty) (*GetBgscanMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBgscanMethod not implemented")
}
func (*UnimplementedWifiServiceServer) SetBgscanMethod(ctx context.Context, req *SetBgscanMethodRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBgscanMethod not implemented")
}
func (*UnimplementedWifiServiceServer) AssureDisconnect(ctx context.Context, req *AssureDisconnectRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssureDisconnect not implemented")
}
func (*UnimplementedWifiServiceServer) DisableEnableTest(ctx context.Context, req *DisableEnableTestRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableEnableTest not implemented")
}
func (*UnimplementedWifiServiceServer) RequestScans(ctx context.Context, req *RequestScansRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestScans not implemented")
}
func (*UnimplementedWifiServiceServer) SetMACRandomize(ctx context.Context, req *SetMACRandomizeRequest) (*SetMACRandomizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMACRandomize not implemented")
}
func (*UnimplementedWifiServiceServer) WaitScanIdle(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitScanIdle not implemented")
}
func (*UnimplementedWifiServiceServer) DiscoverService(ctx context.Context, req *DiscoverServiceRequest) (*DiscoverServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverService not implemented")
}

func RegisterWifiServiceServer(s *grpc.Server, srv WifiServiceServer) {
	s.RegisterService(&_WifiService_serviceDesc, srv)
}

func _WifiService_InitDUT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).InitDUT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/InitDUT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).InitDUT(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_ReinitTestState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).ReinitTestState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/ReinitTestState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).ReinitTestState(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_TearDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).TearDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/TearDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).TearDown(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).Disconnect(ctx, req.(*DisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_DeleteEntriesForSSID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntriesForSSIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).DeleteEntriesForSSID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/DeleteEntriesForSSID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).DeleteEntriesForSSID(ctx, req.(*DeleteEntriesForSSIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_QueryService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).QueryService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/QueryService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).QueryService(ctx, req.(*QueryServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_GetInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).GetInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/GetInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).GetInterface(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_GetIPv4Addrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIPv4AddrsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).GetIPv4Addrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/GetIPv4Addrs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).GetIPv4Addrs(ctx, req.(*GetIPv4AddrsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_ExpectWifiFrequencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpectWifiFrequenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).ExpectWifiFrequencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/ExpectWifiFrequencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).ExpectWifiFrequencies(ctx, req.(*ExpectWifiFrequenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_GetBgscanMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).GetBgscanMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/GetBgscanMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).GetBgscanMethod(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_SetBgscanMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBgscanMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).SetBgscanMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/SetBgscanMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).SetBgscanMethod(ctx, req.(*SetBgscanMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_AssureDisconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssureDisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).AssureDisconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/AssureDisconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).AssureDisconnect(ctx, req.(*AssureDisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_DisableEnableTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableEnableTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).DisableEnableTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/DisableEnableTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).DisableEnableTest(ctx, req.(*DisableEnableTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_RequestScans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestScansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).RequestScans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/RequestScans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).RequestScans(ctx, req.(*RequestScansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_SetMACRandomize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMACRandomizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).SetMACRandomize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/SetMACRandomize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).SetMACRandomize(ctx, req.(*SetMACRandomizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_WaitScanIdle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).WaitScanIdle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/WaitScanIdle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).WaitScanIdle(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_DiscoverService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).DiscoverService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/DiscoverService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).DiscoverService(ctx, req.(*DiscoverServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WifiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.network.WifiService",
	HandlerType: (*WifiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitDUT",
			Handler:    _WifiService_InitDUT_Handler,
		},
		{
			MethodName: "ReinitTestState",
			Handler:    _WifiService_ReinitTestState_Handler,
		},
		{
			MethodName: "TearDown",
			Handler:    _WifiService_TearDown_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _WifiService_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _WifiService_Disconnect_Handler,
		},
		{
			MethodName: "DeleteEntriesForSSID",
			Handler:    _WifiService_DeleteEntriesForSSID_Handler,
		},
		{
			MethodName: "QueryService",
			Handler:    _WifiService_QueryService_Handler,
		},
		{
			MethodName: "GetInterface",
			Handler:    _WifiService_GetInterface_Handler,
		},
		{
			MethodName: "GetIPv4Addrs",
			Handler:    _WifiService_GetIPv4Addrs_Handler,
		},
		{
			MethodName: "ExpectWifiFrequencies",
			Handler:    _WifiService_ExpectWifiFrequencies_Handler,
		},
		{
			MethodName: "GetBgscanMethod",
			Handler:    _WifiService_GetBgscanMethod_Handler,
		},
		{
			MethodName: "SetBgscanMethod",
			Handler:    _WifiService_SetBgscanMethod_Handler,
		},
		{
			MethodName: "AssureDisconnect",
			Handler:    _WifiService_AssureDisconnect_Handler,
		},
		{
			MethodName: "DisableEnableTest",
			Handler:    _WifiService_DisableEnableTest_Handler,
		},
		{
			MethodName: "RequestScans",
			Handler:    _WifiService_RequestScans_Handler,
		},
		{
			MethodName: "SetMACRandomize",
			Handler:    _WifiService_SetMACRandomize_Handler,
		},
		{
			MethodName: "WaitScanIdle",
			Handler:    _WifiService_WaitScanIdle_Handler,
		},
		{
			MethodName: "DiscoverService",
			Handler:    _WifiService_DiscoverService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wifi_service.proto",
}
