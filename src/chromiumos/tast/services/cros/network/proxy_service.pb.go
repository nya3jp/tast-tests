// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proxy_service.proto

package network

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AuthCredentials struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthCredentials) Reset()         { *m = AuthCredentials{} }
func (m *AuthCredentials) String() string { return proto.CompactTextString(m) }
func (*AuthCredentials) ProtoMessage()    {}
func (*AuthCredentials) Descriptor() ([]byte, []int) {
	return fileDescriptor_34ca2fbc94d169de, []int{0}
}

func (m *AuthCredentials) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthCredentials.Unmarshal(m, b)
}
func (m *AuthCredentials) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthCredentials.Marshal(b, m, deterministic)
}
func (m *AuthCredentials) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthCredentials.Merge(m, src)
}
func (m *AuthCredentials) XXX_Size() int {
	return xxx_messageInfo_AuthCredentials.Size(m)
}
func (m *AuthCredentials) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthCredentials.DiscardUnknown(m)
}

var xxx_messageInfo_AuthCredentials proto.InternalMessageInfo

func (m *AuthCredentials) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AuthCredentials) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type StartServerRequest struct {
	Port uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// Credentials for basic authentication. If set, clients connecting to the proxy server
	// must provide the same credentials for authentication otherwise the connection will fail.
	// Leave unset if the clients should not require authentication.
	AuthCredentials      *AuthCredentials `protobuf:"bytes,2,opt,name=auth_credentials,json=authCredentials,proto3" json:"auth_credentials,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *StartServerRequest) Reset()         { *m = StartServerRequest{} }
func (m *StartServerRequest) String() string { return proto.CompactTextString(m) }
func (*StartServerRequest) ProtoMessage()    {}
func (*StartServerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34ca2fbc94d169de, []int{1}
}

func (m *StartServerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartServerRequest.Unmarshal(m, b)
}
func (m *StartServerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartServerRequest.Marshal(b, m, deterministic)
}
func (m *StartServerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartServerRequest.Merge(m, src)
}
func (m *StartServerRequest) XXX_Size() int {
	return xxx_messageInfo_StartServerRequest.Size(m)
}
func (m *StartServerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartServerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartServerRequest proto.InternalMessageInfo

func (m *StartServerRequest) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *StartServerRequest) GetAuthCredentials() *AuthCredentials {
	if m != nil {
		return m.AuthCredentials
	}
	return nil
}

type StartServerResponse struct {
	HostAndPort          string   `protobuf:"bytes,1,opt,name=host_and_port,json=hostAndPort,proto3" json:"host_and_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartServerResponse) Reset()         { *m = StartServerResponse{} }
func (m *StartServerResponse) String() string { return proto.CompactTextString(m) }
func (*StartServerResponse) ProtoMessage()    {}
func (*StartServerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34ca2fbc94d169de, []int{2}
}

func (m *StartServerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartServerResponse.Unmarshal(m, b)
}
func (m *StartServerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartServerResponse.Marshal(b, m, deterministic)
}
func (m *StartServerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartServerResponse.Merge(m, src)
}
func (m *StartServerResponse) XXX_Size() int {
	return xxx_messageInfo_StartServerResponse.Size(m)
}
func (m *StartServerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartServerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartServerResponse proto.InternalMessageInfo

func (m *StartServerResponse) GetHostAndPort() string {
	if m != nil {
		return m.HostAndPort
	}
	return ""
}

func init() {
	proto.RegisterType((*AuthCredentials)(nil), "tast.cros.network.AuthCredentials")
	proto.RegisterType((*StartServerRequest)(nil), "tast.cros.network.StartServerRequest")
	proto.RegisterType((*StartServerResponse)(nil), "tast.cros.network.StartServerResponse")
}

func init() { proto.RegisterFile("proxy_service.proto", fileDescriptor_34ca2fbc94d169de) }

var fileDescriptor_34ca2fbc94d169de = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x41, 0x4f, 0xea, 0x40,
	0x10, 0x86, 0x97, 0x97, 0x97, 0xc7, 0xf2, 0x08, 0xcf, 0x25, 0x31, 0xa4, 0x5e, 0xcc, 0x26, 0xa8,
	0xa7, 0x6d, 0x82, 0x27, 0x2f, 0x26, 0x68, 0x3c, 0x78, 0x30, 0x21, 0xed, 0xcd, 0x83, 0xcd, 0xd2,
	0x8e, 0x94, 0x48, 0x3b, 0xeb, 0xec, 0x14, 0xe4, 0x4f, 0xf9, 0x1b, 0x4d, 0x5b, 0x40, 0x11, 0x8d,
	0xb7, 0x9d, 0x99, 0x6f, 0xbf, 0xef, 0xdb, 0xf9, 0x56, 0xf4, 0x2c, 0xe1, 0xcb, 0x2a, 0x72, 0x40,
	0x8b, 0x59, 0x0c, 0xda, 0x12, 0x32, 0xca, 0x03, 0x36, 0x8e, 0x75, 0x4c, 0xe8, 0x74, 0x0e, 0xbc,
	0x44, 0x7a, 0xf2, 0x8e, 0xa6, 0x88, 0xd3, 0x39, 0xf8, 0x15, 0x60, 0x52, 0x3c, 0xfa, 0x90, 0x59,
	0x5e, 0xd5, 0x78, 0x75, 0x2b, 0xba, 0xa3, 0x82, 0xd3, 0x6b, 0x82, 0x04, 0x72, 0x9e, 0x99, 0xb9,
	0x93, 0x9e, 0xf8, 0x5b, 0x38, 0xa0, 0xdc, 0x64, 0xd0, 0x6f, 0x1e, 0x37, 0xcf, 0x5a, 0xc1, 0xb6,
	0x2e, 0x67, 0xd6, 0x38, 0xb7, 0x44, 0x4a, 0xfa, 0xbf, 0xea, 0xd9, 0xa6, 0x56, 0x4b, 0x21, 0x43,
	0x36, 0xc4, 0x21, 0xd0, 0x02, 0x28, 0x80, 0xe7, 0x02, 0x1c, 0x4b, 0x29, 0x7e, 0x5b, 0x24, 0xae,
	0x98, 0x3a, 0x41, 0x75, 0x96, 0x77, 0xe2, 0xbf, 0x29, 0x38, 0x8d, 0xe2, 0x77, 0xd5, 0x8a, 0xad,
	0x3d, 0x54, 0x7a, 0xcf, 0xbf, 0xfe, 0xe4, 0x2f, 0xe8, 0x9a, 0xdd, 0x86, 0xba, 0x10, 0xbd, 0x1d,
	0x61, 0x67, 0x31, 0x77, 0x20, 0x95, 0xe8, 0xa4, 0xe8, 0x38, 0x32, 0x79, 0x12, 0x6d, 0x2d, 0xb4,
	0x82, 0x76, 0xd9, 0x1c, 0xe5, 0xc9, 0x18, 0x89, 0x87, 0xaf, 0x4d, 0xf1, 0x6f, 0x5c, 0xae, 0x31,
	0xac, 0xb7, 0x28, 0x1f, 0x44, 0xfb, 0x03, 0x97, 0x1c, 0x7c, 0xe1, 0x67, 0xff, 0x91, 0xde, 0xc9,
	0x4f, 0xb0, 0xda, 0x92, 0x6a, 0xc8, 0x4b, 0x21, 0x42, 0x46, 0xbb, 0xa6, 0x3f, 0xd4, 0x75, 0x36,
	0x7a, 0x93, 0x8d, 0xbe, 0x29, 0xb3, 0xf1, 0xbe, 0xe9, 0xab, 0xc6, 0xd5, 0xe9, 0xfd, 0x20, 0x4e,
	0x09, 0xb3, 0x59, 0x91, 0xa1, 0xf3, 0x4b, 0x55, 0x7f, 0xfd, 0x01, 0x9c, 0x5f, 0xca, 0xfb, 0x6b,
	0xf9, 0xc9, 0x9f, 0xea, 0xea, 0xf9, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe6, 0xe7, 0x12, 0xd1,
	0x26, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProxyServiceClient is the client API for ProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProxyServiceClient interface {
	// Start starts a proxy server instance with the given configuration.
	StartServer(ctx context.Context, in *StartServerRequest, opts ...grpc.CallOption) (*StartServerResponse, error)
	// Stop stops the running server instance.
	StopServer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type proxyServiceClient struct {
	cc *grpc.ClientConn
}

func NewProxyServiceClient(cc *grpc.ClientConn) ProxyServiceClient {
	return &proxyServiceClient{cc}
}

func (c *proxyServiceClient) StartServer(ctx context.Context, in *StartServerRequest, opts ...grpc.CallOption) (*StartServerResponse, error) {
	out := new(StartServerResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.ProxyService/StartServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyServiceClient) StopServer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.ProxyService/StopServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyServiceServer is the server API for ProxyService service.
type ProxyServiceServer interface {
	// Start starts a proxy server instance with the given configuration.
	StartServer(context.Context, *StartServerRequest) (*StartServerResponse, error)
	// Stop stops the running server instance.
	StopServer(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedProxyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProxyServiceServer struct {
}

func (*UnimplementedProxyServiceServer) StartServer(ctx context.Context, req *StartServerRequest) (*StartServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartServer not implemented")
}
func (*UnimplementedProxyServiceServer) StopServer(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopServer not implemented")
}

func RegisterProxyServiceServer(s *grpc.Server, srv ProxyServiceServer) {
	s.RegisterService(&_ProxyService_serviceDesc, srv)
}

func _ProxyService_StartServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServiceServer).StartServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.ProxyService/StartServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServiceServer).StartServer(ctx, req.(*StartServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyService_StopServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServiceServer).StopServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.ProxyService/StopServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServiceServer).StopServer(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProxyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.network.ProxyService",
	HandlerType: (*ProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartServer",
			Handler:    _ProxyService_StartServer_Handler,
		},
		{
			MethodName: "StopServer",
			Handler:    _ProxyService_StopServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proxy_service.proto",
}
