// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package tast.cros.network;

import "google/protobuf/empty.proto";

option go_package = "chromiumos/tast/services/cros/network";

// WifiService allows remote WiFi setup through shill dbus interface.
service WifiService {
  // InitDUT initialize the DUT for WiFi testing.
  rpc InitDUT(google.protobuf.Empty) returns (google.protobuf.Empty) {}

  // ReinitTestState cleans and sets up the environment for a single WiFi testcase.
  rpc ReinitTestState(google.protobuf.Empty) returns (google.protobuf.Empty) {}

  // TearDown reverts the settings made in InitDUT (and also ReinitTestState).
  rpc TearDown(google.protobuf.Empty) returns (google.protobuf.Empty) {}

  // Connect attempts to connect WiFi network.
  rpc Connect(ConnectRequest) returns (ConnectResponse) {}

  // Disconnect attempts to disconnect from a service.
  rpc Disconnect(DisconnectRequest) returns (google.protobuf.Empty) {}

  // DeleteEntriesForSSID deletes all WiFi profile entries for a given ssid.
  rpc DeleteEntriesForSSID(DeleteEntriesForSSIDRequest) returns (google.protobuf.Empty) {}

  // QueryService queries shill service information.
  rpc QueryService(QueryServiceRequest) returns (QueryServiceResponse) {}

  // GetInterface returns the WiFi device interface name (e.g., wlan0).
  rpc GetInterface(google.protobuf.Empty) returns (GetInterfaceResponse) {}

  // GetIPv4Addrs returns the IPv4 addresses for the network interface.
  rpc GetIPv4Addrs(GetIPv4AddrsRequest) returns (GetIPv4AddrsResponse) {}

  // ExpectWifiFrequencies checks if the device discovers the given SSID on the specific frequencies.
  rpc ExpectWifiFrequencies(ExpectWifiFrequenciesRequest) returns (google.protobuf.Empty) {}

  // GetBgscanMethod returns the bgscan method the device's WiFi module currently uses.
  rpc GetBgscanMethod(google.protobuf.Empty) returns (GetBgscanMethodResponse) {}

  // SetBgscanMethod sets the device's WiFi module's bgscan method.
  rpc SetBgscanMethod(SetBgscanMethodRequest) returns (google.protobuf.Empty) {}

  // AssureDisconnect assures that the WiFi service has disconnected within timeout (nanoseconds).
  rpc AssureDisconnect(AssureDisconnectRequest) returns (google.protobuf.Empty) {}

  // DisableEnableTest disables and then enables the WiFi interface.
  // This is the main body of the DisableEnable test.
  rpc DisableEnableTest(DisableEnableTestRequest) returns (google.protobuf.Empty) {}

  // RequestScans requests shill to trigger active scans on WiFi devices.
  rpc RequestScans(RequestScansRequest) returns (google.protobuf.Empty) {}

  // SetMACRandomize sets the MAC randomization setting on the WiFi device.
  // The original setting is returned for ease of restoring.
  rpc SetMACRandomize(SetMACRandomizeRequest) returns (SetMACRandomizeResponse) {}

  // WaitScanIdle waits for not scanning state. If there's a running scan, it can
  // wait for it to be done with timeout 10 seconds.
  // This is useful when the test sets some parameters regarding scans and wants
  // to avoid noices due to not yet ended scans.
  rpc WaitScanIdle(google.protobuf.Empty) returns (google.protobuf.Empty) {}

  // ConfigureAndAssertAutoConnect configures the matched shill service and then
  // waits for the IsConnected property becomes true.
  // Note that this function does not attempt to connect; it waits for auto
  // connect instead.
  rpc ConfigureAndAssertAutoConnect(ConfigureAndAssertAutoConnectRequest) returns (ConfigureAndAssertAutoConnectResponse) {}

  // GetCurrentTime returns the current local time in the given format.
  rpc GetCurrentTime(google.protobuf.Empty) returns (GetCurrentTimeResponse) {}

  // SelectedService returns the object path of selected service of WiFi service.
  rpc SelectedService(google.protobuf.Empty) returns (SelectedServiceResponse) {}
}

message ConnectRequest {
  bytes ssid = 1;
  // hidden denotes that if the SSID is hidden.
  bool hidden = 2;
  // security is the SecurityClass (defined in shill/service.go) of the WiFi
  // service to Connect.
  string security = 3;
  // shillprops is the shill properties the DUT should set to Connect to the
  // WiFi service.
  map<string, ShillVal> shillprops = 4;
}

message ShillVal {
  oneof val {
    string str = 1;
    bool bool = 2;
    // Because 'repeated' label is not allowed in oneof type, we define StrArray
    // for repeated string field.
    StrArray strArray = 3;
  }
}

message StrArray {
  repeated string vals = 1;
}

// ConnectResponse is the response of Connect call which includes the
// object path of connected service and timing data of the connection
// (all time in nanosecond unit).
message ConnectResponse {
  string service_path = 1;
  int64 discovery_time = 2;
  int64 association_time = 3;
  int64 configuration_time = 4;
}

message DisconnectRequest {
  string service_path = 1;
  bool remove_profile = 2;
}

message DeleteEntriesForSSIDRequest {
  bytes ssid = 1;
}

message QueryServiceRequest {
  string path = 1;
}

message QueryServiceResponse {
  message Wifi {
    string bssid = 1;
    uint32 frequency = 2;
    repeated uint32 frequency_list = 3;
    string hex_ssid = 4;
    bool hidden_ssid = 5;
    uint32 phy_mode = 6;
  }
  string name = 1;
  string device = 2;
  string type = 3;
  string mode = 4;
  string state = 5;
  bool visible = 6;
  bool is_connected = 7;
  Wifi wifi = 8;
  string guid = 9;
}

message GetInterfaceResponse {
  string name = 1;
}

message GetIPv4AddrsRequest {
  string interfaceName = 1;
}

message GetIPv4AddrsResponse {
  repeated string ipv4 = 1;
}

message ExpectWifiFrequenciesRequest {
  // SSID to look up. Required.
  bytes ssid = 1;
  // Expected list of frequencies for the SSID.
  repeated uint32 frequencies = 2;
}

message GetBgscanMethodResponse {
  string method = 1;
}

message SetBgscanMethodRequest {
  string method = 1;
}

message AssureDisconnectRequest {
  string service_path = 1;
  int64 timeout = 2;
}

message DisableEnableTestRequest {
  string interfaceName = 1;
  string servicePath = 2;
}

message RequestScansRequest {
  int32 count = 1;
}

message SetMACRandomizeRequest {
  bool enable = 1;
}

message SetMACRandomizeResponse {
  bool old_setting = 1;
}

message ConfigureAndAssertAutoConnectRequest {
  map<string, ShillVal> props = 1;
}

message ConfigureAndAssertAutoConnectResponse {
  string path = 1;
}

message GetCurrentTimeResponse {
  int64 nowSecond = 1;
  int64 nowNanosecond = 2;
}

message SelectedServiceResponse {
  string service_path = 1;
}
