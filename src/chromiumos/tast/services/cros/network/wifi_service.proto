// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package tast.cros.network;

import "google/protobuf/empty.proto";

option go_package = "chromiumos/tast/services/cros/network";

// WifiService allows remote WiFi setup through shill dbus interface.
service WifiService {
  // InitDUT initialize the DUT for WiFi testing.
  rpc InitDUT(google.protobuf.Empty) returns (google.protobuf.Empty) {}

  // ReinitTestState cleans and sets up the environment for a single WiFi testcase.
  rpc ReinitTestState(google.protobuf.Empty) returns (google.protobuf.Empty) {}

  // TearDown reverts the settings made in InitDUT (and also ReinitTestState).
  rpc TearDown(google.protobuf.Empty) returns (google.protobuf.Empty) {}

  // Connect attempts to connect WiFi network.
  rpc Connect(ConnectRequest) returns (ConnectResponse) {}

  // Disconnect attempts to disconnect from a service.
  rpc Disconnect(DisconnectRequest) returns (google.protobuf.Empty) {}

  // DeleteEntriesForSSID deletes all WiFi profile entries for a given ssid.
  rpc DeleteEntriesForSSID(DeleteEntriesForSSIDRequest) returns (google.protobuf.Empty) {}

  // QueryService queries shill service information.
  rpc QueryService(QueryServiceRequest) returns (QueryServiceResponse) {}

  // GetInterface returns the WiFi device interface name (e.g., wlan0).
  rpc GetInterface(google.protobuf.Empty) returns (GetInterfaceResponse) {}

  // GetIPv4Addrs returns the IPv4 addresses for the network interface.
  rpc GetIPv4Addrs(GetIPv4AddrsRequest) returns (GetIPv4AddrsResponse) {}

  // ExpectWifiFrequencies checks if the device discovers the given SSID on the specific frequencies.
  rpc ExpectWifiFrequencies(ExpectWifiFrequenciesRequest) returns (google.protobuf.Empty) {}
}

message ConnectRequest {
  bytes ssid = 1;
  // hidden denotes that if the SSID is hidden.
  bool hidden = 2;
  // security is the SecurityClass (defined in shill/service.go) of the WiFi
  // service to Connect.
  string security = 3;
  // shillprops is the shill properties the DUT should set to Connect to the
  // WiFi service.
  map<string, ShillVal> shillprops = 4;
}

message ShillVal {
  oneof val {
    string str = 1;
    bool bool = 2;
  }
}

// ConnectResponse is the response of Connect call which includes the
// object path of connected service and timing data of the connection
// (all time in nanosecond unit).
message ConnectResponse {
  string service_path = 1;
  int64 discovery_time = 2;
  int64 association_time = 3;
  int64 configuration_time = 4;
}

message DisconnectRequest {
  string service_path = 1;
}

message DeleteEntriesForSSIDRequest {
  bytes ssid = 1;
}

message QueryServiceRequest {
  string path = 1;
}

message QueryServiceResponse {
  message Wifi {
    string bssid = 1;
    bool ft_enabled = 2;
    uint32 frequency = 3;
    repeated uint32 frequency_list = 4;
    string hex_ssid = 5;
    bool hidden_ssid = 6;
    uint32 phy_mode = 7;
  }
  string name = 1;
  string device = 2;
  string type = 3;
  string mode = 4;
  string state = 5;
  bool visible = 6;
  bool is_connected = 7;
  Wifi wifi = 8;
}

message GetInterfaceResponse {
  string name = 1;
}

message GetIPv4AddrsRequest {
  string interfaceName = 1;
}

message GetIPv4AddrsResponse {
  repeated string ipv4 = 1;
}

message ExpectWifiFrequenciesRequest {
  // SSID to look up. Required.
  bytes ssid = 1;
  // Expected list of frequencies for the SSID.
  repeated uint32 frequencies = 2;
}
