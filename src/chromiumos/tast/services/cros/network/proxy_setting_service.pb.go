// Copyright 2022 The ChromiumOS Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: proxy_setting_service.proto

package network

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ManifestKey is the key used to create testing connection while in OOBE.
	ManifestKey string `protobuf:"bytes,1,opt,name=ManifestKey,proto3" json:"ManifestKey,omitempty"`
	// ShouldKeepState specifies if the current login operation should keep the previous user data or not.
	ShouldKeepState bool `protobuf:"varint,2,opt,name=ShouldKeepState,proto3" json:"ShouldKeepState,omitempty"`
}

func (x *NewRequest) Reset() {
	*x = NewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_setting_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewRequest) ProtoMessage() {}

func (x *NewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_setting_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewRequest.ProtoReflect.Descriptor instead.
func (*NewRequest) Descriptor() ([]byte, []int) {
	return file_proxy_setting_service_proto_rawDescGZIP(), []int{0}
}

func (x *NewRequest) GetManifestKey() string {
	if x != nil {
		return x.ManifestKey
	}
	return ""
}

func (x *NewRequest) GetShouldKeepState() bool {
	if x != nil {
		return x.ShouldKeepState
	}
	return false
}

type CloseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cleanup bool `protobuf:"varint,1,opt,name=Cleanup,proto3" json:"Cleanup,omitempty"`
}

func (x *CloseRequest) Reset() {
	*x = CloseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_setting_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseRequest) ProtoMessage() {}

func (x *CloseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_setting_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseRequest.ProtoReflect.Descriptor instead.
func (*CloseRequest) Descriptor() ([]byte, []int) {
	return file_proxy_setting_service_proto_rawDescGZIP(), []int{1}
}

func (x *CloseRequest) GetCleanup() bool {
	if x != nil {
		return x.Cleanup
	}
	return false
}

type ProxyConfigs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpHost  string `protobuf:"bytes,1,opt,name=HttpHost,proto3" json:"HttpHost,omitempty"`
	HttpPort  string `protobuf:"bytes,2,opt,name=HttpPort,proto3" json:"HttpPort,omitempty"`
	HttpsHost string `protobuf:"bytes,3,opt,name=HttpsHost,proto3" json:"HttpsHost,omitempty"`
	HttpsPort string `protobuf:"bytes,4,opt,name=HttpsPort,proto3" json:"HttpsPort,omitempty"`
	SocksHost string `protobuf:"bytes,5,opt,name=SocksHost,proto3" json:"SocksHost,omitempty"`
	SocksPort string `protobuf:"bytes,6,opt,name=SocksPort,proto3" json:"SocksPort,omitempty"`
}

func (x *ProxyConfigs) Reset() {
	*x = ProxyConfigs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_setting_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyConfigs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyConfigs) ProtoMessage() {}

func (x *ProxyConfigs) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_setting_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyConfigs.ProtoReflect.Descriptor instead.
func (*ProxyConfigs) Descriptor() ([]byte, []int) {
	return file_proxy_setting_service_proto_rawDescGZIP(), []int{2}
}

func (x *ProxyConfigs) GetHttpHost() string {
	if x != nil {
		return x.HttpHost
	}
	return ""
}

func (x *ProxyConfigs) GetHttpPort() string {
	if x != nil {
		return x.HttpPort
	}
	return ""
}

func (x *ProxyConfigs) GetHttpsHost() string {
	if x != nil {
		return x.HttpsHost
	}
	return ""
}

func (x *ProxyConfigs) GetHttpsPort() string {
	if x != nil {
		return x.HttpsPort
	}
	return ""
}

func (x *ProxyConfigs) GetSocksHost() string {
	if x != nil {
		return x.SocksHost
	}
	return ""
}

func (x *ProxyConfigs) GetSocksPort() string {
	if x != nil {
		return x.SocksPort
	}
	return ""
}

var File_proxy_setting_service_proto protoreflect.FileDescriptor

var file_proxy_setting_service_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x74,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x58, 0x0a,
	0x0a, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4d,
	0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a,
	0x0f, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x4b, 0x65, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x4b, 0x65,
	0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x28, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6c, 0x65, 0x61, 0x6e,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75,
	0x70, 0x22, 0xbe, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x74, 0x74, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x74, 0x74, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x48, 0x74, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x48, 0x74, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x74,
	0x74, 0x70, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48,
	0x74, 0x74, 0x70, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x74, 0x74, 0x70,
	0x73, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48, 0x74, 0x74,
	0x70, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x6f, 0x63, 0x6b, 0x73, 0x48,
	0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x6f, 0x63, 0x6b, 0x73,
	0x48, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x6f, 0x63, 0x6b, 0x73, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x6f, 0x63, 0x6b, 0x73, 0x50, 0x6f,
	0x72, 0x74, 0x32, 0xaf, 0x02, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x03, 0x4e, 0x65,
	0x77, 0x12, 0x1d, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x05, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x12, 0x1f, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x42,
	0x0a, 0x05, 0x53, 0x65, 0x74, 0x75, 0x70, 0x12, 0x1f, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x50, 0x0a, 0x13, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1f, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x22, 0x00, 0x42, 0x27, 0x5a, 0x25, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d,
	0x6f, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proxy_setting_service_proto_rawDescOnce sync.Once
	file_proxy_setting_service_proto_rawDescData = file_proxy_setting_service_proto_rawDesc
)

func file_proxy_setting_service_proto_rawDescGZIP() []byte {
	file_proxy_setting_service_proto_rawDescOnce.Do(func() {
		file_proxy_setting_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_proxy_setting_service_proto_rawDescData)
	})
	return file_proxy_setting_service_proto_rawDescData
}

var file_proxy_setting_service_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proxy_setting_service_proto_goTypes = []interface{}{
	(*NewRequest)(nil),    // 0: tast.cros.network.NewRequest
	(*CloseRequest)(nil),  // 1: tast.cros.network.CloseRequest
	(*ProxyConfigs)(nil),  // 2: tast.cros.network.ProxyConfigs
	(*emptypb.Empty)(nil), // 3: google.protobuf.Empty
}
var file_proxy_setting_service_proto_depIdxs = []int32{
	0, // 0: tast.cros.network.ProxySettingService.New:input_type -> tast.cros.network.NewRequest
	1, // 1: tast.cros.network.ProxySettingService.Close:input_type -> tast.cros.network.CloseRequest
	2, // 2: tast.cros.network.ProxySettingService.Setup:input_type -> tast.cros.network.ProxyConfigs
	3, // 3: tast.cros.network.ProxySettingService.FetchConfigurations:input_type -> google.protobuf.Empty
	3, // 4: tast.cros.network.ProxySettingService.New:output_type -> google.protobuf.Empty
	3, // 5: tast.cros.network.ProxySettingService.Close:output_type -> google.protobuf.Empty
	3, // 6: tast.cros.network.ProxySettingService.Setup:output_type -> google.protobuf.Empty
	2, // 7: tast.cros.network.ProxySettingService.FetchConfigurations:output_type -> tast.cros.network.ProxyConfigs
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proxy_setting_service_proto_init() }
func file_proxy_setting_service_proto_init() {
	if File_proxy_setting_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proxy_setting_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_setting_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_setting_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyConfigs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proxy_setting_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proxy_setting_service_proto_goTypes,
		DependencyIndexes: file_proxy_setting_service_proto_depIdxs,
		MessageInfos:      file_proxy_setting_service_proto_msgTypes,
	}.Build()
	File_proxy_setting_service_proto = out.File
	file_proxy_setting_service_proto_rawDesc = nil
	file_proxy_setting_service_proto_goTypes = nil
	file_proxy_setting_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProxySettingServiceClient is the client API for ProxySettingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProxySettingServiceClient interface {
	// NewRequest starts up a new proxy setting service instance.
	// Close must be called later to clean up the associated resources.
	New(ctx context.Context, in *NewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Close releases the resources obtained by New.
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Setup sets up proxy values.
	Setup(ctx context.Context, in *ProxyConfigs, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// FetchConfigurations returns proxy hosts and ports.
	FetchConfigurations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProxyConfigs, error)
}

type proxySettingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProxySettingServiceClient(cc grpc.ClientConnInterface) ProxySettingServiceClient {
	return &proxySettingServiceClient{cc}
}

func (c *proxySettingServiceClient) New(ctx context.Context, in *NewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.ProxySettingService/New", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxySettingServiceClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.ProxySettingService/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxySettingServiceClient) Setup(ctx context.Context, in *ProxyConfigs, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.ProxySettingService/Setup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxySettingServiceClient) FetchConfigurations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProxyConfigs, error) {
	out := new(ProxyConfigs)
	err := c.cc.Invoke(ctx, "/tast.cros.network.ProxySettingService/FetchConfigurations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxySettingServiceServer is the server API for ProxySettingService service.
type ProxySettingServiceServer interface {
	// NewRequest starts up a new proxy setting service instance.
	// Close must be called later to clean up the associated resources.
	New(context.Context, *NewRequest) (*emptypb.Empty, error)
	// Close releases the resources obtained by New.
	Close(context.Context, *CloseRequest) (*emptypb.Empty, error)
	// Setup sets up proxy values.
	Setup(context.Context, *ProxyConfigs) (*emptypb.Empty, error)
	// FetchConfigurations returns proxy hosts and ports.
	FetchConfigurations(context.Context, *emptypb.Empty) (*ProxyConfigs, error)
}

// UnimplementedProxySettingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProxySettingServiceServer struct {
}

func (*UnimplementedProxySettingServiceServer) New(context.Context, *NewRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method New not implemented")
}
func (*UnimplementedProxySettingServiceServer) Close(context.Context, *CloseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedProxySettingServiceServer) Setup(context.Context, *ProxyConfigs) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Setup not implemented")
}
func (*UnimplementedProxySettingServiceServer) FetchConfigurations(context.Context, *emptypb.Empty) (*ProxyConfigs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchConfigurations not implemented")
}

func RegisterProxySettingServiceServer(s *grpc.Server, srv ProxySettingServiceServer) {
	s.RegisterService(&_ProxySettingService_serviceDesc, srv)
}

func _ProxySettingService_New_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxySettingServiceServer).New(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.ProxySettingService/New",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxySettingServiceServer).New(ctx, req.(*NewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxySettingService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxySettingServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.ProxySettingService/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxySettingServiceServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxySettingService_Setup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyConfigs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxySettingServiceServer).Setup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.ProxySettingService/Setup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxySettingServiceServer).Setup(ctx, req.(*ProxyConfigs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxySettingService_FetchConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxySettingServiceServer).FetchConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.ProxySettingService/FetchConfigurations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxySettingServiceServer).FetchConfigurations(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProxySettingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.network.ProxySettingService",
	HandlerType: (*ProxySettingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "New",
			Handler:    _ProxySettingService_New_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _ProxySettingService_Close_Handler,
		},
		{
			MethodName: "Setup",
			Handler:    _ProxySettingService_Setup_Handler,
		},
		{
			MethodName: "FetchConfigurations",
			Handler:    _ProxySettingService_FetchConfigurations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proxy_setting_service.proto",
}
