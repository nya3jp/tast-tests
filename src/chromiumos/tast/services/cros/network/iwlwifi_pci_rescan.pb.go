// Code generated by protoc-gen-go. DO NOT EDIT.
// source: iwlwifi_pci_rescan.proto

package network

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("iwlwifi_pci_rescan.proto", fileDescriptor_0aafaa10ead59a4f) }

var fileDescriptor_0aafaa10ead59a4f = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xc8, 0x2c, 0xcf, 0x29,
	0xcf, 0x4c, 0xcb, 0x8c, 0x2f, 0x48, 0xce, 0x8c, 0x2f, 0x4a, 0x2d, 0x4e, 0x4e, 0xcc, 0xd3, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x2c, 0x49, 0x2c, 0x2e, 0xd1, 0x4b, 0x2e, 0xca, 0x2f, 0xd6,
	0xcb, 0x4b, 0x2d, 0x29, 0xcf, 0x2f, 0xca, 0x96, 0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5,
	0x07, 0x2b, 0x48, 0x2a, 0x4d, 0xd3, 0x4f, 0xcd, 0x2d, 0x28, 0xa9, 0x84, 0xa8, 0x37, 0x5a, 0xcc,
	0xc8, 0x25, 0xe0, 0x09, 0x31, 0x2c, 0xc0, 0xd9, 0x33, 0x08, 0x6c, 0x94, 0x90, 0x1f, 0x97, 0x54,
	0x50, 0x6a, 0x6e, 0x7e, 0x59, 0xaa, 0x67, 0x5a, 0x62, 0x72, 0xaa, 0x63, 0x5e, 0x4a, 0x78, 0x62,
	0x66, 0x49, 0x50, 0x6a, 0x72, 0x7e, 0x59, 0x6a, 0x51, 0xa5, 0x90, 0x98, 0x1e, 0xc4, 0x40, 0x3d,
	0x98, 0x81, 0x7a, 0xae, 0x20, 0x03, 0xa5, 0x70, 0x88, 0x2b, 0x31, 0x08, 0xd9, 0x73, 0x71, 0x7b,
	0xa4, 0x26, 0xe6, 0x94, 0x64, 0x38, 0x67, 0xa4, 0x26, 0x67, 0x93, 0x6e, 0x80, 0x93, 0x7a, 0x94,
	0x6a, 0x72, 0x46, 0x51, 0x7e, 0x6e, 0x66, 0x69, 0x6e, 0x7e, 0xb1, 0x3e, 0xc8, 0x8b, 0xfa, 0xc5,
	0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0xc5, 0xfa, 0x20, 0xbf, 0xea, 0x43, 0xfd, 0x9a, 0xc4, 0x06,
	0xd6, 0x6a, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x85, 0x06, 0xd0, 0x21, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IwlwifiPCIRescanClient is the client API for IwlwifiPCIRescan service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IwlwifiPCIRescanClient interface {
	// RemoveIfaceAndWaitRecovery triggers iwlwifi_rescan by removing the WiFi
	// device. iwlwifi_rescan rule should rescan PCI and add back the WiFi device.
	RemoveIfaceAndWaitRecovery(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// HealthCheck examines if the DUT is healthy. If iwlwifi_rescan fails to
	// bring the WiFi device back, it treats the DUT as unhealthy. Testing host
	// needs to reboot the DUT to refrain it from affecting the following tests.
	HealthCheck(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type iwlwifiPCIRescanClient struct {
	cc *grpc.ClientConn
}

func NewIwlwifiPCIRescanClient(cc *grpc.ClientConn) IwlwifiPCIRescanClient {
	return &iwlwifiPCIRescanClient{cc}
}

func (c *iwlwifiPCIRescanClient) RemoveIfaceAndWaitRecovery(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.IwlwifiPCIRescan/RemoveIfaceAndWaitRecovery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iwlwifiPCIRescanClient) HealthCheck(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.IwlwifiPCIRescan/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IwlwifiPCIRescanServer is the server API for IwlwifiPCIRescan service.
type IwlwifiPCIRescanServer interface {
	// RemoveIfaceAndWaitRecovery triggers iwlwifi_rescan by removing the WiFi
	// device. iwlwifi_rescan rule should rescan PCI and add back the WiFi device.
	RemoveIfaceAndWaitRecovery(context.Context, *empty.Empty) (*empty.Empty, error)
	// HealthCheck examines if the DUT is healthy. If iwlwifi_rescan fails to
	// bring the WiFi device back, it treats the DUT as unhealthy. Testing host
	// needs to reboot the DUT to refrain it from affecting the following tests.
	HealthCheck(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedIwlwifiPCIRescanServer can be embedded to have forward compatible implementations.
type UnimplementedIwlwifiPCIRescanServer struct {
}

func (*UnimplementedIwlwifiPCIRescanServer) RemoveIfaceAndWaitRecovery(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIfaceAndWaitRecovery not implemented")
}
func (*UnimplementedIwlwifiPCIRescanServer) HealthCheck(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}

func RegisterIwlwifiPCIRescanServer(s *grpc.Server, srv IwlwifiPCIRescanServer) {
	s.RegisterService(&_IwlwifiPCIRescan_serviceDesc, srv)
}

func _IwlwifiPCIRescan_RemoveIfaceAndWaitRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IwlwifiPCIRescanServer).RemoveIfaceAndWaitRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.IwlwifiPCIRescan/RemoveIfaceAndWaitRecovery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IwlwifiPCIRescanServer).RemoveIfaceAndWaitRecovery(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IwlwifiPCIRescan_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IwlwifiPCIRescanServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.IwlwifiPCIRescan/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IwlwifiPCIRescanServer).HealthCheck(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _IwlwifiPCIRescan_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.network.IwlwifiPCIRescan",
	HandlerType: (*IwlwifiPCIRescanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RemoveIfaceAndWaitRecovery",
			Handler:    _IwlwifiPCIRescan_RemoveIfaceAndWaitRecovery_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _IwlwifiPCIRescan_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iwlwifi_pci_rescan.proto",
}
