// Code generated by protoc-gen-go. DO NOT EDIT.
// source: allowlist_service.proto

package network

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SetupFirewallRequest struct {
	// Specifies the hostnames to which connections are allowed.
	Hostnames            []string `protobuf:"bytes,1,rep,name=hostnames,proto3" json:"hostnames,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetupFirewallRequest) Reset()         { *m = SetupFirewallRequest{} }
func (m *SetupFirewallRequest) String() string { return proto.CompactTextString(m) }
func (*SetupFirewallRequest) ProtoMessage()    {}
func (*SetupFirewallRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fc9a00f565c110a, []int{0}
}

func (m *SetupFirewallRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetupFirewallRequest.Unmarshal(m, b)
}
func (m *SetupFirewallRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetupFirewallRequest.Marshal(b, m, deterministic)
}
func (m *SetupFirewallRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetupFirewallRequest.Merge(m, src)
}
func (m *SetupFirewallRequest) XXX_Size() int {
	return xxx_messageInfo_SetupFirewallRequest.Size(m)
}
func (m *SetupFirewallRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetupFirewallRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetupFirewallRequest proto.InternalMessageInfo

func (m *SetupFirewallRequest) GetHostnames() []string {
	if m != nil {
		return m.Hostnames
	}
	return nil
}

type GaiaLoginRequest struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GaiaLoginRequest) Reset()         { *m = GaiaLoginRequest{} }
func (m *GaiaLoginRequest) String() string { return proto.CompactTextString(m) }
func (*GaiaLoginRequest) ProtoMessage()    {}
func (*GaiaLoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fc9a00f565c110a, []int{1}
}

func (m *GaiaLoginRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GaiaLoginRequest.Unmarshal(m, b)
}
func (m *GaiaLoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GaiaLoginRequest.Marshal(b, m, deterministic)
}
func (m *GaiaLoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GaiaLoginRequest.Merge(m, src)
}
func (m *GaiaLoginRequest) XXX_Size() int {
	return xxx_messageInfo_GaiaLoginRequest.Size(m)
}
func (m *GaiaLoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GaiaLoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GaiaLoginRequest proto.InternalMessageInfo

func (m *GaiaLoginRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *GaiaLoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func init() {
	proto.RegisterType((*SetupFirewallRequest)(nil), "tast.cros.network.SetupFirewallRequest")
	proto.RegisterType((*GaiaLoginRequest)(nil), "tast.cros.network.GaiaLoginRequest")
}

func init() { proto.RegisterFile("allowlist_service.proto", fileDescriptor_5fc9a00f565c110a) }

var fileDescriptor_5fc9a00f565c110a = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0xc1, 0x4e, 0xf2, 0x40,
	0x10, 0xc7, 0x3f, 0x3e, 0x12, 0x63, 0x37, 0x31, 0xc1, 0x6a, 0x14, 0xd1, 0x18, 0x82, 0x31, 0x70,
	0xda, 0x26, 0xea, 0x0b, 0xa0, 0x41, 0x12, 0xa2, 0x97, 0xe2, 0xc9, 0x8b, 0x59, 0xea, 0x08, 0x1b,
	0xdb, 0x9d, 0xba, 0x33, 0xa5, 0xf2, 0x32, 0x3e, 0xab, 0x59, 0x4a, 0x31, 0x2a, 0x72, 0xe1, 0x38,
	0x3b, 0x33, 0xbf, 0xfc, 0x7f, 0x93, 0x15, 0x87, 0x2a, 0x8e, 0x31, 0x8f, 0x35, 0xf1, 0x13, 0x81,
	0x9d, 0xea, 0x08, 0x64, 0x6a, 0x91, 0xd1, 0xdf, 0x65, 0x45, 0x2c, 0x23, 0x8b, 0x24, 0x0d, 0x70,
	0x8e, 0xf6, 0xb5, 0x71, 0x3c, 0x46, 0x1c, 0xc7, 0x10, 0xcc, 0x07, 0x46, 0xd9, 0x4b, 0x00, 0x49,
	0xca, 0xb3, 0x62, 0xbe, 0x75, 0x25, 0xf6, 0x87, 0xc0, 0x59, 0x7a, 0xab, 0x2d, 0xe4, 0x2a, 0x8e,
	0x43, 0x78, 0xcb, 0x80, 0xd8, 0x3f, 0x11, 0xde, 0x04, 0x89, 0x8d, 0x4a, 0x80, 0xea, 0x95, 0x66,
	0xb5, 0xe3, 0x85, 0x5f, 0x0f, 0xad, 0x81, 0xa8, 0xf5, 0x95, 0x56, 0x77, 0x38, 0xd6, 0xa6, 0xdc,
	0x68, 0x88, 0xed, 0x8c, 0xc0, 0xba, 0x81, 0x7a, 0xa5, 0x59, 0xe9, 0x78, 0xe1, 0xb2, 0x76, 0xbd,
	0x54, 0x11, 0xe5, 0x68, 0x9f, 0xeb, 0xff, 0x8b, 0x5e, 0x59, 0x5f, 0x7c, 0x54, 0x45, 0xad, 0x5b,
	0xda, 0x0c, 0x0b, 0x19, 0x3f, 0x14, 0x3b, 0xdf, 0x62, 0xf9, 0x6d, 0xf9, 0x4b, 0x4c, 0xae, 0x0a,
	0xde, 0x38, 0x90, 0x85, 0xae, 0x2c, 0x75, 0x65, 0xcf, 0xe9, 0xb6, 0xfe, 0xf9, 0x03, 0xe1, 0x2d,
	0x43, 0xfb, 0x67, 0x2b, 0x78, 0x3f, 0x95, 0xd6, 0xb0, 0x42, 0x71, 0xfa, 0x00, 0xc4, 0xc3, 0x19,
	0x31, 0x24, 0x8b, 0xd0, 0x74, 0x83, 0xc6, 0x40, 0xc4, 0x7a, 0xaa, 0x79, 0xe6, 0xff, 0xb1, 0xbb,
	0x86, 0xd9, 0x17, 0x7b, 0x8e, 0xd9, 0xb5, 0xd1, 0x86, 0xa0, 0x7b, 0x71, 0xe4, 0x40, 0xbd, 0x77,
	0x06, 0x43, 0x1a, 0xcd, 0x66, 0xb8, 0xeb, 0xf6, 0xe3, 0x79, 0x34, 0xb1, 0x98, 0xe8, 0x2c, 0x41,
	0x0a, 0xdc, 0xd9, 0x82, 0xc5, 0x9f, 0xa3, 0xc0, 0xdd, 0x2f, 0x58, 0xdc, 0x6f, 0xb4, 0x35, 0x5f,
	0xbd, 0xfc, 0x0c, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x3f, 0x9d, 0xf5, 0x9d, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AllowlistServiceClient is the client API for AllowlistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AllowlistServiceClient interface {
	// SetupFirewall sets up a firewall using a proxy server that can filter
	// requests by the hostname.
	SetupFirewall(ctx context.Context, in *SetupFirewallRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GaiaLogin does real Gaia login to a remote Google endpoint via the proxy
	// setup via `SetupFirewall`.
	GaiaLogin(ctx context.Context, in *GaiaLoginRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// TestSystemServicesConnectivity verifies that the system services work
	// behind the firewall. `GaiaLogin` must be called before as it forces Chrome
	// to use the proxy firewall.
	TestSystemServicesConnectivity(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// TestArcConnectivity verifies that ARC provisioning and installing apps
	// works behind the firewall.
	TestArcConnectivity(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// TestExtensionConnectivity verifies that installing extensions works behind
	// the firewall.
	TestExtensionConnectivity(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type allowlistServiceClient struct {
	cc *grpc.ClientConn
}

func NewAllowlistServiceClient(cc *grpc.ClientConn) AllowlistServiceClient {
	return &allowlistServiceClient{cc}
}

func (c *allowlistServiceClient) SetupFirewall(ctx context.Context, in *SetupFirewallRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.AllowlistService/SetupFirewall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allowlistServiceClient) GaiaLogin(ctx context.Context, in *GaiaLoginRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.AllowlistService/GaiaLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allowlistServiceClient) TestSystemServicesConnectivity(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.AllowlistService/TestSystemServicesConnectivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allowlistServiceClient) TestArcConnectivity(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.AllowlistService/TestArcConnectivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allowlistServiceClient) TestExtensionConnectivity(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.AllowlistService/TestExtensionConnectivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AllowlistServiceServer is the server API for AllowlistService service.
type AllowlistServiceServer interface {
	// SetupFirewall sets up a firewall using a proxy server that can filter
	// requests by the hostname.
	SetupFirewall(context.Context, *SetupFirewallRequest) (*empty.Empty, error)
	// GaiaLogin does real Gaia login to a remote Google endpoint via the proxy
	// setup via `SetupFirewall`.
	GaiaLogin(context.Context, *GaiaLoginRequest) (*empty.Empty, error)
	// TestSystemServicesConnectivity verifies that the system services work
	// behind the firewall. `GaiaLogin` must be called before as it forces Chrome
	// to use the proxy firewall.
	TestSystemServicesConnectivity(context.Context, *empty.Empty) (*empty.Empty, error)
	// TestArcConnectivity verifies that ARC provisioning and installing apps
	// works behind the firewall.
	TestArcConnectivity(context.Context, *empty.Empty) (*empty.Empty, error)
	// TestExtensionConnectivity verifies that installing extensions works behind
	// the firewall.
	TestExtensionConnectivity(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedAllowlistServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAllowlistServiceServer struct {
}

func (*UnimplementedAllowlistServiceServer) SetupFirewall(ctx context.Context, req *SetupFirewallRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupFirewall not implemented")
}
func (*UnimplementedAllowlistServiceServer) GaiaLogin(ctx context.Context, req *GaiaLoginRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GaiaLogin not implemented")
}
func (*UnimplementedAllowlistServiceServer) TestSystemServicesConnectivity(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestSystemServicesConnectivity not implemented")
}
func (*UnimplementedAllowlistServiceServer) TestArcConnectivity(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestArcConnectivity not implemented")
}
func (*UnimplementedAllowlistServiceServer) TestExtensionConnectivity(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestExtensionConnectivity not implemented")
}

func RegisterAllowlistServiceServer(s *grpc.Server, srv AllowlistServiceServer) {
	s.RegisterService(&_AllowlistService_serviceDesc, srv)
}

func _AllowlistService_SetupFirewall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupFirewallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllowlistServiceServer).SetupFirewall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.AllowlistService/SetupFirewall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllowlistServiceServer).SetupFirewall(ctx, req.(*SetupFirewallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AllowlistService_GaiaLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GaiaLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllowlistServiceServer).GaiaLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.AllowlistService/GaiaLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllowlistServiceServer).GaiaLogin(ctx, req.(*GaiaLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AllowlistService_TestSystemServicesConnectivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllowlistServiceServer).TestSystemServicesConnectivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.AllowlistService/TestSystemServicesConnectivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllowlistServiceServer).TestSystemServicesConnectivity(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AllowlistService_TestArcConnectivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllowlistServiceServer).TestArcConnectivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.AllowlistService/TestArcConnectivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllowlistServiceServer).TestArcConnectivity(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AllowlistService_TestExtensionConnectivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllowlistServiceServer).TestExtensionConnectivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.AllowlistService/TestExtensionConnectivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllowlistServiceServer).TestExtensionConnectivity(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _AllowlistService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.network.AllowlistService",
	HandlerType: (*AllowlistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetupFirewall",
			Handler:    _AllowlistService_SetupFirewall_Handler,
		},
		{
			MethodName: "GaiaLogin",
			Handler:    _AllowlistService_GaiaLogin_Handler,
		},
		{
			MethodName: "TestSystemServicesConnectivity",
			Handler:    _AllowlistService_TestSystemServicesConnectivity_Handler,
		},
		{
			MethodName: "TestArcConnectivity",
			Handler:    _AllowlistService_TestArcConnectivity_Handler,
		},
		{
			MethodName: "TestExtensionConnectivity",
			Handler:    _AllowlistService_TestExtensionConnectivity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "allowlist_service.proto",
}
