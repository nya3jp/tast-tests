// Code generated by protoc-gen-go. DO NOT EDIT.
// source: wifi.proto

package network

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ConnectRequest struct {
	Ssid         string `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
	IsSsidHidden bool   `protobuf:"varint,2,opt,name=is_ssid_hidden,json=isSsidHidden,proto3" json:"is_ssid_hidden,omitempty"`
	// security is the SecurityClass (defined in shill/service.go) of the WiFi
	// service to Connect.
	Security string `protobuf:"bytes,3,opt,name=security,proto3" json:"security,omitempty"`
	// shillprops is the shill properties the DUT should set to Connect to the
	// WiFi service.
	Shillprops           map[string]*ShillVal `protobuf:"bytes,4,rep,name=shillprops,proto3" json:"shillprops,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ConnectRequest) Reset()         { *m = ConnectRequest{} }
func (m *ConnectRequest) String() string { return proto.CompactTextString(m) }
func (*ConnectRequest) ProtoMessage()    {}
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_14343df069b9efbf, []int{0}
}

func (m *ConnectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectRequest.Unmarshal(m, b)
}
func (m *ConnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectRequest.Marshal(b, m, deterministic)
}
func (m *ConnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectRequest.Merge(m, src)
}
func (m *ConnectRequest) XXX_Size() int {
	return xxx_messageInfo_ConnectRequest.Size(m)
}
func (m *ConnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectRequest proto.InternalMessageInfo

func (m *ConnectRequest) GetSsid() string {
	if m != nil {
		return m.Ssid
	}
	return ""
}

func (m *ConnectRequest) GetIsSsidHidden() bool {
	if m != nil {
		return m.IsSsidHidden
	}
	return false
}

func (m *ConnectRequest) GetSecurity() string {
	if m != nil {
		return m.Security
	}
	return ""
}

func (m *ConnectRequest) GetShillprops() map[string]*ShillVal {
	if m != nil {
		return m.Shillprops
	}
	return nil
}

type ShillVal struct {
	// Types that are valid to be assigned to Val:
	//	*ShillVal_Str
	//	*ShillVal_Bool
	Val                  isShillVal_Val `protobuf_oneof:"val"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ShillVal) Reset()         { *m = ShillVal{} }
func (m *ShillVal) String() string { return proto.CompactTextString(m) }
func (*ShillVal) ProtoMessage()    {}
func (*ShillVal) Descriptor() ([]byte, []int) {
	return fileDescriptor_14343df069b9efbf, []int{1}
}

func (m *ShillVal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShillVal.Unmarshal(m, b)
}
func (m *ShillVal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShillVal.Marshal(b, m, deterministic)
}
func (m *ShillVal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShillVal.Merge(m, src)
}
func (m *ShillVal) XXX_Size() int {
	return xxx_messageInfo_ShillVal.Size(m)
}
func (m *ShillVal) XXX_DiscardUnknown() {
	xxx_messageInfo_ShillVal.DiscardUnknown(m)
}

var xxx_messageInfo_ShillVal proto.InternalMessageInfo

type isShillVal_Val interface {
	isShillVal_Val()
}

type ShillVal_Str struct {
	Str string `protobuf:"bytes,1,opt,name=str,proto3,oneof"`
}

type ShillVal_Bool struct {
	Bool bool `protobuf:"varint,2,opt,name=bool,proto3,oneof"`
}

func (*ShillVal_Str) isShillVal_Val() {}

func (*ShillVal_Bool) isShillVal_Val() {}

func (m *ShillVal) GetVal() isShillVal_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (m *ShillVal) GetStr() string {
	if x, ok := m.GetVal().(*ShillVal_Str); ok {
		return x.Str
	}
	return ""
}

func (m *ShillVal) GetBool() bool {
	if x, ok := m.GetVal().(*ShillVal_Bool); ok {
		return x.Bool
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ShillVal) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ShillVal_Str)(nil),
		(*ShillVal_Bool)(nil),
	}
}

type ConnectResponse struct {
	ServicePath          string   `protobuf:"bytes,1,opt,name=service_path,json=servicePath,proto3" json:"service_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectResponse) Reset()         { *m = ConnectResponse{} }
func (m *ConnectResponse) String() string { return proto.CompactTextString(m) }
func (*ConnectResponse) ProtoMessage()    {}
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_14343df069b9efbf, []int{2}
}

func (m *ConnectResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectResponse.Unmarshal(m, b)
}
func (m *ConnectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectResponse.Marshal(b, m, deterministic)
}
func (m *ConnectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectResponse.Merge(m, src)
}
func (m *ConnectResponse) XXX_Size() int {
	return xxx_messageInfo_ConnectResponse.Size(m)
}
func (m *ConnectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectResponse proto.InternalMessageInfo

func (m *ConnectResponse) GetServicePath() string {
	if m != nil {
		return m.ServicePath
	}
	return ""
}

type DisconnectRequest struct {
	ServicePath          string   `protobuf:"bytes,1,opt,name=service_path,json=servicePath,proto3" json:"service_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DisconnectRequest) Reset()         { *m = DisconnectRequest{} }
func (m *DisconnectRequest) String() string { return proto.CompactTextString(m) }
func (*DisconnectRequest) ProtoMessage()    {}
func (*DisconnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_14343df069b9efbf, []int{3}
}

func (m *DisconnectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DisconnectRequest.Unmarshal(m, b)
}
func (m *DisconnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DisconnectRequest.Marshal(b, m, deterministic)
}
func (m *DisconnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisconnectRequest.Merge(m, src)
}
func (m *DisconnectRequest) XXX_Size() int {
	return xxx_messageInfo_DisconnectRequest.Size(m)
}
func (m *DisconnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DisconnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DisconnectRequest proto.InternalMessageInfo

func (m *DisconnectRequest) GetServicePath() string {
	if m != nil {
		return m.ServicePath
	}
	return ""
}

type DeleteEntriesForSSIDRequest struct {
	Ssid                 string   `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteEntriesForSSIDRequest) Reset()         { *m = DeleteEntriesForSSIDRequest{} }
func (m *DeleteEntriesForSSIDRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteEntriesForSSIDRequest) ProtoMessage()    {}
func (*DeleteEntriesForSSIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_14343df069b9efbf, []int{4}
}

func (m *DeleteEntriesForSSIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteEntriesForSSIDRequest.Unmarshal(m, b)
}
func (m *DeleteEntriesForSSIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteEntriesForSSIDRequest.Marshal(b, m, deterministic)
}
func (m *DeleteEntriesForSSIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteEntriesForSSIDRequest.Merge(m, src)
}
func (m *DeleteEntriesForSSIDRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteEntriesForSSIDRequest.Size(m)
}
func (m *DeleteEntriesForSSIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteEntriesForSSIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteEntriesForSSIDRequest proto.InternalMessageInfo

func (m *DeleteEntriesForSSIDRequest) GetSsid() string {
	if m != nil {
		return m.Ssid
	}
	return ""
}

func init() {
	proto.RegisterType((*ConnectRequest)(nil), "tast.cros.network.ConnectRequest")
	proto.RegisterMapType((map[string]*ShillVal)(nil), "tast.cros.network.ConnectRequest.ShillpropsEntry")
	proto.RegisterType((*ShillVal)(nil), "tast.cros.network.ShillVal")
	proto.RegisterType((*ConnectResponse)(nil), "tast.cros.network.ConnectResponse")
	proto.RegisterType((*DisconnectRequest)(nil), "tast.cros.network.DisconnectRequest")
	proto.RegisterType((*DeleteEntriesForSSIDRequest)(nil), "tast.cros.network.DeleteEntriesForSSIDRequest")
}

func init() { proto.RegisterFile("wifi.proto", fileDescriptor_14343df069b9efbf) }

var fileDescriptor_14343df069b9efbf = []byte{
	// 442 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x4d, 0xe2, 0x14, 0xc2, 0xa4, 0x6a, 0xe9, 0xa8, 0x42, 0x91, 0x73, 0x49, 0xad, 0x22, 0x72,
	0x5a, 0x2b, 0x01, 0x21, 0x04, 0xb7, 0x92, 0xa2, 0x20, 0x71, 0x00, 0x5b, 0x02, 0xa9, 0x97, 0xe0,
	0x38, 0x93, 0x7a, 0x55, 0xc7, 0x6b, 0x76, 0xd6, 0xa9, 0xf2, 0x33, 0x38, 0xf0, 0x7f, 0x91, 0x3f,
	0x1a, 0x28, 0x75, 0x43, 0x6f, 0x33, 0xb3, 0xf3, 0xde, 0xbe, 0x37, 0x33, 0x00, 0xd7, 0x72, 0x29,
	0x45, 0xaa, 0x95, 0x51, 0x78, 0x64, 0x02, 0x36, 0x22, 0xd4, 0x8a, 0x45, 0x42, 0xe6, 0x5a, 0xe9,
	0x2b, 0xbb, 0x7f, 0xa9, 0xd4, 0x65, 0x4c, 0x6e, 0xd1, 0x30, 0xcf, 0x96, 0x2e, 0xad, 0x52, 0xb3,
	0x29, 0xfb, 0x9d, 0x5f, 0x2d, 0x38, 0x78, 0xaf, 0x92, 0x84, 0x42, 0xe3, 0xd1, 0x8f, 0x8c, 0xd8,
	0x20, 0x42, 0x9b, 0x59, 0x2e, 0x7a, 0xcd, 0x41, 0x73, 0xf8, 0xc4, 0x2b, 0x62, 0x3c, 0x85, 0x03,
	0xc9, 0xb3, 0x3c, 0x9c, 0x45, 0x72, 0xb1, 0xa0, 0xa4, 0xd7, 0x1a, 0x34, 0x87, 0x1d, 0x6f, 0x5f,
	0xb2, 0xcf, 0x72, 0x31, 0x2d, 0x6a, 0x68, 0x43, 0x87, 0x29, 0xcc, 0xb4, 0x34, 0x9b, 0x9e, 0x55,
	0xa0, 0xb7, 0x39, 0x7e, 0x01, 0xe0, 0x48, 0xc6, 0x71, 0xaa, 0x55, 0xca, 0xbd, 0xf6, 0xc0, 0x1a,
	0x76, 0xc7, 0x23, 0x71, 0x47, 0xad, 0xb8, 0x2d, 0x46, 0xf8, 0x5b, 0xcc, 0x79, 0x62, 0xf4, 0xc6,
	0xfb, 0x8b, 0xc4, 0xbe, 0x80, 0xc3, 0x7f, 0x9e, 0xf1, 0x29, 0x58, 0x57, 0xb4, 0xa9, 0xa4, 0xe7,
	0x21, 0x8e, 0x60, 0x6f, 0x1d, 0xc4, 0x19, 0x15, 0x82, 0xbb, 0xe3, 0x7e, 0xcd, 0x97, 0x05, 0xc9,
	0xd7, 0x20, 0xf6, 0xca, 0xce, 0xb7, 0xad, 0x37, 0x4d, 0xe7, 0x1d, 0x74, 0x6e, 0xca, 0x88, 0x60,
	0xb1, 0xd1, 0x25, 0xe9, 0xb4, 0xe1, 0xe5, 0x09, 0x1e, 0x43, 0x7b, 0xae, 0x54, 0x5c, 0x8e, 0x61,
	0xda, 0xf0, 0x8a, 0xec, 0x6c, 0x0f, 0xac, 0x75, 0x10, 0x3b, 0xaf, 0xe0, 0x70, 0x6b, 0x83, 0x53,
	0x95, 0x30, 0xe1, 0x09, 0xec, 0x33, 0xe9, 0xb5, 0x0c, 0x69, 0x96, 0x06, 0x26, 0xaa, 0x14, 0x76,
	0xab, 0xda, 0xe7, 0xc0, 0x44, 0xce, 0x6b, 0x38, 0x9a, 0x48, 0x0e, 0x6f, 0x2f, 0xe3, 0x01, 0xb8,
	0x11, 0xf4, 0x27, 0x14, 0x93, 0xa1, 0x7c, 0x04, 0x92, 0xf8, 0x83, 0xd2, 0xbe, 0xff, 0x71, 0xb2,
	0x63, 0x9d, 0xe3, 0x9f, 0x2d, 0xe8, 0x7e, 0x93, 0x4b, 0xe9, 0x97, 0x34, 0xe8, 0xc1, 0xe3, 0x4a,
	0x30, 0x9e, 0xfc, 0x77, 0x27, 0xb6, 0xb3, 0xab, 0xa5, 0xf4, 0xeb, 0x34, 0xf0, 0x13, 0xc0, 0x1f,
	0x3b, 0x78, 0x5a, 0x83, 0xb9, 0xe3, 0xd6, 0x7e, 0x26, 0xca, 0x5b, 0x15, 0x37, 0xb7, 0x2a, 0xce,
	0xf3, 0x5b, 0x75, 0x1a, 0xf8, 0x1d, 0x8e, 0xeb, 0x4c, 0xa2, 0xa8, 0xe3, 0xbd, 0x7f, 0x1a, 0xf7,
	0xff, 0x70, 0xf6, 0xe2, 0xe2, 0x79, 0x18, 0x69, 0xb5, 0x92, 0xd9, 0x4a, 0xb1, 0x9b, 0xb3, 0xba,
	0xd5, 0x94, 0xd9, 0xcd, 0xe9, 0xdd, 0x8a, 0x7e, 0xfe, 0xa8, 0x80, 0xbe, 0xfc, 0x1d, 0x00, 0x00,
	0xff, 0xff, 0x61, 0x08, 0x57, 0x60, 0x77, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WifiServiceClient is the client API for WifiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WifiServiceClient interface {
	// Connect attempts to connect WiFi network.
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
	// Disconnect attempts to disconnect from a service.
	Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// DeleteEntriesForSSID deletes all WiFi profile entries with the given SSID.
	DeleteEntriesForSSID(ctx context.Context, in *DeleteEntriesForSSIDRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type wifiServiceClient struct {
	cc *grpc.ClientConn
}

func NewWifiServiceClient(cc *grpc.ClientConn) WifiServiceClient {
	return &wifiServiceClient{cc}
}

func (c *wifiServiceClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiServiceClient) DeleteEntriesForSSID(ctx context.Context, in *DeleteEntriesForSSIDRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.WifiService/DeleteEntriesForSSID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WifiServiceServer is the server API for WifiService service.
type WifiServiceServer interface {
	// Connect attempts to connect WiFi network.
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	// Disconnect attempts to disconnect from a service.
	Disconnect(context.Context, *DisconnectRequest) (*empty.Empty, error)
	// DeleteEntriesForSSID deletes all WiFi profile entries with the given SSID.
	DeleteEntriesForSSID(context.Context, *DeleteEntriesForSSIDRequest) (*empty.Empty, error)
}

// UnimplementedWifiServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWifiServiceServer struct {
}

func (*UnimplementedWifiServiceServer) Connect(ctx context.Context, req *ConnectRequest) (*ConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedWifiServiceServer) Disconnect(ctx context.Context, req *DisconnectRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (*UnimplementedWifiServiceServer) DeleteEntriesForSSID(ctx context.Context, req *DeleteEntriesForSSIDRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntriesForSSID not implemented")
}

func RegisterWifiServiceServer(s *grpc.Server, srv WifiServiceServer) {
	s.RegisterService(&_WifiService_serviceDesc, srv)
}

func _WifiService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).Disconnect(ctx, req.(*DisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiService_DeleteEntriesForSSID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntriesForSSIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).DeleteEntriesForSSID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.WifiService/DeleteEntriesForSSID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).DeleteEntriesForSSID(ctx, req.(*DeleteEntriesForSSIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WifiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.network.WifiService",
	HandlerType: (*WifiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _WifiService_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _WifiService_Disconnect_Handler,
		},
		{
			MethodName: "DeleteEntriesForSSID",
			Handler:    _WifiService_DeleteEntriesForSSID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wifi.proto",
}
