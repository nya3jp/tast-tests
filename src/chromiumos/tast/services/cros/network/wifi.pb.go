// Code generated by protoc-gen-go. DO NOT EDIT.
// source: wifi.proto

package network

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Config struct {
	Ssid                 string   `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
	Hidden               bool     `protobuf:"varint,2,opt,name=hidden,proto3" json:"hidden,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_14343df069b9efbf, []int{0}
}

func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetSsid() string {
	if m != nil {
		return m.Ssid
	}
	return ""
}

func (m *Config) GetHidden() bool {
	if m != nil {
		return m.Hidden
	}
	return false
}

type Service struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()    {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_14343df069b9efbf, []int{1}
}

func (m *Service) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service.Unmarshal(m, b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service.Marshal(b, m, deterministic)
}
func (m *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(m, src)
}
func (m *Service) XXX_Size() int {
	return xxx_messageInfo_Service.Size(m)
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

func (m *Service) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type SSID struct {
	Ssid                 string   `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SSID) Reset()         { *m = SSID{} }
func (m *SSID) String() string { return proto.CompactTextString(m) }
func (*SSID) ProtoMessage()    {}
func (*SSID) Descriptor() ([]byte, []int) {
	return fileDescriptor_14343df069b9efbf, []int{2}
}

func (m *SSID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSID.Unmarshal(m, b)
}
func (m *SSID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSID.Marshal(b, m, deterministic)
}
func (m *SSID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSID.Merge(m, src)
}
func (m *SSID) XXX_Size() int {
	return xxx_messageInfo_SSID.Size(m)
}
func (m *SSID) XXX_DiscardUnknown() {
	xxx_messageInfo_SSID.DiscardUnknown(m)
}

var xxx_messageInfo_SSID proto.InternalMessageInfo

func (m *SSID) GetSsid() string {
	if m != nil {
		return m.Ssid
	}
	return ""
}

type Iface struct {
	Iface                string   `protobuf:"bytes,1,opt,name=iface,proto3" json:"iface,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Iface) Reset()         { *m = Iface{} }
func (m *Iface) String() string { return proto.CompactTextString(m) }
func (*Iface) ProtoMessage()    {}
func (*Iface) Descriptor() ([]byte, []int) {
	return fileDescriptor_14343df069b9efbf, []int{3}
}

func (m *Iface) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Iface.Unmarshal(m, b)
}
func (m *Iface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Iface.Marshal(b, m, deterministic)
}
func (m *Iface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Iface.Merge(m, src)
}
func (m *Iface) XXX_Size() int {
	return xxx_messageInfo_Iface.Size(m)
}
func (m *Iface) XXX_DiscardUnknown() {
	xxx_messageInfo_Iface.DiscardUnknown(m)
}

var xxx_messageInfo_Iface proto.InternalMessageInfo

func (m *Iface) GetIface() string {
	if m != nil {
		return m.Iface
	}
	return ""
}

func init() {
	proto.RegisterType((*Config)(nil), "tast.cros.network.Config")
	proto.RegisterType((*Service)(nil), "tast.cros.network.Service")
	proto.RegisterType((*SSID)(nil), "tast.cros.network.SSID")
	proto.RegisterType((*Iface)(nil), "tast.cros.network.Iface")
}

func init() { proto.RegisterFile("wifi.proto", fileDescriptor_14343df069b9efbf) }

var fileDescriptor_14343df069b9efbf = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xcf, 0x6b, 0x3a, 0x31,
	0x10, 0xc5, 0x55, 0xfc, 0xf1, 0x75, 0x6e, 0xdf, 0x20, 0xd6, 0x6e, 0x11, 0x24, 0x50, 0xea, 0x29,
	0x81, 0xb6, 0xf7, 0x82, 0xae, 0x85, 0xbd, 0xba, 0x87, 0x42, 0x6f, 0x1a, 0x67, 0x75, 0xa8, 0x26,
	0x92, 0xc4, 0x4a, 0xff, 0x95, 0xfe, 0xb5, 0x25, 0xd9, 0xf5, 0xd4, 0xad, 0xb7, 0x19, 0xe6, 0xbd,
	0x0f, 0xf3, 0x1e, 0xc0, 0x99, 0x0a, 0x12, 0x47, 0x6b, 0xbc, 0x61, 0xff, 0xfd, 0xca, 0x79, 0xa1,
	0xac, 0x71, 0x42, 0xa3, 0x3f, 0x1b, 0xfb, 0x91, 0xdc, 0x6d, 0x8d, 0xd9, 0xee, 0x51, 0x46, 0xc1,
	0xfa, 0x54, 0x48, 0x3c, 0x1c, 0xfd, 0x57, 0xa9, 0xe7, 0xcf, 0xd0, 0x9d, 0x1b, 0x5d, 0xd0, 0x96,
	0x31, 0x68, 0x3b, 0x47, 0x9b, 0x51, 0x73, 0xd2, 0x9c, 0xf6, 0x97, 0x71, 0x66, 0x43, 0xe8, 0xee,
	0x68, 0xb3, 0x41, 0x3d, 0x6a, 0x4d, 0x9a, 0xd3, 0x7f, 0xcb, 0x6a, 0xe3, 0x63, 0xe8, 0xe5, 0x68,
	0x3f, 0x49, 0x61, 0xb0, 0x1d, 0x57, 0x7e, 0x77, 0xb1, 0x85, 0x99, 0x27, 0xd0, 0xce, 0xf3, 0x2c,
	0xad, 0x43, 0xf2, 0x31, 0x74, 0xb2, 0x62, 0xa5, 0x90, 0x0d, 0xa0, 0x43, 0x61, 0xa8, 0xae, 0xe5,
	0xf2, 0xf8, 0xdd, 0x82, 0xf6, 0x1b, 0x15, 0xc4, 0x66, 0xd0, 0x9b, 0x1b, 0xad, 0x51, 0x79, 0x76,
	0x2b, 0x7e, 0x85, 0x12, 0xe5, 0xd3, 0x49, 0x52, 0x73, 0xaa, 0x3e, 0xe3, 0x0d, 0x36, 0x03, 0x48,
	0xc9, 0xa9, 0x0a, 0x73, 0x45, 0x9b, 0x0c, 0x45, 0x59, 0x92, 0xb8, 0x94, 0x24, 0x16, 0xa1, 0x24,
	0xde, 0x60, 0x19, 0x0c, 0x52, 0xdc, 0xa3, 0xc7, 0x85, 0xf6, 0x96, 0xd0, 0xbd, 0x1a, 0x1b, 0xb3,
	0xdd, 0xd4, 0xd1, 0xf2, 0x2c, 0xbd, 0x82, 0x7a, 0x81, 0x7e, 0xa6, 0x3d, 0xda, 0x18, 0xff, 0x0f,
	0x59, 0x32, 0xaa, 0xe1, 0xc6, 0xc2, 0x78, 0x63, 0xf6, 0xf0, 0x7e, 0xaf, 0x76, 0xd6, 0x1c, 0xe8,
	0x74, 0x30, 0x4e, 0x06, 0x9d, 0x74, 0x65, 0x00, 0x27, 0x83, 0x41, 0x56, 0x86, 0x75, 0x37, 0x42,
	0x9f, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x0e, 0x98, 0xde, 0x1a, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WifiClient is the client API for Wifi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WifiClient interface {
	// Connect attempts to connect WiFi network.
	Connect(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Service, error)
	// Disconnect attempts to disconnect from a service.
	Disconnect(ctx context.Context, in *Service, opts ...grpc.CallOption) (*empty.Empty, error)
	// DeleteEntriesForSSID deletes all WiFi profile entries for a given ssid.
	DeleteEntriesForSSID(ctx context.Context, in *SSID, opts ...grpc.CallOption) (*empty.Empty, error)
	// Interface returns the WiFi device interface name (e.g., wlan0).
	Interface(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Iface, error)
}

type wifiClient struct {
	cc *grpc.ClientConn
}

func NewWifiClient(cc *grpc.ClientConn) WifiClient {
	return &wifiClient{cc}
}

func (c *wifiClient) Connect(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := c.cc.Invoke(ctx, "/tast.cros.network.Wifi/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiClient) Disconnect(ctx context.Context, in *Service, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.Wifi/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiClient) DeleteEntriesForSSID(ctx context.Context, in *SSID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.Wifi/DeleteEntriesForSSID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiClient) Interface(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Iface, error) {
	out := new(Iface)
	err := c.cc.Invoke(ctx, "/tast.cros.network.Wifi/Interface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WifiServer is the server API for Wifi service.
type WifiServer interface {
	// Connect attempts to connect WiFi network.
	Connect(context.Context, *Config) (*Service, error)
	// Disconnect attempts to disconnect from a service.
	Disconnect(context.Context, *Service) (*empty.Empty, error)
	// DeleteEntriesForSSID deletes all WiFi profile entries for a given ssid.
	DeleteEntriesForSSID(context.Context, *SSID) (*empty.Empty, error)
	// Interface returns the WiFi device interface name (e.g., wlan0).
	Interface(context.Context, *empty.Empty) (*Iface, error)
}

// UnimplementedWifiServer can be embedded to have forward compatible implementations.
type UnimplementedWifiServer struct {
}

func (*UnimplementedWifiServer) Connect(ctx context.Context, req *Config) (*Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedWifiServer) Disconnect(ctx context.Context, req *Service) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (*UnimplementedWifiServer) DeleteEntriesForSSID(ctx context.Context, req *SSID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntriesForSSID not implemented")
}
func (*UnimplementedWifiServer) Interface(ctx context.Context, req *empty.Empty) (*Iface, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Interface not implemented")
}

func RegisterWifiServer(s *grpc.Server, srv WifiServer) {
	s.RegisterService(&_Wifi_serviceDesc, srv)
}

func _Wifi_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.Wifi/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServer).Connect(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wifi_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.Wifi/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServer).Disconnect(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wifi_DeleteEntriesForSSID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServer).DeleteEntriesForSSID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.Wifi/DeleteEntriesForSSID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServer).DeleteEntriesForSSID(ctx, req.(*SSID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wifi_Interface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServer).Interface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.Wifi/Interface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServer).Interface(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Wifi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.network.Wifi",
	HandlerType: (*WifiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Wifi_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _Wifi_Disconnect_Handler,
		},
		{
			MethodName: "DeleteEntriesForSSID",
			Handler:    _Wifi_DeleteEntriesForSSID_Handler,
		},
		{
			MethodName: "Interface",
			Handler:    _Wifi_Interface_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wifi.proto",
}
