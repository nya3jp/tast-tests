// Copyright 2021 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: diag_service.proto

package network

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RunRoutineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the routine to run.
	Routine string `protobuf:"bytes,1,opt,name=routine,proto3" json:"routine,omitempty"`
}

func (x *RunRoutineRequest) Reset() {
	*x = RunRoutineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diag_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunRoutineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRoutineRequest) ProtoMessage() {}

func (x *RunRoutineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diag_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRoutineRequest.ProtoReflect.Descriptor instead.
func (*RunRoutineRequest) Descriptor() ([]byte, []int) {
	return file_diag_service_proto_rawDescGZIP(), []int{0}
}

func (x *RunRoutineRequest) GetRoutine() string {
	if x != nil {
		return x.Routine
	}
	return ""
}

type RoutineResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The verdict of running the routine.
	Verdict int32 `protobuf:"varint,1,opt,name=verdict,proto3" json:"verdict,omitempty"`
	// List of routine problems if they exist.
	Problems []uint32 `protobuf:"varint,2,rep,packed,name=problems,proto3" json:"problems,omitempty"`
}

func (x *RoutineResult) Reset() {
	*x = RoutineResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diag_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutineResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutineResult) ProtoMessage() {}

func (x *RoutineResult) ProtoReflect() protoreflect.Message {
	mi := &file_diag_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutineResult.ProtoReflect.Descriptor instead.
func (*RoutineResult) Descriptor() ([]byte, []int) {
	return file_diag_service_proto_rawDescGZIP(), []int{1}
}

func (x *RoutineResult) GetVerdict() int32 {
	if x != nil {
		return x.Verdict
	}
	return 0
}

func (x *RoutineResult) GetProblems() []uint32 {
	if x != nil {
		return x.Problems
	}
	return nil
}

var File_diag_service_proto protoreflect.FileDescriptor

var file_diag_service_proto_rawDesc = []byte{
	0x0a, 0x12, 0x64, 0x69, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2d, 0x0a, 0x11, 0x52, 0x75, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x65, 0x22, 0x45, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x32, 0xe5, 0x01, 0x0a, 0x0e, 0x4e,
	0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a,
	0x0c, 0x53, 0x65, 0x74, 0x75, 0x70, 0x44, 0x69, 0x61, 0x67, 0x41, 0x50, 0x49, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x39, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0a, 0x52, 0x75,
	0x6e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x12, 0x24, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x52, 0x75, 0x6e,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x42, 0x27, 0x5a, 0x25, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73,
	0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63,
	0x72, 0x6f, 0x73, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_diag_service_proto_rawDescOnce sync.Once
	file_diag_service_proto_rawDescData = file_diag_service_proto_rawDesc
)

func file_diag_service_proto_rawDescGZIP() []byte {
	file_diag_service_proto_rawDescOnce.Do(func() {
		file_diag_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_diag_service_proto_rawDescData)
	})
	return file_diag_service_proto_rawDescData
}

var file_diag_service_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_diag_service_proto_goTypes = []interface{}{
	(*RunRoutineRequest)(nil), // 0: tast.cros.network.RunRoutineRequest
	(*RoutineResult)(nil),     // 1: tast.cros.network.RoutineResult
	(*empty.Empty)(nil),       // 2: google.protobuf.Empty
}
var file_diag_service_proto_depIdxs = []int32{
	2, // 0: tast.cros.network.NetDiagService.SetupDiagAPI:input_type -> google.protobuf.Empty
	2, // 1: tast.cros.network.NetDiagService.Close:input_type -> google.protobuf.Empty
	0, // 2: tast.cros.network.NetDiagService.RunRoutine:input_type -> tast.cros.network.RunRoutineRequest
	2, // 3: tast.cros.network.NetDiagService.SetupDiagAPI:output_type -> google.protobuf.Empty
	2, // 4: tast.cros.network.NetDiagService.Close:output_type -> google.protobuf.Empty
	1, // 5: tast.cros.network.NetDiagService.RunRoutine:output_type -> tast.cros.network.RoutineResult
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_diag_service_proto_init() }
func file_diag_service_proto_init() {
	if File_diag_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_diag_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunRoutineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diag_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutineResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_diag_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_diag_service_proto_goTypes,
		DependencyIndexes: file_diag_service_proto_depIdxs,
		MessageInfos:      file_diag_service_proto_msgTypes,
	}.Build()
	File_diag_service_proto = out.File
	file_diag_service_proto_rawDesc = nil
	file_diag_service_proto_goTypes = nil
	file_diag_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NetDiagServiceClient is the client API for NetDiagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetDiagServiceClient interface {
	// SetupDiagAPI creates a new chrome instance and launches the connectivity
	// diagnostics application to be used for running the network diagnostics.
	SetupDiagAPI(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Close will close the connectivity diagnostics application and the
	// underlying Chrome instance.
	Close(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// RunRoutine will run the specified network diagnostic routine and return the
	// result.
	RunRoutine(ctx context.Context, in *RunRoutineRequest, opts ...grpc.CallOption) (*RoutineResult, error)
}

type netDiagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetDiagServiceClient(cc grpc.ClientConnInterface) NetDiagServiceClient {
	return &netDiagServiceClient{cc}
}

func (c *netDiagServiceClient) SetupDiagAPI(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.NetDiagService/SetupDiagAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netDiagServiceClient) Close(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.NetDiagService/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netDiagServiceClient) RunRoutine(ctx context.Context, in *RunRoutineRequest, opts ...grpc.CallOption) (*RoutineResult, error) {
	out := new(RoutineResult)
	err := c.cc.Invoke(ctx, "/tast.cros.network.NetDiagService/RunRoutine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetDiagServiceServer is the server API for NetDiagService service.
type NetDiagServiceServer interface {
	// SetupDiagAPI creates a new chrome instance and launches the connectivity
	// diagnostics application to be used for running the network diagnostics.
	SetupDiagAPI(context.Context, *empty.Empty) (*empty.Empty, error)
	// Close will close the connectivity diagnostics application and the
	// underlying Chrome instance.
	Close(context.Context, *empty.Empty) (*empty.Empty, error)
	// RunRoutine will run the specified network diagnostic routine and return the
	// result.
	RunRoutine(context.Context, *RunRoutineRequest) (*RoutineResult, error)
}

// UnimplementedNetDiagServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNetDiagServiceServer struct {
}

func (*UnimplementedNetDiagServiceServer) SetupDiagAPI(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupDiagAPI not implemented")
}
func (*UnimplementedNetDiagServiceServer) Close(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedNetDiagServiceServer) RunRoutine(context.Context, *RunRoutineRequest) (*RoutineResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunRoutine not implemented")
}

func RegisterNetDiagServiceServer(s *grpc.Server, srv NetDiagServiceServer) {
	s.RegisterService(&_NetDiagService_serviceDesc, srv)
}

func _NetDiagService_SetupDiagAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetDiagServiceServer).SetupDiagAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.NetDiagService/SetupDiagAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetDiagServiceServer).SetupDiagAPI(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetDiagService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetDiagServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.NetDiagService/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetDiagServiceServer).Close(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetDiagService_RunRoutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRoutineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetDiagServiceServer).RunRoutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.NetDiagService/RunRoutine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetDiagServiceServer).RunRoutine(ctx, req.(*RunRoutineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetDiagService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.network.NetDiagService",
	HandlerType: (*NetDiagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetupDiagAPI",
			Handler:    _NetDiagService_SetupDiagAPI_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _NetDiagService_Close_Handler,
		},
		{
			MethodName: "RunRoutine",
			Handler:    _NetDiagService_RunRoutine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "diag_service.proto",
}
