// Copyright 2021 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: chrome_startup_service.proto

package ui

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type NewChromeLoginRequest_LoginMode int32

const (
	NewChromeLoginRequest_LOGIN_MODE_UNSPECIFIED NewChromeLoginRequest_LoginMode = 0
	NewChromeLoginRequest_LOGIN_MODE_NO_LOGIN    NewChromeLoginRequest_LoginMode = 1
	NewChromeLoginRequest_LOGIN_MODE_FAKE_LOGIN  NewChromeLoginRequest_LoginMode = 2
	NewChromeLoginRequest_LOGIN_MODE_GAIA_LOGIN  NewChromeLoginRequest_LoginMode = 3
	NewChromeLoginRequest_LOGIN_MODE_GUEST_LOGIN NewChromeLoginRequest_LoginMode = 4
)

// Enum value maps for NewChromeLoginRequest_LoginMode.
var (
	NewChromeLoginRequest_LoginMode_name = map[int32]string{
		0: "LOGIN_MODE_UNSPECIFIED",
		1: "LOGIN_MODE_NO_LOGIN",
		2: "LOGIN_MODE_FAKE_LOGIN",
		3: "LOGIN_MODE_GAIA_LOGIN",
		4: "LOGIN_MODE_GUEST_LOGIN",
	}
	NewChromeLoginRequest_LoginMode_value = map[string]int32{
		"LOGIN_MODE_UNSPECIFIED": 0,
		"LOGIN_MODE_NO_LOGIN":    1,
		"LOGIN_MODE_FAKE_LOGIN":  2,
		"LOGIN_MODE_GAIA_LOGIN":  3,
		"LOGIN_MODE_GUEST_LOGIN": 4,
	}
)

func (x NewChromeLoginRequest_LoginMode) Enum() *NewChromeLoginRequest_LoginMode {
	p := new(NewChromeLoginRequest_LoginMode)
	*p = x
	return p
}

func (x NewChromeLoginRequest_LoginMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NewChromeLoginRequest_LoginMode) Descriptor() protoreflect.EnumDescriptor {
	return file_chrome_startup_service_proto_enumTypes[0].Descriptor()
}

func (NewChromeLoginRequest_LoginMode) Type() protoreflect.EnumType {
	return &file_chrome_startup_service_proto_enumTypes[0]
}

func (x NewChromeLoginRequest_LoginMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NewChromeLoginRequest_LoginMode.Descriptor instead.
func (NewChromeLoginRequest_LoginMode) EnumDescriptor() ([]byte, []int) {
	return file_chrome_startup_service_proto_rawDescGZIP(), []int{0, 0}
}

// NewChromeLoginRequest to login to Chrome with configurable GAIA credentials.
type NewChromeLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username        string                             `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password        string                             `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	KeepState       bool                               `protobuf:"varint,3,opt,name=keep_state,json=keepState,proto3" json:"keep_state,omitempty"`
	TryReuseSession bool                               `protobuf:"varint,4,opt,name=try_reuse_session,json=tryReuseSession,proto3" json:"try_reuse_session,omitempty"`
	LoginMode       NewChromeLoginRequest_LoginMode    `protobuf:"varint,5,opt,name=login_mode,json=loginMode,proto3,enum=tast.cros.ui.NewChromeLoginRequest_LoginMode" json:"login_mode,omitempty"`
	EnableFeatures  []string                           `protobuf:"bytes,6,rep,name=enable_features,json=enableFeatures,proto3" json:"enable_features,omitempty"`
	DisableFeatures []string                           `protobuf:"bytes,7,rep,name=disable_features,json=disableFeatures,proto3" json:"disable_features,omitempty"`
	ExtraArgs       []string                           `protobuf:"bytes,8,rep,name=extra_args,json=extraArgs,proto3" json:"extra_args,omitempty"`
	Credentials     *NewChromeLoginRequest_Credentials `protobuf:"bytes,9,opt,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *NewChromeLoginRequest) Reset() {
	*x = NewChromeLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chrome_startup_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewChromeLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewChromeLoginRequest) ProtoMessage() {}

func (x *NewChromeLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chrome_startup_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewChromeLoginRequest.ProtoReflect.Descriptor instead.
func (*NewChromeLoginRequest) Descriptor() ([]byte, []int) {
	return file_chrome_startup_service_proto_rawDescGZIP(), []int{0}
}

func (x *NewChromeLoginRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *NewChromeLoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *NewChromeLoginRequest) GetKeepState() bool {
	if x != nil {
		return x.KeepState
	}
	return false
}

func (x *NewChromeLoginRequest) GetTryReuseSession() bool {
	if x != nil {
		return x.TryReuseSession
	}
	return false
}

func (x *NewChromeLoginRequest) GetLoginMode() NewChromeLoginRequest_LoginMode {
	if x != nil {
		return x.LoginMode
	}
	return NewChromeLoginRequest_LOGIN_MODE_UNSPECIFIED
}

func (x *NewChromeLoginRequest) GetEnableFeatures() []string {
	if x != nil {
		return x.EnableFeatures
	}
	return nil
}

func (x *NewChromeLoginRequest) GetDisableFeatures() []string {
	if x != nil {
		return x.DisableFeatures
	}
	return nil
}

func (x *NewChromeLoginRequest) GetExtraArgs() []string {
	if x != nil {
		return x.ExtraArgs
	}
	return nil
}

func (x *NewChromeLoginRequest) GetCredentials() *NewChromeLoginRequest_Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type NewChromeLoginRequest_Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User is the user name of a user account. It is typically an email
	// address (e.g. example@gmail.com).
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// Pass is the password of a user account.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// GAIAID is a GAIA ID used on fake logins. If it is empty, an ID is
	// generated from the user name. The field is ignored on other type of
	// logins.
	GaiaId string `protobuf:"bytes,3,opt,name=gaia_id,json=gaiaId,proto3" json:"gaia_id,omitempty"`
	// Contact is an email address of a user who owns a test account.
	// When logging in with a test account, its contact user may be
	// notified of a login attempt and asked for approval.
	Contact string `protobuf:"bytes,4,opt,name=contact,proto3" json:"contact,omitempty"`
	// ParentUser is the user name of a parent account. It is used to
	// approve a login attempt when a child account is supervised by a
	// parent account.
	ParentUsername string `protobuf:"bytes,5,opt,name=parent_username,json=parentUsername,proto3" json:"parent_username,omitempty"`
	// ParentPass is the pass of a parent account. It is used to approve
	// a login attempt when a child account is supervised by a parent
	// account.
	ParentPassword string `protobuf:"bytes,6,opt,name=parent_password,json=parentPassword,proto3" json:"parent_password,omitempty"`
}

func (x *NewChromeLoginRequest_Credentials) Reset() {
	*x = NewChromeLoginRequest_Credentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chrome_startup_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewChromeLoginRequest_Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewChromeLoginRequest_Credentials) ProtoMessage() {}

func (x *NewChromeLoginRequest_Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_chrome_startup_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewChromeLoginRequest_Credentials.ProtoReflect.Descriptor instead.
func (*NewChromeLoginRequest_Credentials) Descriptor() ([]byte, []int) {
	return file_chrome_startup_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *NewChromeLoginRequest_Credentials) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *NewChromeLoginRequest_Credentials) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *NewChromeLoginRequest_Credentials) GetGaiaId() string {
	if x != nil {
		return x.GaiaId
	}
	return ""
}

func (x *NewChromeLoginRequest_Credentials) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *NewChromeLoginRequest_Credentials) GetParentUsername() string {
	if x != nil {
		return x.ParentUsername
	}
	return ""
}

func (x *NewChromeLoginRequest_Credentials) GetParentPassword() string {
	if x != nil {
		return x.ParentPassword
	}
	return ""
}

var File_chrome_startup_service_proto protoreflect.FileDescriptor

var file_chrome_startup_service_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x75, 0x69, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x06, 0x0a, 0x15, 0x4e, 0x65,
	0x77, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6b,
	0x65, 0x65, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x6b, 0x65, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72,
	0x79, 0x5f, 0x72, 0x65, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x74, 0x72, 0x79, 0x52, 0x65, 0x75, 0x73, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x74, 0x61, 0x73,
	0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x75, 0x69, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x41, 0x72, 0x67, 0x73, 0x12, 0x51, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x75, 0x69, 0x2e, 0x4e, 0x65, 0x77, 0x43,
	0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x1a, 0xca, 0x01, 0x0a, 0x0b, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x69, 0x61, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x4e, 0x4f, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x4f,
	0x47, 0x49, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x4b, 0x45, 0x5f, 0x4c, 0x4f,
	0x47, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x47, 0x41, 0x49, 0x41, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x03,
	0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x47,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x04, 0x32, 0xa8, 0x01, 0x0a,
	0x14, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x43, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x23, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x2e, 0x75, 0x69, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43,
	0x68, 0x72, 0x6f, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x22, 0x5a, 0x20, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x75, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_chrome_startup_service_proto_rawDescOnce sync.Once
	file_chrome_startup_service_proto_rawDescData = file_chrome_startup_service_proto_rawDesc
)

func file_chrome_startup_service_proto_rawDescGZIP() []byte {
	file_chrome_startup_service_proto_rawDescOnce.Do(func() {
		file_chrome_startup_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_chrome_startup_service_proto_rawDescData)
	})
	return file_chrome_startup_service_proto_rawDescData
}

var file_chrome_startup_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chrome_startup_service_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_chrome_startup_service_proto_goTypes = []interface{}{
	(NewChromeLoginRequest_LoginMode)(0),      // 0: tast.cros.ui.NewChromeLoginRequest.LoginMode
	(*NewChromeLoginRequest)(nil),             // 1: tast.cros.ui.NewChromeLoginRequest
	(*NewChromeLoginRequest_Credentials)(nil), // 2: tast.cros.ui.NewChromeLoginRequest.Credentials
	(*empty.Empty)(nil),                       // 3: google.protobuf.Empty
}
var file_chrome_startup_service_proto_depIdxs = []int32{
	0, // 0: tast.cros.ui.NewChromeLoginRequest.login_mode:type_name -> tast.cros.ui.NewChromeLoginRequest.LoginMode
	2, // 1: tast.cros.ui.NewChromeLoginRequest.credentials:type_name -> tast.cros.ui.NewChromeLoginRequest.Credentials
	1, // 2: tast.cros.ui.ChromeStartupService.NewChromeLogin:input_type -> tast.cros.ui.NewChromeLoginRequest
	3, // 3: tast.cros.ui.ChromeStartupService.CloseChrome:input_type -> google.protobuf.Empty
	3, // 4: tast.cros.ui.ChromeStartupService.NewChromeLogin:output_type -> google.protobuf.Empty
	3, // 5: tast.cros.ui.ChromeStartupService.CloseChrome:output_type -> google.protobuf.Empty
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_chrome_startup_service_proto_init() }
func file_chrome_startup_service_proto_init() {
	if File_chrome_startup_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chrome_startup_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewChromeLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chrome_startup_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewChromeLoginRequest_Credentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chrome_startup_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chrome_startup_service_proto_goTypes,
		DependencyIndexes: file_chrome_startup_service_proto_depIdxs,
		EnumInfos:         file_chrome_startup_service_proto_enumTypes,
		MessageInfos:      file_chrome_startup_service_proto_msgTypes,
	}.Build()
	File_chrome_startup_service_proto = out.File
	file_chrome_startup_service_proto_rawDesc = nil
	file_chrome_startup_service_proto_goTypes = nil
	file_chrome_startup_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChromeStartupServiceClient is the client API for ChromeStartupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChromeStartupServiceClient interface {
	// NewChromeLogin logs into a Chrome session.
	// Close must be called later to clean up the associated resources.
	NewChromeLogin(ctx context.Context, in *NewChromeLoginRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Close releases the resources obtained by New.
	CloseChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type chromeStartupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChromeStartupServiceClient(cc grpc.ClientConnInterface) ChromeStartupServiceClient {
	return &chromeStartupServiceClient{cc}
}

func (c *chromeStartupServiceClient) NewChromeLogin(ctx context.Context, in *NewChromeLoginRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.ChromeStartupService/NewChromeLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chromeStartupServiceClient) CloseChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.ChromeStartupService/CloseChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChromeStartupServiceServer is the server API for ChromeStartupService service.
type ChromeStartupServiceServer interface {
	// NewChromeLogin logs into a Chrome session.
	// Close must be called later to clean up the associated resources.
	NewChromeLogin(context.Context, *NewChromeLoginRequest) (*empty.Empty, error)
	// Close releases the resources obtained by New.
	CloseChrome(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedChromeStartupServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChromeStartupServiceServer struct {
}

func (*UnimplementedChromeStartupServiceServer) NewChromeLogin(context.Context, *NewChromeLoginRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewChromeLogin not implemented")
}
func (*UnimplementedChromeStartupServiceServer) CloseChrome(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseChrome not implemented")
}

func RegisterChromeStartupServiceServer(s *grpc.Server, srv ChromeStartupServiceServer) {
	s.RegisterService(&_ChromeStartupService_serviceDesc, srv)
}

func _ChromeStartupService_NewChromeLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewChromeLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChromeStartupServiceServer).NewChromeLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.ChromeStartupService/NewChromeLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChromeStartupServiceServer).NewChromeLogin(ctx, req.(*NewChromeLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChromeStartupService_CloseChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChromeStartupServiceServer).CloseChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.ChromeStartupService/CloseChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChromeStartupServiceServer).CloseChrome(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChromeStartupService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.ui.ChromeStartupService",
	HandlerType: (*ChromeStartupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewChromeLogin",
			Handler:    _ChromeStartupService_NewChromeLogin_Handler,
		},
		{
			MethodName: "CloseChrome",
			Handler:    _ChromeStartupService_CloseChrome_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chrome_startup_service.proto",
}
