// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google_meet_service.proto

package ui

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("google_meet_service.proto", fileDescriptor_51593086bdaedc4d) }

var fileDescriptor_51593086bdaedc4d = []byte{
	// 177 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8e, 0xb1, 0x0a, 0xc2, 0x30,
	0x10, 0x86, 0x37, 0x87, 0x52, 0x10, 0x3b, 0x08, 0xd6, 0x45, 0x7d, 0x80, 0x0b, 0xe8, 0x1b, 0x08,
	0x22, 0x0e, 0x2e, 0xba, 0x39, 0x58, 0xda, 0x70, 0xd6, 0x80, 0xf1, 0x6a, 0xee, 0x22, 0xf4, 0xed,
	0x25, 0x49, 0x85, 0x8e, 0xc7, 0xff, 0xff, 0xdf, 0x77, 0xd9, 0xa2, 0x25, 0x6a, 0x5f, 0x58, 0x59,
	0x44, 0xa9, 0x18, 0xdd, 0xd7, 0x68, 0x84, 0xce, 0x91, 0x50, 0x91, 0x4b, 0xcd, 0x02, 0xda, 0x11,
	0x83, 0x37, 0xe5, 0x32, 0x15, 0x55, 0xcc, 0x1a, 0xff, 0x50, 0x68, 0x3b, 0xe9, 0x53, 0xb5, 0x9c,
	0xc6, 0xb9, 0xf4, 0xdd, 0xb0, 0xdd, 0xde, 0xb3, 0xd9, 0x31, 0xf6, 0xcf, 0x88, 0x72, 0x4d, 0xd8,
	0xe2, 0x94, 0xe5, 0xf1, 0xd4, 0xf8, 0xae, 0x9d, 0xa1, 0x62, 0x0d, 0x63, 0x03, 0x8c, 0xb3, 0x0b,
	0x7e, 0x3c, 0xb2, 0x94, 0x73, 0x48, 0x5a, 0xf8, 0x6b, 0xe1, 0x10, 0xb4, 0xfb, 0xcd, 0x6d, 0xa5,
	0x9f, 0x8e, 0xac, 0xf1, 0x96, 0x58, 0x05, 0x8c, 0x1a, 0x9e, 0x67, 0x15, 0x78, 0xca, 0x9b, 0x66,
	0x12, 0x37, 0xbb, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2b, 0xe7, 0xdc, 0xc0, 0xe3, 0x00, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GoogleMeetServiceClient is the client API for GoogleMeetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GoogleMeetServiceClient interface {
	MeetScenario(ctx context.Context, in *MeetScenarioRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type googleMeetServiceClient struct {
	cc *grpc.ClientConn
}

func NewGoogleMeetServiceClient(cc *grpc.ClientConn) GoogleMeetServiceClient {
	return &googleMeetServiceClient{cc}
}

func (c *googleMeetServiceClient) MeetScenario(ctx context.Context, in *MeetScenarioRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.GoogleMeetService/MeetScenario", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoogleMeetServiceServer is the server API for GoogleMeetService service.
type GoogleMeetServiceServer interface {
	MeetScenario(context.Context, *MeetScenarioRequest) (*empty.Empty, error)
}

// UnimplementedGoogleMeetServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGoogleMeetServiceServer struct {
}

func (*UnimplementedGoogleMeetServiceServer) MeetScenario(ctx context.Context, req *MeetScenarioRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MeetScenario not implemented")
}

func RegisterGoogleMeetServiceServer(s *grpc.Server, srv GoogleMeetServiceServer) {
	s.RegisterService(&_GoogleMeetService_serviceDesc, srv)
}

func _GoogleMeetService_MeetScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeetScenarioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoogleMeetServiceServer).MeetScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.GoogleMeetService/MeetScenario",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoogleMeetServiceServer).MeetScenario(ctx, req.(*MeetScenarioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GoogleMeetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.ui.GoogleMeetService",
	HandlerType: (*GoogleMeetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MeetScenario",
			Handler:    _GoogleMeetService_MeetScenario_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google_meet_service.proto",
}
