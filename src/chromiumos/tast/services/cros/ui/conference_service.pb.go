// Code generated by protoc-gen-go. DO NOT EDIT.
// source: conference_service.proto

package ui

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MeetScenarioRequest struct {
	Tier                 string   `protobuf:"bytes,1,opt,name=tier,proto3" json:"tier,omitempty"`
	RoomSize             int64    `protobuf:"varint,2,opt,name=room_size,json=roomSize,proto3" json:"room_size,omitempty"`
	ExtendedDisplay      bool     `protobuf:"varint,3,opt,name=extended_display,json=extendedDisplay,proto3" json:"extended_display,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeetScenarioRequest) Reset()         { *m = MeetScenarioRequest{} }
func (m *MeetScenarioRequest) String() string { return proto.CompactTextString(m) }
func (*MeetScenarioRequest) ProtoMessage()    {}
func (*MeetScenarioRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_335a04ec370f1e0a, []int{0}
}

func (m *MeetScenarioRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeetScenarioRequest.Unmarshal(m, b)
}
func (m *MeetScenarioRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeetScenarioRequest.Marshal(b, m, deterministic)
}
func (m *MeetScenarioRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeetScenarioRequest.Merge(m, src)
}
func (m *MeetScenarioRequest) XXX_Size() int {
	return xxx_messageInfo_MeetScenarioRequest.Size(m)
}
func (m *MeetScenarioRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MeetScenarioRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MeetScenarioRequest proto.InternalMessageInfo

func (m *MeetScenarioRequest) GetTier() string {
	if m != nil {
		return m.Tier
	}
	return ""
}

func (m *MeetScenarioRequest) GetRoomSize() int64 {
	if m != nil {
		return m.RoomSize
	}
	return 0
}

func (m *MeetScenarioRequest) GetExtendedDisplay() bool {
	if m != nil {
		return m.ExtendedDisplay
	}
	return false
}

func init() {
	proto.RegisterType((*MeetScenarioRequest)(nil), "tast.cros.ui.MeetScenarioRequest")
}

func init() { proto.RegisterFile("conference_service.proto", fileDescriptor_335a04ec370f1e0a) }

var fileDescriptor_335a04ec370f1e0a = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x90, 0x3d, 0x4f, 0xc3, 0x30,
	0x10, 0x86, 0x15, 0x8a, 0x50, 0x6b, 0x21, 0x15, 0x8c, 0x40, 0x51, 0xbb, 0x84, 0x4e, 0x61, 0xb1,
	0x25, 0xf8, 0x07, 0x7c, 0x88, 0x05, 0x16, 0x67, 0xeb, 0x12, 0xa5, 0xce, 0xb5, 0x9c, 0xd4, 0xf8,
	0x52, 0x7f, 0x20, 0xda, 0xff, 0xc5, 0xff, 0x43, 0x4e, 0x28, 0xea, 0xc0, 0xd6, 0xcd, 0x7a, 0x7d,
	0xf7, 0xea, 0x79, 0x8e, 0xa5, 0x9a, 0xcc, 0x12, 0x2c, 0x18, 0x0d, 0xa5, 0x03, 0xfb, 0x89, 0x1a,
	0x44, 0x6b, 0xc9, 0x13, 0x3f, 0xf7, 0x95, 0xf3, 0x42, 0x5b, 0x72, 0x22, 0xe0, 0x64, 0xba, 0x22,
	0x5a, 0xad, 0x41, 0x76, 0x7f, 0x8b, 0xb0, 0x94, 0xd0, 0xb4, 0x7e, 0xdb, 0x8f, 0xce, 0x36, 0xec,
	0xea, 0x1d, 0xc0, 0x17, 0x1a, 0x4c, 0x65, 0x91, 0x14, 0x6c, 0x02, 0x38, 0xcf, 0x39, 0x3b, 0xf5,
	0x08, 0x36, 0x4d, 0xb2, 0x24, 0x1f, 0xa9, 0xee, 0xcd, 0xa7, 0x6c, 0x64, 0x89, 0x9a, 0xd2, 0xe1,
	0x0e, 0xd2, 0x93, 0x2c, 0xc9, 0x07, 0x6a, 0x18, 0x83, 0x02, 0x77, 0xc0, 0xef, 0xd8, 0x05, 0x7c,
	0x79, 0x30, 0x35, 0xd4, 0x65, 0x8d, 0xae, 0x5d, 0x57, 0xdb, 0x74, 0x90, 0x25, 0xf9, 0x50, 0x8d,
	0xf7, 0xf9, 0x73, 0x1f, 0xdf, 0x7f, 0x27, 0xec, 0xf2, 0xe9, 0x0f, 0xbd, 0xe8, 0xc9, 0xb9, 0x62,
	0xd7, 0x2a, 0x98, 0xd7, 0x0e, 0xf5, 0x90, 0x88, 0xdf, 0x8a, 0x43, 0x1b, 0xf1, 0x0f, 0xed, 0xe4,
	0x46, 0xf4, 0x8a, 0x62, 0xaf, 0x28, 0x5e, 0xa2, 0x22, 0x7f, 0x63, 0x63, 0x15, 0xcc, 0x3c, 0x32,
	0x1e, 0xdf, 0xf6, 0x38, 0x9b, 0x67, 0xfa, 0xc3, 0x52, 0x83, 0xa1, 0x21, 0x27, 0x63, 0x8d, 0xfc,
	0x3d, 0xbb, 0x93, 0xb1, 0x4f, 0x06, 0x5c, 0x9c, 0x75, 0x3b, 0x0f, 0x3f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xc9, 0x8e, 0xa6, 0x7a, 0x9c, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConferenceServiceClient is the client API for ConferenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConferenceServiceClient interface {
	RunGoogleMeetScenario(ctx context.Context, in *MeetScenarioRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RunZoomScenario(ctx context.Context, in *MeetScenarioRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type conferenceServiceClient struct {
	cc *grpc.ClientConn
}

func NewConferenceServiceClient(cc *grpc.ClientConn) ConferenceServiceClient {
	return &conferenceServiceClient{cc}
}

func (c *conferenceServiceClient) RunGoogleMeetScenario(ctx context.Context, in *MeetScenarioRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.ConferenceService/RunGoogleMeetScenario", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceServiceClient) RunZoomScenario(ctx context.Context, in *MeetScenarioRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.ConferenceService/RunZoomScenario", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConferenceServiceServer is the server API for ConferenceService service.
type ConferenceServiceServer interface {
	RunGoogleMeetScenario(context.Context, *MeetScenarioRequest) (*empty.Empty, error)
	RunZoomScenario(context.Context, *MeetScenarioRequest) (*empty.Empty, error)
}

// UnimplementedConferenceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedConferenceServiceServer struct {
}

func (*UnimplementedConferenceServiceServer) RunGoogleMeetScenario(ctx context.Context, req *MeetScenarioRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunGoogleMeetScenario not implemented")
}
func (*UnimplementedConferenceServiceServer) RunZoomScenario(ctx context.Context, req *MeetScenarioRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunZoomScenario not implemented")
}

func RegisterConferenceServiceServer(s *grpc.Server, srv ConferenceServiceServer) {
	s.RegisterService(&_ConferenceService_serviceDesc, srv)
}

func _ConferenceService_RunGoogleMeetScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeetScenarioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServiceServer).RunGoogleMeetScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.ConferenceService/RunGoogleMeetScenario",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServiceServer).RunGoogleMeetScenario(ctx, req.(*MeetScenarioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConferenceService_RunZoomScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeetScenarioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServiceServer).RunZoomScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.ConferenceService/RunZoomScenario",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServiceServer).RunZoomScenario(ctx, req.(*MeetScenarioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConferenceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.ui.ConferenceService",
	HandlerType: (*ConferenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunGoogleMeetScenario",
			Handler:    _ConferenceService_RunGoogleMeetScenario_Handler,
		},
		{
			MethodName: "RunZoomScenario",
			Handler:    _ConferenceService_RunZoomScenario_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "conference_service.proto",
}
