// Copyright 2021 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: conference_service.proto

package ui

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MeetScenarioRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tier            string `protobuf:"bytes,1,opt,name=tier,proto3" json:"tier,omitempty"`
	RoomSize        int64  `protobuf:"varint,2,opt,name=room_size,json=roomSize,proto3" json:"room_size,omitempty"`
	ExtendedDisplay bool   `protobuf:"varint,3,opt,name=extended_display,json=extendedDisplay,proto3" json:"extended_display,omitempty"`
	CameraVideoPath string `protobuf:"bytes,4,opt,name=camera_video_path,json=cameraVideoPath,proto3" json:"camera_video_path,omitempty"`
	IsLacros        bool   `protobuf:"varint,5,opt,name=isLacros,proto3" json:"isLacros,omitempty"`
}

func (x *MeetScenarioRequest) Reset() {
	*x = MeetScenarioRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conference_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeetScenarioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeetScenarioRequest) ProtoMessage() {}

func (x *MeetScenarioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conference_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeetScenarioRequest.ProtoReflect.Descriptor instead.
func (*MeetScenarioRequest) Descriptor() ([]byte, []int) {
	return file_conference_service_proto_rawDescGZIP(), []int{0}
}

func (x *MeetScenarioRequest) GetTier() string {
	if x != nil {
		return x.Tier
	}
	return ""
}

func (x *MeetScenarioRequest) GetRoomSize() int64 {
	if x != nil {
		return x.RoomSize
	}
	return 0
}

func (x *MeetScenarioRequest) GetExtendedDisplay() bool {
	if x != nil {
		return x.ExtendedDisplay
	}
	return false
}

func (x *MeetScenarioRequest) GetCameraVideoPath() string {
	if x != nil {
		return x.CameraVideoPath
	}
	return ""
}

func (x *MeetScenarioRequest) GetIsLacros() bool {
	if x != nil {
		return x.IsLacros
	}
	return false
}

var File_conference_service_proto protoreflect.FileDescriptor

var file_conference_service_proto_rawDesc = []byte{
	0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x74, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x75, 0x69, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9, 0x01, 0x0a, 0x13, 0x4d, 0x65, 0x65, 0x74, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4c, 0x61, 0x63, 0x72, 0x6f,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x61, 0x63, 0x72, 0x6f,
	0x73, 0x32, 0xb5, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x15, 0x52, 0x75, 0x6e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x12, 0x21, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x75, 0x69, 0x2e,
	0x4d, 0x65, 0x65, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x0f, 0x52,
	0x75, 0x6e, 0x5a, 0x6f, 0x6f, 0x6d, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x21,
	0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x75, 0x69, 0x2e, 0x4d, 0x65,
	0x65, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x22, 0x5a, 0x20, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x75, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_conference_service_proto_rawDescOnce sync.Once
	file_conference_service_proto_rawDescData = file_conference_service_proto_rawDesc
)

func file_conference_service_proto_rawDescGZIP() []byte {
	file_conference_service_proto_rawDescOnce.Do(func() {
		file_conference_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_conference_service_proto_rawDescData)
	})
	return file_conference_service_proto_rawDescData
}

var file_conference_service_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_conference_service_proto_goTypes = []interface{}{
	(*MeetScenarioRequest)(nil), // 0: tast.cros.ui.MeetScenarioRequest
	(*empty.Empty)(nil),         // 1: google.protobuf.Empty
}
var file_conference_service_proto_depIdxs = []int32{
	0, // 0: tast.cros.ui.ConferenceService.RunGoogleMeetScenario:input_type -> tast.cros.ui.MeetScenarioRequest
	0, // 1: tast.cros.ui.ConferenceService.RunZoomScenario:input_type -> tast.cros.ui.MeetScenarioRequest
	1, // 2: tast.cros.ui.ConferenceService.RunGoogleMeetScenario:output_type -> google.protobuf.Empty
	1, // 3: tast.cros.ui.ConferenceService.RunZoomScenario:output_type -> google.protobuf.Empty
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_conference_service_proto_init() }
func file_conference_service_proto_init() {
	if File_conference_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_conference_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeetScenarioRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_conference_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_conference_service_proto_goTypes,
		DependencyIndexes: file_conference_service_proto_depIdxs,
		MessageInfos:      file_conference_service_proto_msgTypes,
	}.Build()
	File_conference_service_proto = out.File
	file_conference_service_proto_rawDesc = nil
	file_conference_service_proto_goTypes = nil
	file_conference_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ConferenceServiceClient is the client API for ConferenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConferenceServiceClient interface {
	RunGoogleMeetScenario(ctx context.Context, in *MeetScenarioRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RunZoomScenario(ctx context.Context, in *MeetScenarioRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type conferenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConferenceServiceClient(cc grpc.ClientConnInterface) ConferenceServiceClient {
	return &conferenceServiceClient{cc}
}

func (c *conferenceServiceClient) RunGoogleMeetScenario(ctx context.Context, in *MeetScenarioRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.ConferenceService/RunGoogleMeetScenario", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceServiceClient) RunZoomScenario(ctx context.Context, in *MeetScenarioRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.ConferenceService/RunZoomScenario", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConferenceServiceServer is the server API for ConferenceService service.
type ConferenceServiceServer interface {
	RunGoogleMeetScenario(context.Context, *MeetScenarioRequest) (*empty.Empty, error)
	RunZoomScenario(context.Context, *MeetScenarioRequest) (*empty.Empty, error)
}

// UnimplementedConferenceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedConferenceServiceServer struct {
}

func (*UnimplementedConferenceServiceServer) RunGoogleMeetScenario(context.Context, *MeetScenarioRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunGoogleMeetScenario not implemented")
}
func (*UnimplementedConferenceServiceServer) RunZoomScenario(context.Context, *MeetScenarioRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunZoomScenario not implemented")
}

func RegisterConferenceServiceServer(s *grpc.Server, srv ConferenceServiceServer) {
	s.RegisterService(&_ConferenceService_serviceDesc, srv)
}

func _ConferenceService_RunGoogleMeetScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeetScenarioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServiceServer).RunGoogleMeetScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.ConferenceService/RunGoogleMeetScenario",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServiceServer).RunGoogleMeetScenario(ctx, req.(*MeetScenarioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConferenceService_RunZoomScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeetScenarioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceServiceServer).RunZoomScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.ConferenceService/RunZoomScenario",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceServiceServer).RunZoomScenario(ctx, req.(*MeetScenarioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConferenceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.ui.ConferenceService",
	HandlerType: (*ConferenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunGoogleMeetScenario",
			Handler:    _ConferenceService_RunGoogleMeetScenario_Handler,
		},
		{
			MethodName: "RunZoomScenario",
			Handler:    _ConferenceService_RunZoomScenario_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "conference_service.proto",
}
