// Copyright 2022 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: audio_service.proto

package ui

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AudioServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr           string `protobuf:"bytes,1,opt,name=Expr,proto3" json:"Expr,omitempty"`
	DirectoryName  string `protobuf:"bytes,2,opt,name=DirectoryName,proto3" json:"DirectoryName,omitempty"`
	FileName       string `protobuf:"bytes,3,opt,name=FileName,proto3" json:"FileName,omitempty"`
	DurationInSecs int32  `protobuf:"varint,4,opt,name=DurationInSecs,proto3" json:"DurationInSecs,omitempty"`
	FilePath       string `protobuf:"bytes,5,opt,name=FilePath,proto3" json:"FilePath,omitempty"`
}

func (x *AudioServiceRequest) Reset() {
	*x = AudioServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioServiceRequest) ProtoMessage() {}

func (x *AudioServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audio_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioServiceRequest.ProtoReflect.Descriptor instead.
func (*AudioServiceRequest) Descriptor() ([]byte, []int) {
	return file_audio_service_proto_rawDescGZIP(), []int{0}
}

func (x *AudioServiceRequest) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *AudioServiceRequest) GetDirectoryName() string {
	if x != nil {
		return x.DirectoryName
	}
	return ""
}

func (x *AudioServiceRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *AudioServiceRequest) GetDurationInSecs() int32 {
	if x != nil {
		return x.DurationInSecs
	}
	return 0
}

func (x *AudioServiceRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

type AudioServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceName string `protobuf:"bytes,1,opt,name=DeviceName,proto3" json:"DeviceName,omitempty"`
	DeviceType string `protobuf:"bytes,2,opt,name=DeviceType,proto3" json:"DeviceType,omitempty"`
}

func (x *AudioServiceResponse) Reset() {
	*x = AudioServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioServiceResponse) ProtoMessage() {}

func (x *AudioServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audio_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioServiceResponse.ProtoReflect.Descriptor instead.
func (*AudioServiceResponse) Descriptor() ([]byte, []int) {
	return file_audio_service_proto_rawDescGZIP(), []int{1}
}

func (x *AudioServiceResponse) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *AudioServiceResponse) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

var File_audio_service_proto protoreflect.FileDescriptor

var file_audio_service_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x2e, 0x75, 0x69, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xaf, 0x01, 0x0a, 0x13, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x45, 0x78, 0x70, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x45, 0x78, 0x70, 0x72, 0x12, 0x24, 0x0a, 0x0d,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x53, 0x65, 0x63, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x22, 0x56, 0x0a, 0x14, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0xd5, 0x05, 0x0a, 0x0c, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x03, 0x4e,
	0x65, 0x77, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x53, 0x0a, 0x14, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x41, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x2e, 0x75, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x2e, 0x74, 0x61,
	0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x75, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x52, 0x61, 0x77, 0x54, 0x6f, 0x57, 0x61, 0x76, 0x12, 0x21, 0x2e, 0x74, 0x61,
	0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x75, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x12, 0x21, 0x2e, 0x74, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x75, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x1d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43,
	0x72, 0x61, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x22, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x75, 0x69, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x18, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x21, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x75, 0x69,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x52,
	0x0a, 0x13, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x42,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f,
	0x73, 0x2e, 0x75, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x42, 0x22, 0x5a, 0x20, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73,
	0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63,
	0x72, 0x6f, 0x73, 0x2f, 0x75, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_audio_service_proto_rawDescOnce sync.Once
	file_audio_service_proto_rawDescData = file_audio_service_proto_rawDesc
)

func file_audio_service_proto_rawDescGZIP() []byte {
	file_audio_service_proto_rawDescOnce.Do(func() {
		file_audio_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_audio_service_proto_rawDescData)
	})
	return file_audio_service_proto_rawDescData
}

var file_audio_service_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_audio_service_proto_goTypes = []interface{}{
	(*AudioServiceRequest)(nil),  // 0: tast.cros.ui.AudioServiceRequest
	(*AudioServiceResponse)(nil), // 1: tast.cros.ui.AudioServiceResponse
	(*empty.Empty)(nil),          // 2: google.protobuf.Empty
}
var file_audio_service_proto_depIdxs = []int32{
	2, // 0: tast.cros.ui.AudioService.New:input_type -> google.protobuf.Empty
	2, // 1: tast.cros.ui.AudioService.Close:input_type -> google.protobuf.Empty
	0, // 2: tast.cros.ui.AudioService.OpenDirectoryAndFile:input_type -> tast.cros.ui.AudioServiceRequest
	0, // 3: tast.cros.ui.AudioService.GenerateTestRawData:input_type -> tast.cros.ui.AudioServiceRequest
	0, // 4: tast.cros.ui.AudioService.ConvertRawToWav:input_type -> tast.cros.ui.AudioServiceRequest
	0, // 5: tast.cros.ui.AudioService.KeyboardAccel:input_type -> tast.cros.ui.AudioServiceRequest
	2, // 6: tast.cros.ui.AudioService.AudioCrasSelectedOutputDevice:input_type -> google.protobuf.Empty
	0, // 7: tast.cros.ui.AudioService.VerifyFirstRunningDevice:input_type -> tast.cros.ui.AudioServiceRequest
	0, // 8: tast.cros.ui.AudioService.SetActiveNodeByType:input_type -> tast.cros.ui.AudioServiceRequest
	2, // 9: tast.cros.ui.AudioService.New:output_type -> google.protobuf.Empty
	2, // 10: tast.cros.ui.AudioService.Close:output_type -> google.protobuf.Empty
	2, // 11: tast.cros.ui.AudioService.OpenDirectoryAndFile:output_type -> google.protobuf.Empty
	2, // 12: tast.cros.ui.AudioService.GenerateTestRawData:output_type -> google.protobuf.Empty
	2, // 13: tast.cros.ui.AudioService.ConvertRawToWav:output_type -> google.protobuf.Empty
	2, // 14: tast.cros.ui.AudioService.KeyboardAccel:output_type -> google.protobuf.Empty
	1, // 15: tast.cros.ui.AudioService.AudioCrasSelectedOutputDevice:output_type -> tast.cros.ui.AudioServiceResponse
	2, // 16: tast.cros.ui.AudioService.VerifyFirstRunningDevice:output_type -> google.protobuf.Empty
	2, // 17: tast.cros.ui.AudioService.SetActiveNodeByType:output_type -> google.protobuf.Empty
	9, // [9:18] is the sub-list for method output_type
	0, // [0:9] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_audio_service_proto_init() }
func file_audio_service_proto_init() {
	if File_audio_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_audio_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_audio_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_audio_service_proto_goTypes,
		DependencyIndexes: file_audio_service_proto_depIdxs,
		MessageInfos:      file_audio_service_proto_msgTypes,
	}.Build()
	File_audio_service_proto = out.File
	file_audio_service_proto_rawDesc = nil
	file_audio_service_proto_goTypes = nil
	file_audio_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AudioServiceClient is the client API for AudioService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AudioServiceClient interface {
	// New logs into a Chrome session as a fake user. Close must be called later
	// to clean up the associated resources.
	New(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Close releases the resources obtained by New.
	Close(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// OpenDirectoryAndFile performs launching filesapp and opening particular file
	// in given directory.
	OpenDirectoryAndFile(ctx context.Context, in *AudioServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GenerateTestRawData generates test raw data file.
	GenerateTestRawData(ctx context.Context, in *AudioServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// ConvertRawToWav will convert raw data file to wav file format.
	ConvertRawToWav(ctx context.Context, in *AudioServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// KeyboardAccel will create keyboard event and performs keyboard
	// key press with Accel().
	KeyboardAccel(ctx context.Context, in *AudioServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// AudioCrasSelectedOutputDevice will return selected audio device name
	// and audio device type.
	AudioCrasSelectedOutputDevice(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AudioServiceResponse, error)
	// VerifyFirstRunningDevice will check for audio routing device.
	VerifyFirstRunningDevice(ctx context.Context, in *AudioServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// SetActiveNodeByType will set the provided audio node as Active audio node.
	SetActiveNodeByType(ctx context.Context, in *AudioServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type audioServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAudioServiceClient(cc grpc.ClientConnInterface) AudioServiceClient {
	return &audioServiceClient{cc}
}

func (c *audioServiceClient) New(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.AudioService/New", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audioServiceClient) Close(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.AudioService/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audioServiceClient) OpenDirectoryAndFile(ctx context.Context, in *AudioServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.AudioService/OpenDirectoryAndFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audioServiceClient) GenerateTestRawData(ctx context.Context, in *AudioServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.AudioService/GenerateTestRawData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audioServiceClient) ConvertRawToWav(ctx context.Context, in *AudioServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.AudioService/ConvertRawToWav", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audioServiceClient) KeyboardAccel(ctx context.Context, in *AudioServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.AudioService/KeyboardAccel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audioServiceClient) AudioCrasSelectedOutputDevice(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AudioServiceResponse, error) {
	out := new(AudioServiceResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.AudioService/AudioCrasSelectedOutputDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audioServiceClient) VerifyFirstRunningDevice(ctx context.Context, in *AudioServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.AudioService/VerifyFirstRunningDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audioServiceClient) SetActiveNodeByType(ctx context.Context, in *AudioServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.AudioService/SetActiveNodeByType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AudioServiceServer is the server API for AudioService service.
type AudioServiceServer interface {
	// New logs into a Chrome session as a fake user. Close must be called later
	// to clean up the associated resources.
	New(context.Context, *empty.Empty) (*empty.Empty, error)
	// Close releases the resources obtained by New.
	Close(context.Context, *empty.Empty) (*empty.Empty, error)
	// OpenDirectoryAndFile performs launching filesapp and opening particular file
	// in given directory.
	OpenDirectoryAndFile(context.Context, *AudioServiceRequest) (*empty.Empty, error)
	// GenerateTestRawData generates test raw data file.
	GenerateTestRawData(context.Context, *AudioServiceRequest) (*empty.Empty, error)
	// ConvertRawToWav will convert raw data file to wav file format.
	ConvertRawToWav(context.Context, *AudioServiceRequest) (*empty.Empty, error)
	// KeyboardAccel will create keyboard event and performs keyboard
	// key press with Accel().
	KeyboardAccel(context.Context, *AudioServiceRequest) (*empty.Empty, error)
	// AudioCrasSelectedOutputDevice will return selected audio device name
	// and audio device type.
	AudioCrasSelectedOutputDevice(context.Context, *empty.Empty) (*AudioServiceResponse, error)
	// VerifyFirstRunningDevice will check for audio routing device.
	VerifyFirstRunningDevice(context.Context, *AudioServiceRequest) (*empty.Empty, error)
	// SetActiveNodeByType will set the provided audio node as Active audio node.
	SetActiveNodeByType(context.Context, *AudioServiceRequest) (*empty.Empty, error)
}

// UnimplementedAudioServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAudioServiceServer struct {
}

func (*UnimplementedAudioServiceServer) New(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method New not implemented")
}
func (*UnimplementedAudioServiceServer) Close(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedAudioServiceServer) OpenDirectoryAndFile(context.Context, *AudioServiceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenDirectoryAndFile not implemented")
}
func (*UnimplementedAudioServiceServer) GenerateTestRawData(context.Context, *AudioServiceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTestRawData not implemented")
}
func (*UnimplementedAudioServiceServer) ConvertRawToWav(context.Context, *AudioServiceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertRawToWav not implemented")
}
func (*UnimplementedAudioServiceServer) KeyboardAccel(context.Context, *AudioServiceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyboardAccel not implemented")
}
func (*UnimplementedAudioServiceServer) AudioCrasSelectedOutputDevice(context.Context, *empty.Empty) (*AudioServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AudioCrasSelectedOutputDevice not implemented")
}
func (*UnimplementedAudioServiceServer) VerifyFirstRunningDevice(context.Context, *AudioServiceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyFirstRunningDevice not implemented")
}
func (*UnimplementedAudioServiceServer) SetActiveNodeByType(context.Context, *AudioServiceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActiveNodeByType not implemented")
}

func RegisterAudioServiceServer(s *grpc.Server, srv AudioServiceServer) {
	s.RegisterService(&_AudioService_serviceDesc, srv)
}

func _AudioService_New_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioServiceServer).New(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.AudioService/New",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioServiceServer).New(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudioService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.AudioService/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioServiceServer).Close(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudioService_OpenDirectoryAndFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AudioServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioServiceServer).OpenDirectoryAndFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.AudioService/OpenDirectoryAndFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioServiceServer).OpenDirectoryAndFile(ctx, req.(*AudioServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudioService_GenerateTestRawData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AudioServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioServiceServer).GenerateTestRawData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.AudioService/GenerateTestRawData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioServiceServer).GenerateTestRawData(ctx, req.(*AudioServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudioService_ConvertRawToWav_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AudioServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioServiceServer).ConvertRawToWav(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.AudioService/ConvertRawToWav",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioServiceServer).ConvertRawToWav(ctx, req.(*AudioServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudioService_KeyboardAccel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AudioServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioServiceServer).KeyboardAccel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.AudioService/KeyboardAccel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioServiceServer).KeyboardAccel(ctx, req.(*AudioServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudioService_AudioCrasSelectedOutputDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioServiceServer).AudioCrasSelectedOutputDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.AudioService/AudioCrasSelectedOutputDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioServiceServer).AudioCrasSelectedOutputDevice(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudioService_VerifyFirstRunningDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AudioServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioServiceServer).VerifyFirstRunningDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.AudioService/VerifyFirstRunningDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioServiceServer).VerifyFirstRunningDevice(ctx, req.(*AudioServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudioService_SetActiveNodeByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AudioServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioServiceServer).SetActiveNodeByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.AudioService/SetActiveNodeByType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioServiceServer).SetActiveNodeByType(ctx, req.(*AudioServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AudioService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.ui.AudioService",
	HandlerType: (*AudioServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "New",
			Handler:    _AudioService_New_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _AudioService_Close_Handler,
		},
		{
			MethodName: "OpenDirectoryAndFile",
			Handler:    _AudioService_OpenDirectoryAndFile_Handler,
		},
		{
			MethodName: "GenerateTestRawData",
			Handler:    _AudioService_GenerateTestRawData_Handler,
		},
		{
			MethodName: "ConvertRawToWav",
			Handler:    _AudioService_ConvertRawToWav_Handler,
		},
		{
			MethodName: "KeyboardAccel",
			Handler:    _AudioService_KeyboardAccel_Handler,
		},
		{
			MethodName: "AudioCrasSelectedOutputDevice",
			Handler:    _AudioService_AudioCrasSelectedOutputDevice_Handler,
		},
		{
			MethodName: "VerifyFirstRunningDevice",
			Handler:    _AudioService_VerifyFirstRunningDevice_Handler,
		},
		{
			MethodName: "SetActiveNodeByType",
			Handler:    _AudioService_SetActiveNodeByType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "audio_service.proto",
}
