// Copyright 2022 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: conn_service.proto

package ui

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NewConnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *NewConnRequest) Reset() {
	*x = NewConnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conn_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewConnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewConnRequest) ProtoMessage() {}

func (x *NewConnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conn_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewConnRequest.ProtoReflect.Descriptor instead.
func (*NewConnRequest) Descriptor() ([]byte, []int) {
	return file_conn_service_proto_rawDescGZIP(), []int{0}
}

func (x *NewConnRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type NewConnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NewConnResponse) Reset() {
	*x = NewConnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conn_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewConnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewConnResponse) ProtoMessage() {}

func (x *NewConnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conn_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewConnResponse.ProtoReflect.Descriptor instead.
func (*NewConnResponse) Descriptor() ([]byte, []int) {
	return file_conn_service_proto_rawDescGZIP(), []int{1}
}

func (x *NewConnResponse) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NewConnForTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *NewConnForTargetRequest) Reset() {
	*x = NewConnForTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conn_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewConnForTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewConnForTargetRequest) ProtoMessage() {}

func (x *NewConnForTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conn_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewConnForTargetRequest.ProtoReflect.Descriptor instead.
func (*NewConnForTargetRequest) Descriptor() ([]byte, []int) {
	return file_conn_service_proto_rawDescGZIP(), []int{2}
}

func (x *NewConnForTargetRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type CloseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CloseRequest) Reset() {
	*x = CloseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conn_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseRequest) ProtoMessage() {}

func (x *CloseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conn_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseRequest.ProtoReflect.Descriptor instead.
func (*CloseRequest) Descriptor() ([]byte, []int) {
	return file_conn_service_proto_rawDescGZIP(), []int{3}
}

func (x *CloseRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ActivateTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ActivateTargetRequest) Reset() {
	*x = ActivateTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conn_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateTargetRequest) ProtoMessage() {}

func (x *ActivateTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conn_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateTargetRequest.ProtoReflect.Descriptor instead.
func (*ActivateTargetRequest) Descriptor() ([]byte, []int) {
	return file_conn_service_proto_rawDescGZIP(), []int{4}
}

func (x *ActivateTargetRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NavigateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *NavigateRequest) Reset() {
	*x = NavigateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conn_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavigateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavigateRequest) ProtoMessage() {}

func (x *NavigateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conn_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavigateRequest.ProtoReflect.Descriptor instead.
func (*NavigateRequest) Descriptor() ([]byte, []int) {
	return file_conn_service_proto_rawDescGZIP(), []int{5}
}

func (x *NavigateRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NavigateRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ConnEvalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Expr string `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *ConnEvalRequest) Reset() {
	*x = ConnEvalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conn_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnEvalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnEvalRequest) ProtoMessage() {}

func (x *ConnEvalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conn_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnEvalRequest.ProtoReflect.Descriptor instead.
func (*ConnEvalRequest) Descriptor() ([]byte, []int) {
	return file_conn_service_proto_rawDescGZIP(), []int{6}
}

func (x *ConnEvalRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ConnEvalRequest) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

type ConnCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Fn   string            `protobuf:"bytes,2,opt,name=fn,proto3" json:"fn,omitempty"`
	Args []*structpb.Value `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *ConnCallRequest) Reset() {
	*x = ConnCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conn_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnCallRequest) ProtoMessage() {}

func (x *ConnCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conn_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnCallRequest.ProtoReflect.Descriptor instead.
func (*ConnCallRequest) Descriptor() ([]byte, []int) {
	return file_conn_service_proto_rawDescGZIP(), []int{7}
}

func (x *ConnCallRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ConnCallRequest) GetFn() string {
	if x != nil {
		return x.Fn
	}
	return ""
}

func (x *ConnCallRequest) GetArgs() []*structpb.Value {
	if x != nil {
		return x.Args
	}
	return nil
}

type ConnWaitForExprRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Expr        string `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
	TimeoutSecs uint32 `protobuf:"varint,3,opt,name=timeout_secs,json=timeoutSecs,proto3" json:"timeout_secs,omitempty"`
	FailOnErr   bool   `protobuf:"varint,4,opt,name=fail_on_err,json=failOnErr,proto3" json:"fail_on_err,omitempty"`
}

func (x *ConnWaitForExprRequest) Reset() {
	*x = ConnWaitForExprRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conn_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnWaitForExprRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnWaitForExprRequest) ProtoMessage() {}

func (x *ConnWaitForExprRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conn_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnWaitForExprRequest.ProtoReflect.Descriptor instead.
func (*ConnWaitForExprRequest) Descriptor() ([]byte, []int) {
	return file_conn_service_proto_rawDescGZIP(), []int{8}
}

func (x *ConnWaitForExprRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ConnWaitForExprRequest) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *ConnWaitForExprRequest) GetTimeoutSecs() uint32 {
	if x != nil {
		return x.TimeoutSecs
	}
	return 0
}

func (x *ConnWaitForExprRequest) GetFailOnErr() bool {
	if x != nil {
		return x.FailOnErr
	}
	return false
}

var File_conn_service_proto protoreflect.FileDescriptor

var file_conn_service_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e,
	0x75, 0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x22, 0x0a,
	0x0e, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x22, 0x21, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x17, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x6e, 0x46,
	0x6f, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x22, 0x1e, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x27, 0x0a, 0x15, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x33, 0x0a, 0x0f, 0x4e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22,
	0x35, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x5d, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x66, 0x6e, 0x12, 0x2a, 0x0a, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x7f, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x6e, 0x57, 0x61, 0x69,
	0x74, 0x46, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65,
	0x78, 0x70, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73,
	0x65, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x53, 0x65, 0x63, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x6f,
	0x6e, 0x5f, 0x65, 0x72, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x61, 0x69,
	0x6c, 0x4f, 0x6e, 0x45, 0x72, 0x72, 0x32, 0xd9, 0x04, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e,
	0x6e, 0x12, 0x1c, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x75, 0x69,
	0x2e, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x75, 0x69, 0x2e, 0x4e,
	0x65, 0x77, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5a, 0x0a, 0x10, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x6e, 0x46, 0x6f, 0x72, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x25, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x2e, 0x75, 0x69, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x6e, 0x46, 0x6f, 0x72, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x61,
	0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x75, 0x69, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x6f,
	0x6e, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x05,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x1a, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f,
	0x73, 0x2e, 0x75, 0x69, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x23, 0x2e,
	0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x75, 0x69, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x08,
	0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x2e, 0x75, 0x69, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x3f, 0x0a, 0x04, 0x45, 0x76, 0x61, 0x6c, 0x12, 0x1d, 0x2e, 0x74, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x75, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x45, 0x76, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x00, 0x12, 0x3f, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1d, 0x2e, 0x74, 0x61, 0x73,
	0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x75, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0b, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x45, 0x78,
	0x70, 0x72, 0x12, 0x24, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x75,
	0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x45, 0x78, 0x70,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x42, 0x22, 0x5a, 0x20, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73,
	0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63,
	0x72, 0x6f, 0x73, 0x2f, 0x75, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_conn_service_proto_rawDescOnce sync.Once
	file_conn_service_proto_rawDescData = file_conn_service_proto_rawDesc
)

func file_conn_service_proto_rawDescGZIP() []byte {
	file_conn_service_proto_rawDescOnce.Do(func() {
		file_conn_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_conn_service_proto_rawDescData)
	})
	return file_conn_service_proto_rawDescData
}

var file_conn_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_conn_service_proto_goTypes = []interface{}{
	(*NewConnRequest)(nil),          // 0: tast.cros.ui.NewConnRequest
	(*NewConnResponse)(nil),         // 1: tast.cros.ui.NewConnResponse
	(*NewConnForTargetRequest)(nil), // 2: tast.cros.ui.NewConnForTargetRequest
	(*CloseRequest)(nil),            // 3: tast.cros.ui.CloseRequest
	(*ActivateTargetRequest)(nil),   // 4: tast.cros.ui.ActivateTargetRequest
	(*NavigateRequest)(nil),         // 5: tast.cros.ui.NavigateRequest
	(*ConnEvalRequest)(nil),         // 6: tast.cros.ui.ConnEvalRequest
	(*ConnCallRequest)(nil),         // 7: tast.cros.ui.ConnCallRequest
	(*ConnWaitForExprRequest)(nil),  // 8: tast.cros.ui.ConnWaitForExprRequest
	(*structpb.Value)(nil),          // 9: google.protobuf.Value
	(*emptypb.Empty)(nil),           // 10: google.protobuf.Empty
}
var file_conn_service_proto_depIdxs = []int32{
	9,  // 0: tast.cros.ui.ConnCallRequest.args:type_name -> google.protobuf.Value
	0,  // 1: tast.cros.ui.ConnService.NewConn:input_type -> tast.cros.ui.NewConnRequest
	2,  // 2: tast.cros.ui.ConnService.NewConnForTarget:input_type -> tast.cros.ui.NewConnForTargetRequest
	3,  // 3: tast.cros.ui.ConnService.Close:input_type -> tast.cros.ui.CloseRequest
	4,  // 4: tast.cros.ui.ConnService.ActivateTarget:input_type -> tast.cros.ui.ActivateTargetRequest
	5,  // 5: tast.cros.ui.ConnService.Navigate:input_type -> tast.cros.ui.NavigateRequest
	6,  // 6: tast.cros.ui.ConnService.Eval:input_type -> tast.cros.ui.ConnEvalRequest
	7,  // 7: tast.cros.ui.ConnService.Call:input_type -> tast.cros.ui.ConnCallRequest
	8,  // 8: tast.cros.ui.ConnService.WaitForExpr:input_type -> tast.cros.ui.ConnWaitForExprRequest
	1,  // 9: tast.cros.ui.ConnService.NewConn:output_type -> tast.cros.ui.NewConnResponse
	1,  // 10: tast.cros.ui.ConnService.NewConnForTarget:output_type -> tast.cros.ui.NewConnResponse
	10, // 11: tast.cros.ui.ConnService.Close:output_type -> google.protobuf.Empty
	10, // 12: tast.cros.ui.ConnService.ActivateTarget:output_type -> google.protobuf.Empty
	10, // 13: tast.cros.ui.ConnService.Navigate:output_type -> google.protobuf.Empty
	9,  // 14: tast.cros.ui.ConnService.Eval:output_type -> google.protobuf.Value
	9,  // 15: tast.cros.ui.ConnService.Call:output_type -> google.protobuf.Value
	10, // 16: tast.cros.ui.ConnService.WaitForExpr:output_type -> google.protobuf.Empty
	9,  // [9:17] is the sub-list for method output_type
	1,  // [1:9] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_conn_service_proto_init() }
func file_conn_service_proto_init() {
	if File_conn_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_conn_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewConnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conn_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewConnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conn_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewConnForTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conn_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conn_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conn_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavigateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conn_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnEvalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conn_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conn_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnWaitForExprRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_conn_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_conn_service_proto_goTypes,
		DependencyIndexes: file_conn_service_proto_depIdxs,
		MessageInfos:      file_conn_service_proto_msgTypes,
	}.Build()
	File_conn_service_proto = out.File
	file_conn_service_proto_rawDesc = nil
	file_conn_service_proto_goTypes = nil
	file_conn_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ConnServiceClient is the client API for ConnService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConnServiceClient interface {
	// NewConn opens a new tab with the provided url and creates a new Conn for it.
	NewConn(ctx context.Context, in *NewConnRequest, opts ...grpc.CallOption) (*NewConnResponse, error)
	// NewConnForTarget creates a new Conn for an existing tab matching the url provided.
	NewConnForTarget(ctx context.Context, in *NewConnForTargetRequest, opts ...grpc.CallOption) (*NewConnResponse, error)
	// Close calls conn.Close.
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ActivateTarget calls conn.ActivateTarget to bring focus to the tab/window.
	ActivateTarget(ctx context.Context, in *ActivateTargetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Navigate calls conn.Navigate to navigate the tab to the url.
	Navigate(ctx context.Context, in *NavigateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Eval evaluates expr on the given page. See Conn.Eval for details.
	Eval(ctx context.Context, in *ConnEvalRequest, opts ...grpc.CallOption) (*structpb.Value, error)
	// Call calls the javascript fn with given args. See Conn.Call for details
	Call(ctx context.Context, in *ConnCallRequest, opts ...grpc.CallOption) (*structpb.Value, error)
	// WaitForExpr repeatedly evaluates the JavaScript expression expr until it evaluates to true.
	// Errors returned by Eval are treated the same as expr == false unless fail_on_err is true.
	WaitForExpr(ctx context.Context, in *ConnWaitForExprRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type connServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnServiceClient(cc grpc.ClientConnInterface) ConnServiceClient {
	return &connServiceClient{cc}
}

func (c *connServiceClient) NewConn(ctx context.Context, in *NewConnRequest, opts ...grpc.CallOption) (*NewConnResponse, error) {
	out := new(NewConnResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.ConnService/NewConn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connServiceClient) NewConnForTarget(ctx context.Context, in *NewConnForTargetRequest, opts ...grpc.CallOption) (*NewConnResponse, error) {
	out := new(NewConnResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.ConnService/NewConnForTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connServiceClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.ConnService/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connServiceClient) ActivateTarget(ctx context.Context, in *ActivateTargetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.ConnService/ActivateTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connServiceClient) Navigate(ctx context.Context, in *NavigateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.ConnService/Navigate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connServiceClient) Eval(ctx context.Context, in *ConnEvalRequest, opts ...grpc.CallOption) (*structpb.Value, error) {
	out := new(structpb.Value)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.ConnService/Eval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connServiceClient) Call(ctx context.Context, in *ConnCallRequest, opts ...grpc.CallOption) (*structpb.Value, error) {
	out := new(structpb.Value)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.ConnService/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connServiceClient) WaitForExpr(ctx context.Context, in *ConnWaitForExprRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.ConnService/WaitForExpr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnServiceServer is the server API for ConnService service.
type ConnServiceServer interface {
	// NewConn opens a new tab with the provided url and creates a new Conn for it.
	NewConn(context.Context, *NewConnRequest) (*NewConnResponse, error)
	// NewConnForTarget creates a new Conn for an existing tab matching the url provided.
	NewConnForTarget(context.Context, *NewConnForTargetRequest) (*NewConnResponse, error)
	// Close calls conn.Close.
	Close(context.Context, *CloseRequest) (*emptypb.Empty, error)
	// ActivateTarget calls conn.ActivateTarget to bring focus to the tab/window.
	ActivateTarget(context.Context, *ActivateTargetRequest) (*emptypb.Empty, error)
	// Navigate calls conn.Navigate to navigate the tab to the url.
	Navigate(context.Context, *NavigateRequest) (*emptypb.Empty, error)
	// Eval evaluates expr on the given page. See Conn.Eval for details.
	Eval(context.Context, *ConnEvalRequest) (*structpb.Value, error)
	// Call calls the javascript fn with given args. See Conn.Call for details
	Call(context.Context, *ConnCallRequest) (*structpb.Value, error)
	// WaitForExpr repeatedly evaluates the JavaScript expression expr until it evaluates to true.
	// Errors returned by Eval are treated the same as expr == false unless fail_on_err is true.
	WaitForExpr(context.Context, *ConnWaitForExprRequest) (*emptypb.Empty, error)
}

// UnimplementedConnServiceServer can be embedded to have forward compatible implementations.
type UnimplementedConnServiceServer struct {
}

func (*UnimplementedConnServiceServer) NewConn(context.Context, *NewConnRequest) (*NewConnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewConn not implemented")
}
func (*UnimplementedConnServiceServer) NewConnForTarget(context.Context, *NewConnForTargetRequest) (*NewConnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewConnForTarget not implemented")
}
func (*UnimplementedConnServiceServer) Close(context.Context, *CloseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedConnServiceServer) ActivateTarget(context.Context, *ActivateTargetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateTarget not implemented")
}
func (*UnimplementedConnServiceServer) Navigate(context.Context, *NavigateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Navigate not implemented")
}
func (*UnimplementedConnServiceServer) Eval(context.Context, *ConnEvalRequest) (*structpb.Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Eval not implemented")
}
func (*UnimplementedConnServiceServer) Call(context.Context, *ConnCallRequest) (*structpb.Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (*UnimplementedConnServiceServer) WaitForExpr(context.Context, *ConnWaitForExprRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForExpr not implemented")
}

func RegisterConnServiceServer(s *grpc.Server, srv ConnServiceServer) {
	s.RegisterService(&_ConnService_serviceDesc, srv)
}

func _ConnService_NewConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewConnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnServiceServer).NewConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.ConnService/NewConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnServiceServer).NewConn(ctx, req.(*NewConnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnService_NewConnForTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewConnForTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnServiceServer).NewConnForTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.ConnService/NewConnForTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnServiceServer).NewConnForTarget(ctx, req.(*NewConnForTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.ConnService/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnServiceServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnService_ActivateTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnServiceServer).ActivateTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.ConnService/ActivateTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnServiceServer).ActivateTarget(ctx, req.(*ActivateTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnService_Navigate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NavigateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnServiceServer).Navigate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.ConnService/Navigate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnServiceServer).Navigate(ctx, req.(*NavigateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnService_Eval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnEvalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnServiceServer).Eval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.ConnService/Eval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnServiceServer).Eval(ctx, req.(*ConnEvalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.ConnService/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnServiceServer).Call(ctx, req.(*ConnCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnService_WaitForExpr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnWaitForExprRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnServiceServer).WaitForExpr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.ConnService/WaitForExpr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnServiceServer).WaitForExpr(ctx, req.(*ConnWaitForExprRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConnService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.ui.ConnService",
	HandlerType: (*ConnServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewConn",
			Handler:    _ConnService_NewConn_Handler,
		},
		{
			MethodName: "NewConnForTarget",
			Handler:    _ConnService_NewConnForTarget_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _ConnService_Close_Handler,
		},
		{
			MethodName: "ActivateTarget",
			Handler:    _ConnService_ActivateTarget_Handler,
		},
		{
			MethodName: "Navigate",
			Handler:    _ConnService_Navigate_Handler,
		},
		{
			MethodName: "Eval",
			Handler:    _ConnService_Eval_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _ConnService_Call_Handler,
		},
		{
			MethodName: "WaitForExpr",
			Handler:    _ConnService_WaitForExpr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "conn_service.proto",
}
