// Copyright 2021 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: check_virtual_keyboard_service.proto

package ui

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CheckVirtualKeyboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDutTabletMode bool `protobuf:"varint,1,opt,name=is_dut_tablet_mode,json=isDutTabletMode,proto3" json:"is_dut_tablet_mode,omitempty"`
}

func (x *CheckVirtualKeyboardRequest) Reset() {
	*x = CheckVirtualKeyboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_check_virtual_keyboard_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckVirtualKeyboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckVirtualKeyboardRequest) ProtoMessage() {}

func (x *CheckVirtualKeyboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_check_virtual_keyboard_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckVirtualKeyboardRequest.ProtoReflect.Descriptor instead.
func (*CheckVirtualKeyboardRequest) Descriptor() ([]byte, []int) {
	return file_check_virtual_keyboard_service_proto_rawDescGZIP(), []int{0}
}

func (x *CheckVirtualKeyboardRequest) GetIsDutTabletMode() bool {
	if x != nil {
		return x.IsDutTabletMode
	}
	return false
}

type CheckVirtualKeyboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsVirtualKeyboardPresent bool `protobuf:"varint,1,opt,name=is_virtual_keyboard_present,json=isVirtualKeyboardPresent,proto3" json:"is_virtual_keyboard_present,omitempty"`
}

func (x *CheckVirtualKeyboardResponse) Reset() {
	*x = CheckVirtualKeyboardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_check_virtual_keyboard_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckVirtualKeyboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckVirtualKeyboardResponse) ProtoMessage() {}

func (x *CheckVirtualKeyboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_check_virtual_keyboard_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckVirtualKeyboardResponse.ProtoReflect.Descriptor instead.
func (*CheckVirtualKeyboardResponse) Descriptor() ([]byte, []int) {
	return file_check_virtual_keyboard_service_proto_rawDescGZIP(), []int{1}
}

func (x *CheckVirtualKeyboardResponse) GetIsVirtualKeyboardPresent() bool {
	if x != nil {
		return x.IsVirtualKeyboardPresent
	}
	return false
}

var File_check_virtual_keyboard_service_proto protoreflect.FileDescriptor

var file_check_virtual_keyboard_service_proto_rawDesc = []byte{
	0x0a, 0x24, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f,
	0x73, 0x2e, 0x75, 0x69, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x4a, 0x0a, 0x1b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x64, 0x75, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73,
	0x44, 0x75, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x5d, 0x0a,
	0x1c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4b, 0x65, 0x79,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a,
	0x1b, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4b, 0x65, 0x79,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x32, 0xf9, 0x03, 0x0a,
	0x1b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4b, 0x65, 0x79,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x11,
	0x4e, 0x65, 0x77, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49,
	0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x15, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61,
	0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x15, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x43, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x72, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x78,
	0x0a, 0x1d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4b, 0x65,
	0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12,
	0x29, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x75, 0x69, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x61, 0x73,
	0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x75, 0x69, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x22, 0x5a, 0x20, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x75, 0x69, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_check_virtual_keyboard_service_proto_rawDescOnce sync.Once
	file_check_virtual_keyboard_service_proto_rawDescData = file_check_virtual_keyboard_service_proto_rawDesc
)

func file_check_virtual_keyboard_service_proto_rawDescGZIP() []byte {
	file_check_virtual_keyboard_service_proto_rawDescOnce.Do(func() {
		file_check_virtual_keyboard_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_check_virtual_keyboard_service_proto_rawDescData)
	})
	return file_check_virtual_keyboard_service_proto_rawDescData
}

var file_check_virtual_keyboard_service_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_check_virtual_keyboard_service_proto_goTypes = []interface{}{
	(*CheckVirtualKeyboardRequest)(nil),  // 0: tast.cros.ui.CheckVirtualKeyboardRequest
	(*CheckVirtualKeyboardResponse)(nil), // 1: tast.cros.ui.CheckVirtualKeyboardResponse
	(*empty.Empty)(nil),                  // 2: google.protobuf.Empty
}
var file_check_virtual_keyboard_service_proto_depIdxs = []int32{
	2, // 0: tast.cros.ui.CheckVirtualKeyboardService.NewChromeLoggedIn:input_type -> google.protobuf.Empty
	2, // 1: tast.cros.ui.CheckVirtualKeyboardService.CloseChrome:input_type -> google.protobuf.Empty
	2, // 2: tast.cros.ui.CheckVirtualKeyboardService.OpenChromePage:input_type -> google.protobuf.Empty
	2, // 3: tast.cros.ui.CheckVirtualKeyboardService.ClickChromeAddressBar:input_type -> google.protobuf.Empty
	2, // 4: tast.cros.ui.CheckVirtualKeyboardService.TouchChromeAddressBar:input_type -> google.protobuf.Empty
	0, // 5: tast.cros.ui.CheckVirtualKeyboardService.CheckVirtualKeyboardIsPresent:input_type -> tast.cros.ui.CheckVirtualKeyboardRequest
	2, // 6: tast.cros.ui.CheckVirtualKeyboardService.NewChromeLoggedIn:output_type -> google.protobuf.Empty
	2, // 7: tast.cros.ui.CheckVirtualKeyboardService.CloseChrome:output_type -> google.protobuf.Empty
	2, // 8: tast.cros.ui.CheckVirtualKeyboardService.OpenChromePage:output_type -> google.protobuf.Empty
	2, // 9: tast.cros.ui.CheckVirtualKeyboardService.ClickChromeAddressBar:output_type -> google.protobuf.Empty
	2, // 10: tast.cros.ui.CheckVirtualKeyboardService.TouchChromeAddressBar:output_type -> google.protobuf.Empty
	1, // 11: tast.cros.ui.CheckVirtualKeyboardService.CheckVirtualKeyboardIsPresent:output_type -> tast.cros.ui.CheckVirtualKeyboardResponse
	6, // [6:12] is the sub-list for method output_type
	0, // [0:6] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_check_virtual_keyboard_service_proto_init() }
func file_check_virtual_keyboard_service_proto_init() {
	if File_check_virtual_keyboard_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_check_virtual_keyboard_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckVirtualKeyboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_check_virtual_keyboard_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckVirtualKeyboardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_check_virtual_keyboard_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_check_virtual_keyboard_service_proto_goTypes,
		DependencyIndexes: file_check_virtual_keyboard_service_proto_depIdxs,
		MessageInfos:      file_check_virtual_keyboard_service_proto_msgTypes,
	}.Build()
	File_check_virtual_keyboard_service_proto = out.File
	file_check_virtual_keyboard_service_proto_rawDesc = nil
	file_check_virtual_keyboard_service_proto_goTypes = nil
	file_check_virtual_keyboard_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CheckVirtualKeyboardServiceClient is the client API for CheckVirtualKeyboardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CheckVirtualKeyboardServiceClient interface {
	// NewChromeLoggedIn Logs into a user session.
	NewChromeLoggedIn(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// CloseChrome releases the resources obtained by NewChrome.
	CloseChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// OpenChromePage opens a chrome page.
	OpenChromePage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// ClickChromeAddressBar clicks on the address bar.
	ClickChromeAddressBar(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// TouchChromeAddressBar sends a tap on the touch screen to touch on the address bar.
	TouchChromeAddressBar(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// CheckVirtualKeyboardIsPresent checks whether the virtual keyboard is present.
	CheckVirtualKeyboardIsPresent(ctx context.Context, in *CheckVirtualKeyboardRequest, opts ...grpc.CallOption) (*CheckVirtualKeyboardResponse, error)
}

type checkVirtualKeyboardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckVirtualKeyboardServiceClient(cc grpc.ClientConnInterface) CheckVirtualKeyboardServiceClient {
	return &checkVirtualKeyboardServiceClient{cc}
}

func (c *checkVirtualKeyboardServiceClient) NewChromeLoggedIn(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.CheckVirtualKeyboardService/NewChromeLoggedIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkVirtualKeyboardServiceClient) CloseChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.CheckVirtualKeyboardService/CloseChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkVirtualKeyboardServiceClient) OpenChromePage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.CheckVirtualKeyboardService/OpenChromePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkVirtualKeyboardServiceClient) ClickChromeAddressBar(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.CheckVirtualKeyboardService/ClickChromeAddressBar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkVirtualKeyboardServiceClient) TouchChromeAddressBar(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.CheckVirtualKeyboardService/TouchChromeAddressBar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkVirtualKeyboardServiceClient) CheckVirtualKeyboardIsPresent(ctx context.Context, in *CheckVirtualKeyboardRequest, opts ...grpc.CallOption) (*CheckVirtualKeyboardResponse, error) {
	out := new(CheckVirtualKeyboardResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.CheckVirtualKeyboardService/CheckVirtualKeyboardIsPresent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckVirtualKeyboardServiceServer is the server API for CheckVirtualKeyboardService service.
type CheckVirtualKeyboardServiceServer interface {
	// NewChromeLoggedIn Logs into a user session.
	NewChromeLoggedIn(context.Context, *empty.Empty) (*empty.Empty, error)
	// CloseChrome releases the resources obtained by NewChrome.
	CloseChrome(context.Context, *empty.Empty) (*empty.Empty, error)
	// OpenChromePage opens a chrome page.
	OpenChromePage(context.Context, *empty.Empty) (*empty.Empty, error)
	// ClickChromeAddressBar clicks on the address bar.
	ClickChromeAddressBar(context.Context, *empty.Empty) (*empty.Empty, error)
	// TouchChromeAddressBar sends a tap on the touch screen to touch on the address bar.
	TouchChromeAddressBar(context.Context, *empty.Empty) (*empty.Empty, error)
	// CheckVirtualKeyboardIsPresent checks whether the virtual keyboard is present.
	CheckVirtualKeyboardIsPresent(context.Context, *CheckVirtualKeyboardRequest) (*CheckVirtualKeyboardResponse, error)
}

// UnimplementedCheckVirtualKeyboardServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCheckVirtualKeyboardServiceServer struct {
}

func (*UnimplementedCheckVirtualKeyboardServiceServer) NewChromeLoggedIn(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewChromeLoggedIn not implemented")
}
func (*UnimplementedCheckVirtualKeyboardServiceServer) CloseChrome(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseChrome not implemented")
}
func (*UnimplementedCheckVirtualKeyboardServiceServer) OpenChromePage(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenChromePage not implemented")
}
func (*UnimplementedCheckVirtualKeyboardServiceServer) ClickChromeAddressBar(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClickChromeAddressBar not implemented")
}
func (*UnimplementedCheckVirtualKeyboardServiceServer) TouchChromeAddressBar(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TouchChromeAddressBar not implemented")
}
func (*UnimplementedCheckVirtualKeyboardServiceServer) CheckVirtualKeyboardIsPresent(context.Context, *CheckVirtualKeyboardRequest) (*CheckVirtualKeyboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckVirtualKeyboardIsPresent not implemented")
}

func RegisterCheckVirtualKeyboardServiceServer(s *grpc.Server, srv CheckVirtualKeyboardServiceServer) {
	s.RegisterService(&_CheckVirtualKeyboardService_serviceDesc, srv)
}

func _CheckVirtualKeyboardService_NewChromeLoggedIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckVirtualKeyboardServiceServer).NewChromeLoggedIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.CheckVirtualKeyboardService/NewChromeLoggedIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckVirtualKeyboardServiceServer).NewChromeLoggedIn(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckVirtualKeyboardService_CloseChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckVirtualKeyboardServiceServer).CloseChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.CheckVirtualKeyboardService/CloseChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckVirtualKeyboardServiceServer).CloseChrome(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckVirtualKeyboardService_OpenChromePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckVirtualKeyboardServiceServer).OpenChromePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.CheckVirtualKeyboardService/OpenChromePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckVirtualKeyboardServiceServer).OpenChromePage(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckVirtualKeyboardService_ClickChromeAddressBar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckVirtualKeyboardServiceServer).ClickChromeAddressBar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.CheckVirtualKeyboardService/ClickChromeAddressBar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckVirtualKeyboardServiceServer).ClickChromeAddressBar(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckVirtualKeyboardService_TouchChromeAddressBar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckVirtualKeyboardServiceServer).TouchChromeAddressBar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.CheckVirtualKeyboardService/TouchChromeAddressBar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckVirtualKeyboardServiceServer).TouchChromeAddressBar(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckVirtualKeyboardService_CheckVirtualKeyboardIsPresent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckVirtualKeyboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckVirtualKeyboardServiceServer).CheckVirtualKeyboardIsPresent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.CheckVirtualKeyboardService/CheckVirtualKeyboardIsPresent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckVirtualKeyboardServiceServer).CheckVirtualKeyboardIsPresent(ctx, req.(*CheckVirtualKeyboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CheckVirtualKeyboardService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.ui.CheckVirtualKeyboardService",
	HandlerType: (*CheckVirtualKeyboardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewChromeLoggedIn",
			Handler:    _CheckVirtualKeyboardService_NewChromeLoggedIn_Handler,
		},
		{
			MethodName: "CloseChrome",
			Handler:    _CheckVirtualKeyboardService_CloseChrome_Handler,
		},
		{
			MethodName: "OpenChromePage",
			Handler:    _CheckVirtualKeyboardService_OpenChromePage_Handler,
		},
		{
			MethodName: "ClickChromeAddressBar",
			Handler:    _CheckVirtualKeyboardService_ClickChromeAddressBar_Handler,
		},
		{
			MethodName: "TouchChromeAddressBar",
			Handler:    _CheckVirtualKeyboardService_TouchChromeAddressBar_Handler,
		},
		{
			MethodName: "CheckVirtualKeyboardIsPresent",
			Handler:    _CheckVirtualKeyboardService_CheckVirtualKeyboardIsPresent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "check_virtual_keyboard_service.proto",
}
