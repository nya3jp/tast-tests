// Code generated by protoc-gen-go. DO NOT EDIT.
// source: screenlock_service.proto

package ui

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("screenlock_service.proto", fileDescriptor_93218b2b2c8bbbd4) }

var fileDescriptor_93218b2b2c8bbbd4 = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x28, 0x4e, 0x2e, 0x4a,
	0x4d, 0xcd, 0xcb, 0xc9, 0x4f, 0xce, 0x8e, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x29, 0x49, 0x2c, 0x2e, 0xd1, 0x4b, 0x2e, 0xca, 0x2f, 0xd6,
	0x2b, 0xcd, 0x94, 0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0xcb, 0x25, 0x95, 0xa6,
	0xe9, 0xa7, 0xe6, 0x16, 0x94, 0x54, 0x42, 0x94, 0x1a, 0xf5, 0x30, 0x71, 0x09, 0x06, 0x83, 0xcd,
	0xf1, 0xc9, 0x4f, 0xce, 0x0e, 0x86, 0x18, 0x23, 0x64, 0xcf, 0xc5, 0x1d, 0x94, 0x5a, 0x5a, 0x9c,
	0xea, 0x9c, 0x51, 0x94, 0x9f, 0x9b, 0x2a, 0x24, 0xa6, 0x07, 0x31, 0x42, 0x0f, 0x66, 0x84, 0x9e,
	0x2b, 0xc8, 0x08, 0x29, 0x1c, 0xe2, 0x4a, 0x0c, 0x42, 0xb6, 0x5c, 0x9c, 0x7e, 0xa9, 0xe5, 0x64,
	0x6b, 0xb7, 0xe7, 0xe2, 0x76, 0xce, 0xc9, 0xa7, 0xc0, 0x7e, 0x33, 0x2e, 0x16, 0x90, 0x7f, 0x48,
	0xd5, 0xe9, 0xa4, 0x14, 0xa5, 0x90, 0x0c, 0xb2, 0x33, 0xb3, 0x34, 0x37, 0xbf, 0x58, 0x1f, 0x14,
	0x8c, 0xfa, 0xd0, 0xa0, 0x2d, 0xd6, 0x07, 0x85, 0xa7, 0x7e, 0x69, 0x66, 0x12, 0x1b, 0x58, 0x8f,
	0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x72, 0xf4, 0x76, 0x39, 0x80, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ScreenLockServiceClient is the client API for ScreenLockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScreenLockServiceClient interface {
	// ReuseChrome reuses the exisiting Chrome session.
	ReuseChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// NewChrome logs into a Chrome session as a fake user. CloseChrome must be called later
	// to clean up the associated resources.
	NewChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// CloseChrome releases the resources obtained by NewChrome.
	CloseChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Lock performs the operation to lock the screen. Implementing Lock
	// would be equivalent to pressing "Search+L" on DUT. This is useful for
	// test behaviors to be verified under the locked screen condition, such as
	// pressing power keys at various lengths.
	Lock(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type screenLockServiceClient struct {
	cc *grpc.ClientConn
}

func NewScreenLockServiceClient(cc *grpc.ClientConn) ScreenLockServiceClient {
	return &screenLockServiceClient{cc}
}

func (c *screenLockServiceClient) ReuseChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.ScreenLockService/ReuseChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *screenLockServiceClient) NewChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.ScreenLockService/NewChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *screenLockServiceClient) CloseChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.ScreenLockService/CloseChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *screenLockServiceClient) Lock(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.ScreenLockService/Lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScreenLockServiceServer is the server API for ScreenLockService service.
type ScreenLockServiceServer interface {
	// ReuseChrome reuses the exisiting Chrome session.
	ReuseChrome(context.Context, *empty.Empty) (*empty.Empty, error)
	// NewChrome logs into a Chrome session as a fake user. CloseChrome must be called later
	// to clean up the associated resources.
	NewChrome(context.Context, *empty.Empty) (*empty.Empty, error)
	// CloseChrome releases the resources obtained by NewChrome.
	CloseChrome(context.Context, *empty.Empty) (*empty.Empty, error)
	// Lock performs the operation to lock the screen. Implementing Lock
	// would be equivalent to pressing "Search+L" on DUT. This is useful for
	// test behaviors to be verified under the locked screen condition, such as
	// pressing power keys at various lengths.
	Lock(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedScreenLockServiceServer can be embedded to have forward compatible implementations.
type UnimplementedScreenLockServiceServer struct {
}

func (*UnimplementedScreenLockServiceServer) ReuseChrome(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReuseChrome not implemented")
}
func (*UnimplementedScreenLockServiceServer) NewChrome(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewChrome not implemented")
}
func (*UnimplementedScreenLockServiceServer) CloseChrome(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseChrome not implemented")
}
func (*UnimplementedScreenLockServiceServer) Lock(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}

func RegisterScreenLockServiceServer(s *grpc.Server, srv ScreenLockServiceServer) {
	s.RegisterService(&_ScreenLockService_serviceDesc, srv)
}

func _ScreenLockService_ReuseChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScreenLockServiceServer).ReuseChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.ScreenLockService/ReuseChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScreenLockServiceServer).ReuseChrome(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScreenLockService_NewChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScreenLockServiceServer).NewChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.ScreenLockService/NewChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScreenLockServiceServer).NewChrome(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScreenLockService_CloseChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScreenLockServiceServer).CloseChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.ScreenLockService/CloseChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScreenLockServiceServer).CloseChrome(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScreenLockService_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScreenLockServiceServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.ScreenLockService/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScreenLockServiceServer).Lock(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ScreenLockService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.ui.ScreenLockService",
	HandlerType: (*ScreenLockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReuseChrome",
			Handler:    _ScreenLockService_ReuseChrome_Handler,
		},
		{
			MethodName: "NewChrome",
			Handler:    _ScreenLockService_NewChrome_Handler,
		},
		{
			MethodName: "CloseChrome",
			Handler:    _ScreenLockService_CloseChrome_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _ScreenLockService_Lock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "screenlock_service.proto",
}
