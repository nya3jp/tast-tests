// Copyright 2021 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: tconn_service.proto

package ui

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EvalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr string `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *EvalRequest) Reset() {
	*x = EvalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tconn_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvalRequest) ProtoMessage() {}

func (x *EvalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tconn_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvalRequest.ProtoReflect.Descriptor instead.
func (*EvalRequest) Descriptor() ([]byte, []int) {
	return file_tconn_service_proto_rawDescGZIP(), []int{0}
}

func (x *EvalRequest) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

type CallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fn   string            `protobuf:"bytes,1,opt,name=fn,proto3" json:"fn,omitempty"`
	Args []*structpb.Value `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *CallRequest) Reset() {
	*x = CallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tconn_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallRequest) ProtoMessage() {}

func (x *CallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tconn_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallRequest.ProtoReflect.Descriptor instead.
func (*CallRequest) Descriptor() ([]byte, []int) {
	return file_tconn_service_proto_rawDescGZIP(), []int{1}
}

func (x *CallRequest) GetFn() string {
	if x != nil {
		return x.Fn
	}
	return ""
}

func (x *CallRequest) GetArgs() []*structpb.Value {
	if x != nil {
		return x.Args
	}
	return nil
}

type WaitForExprRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr        string `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	TimeoutSecs uint32 `protobuf:"varint,2,opt,name=timeout_secs,json=timeoutSecs,proto3" json:"timeout_secs,omitempty"`
	FailOnErr   bool   `protobuf:"varint,3,opt,name=fail_on_err,json=failOnErr,proto3" json:"fail_on_err,omitempty"`
}

func (x *WaitForExprRequest) Reset() {
	*x = WaitForExprRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tconn_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForExprRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForExprRequest) ProtoMessage() {}

func (x *WaitForExprRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tconn_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForExprRequest.ProtoReflect.Descriptor instead.
func (*WaitForExprRequest) Descriptor() ([]byte, []int) {
	return file_tconn_service_proto_rawDescGZIP(), []int{2}
}

func (x *WaitForExprRequest) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *WaitForExprRequest) GetTimeoutSecs() uint32 {
	if x != nil {
		return x.TimeoutSecs
	}
	return 0
}

func (x *WaitForExprRequest) GetFailOnErr() bool {
	if x != nil {
		return x.FailOnErr
	}
	return false
}

var File_tconn_service_proto protoreflect.FileDescriptor

var file_tconn_service_proto_rawDesc = []byte{
	0x0a, 0x13, 0x74, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x2e, 0x75, 0x69, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x21,
	0x0a, 0x0b, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x78, 0x70,
	0x72, 0x22, 0x49, 0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x66, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x66, 0x6e,
	0x12, 0x2a, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x6b, 0x0a, 0x12,
	0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x66, 0x61, 0x69,
	0x6c, 0x5f, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x66, 0x61, 0x69, 0x6c, 0x4f, 0x6e, 0x45, 0x72, 0x72, 0x32, 0x98, 0x02, 0x0a, 0x0c, 0x54, 0x63,
	0x6f, 0x6e, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x45, 0x76,
	0x61, 0x6c, 0x12, 0x19, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x75,
	0x69, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x19, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x75, 0x69, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0b, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x45,
	0x78, 0x70, 0x72, 0x12, 0x20, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e,
	0x75, 0x69, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x43, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x42, 0x22, 0x5a, 0x20, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d,
	0x6f, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x75, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tconn_service_proto_rawDescOnce sync.Once
	file_tconn_service_proto_rawDescData = file_tconn_service_proto_rawDesc
)

func file_tconn_service_proto_rawDescGZIP() []byte {
	file_tconn_service_proto_rawDescOnce.Do(func() {
		file_tconn_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_tconn_service_proto_rawDescData)
	})
	return file_tconn_service_proto_rawDescData
}

var file_tconn_service_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_tconn_service_proto_goTypes = []interface{}{
	(*EvalRequest)(nil),        // 0: tast.cros.ui.EvalRequest
	(*CallRequest)(nil),        // 1: tast.cros.ui.CallRequest
	(*WaitForExprRequest)(nil), // 2: tast.cros.ui.WaitForExprRequest
	(*structpb.Value)(nil),     // 3: google.protobuf.Value
	(*emptypb.Empty)(nil),      // 4: google.protobuf.Empty
}
var file_tconn_service_proto_depIdxs = []int32{
	3, // 0: tast.cros.ui.CallRequest.args:type_name -> google.protobuf.Value
	0, // 1: tast.cros.ui.TconnService.Eval:input_type -> tast.cros.ui.EvalRequest
	1, // 2: tast.cros.ui.TconnService.Call:input_type -> tast.cros.ui.CallRequest
	2, // 3: tast.cros.ui.TconnService.WaitForExpr:input_type -> tast.cros.ui.WaitForExprRequest
	4, // 4: tast.cros.ui.TconnService.ResetAutomation:input_type -> google.protobuf.Empty
	3, // 5: tast.cros.ui.TconnService.Eval:output_type -> google.protobuf.Value
	3, // 6: tast.cros.ui.TconnService.Call:output_type -> google.protobuf.Value
	4, // 7: tast.cros.ui.TconnService.WaitForExpr:output_type -> google.protobuf.Empty
	4, // 8: tast.cros.ui.TconnService.ResetAutomation:output_type -> google.protobuf.Empty
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_tconn_service_proto_init() }
func file_tconn_service_proto_init() {
	if File_tconn_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tconn_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tconn_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tconn_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForExprRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tconn_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tconn_service_proto_goTypes,
		DependencyIndexes: file_tconn_service_proto_depIdxs,
		MessageInfos:      file_tconn_service_proto_msgTypes,
	}.Build()
	File_tconn_service_proto = out.File
	file_tconn_service_proto_rawDesc = nil
	file_tconn_service_proto_goTypes = nil
	file_tconn_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TconnServiceClient is the client API for TconnService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TconnServiceClient interface {
	// Eval evaluates expr on the test connection. See Conn.Eval for details.
	Eval(ctx context.Context, in *EvalRequest, opts ...grpc.CallOption) (*structpb.Value, error)
	// Call calls the javascript fn with given args. See Conn.Call for details
	Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*structpb.Value, error)
	// WaitForExpr repeatedly evaluates the JavaScript expression expr until it evaluates to true.
	// Errors returned by Eval are treated the same as expr == false unless fail_on_err is true.
	WaitForExpr(ctx context.Context, in *WaitForExprRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ResetAutomation resets the automation API feature. The automation API feature
	// is widely used to control the UI, but keeping it activated sometimes causes
	// performance drawback on low-end devices. This method deactivates the
	// automation API and resets internal states. See: https://crbug.com/1096719.
	ResetAutomation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type tconnServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTconnServiceClient(cc grpc.ClientConnInterface) TconnServiceClient {
	return &tconnServiceClient{cc}
}

func (c *tconnServiceClient) Eval(ctx context.Context, in *EvalRequest, opts ...grpc.CallOption) (*structpb.Value, error) {
	out := new(structpb.Value)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.TconnService/Eval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tconnServiceClient) Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*structpb.Value, error) {
	out := new(structpb.Value)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.TconnService/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tconnServiceClient) WaitForExpr(ctx context.Context, in *WaitForExprRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.TconnService/WaitForExpr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tconnServiceClient) ResetAutomation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.TconnService/ResetAutomation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TconnServiceServer is the server API for TconnService service.
type TconnServiceServer interface {
	// Eval evaluates expr on the test connection. See Conn.Eval for details.
	Eval(context.Context, *EvalRequest) (*structpb.Value, error)
	// Call calls the javascript fn with given args. See Conn.Call for details
	Call(context.Context, *CallRequest) (*structpb.Value, error)
	// WaitForExpr repeatedly evaluates the JavaScript expression expr until it evaluates to true.
	// Errors returned by Eval are treated the same as expr == false unless fail_on_err is true.
	WaitForExpr(context.Context, *WaitForExprRequest) (*emptypb.Empty, error)
	// ResetAutomation resets the automation API feature. The automation API feature
	// is widely used to control the UI, but keeping it activated sometimes causes
	// performance drawback on low-end devices. This method deactivates the
	// automation API and resets internal states. See: https://crbug.com/1096719.
	ResetAutomation(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
}

// UnimplementedTconnServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTconnServiceServer struct {
}

func (*UnimplementedTconnServiceServer) Eval(context.Context, *EvalRequest) (*structpb.Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Eval not implemented")
}
func (*UnimplementedTconnServiceServer) Call(context.Context, *CallRequest) (*structpb.Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (*UnimplementedTconnServiceServer) WaitForExpr(context.Context, *WaitForExprRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForExpr not implemented")
}
func (*UnimplementedTconnServiceServer) ResetAutomation(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetAutomation not implemented")
}

func RegisterTconnServiceServer(s *grpc.Server, srv TconnServiceServer) {
	s.RegisterService(&_TconnService_serviceDesc, srv)
}

func _TconnService_Eval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TconnServiceServer).Eval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.TconnService/Eval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TconnServiceServer).Eval(ctx, req.(*EvalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TconnService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TconnServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.TconnService/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TconnServiceServer).Call(ctx, req.(*CallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TconnService_WaitForExpr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitForExprRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TconnServiceServer).WaitForExpr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.TconnService/WaitForExpr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TconnServiceServer).WaitForExpr(ctx, req.(*WaitForExprRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TconnService_ResetAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TconnServiceServer).ResetAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.TconnService/ResetAutomation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TconnServiceServer).ResetAutomation(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _TconnService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.ui.TconnService",
	HandlerType: (*TconnServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Eval",
			Handler:    _TconnService_Eval_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _TconnService_Call_Handler,
		},
		{
			MethodName: "WaitForExpr",
			Handler:    _TconnService_WaitForExpr_Handler,
		},
		{
			MethodName: "ResetAutomation",
			Handler:    _TconnService_ResetAutomation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tconn_service.proto",
}
