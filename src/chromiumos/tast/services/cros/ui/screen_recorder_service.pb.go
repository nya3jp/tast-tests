// Copyright 2021 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: screen_recorder_service.proto

package ui

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StopSaveReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FileName specified the location in the file system where the recording will
	// be saved.
	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *StopSaveReleaseRequest) Reset() {
	*x = StopSaveReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_screen_recorder_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopSaveReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopSaveReleaseRequest) ProtoMessage() {}

func (x *StopSaveReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_screen_recorder_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopSaveReleaseRequest.ProtoReflect.Descriptor instead.
func (*StopSaveReleaseRequest) Descriptor() ([]byte, []int) {
	return file_screen_recorder_service_proto_rawDescGZIP(), []int{0}
}

func (x *StopSaveReleaseRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

var File_screen_recorder_service_proto protoreflect.FileDescriptor

var file_screen_recorder_service_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0c, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x75, 0x69, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x35, 0x0a, 0x16, 0x53, 0x74,
	0x6f, 0x70, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x32, 0xa5, 0x01, 0x0a, 0x15, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x61,
	0x76, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x24, 0x2e, 0x74, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x75, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x61, 0x76,
	0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x22, 0x5a, 0x20, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x75, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_screen_recorder_service_proto_rawDescOnce sync.Once
	file_screen_recorder_service_proto_rawDescData = file_screen_recorder_service_proto_rawDesc
)

func file_screen_recorder_service_proto_rawDescGZIP() []byte {
	file_screen_recorder_service_proto_rawDescOnce.Do(func() {
		file_screen_recorder_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_screen_recorder_service_proto_rawDescData)
	})
	return file_screen_recorder_service_proto_rawDescData
}

var file_screen_recorder_service_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_screen_recorder_service_proto_goTypes = []interface{}{
	(*StopSaveReleaseRequest)(nil), // 0: tast.cros.ui.StopSaveReleaseRequest
	(*empty.Empty)(nil),            // 1: google.protobuf.Empty
}
var file_screen_recorder_service_proto_depIdxs = []int32{
	1, // 0: tast.cros.ui.ScreenRecorderService.Start:input_type -> google.protobuf.Empty
	0, // 1: tast.cros.ui.ScreenRecorderService.StopSaveRelease:input_type -> tast.cros.ui.StopSaveReleaseRequest
	1, // 2: tast.cros.ui.ScreenRecorderService.Start:output_type -> google.protobuf.Empty
	1, // 3: tast.cros.ui.ScreenRecorderService.StopSaveRelease:output_type -> google.protobuf.Empty
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_screen_recorder_service_proto_init() }
func file_screen_recorder_service_proto_init() {
	if File_screen_recorder_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_screen_recorder_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopSaveReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_screen_recorder_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_screen_recorder_service_proto_goTypes,
		DependencyIndexes: file_screen_recorder_service_proto_depIdxs,
		MessageInfos:      file_screen_recorder_service_proto_msgTypes,
	}.Build()
	File_screen_recorder_service_proto = out.File
	file_screen_recorder_service_proto_rawDesc = nil
	file_screen_recorder_service_proto_goTypes = nil
	file_screen_recorder_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ScreenRecorderServiceClient is the client API for ScreenRecorderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScreenRecorderServiceClient interface {
	// Start creates a new media recorder and starts to record the screen.
	// There can be only a single recording in progress at a time.
	Start(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// StopSaveRelease stops, saves the recording to the specified location and
	// releases the screen recorder.
	StopSaveRelease(ctx context.Context, in *StopSaveReleaseRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type screenRecorderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScreenRecorderServiceClient(cc grpc.ClientConnInterface) ScreenRecorderServiceClient {
	return &screenRecorderServiceClient{cc}
}

func (c *screenRecorderServiceClient) Start(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.ScreenRecorderService/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *screenRecorderServiceClient) StopSaveRelease(ctx context.Context, in *StopSaveReleaseRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.ui.ScreenRecorderService/StopSaveRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScreenRecorderServiceServer is the server API for ScreenRecorderService service.
type ScreenRecorderServiceServer interface {
	// Start creates a new media recorder and starts to record the screen.
	// There can be only a single recording in progress at a time.
	Start(context.Context, *empty.Empty) (*empty.Empty, error)
	// StopSaveRelease stops, saves the recording to the specified location and
	// releases the screen recorder.
	StopSaveRelease(context.Context, *StopSaveReleaseRequest) (*empty.Empty, error)
}

// UnimplementedScreenRecorderServiceServer can be embedded to have forward compatible implementations.
type UnimplementedScreenRecorderServiceServer struct {
}

func (*UnimplementedScreenRecorderServiceServer) Start(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedScreenRecorderServiceServer) StopSaveRelease(context.Context, *StopSaveReleaseRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSaveRelease not implemented")
}

func RegisterScreenRecorderServiceServer(s *grpc.Server, srv ScreenRecorderServiceServer) {
	s.RegisterService(&_ScreenRecorderService_serviceDesc, srv)
}

func _ScreenRecorderService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScreenRecorderServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.ScreenRecorderService/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScreenRecorderServiceServer).Start(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScreenRecorderService_StopSaveRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopSaveReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScreenRecorderServiceServer).StopSaveRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.ui.ScreenRecorderService/StopSaveRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScreenRecorderServiceServer).StopSaveRelease(ctx, req.(*StopSaveReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ScreenRecorderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.ui.ScreenRecorderService",
	HandlerType: (*ScreenRecorderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _ScreenRecorderService_Start_Handler,
		},
		{
			MethodName: "StopSaveRelease",
			Handler:    _ScreenRecorderService_StopSaveRelease_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "screen_recorder_service.proto",
}
