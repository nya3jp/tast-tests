// Copyright 2022 The ChromiumOS Authors.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: usb_service.proto

package power

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MountPathResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MountPaths []string `protobuf:"bytes,1,rep,name=MountPaths,proto3" json:"MountPaths,omitempty"`
}

func (x *MountPathResponse) Reset() {
	*x = MountPathResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usb_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountPathResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountPathResponse) ProtoMessage() {}

func (x *MountPathResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usb_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountPathResponse.ProtoReflect.Descriptor instead.
func (*MountPathResponse) Descriptor() ([]byte, []int) {
	return file_usb_service_proto_rawDescGZIP(), []int{0}
}

func (x *MountPathResponse) GetMountPaths() []string {
	if x != nil {
		return x.MountPaths
	}
	return nil
}

type TestFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName            string `protobuf:"bytes,1,opt,name=FileName,proto3" json:"FileName,omitempty"`
	SourceFilePath      string `protobuf:"bytes,2,opt,name=SourceFilePath,proto3" json:"SourceFilePath,omitempty"`
	DestinationFilePath string `protobuf:"bytes,3,opt,name=DestinationFilePath,proto3" json:"DestinationFilePath,omitempty"`
	FileSize            int64  `protobuf:"varint,4,opt,name=FileSize,proto3" json:"FileSize,omitempty"`
	Path                string `protobuf:"bytes,5,opt,name=Path,proto3" json:"Path,omitempty"`
}

func (x *TestFileRequest) Reset() {
	*x = TestFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usb_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestFileRequest) ProtoMessage() {}

func (x *TestFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usb_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestFileRequest.ProtoReflect.Descriptor instead.
func (*TestFileRequest) Descriptor() ([]byte, []int) {
	return file_usb_service_proto_rawDescGZIP(), []int{1}
}

func (x *TestFileRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *TestFileRequest) GetSourceFilePath() string {
	if x != nil {
		return x.SourceFilePath
	}
	return ""
}

func (x *TestFileRequest) GetDestinationFilePath() string {
	if x != nil {
		return x.DestinationFilePath
	}
	return ""
}

func (x *TestFileRequest) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *TestFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type TestFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path              string `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	FileChecksumValue []byte `protobuf:"bytes,2,opt,name=FileChecksumValue,proto3" json:"FileChecksumValue,omitempty"`
}

func (x *TestFileResponse) Reset() {
	*x = TestFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usb_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestFileResponse) ProtoMessage() {}

func (x *TestFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usb_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestFileResponse.ProtoReflect.Descriptor instead.
func (*TestFileResponse) Descriptor() ([]byte, []int) {
	return file_usb_service_proto_rawDescGZIP(), []int{2}
}

func (x *TestFileResponse) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TestFileResponse) GetFileChecksumValue() []byte {
	if x != nil {
		return x.FileChecksumValue
	}
	return nil
}

var File_usb_service_proto protoreflect.FileDescriptor

var file_usb_service_proto_rawDesc = []byte{
	0x0a, 0x11, 0x75, 0x73, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x33, 0x0a, 0x11, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x30,
	0x0a, 0x13, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68,
	0x22, 0x54, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x32, 0xe0, 0x04, 0x0a, 0x0a, 0x55, 0x53, 0x42, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x4e, 0x65, 0x77, 0x43, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x52, 0x65, 0x75, 0x73, 0x65, 0x43, 0x68,
	0x72, 0x6f, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0d, 0x55, 0x53, 0x42, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x22, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x74, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x61,
	0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x55, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x12, 0x20, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x08, 0x43, 0x6f, 0x70, 0x79, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x48, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x2e,
	0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x25, 0x5a, 0x23, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_usb_service_proto_rawDescOnce sync.Once
	file_usb_service_proto_rawDescData = file_usb_service_proto_rawDesc
)

func file_usb_service_proto_rawDescGZIP() []byte {
	file_usb_service_proto_rawDescOnce.Do(func() {
		file_usb_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_usb_service_proto_rawDescData)
	})
	return file_usb_service_proto_rawDescData
}

var file_usb_service_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_usb_service_proto_goTypes = []interface{}{
	(*MountPathResponse)(nil), // 0: tast.cros.power.MountPathResponse
	(*TestFileRequest)(nil),   // 1: tast.cros.power.TestFileRequest
	(*TestFileResponse)(nil),  // 2: tast.cros.power.TestFileResponse
	(*empty.Empty)(nil),       // 3: google.protobuf.Empty
}
var file_usb_service_proto_depIdxs = []int32{
	3, // 0: tast.cros.power.USBService.NewChrome:input_type -> google.protobuf.Empty
	3, // 1: tast.cros.power.USBService.CloseChrome:input_type -> google.protobuf.Empty
	3, // 2: tast.cros.power.USBService.ReuseChrome:input_type -> google.protobuf.Empty
	3, // 3: tast.cros.power.USBService.USBMountPaths:input_type -> google.protobuf.Empty
	1, // 4: tast.cros.power.USBService.GenerateTestFile:input_type -> tast.cros.power.TestFileRequest
	1, // 5: tast.cros.power.USBService.FileChecksum:input_type -> tast.cros.power.TestFileRequest
	1, // 6: tast.cros.power.USBService.CopyFile:input_type -> tast.cros.power.TestFileRequest
	1, // 7: tast.cros.power.USBService.RemoveFile:input_type -> tast.cros.power.TestFileRequest
	3, // 8: tast.cros.power.USBService.NewChrome:output_type -> google.protobuf.Empty
	3, // 9: tast.cros.power.USBService.CloseChrome:output_type -> google.protobuf.Empty
	3, // 10: tast.cros.power.USBService.ReuseChrome:output_type -> google.protobuf.Empty
	0, // 11: tast.cros.power.USBService.USBMountPaths:output_type -> tast.cros.power.MountPathResponse
	2, // 12: tast.cros.power.USBService.GenerateTestFile:output_type -> tast.cros.power.TestFileResponse
	2, // 13: tast.cros.power.USBService.FileChecksum:output_type -> tast.cros.power.TestFileResponse
	3, // 14: tast.cros.power.USBService.CopyFile:output_type -> google.protobuf.Empty
	3, // 15: tast.cros.power.USBService.RemoveFile:output_type -> google.protobuf.Empty
	8, // [8:16] is the sub-list for method output_type
	0, // [0:8] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_usb_service_proto_init() }
func file_usb_service_proto_init() {
	if File_usb_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_usb_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MountPathResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usb_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usb_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_usb_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_usb_service_proto_goTypes,
		DependencyIndexes: file_usb_service_proto_depIdxs,
		MessageInfos:      file_usb_service_proto_msgTypes,
	}.Build()
	File_usb_service_proto = out.File
	file_usb_service_proto_rawDesc = nil
	file_usb_service_proto_goTypes = nil
	file_usb_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// USBServiceClient is the client API for USBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type USBServiceClient interface {
	// NewChrome logs into a Chrome session as a fake user. Close must be called later
	// to clean up the associated resources.
	NewChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// CloseChrome releases the resources obtained by New.
	CloseChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// ReuseChrome passes an Option to New to make Chrome reuse the existing login session.
	ReuseChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// USBMountPaths returns the mount paths for USB.
	USBMountPaths(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MountPathResponse, error)
	// GenerateTestFile generates a new temporary test file for testing, with
	// provided filename and filesize.
	GenerateTestFile(ctx context.Context, in *TestFileRequest, opts ...grpc.CallOption) (*TestFileResponse, error)
	// FileChecksum checks the checksum for the input file.
	FileChecksum(ctx context.Context, in *TestFileRequest, opts ...grpc.CallOption) (*TestFileResponse, error)
	// CopyFile performs copying of file from given source to destination.
	CopyFile(ctx context.Context, in *TestFileRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// RemoveFile will removes given path file.
	RemoveFile(ctx context.Context, in *TestFileRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type uSBServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUSBServiceClient(cc grpc.ClientConnInterface) USBServiceClient {
	return &uSBServiceClient{cc}
}

func (c *uSBServiceClient) NewChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.power.USBService/NewChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uSBServiceClient) CloseChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.power.USBService/CloseChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uSBServiceClient) ReuseChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.power.USBService/ReuseChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uSBServiceClient) USBMountPaths(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MountPathResponse, error) {
	out := new(MountPathResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.power.USBService/USBMountPaths", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uSBServiceClient) GenerateTestFile(ctx context.Context, in *TestFileRequest, opts ...grpc.CallOption) (*TestFileResponse, error) {
	out := new(TestFileResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.power.USBService/GenerateTestFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uSBServiceClient) FileChecksum(ctx context.Context, in *TestFileRequest, opts ...grpc.CallOption) (*TestFileResponse, error) {
	out := new(TestFileResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.power.USBService/FileChecksum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uSBServiceClient) CopyFile(ctx context.Context, in *TestFileRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.power.USBService/CopyFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uSBServiceClient) RemoveFile(ctx context.Context, in *TestFileRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.power.USBService/RemoveFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// USBServiceServer is the server API for USBService service.
type USBServiceServer interface {
	// NewChrome logs into a Chrome session as a fake user. Close must be called later
	// to clean up the associated resources.
	NewChrome(context.Context, *empty.Empty) (*empty.Empty, error)
	// CloseChrome releases the resources obtained by New.
	CloseChrome(context.Context, *empty.Empty) (*empty.Empty, error)
	// ReuseChrome passes an Option to New to make Chrome reuse the existing login session.
	ReuseChrome(context.Context, *empty.Empty) (*empty.Empty, error)
	// USBMountPaths returns the mount paths for USB.
	USBMountPaths(context.Context, *empty.Empty) (*MountPathResponse, error)
	// GenerateTestFile generates a new temporary test file for testing, with
	// provided filename and filesize.
	GenerateTestFile(context.Context, *TestFileRequest) (*TestFileResponse, error)
	// FileChecksum checks the checksum for the input file.
	FileChecksum(context.Context, *TestFileRequest) (*TestFileResponse, error)
	// CopyFile performs copying of file from given source to destination.
	CopyFile(context.Context, *TestFileRequest) (*empty.Empty, error)
	// RemoveFile will removes given path file.
	RemoveFile(context.Context, *TestFileRequest) (*empty.Empty, error)
}

// UnimplementedUSBServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUSBServiceServer struct {
}

func (*UnimplementedUSBServiceServer) NewChrome(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewChrome not implemented")
}
func (*UnimplementedUSBServiceServer) CloseChrome(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseChrome not implemented")
}
func (*UnimplementedUSBServiceServer) ReuseChrome(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReuseChrome not implemented")
}
func (*UnimplementedUSBServiceServer) USBMountPaths(context.Context, *empty.Empty) (*MountPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method USBMountPaths not implemented")
}
func (*UnimplementedUSBServiceServer) GenerateTestFile(context.Context, *TestFileRequest) (*TestFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTestFile not implemented")
}
func (*UnimplementedUSBServiceServer) FileChecksum(context.Context, *TestFileRequest) (*TestFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileChecksum not implemented")
}
func (*UnimplementedUSBServiceServer) CopyFile(context.Context, *TestFileRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyFile not implemented")
}
func (*UnimplementedUSBServiceServer) RemoveFile(context.Context, *TestFileRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFile not implemented")
}

func RegisterUSBServiceServer(s *grpc.Server, srv USBServiceServer) {
	s.RegisterService(&_USBService_serviceDesc, srv)
}

func _USBService_NewChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(USBServiceServer).NewChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.power.USBService/NewChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(USBServiceServer).NewChrome(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _USBService_CloseChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(USBServiceServer).CloseChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.power.USBService/CloseChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(USBServiceServer).CloseChrome(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _USBService_ReuseChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(USBServiceServer).ReuseChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.power.USBService/ReuseChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(USBServiceServer).ReuseChrome(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _USBService_USBMountPaths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(USBServiceServer).USBMountPaths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.power.USBService/USBMountPaths",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(USBServiceServer).USBMountPaths(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _USBService_GenerateTestFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(USBServiceServer).GenerateTestFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.power.USBService/GenerateTestFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(USBServiceServer).GenerateTestFile(ctx, req.(*TestFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _USBService_FileChecksum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(USBServiceServer).FileChecksum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.power.USBService/FileChecksum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(USBServiceServer).FileChecksum(ctx, req.(*TestFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _USBService_CopyFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(USBServiceServer).CopyFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.power.USBService/CopyFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(USBServiceServer).CopyFile(ctx, req.(*TestFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _USBService_RemoveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(USBServiceServer).RemoveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.power.USBService/RemoveFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(USBServiceServer).RemoveFile(ctx, req.(*TestFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _USBService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.power.USBService",
	HandlerType: (*USBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewChrome",
			Handler:    _USBService_NewChrome_Handler,
		},
		{
			MethodName: "CloseChrome",
			Handler:    _USBService_CloseChrome_Handler,
		},
		{
			MethodName: "ReuseChrome",
			Handler:    _USBService_ReuseChrome_Handler,
		},
		{
			MethodName: "USBMountPaths",
			Handler:    _USBService_USBMountPaths_Handler,
		},
		{
			MethodName: "GenerateTestFile",
			Handler:    _USBService_GenerateTestFile_Handler,
		},
		{
			MethodName: "FileChecksum",
			Handler:    _USBService_FileChecksum_Handler,
		},
		{
			MethodName: "CopyFile",
			Handler:    _USBService_CopyFile_Handler,
		},
		{
			MethodName: "RemoveFile",
			Handler:    _USBService_RemoveFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "usb_service.proto",
}
