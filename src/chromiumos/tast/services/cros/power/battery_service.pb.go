// Copyright 2022 The ChromiumOS Authors.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: battery_service.proto

package power

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatteryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPercentage float32 `protobuf:"fixed32,1,opt,name=maxPercentage,proto3" json:"maxPercentage,omitempty"`
}

func (x *BatteryRequest) Reset() {
	*x = BatteryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battery_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatteryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryRequest) ProtoMessage() {}

func (x *BatteryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_battery_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryRequest.ProtoReflect.Descriptor instead.
func (*BatteryRequest) Descriptor() ([]byte, []int) {
	return file_battery_service_proto_rawDescGZIP(), []int{0}
}

func (x *BatteryRequest) GetMaxPercentage() float32 {
	if x != nil {
		return x.MaxPercentage
	}
	return 0
}

var File_battery_service_proto protoreflect.FileDescriptor

var file_battery_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72,
	0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x36, 0x0a, 0x0e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,
	0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x32, 0xcf, 0x01,
	0x0a, 0x0e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x37, 0x0a, 0x03, 0x4e, 0x65, 0x77, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x05, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0c, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x42, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x12, 0x1f, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42,
	0x25, 0x5a, 0x23, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x61,
	0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x73,
	0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_battery_service_proto_rawDescOnce sync.Once
	file_battery_service_proto_rawDescData = file_battery_service_proto_rawDesc
)

func file_battery_service_proto_rawDescGZIP() []byte {
	file_battery_service_proto_rawDescOnce.Do(func() {
		file_battery_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_battery_service_proto_rawDescData)
	})
	return file_battery_service_proto_rawDescData
}

var file_battery_service_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_battery_service_proto_goTypes = []interface{}{
	(*BatteryRequest)(nil), // 0: tast.cros.power.BatteryRequest
	(*empty.Empty)(nil),    // 1: google.protobuf.Empty
}
var file_battery_service_proto_depIdxs = []int32{
	1, // 0: tast.cros.power.BatteryService.New:input_type -> google.protobuf.Empty
	1, // 1: tast.cros.power.BatteryService.Close:input_type -> google.protobuf.Empty
	0, // 2: tast.cros.power.BatteryService.DrainBattery:input_type -> tast.cros.power.BatteryRequest
	1, // 3: tast.cros.power.BatteryService.New:output_type -> google.protobuf.Empty
	1, // 4: tast.cros.power.BatteryService.Close:output_type -> google.protobuf.Empty
	1, // 5: tast.cros.power.BatteryService.DrainBattery:output_type -> google.protobuf.Empty
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_battery_service_proto_init() }
func file_battery_service_proto_init() {
	if File_battery_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_battery_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatteryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_battery_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_battery_service_proto_goTypes,
		DependencyIndexes: file_battery_service_proto_depIdxs,
		MessageInfos:      file_battery_service_proto_msgTypes,
	}.Build()
	File_battery_service_proto = out.File
	file_battery_service_proto_rawDesc = nil
	file_battery_service_proto_goTypes = nil
	file_battery_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BatteryServiceClient is the client API for BatteryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BatteryServiceClient interface {
	// New logs into a Chrome session as a fake user. Close must be called later
	// to clean up the associated resources.
	New(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Close releases the resources obtained by New.
	Close(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// DrainBattery drains DUT battery to specific percentage.
	DrainBattery(ctx context.Context, in *BatteryRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type batteryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBatteryServiceClient(cc grpc.ClientConnInterface) BatteryServiceClient {
	return &batteryServiceClient{cc}
}

func (c *batteryServiceClient) New(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.power.BatteryService/New", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batteryServiceClient) Close(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.power.BatteryService/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batteryServiceClient) DrainBattery(ctx context.Context, in *BatteryRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.power.BatteryService/DrainBattery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BatteryServiceServer is the server API for BatteryService service.
type BatteryServiceServer interface {
	// New logs into a Chrome session as a fake user. Close must be called later
	// to clean up the associated resources.
	New(context.Context, *empty.Empty) (*empty.Empty, error)
	// Close releases the resources obtained by New.
	Close(context.Context, *empty.Empty) (*empty.Empty, error)
	// DrainBattery drains DUT battery to specific percentage.
	DrainBattery(context.Context, *BatteryRequest) (*empty.Empty, error)
}

// UnimplementedBatteryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBatteryServiceServer struct {
}

func (*UnimplementedBatteryServiceServer) New(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method New not implemented")
}
func (*UnimplementedBatteryServiceServer) Close(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedBatteryServiceServer) DrainBattery(context.Context, *BatteryRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DrainBattery not implemented")
}

func RegisterBatteryServiceServer(s *grpc.Server, srv BatteryServiceServer) {
	s.RegisterService(&_BatteryService_serviceDesc, srv)
}

func _BatteryService_New_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatteryServiceServer).New(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.power.BatteryService/New",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatteryServiceServer).New(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatteryService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatteryServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.power.BatteryService/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatteryServiceServer).Close(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatteryService_DrainBattery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatteryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatteryServiceServer).DrainBattery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.power.BatteryService/DrainBattery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatteryServiceServer).DrainBattery(ctx, req.(*BatteryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BatteryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.power.BatteryService",
	HandlerType: (*BatteryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "New",
			Handler:    _BatteryService_New_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _BatteryService_Close_Handler,
		},
		{
			MethodName: "DrainBattery",
			Handler:    _BatteryService_DrainBattery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "battery_service.proto",
}
