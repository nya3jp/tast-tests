// Code generated by protoc-gen-go. DO NOT EDIT.
// source: update_test_service.proto

package lacros

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// BrowserType is to specify the types of supported browsers.
type BrowserType int32

const (
	BrowserType_UNKNOWN         BrowserType = 0
	BrowserType_ASH             BrowserType = 1
	BrowserType_LACROS_ROOTFS   BrowserType = 2
	BrowserType_LACROS_STATEFUL BrowserType = 3
)

var BrowserType_name = map[int32]string{
	0: "UNKNOWN",
	1: "ASH",
	2: "LACROS_ROOTFS",
	3: "LACROS_STATEFUL",
}

var BrowserType_value = map[string]int32{
	"UNKNOWN":         0,
	"ASH":             1,
	"LACROS_ROOTFS":   2,
	"LACROS_STATEFUL": 3,
}

func (x BrowserType) String() string {
	return proto.EnumName(BrowserType_name, int32(x))
}

func (BrowserType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ddd416dc21c25e8a, []int{0}
}

type TestResult_Status int32

const (
	TestResult_NO_STATUS TestResult_Status = 0
	TestResult_PASSED    TestResult_Status = 1
	TestResult_FAILED    TestResult_Status = 2
)

var TestResult_Status_name = map[int32]string{
	0: "NO_STATUS",
	1: "PASSED",
	2: "FAILED",
}

var TestResult_Status_value = map[string]int32{
	"NO_STATUS": 0,
	"PASSED":    1,
	"FAILED":    2,
}

func (x TestResult_Status) String() string {
	return proto.EnumName(TestResult_Status_name, int32(x))
}

func (TestResult_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ddd416dc21c25e8a, []int{1, 0}
}

// BrowserContext is a shared info to configure or check the browser under test.
type BrowserContext struct {
	// The type of supported browsers.
	Browser BrowserType `protobuf:"varint,1,opt,name=browser,proto3,enum=tast.cros.lacros.BrowserType" json:"browser,omitempty"`
	// Chrome options used to launch browser.
	Opts []string `protobuf:"bytes,2,rep,name=opts,proto3" json:"opts,omitempty"`
	// The path in which the browser executable is mounted for use in runtime.
	ExecutablePath string `protobuf:"bytes,3,opt,name=executable_path,json=executablePath,proto3" json:"executable_path,omitempty"`
	// The user data directory.
	ProfilePath string `protobuf:"bytes,4,opt,name=profile_path,json=profilePath,proto3" json:"profile_path,omitempty"`
	// The path in which the browser image file is provisioned. This will be used
	// to check if Lacros under test is installed fine before tests.
	InstallPath          string   `protobuf:"bytes,5,opt,name=install_path,json=installPath,proto3" json:"install_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BrowserContext) Reset()         { *m = BrowserContext{} }
func (m *BrowserContext) String() string { return proto.CompactTextString(m) }
func (*BrowserContext) ProtoMessage()    {}
func (*BrowserContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddd416dc21c25e8a, []int{0}
}

func (m *BrowserContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BrowserContext.Unmarshal(m, b)
}
func (m *BrowserContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BrowserContext.Marshal(b, m, deterministic)
}
func (m *BrowserContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrowserContext.Merge(m, src)
}
func (m *BrowserContext) XXX_Size() int {
	return xxx_messageInfo_BrowserContext.Size(m)
}
func (m *BrowserContext) XXX_DiscardUnknown() {
	xxx_messageInfo_BrowserContext.DiscardUnknown(m)
}

var xxx_messageInfo_BrowserContext proto.InternalMessageInfo

func (m *BrowserContext) GetBrowser() BrowserType {
	if m != nil {
		return m.Browser
	}
	return BrowserType_UNKNOWN
}

func (m *BrowserContext) GetOpts() []string {
	if m != nil {
		return m.Opts
	}
	return nil
}

func (m *BrowserContext) GetExecutablePath() string {
	if m != nil {
		return m.ExecutablePath
	}
	return ""
}

func (m *BrowserContext) GetProfilePath() string {
	if m != nil {
		return m.ProfilePath
	}
	return ""
}

func (m *BrowserContext) GetInstallPath() string {
	if m != nil {
		return m.InstallPath
	}
	return ""
}

// TestResult is detailed test status data for a verification action in a DUT.
type TestResult struct {
	Status               TestResult_Status `protobuf:"varint,1,opt,name=status,proto3,enum=tast.cros.lacros.TestResult_Status" json:"status,omitempty"`
	StatusDetails        string            `protobuf:"bytes,2,opt,name=status_details,json=statusDetails,proto3" json:"status_details,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TestResult) Reset()         { *m = TestResult{} }
func (m *TestResult) String() string { return proto.CompactTextString(m) }
func (*TestResult) ProtoMessage()    {}
func (*TestResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddd416dc21c25e8a, []int{1}
}

func (m *TestResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestResult.Unmarshal(m, b)
}
func (m *TestResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestResult.Marshal(b, m, deterministic)
}
func (m *TestResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResult.Merge(m, src)
}
func (m *TestResult) XXX_Size() int {
	return xxx_messageInfo_TestResult.Size(m)
}
func (m *TestResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResult.DiscardUnknown(m)
}

var xxx_messageInfo_TestResult proto.InternalMessageInfo

func (m *TestResult) GetStatus() TestResult_Status {
	if m != nil {
		return m.Status
	}
	return TestResult_NO_STATUS
}

func (m *TestResult) GetStatusDetails() string {
	if m != nil {
		return m.StatusDetails
	}
	return ""
}

// VerifyUpdateRequest contains the Lacros browser info that is used
// to verify whether the expected Lacros is selected in the given context of
// provisioned browsers and Ash configs.
type VerifyUpdateRequest struct {
	AshContext               *BrowserContext   `protobuf:"bytes,1,opt,name=ash_context,json=ashContext,proto3" json:"ash_context,omitempty"`
	ProvisionedLacrosContext []*BrowserContext `protobuf:"bytes,2,rep,name=provisioned_lacros_context,json=provisionedLacrosContext,proto3" json:"provisioned_lacros_context,omitempty"`
	// The following fields describe the Lacros to be selected.
	ExpectedBrowser      BrowserType `protobuf:"varint,3,opt,name=expected_browser,json=expectedBrowser,proto3,enum=tast.cros.lacros.BrowserType" json:"expected_browser,omitempty"`
	ExpectedVersion      string      `protobuf:"bytes,4,opt,name=expected_version,json=expectedVersion,proto3" json:"expected_version,omitempty"`
	ExpectedComponent    string      `protobuf:"bytes,5,opt,name=expected_component,json=expectedComponent,proto3" json:"expected_component,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *VerifyUpdateRequest) Reset()         { *m = VerifyUpdateRequest{} }
func (m *VerifyUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyUpdateRequest) ProtoMessage()    {}
func (*VerifyUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddd416dc21c25e8a, []int{2}
}

func (m *VerifyUpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VerifyUpdateRequest.Unmarshal(m, b)
}
func (m *VerifyUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VerifyUpdateRequest.Marshal(b, m, deterministic)
}
func (m *VerifyUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyUpdateRequest.Merge(m, src)
}
func (m *VerifyUpdateRequest) XXX_Size() int {
	return xxx_messageInfo_VerifyUpdateRequest.Size(m)
}
func (m *VerifyUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyUpdateRequest proto.InternalMessageInfo

func (m *VerifyUpdateRequest) GetAshContext() *BrowserContext {
	if m != nil {
		return m.AshContext
	}
	return nil
}

func (m *VerifyUpdateRequest) GetProvisionedLacrosContext() []*BrowserContext {
	if m != nil {
		return m.ProvisionedLacrosContext
	}
	return nil
}

func (m *VerifyUpdateRequest) GetExpectedBrowser() BrowserType {
	if m != nil {
		return m.ExpectedBrowser
	}
	return BrowserType_UNKNOWN
}

func (m *VerifyUpdateRequest) GetExpectedVersion() string {
	if m != nil {
		return m.ExpectedVersion
	}
	return ""
}

func (m *VerifyUpdateRequest) GetExpectedComponent() string {
	if m != nil {
		return m.ExpectedComponent
	}
	return ""
}

// VerifyUpdateResponse contains a test result of version comparison for
// a single action of simulated autoupdate.
type VerifyUpdateResponse struct {
	Result               *TestResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *VerifyUpdateResponse) Reset()         { *m = VerifyUpdateResponse{} }
func (m *VerifyUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*VerifyUpdateResponse) ProtoMessage()    {}
func (*VerifyUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddd416dc21c25e8a, []int{3}
}

func (m *VerifyUpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VerifyUpdateResponse.Unmarshal(m, b)
}
func (m *VerifyUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VerifyUpdateResponse.Marshal(b, m, deterministic)
}
func (m *VerifyUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyUpdateResponse.Merge(m, src)
}
func (m *VerifyUpdateResponse) XXX_Size() int {
	return xxx_messageInfo_VerifyUpdateResponse.Size(m)
}
func (m *VerifyUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyUpdateResponse proto.InternalMessageInfo

func (m *VerifyUpdateResponse) GetResult() *TestResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type ClearUpdateRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClearUpdateRequest) Reset()         { *m = ClearUpdateRequest{} }
func (m *ClearUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*ClearUpdateRequest) ProtoMessage()    {}
func (*ClearUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddd416dc21c25e8a, []int{4}
}

func (m *ClearUpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClearUpdateRequest.Unmarshal(m, b)
}
func (m *ClearUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClearUpdateRequest.Marshal(b, m, deterministic)
}
func (m *ClearUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearUpdateRequest.Merge(m, src)
}
func (m *ClearUpdateRequest) XXX_Size() int {
	return xxx_messageInfo_ClearUpdateRequest.Size(m)
}
func (m *ClearUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClearUpdateRequest proto.InternalMessageInfo

type ClearUpdateResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClearUpdateResponse) Reset()         { *m = ClearUpdateResponse{} }
func (m *ClearUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*ClearUpdateResponse) ProtoMessage()    {}
func (*ClearUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddd416dc21c25e8a, []int{5}
}

func (m *ClearUpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClearUpdateResponse.Unmarshal(m, b)
}
func (m *ClearUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClearUpdateResponse.Marshal(b, m, deterministic)
}
func (m *ClearUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearUpdateResponse.Merge(m, src)
}
func (m *ClearUpdateResponse) XXX_Size() int {
	return xxx_messageInfo_ClearUpdateResponse.Size(m)
}
func (m *ClearUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClearUpdateResponse proto.InternalMessageInfo

type GetBrowserVersionRequest struct {
	Browser              BrowserType `protobuf:"varint,1,opt,name=browser,proto3,enum=tast.cros.lacros.BrowserType" json:"browser,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetBrowserVersionRequest) Reset()         { *m = GetBrowserVersionRequest{} }
func (m *GetBrowserVersionRequest) String() string { return proto.CompactTextString(m) }
func (*GetBrowserVersionRequest) ProtoMessage()    {}
func (*GetBrowserVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddd416dc21c25e8a, []int{6}
}

func (m *GetBrowserVersionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBrowserVersionRequest.Unmarshal(m, b)
}
func (m *GetBrowserVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBrowserVersionRequest.Marshal(b, m, deterministic)
}
func (m *GetBrowserVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBrowserVersionRequest.Merge(m, src)
}
func (m *GetBrowserVersionRequest) XXX_Size() int {
	return xxx_messageInfo_GetBrowserVersionRequest.Size(m)
}
func (m *GetBrowserVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBrowserVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBrowserVersionRequest proto.InternalMessageInfo

func (m *GetBrowserVersionRequest) GetBrowser() BrowserType {
	if m != nil {
		return m.Browser
	}
	return BrowserType_UNKNOWN
}

type GetBrowserVersionResponse struct {
	Versions             []string `protobuf:"bytes,1,rep,name=versions,proto3" json:"versions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBrowserVersionResponse) Reset()         { *m = GetBrowserVersionResponse{} }
func (m *GetBrowserVersionResponse) String() string { return proto.CompactTextString(m) }
func (*GetBrowserVersionResponse) ProtoMessage()    {}
func (*GetBrowserVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddd416dc21c25e8a, []int{7}
}

func (m *GetBrowserVersionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBrowserVersionResponse.Unmarshal(m, b)
}
func (m *GetBrowserVersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBrowserVersionResponse.Marshal(b, m, deterministic)
}
func (m *GetBrowserVersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBrowserVersionResponse.Merge(m, src)
}
func (m *GetBrowserVersionResponse) XXX_Size() int {
	return xxx_messageInfo_GetBrowserVersionResponse.Size(m)
}
func (m *GetBrowserVersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBrowserVersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBrowserVersionResponse proto.InternalMessageInfo

func (m *GetBrowserVersionResponse) GetVersions() []string {
	if m != nil {
		return m.Versions
	}
	return nil
}

func init() {
	proto.RegisterEnum("tast.cros.lacros.BrowserType", BrowserType_name, BrowserType_value)
	proto.RegisterEnum("tast.cros.lacros.TestResult_Status", TestResult_Status_name, TestResult_Status_value)
	proto.RegisterType((*BrowserContext)(nil), "tast.cros.lacros.BrowserContext")
	proto.RegisterType((*TestResult)(nil), "tast.cros.lacros.TestResult")
	proto.RegisterType((*VerifyUpdateRequest)(nil), "tast.cros.lacros.VerifyUpdateRequest")
	proto.RegisterType((*VerifyUpdateResponse)(nil), "tast.cros.lacros.VerifyUpdateResponse")
	proto.RegisterType((*ClearUpdateRequest)(nil), "tast.cros.lacros.ClearUpdateRequest")
	proto.RegisterType((*ClearUpdateResponse)(nil), "tast.cros.lacros.ClearUpdateResponse")
	proto.RegisterType((*GetBrowserVersionRequest)(nil), "tast.cros.lacros.GetBrowserVersionRequest")
	proto.RegisterType((*GetBrowserVersionResponse)(nil), "tast.cros.lacros.GetBrowserVersionResponse")
}

func init() { proto.RegisterFile("update_test_service.proto", fileDescriptor_ddd416dc21c25e8a) }

var fileDescriptor_ddd416dc21c25e8a = []byte{
	// 646 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x61, 0x4f, 0xd3, 0x50,
	0x14, 0xa5, 0x1b, 0x0e, 0xb9, 0x83, 0xd1, 0x5d, 0x30, 0x19, 0x8b, 0x26, 0xb3, 0x02, 0x22, 0xc6,
	0x2d, 0x41, 0x13, 0x3e, 0xf8, 0x69, 0x0c, 0x10, 0xc3, 0xb2, 0x91, 0x76, 0xc3, 0xc4, 0x18, 0x9b,
	0xd2, 0x5d, 0xb2, 0x26, 0xa5, 0xaf, 0xf6, 0xbd, 0x21, 0xfc, 0x1c, 0xff, 0x8a, 0x9f, 0xfd, 0x09,
	0xfe, 0x18, 0xf3, 0xfa, 0x5e, 0xc7, 0x70, 0x20, 0xc4, 0x4f, 0x7b, 0x3b, 0x3d, 0xe7, 0xde, 0xde,
	0x73, 0x6e, 0x1f, 0xac, 0x8e, 0xe2, 0x81, 0x27, 0xc8, 0x15, 0xc4, 0x85, 0xcb, 0x29, 0xb9, 0x08,
	0x7c, 0xaa, 0xc7, 0x09, 0x13, 0x0c, 0x4d, 0xe1, 0x71, 0x51, 0xf7, 0x13, 0xc6, 0xeb, 0xa1, 0x27,
	0x7f, 0xac, 0x5f, 0x06, 0x94, 0x76, 0x13, 0xf6, 0x9d, 0x53, 0xd2, 0x62, 0x91, 0xa0, 0x4b, 0x81,
	0x3b, 0x30, 0x77, 0xaa, 0x90, 0x8a, 0x51, 0x33, 0x36, 0x4b, 0xdb, 0xcf, 0xea, 0x7f, 0xcb, 0xea,
	0x5a, 0xd2, 0xbb, 0x8a, 0xc9, 0xce, 0xd8, 0x88, 0x30, 0xcb, 0x62, 0xc1, 0x2b, 0xb9, 0x5a, 0x7e,
	0x73, 0xde, 0x4e, 0xcf, 0xf8, 0x12, 0x96, 0xe8, 0x92, 0xfc, 0x91, 0xf0, 0x4e, 0x43, 0x72, 0x63,
	0x4f, 0x0c, 0x2b, 0xf9, 0x9a, 0xb1, 0x39, 0x6f, 0x97, 0xae, 0xe1, 0x63, 0x4f, 0x0c, 0xf1, 0x39,
	0x2c, 0xc4, 0x09, 0x3b, 0x0b, 0x32, 0xd6, 0x6c, 0xca, 0x2a, 0x6a, 0x2c, 0xa3, 0x04, 0x11, 0x17,
	0x5e, 0x18, 0x2a, 0xca, 0x23, 0x45, 0xd1, 0x98, 0xa4, 0x58, 0x3f, 0x0c, 0x80, 0x1e, 0x71, 0x61,
	0x13, 0x1f, 0x85, 0x02, 0xdf, 0x43, 0x81, 0x0b, 0x4f, 0x8c, 0xb8, 0x9e, 0xe4, 0xc5, 0xf4, 0x24,
	0xd7, 0xec, 0xba, 0x93, 0x52, 0x6d, 0x2d, 0xc1, 0x75, 0x28, 0xa9, 0x93, 0x3b, 0x20, 0xe1, 0x05,
	0xa1, 0x1c, 0x4c, 0x36, 0x5c, 0x54, 0xe8, 0x9e, 0x02, 0xad, 0x06, 0x14, 0x94, 0x10, 0x17, 0x61,
	0xbe, 0xd3, 0x75, 0x9d, 0x5e, 0xb3, 0xd7, 0x77, 0xcc, 0x19, 0x04, 0x28, 0x1c, 0x37, 0x1d, 0x67,
	0x7f, 0xcf, 0x34, 0xe4, 0xf9, 0xa0, 0xf9, 0xb1, 0xbd, 0xbf, 0x67, 0xe6, 0xac, 0xdf, 0x39, 0x58,
	0x3e, 0xa1, 0x24, 0x38, 0xbb, 0xea, 0xa7, 0x41, 0xd9, 0xf4, 0x6d, 0x44, 0x5c, 0x60, 0x13, 0x8a,
	0x1e, 0x1f, 0xba, 0xbe, 0x8a, 0x21, 0x7d, 0xe3, 0xe2, 0x76, 0xed, 0x4e, 0xef, 0x75, 0x5c, 0x36,
	0x78, 0x7c, 0x98, 0x45, 0xf7, 0x15, 0xaa, 0x71, 0xc2, 0x2e, 0x02, 0x1e, 0xb0, 0x88, 0x06, 0xae,
	0x12, 0x8c, 0x2b, 0xca, 0x5c, 0x1e, 0x52, 0xb1, 0x32, 0x51, 0xa3, 0x9d, 0x32, 0xb2, 0xfa, 0x87,
	0x60, 0xd2, 0x65, 0x4c, 0xbe, 0xa0, 0x81, 0x9b, 0xed, 0x48, 0xfe, 0x21, 0x3b, 0xb2, 0x94, 0xc9,
	0x34, 0x88, 0xaf, 0x26, 0x2a, 0x5d, 0x50, 0x22, 0x9b, 0xe9, 0xc8, 0xc7, 0xd4, 0x13, 0x05, 0xe3,
	0x1b, 0xc0, 0x31, 0xd5, 0x67, 0xe7, 0x31, 0x8b, 0x28, 0x12, 0x3a, 0xfc, 0x72, 0xf6, 0xa4, 0x95,
	0x3d, 0xb0, 0xda, 0xb0, 0x72, 0xd3, 0x5d, 0x1e, 0xb3, 0x88, 0x13, 0xbe, 0x83, 0x42, 0x92, 0xe6,
	0xac, 0x9d, 0x7d, 0xfa, 0xaf, 0x5d, 0xb0, 0x35, 0xd7, 0x5a, 0x01, 0x6c, 0x85, 0xe4, 0x25, 0x37,
	0xa2, 0xb2, 0x9e, 0xc0, 0xf2, 0x0d, 0x54, 0xb5, 0xb0, 0x1c, 0xa8, 0x7c, 0x20, 0xa1, 0x47, 0xd4,
	0xaf, 0x9f, 0xa5, 0xfb, 0xbf, 0x5f, 0x95, 0xb5, 0x03, 0xab, 0xb7, 0x14, 0xd5, 0x43, 0x55, 0xe1,
	0xb1, 0x76, 0x4f, 0xae, 0xb8, 0xfc, 0xec, 0xc6, 0xff, 0xb7, 0x8e, 0xa0, 0x38, 0x51, 0x10, 0x8b,
	0x30, 0xd7, 0xef, 0x1c, 0x75, 0xba, 0x9f, 0x3a, 0xe6, 0x0c, 0xce, 0x41, 0xbe, 0xe9, 0x1c, 0x9a,
	0x06, 0x96, 0x61, 0xb1, 0xdd, 0x6c, 0xd9, 0x5d, 0xc7, 0xb5, 0xbb, 0xdd, 0xde, 0x81, 0x63, 0xe6,
	0x70, 0x19, 0x96, 0x34, 0x24, 0x57, 0x79, 0xff, 0xa0, 0xdf, 0x36, 0xf3, 0xdb, 0x3f, 0x73, 0x50,
	0x56, 0xd3, 0x4a, 0x93, 0x1c, 0x75, 0xab, 0xa0, 0x0b, 0x0b, 0x93, 0x5e, 0xe3, 0xfa, 0xf4, 0x4c,
	0xb7, 0x6c, 0x7a, 0x75, 0xe3, 0x3e, 0x9a, 0xf6, 0x73, 0x06, 0xbf, 0x40, 0x71, 0xc2, 0x68, 0x5c,
	0x9b, 0x16, 0x4e, 0xa7, 0x53, 0x5d, 0xbf, 0x87, 0x35, 0xae, 0x1e, 0x41, 0x79, 0xca, 0x5a, 0xdc,
	0x9a, 0x56, 0xdf, 0x15, 0x6a, 0xf5, 0xf5, 0x83, 0xb8, 0x59, 0xbf, 0xdd, 0x8d, 0xcf, 0x6b, 0xfe,
	0x30, 0x61, 0xe7, 0xc1, 0xe8, 0x9c, 0xf1, 0x86, 0x94, 0x36, 0xf4, 0xfd, 0xcc, 0x1b, 0x52, 0xdc,
	0x50, 0x35, 0x4e, 0x0b, 0xe9, 0x6d, 0xfd, 0xf6, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x7f,
	0x60, 0x84, 0xca, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UpdateTestServiceClient is the client API for UpdateTestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UpdateTestServiceClient interface {
	// VerifyUpdate sets a DUT with given contexts and checks if the
	// expected version of Lacros is loaded successfully without crash.
	VerifyUpdate(ctx context.Context, in *VerifyUpdateRequest, opts ...grpc.CallOption) (*VerifyUpdateResponse, error)
	// ClearUpdate removes provisioned Lacros in the install path or browser data
	// if needed.
	ClearUpdate(ctx context.Context, in *ClearUpdateRequest, opts ...grpc.CallOption) (*ClearUpdateResponse, error)
	// GetBrowserVersion returns version info of the given browser type.
	// If multiple Lacros browsers are provisioned in the stateful partition,
	// all the versions will be returned.
	GetBrowserVersion(ctx context.Context, in *GetBrowserVersionRequest, opts ...grpc.CallOption) (*GetBrowserVersionResponse, error)
}

type updateTestServiceClient struct {
	cc *grpc.ClientConn
}

func NewUpdateTestServiceClient(cc *grpc.ClientConn) UpdateTestServiceClient {
	return &updateTestServiceClient{cc}
}

func (c *updateTestServiceClient) VerifyUpdate(ctx context.Context, in *VerifyUpdateRequest, opts ...grpc.CallOption) (*VerifyUpdateResponse, error) {
	out := new(VerifyUpdateResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.lacros.UpdateTestService/VerifyUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateTestServiceClient) ClearUpdate(ctx context.Context, in *ClearUpdateRequest, opts ...grpc.CallOption) (*ClearUpdateResponse, error) {
	out := new(ClearUpdateResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.lacros.UpdateTestService/ClearUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateTestServiceClient) GetBrowserVersion(ctx context.Context, in *GetBrowserVersionRequest, opts ...grpc.CallOption) (*GetBrowserVersionResponse, error) {
	out := new(GetBrowserVersionResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.lacros.UpdateTestService/GetBrowserVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdateTestServiceServer is the server API for UpdateTestService service.
type UpdateTestServiceServer interface {
	// VerifyUpdate sets a DUT with given contexts and checks if the
	// expected version of Lacros is loaded successfully without crash.
	VerifyUpdate(context.Context, *VerifyUpdateRequest) (*VerifyUpdateResponse, error)
	// ClearUpdate removes provisioned Lacros in the install path or browser data
	// if needed.
	ClearUpdate(context.Context, *ClearUpdateRequest) (*ClearUpdateResponse, error)
	// GetBrowserVersion returns version info of the given browser type.
	// If multiple Lacros browsers are provisioned in the stateful partition,
	// all the versions will be returned.
	GetBrowserVersion(context.Context, *GetBrowserVersionRequest) (*GetBrowserVersionResponse, error)
}

// UnimplementedUpdateTestServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUpdateTestServiceServer struct {
}

func (*UnimplementedUpdateTestServiceServer) VerifyUpdate(ctx context.Context, req *VerifyUpdateRequest) (*VerifyUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUpdate not implemented")
}
func (*UnimplementedUpdateTestServiceServer) ClearUpdate(ctx context.Context, req *ClearUpdateRequest) (*ClearUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearUpdate not implemented")
}
func (*UnimplementedUpdateTestServiceServer) GetBrowserVersion(ctx context.Context, req *GetBrowserVersionRequest) (*GetBrowserVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrowserVersion not implemented")
}

func RegisterUpdateTestServiceServer(s *grpc.Server, srv UpdateTestServiceServer) {
	s.RegisterService(&_UpdateTestService_serviceDesc, srv)
}

func _UpdateTestService_VerifyUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateTestServiceServer).VerifyUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.lacros.UpdateTestService/VerifyUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateTestServiceServer).VerifyUpdate(ctx, req.(*VerifyUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateTestService_ClearUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateTestServiceServer).ClearUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.lacros.UpdateTestService/ClearUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateTestServiceServer).ClearUpdate(ctx, req.(*ClearUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateTestService_GetBrowserVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrowserVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateTestServiceServer).GetBrowserVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.lacros.UpdateTestService/GetBrowserVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateTestServiceServer).GetBrowserVersion(ctx, req.(*GetBrowserVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UpdateTestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.lacros.UpdateTestService",
	HandlerType: (*UpdateTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyUpdate",
			Handler:    _UpdateTestService_VerifyUpdate_Handler,
		},
		{
			MethodName: "ClearUpdate",
			Handler:    _UpdateTestService_ClearUpdate_Handler,
		},
		{
			MethodName: "GetBrowserVersion",
			Handler:    _UpdateTestService_GetBrowserVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "update_test_service.proto",
}
