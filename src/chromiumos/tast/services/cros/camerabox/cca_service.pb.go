// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cca_service.proto

package camerabox

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CCATest int32

const (
	CCATest_DOCUMENT_SCANNING CCATest = 0
)

var CCATest_name = map[int32]string{
	0: "DOCUMENT_SCANNING",
}

var CCATest_value = map[string]int32{
	"DOCUMENT_SCANNING": 0,
}

func (x CCATest) String() string {
	return proto.EnumName(CCATest_name, int32(x))
}

func (CCATest) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_297b870bf1a1ab8c, []int{0}
}

type CCATestRequest struct {
	// Type of test to be run.
	Test CCATest `protobuf:"varint,1,opt,name=test,proto3,enum=tast.cros.camerabox.CCATest" json:"test,omitempty"`
	// Facing of camera to be tested.
	Facing Facing `protobuf:"varint,2,opt,name=facing,proto3,enum=tast.cros.camerabox.Facing" json:"facing,omitempty"`
	// Script contents which should be loaded when initializing CCA instance.
	ScriptContents       []string `protobuf:"bytes,3,rep,name=script_contents,json=scriptContents,proto3" json:"script_contents,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CCATestRequest) Reset()         { *m = CCATestRequest{} }
func (m *CCATestRequest) String() string { return proto.CompactTextString(m) }
func (*CCATestRequest) ProtoMessage()    {}
func (*CCATestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_297b870bf1a1ab8c, []int{0}
}

func (m *CCATestRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CCATestRequest.Unmarshal(m, b)
}
func (m *CCATestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CCATestRequest.Marshal(b, m, deterministic)
}
func (m *CCATestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCATestRequest.Merge(m, src)
}
func (m *CCATestRequest) XXX_Size() int {
	return xxx_messageInfo_CCATestRequest.Size(m)
}
func (m *CCATestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CCATestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CCATestRequest proto.InternalMessageInfo

func (m *CCATestRequest) GetTest() CCATest {
	if m != nil {
		return m.Test
	}
	return CCATest_DOCUMENT_SCANNING
}

func (m *CCATestRequest) GetFacing() Facing {
	if m != nil {
		return m.Facing
	}
	return Facing_FACING_UNSET
}

func (m *CCATestRequest) GetScriptContents() []string {
	if m != nil {
		return m.ScriptContents
	}
	return nil
}

type CCATestResponse struct {
	Result TestResult `protobuf:"varint,1,opt,name=result,proto3,enum=tast.cros.camerabox.TestResult" json:"result,omitempty"`
	// Error message from running test.
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CCATestResponse) Reset()         { *m = CCATestResponse{} }
func (m *CCATestResponse) String() string { return proto.CompactTextString(m) }
func (*CCATestResponse) ProtoMessage()    {}
func (*CCATestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_297b870bf1a1ab8c, []int{1}
}

func (m *CCATestResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CCATestResponse.Unmarshal(m, b)
}
func (m *CCATestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CCATestResponse.Marshal(b, m, deterministic)
}
func (m *CCATestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCATestResponse.Merge(m, src)
}
func (m *CCATestResponse) XXX_Size() int {
	return xxx_messageInfo_CCATestResponse.Size(m)
}
func (m *CCATestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CCATestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CCATestResponse proto.InternalMessageInfo

func (m *CCATestResponse) GetResult() TestResult {
	if m != nil {
		return m.Result
	}
	return TestResult_TEST_RESULT_UNSET
}

func (m *CCATestResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterEnum("tast.cros.camerabox.CCATest", CCATest_name, CCATest_value)
	proto.RegisterType((*CCATestRequest)(nil), "tast.cros.camerabox.CCATestRequest")
	proto.RegisterType((*CCATestResponse)(nil), "tast.cros.camerabox.CCATestResponse")
}

func init() { proto.RegisterFile("cca_service.proto", fileDescriptor_297b870bf1a1ab8c) }

var fileDescriptor_297b870bf1a1ab8c = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x4d, 0x4f, 0x02, 0x31,
	0x10, 0x86, 0x41, 0x14, 0xc2, 0xc4, 0x80, 0x54, 0x4d, 0x08, 0x9a, 0x48, 0xd0, 0x04, 0xf4, 0xb0,
	0x6b, 0xe0, 0xe0, 0x19, 0xeb, 0x47, 0x3c, 0xb8, 0x26, 0x05, 0x3d, 0x78, 0xc1, 0xa5, 0x56, 0xdd,
	0x84, 0x6d, 0xd7, 0x4e, 0xd7, 0xf8, 0x73, 0xfc, 0xa9, 0x86, 0xb6, 0x70, 0xda, 0x70, 0xdc, 0xc9,
	0xf3, 0xec, 0xbc, 0x7d, 0x07, 0x5a, 0x9c, 0xc7, 0x33, 0x14, 0xfa, 0x27, 0xe1, 0x22, 0xc8, 0xb4,
	0x32, 0x8a, 0xec, 0x9b, 0x18, 0x4d, 0xc0, 0xb5, 0xc2, 0x80, 0xc7, 0xa9, 0xd0, 0xf1, 0x5c, 0xfd,
	0x76, 0x76, 0xb9, 0x4a, 0x53, 0x25, 0x1d, 0xd2, 0xfb, 0x2b, 0x43, 0x83, 0xd2, 0xf1, 0x54, 0xa0,
	0x61, 0xe2, 0x3b, 0x17, 0x68, 0xc8, 0x25, 0x6c, 0x1b, 0x81, 0xa6, 0x5d, 0xee, 0x96, 0x07, 0x8d,
	0xe1, 0x71, 0x50, 0xf0, 0x93, 0x60, 0xa5, 0x58, 0x92, 0x8c, 0xa0, 0xfa, 0x11, 0xf3, 0x44, 0x7e,
	0xb6, 0xb7, 0xac, 0x73, 0x54, 0xe8, 0xdc, 0x59, 0x84, 0x79, 0x94, 0xf4, 0xa1, 0x89, 0x5c, 0x27,
	0x99, 0x99, 0x71, 0x25, 0x8d, 0x90, 0x06, 0xdb, 0x95, 0x6e, 0x65, 0x50, 0x67, 0x0d, 0x37, 0xa6,
	0x7e, 0xda, 0x7b, 0x83, 0xe6, 0x3a, 0x21, 0x66, 0x4a, 0xa2, 0x20, 0x57, 0x50, 0xd5, 0x02, 0xf3,
	0xc5, 0x2a, 0xe4, 0x49, 0xe1, 0x42, 0xaf, 0xe4, 0x0b, 0xc3, 0x3c, 0x4e, 0x0e, 0x60, 0x47, 0x68,
	0xad, 0xb4, 0x0d, 0x5a, 0x67, 0xee, 0xe3, 0xa2, 0x0b, 0x35, 0xbf, 0x81, 0x1c, 0x42, 0xeb, 0xe6,
	0x89, 0x3e, 0x3f, 0xde, 0x46, 0xd3, 0xd9, 0x84, 0x8e, 0xa3, 0xe8, 0x21, 0xba, 0xdf, 0x2b, 0x0d,
	0xdf, 0x01, 0x28, 0x1d, 0x4f, 0x5c, 0xbb, 0xe4, 0x05, 0x6a, 0x2c, 0x97, 0x96, 0x3f, 0xdd, 0x58,
	0x8f, 0x6b, 0xb4, 0x73, 0xb6, 0x19, 0x72, 0x8f, 0xea, 0x95, 0xae, 0xcf, 0x5f, 0xfb, 0xfc, 0x4b,
	0xab, 0x34, 0xc9, 0x53, 0x85, 0xe1, 0xd2, 0x09, 0xfd, 0x41, 0x31, 0x5c, 0xca, 0xe1, 0x5a, 0x9e,
	0x57, 0xed, 0xf9, 0x46, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xca, 0x17, 0x89, 0xb5, 0xf6, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CCAServiceClient is the client API for CCAService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CCAServiceClient interface {
	// RunTest runs specific CCA camera test on target facing camera.
	RunTest(ctx context.Context, in *CCATestRequest, opts ...grpc.CallOption) (*CCATestResponse, error)
}

type cCAServiceClient struct {
	cc *grpc.ClientConn
}

func NewCCAServiceClient(cc *grpc.ClientConn) CCAServiceClient {
	return &cCAServiceClient{cc}
}

func (c *cCAServiceClient) RunTest(ctx context.Context, in *CCATestRequest, opts ...grpc.CallOption) (*CCATestResponse, error) {
	out := new(CCATestResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.camerabox.CCAService/RunTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CCAServiceServer is the server API for CCAService service.
type CCAServiceServer interface {
	// RunTest runs specific CCA camera test on target facing camera.
	RunTest(context.Context, *CCATestRequest) (*CCATestResponse, error)
}

// UnimplementedCCAServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCCAServiceServer struct {
}

func (*UnimplementedCCAServiceServer) RunTest(ctx context.Context, req *CCATestRequest) (*CCATestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunTest not implemented")
}

func RegisterCCAServiceServer(s *grpc.Server, srv CCAServiceServer) {
	s.RegisterService(&_CCAService_serviceDesc, srv)
}

func _CCAService_RunTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCATestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCAServiceServer).RunTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.camerabox.CCAService/RunTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCAServiceServer).RunTest(ctx, req.(*CCATestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CCAService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.camerabox.CCAService",
	HandlerType: (*CCAServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunTest",
			Handler:    _CCAService_RunTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cca_service.proto",
}
