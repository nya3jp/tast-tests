// Code generated by protoc-gen-go. DO NOT EDIT.
// source: its_service.proto

package camerabox

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("its_service.proto", fileDescriptor_93fe4e07ce14d00f) }

var fileDescriptor_93fe4e07ce14d00f = []byte{
	// 171 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcc, 0x2c, 0x29, 0x8e,
	0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x2e,
	0x49, 0x2c, 0x2e, 0xd1, 0x4b, 0x2e, 0xca, 0x2f, 0xd6, 0x4b, 0x4e, 0xcc, 0x4d, 0x2d, 0x4a, 0x4c,
	0xca, 0xaf, 0x90, 0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0x2b, 0x49, 0x2a, 0x4d,
	0xd3, 0x4f, 0xcd, 0x2d, 0x28, 0xa9, 0x84, 0xe8, 0x30, 0x6a, 0x65, 0xe4, 0xe2, 0xf2, 0x0c, 0x09,
	0x0e, 0x86, 0x18, 0x23, 0x64, 0xc9, 0xc5, 0x1a, 0x9c, 0x5a, 0x12, 0x5a, 0x20, 0x24, 0xa6, 0x07,
	0xd1, 0xa5, 0x07, 0xd3, 0xa5, 0xe7, 0x0a, 0xd2, 0x25, 0x85, 0x43, 0x5c, 0x89, 0x41, 0xc8, 0x86,
	0x8b, 0x23, 0x24, 0x35, 0xb1, 0xc8, 0x25, 0xbf, 0x3c, 0x8f, 0x74, 0xdd, 0x4e, 0x9a, 0x51, 0xea,
	0xc9, 0x19, 0x45, 0xf9, 0xb9, 0x99, 0xa5, 0xb9, 0xf9, 0xc5, 0xfa, 0x20, 0x6f, 0xe8, 0x43, 0xbd,
	0x56, 0xac, 0x0f, 0xf2, 0x8f, 0x3e, 0xdc, 0x3f, 0x49, 0x6c, 0x60, 0xcd, 0xc6, 0x80, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xda, 0xca, 0x32, 0x36, 0x00, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ITSServiceClient is the client API for ITSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ITSServiceClient interface {
	// SetUp sets up required software dependency to run ITS.
	SetUp(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// TearDown tears down software dependency brought up by |SetUp|.
	TearDown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type iTSServiceClient struct {
	cc *grpc.ClientConn
}

func NewITSServiceClient(cc *grpc.ClientConn) ITSServiceClient {
	return &iTSServiceClient{cc}
}

func (c *iTSServiceClient) SetUp(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.camerabox.ITSService/SetUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTSServiceClient) TearDown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.camerabox.ITSService/TearDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ITSServiceServer is the server API for ITSService service.
type ITSServiceServer interface {
	// SetUp sets up required software dependency to run ITS.
	SetUp(context.Context, *empty.Empty) (*empty.Empty, error)
	// TearDown tears down software dependency brought up by |SetUp|.
	TearDown(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedITSServiceServer can be embedded to have forward compatible implementations.
type UnimplementedITSServiceServer struct {
}

func (*UnimplementedITSServiceServer) SetUp(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUp not implemented")
}
func (*UnimplementedITSServiceServer) TearDown(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TearDown not implemented")
}

func RegisterITSServiceServer(s *grpc.Server, srv ITSServiceServer) {
	s.RegisterService(&_ITSService_serviceDesc, srv)
}

func _ITSService_SetUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITSServiceServer).SetUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.camerabox.ITSService/SetUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITSServiceServer).SetUp(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITSService_TearDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITSServiceServer).TearDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.camerabox.ITSService/TearDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITSServiceServer).TearDown(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ITSService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.camerabox.ITSService",
	HandlerType: (*ITSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetUp",
			Handler:    _ITSService_SetUp_Handler,
		},
		{
			MethodName: "TearDown",
			Handler:    _ITSService_TearDown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "its_service.proto",
}
