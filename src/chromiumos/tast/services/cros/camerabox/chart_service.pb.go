// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chart_service.proto

package camerabox

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SendRequest struct {
	// Name of the chart to be sent.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Binary content of chart file.
	Content              []byte   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendRequest) Reset()         { *m = SendRequest{} }
func (m *SendRequest) String() string { return proto.CompactTextString(m) }
func (*SendRequest) ProtoMessage()    {}
func (*SendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5af348488dc9837b, []int{0}
}

func (m *SendRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendRequest.Unmarshal(m, b)
}
func (m *SendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendRequest.Marshal(b, m, deterministic)
}
func (m *SendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendRequest.Merge(m, src)
}
func (m *SendRequest) XXX_Size() int {
	return xxx_messageInfo_SendRequest.Size(m)
}
func (m *SendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendRequest proto.InternalMessageInfo

func (m *SendRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SendRequest) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type DisplayRequest struct {
	// Name of the chart to be displayed.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DisplayRequest) Reset()         { *m = DisplayRequest{} }
func (m *DisplayRequest) String() string { return proto.CompactTextString(m) }
func (*DisplayRequest) ProtoMessage()    {}
func (*DisplayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5af348488dc9837b, []int{1}
}

func (m *DisplayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DisplayRequest.Unmarshal(m, b)
}
func (m *DisplayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DisplayRequest.Marshal(b, m, deterministic)
}
func (m *DisplayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisplayRequest.Merge(m, src)
}
func (m *DisplayRequest) XXX_Size() int {
	return xxx_messageInfo_DisplayRequest.Size(m)
}
func (m *DisplayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DisplayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DisplayRequest proto.InternalMessageInfo

func (m *DisplayRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*SendRequest)(nil), "tast.cros.camerabox.SendRequest")
	proto.RegisterType((*DisplayRequest)(nil), "tast.cros.camerabox.DisplayRequest")
}

func init() { proto.RegisterFile("chart_service.proto", fileDescriptor_5af348488dc9837b) }

var fileDescriptor_5af348488dc9837b = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0xd1, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x06, 0x60, 0x23, 0xc5, 0xe0, 0x58, 0x3c, 0x4c, 0x41, 0x42, 0xbd, 0x84, 0x28, 0x58, 0x2f,
	0xbb, 0xa0, 0xc7, 0xde, 0x5a, 0x05, 0xcf, 0xe9, 0xcd, 0x8b, 0x6c, 0xd6, 0xb1, 0x0d, 0x24, 0x3b,
	0x71, 0x77, 0x23, 0xf6, 0x51, 0x7d, 0x1b, 0xd9, 0xa4, 0x15, 0x0b, 0x6d, 0x6f, 0xbb, 0x30, 0xff,
	0xfc, 0x1f, 0x0c, 0x8c, 0xf4, 0x4a, 0x59, 0xff, 0xe6, 0xc8, 0x7e, 0x95, 0x9a, 0x44, 0x63, 0xd9,
	0x33, 0x8e, 0xbc, 0x72, 0x5e, 0x68, 0xcb, 0x4e, 0x68, 0x55, 0x93, 0x55, 0x05, 0x7f, 0x8f, 0xaf,
	0x97, 0xcc, 0xcb, 0x8a, 0x64, 0x37, 0x52, 0xb4, 0x1f, 0x92, 0xea, 0xc6, 0xaf, 0xfb, 0x44, 0x36,
	0x85, 0x8b, 0x05, 0x99, 0xf7, 0x9c, 0x3e, 0x5b, 0x72, 0x1e, 0x11, 0x06, 0x46, 0xd5, 0x94, 0x44,
	0x69, 0x34, 0x39, 0xcf, 0xbb, 0x37, 0x26, 0x10, 0x6b, 0x36, 0x9e, 0x8c, 0x4f, 0x4e, 0xd3, 0x68,
	0x32, 0xcc, 0xb7, 0xdf, 0xec, 0x16, 0x2e, 0x9f, 0x4a, 0xd7, 0x54, 0x6a, 0x7d, 0x24, 0xff, 0xf0,
	0x13, 0xc1, 0x70, 0x1e, 0xb0, 0x8b, 0xde, 0x8a, 0x33, 0x18, 0x84, 0x4e, 0x4c, 0xc5, 0x1e, 0xae,
	0xf8, 0xc7, 0x19, 0x5f, 0x89, 0xde, 0x2e, 0xb6, 0x76, 0xf1, 0x1c, 0xec, 0xd9, 0x09, 0xbe, 0x40,
	0xbc, 0xa9, 0xc6, 0x9b, 0xbd, 0x6b, 0x76, 0x61, 0x47, 0x36, 0x4d, 0x21, 0x9e, 0x57, 0xa4, 0x4c,
	0xdb, 0xe0, 0x81, 0xa1, 0xc3, 0xe1, 0xd9, 0xfd, 0xeb, 0x9d, 0x5e, 0x59, 0xae, 0xcb, 0xb6, 0x66,
	0x27, 0x83, 0x43, 0x6e, 0x2e, 0xe2, 0x64, 0x00, 0xc9, 0x3f, 0x50, 0x71, 0xd6, 0x85, 0x1f, 0x7f,
	0x03, 0x00, 0x00, 0xff, 0xff, 0xac, 0x3b, 0xc1, 0xae, 0xb9, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChartServiceClient is the client API for ChartService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChartServiceClient interface {
	// Send accepts a chart file and saves it in the cached storage.
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Display displays a chart file on the screen.
	Display(ctx context.Context, in *DisplayRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Cleanup restore the state before running the test.
	Cleanup(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type chartServiceClient struct {
	cc *grpc.ClientConn
}

func NewChartServiceClient(cc *grpc.ClientConn) ChartServiceClient {
	return &chartServiceClient{cc}
}

func (c *chartServiceClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.camerabox.ChartService/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartServiceClient) Display(ctx context.Context, in *DisplayRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.camerabox.ChartService/Display", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartServiceClient) Cleanup(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.camerabox.ChartService/Cleanup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChartServiceServer is the server API for ChartService service.
type ChartServiceServer interface {
	// Send accepts a chart file and saves it in the cached storage.
	Send(context.Context, *SendRequest) (*empty.Empty, error)
	// Display displays a chart file on the screen.
	Display(context.Context, *DisplayRequest) (*empty.Empty, error)
	// Cleanup restore the state before running the test.
	Cleanup(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedChartServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChartServiceServer struct {
}

func (*UnimplementedChartServiceServer) Send(ctx context.Context, req *SendRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (*UnimplementedChartServiceServer) Display(ctx context.Context, req *DisplayRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Display not implemented")
}
func (*UnimplementedChartServiceServer) Cleanup(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cleanup not implemented")
}

func RegisterChartServiceServer(s *grpc.Server, srv ChartServiceServer) {
	s.RegisterService(&_ChartService_serviceDesc, srv)
}

func _ChartService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.camerabox.ChartService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartServiceServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartService_Display_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisplayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartServiceServer).Display(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.camerabox.ChartService/Display",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartServiceServer).Display(ctx, req.(*DisplayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartService_Cleanup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartServiceServer).Cleanup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.camerabox.ChartService/Cleanup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartServiceServer).Cleanup(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChartService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.camerabox.ChartService",
	HandlerType: (*ChartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _ChartService_Send_Handler,
		},
		{
			MethodName: "Display",
			Handler:    _ChartService_Display_Handler,
		},
		{
			MethodName: "Cleanup",
			Handler:    _ChartService_Cleanup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chart_service.proto",
}
