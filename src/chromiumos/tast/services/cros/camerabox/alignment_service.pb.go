// Code generated by protoc-gen-go. DO NOT EDIT.
// source: alignment_service.proto

package camerabox

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ManualAlignRequest struct {
	// Absolute path for saving data used on DUT.
	DataPath string `protobuf:"bytes,1,opt,name=data_path,json=dataPath,proto3" json:"data_path,omitempty"`
	// Username to login chrome and prepare chrome remote desktop.
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// Password to login chrome and prepare chrome remote desktop.
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	// DUT's target camera facing to be aligned.
	Facing               Facing   `protobuf:"varint,4,opt,name=facing,proto3,enum=tast.cros.camerabox.Facing" json:"facing,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ManualAlignRequest) Reset()         { *m = ManualAlignRequest{} }
func (m *ManualAlignRequest) String() string { return proto.CompactTextString(m) }
func (*ManualAlignRequest) ProtoMessage()    {}
func (*ManualAlignRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75246d9c3b103f32, []int{0}
}

func (m *ManualAlignRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManualAlignRequest.Unmarshal(m, b)
}
func (m *ManualAlignRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManualAlignRequest.Marshal(b, m, deterministic)
}
func (m *ManualAlignRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManualAlignRequest.Merge(m, src)
}
func (m *ManualAlignRequest) XXX_Size() int {
	return xxx_messageInfo_ManualAlignRequest.Size(m)
}
func (m *ManualAlignRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ManualAlignRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ManualAlignRequest proto.InternalMessageInfo

func (m *ManualAlignRequest) GetDataPath() string {
	if m != nil {
		return m.DataPath
	}
	return ""
}

func (m *ManualAlignRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ManualAlignRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ManualAlignRequest) GetFacing() Facing {
	if m != nil {
		return m.Facing
	}
	return Facing_FACING_UNSET
}

type CheckAlignRequest struct {
	// Absolute path for saving data used on DUT.
	DataPath string `protobuf:"bytes,1,opt,name=data_path,json=dataPath,proto3" json:"data_path,omitempty"`
	// DUT's target camera facing to be aligned.
	Facing               Facing   `protobuf:"varint,2,opt,name=facing,proto3,enum=tast.cros.camerabox.Facing" json:"facing,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckAlignRequest) Reset()         { *m = CheckAlignRequest{} }
func (m *CheckAlignRequest) String() string { return proto.CompactTextString(m) }
func (*CheckAlignRequest) ProtoMessage()    {}
func (*CheckAlignRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75246d9c3b103f32, []int{1}
}

func (m *CheckAlignRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckAlignRequest.Unmarshal(m, b)
}
func (m *CheckAlignRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckAlignRequest.Marshal(b, m, deterministic)
}
func (m *CheckAlignRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckAlignRequest.Merge(m, src)
}
func (m *CheckAlignRequest) XXX_Size() int {
	return xxx_messageInfo_CheckAlignRequest.Size(m)
}
func (m *CheckAlignRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckAlignRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckAlignRequest proto.InternalMessageInfo

func (m *CheckAlignRequest) GetDataPath() string {
	if m != nil {
		return m.DataPath
	}
	return ""
}

func (m *CheckAlignRequest) GetFacing() Facing {
	if m != nil {
		return m.Facing
	}
	return Facing_FACING_UNSET
}

type CheckAlignResponse struct {
	// Check result.
	Result TestResult `protobuf:"varint,1,opt,name=result,proto3,enum=tast.cros.camerabox.TestResult" json:"result,omitempty"`
	// Error message from running check.
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckAlignResponse) Reset()         { *m = CheckAlignResponse{} }
func (m *CheckAlignResponse) String() string { return proto.CompactTextString(m) }
func (*CheckAlignResponse) ProtoMessage()    {}
func (*CheckAlignResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_75246d9c3b103f32, []int{2}
}

func (m *CheckAlignResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckAlignResponse.Unmarshal(m, b)
}
func (m *CheckAlignResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckAlignResponse.Marshal(b, m, deterministic)
}
func (m *CheckAlignResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckAlignResponse.Merge(m, src)
}
func (m *CheckAlignResponse) XXX_Size() int {
	return xxx_messageInfo_CheckAlignResponse.Size(m)
}
func (m *CheckAlignResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckAlignResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckAlignResponse proto.InternalMessageInfo

func (m *CheckAlignResponse) GetResult() TestResult {
	if m != nil {
		return m.Result
	}
	return TestResult_TEST_RESULT_UNSET
}

func (m *CheckAlignResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*ManualAlignRequest)(nil), "tast.cros.camerabox.ManualAlignRequest")
	proto.RegisterType((*CheckAlignRequest)(nil), "tast.cros.camerabox.CheckAlignRequest")
	proto.RegisterType((*CheckAlignResponse)(nil), "tast.cros.camerabox.CheckAlignResponse")
}

func init() { proto.RegisterFile("alignment_service.proto", fileDescriptor_75246d9c3b103f32) }

var fileDescriptor_75246d9c3b103f32 = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcd, 0x4e, 0xeb, 0x30,
	0x10, 0x85, 0x9b, 0xde, 0x7b, 0xab, 0xd6, 0x17, 0x55, 0x60, 0x10, 0x44, 0xe9, 0x82, 0x2a, 0x0b,
	0x5a, 0x36, 0x8e, 0xd4, 0x2e, 0x58, 0x17, 0x04, 0x3b, 0xa4, 0x2a, 0xb0, 0x62, 0x53, 0xb9, 0xee,
	0x34, 0x89, 0x88, 0xed, 0x60, 0x3b, 0xfc, 0xbc, 0x0c, 0x6f, 0xc3, 0x7b, 0xa1, 0xc4, 0x09, 0xad,
	0xd4, 0x48, 0x74, 0x39, 0x39, 0x67, 0xe6, 0x4c, 0xe6, 0x33, 0x3a, 0xa3, 0x69, 0x12, 0x09, 0x0e,
	0xc2, 0x2c, 0x34, 0xa8, 0xd7, 0x84, 0x01, 0xc9, 0x94, 0x34, 0x12, 0x1f, 0x1b, 0xaa, 0x0d, 0x61,
	0x4a, 0x6a, 0xc2, 0x28, 0x07, 0x45, 0x97, 0xf2, 0xdd, 0x3b, 0x60, 0x92, 0x73, 0x29, 0xac, 0xc5,
	0x1b, 0x44, 0x52, 0x46, 0x29, 0x04, 0x65, 0xb5, 0xcc, 0xd7, 0x01, 0xf0, 0xcc, 0x7c, 0x58, 0xd1,
	0xff, 0x74, 0x10, 0xbe, 0xa7, 0x22, 0xa7, 0xe9, 0xac, 0x48, 0x08, 0xe1, 0x25, 0x07, 0x6d, 0xf0,
	0x00, 0xf5, 0x56, 0xd4, 0xd0, 0x45, 0x46, 0x4d, 0xec, 0x3a, 0x43, 0x67, 0xdc, 0x0b, 0xbb, 0xc5,
	0x87, 0x39, 0x35, 0x31, 0xf6, 0x50, 0x37, 0xd7, 0xa0, 0x04, 0xe5, 0xe0, 0xb6, 0xad, 0x56, 0xd7,
	0x85, 0x96, 0x51, 0xad, 0xdf, 0xa4, 0x5a, 0xb9, 0x7f, 0xac, 0x56, 0xd7, 0x78, 0x8a, 0x3a, 0x6b,
	0xca, 0x12, 0x11, 0xb9, 0x7f, 0x87, 0xce, 0xb8, 0x3f, 0x19, 0x90, 0x86, 0xe5, 0xc9, 0x5d, 0x69,
	0x09, 0x2b, 0xab, 0x0f, 0xe8, 0xe8, 0x26, 0x06, 0xf6, 0xbc, 0xff, 0x7a, 0x9b, 0x98, 0xf6, 0xfe,
	0x31, 0x0c, 0xe1, 0xed, 0x18, 0x9d, 0x49, 0xa1, 0x01, 0x5f, 0xa1, 0x8e, 0x02, 0x9d, 0xa7, 0xa6,
	0x0c, 0xe9, 0x4f, 0xce, 0x1b, 0x47, 0x3d, 0x82, 0x36, 0x61, 0x69, 0x0b, 0x2b, 0x3b, 0x3e, 0x41,
	0xff, 0x40, 0x29, 0xa9, 0xaa, 0xfb, 0xd8, 0x62, 0xf2, 0xe5, 0xa0, 0xc3, 0x59, 0x0d, 0xf2, 0xc1,
	0x72, 0xc4, 0x73, 0xf4, 0x7f, 0x0b, 0x00, 0x1e, 0x35, 0x46, 0xec, 0x22, 0xf2, 0x4e, 0x89, 0xe5,
	0x4a, 0x6a, 0xae, 0xe4, 0xb6, 0xe0, 0xea, 0xb7, 0xf0, 0x02, 0xa1, 0xcd, 0xbf, 0xe0, 0x8b, 0xc6,
	0x81, 0x3b, 0x37, 0xf5, 0x46, 0xbf, 0xfa, 0xec, 0x51, 0xfc, 0xd6, 0xf5, 0xe5, 0xd3, 0x88, 0xc5,
	0x4a, 0xf2, 0x24, 0xe7, 0x52, 0x07, 0x45, 0x5b, 0x50, 0xbd, 0x4a, 0x1d, 0x14, 0xfd, 0xc1, 0x4f,
	0xff, 0xb2, 0x53, 0x6e, 0x37, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x09, 0x1f, 0x46, 0x69, 0xc1,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AlignmentServiceClient is the client API for AlignmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AlignmentServiceClient interface {
	// ManualAlign opens preview page on DUT and wait until preview is aligned.
	ManualAlign(ctx context.Context, in *ManualAlignRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CheckAlign opens preview page on DUT and check alignment from the preview.
	CheckAlign(ctx context.Context, in *CheckAlignRequest, opts ...grpc.CallOption) (*CheckAlignResponse, error)
}

type alignmentServiceClient struct {
	cc *grpc.ClientConn
}

func NewAlignmentServiceClient(cc *grpc.ClientConn) AlignmentServiceClient {
	return &alignmentServiceClient{cc}
}

func (c *alignmentServiceClient) ManualAlign(ctx context.Context, in *ManualAlignRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.camerabox.AlignmentService/ManualAlign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alignmentServiceClient) CheckAlign(ctx context.Context, in *CheckAlignRequest, opts ...grpc.CallOption) (*CheckAlignResponse, error) {
	out := new(CheckAlignResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.camerabox.AlignmentService/CheckAlign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlignmentServiceServer is the server API for AlignmentService service.
type AlignmentServiceServer interface {
	// ManualAlign opens preview page on DUT and wait until preview is aligned.
	ManualAlign(context.Context, *ManualAlignRequest) (*empty.Empty, error)
	// CheckAlign opens preview page on DUT and check alignment from the preview.
	CheckAlign(context.Context, *CheckAlignRequest) (*CheckAlignResponse, error)
}

// UnimplementedAlignmentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAlignmentServiceServer struct {
}

func (*UnimplementedAlignmentServiceServer) ManualAlign(ctx context.Context, req *ManualAlignRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManualAlign not implemented")
}
func (*UnimplementedAlignmentServiceServer) CheckAlign(ctx context.Context, req *CheckAlignRequest) (*CheckAlignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAlign not implemented")
}

func RegisterAlignmentServiceServer(s *grpc.Server, srv AlignmentServiceServer) {
	s.RegisterService(&_AlignmentService_serviceDesc, srv)
}

func _AlignmentService_ManualAlign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManualAlignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlignmentServiceServer).ManualAlign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.camerabox.AlignmentService/ManualAlign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlignmentServiceServer).ManualAlign(ctx, req.(*ManualAlignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlignmentService_CheckAlign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAlignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlignmentServiceServer).CheckAlign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.camerabox.AlignmentService/CheckAlign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlignmentServiceServer).CheckAlign(ctx, req.(*CheckAlignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AlignmentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.camerabox.AlignmentService",
	HandlerType: (*AlignmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ManualAlign",
			Handler:    _AlignmentService_ManualAlign_Handler,
		},
		{
			MethodName: "CheckAlign",
			Handler:    _AlignmentService_CheckAlign_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "alignment_service.proto",
}
