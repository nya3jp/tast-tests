// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: camerabox/hal3_service.proto

package camerabox

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HAL3CameraTest int32

const (
	HAL3CameraTest_DEVICE         HAL3CameraTest = 0
	HAL3CameraTest_FRAME          HAL3CameraTest = 1
	HAL3CameraTest_JDA            HAL3CameraTest = 2
	HAL3CameraTest_JEA            HAL3CameraTest = 3
	HAL3CameraTest_MODULE         HAL3CameraTest = 4
	HAL3CameraTest_PERF           HAL3CameraTest = 5
	HAL3CameraTest_PREVIEW        HAL3CameraTest = 6
	HAL3CameraTest_RECORDING      HAL3CameraTest = 7
	HAL3CameraTest_STILL_CAPTURE  HAL3CameraTest = 8
	HAL3CameraTest_STREAM         HAL3CameraTest = 9
	HAL3CameraTest_FACE_DETECTION HAL3CameraTest = 10
)

// Enum value maps for HAL3CameraTest.
var (
	HAL3CameraTest_name = map[int32]string{
		0:  "DEVICE",
		1:  "FRAME",
		2:  "JDA",
		3:  "JEA",
		4:  "MODULE",
		5:  "PERF",
		6:  "PREVIEW",
		7:  "RECORDING",
		8:  "STILL_CAPTURE",
		9:  "STREAM",
		10: "FACE_DETECTION",
	}
	HAL3CameraTest_value = map[string]int32{
		"DEVICE":         0,
		"FRAME":          1,
		"JDA":            2,
		"JEA":            3,
		"MODULE":         4,
		"PERF":           5,
		"PREVIEW":        6,
		"RECORDING":      7,
		"STILL_CAPTURE":  8,
		"STREAM":         9,
		"FACE_DETECTION": 10,
	}
)

func (x HAL3CameraTest) Enum() *HAL3CameraTest {
	p := new(HAL3CameraTest)
	*p = x
	return p
}

func (x HAL3CameraTest) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HAL3CameraTest) Descriptor() protoreflect.EnumDescriptor {
	return file_camerabox_hal3_service_proto_enumTypes[0].Descriptor()
}

func (HAL3CameraTest) Type() protoreflect.EnumType {
	return &file_camerabox_hal3_service_proto_enumTypes[0]
}

func (x HAL3CameraTest) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HAL3CameraTest.Descriptor instead.
func (HAL3CameraTest) EnumDescriptor() ([]byte, []int) {
	return file_camerabox_hal3_service_proto_rawDescGZIP(), []int{0}
}

type RunTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of test to be run.
	Test HAL3CameraTest `protobuf:"varint,1,opt,name=test,proto3,enum=tast.cros.camerabox.HAL3CameraTest" json:"test,omitempty"`
	// Facing of camera to be tested.
	Facing Facing `protobuf:"varint,2,opt,name=facing,proto3,enum=tast.cros.camerabox.Facing" json:"facing,omitempty"`
	// Extended test parameters. The format is "id1=value1,id2=value2,..."
	ExtendedParams string `protobuf:"bytes,3,opt,name=extended_params,json=extendedParams,proto3" json:"extended_params,omitempty"`
}

func (x *RunTestRequest) Reset() {
	*x = RunTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camerabox_hal3_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunTestRequest) ProtoMessage() {}

func (x *RunTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camerabox_hal3_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunTestRequest.ProtoReflect.Descriptor instead.
func (*RunTestRequest) Descriptor() ([]byte, []int) {
	return file_camerabox_hal3_service_proto_rawDescGZIP(), []int{0}
}

func (x *RunTestRequest) GetTest() HAL3CameraTest {
	if x != nil {
		return x.Test
	}
	return HAL3CameraTest_DEVICE
}

func (x *RunTestRequest) GetFacing() Facing {
	if x != nil {
		return x.Facing
	}
	return Facing_FACING_UNSET
}

func (x *RunTestRequest) GetExtendedParams() string {
	if x != nil {
		return x.ExtendedParams
	}
	return ""
}

type RunTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result TestResult `protobuf:"varint,1,opt,name=result,proto3,enum=tast.cros.camerabox.TestResult" json:"result,omitempty"`
	// Error message from running test.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RunTestResponse) Reset() {
	*x = RunTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camerabox_hal3_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunTestResponse) ProtoMessage() {}

func (x *RunTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camerabox_hal3_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunTestResponse.ProtoReflect.Descriptor instead.
func (*RunTestResponse) Descriptor() ([]byte, []int) {
	return file_camerabox_hal3_service_proto_rawDescGZIP(), []int{1}
}

func (x *RunTestResponse) GetResult() TestResult {
	if x != nil {
		return x.Result
	}
	return TestResult_TEST_RESULT_UNSET
}

func (x *RunTestResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_camerabox_hal3_service_proto protoreflect.FileDescriptor

var file_camerabox_hal3_service_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x62, 0x6f, 0x78, 0x2f, 0x68, 0x61, 0x6c, 0x33,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13,
	0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x62, 0x6f, 0x78, 0x1a, 0x16, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x62, 0x6f, 0x78, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x01, 0x0a, 0x0e,
	0x52, 0x75, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37,
	0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x74,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x62,
	0x6f, 0x78, 0x2e, 0x48, 0x41, 0x4c, 0x33, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x62, 0x6f, 0x78, 0x2e, 0x46, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x66, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x60, 0x0a, 0x0f, 0x52, 0x75, 0x6e, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x62, 0x6f, 0x78, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2a, 0x9e, 0x01, 0x0a, 0x0e, 0x48, 0x41, 0x4c, 0x33,
	0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x54, 0x65, 0x73, 0x74, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x44, 0x41, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x45,
	0x41, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x04, 0x12,
	0x08, 0x0a, 0x04, 0x50, 0x45, 0x52, 0x46, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x45,
	0x56, 0x49, 0x45, 0x57, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x49, 0x4c, 0x4c, 0x5f, 0x43,
	0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x45,
	0x41, 0x4d, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x54,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x32, 0x65, 0x0a, 0x0b, 0x48, 0x41, 0x4c, 0x33,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x54, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x62, 0x6f, 0x78, 0x2e, 0x52, 0x75, 0x6e, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x62, 0x6f, 0x78, 0x2e, 0x52, 0x75,
	0x6e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x29, 0x5a, 0x27, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x61,
	0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x73,
	0x2f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x62, 0x6f, 0x78, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_camerabox_hal3_service_proto_rawDescOnce sync.Once
	file_camerabox_hal3_service_proto_rawDescData = file_camerabox_hal3_service_proto_rawDesc
)

func file_camerabox_hal3_service_proto_rawDescGZIP() []byte {
	file_camerabox_hal3_service_proto_rawDescOnce.Do(func() {
		file_camerabox_hal3_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_camerabox_hal3_service_proto_rawDescData)
	})
	return file_camerabox_hal3_service_proto_rawDescData
}

var file_camerabox_hal3_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_camerabox_hal3_service_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_camerabox_hal3_service_proto_goTypes = []interface{}{
	(HAL3CameraTest)(0),     // 0: tast.cros.camerabox.HAL3CameraTest
	(*RunTestRequest)(nil),  // 1: tast.cros.camerabox.RunTestRequest
	(*RunTestResponse)(nil), // 2: tast.cros.camerabox.RunTestResponse
	(Facing)(0),             // 3: tast.cros.camerabox.Facing
	(TestResult)(0),         // 4: tast.cros.camerabox.TestResult
}
var file_camerabox_hal3_service_proto_depIdxs = []int32{
	0, // 0: tast.cros.camerabox.RunTestRequest.test:type_name -> tast.cros.camerabox.HAL3CameraTest
	3, // 1: tast.cros.camerabox.RunTestRequest.facing:type_name -> tast.cros.camerabox.Facing
	4, // 2: tast.cros.camerabox.RunTestResponse.result:type_name -> tast.cros.camerabox.TestResult
	1, // 3: tast.cros.camerabox.HAL3Service.RunTest:input_type -> tast.cros.camerabox.RunTestRequest
	2, // 4: tast.cros.camerabox.HAL3Service.RunTest:output_type -> tast.cros.camerabox.RunTestResponse
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_camerabox_hal3_service_proto_init() }
func file_camerabox_hal3_service_proto_init() {
	if File_camerabox_hal3_service_proto != nil {
		return
	}
	file_camerabox_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_camerabox_hal3_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camerabox_hal3_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_camerabox_hal3_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_camerabox_hal3_service_proto_goTypes,
		DependencyIndexes: file_camerabox_hal3_service_proto_depIdxs,
		EnumInfos:         file_camerabox_hal3_service_proto_enumTypes,
		MessageInfos:      file_camerabox_hal3_service_proto_msgTypes,
	}.Build()
	File_camerabox_hal3_service_proto = out.File
	file_camerabox_hal3_service_proto_rawDesc = nil
	file_camerabox_hal3_service_proto_goTypes = nil
	file_camerabox_hal3_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HAL3ServiceClient is the client API for HAL3Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HAL3ServiceClient interface {
	// RunTest runs specific HAL3 camera test on target facing camera.
	RunTest(ctx context.Context, in *RunTestRequest, opts ...grpc.CallOption) (*RunTestResponse, error)
}

type hAL3ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHAL3ServiceClient(cc grpc.ClientConnInterface) HAL3ServiceClient {
	return &hAL3ServiceClient{cc}
}

func (c *hAL3ServiceClient) RunTest(ctx context.Context, in *RunTestRequest, opts ...grpc.CallOption) (*RunTestResponse, error) {
	out := new(RunTestResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.camerabox.HAL3Service/RunTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HAL3ServiceServer is the server API for HAL3Service service.
type HAL3ServiceServer interface {
	// RunTest runs specific HAL3 camera test on target facing camera.
	RunTest(context.Context, *RunTestRequest) (*RunTestResponse, error)
}

// UnimplementedHAL3ServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHAL3ServiceServer struct {
}

func (*UnimplementedHAL3ServiceServer) RunTest(context.Context, *RunTestRequest) (*RunTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunTest not implemented")
}

func RegisterHAL3ServiceServer(s *grpc.Server, srv HAL3ServiceServer) {
	s.RegisterService(&_HAL3Service_serviceDesc, srv)
}

func _HAL3Service_RunTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAL3ServiceServer).RunTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.camerabox.HAL3Service/RunTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAL3ServiceServer).RunTest(ctx, req.(*RunTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HAL3Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.camerabox.HAL3Service",
	HandlerType: (*HAL3ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunTest",
			Handler:    _HAL3Service_RunTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "camerabox/hal3_service.proto",
}
