// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hal3_service.proto

package camerabox

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HAL3CameraTest int32

const (
	HAL3CameraTest_DEVICE        HAL3CameraTest = 0
	HAL3CameraTest_FRAME         HAL3CameraTest = 1
	HAL3CameraTest_JDA           HAL3CameraTest = 2
	HAL3CameraTest_JEA           HAL3CameraTest = 3
	HAL3CameraTest_MODULE        HAL3CameraTest = 4
	HAL3CameraTest_PERF          HAL3CameraTest = 5
	HAL3CameraTest_PREVIEW       HAL3CameraTest = 6
	HAL3CameraTest_RECORDING     HAL3CameraTest = 7
	HAL3CameraTest_STILL_CAPTURE HAL3CameraTest = 8
	HAL3CameraTest_STREAM        HAL3CameraTest = 9
)

var HAL3CameraTest_name = map[int32]string{
	0: "DEVICE",
	1: "FRAME",
	2: "JDA",
	3: "JEA",
	4: "MODULE",
	5: "PERF",
	6: "PREVIEW",
	7: "RECORDING",
	8: "STILL_CAPTURE",
	9: "STREAM",
}

var HAL3CameraTest_value = map[string]int32{
	"DEVICE":        0,
	"FRAME":         1,
	"JDA":           2,
	"JEA":           3,
	"MODULE":        4,
	"PERF":          5,
	"PREVIEW":       6,
	"RECORDING":     7,
	"STILL_CAPTURE": 8,
	"STREAM":        9,
}

func (x HAL3CameraTest) String() string {
	return proto.EnumName(HAL3CameraTest_name, int32(x))
}

func (HAL3CameraTest) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_622c68ca9bf6b99e, []int{0}
}

type RunTestRequest struct {
	Test                 HAL3CameraTest `protobuf:"varint,1,opt,name=test,proto3,enum=tast.cros.camerabox.HAL3CameraTest" json:"test,omitempty"`
	Facing               Facing         `protobuf:"varint,2,opt,name=facing,proto3,enum=tast.cros.camerabox.Facing" json:"facing,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RunTestRequest) Reset()         { *m = RunTestRequest{} }
func (m *RunTestRequest) String() string { return proto.CompactTextString(m) }
func (*RunTestRequest) ProtoMessage()    {}
func (*RunTestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_622c68ca9bf6b99e, []int{0}
}

func (m *RunTestRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunTestRequest.Unmarshal(m, b)
}
func (m *RunTestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunTestRequest.Marshal(b, m, deterministic)
}
func (m *RunTestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunTestRequest.Merge(m, src)
}
func (m *RunTestRequest) XXX_Size() int {
	return xxx_messageInfo_RunTestRequest.Size(m)
}
func (m *RunTestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunTestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunTestRequest proto.InternalMessageInfo

func (m *RunTestRequest) GetTest() HAL3CameraTest {
	if m != nil {
		return m.Test
	}
	return HAL3CameraTest_DEVICE
}

func (m *RunTestRequest) GetFacing() Facing {
	if m != nil {
		return m.Facing
	}
	return Facing_FACING_UNKNOWN
}

type RunTestResponse struct {
	// Compressed test output directory.
	OutDir               []byte   `protobuf:"bytes,1,opt,name=out_dir,json=outDir,proto3" json:"out_dir,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunTestResponse) Reset()         { *m = RunTestResponse{} }
func (m *RunTestResponse) String() string { return proto.CompactTextString(m) }
func (*RunTestResponse) ProtoMessage()    {}
func (*RunTestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_622c68ca9bf6b99e, []int{1}
}

func (m *RunTestResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunTestResponse.Unmarshal(m, b)
}
func (m *RunTestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunTestResponse.Marshal(b, m, deterministic)
}
func (m *RunTestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunTestResponse.Merge(m, src)
}
func (m *RunTestResponse) XXX_Size() int {
	return xxx_messageInfo_RunTestResponse.Size(m)
}
func (m *RunTestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RunTestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RunTestResponse proto.InternalMessageInfo

func (m *RunTestResponse) GetOutDir() []byte {
	if m != nil {
		return m.OutDir
	}
	return nil
}

func init() {
	proto.RegisterEnum("tast.cros.camerabox.HAL3CameraTest", HAL3CameraTest_name, HAL3CameraTest_value)
	proto.RegisterType((*RunTestRequest)(nil), "tast.cros.camerabox.RunTestRequest")
	proto.RegisterType((*RunTestResponse)(nil), "tast.cros.camerabox.RunTestResponse")
}

func init() { proto.RegisterFile("hal3_service.proto", fileDescriptor_622c68ca9bf6b99e) }

var fileDescriptor_622c68ca9bf6b99e = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x4d, 0x6b, 0xe2, 0x40,
	0x18, 0xc7, 0x8d, 0x2f, 0x89, 0x3e, 0xbe, 0xec, 0xec, 0xec, 0x61, 0xc5, 0xbd, 0x2c, 0xee, 0xc2,
	0xee, 0x7a, 0x48, 0xc0, 0x1c, 0xf6, 0x9c, 0x26, 0x63, 0x9b, 0x12, 0xab, 0x8c, 0xd1, 0x42, 0x2f,
	0x12, 0xd3, 0x69, 0x0d, 0x34, 0x19, 0x9b, 0x99, 0x94, 0x9e, 0xfa, 0x01, 0xfa, 0xa9, 0x4b, 0x46,
	0x11, 0x04, 0xe9, 0x6d, 0x06, 0x7e, 0xbf, 0xe7, 0xe5, 0xff, 0x00, 0xde, 0x46, 0x4f, 0xf6, 0x5a,
	0xb0, 0xfc, 0x25, 0x89, 0x99, 0xb9, 0xcb, 0xb9, 0xe4, 0xf8, 0x9b, 0x8c, 0x84, 0x34, 0xe3, 0x9c,
	0x0b, 0x33, 0x8e, 0x52, 0x96, 0x47, 0x1b, 0xfe, 0x3a, 0xe8, 0xc4, 0x3c, 0x4d, 0x79, 0xb6, 0x47,
	0x86, 0x6f, 0xd0, 0xa3, 0x45, 0x16, 0x32, 0x21, 0x29, 0x7b, 0x2e, 0x98, 0x90, 0xf8, 0x3f, 0xd4,
	0x25, 0x13, 0xb2, 0xaf, 0xfd, 0xd4, 0xfe, 0xf6, 0xc6, 0xbf, 0xcc, 0x33, 0x35, 0xcc, 0x2b, 0x27,
	0xb0, 0x5d, 0xf5, 0x53, 0xa6, 0x12, 0xb0, 0x0d, 0xfa, 0x43, 0x14, 0x27, 0xd9, 0x63, 0xbf, 0xaa,
	0xd4, 0x1f, 0x67, 0xd5, 0x89, 0x42, 0xe8, 0x01, 0x1d, 0x8e, 0xe0, 0xcb, 0xb1, 0xbf, 0xd8, 0xf1,
	0x4c, 0x30, 0xfc, 0x1d, 0x0c, 0x5e, 0xc8, 0xf5, 0x7d, 0x92, 0xab, 0x19, 0x3a, 0x54, 0xe7, 0x85,
	0xf4, 0x92, 0x7c, 0xf4, 0xae, 0x41, 0xef, 0xb4, 0x33, 0x06, 0xd0, 0x3d, 0xb2, 0xf2, 0x5d, 0x82,
	0x2a, 0xb8, 0x05, 0x8d, 0x09, 0x75, 0xa6, 0x04, 0x69, 0xd8, 0x80, 0xda, 0xb5, 0xe7, 0xa0, 0xaa,
	0x7a, 0x10, 0x07, 0xd5, 0x4a, 0x70, 0x3a, 0xf3, 0x96, 0x01, 0x41, 0x75, 0xdc, 0x84, 0xfa, 0x9c,
	0xd0, 0x09, 0x6a, 0xe0, 0x36, 0x18, 0x73, 0x4a, 0x56, 0x3e, 0xb9, 0x45, 0x3a, 0xee, 0x42, 0x8b,
	0x12, 0x77, 0x46, 0x3d, 0xff, 0xe6, 0x12, 0x19, 0xf8, 0x2b, 0x74, 0x17, 0xa1, 0x1f, 0x04, 0x6b,
	0xd7, 0x99, 0x87, 0x4b, 0x4a, 0x50, 0xb3, 0x2c, 0xb2, 0x08, 0x29, 0x71, 0xa6, 0xa8, 0x35, 0x66,
	0xd0, 0x2e, 0x67, 0x59, 0xec, 0x03, 0xc7, 0x2b, 0x30, 0x0e, 0x7b, 0xe0, 0xf3, 0x91, 0x9d, 0xa6,
	0x3c, 0xf8, 0xfd, 0x39, 0xb4, 0x8f, 0x62, 0x58, 0xb9, 0xf8, 0x77, 0xf7, 0x27, 0xde, 0xe6, 0x3c,
	0x4d, 0x8a, 0x94, 0x0b, 0xab, 0x74, 0xac, 0xc3, 0x8d, 0x85, 0x55, 0xca, 0xd6, 0x51, 0xde, 0xe8,
	0xea, 0xa2, 0xf6, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7a, 0xaa, 0xbb, 0x0e, 0x0a, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HAL3ServiceClient is the client API for HAL3Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HAL3ServiceClient interface {
	// RunTest runs specific HAL3 camera test on target facing camera.
	RunTest(ctx context.Context, in *RunTestRequest, opts ...grpc.CallOption) (*RunTestResponse, error)
}

type hAL3ServiceClient struct {
	cc *grpc.ClientConn
}

func NewHAL3ServiceClient(cc *grpc.ClientConn) HAL3ServiceClient {
	return &hAL3ServiceClient{cc}
}

func (c *hAL3ServiceClient) RunTest(ctx context.Context, in *RunTestRequest, opts ...grpc.CallOption) (*RunTestResponse, error) {
	out := new(RunTestResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.camerabox.HAL3Service/RunTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HAL3ServiceServer is the server API for HAL3Service service.
type HAL3ServiceServer interface {
	// RunTest runs specific HAL3 camera test on target facing camera.
	RunTest(context.Context, *RunTestRequest) (*RunTestResponse, error)
}

// UnimplementedHAL3ServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHAL3ServiceServer struct {
}

func (*UnimplementedHAL3ServiceServer) RunTest(ctx context.Context, req *RunTestRequest) (*RunTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunTest not implemented")
}

func RegisterHAL3ServiceServer(s *grpc.Server, srv HAL3ServiceServer) {
	s.RegisterService(&_HAL3Service_serviceDesc, srv)
}

func _HAL3Service_RunTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAL3ServiceServer).RunTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.camerabox.HAL3Service/RunTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAL3ServiceServer).RunTest(ctx, req.(*RunTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HAL3Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.camerabox.HAL3Service",
	HandlerType: (*HAL3ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunTest",
			Handler:    _HAL3Service_RunTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hal3_service.proto",
}
