// Copyright 2021 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: nearby_share_service.proto

package nearbyservice

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CrOSLoginRequest to login to Chrome with configurable GAIA credentials.
type CrOSLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username      string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password      string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	KeepState     bool     `protobuf:"varint,3,opt,name=keep_state,json=keepState,proto3" json:"keep_state,omitempty"`
	EnabledFlags  []string `protobuf:"bytes,4,rep,name=enabled_flags,json=enabledFlags,proto3" json:"enabled_flags,omitempty"`
	DisabledFlags []string `protobuf:"bytes,5,rep,name=disabled_flags,json=disabledFlags,proto3" json:"disabled_flags,omitempty"`
}

func (x *CrOSLoginRequest) Reset() {
	*x = CrOSLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nearby_share_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrOSLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrOSLoginRequest) ProtoMessage() {}

func (x *CrOSLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nearby_share_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrOSLoginRequest.ProtoReflect.Descriptor instead.
func (*CrOSLoginRequest) Descriptor() ([]byte, []int) {
	return file_nearby_share_service_proto_rawDescGZIP(), []int{0}
}

func (x *CrOSLoginRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CrOSLoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CrOSLoginRequest) GetKeepState() bool {
	if x != nil {
		return x.KeepState
	}
	return false
}

func (x *CrOSLoginRequest) GetEnabledFlags() []string {
	if x != nil {
		return x.EnabledFlags
	}
	return nil
}

func (x *CrOSLoginRequest) GetDisabledFlags() []string {
	if x != nil {
		return x.DisabledFlags
	}
	return nil
}

// CrOSAcceptFastInitiationNotificationRequest is a request to accept a
// background scanning notification which differs depending on whether
// onboarding is complete.
type CrOSAcceptFastInitiationNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSetupComplete bool `protobuf:"varint,1,opt,name=is_setup_complete,json=isSetupComplete,proto3" json:"is_setup_complete,omitempty"`
}

func (x *CrOSAcceptFastInitiationNotificationRequest) Reset() {
	*x = CrOSAcceptFastInitiationNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nearby_share_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrOSAcceptFastInitiationNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrOSAcceptFastInitiationNotificationRequest) ProtoMessage() {}

func (x *CrOSAcceptFastInitiationNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nearby_share_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrOSAcceptFastInitiationNotificationRequest.ProtoReflect.Descriptor instead.
func (*CrOSAcceptFastInitiationNotificationRequest) Descriptor() ([]byte, []int) {
	return file_nearby_share_service_proto_rawDescGZIP(), []int{1}
}

func (x *CrOSAcceptFastInitiationNotificationRequest) GetIsSetupComplete() bool {
	if x != nil {
		return x.IsSetupComplete
	}
	return false
}

// CrOSSetupRequest is a request to setup and configure Nearby Share on a
// ChromeOS device.
type CrOSSetupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataUsage      int32  `protobuf:"varint,1,opt,name=data_usage,json=dataUsage,proto3" json:"data_usage,omitempty"`
	Visibility     int32  `protobuf:"varint,2,opt,name=visibility,proto3" json:"visibility,omitempty"`
	DeviceName     string `protobuf:"bytes,3,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	SenderUsername string `protobuf:"bytes,4,opt,name=sender_username,json=senderUsername,proto3" json:"sender_username,omitempty"`
}

func (x *CrOSSetupRequest) Reset() {
	*x = CrOSSetupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nearby_share_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrOSSetupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrOSSetupRequest) ProtoMessage() {}

func (x *CrOSSetupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nearby_share_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrOSSetupRequest.ProtoReflect.Descriptor instead.
func (*CrOSSetupRequest) Descriptor() ([]byte, []int) {
	return file_nearby_share_service_proto_rawDescGZIP(), []int{2}
}

func (x *CrOSSetupRequest) GetDataUsage() int32 {
	if x != nil {
		return x.DataUsage
	}
	return 0
}

func (x *CrOSSetupRequest) GetVisibility() int32 {
	if x != nil {
		return x.Visibility
	}
	return 0
}

func (x *CrOSSetupRequest) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *CrOSSetupRequest) GetSenderUsername() string {
	if x != nil {
		return x.SenderUsername
	}
	return ""
}

// CrOSPrepareFileRequest contains the archive of files to be sent by Nearby
// Share.
type CrOSPrepareFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *CrOSPrepareFileRequest) Reset() {
	*x = CrOSPrepareFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nearby_share_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrOSPrepareFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrOSPrepareFileRequest) ProtoMessage() {}

func (x *CrOSPrepareFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nearby_share_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrOSPrepareFileRequest.ProtoReflect.Descriptor instead.
func (*CrOSPrepareFileRequest) Descriptor() ([]byte, []int) {
	return file_nearby_share_service_proto_rawDescGZIP(), []int{3}
}

func (x *CrOSPrepareFileRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

// CrOSPrepareFileResponse is the individual file names that were extracted that
// will be sent.
type CrOSPrepareFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileNames []string `protobuf:"bytes,1,rep,name=file_names,json=fileNames,proto3" json:"file_names,omitempty"`
}

func (x *CrOSPrepareFileResponse) Reset() {
	*x = CrOSPrepareFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nearby_share_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrOSPrepareFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrOSPrepareFileResponse) ProtoMessage() {}

func (x *CrOSPrepareFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nearby_share_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrOSPrepareFileResponse.ProtoReflect.Descriptor instead.
func (*CrOSPrepareFileResponse) Descriptor() ([]byte, []int) {
	return file_nearby_share_service_proto_rawDescGZIP(), []int{4}
}

func (x *CrOSPrepareFileResponse) GetFileNames() []string {
	if x != nil {
		return x.FileNames
	}
	return nil
}

// CrOSSendFilesRequest contains the files to be sent by Nearby Share.
type CrOSSendFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileNames []string `protobuf:"bytes,1,rep,name=file_names,json=fileNames,proto3" json:"file_names,omitempty"`
}

func (x *CrOSSendFilesRequest) Reset() {
	*x = CrOSSendFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nearby_share_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrOSSendFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrOSSendFilesRequest) ProtoMessage() {}

func (x *CrOSSendFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nearby_share_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrOSSendFilesRequest.ProtoReflect.Descriptor instead.
func (*CrOSSendFilesRequest) Descriptor() ([]byte, []int) {
	return file_nearby_share_service_proto_rawDescGZIP(), []int{5}
}

func (x *CrOSSendFilesRequest) GetFileNames() []string {
	if x != nil {
		return x.FileNames
	}
	return nil
}

// CrOSSelectShareTargetRequest contains the receiver to send files to.
type CrOSSelectShareTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiverName      string `protobuf:"bytes,1,opt,name=receiver_name,json=receiverName,proto3" json:"receiver_name,omitempty"`
	CollectShareToken bool   `protobuf:"varint,2,opt,name=collect_share_token,json=collectShareToken,proto3" json:"collect_share_token,omitempty"`
}

func (x *CrOSSelectShareTargetRequest) Reset() {
	*x = CrOSSelectShareTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nearby_share_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrOSSelectShareTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrOSSelectShareTargetRequest) ProtoMessage() {}

func (x *CrOSSelectShareTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nearby_share_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrOSSelectShareTargetRequest.ProtoReflect.Descriptor instead.
func (*CrOSSelectShareTargetRequest) Descriptor() ([]byte, []int) {
	return file_nearby_share_service_proto_rawDescGZIP(), []int{6}
}

func (x *CrOSSelectShareTargetRequest) GetReceiverName() string {
	if x != nil {
		return x.ReceiverName
	}
	return ""
}

func (x *CrOSSelectShareTargetRequest) GetCollectShareToken() bool {
	if x != nil {
		return x.CollectShareToken
	}
	return false
}

// CrOSFileHashRequest contains the list of files we want to hash.
type CrOSFileHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileNames []string `protobuf:"bytes,1,rep,name=file_names,json=fileNames,proto3" json:"file_names,omitempty"`
	FileDir   string   `protobuf:"bytes,2,opt,name=file_dir,json=fileDir,proto3" json:"file_dir,omitempty"`
}

func (x *CrOSFileHashRequest) Reset() {
	*x = CrOSFileHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nearby_share_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrOSFileHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrOSFileHashRequest) ProtoMessage() {}

func (x *CrOSFileHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nearby_share_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrOSFileHashRequest.ProtoReflect.Descriptor instead.
func (*CrOSFileHashRequest) Descriptor() ([]byte, []int) {
	return file_nearby_share_service_proto_rawDescGZIP(), []int{7}
}

func (x *CrOSFileHashRequest) GetFileNames() []string {
	if x != nil {
		return x.FileNames
	}
	return nil
}

func (x *CrOSFileHashRequest) GetFileDir() string {
	if x != nil {
		return x.FileDir
	}
	return ""
}

// CrOSFileHashResponse contains the list of hashes generated for a list of
// files.
type CrOSFileHashResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hashes []string `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty"`
}

func (x *CrOSFileHashResponse) Reset() {
	*x = CrOSFileHashResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nearby_share_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrOSFileHashResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrOSFileHashResponse) ProtoMessage() {}

func (x *CrOSFileHashResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nearby_share_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrOSFileHashResponse.ProtoReflect.Descriptor instead.
func (*CrOSFileHashResponse) Descriptor() ([]byte, []int) {
	return file_nearby_share_service_proto_rawDescGZIP(), []int{8}
}

func (x *CrOSFileHashResponse) GetHashes() []string {
	if x != nil {
		return x.Hashes
	}
	return nil
}

// CrOSReceiveFilesRequest contains the sender name that we want to receive
// files from and the file transfer timeout in seconds.
type CrOSReceiveFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderName             string `protobuf:"bytes,1,opt,name=sender_name,json=senderName,proto3" json:"sender_name,omitempty"`
	TransferTimeoutSeconds int32  `protobuf:"varint,2,opt,name=transfer_timeout_seconds,json=transferTimeoutSeconds,proto3" json:"transfer_timeout_seconds,omitempty"`
}

func (x *CrOSReceiveFilesRequest) Reset() {
	*x = CrOSReceiveFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nearby_share_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrOSReceiveFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrOSReceiveFilesRequest) ProtoMessage() {}

func (x *CrOSReceiveFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nearby_share_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrOSReceiveFilesRequest.ProtoReflect.Descriptor instead.
func (*CrOSReceiveFilesRequest) Descriptor() ([]byte, []int) {
	return file_nearby_share_service_proto_rawDescGZIP(), []int{9}
}

func (x *CrOSReceiveFilesRequest) GetSenderName() string {
	if x != nil {
		return x.SenderName
	}
	return ""
}

func (x *CrOSReceiveFilesRequest) GetTransferTimeoutSeconds() int32 {
	if x != nil {
		return x.TransferTimeoutSeconds
	}
	return 0
}

// CrOSShareTokenResponse contains the share token from the receiver.
type CrOSShareTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareToken string `protobuf:"bytes,1,opt,name=share_token,json=shareToken,proto3" json:"share_token,omitempty"`
}

func (x *CrOSShareTokenResponse) Reset() {
	*x = CrOSShareTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nearby_share_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrOSShareTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrOSShareTokenResponse) ProtoMessage() {}

func (x *CrOSShareTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nearby_share_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrOSShareTokenResponse.ProtoReflect.Descriptor instead.
func (*CrOSShareTokenResponse) Descriptor() ([]byte, []int) {
	return file_nearby_share_service_proto_rawDescGZIP(), []int{10}
}

func (x *CrOSShareTokenResponse) GetShareToken() string {
	if x != nil {
		return x.ShareToken
	}
	return ""
}

// CrOSAttributesResponse contains the attributes for a chromeos DUT.
type CrOSAttributesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attributes string `protobuf:"bytes,1,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *CrOSAttributesResponse) Reset() {
	*x = CrOSAttributesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nearby_share_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrOSAttributesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrOSAttributesResponse) ProtoMessage() {}

func (x *CrOSAttributesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nearby_share_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrOSAttributesResponse.ProtoReflect.Descriptor instead.
func (*CrOSAttributesResponse) Descriptor() ([]byte, []int) {
	return file_nearby_share_service_proto_rawDescGZIP(), []int{11}
}

func (x *CrOSAttributesResponse) GetAttributes() string {
	if x != nil {
		return x.Attributes
	}
	return ""
}

// SaveLogsRequest contains whether or not to save a screenshot and a UI tree
// dump.
type SaveLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SaveUiLogs bool `protobuf:"varint,1,opt,name=save_ui_logs,json=saveUiLogs,proto3" json:"save_ui_logs,omitempty"`
}

func (x *SaveLogsRequest) Reset() {
	*x = SaveLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nearby_share_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveLogsRequest) ProtoMessage() {}

func (x *SaveLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nearby_share_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveLogsRequest.ProtoReflect.Descriptor instead.
func (*SaveLogsRequest) Descriptor() ([]byte, []int) {
	return file_nearby_share_service_proto_rawDescGZIP(), []int{12}
}

func (x *SaveLogsRequest) GetSaveUiLogs() bool {
	if x != nil {
		return x.SaveUiLogs
	}
	return false
}

var File_nearby_share_service_proto protoreflect.FileDescriptor

var file_nearby_share_service_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x74, 0x61,
	0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xb5, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x4f, 0x53, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x59, 0x0a, 0x2b, 0x43, 0x72,
	0x4f, 0x53, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x46, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f,
	0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x53, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x4f, 0x53, 0x53, 0x65,
	0x74, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x16, 0x43, 0x72, 0x4f, 0x53, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x17, 0x43, 0x72,
	0x4f, 0x53, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x22, 0x35, 0x0a, 0x14, 0x43, 0x72, 0x4f, 0x53, 0x53, 0x65, 0x6e, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x73, 0x0a, 0x1c, 0x43,
	0x72, 0x4f, 0x53, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x4f, 0x0a, 0x13, 0x43, 0x72, 0x4f, 0x53, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64,
	0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x69,
	0x72, 0x22, 0x2e, 0x0a, 0x14, 0x43, 0x72, 0x4f, 0x53, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x22, 0x74, 0x0a, 0x17, 0x43, 0x72, 0x4f, 0x53, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x39, 0x0a, 0x16, 0x43, 0x72, 0x4f, 0x53, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x38, 0x0a, 0x16, 0x43, 0x72, 0x4f, 0x53, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x33, 0x0a, 0x0f,
	0x53, 0x61, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0c, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x75, 0x69, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x61, 0x76, 0x65, 0x55, 0x69, 0x4c, 0x6f, 0x67,
	0x73, 0x32, 0xda, 0x0c, 0x0a, 0x12, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x43,
	0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x29, 0x2e, 0x74, 0x61, 0x73,
	0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x4f, 0x53, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x3f, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x50, 0x0a, 0x09, 0x43, 0x72, 0x4f, 0x53, 0x53, 0x65, 0x74, 0x75, 0x70, 0x12, 0x29, 0x2e,
	0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x62, 0x79,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x4f, 0x53, 0x53, 0x65, 0x74, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x6c, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x48, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x12, 0x2c, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x6e, 0x65,
	0x61, 0x72, 0x62, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x4f, 0x53,
	0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72,
	0x62, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x4f, 0x53, 0x46, 0x69,
	0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x73, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x2f, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x6e, 0x65, 0x61,
	0x72, 0x62, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x4f, 0x53, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x6e, 0x65,
	0x61, 0x72, 0x62, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x4f, 0x53,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65,
	0x6e, 0x64, 0x12, 0x2d, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x6e,
	0x65, 0x61, 0x72, 0x62, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x4f,
	0x53, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x11, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x35, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x6e, 0x65, 0x61,
	0x72, 0x62, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x4f, 0x53, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x72, 0x4f, 0x53, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x17, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x48, 0x69, 0x67, 0x68, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x15, 0x57, 0x61, 0x69, 0x74, 0x46,
	0x6f, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f, 0x77,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x42, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x1b, 0x57, 0x61, 0x69, 0x74, 0x46,
	0x6f, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x30, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72,
	0x6f, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x72, 0x4f, 0x53, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x72, 0x4f, 0x53, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x33,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x6e, 0x64, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e,
	0x6e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72,
	0x4f, 0x53, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x82, 0x01, 0x0a, 0x20, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x46, 0x61, 0x73, 0x74, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x2e, 0x6e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x72, 0x4f, 0x53, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x46, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x08, 0x53, 0x61, 0x76, 0x65, 0x4c, 0x6f,
	0x67, 0x73, 0x12, 0x28, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x6e,
	0x65, 0x61, 0x72, 0x62, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x76,
	0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x15, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x5b, 0x0a, 0x0e, 0x43, 0x72, 0x4f, 0x53, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2f, 0x2e, 0x74, 0x61,
	0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x4f, 0x53, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2d,
	0x5a, 0x2b, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x61, 0x73,
	0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f,
	0x6e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nearby_share_service_proto_rawDescOnce sync.Once
	file_nearby_share_service_proto_rawDescData = file_nearby_share_service_proto_rawDesc
)

func file_nearby_share_service_proto_rawDescGZIP() []byte {
	file_nearby_share_service_proto_rawDescOnce.Do(func() {
		file_nearby_share_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_nearby_share_service_proto_rawDescData)
	})
	return file_nearby_share_service_proto_rawDescData
}

var file_nearby_share_service_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_nearby_share_service_proto_goTypes = []interface{}{
	(*CrOSLoginRequest)(nil),                            // 0: tast.cros.nearbyservice.CrOSLoginRequest
	(*CrOSAcceptFastInitiationNotificationRequest)(nil), // 1: tast.cros.nearbyservice.CrOSAcceptFastInitiationNotificationRequest
	(*CrOSSetupRequest)(nil),                            // 2: tast.cros.nearbyservice.CrOSSetupRequest
	(*CrOSPrepareFileRequest)(nil),                      // 3: tast.cros.nearbyservice.CrOSPrepareFileRequest
	(*CrOSPrepareFileResponse)(nil),                     // 4: tast.cros.nearbyservice.CrOSPrepareFileResponse
	(*CrOSSendFilesRequest)(nil),                        // 5: tast.cros.nearbyservice.CrOSSendFilesRequest
	(*CrOSSelectShareTargetRequest)(nil),                // 6: tast.cros.nearbyservice.CrOSSelectShareTargetRequest
	(*CrOSFileHashRequest)(nil),                         // 7: tast.cros.nearbyservice.CrOSFileHashRequest
	(*CrOSFileHashResponse)(nil),                        // 8: tast.cros.nearbyservice.CrOSFileHashResponse
	(*CrOSReceiveFilesRequest)(nil),                     // 9: tast.cros.nearbyservice.CrOSReceiveFilesRequest
	(*CrOSShareTokenResponse)(nil),                      // 10: tast.cros.nearbyservice.CrOSShareTokenResponse
	(*CrOSAttributesResponse)(nil),                      // 11: tast.cros.nearbyservice.CrOSAttributesResponse
	(*SaveLogsRequest)(nil),                             // 12: tast.cros.nearbyservice.SaveLogsRequest
	(*empty.Empty)(nil),                                 // 13: google.protobuf.Empty
}
var file_nearby_share_service_proto_depIdxs = []int32{
	0,  // 0: tast.cros.nearbyservice.NearbyShareService.NewChromeLogin:input_type -> tast.cros.nearbyservice.CrOSLoginRequest
	13, // 1: tast.cros.nearbyservice.NearbyShareService.CloseChrome:input_type -> google.protobuf.Empty
	2,  // 2: tast.cros.nearbyservice.NearbyShareService.CrOSSetup:input_type -> tast.cros.nearbyservice.CrOSSetupRequest
	7,  // 3: tast.cros.nearbyservice.NearbyShareService.FilesHashes:input_type -> tast.cros.nearbyservice.CrOSFileHashRequest
	3,  // 4: tast.cros.nearbyservice.NearbyShareService.PrepareFiles:input_type -> tast.cros.nearbyservice.CrOSPrepareFileRequest
	5,  // 5: tast.cros.nearbyservice.NearbyShareService.StartSend:input_type -> tast.cros.nearbyservice.CrOSSendFilesRequest
	6,  // 6: tast.cros.nearbyservice.NearbyShareService.SelectShareTarget:input_type -> tast.cros.nearbyservice.CrOSSelectShareTargetRequest
	13, // 7: tast.cros.nearbyservice.NearbyShareService.StartHighVisibilityMode:input_type -> google.protobuf.Empty
	13, // 8: tast.cros.nearbyservice.NearbyShareService.WaitForOnboardingFlow:input_type -> google.protobuf.Empty
	13, // 9: tast.cros.nearbyservice.NearbyShareService.StartReceiving:input_type -> google.protobuf.Empty
	9,  // 10: tast.cros.nearbyservice.NearbyShareService.WaitForSenderAndAcceptShare:input_type -> tast.cros.nearbyservice.CrOSReceiveFilesRequest
	9,  // 11: tast.cros.nearbyservice.NearbyShareService.AcceptIncomingShareNotificationAndWaitForCompletion:input_type -> tast.cros.nearbyservice.CrOSReceiveFilesRequest
	1,  // 12: tast.cros.nearbyservice.NearbyShareService.AcceptFastInitiationNotification:input_type -> tast.cros.nearbyservice.CrOSAcceptFastInitiationNotificationRequest
	13, // 13: tast.cros.nearbyservice.NearbyShareService.StartLogging:input_type -> google.protobuf.Empty
	12, // 14: tast.cros.nearbyservice.NearbyShareService.SaveLogs:input_type -> tast.cros.nearbyservice.SaveLogsRequest
	13, // 15: tast.cros.nearbyservice.NearbyShareService.ClearTransferredFiles:input_type -> google.protobuf.Empty
	13, // 16: tast.cros.nearbyservice.NearbyShareService.CrOSAttributes:input_type -> google.protobuf.Empty
	13, // 17: tast.cros.nearbyservice.NearbyShareService.NewChromeLogin:output_type -> google.protobuf.Empty
	13, // 18: tast.cros.nearbyservice.NearbyShareService.CloseChrome:output_type -> google.protobuf.Empty
	13, // 19: tast.cros.nearbyservice.NearbyShareService.CrOSSetup:output_type -> google.protobuf.Empty
	8,  // 20: tast.cros.nearbyservice.NearbyShareService.FilesHashes:output_type -> tast.cros.nearbyservice.CrOSFileHashResponse
	4,  // 21: tast.cros.nearbyservice.NearbyShareService.PrepareFiles:output_type -> tast.cros.nearbyservice.CrOSPrepareFileResponse
	13, // 22: tast.cros.nearbyservice.NearbyShareService.StartSend:output_type -> google.protobuf.Empty
	10, // 23: tast.cros.nearbyservice.NearbyShareService.SelectShareTarget:output_type -> tast.cros.nearbyservice.CrOSShareTokenResponse
	13, // 24: tast.cros.nearbyservice.NearbyShareService.StartHighVisibilityMode:output_type -> google.protobuf.Empty
	13, // 25: tast.cros.nearbyservice.NearbyShareService.WaitForOnboardingFlow:output_type -> google.protobuf.Empty
	13, // 26: tast.cros.nearbyservice.NearbyShareService.StartReceiving:output_type -> google.protobuf.Empty
	10, // 27: tast.cros.nearbyservice.NearbyShareService.WaitForSenderAndAcceptShare:output_type -> tast.cros.nearbyservice.CrOSShareTokenResponse
	13, // 28: tast.cros.nearbyservice.NearbyShareService.AcceptIncomingShareNotificationAndWaitForCompletion:output_type -> google.protobuf.Empty
	13, // 29: tast.cros.nearbyservice.NearbyShareService.AcceptFastInitiationNotification:output_type -> google.protobuf.Empty
	13, // 30: tast.cros.nearbyservice.NearbyShareService.StartLogging:output_type -> google.protobuf.Empty
	13, // 31: tast.cros.nearbyservice.NearbyShareService.SaveLogs:output_type -> google.protobuf.Empty
	13, // 32: tast.cros.nearbyservice.NearbyShareService.ClearTransferredFiles:output_type -> google.protobuf.Empty
	11, // 33: tast.cros.nearbyservice.NearbyShareService.CrOSAttributes:output_type -> tast.cros.nearbyservice.CrOSAttributesResponse
	17, // [17:34] is the sub-list for method output_type
	0,  // [0:17] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_nearby_share_service_proto_init() }
func file_nearby_share_service_proto_init() {
	if File_nearby_share_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nearby_share_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrOSLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nearby_share_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrOSAcceptFastInitiationNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nearby_share_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrOSSetupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nearby_share_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrOSPrepareFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nearby_share_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrOSPrepareFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nearby_share_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrOSSendFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nearby_share_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrOSSelectShareTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nearby_share_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrOSFileHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nearby_share_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrOSFileHashResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nearby_share_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrOSReceiveFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nearby_share_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrOSShareTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nearby_share_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrOSAttributesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nearby_share_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nearby_share_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nearby_share_service_proto_goTypes,
		DependencyIndexes: file_nearby_share_service_proto_depIdxs,
		MessageInfos:      file_nearby_share_service_proto_msgTypes,
	}.Build()
	File_nearby_share_service_proto = out.File
	file_nearby_share_service_proto_rawDesc = nil
	file_nearby_share_service_proto_goTypes = nil
	file_nearby_share_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NearbyShareServiceClient is the client API for NearbyShareService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NearbyShareServiceClient interface {
	// NewChromeLogin logs into a Chrome session as a fake user with the Nearby
	// Share flags enabled. Close must be called later to clean up the associated
	// resources.
	NewChromeLogin(ctx context.Context, in *CrOSLoginRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Close releases the resources obtained by New.
	CloseChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// CrOSSetup configures Nearby Share on a ChromeOS device.
	CrOSSetup(ctx context.Context, in *CrOSSetupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// FilesHashes returns a list of hashes for a list of files.
	FilesHashes(ctx context.Context, in *CrOSFileHashRequest, opts ...grpc.CallOption) (*CrOSFileHashResponse, error)
	// PrepareFiles extracts test files.
	PrepareFiles(ctx context.Context, in *CrOSPrepareFileRequest, opts ...grpc.CallOption) (*CrOSPrepareFileResponse, error)
	// StartSend tries to sends files to receiver.
	StartSend(ctx context.Context, in *CrOSSendFilesRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// SelectShareTarget will select the receiver device.
	SelectShareTarget(ctx context.Context, in *CrOSSelectShareTargetRequest, opts ...grpc.CallOption) (*CrOSShareTokenResponse, error)
	// StartHighVisibilityMode enables the Nearby Share High Visibility mode from
	// quick settings.
	StartHighVisibilityMode(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// WaitForOnboardingFlow waits for the Nearby Share onboarding flow to open.
	WaitForOnboardingFlow(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// StartReceiving will enable high vis receiving from javascript.
	StartReceiving(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// WaitForSenderAndAcceptShare is called by receiver to receive the file from
	// sender.
	WaitForSenderAndAcceptShare(ctx context.Context, in *CrOSReceiveFilesRequest, opts ...grpc.CallOption) (*CrOSShareTokenResponse, error)
	// AcceptIncomingShareNotificationAndWaitForCompletion is used for in contacts
	// transfers where the Chromebook accepts the transfer via a notification and
	// waits for a followup notification to see the transfer is complete.
	AcceptIncomingShareNotificationAndWaitForCompletion(ctx context.Context, in *CrOSReceiveFilesRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Accepts the notification that appears when a nearby device is trying to
	// discover a share target. This puts the user into high visibility mode.
	AcceptFastInitiationNotification(ctx context.Context, in *CrOSAcceptFastInitiationNotificationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// StartLogging is used to begin logging at the start of a test.
	StartLogging(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// SaveLogs is used to saved the relevant log files for a nearby share run.
	SaveLogs(ctx context.Context, in *SaveLogsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// ClearTransferredFiles clears the transferred files in the receiver's
	// Downloads folder.
	ClearTransferredFiles(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// CrOSAttributes gets device info for a chromebook used in remote tests.
	CrOSAttributes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CrOSAttributesResponse, error)
}

type nearbyShareServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNearbyShareServiceClient(cc grpc.ClientConnInterface) NearbyShareServiceClient {
	return &nearbyShareServiceClient{cc}
}

func (c *nearbyShareServiceClient) NewChromeLogin(ctx context.Context, in *CrOSLoginRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.nearbyservice.NearbyShareService/NewChromeLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nearbyShareServiceClient) CloseChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.nearbyservice.NearbyShareService/CloseChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nearbyShareServiceClient) CrOSSetup(ctx context.Context, in *CrOSSetupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.nearbyservice.NearbyShareService/CrOSSetup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nearbyShareServiceClient) FilesHashes(ctx context.Context, in *CrOSFileHashRequest, opts ...grpc.CallOption) (*CrOSFileHashResponse, error) {
	out := new(CrOSFileHashResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.nearbyservice.NearbyShareService/FilesHashes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nearbyShareServiceClient) PrepareFiles(ctx context.Context, in *CrOSPrepareFileRequest, opts ...grpc.CallOption) (*CrOSPrepareFileResponse, error) {
	out := new(CrOSPrepareFileResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.nearbyservice.NearbyShareService/PrepareFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nearbyShareServiceClient) StartSend(ctx context.Context, in *CrOSSendFilesRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.nearbyservice.NearbyShareService/StartSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nearbyShareServiceClient) SelectShareTarget(ctx context.Context, in *CrOSSelectShareTargetRequest, opts ...grpc.CallOption) (*CrOSShareTokenResponse, error) {
	out := new(CrOSShareTokenResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.nearbyservice.NearbyShareService/SelectShareTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nearbyShareServiceClient) StartHighVisibilityMode(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.nearbyservice.NearbyShareService/StartHighVisibilityMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nearbyShareServiceClient) WaitForOnboardingFlow(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.nearbyservice.NearbyShareService/WaitForOnboardingFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nearbyShareServiceClient) StartReceiving(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.nearbyservice.NearbyShareService/StartReceiving", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nearbyShareServiceClient) WaitForSenderAndAcceptShare(ctx context.Context, in *CrOSReceiveFilesRequest, opts ...grpc.CallOption) (*CrOSShareTokenResponse, error) {
	out := new(CrOSShareTokenResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.nearbyservice.NearbyShareService/WaitForSenderAndAcceptShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nearbyShareServiceClient) AcceptIncomingShareNotificationAndWaitForCompletion(ctx context.Context, in *CrOSReceiveFilesRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.nearbyservice.NearbyShareService/AcceptIncomingShareNotificationAndWaitForCompletion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nearbyShareServiceClient) AcceptFastInitiationNotification(ctx context.Context, in *CrOSAcceptFastInitiationNotificationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.nearbyservice.NearbyShareService/AcceptFastInitiationNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nearbyShareServiceClient) StartLogging(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.nearbyservice.NearbyShareService/StartLogging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nearbyShareServiceClient) SaveLogs(ctx context.Context, in *SaveLogsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.nearbyservice.NearbyShareService/SaveLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nearbyShareServiceClient) ClearTransferredFiles(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.nearbyservice.NearbyShareService/ClearTransferredFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nearbyShareServiceClient) CrOSAttributes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CrOSAttributesResponse, error) {
	out := new(CrOSAttributesResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.nearbyservice.NearbyShareService/CrOSAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NearbyShareServiceServer is the server API for NearbyShareService service.
type NearbyShareServiceServer interface {
	// NewChromeLogin logs into a Chrome session as a fake user with the Nearby
	// Share flags enabled. Close must be called later to clean up the associated
	// resources.
	NewChromeLogin(context.Context, *CrOSLoginRequest) (*empty.Empty, error)
	// Close releases the resources obtained by New.
	CloseChrome(context.Context, *empty.Empty) (*empty.Empty, error)
	// CrOSSetup configures Nearby Share on a ChromeOS device.
	CrOSSetup(context.Context, *CrOSSetupRequest) (*empty.Empty, error)
	// FilesHashes returns a list of hashes for a list of files.
	FilesHashes(context.Context, *CrOSFileHashRequest) (*CrOSFileHashResponse, error)
	// PrepareFiles extracts test files.
	PrepareFiles(context.Context, *CrOSPrepareFileRequest) (*CrOSPrepareFileResponse, error)
	// StartSend tries to sends files to receiver.
	StartSend(context.Context, *CrOSSendFilesRequest) (*empty.Empty, error)
	// SelectShareTarget will select the receiver device.
	SelectShareTarget(context.Context, *CrOSSelectShareTargetRequest) (*CrOSShareTokenResponse, error)
	// StartHighVisibilityMode enables the Nearby Share High Visibility mode from
	// quick settings.
	StartHighVisibilityMode(context.Context, *empty.Empty) (*empty.Empty, error)
	// WaitForOnboardingFlow waits for the Nearby Share onboarding flow to open.
	WaitForOnboardingFlow(context.Context, *empty.Empty) (*empty.Empty, error)
	// StartReceiving will enable high vis receiving from javascript.
	StartReceiving(context.Context, *empty.Empty) (*empty.Empty, error)
	// WaitForSenderAndAcceptShare is called by receiver to receive the file from
	// sender.
	WaitForSenderAndAcceptShare(context.Context, *CrOSReceiveFilesRequest) (*CrOSShareTokenResponse, error)
	// AcceptIncomingShareNotificationAndWaitForCompletion is used for in contacts
	// transfers where the Chromebook accepts the transfer via a notification and
	// waits for a followup notification to see the transfer is complete.
	AcceptIncomingShareNotificationAndWaitForCompletion(context.Context, *CrOSReceiveFilesRequest) (*empty.Empty, error)
	// Accepts the notification that appears when a nearby device is trying to
	// discover a share target. This puts the user into high visibility mode.
	AcceptFastInitiationNotification(context.Context, *CrOSAcceptFastInitiationNotificationRequest) (*empty.Empty, error)
	// StartLogging is used to begin logging at the start of a test.
	StartLogging(context.Context, *empty.Empty) (*empty.Empty, error)
	// SaveLogs is used to saved the relevant log files for a nearby share run.
	SaveLogs(context.Context, *SaveLogsRequest) (*empty.Empty, error)
	// ClearTransferredFiles clears the transferred files in the receiver's
	// Downloads folder.
	ClearTransferredFiles(context.Context, *empty.Empty) (*empty.Empty, error)
	// CrOSAttributes gets device info for a chromebook used in remote tests.
	CrOSAttributes(context.Context, *empty.Empty) (*CrOSAttributesResponse, error)
}

// UnimplementedNearbyShareServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNearbyShareServiceServer struct {
}

func (*UnimplementedNearbyShareServiceServer) NewChromeLogin(context.Context, *CrOSLoginRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewChromeLogin not implemented")
}
func (*UnimplementedNearbyShareServiceServer) CloseChrome(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseChrome not implemented")
}
func (*UnimplementedNearbyShareServiceServer) CrOSSetup(context.Context, *CrOSSetupRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrOSSetup not implemented")
}
func (*UnimplementedNearbyShareServiceServer) FilesHashes(context.Context, *CrOSFileHashRequest) (*CrOSFileHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilesHashes not implemented")
}
func (*UnimplementedNearbyShareServiceServer) PrepareFiles(context.Context, *CrOSPrepareFileRequest) (*CrOSPrepareFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareFiles not implemented")
}
func (*UnimplementedNearbyShareServiceServer) StartSend(context.Context, *CrOSSendFilesRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSend not implemented")
}
func (*UnimplementedNearbyShareServiceServer) SelectShareTarget(context.Context, *CrOSSelectShareTargetRequest) (*CrOSShareTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectShareTarget not implemented")
}
func (*UnimplementedNearbyShareServiceServer) StartHighVisibilityMode(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartHighVisibilityMode not implemented")
}
func (*UnimplementedNearbyShareServiceServer) WaitForOnboardingFlow(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForOnboardingFlow not implemented")
}
func (*UnimplementedNearbyShareServiceServer) StartReceiving(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartReceiving not implemented")
}
func (*UnimplementedNearbyShareServiceServer) WaitForSenderAndAcceptShare(context.Context, *CrOSReceiveFilesRequest) (*CrOSShareTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForSenderAndAcceptShare not implemented")
}
func (*UnimplementedNearbyShareServiceServer) AcceptIncomingShareNotificationAndWaitForCompletion(context.Context, *CrOSReceiveFilesRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptIncomingShareNotificationAndWaitForCompletion not implemented")
}
func (*UnimplementedNearbyShareServiceServer) AcceptFastInitiationNotification(context.Context, *CrOSAcceptFastInitiationNotificationRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptFastInitiationNotification not implemented")
}
func (*UnimplementedNearbyShareServiceServer) StartLogging(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartLogging not implemented")
}
func (*UnimplementedNearbyShareServiceServer) SaveLogs(context.Context, *SaveLogsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLogs not implemented")
}
func (*UnimplementedNearbyShareServiceServer) ClearTransferredFiles(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearTransferredFiles not implemented")
}
func (*UnimplementedNearbyShareServiceServer) CrOSAttributes(context.Context, *empty.Empty) (*CrOSAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrOSAttributes not implemented")
}

func RegisterNearbyShareServiceServer(s *grpc.Server, srv NearbyShareServiceServer) {
	s.RegisterService(&_NearbyShareService_serviceDesc, srv)
}

func _NearbyShareService_NewChromeLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrOSLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NearbyShareServiceServer).NewChromeLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.nearbyservice.NearbyShareService/NewChromeLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NearbyShareServiceServer).NewChromeLogin(ctx, req.(*CrOSLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NearbyShareService_CloseChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NearbyShareServiceServer).CloseChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.nearbyservice.NearbyShareService/CloseChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NearbyShareServiceServer).CloseChrome(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NearbyShareService_CrOSSetup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrOSSetupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NearbyShareServiceServer).CrOSSetup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.nearbyservice.NearbyShareService/CrOSSetup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NearbyShareServiceServer).CrOSSetup(ctx, req.(*CrOSSetupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NearbyShareService_FilesHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrOSFileHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NearbyShareServiceServer).FilesHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.nearbyservice.NearbyShareService/FilesHashes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NearbyShareServiceServer).FilesHashes(ctx, req.(*CrOSFileHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NearbyShareService_PrepareFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrOSPrepareFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NearbyShareServiceServer).PrepareFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.nearbyservice.NearbyShareService/PrepareFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NearbyShareServiceServer).PrepareFiles(ctx, req.(*CrOSPrepareFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NearbyShareService_StartSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrOSSendFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NearbyShareServiceServer).StartSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.nearbyservice.NearbyShareService/StartSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NearbyShareServiceServer).StartSend(ctx, req.(*CrOSSendFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NearbyShareService_SelectShareTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrOSSelectShareTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NearbyShareServiceServer).SelectShareTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.nearbyservice.NearbyShareService/SelectShareTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NearbyShareServiceServer).SelectShareTarget(ctx, req.(*CrOSSelectShareTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NearbyShareService_StartHighVisibilityMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NearbyShareServiceServer).StartHighVisibilityMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.nearbyservice.NearbyShareService/StartHighVisibilityMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NearbyShareServiceServer).StartHighVisibilityMode(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NearbyShareService_WaitForOnboardingFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NearbyShareServiceServer).WaitForOnboardingFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.nearbyservice.NearbyShareService/WaitForOnboardingFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NearbyShareServiceServer).WaitForOnboardingFlow(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NearbyShareService_StartReceiving_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NearbyShareServiceServer).StartReceiving(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.nearbyservice.NearbyShareService/StartReceiving",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NearbyShareServiceServer).StartReceiving(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NearbyShareService_WaitForSenderAndAcceptShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrOSReceiveFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NearbyShareServiceServer).WaitForSenderAndAcceptShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.nearbyservice.NearbyShareService/WaitForSenderAndAcceptShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NearbyShareServiceServer).WaitForSenderAndAcceptShare(ctx, req.(*CrOSReceiveFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NearbyShareService_AcceptIncomingShareNotificationAndWaitForCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrOSReceiveFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NearbyShareServiceServer).AcceptIncomingShareNotificationAndWaitForCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.nearbyservice.NearbyShareService/AcceptIncomingShareNotificationAndWaitForCompletion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NearbyShareServiceServer).AcceptIncomingShareNotificationAndWaitForCompletion(ctx, req.(*CrOSReceiveFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NearbyShareService_AcceptFastInitiationNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrOSAcceptFastInitiationNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NearbyShareServiceServer).AcceptFastInitiationNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.nearbyservice.NearbyShareService/AcceptFastInitiationNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NearbyShareServiceServer).AcceptFastInitiationNotification(ctx, req.(*CrOSAcceptFastInitiationNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NearbyShareService_StartLogging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NearbyShareServiceServer).StartLogging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.nearbyservice.NearbyShareService/StartLogging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NearbyShareServiceServer).StartLogging(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NearbyShareService_SaveLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NearbyShareServiceServer).SaveLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.nearbyservice.NearbyShareService/SaveLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NearbyShareServiceServer).SaveLogs(ctx, req.(*SaveLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NearbyShareService_ClearTransferredFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NearbyShareServiceServer).ClearTransferredFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.nearbyservice.NearbyShareService/ClearTransferredFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NearbyShareServiceServer).ClearTransferredFiles(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NearbyShareService_CrOSAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NearbyShareServiceServer).CrOSAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.nearbyservice.NearbyShareService/CrOSAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NearbyShareServiceServer).CrOSAttributes(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _NearbyShareService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.nearbyservice.NearbyShareService",
	HandlerType: (*NearbyShareServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewChromeLogin",
			Handler:    _NearbyShareService_NewChromeLogin_Handler,
		},
		{
			MethodName: "CloseChrome",
			Handler:    _NearbyShareService_CloseChrome_Handler,
		},
		{
			MethodName: "CrOSSetup",
			Handler:    _NearbyShareService_CrOSSetup_Handler,
		},
		{
			MethodName: "FilesHashes",
			Handler:    _NearbyShareService_FilesHashes_Handler,
		},
		{
			MethodName: "PrepareFiles",
			Handler:    _NearbyShareService_PrepareFiles_Handler,
		},
		{
			MethodName: "StartSend",
			Handler:    _NearbyShareService_StartSend_Handler,
		},
		{
			MethodName: "SelectShareTarget",
			Handler:    _NearbyShareService_SelectShareTarget_Handler,
		},
		{
			MethodName: "StartHighVisibilityMode",
			Handler:    _NearbyShareService_StartHighVisibilityMode_Handler,
		},
		{
			MethodName: "WaitForOnboardingFlow",
			Handler:    _NearbyShareService_WaitForOnboardingFlow_Handler,
		},
		{
			MethodName: "StartReceiving",
			Handler:    _NearbyShareService_StartReceiving_Handler,
		},
		{
			MethodName: "WaitForSenderAndAcceptShare",
			Handler:    _NearbyShareService_WaitForSenderAndAcceptShare_Handler,
		},
		{
			MethodName: "AcceptIncomingShareNotificationAndWaitForCompletion",
			Handler:    _NearbyShareService_AcceptIncomingShareNotificationAndWaitForCompletion_Handler,
		},
		{
			MethodName: "AcceptFastInitiationNotification",
			Handler:    _NearbyShareService_AcceptFastInitiationNotification_Handler,
		},
		{
			MethodName: "StartLogging",
			Handler:    _NearbyShareService_StartLogging_Handler,
		},
		{
			MethodName: "SaveLogs",
			Handler:    _NearbyShareService_SaveLogs_Handler,
		},
		{
			MethodName: "ClearTransferredFiles",
			Handler:    _NearbyShareService_ClearTransferredFiles_Handler,
		},
		{
			MethodName: "CrOSAttributes",
			Handler:    _NearbyShareService_CrOSAttributes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nearby_share_service.proto",
}
