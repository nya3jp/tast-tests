// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: power_menu_service.proto

package wilco

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IsPowerMenuPresentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsMenuPresent bool `protobuf:"varint,1,opt,name=is_menu_present,json=isMenuPresent,proto3" json:"is_menu_present,omitempty"`
}

func (x *IsPowerMenuPresentResponse) Reset() {
	*x = IsPowerMenuPresentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_power_menu_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsPowerMenuPresentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsPowerMenuPresentResponse) ProtoMessage() {}

func (x *IsPowerMenuPresentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_power_menu_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsPowerMenuPresentResponse.ProtoReflect.Descriptor instead.
func (*IsPowerMenuPresentResponse) Descriptor() ([]byte, []int) {
	return file_power_menu_service_proto_rawDescGZIP(), []int{0}
}

func (x *IsPowerMenuPresentResponse) GetIsMenuPresent() bool {
	if x != nil {
		return x.IsMenuPresent
	}
	return false
}

var File_power_menu_service_proto protoreflect.FileDescriptor

var file_power_menu_service_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x74, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x6c, 0x63, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x44, 0x0a, 0x1a, 0x49, 0x73, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x4d, 0x65, 0x6e, 0x75, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x6e,
	0x75, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x73, 0x4d, 0x65, 0x6e, 0x75, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x32, 0xef,
	0x01, 0x0a, 0x10, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x65, 0x6e, 0x75, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x4e, 0x65, 0x77, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x72, 0x6f, 0x6d,
	0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x12, 0x49, 0x73, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x65,
	0x6e, 0x75, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x2b, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69,
	0x6c, 0x63, 0x6f, 0x2e, 0x49, 0x73, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x65, 0x6e, 0x75, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x25, 0x5a, 0x23, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74,
	0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f,
	0x73, 0x2f, 0x77, 0x69, 0x6c, 0x63, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_power_menu_service_proto_rawDescOnce sync.Once
	file_power_menu_service_proto_rawDescData = file_power_menu_service_proto_rawDesc
)

func file_power_menu_service_proto_rawDescGZIP() []byte {
	file_power_menu_service_proto_rawDescOnce.Do(func() {
		file_power_menu_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_power_menu_service_proto_rawDescData)
	})
	return file_power_menu_service_proto_rawDescData
}

var file_power_menu_service_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_power_menu_service_proto_goTypes = []interface{}{
	(*IsPowerMenuPresentResponse)(nil), // 0: tast.cros.wilco.IsPowerMenuPresentResponse
	(*empty.Empty)(nil),                // 1: google.protobuf.Empty
}
var file_power_menu_service_proto_depIdxs = []int32{
	1, // 0: tast.cros.wilco.PowerMenuService.NewChrome:input_type -> google.protobuf.Empty
	1, // 1: tast.cros.wilco.PowerMenuService.CloseChrome:input_type -> google.protobuf.Empty
	1, // 2: tast.cros.wilco.PowerMenuService.IsPowerMenuPresent:input_type -> google.protobuf.Empty
	1, // 3: tast.cros.wilco.PowerMenuService.NewChrome:output_type -> google.protobuf.Empty
	1, // 4: tast.cros.wilco.PowerMenuService.CloseChrome:output_type -> google.protobuf.Empty
	0, // 5: tast.cros.wilco.PowerMenuService.IsPowerMenuPresent:output_type -> tast.cros.wilco.IsPowerMenuPresentResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_power_menu_service_proto_init() }
func file_power_menu_service_proto_init() {
	if File_power_menu_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_power_menu_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsPowerMenuPresentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_power_menu_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_power_menu_service_proto_goTypes,
		DependencyIndexes: file_power_menu_service_proto_depIdxs,
		MessageInfos:      file_power_menu_service_proto_msgTypes,
	}.Build()
	File_power_menu_service_proto = out.File
	file_power_menu_service_proto_rawDesc = nil
	file_power_menu_service_proto_goTypes = nil
	file_power_menu_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PowerMenuServiceClient is the client API for PowerMenuService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PowerMenuServiceClient interface {
	// New logs into a Chrome session as a fake user. Close must be called later
	// to clean up the associated resources.
	NewChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Close releases the resources obtained by New.
	CloseChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// IsPowerMenuPresent returns a bool indicating the presence of the power menu
	IsPowerMenuPresent(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*IsPowerMenuPresentResponse, error)
}

type powerMenuServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPowerMenuServiceClient(cc grpc.ClientConnInterface) PowerMenuServiceClient {
	return &powerMenuServiceClient{cc}
}

func (c *powerMenuServiceClient) NewChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wilco.PowerMenuService/NewChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerMenuServiceClient) CloseChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wilco.PowerMenuService/CloseChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerMenuServiceClient) IsPowerMenuPresent(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*IsPowerMenuPresentResponse, error) {
	out := new(IsPowerMenuPresentResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.wilco.PowerMenuService/IsPowerMenuPresent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PowerMenuServiceServer is the server API for PowerMenuService service.
type PowerMenuServiceServer interface {
	// New logs into a Chrome session as a fake user. Close must be called later
	// to clean up the associated resources.
	NewChrome(context.Context, *empty.Empty) (*empty.Empty, error)
	// Close releases the resources obtained by New.
	CloseChrome(context.Context, *empty.Empty) (*empty.Empty, error)
	// IsPowerMenuPresent returns a bool indicating the presence of the power menu
	IsPowerMenuPresent(context.Context, *empty.Empty) (*IsPowerMenuPresentResponse, error)
}

// UnimplementedPowerMenuServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPowerMenuServiceServer struct {
}

func (*UnimplementedPowerMenuServiceServer) NewChrome(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewChrome not implemented")
}
func (*UnimplementedPowerMenuServiceServer) CloseChrome(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseChrome not implemented")
}
func (*UnimplementedPowerMenuServiceServer) IsPowerMenuPresent(context.Context, *empty.Empty) (*IsPowerMenuPresentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPowerMenuPresent not implemented")
}

func RegisterPowerMenuServiceServer(s *grpc.Server, srv PowerMenuServiceServer) {
	s.RegisterService(&_PowerMenuService_serviceDesc, srv)
}

func _PowerMenuService_NewChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerMenuServiceServer).NewChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wilco.PowerMenuService/NewChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerMenuServiceServer).NewChrome(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerMenuService_CloseChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerMenuServiceServer).CloseChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wilco.PowerMenuService/CloseChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerMenuServiceServer).CloseChrome(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerMenuService_IsPowerMenuPresent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerMenuServiceServer).IsPowerMenuPresent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wilco.PowerMenuService/IsPowerMenuPresent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerMenuServiceServer).IsPowerMenuPresent(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _PowerMenuService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.wilco.PowerMenuService",
	HandlerType: (*PowerMenuServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewChrome",
			Handler:    _PowerMenuService_NewChrome_Handler,
		},
		{
			MethodName: "CloseChrome",
			Handler:    _PowerMenuService_CloseChrome_Handler,
		},
		{
			MethodName: "IsPowerMenuPresent",
			Handler:    _PowerMenuService_IsPowerMenuPresent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "power_menu_service.proto",
}
