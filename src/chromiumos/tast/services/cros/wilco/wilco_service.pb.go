// Code generated by protoc-gen-go. DO NOT EDIT.
// source: wilco_service.proto

package wilco

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DiagnosticRoutineStatus int32

const (
	DiagnosticRoutineStatus_ROUTINE_STATUS_PASSED DiagnosticRoutineStatus = 0
	DiagnosticRoutineStatus_ROUTINE_STATUS_FAILED DiagnosticRoutineStatus = 1
	DiagnosticRoutineStatus_ROUTINE_STATUS_ERROR  DiagnosticRoutineStatus = 2
)

var DiagnosticRoutineStatus_name = map[int32]string{
	0: "ROUTINE_STATUS_PASSED",
	1: "ROUTINE_STATUS_FAILED",
	2: "ROUTINE_STATUS_ERROR",
}

var DiagnosticRoutineStatus_value = map[string]int32{
	"ROUTINE_STATUS_PASSED": 0,
	"ROUTINE_STATUS_FAILED": 1,
	"ROUTINE_STATUS_ERROR":  2,
}

func (x DiagnosticRoutineStatus) String() string {
	return proto.EnumName(DiagnosticRoutineStatus_name, int32(x))
}

func (DiagnosticRoutineStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_247e03d5bf0cb873, []int{0}
}

type GetStatusResponse struct {
	WilcoDtcSupportdPid  uint64   `protobuf:"varint,1,opt,name=wilco_dtc_supportd_pid,json=wilcoDtcSupportdPid,proto3" json:"wilco_dtc_supportd_pid,omitempty"`
	WilcoDtcPid          uint64   `protobuf:"varint,2,opt,name=wilco_dtc_pid,json=wilcoDtcPid,proto3" json:"wilco_dtc_pid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStatusResponse) Reset()         { *m = GetStatusResponse{} }
func (m *GetStatusResponse) String() string { return proto.CompactTextString(m) }
func (*GetStatusResponse) ProtoMessage()    {}
func (*GetStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_247e03d5bf0cb873, []int{0}
}

func (m *GetStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetStatusResponse.Unmarshal(m, b)
}
func (m *GetStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetStatusResponse.Marshal(b, m, deterministic)
}
func (m *GetStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStatusResponse.Merge(m, src)
}
func (m *GetStatusResponse) XXX_Size() int {
	return xxx_messageInfo_GetStatusResponse.Size(m)
}
func (m *GetStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetStatusResponse proto.InternalMessageInfo

func (m *GetStatusResponse) GetWilcoDtcSupportdPid() uint64 {
	if m != nil {
		return m.WilcoDtcSupportdPid
	}
	return 0
}

func (m *GetStatusResponse) GetWilcoDtcPid() uint64 {
	if m != nil {
		return m.WilcoDtcPid
	}
	return 0
}

type RestartVMRequest struct {
	StartProcesses       bool     `protobuf:"varint,1,opt,name=start_processes,json=startProcesses,proto3" json:"start_processes,omitempty"`
	TestDbusConfig       bool     `protobuf:"varint,2,opt,name=test_dbus_config,json=testDbusConfig,proto3" json:"test_dbus_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestartVMRequest) Reset()         { *m = RestartVMRequest{} }
func (m *RestartVMRequest) String() string { return proto.CompactTextString(m) }
func (*RestartVMRequest) ProtoMessage()    {}
func (*RestartVMRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_247e03d5bf0cb873, []int{1}
}

func (m *RestartVMRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestartVMRequest.Unmarshal(m, b)
}
func (m *RestartVMRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestartVMRequest.Marshal(b, m, deterministic)
}
func (m *RestartVMRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestartVMRequest.Merge(m, src)
}
func (m *RestartVMRequest) XXX_Size() int {
	return xxx_messageInfo_RestartVMRequest.Size(m)
}
func (m *RestartVMRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestartVMRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestartVMRequest proto.InternalMessageInfo

func (m *RestartVMRequest) GetStartProcesses() bool {
	if m != nil {
		return m.StartProcesses
	}
	return false
}

func (m *RestartVMRequest) GetTestDbusConfig() bool {
	if m != nil {
		return m.TestDbusConfig
	}
	return false
}

type GetConfigurationDataResponse struct {
	JsonConfigurationData string   `protobuf:"bytes,1,opt,name=json_configuration_data,json=jsonConfigurationData,proto3" json:"json_configuration_data,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *GetConfigurationDataResponse) Reset()         { *m = GetConfigurationDataResponse{} }
func (m *GetConfigurationDataResponse) String() string { return proto.CompactTextString(m) }
func (*GetConfigurationDataResponse) ProtoMessage()    {}
func (*GetConfigurationDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_247e03d5bf0cb873, []int{2}
}

func (m *GetConfigurationDataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetConfigurationDataResponse.Unmarshal(m, b)
}
func (m *GetConfigurationDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetConfigurationDataResponse.Marshal(b, m, deterministic)
}
func (m *GetConfigurationDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConfigurationDataResponse.Merge(m, src)
}
func (m *GetConfigurationDataResponse) XXX_Size() int {
	return xxx_messageInfo_GetConfigurationDataResponse.Size(m)
}
func (m *GetConfigurationDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConfigurationDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetConfigurationDataResponse proto.InternalMessageInfo

func (m *GetConfigurationDataResponse) GetJsonConfigurationData() string {
	if m != nil {
		return m.JsonConfigurationData
	}
	return ""
}

type ExecuteRoutineRequest struct {
	// TODO(vsavu): replace with RunRoutineRequest from wilco_dtc_supportd.proto
	Request              []byte   `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecuteRoutineRequest) Reset()         { *m = ExecuteRoutineRequest{} }
func (m *ExecuteRoutineRequest) String() string { return proto.CompactTextString(m) }
func (*ExecuteRoutineRequest) ProtoMessage()    {}
func (*ExecuteRoutineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_247e03d5bf0cb873, []int{3}
}

func (m *ExecuteRoutineRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteRoutineRequest.Unmarshal(m, b)
}
func (m *ExecuteRoutineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteRoutineRequest.Marshal(b, m, deterministic)
}
func (m *ExecuteRoutineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteRoutineRequest.Merge(m, src)
}
func (m *ExecuteRoutineRequest) XXX_Size() int {
	return xxx_messageInfo_ExecuteRoutineRequest.Size(m)
}
func (m *ExecuteRoutineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteRoutineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteRoutineRequest proto.InternalMessageInfo

func (m *ExecuteRoutineRequest) GetRequest() []byte {
	if m != nil {
		return m.Request
	}
	return nil
}

type ExecuteRoutineResponse struct {
	Status               DiagnosticRoutineStatus `protobuf:"varint,1,opt,name=status,proto3,enum=tast.cros.wilco.DiagnosticRoutineStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ExecuteRoutineResponse) Reset()         { *m = ExecuteRoutineResponse{} }
func (m *ExecuteRoutineResponse) String() string { return proto.CompactTextString(m) }
func (*ExecuteRoutineResponse) ProtoMessage()    {}
func (*ExecuteRoutineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_247e03d5bf0cb873, []int{4}
}

func (m *ExecuteRoutineResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteRoutineResponse.Unmarshal(m, b)
}
func (m *ExecuteRoutineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteRoutineResponse.Marshal(b, m, deterministic)
}
func (m *ExecuteRoutineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteRoutineResponse.Merge(m, src)
}
func (m *ExecuteRoutineResponse) XXX_Size() int {
	return xxx_messageInfo_ExecuteRoutineResponse.Size(m)
}
func (m *ExecuteRoutineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteRoutineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteRoutineResponse proto.InternalMessageInfo

func (m *ExecuteRoutineResponse) GetStatus() DiagnosticRoutineStatus {
	if m != nil {
		return m.Status
	}
	return DiagnosticRoutineStatus_ROUTINE_STATUS_PASSED
}

type WaitForHandleMessageFromUiResponse struct {
	JsonMessage          string   `protobuf:"bytes,1,opt,name=json_message,json=jsonMessage,proto3" json:"json_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WaitForHandleMessageFromUiResponse) Reset()         { *m = WaitForHandleMessageFromUiResponse{} }
func (m *WaitForHandleMessageFromUiResponse) String() string { return proto.CompactTextString(m) }
func (*WaitForHandleMessageFromUiResponse) ProtoMessage()    {}
func (*WaitForHandleMessageFromUiResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_247e03d5bf0cb873, []int{5}
}

func (m *WaitForHandleMessageFromUiResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WaitForHandleMessageFromUiResponse.Unmarshal(m, b)
}
func (m *WaitForHandleMessageFromUiResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WaitForHandleMessageFromUiResponse.Marshal(b, m, deterministic)
}
func (m *WaitForHandleMessageFromUiResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitForHandleMessageFromUiResponse.Merge(m, src)
}
func (m *WaitForHandleMessageFromUiResponse) XXX_Size() int {
	return xxx_messageInfo_WaitForHandleMessageFromUiResponse.Size(m)
}
func (m *WaitForHandleMessageFromUiResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitForHandleMessageFromUiResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WaitForHandleMessageFromUiResponse proto.InternalMessageInfo

func (m *WaitForHandleMessageFromUiResponse) GetJsonMessage() string {
	if m != nil {
		return m.JsonMessage
	}
	return ""
}

func init() {
	proto.RegisterEnum("tast.cros.wilco.DiagnosticRoutineStatus", DiagnosticRoutineStatus_name, DiagnosticRoutineStatus_value)
	proto.RegisterType((*GetStatusResponse)(nil), "tast.cros.wilco.GetStatusResponse")
	proto.RegisterType((*RestartVMRequest)(nil), "tast.cros.wilco.RestartVMRequest")
	proto.RegisterType((*GetConfigurationDataResponse)(nil), "tast.cros.wilco.GetConfigurationDataResponse")
	proto.RegisterType((*ExecuteRoutineRequest)(nil), "tast.cros.wilco.ExecuteRoutineRequest")
	proto.RegisterType((*ExecuteRoutineResponse)(nil), "tast.cros.wilco.ExecuteRoutineResponse")
	proto.RegisterType((*WaitForHandleMessageFromUiResponse)(nil), "tast.cros.wilco.WaitForHandleMessageFromUiResponse")
}

func init() { proto.RegisterFile("wilco_service.proto", fileDescriptor_247e03d5bf0cb873) }

var fileDescriptor_247e03d5bf0cb873 = []byte{
	// 632 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x5d, 0x4f, 0xdb, 0x4a,
	0x10, 0x0d, 0xe8, 0x8a, 0x0b, 0x03, 0x37, 0x84, 0xbd, 0x04, 0x68, 0xda, 0x87, 0xe2, 0x8a, 0x82,
	0x2a, 0xd5, 0x51, 0x41, 0xea, 0x73, 0x29, 0x36, 0x10, 0x15, 0x4a, 0x64, 0x07, 0x50, 0x79, 0xb1,
	0x36, 0xf6, 0x10, 0xb6, 0x4d, 0xbc, 0xee, 0xee, 0xb8, 0x1f, 0x7f, 0xb4, 0xbf, 0xa7, 0xf2, 0xda,
	0x49, 0x45, 0x1c, 0x0b, 0x89, 0xbe, 0x79, 0xe7, 0xe3, 0x9c, 0x33, 0x3b, 0x67, 0x65, 0xf8, 0xff,
	0xbb, 0x18, 0x86, 0x32, 0xd0, 0xa8, 0xbe, 0x89, 0x10, 0xed, 0x44, 0x49, 0x92, 0x6c, 0x95, 0xb8,
	0x26, 0x3b, 0x54, 0x52, 0xdb, 0x26, 0xdd, 0x7a, 0x3a, 0x90, 0x72, 0x30, 0xc4, 0xb6, 0x49, 0xf7,
	0xd3, 0xdb, 0x36, 0x8e, 0x12, 0xfa, 0x99, 0x57, 0x5b, 0x43, 0x58, 0x3b, 0x41, 0xf2, 0x89, 0x53,
	0xaa, 0x3d, 0xd4, 0x89, 0x8c, 0x35, 0xb2, 0x03, 0xd8, 0xc8, 0x91, 0x23, 0x0a, 0x03, 0x9d, 0x26,
	0x89, 0x54, 0x14, 0x05, 0x89, 0x88, 0xb6, 0xe6, 0x9e, 0xcf, 0xed, 0xfd, 0xe3, 0xe5, 0xbc, 0x0e,
	0x85, 0x7e, 0x91, 0xeb, 0x8a, 0x88, 0x59, 0xf0, 0xdf, 0x9f, 0xa6, 0xac, 0x76, 0xde, 0xd4, 0x2e,
	0x8f, 0x6b, 0xbb, 0x22, 0xb2, 0x10, 0x1a, 0x1e, 0x6a, 0xe2, 0x8a, 0xae, 0xce, 0x3d, 0xfc, 0x9a,
	0xa2, 0x26, 0xb6, 0x0b, 0xab, 0x26, 0x12, 0x24, 0x4a, 0x86, 0xa8, 0x35, 0x6a, 0xc3, 0xb2, 0xe8,
	0xd5, 0x4d, 0xb8, 0x3b, 0x8e, 0xb2, 0x3d, 0x68, 0x10, 0x6a, 0x0a, 0xa2, 0x7e, 0xaa, 0x83, 0x50,
	0xc6, 0xb7, 0x62, 0x60, 0x38, 0x16, 0xbd, 0x7a, 0x16, 0x77, 0xfa, 0xa9, 0x3e, 0x32, 0x51, 0xeb,
	0x0a, 0x9e, 0x9d, 0x20, 0xe5, 0x87, 0x54, 0x71, 0x12, 0x32, 0x76, 0x38, 0xf1, 0xc9, 0x7c, 0x6f,
	0x61, 0xf3, 0xb3, 0x96, 0x71, 0x01, 0x52, 0x54, 0x04, 0x11, 0x27, 0x6e, 0xa8, 0x97, 0xbc, 0x66,
	0x96, 0x2e, 0xf5, 0x5b, 0x6f, 0xa0, 0xe9, 0xfe, 0xc0, 0x30, 0x25, 0xf4, 0x64, 0x4a, 0x22, 0xc6,
	0xf1, 0x0c, 0x5b, 0xf0, 0xaf, 0xca, 0x3f, 0x0d, 0xc0, 0x8a, 0x37, 0x3e, 0x5a, 0x37, 0xb0, 0x31,
	0xdd, 0x52, 0x88, 0x78, 0x07, 0x0b, 0xda, 0x5c, 0xbb, 0x69, 0xa9, 0xef, 0xef, 0xd9, 0x53, 0x8b,
	0xb3, 0x1d, 0xc1, 0x07, 0xb1, 0xd4, 0x24, 0xc2, 0xa2, 0xb7, 0x58, 0x53, 0xd1, 0x67, 0x9d, 0x80,
	0x75, 0xcd, 0x05, 0x1d, 0x4b, 0x75, 0xca, 0xe3, 0x68, 0x88, 0xe7, 0xa8, 0x35, 0x1f, 0xe0, 0xb1,
	0x92, 0xa3, 0x4b, 0x31, 0xe1, 0xd9, 0x86, 0x15, 0x33, 0xec, 0x28, 0xcf, 0x16, 0x13, 0x2e, 0x67,
	0xb1, 0xa2, 0xe1, 0x95, 0x80, 0xcd, 0x0a, 0x2e, 0xf6, 0x04, 0x9a, 0xde, 0xc5, 0x65, 0xaf, 0xf3,
	0xd1, 0x0d, 0xfc, 0xde, 0x61, 0xef, 0xd2, 0x0f, 0xba, 0x87, 0xbe, 0xef, 0x3a, 0x8d, 0xda, 0x8c,
	0xd4, 0xf1, 0x61, 0xe7, 0xcc, 0x75, 0x1a, 0x73, 0x6c, 0x0b, 0xd6, 0xa7, 0x52, 0xae, 0xe7, 0x5d,
	0x78, 0x8d, 0xf9, 0xfd, 0x5f, 0x0b, 0xb0, 0x72, 0x9d, 0x4d, 0xe7, 0xe7, 0xa6, 0x65, 0x1d, 0x58,
	0x9a, 0x18, 0x90, 0x6d, 0xd8, 0xb9, 0x57, 0xed, 0xb1, 0x57, 0x6d, 0x37, 0xf3, 0x6a, 0xcb, 0x2a,
	0xdd, 0x4d, 0xc9, 0xb4, 0x56, 0x8d, 0x9d, 0xc2, 0xd2, 0xc4, 0x5d, 0x6c, 0xbb, 0xd4, 0x32, 0xed,
	0xbc, 0x56, 0x05, 0x9b, 0x55, 0x63, 0x01, 0xac, 0xcf, 0x32, 0x50, 0xa5, 0xbe, 0xd7, 0xb3, 0xf4,
	0x55, 0xfa, 0xcf, 0xaa, 0xb1, 0x0e, 0x34, 0x7b, 0xa8, 0xa9, 0x8b, 0xea, 0x56, 0xaa, 0xd1, 0x35,
	0xf6, 0xc7, 0x4e, 0xaa, 0x62, 0xa8, 0xd6, 0x1a, 0x42, 0xfd, 0xbe, 0xc3, 0xd8, 0xcb, 0x92, 0x9a,
	0x99, 0xae, 0x6d, 0xed, 0x3e, 0x58, 0x37, 0xd1, 0xfb, 0x01, 0x36, 0x33, 0xbd, 0x45, 0xe2, 0x88,
	0xc7, 0x21, 0x0e, 0x87, 0x66, 0xb0, 0x47, 0x28, 0x76, 0x61, 0xcd, 0xcf, 0x36, 0xe1, 0x74, 0xfd,
	0xb3, 0x33, 0xa1, 0x09, 0x63, 0x54, 0x8f, 0x80, 0x71, 0xa0, 0xe1, 0x93, 0x4c, 0xfe, 0x12, 0xe5,
	0x13, 0xec, 0xdc, 0x7b, 0x44, 0xa5, 0xad, 0x1d, 0xdd, 0xf1, 0x78, 0x80, 0xd1, 0x23, 0xa0, 0xbf,
	0x40, 0xab, 0xfa, 0x7d, 0x56, 0xe2, 0x1d, 0x94, 0xb6, 0xf2, 0xf0, 0x23, 0xb7, 0x6a, 0xef, 0x77,
	0x6e, 0x5e, 0x84, 0x77, 0x4a, 0x8e, 0x44, 0x3a, 0x92, 0xba, 0x9d, 0x41, 0xb4, 0x8b, 0xff, 0x82,
	0x6e, 0x67, 0x58, 0x6d, 0x83, 0xd5, 0x5f, 0x30, 0x6c, 0x07, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff,
	0xb0, 0xc4, 0xe6, 0xf8, 0x3b, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WilcoServiceClient is the client API for WilcoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WilcoServiceClient interface {
	// GetStatus checks if services are running
	GetStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetStatusResponse, error)
	RestartVM(ctx context.Context, in *RestartVMRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetConfigurationData performs the grpc request from inside the VM
	GetConfigurationData(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetConfigurationDataResponse, error)
	TestPerformWebRequest(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	ExecuteRoutine(ctx context.Context, in *ExecuteRoutineRequest, opts ...grpc.CallOption) (*ExecuteRoutineResponse, error)
	TestRoutineCancellation(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	StartDPSLListener(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	StopDPSLListener(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	WaitForHandleConfigurationDataChanged(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	WaitForHandleMessageFromUi(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WaitForHandleMessageFromUiResponse, error)
}

type wilcoServiceClient struct {
	cc *grpc.ClientConn
}

func NewWilcoServiceClient(cc *grpc.ClientConn) WilcoServiceClient {
	return &wilcoServiceClient{cc}
}

func (c *wilcoServiceClient) GetStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.wilco.WilcoService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wilcoServiceClient) RestartVM(ctx context.Context, in *RestartVMRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wilco.WilcoService/RestartVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wilcoServiceClient) GetConfigurationData(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetConfigurationDataResponse, error) {
	out := new(GetConfigurationDataResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.wilco.WilcoService/GetConfigurationData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wilcoServiceClient) TestPerformWebRequest(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wilco.WilcoService/TestPerformWebRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wilcoServiceClient) ExecuteRoutine(ctx context.Context, in *ExecuteRoutineRequest, opts ...grpc.CallOption) (*ExecuteRoutineResponse, error) {
	out := new(ExecuteRoutineResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.wilco.WilcoService/ExecuteRoutine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wilcoServiceClient) TestRoutineCancellation(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wilco.WilcoService/TestRoutineCancellation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wilcoServiceClient) StartDPSLListener(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wilco.WilcoService/StartDPSLListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wilcoServiceClient) StopDPSLListener(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wilco.WilcoService/StopDPSLListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wilcoServiceClient) WaitForHandleConfigurationDataChanged(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wilco.WilcoService/WaitForHandleConfigurationDataChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wilcoServiceClient) WaitForHandleMessageFromUi(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WaitForHandleMessageFromUiResponse, error) {
	out := new(WaitForHandleMessageFromUiResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.wilco.WilcoService/WaitForHandleMessageFromUi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WilcoServiceServer is the server API for WilcoService service.
type WilcoServiceServer interface {
	// GetStatus checks if services are running
	GetStatus(context.Context, *empty.Empty) (*GetStatusResponse, error)
	RestartVM(context.Context, *RestartVMRequest) (*empty.Empty, error)
	// GetConfigurationData performs the grpc request from inside the VM
	GetConfigurationData(context.Context, *empty.Empty) (*GetConfigurationDataResponse, error)
	TestPerformWebRequest(context.Context, *empty.Empty) (*empty.Empty, error)
	ExecuteRoutine(context.Context, *ExecuteRoutineRequest) (*ExecuteRoutineResponse, error)
	TestRoutineCancellation(context.Context, *empty.Empty) (*empty.Empty, error)
	StartDPSLListener(context.Context, *empty.Empty) (*empty.Empty, error)
	StopDPSLListener(context.Context, *empty.Empty) (*empty.Empty, error)
	WaitForHandleConfigurationDataChanged(context.Context, *empty.Empty) (*empty.Empty, error)
	WaitForHandleMessageFromUi(context.Context, *empty.Empty) (*WaitForHandleMessageFromUiResponse, error)
}

// UnimplementedWilcoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWilcoServiceServer struct {
}

func (*UnimplementedWilcoServiceServer) GetStatus(ctx context.Context, req *empty.Empty) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (*UnimplementedWilcoServiceServer) RestartVM(ctx context.Context, req *RestartVMRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartVM not implemented")
}
func (*UnimplementedWilcoServiceServer) GetConfigurationData(ctx context.Context, req *empty.Empty) (*GetConfigurationDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigurationData not implemented")
}
func (*UnimplementedWilcoServiceServer) TestPerformWebRequest(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestPerformWebRequest not implemented")
}
func (*UnimplementedWilcoServiceServer) ExecuteRoutine(ctx context.Context, req *ExecuteRoutineRequest) (*ExecuteRoutineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteRoutine not implemented")
}
func (*UnimplementedWilcoServiceServer) TestRoutineCancellation(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestRoutineCancellation not implemented")
}
func (*UnimplementedWilcoServiceServer) StartDPSLListener(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDPSLListener not implemented")
}
func (*UnimplementedWilcoServiceServer) StopDPSLListener(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDPSLListener not implemented")
}
func (*UnimplementedWilcoServiceServer) WaitForHandleConfigurationDataChanged(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForHandleConfigurationDataChanged not implemented")
}
func (*UnimplementedWilcoServiceServer) WaitForHandleMessageFromUi(ctx context.Context, req *empty.Empty) (*WaitForHandleMessageFromUiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForHandleMessageFromUi not implemented")
}

func RegisterWilcoServiceServer(s *grpc.Server, srv WilcoServiceServer) {
	s.RegisterService(&_WilcoService_serviceDesc, srv)
}

func _WilcoService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WilcoServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wilco.WilcoService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WilcoServiceServer).GetStatus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WilcoService_RestartVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WilcoServiceServer).RestartVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wilco.WilcoService/RestartVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WilcoServiceServer).RestartVM(ctx, req.(*RestartVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WilcoService_GetConfigurationData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WilcoServiceServer).GetConfigurationData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wilco.WilcoService/GetConfigurationData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WilcoServiceServer).GetConfigurationData(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WilcoService_TestPerformWebRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WilcoServiceServer).TestPerformWebRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wilco.WilcoService/TestPerformWebRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WilcoServiceServer).TestPerformWebRequest(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WilcoService_ExecuteRoutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRoutineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WilcoServiceServer).ExecuteRoutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wilco.WilcoService/ExecuteRoutine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WilcoServiceServer).ExecuteRoutine(ctx, req.(*ExecuteRoutineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WilcoService_TestRoutineCancellation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WilcoServiceServer).TestRoutineCancellation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wilco.WilcoService/TestRoutineCancellation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WilcoServiceServer).TestRoutineCancellation(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WilcoService_StartDPSLListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WilcoServiceServer).StartDPSLListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wilco.WilcoService/StartDPSLListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WilcoServiceServer).StartDPSLListener(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WilcoService_StopDPSLListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WilcoServiceServer).StopDPSLListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wilco.WilcoService/StopDPSLListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WilcoServiceServer).StopDPSLListener(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WilcoService_WaitForHandleConfigurationDataChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WilcoServiceServer).WaitForHandleConfigurationDataChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wilco.WilcoService/WaitForHandleConfigurationDataChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WilcoServiceServer).WaitForHandleConfigurationDataChanged(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WilcoService_WaitForHandleMessageFromUi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WilcoServiceServer).WaitForHandleMessageFromUi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wilco.WilcoService/WaitForHandleMessageFromUi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WilcoServiceServer).WaitForHandleMessageFromUi(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _WilcoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.wilco.WilcoService",
	HandlerType: (*WilcoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _WilcoService_GetStatus_Handler,
		},
		{
			MethodName: "RestartVM",
			Handler:    _WilcoService_RestartVM_Handler,
		},
		{
			MethodName: "GetConfigurationData",
			Handler:    _WilcoService_GetConfigurationData_Handler,
		},
		{
			MethodName: "TestPerformWebRequest",
			Handler:    _WilcoService_TestPerformWebRequest_Handler,
		},
		{
			MethodName: "ExecuteRoutine",
			Handler:    _WilcoService_ExecuteRoutine_Handler,
		},
		{
			MethodName: "TestRoutineCancellation",
			Handler:    _WilcoService_TestRoutineCancellation_Handler,
		},
		{
			MethodName: "StartDPSLListener",
			Handler:    _WilcoService_StartDPSLListener_Handler,
		},
		{
			MethodName: "StopDPSLListener",
			Handler:    _WilcoService_StopDPSLListener_Handler,
		},
		{
			MethodName: "WaitForHandleConfigurationDataChanged",
			Handler:    _WilcoService_WaitForHandleConfigurationDataChanged_Handler,
		},
		{
			MethodName: "WaitForHandleMessageFromUi",
			Handler:    _WilcoService_WaitForHandleMessageFromUi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wilco_service.proto",
}
