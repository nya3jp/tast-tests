// Copyright 2021 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package tast.cros.nearbyshare;

import "google/protobuf/empty.proto";

option go_package = "chromiumos/tast/services/cros/nearbyshare";

// NearbyShareService allows basic remote operations of the Nearby Share feature.
service NearbyShareService {
  // NewChromeLogin logs into a Chrome session as a fake user with the Nearby
  // Share flags enabled. Close must be called later to clean up the associated resources.
  rpc NewChromeLogin (CrOSLoginRequest) returns (google.protobuf.Empty) {}

  // Close releases the resources obtained by New.
  rpc CloseChrome (google.protobuf.Empty) returns (google.protobuf.Empty) {}

  // CrOSSetup configures Nearby Share on a ChromeOS device.
  rpc CrOSSetup (CrOSSetupRequest) returns (google.protobuf.Empty) {}

  // FilesHashes returns a list of hashes for a list of files.
  rpc FilesHashes (CrOSFileHashRequest) returns (CrOSFileHashResponse) {}

  // PrepareFilesAndStartSend extracts test files and starts sending them.
  rpc PrepareFilesAndStartSend (CrOSSendFileRequest) returns (CrOSSendFilesResponse) {}

  // SelectShareTarget will select the receiver device.
  rpc SelectShareTarget (CrOSSelectShareTargetRequest) returns (CrOSShareTokenResponse) {}

  // StartHighVisibilityMode enables the Nearby Share High Visibility mode from
  // quick settings.
  rpc StartHighVisibilityMode (google.protobuf.Empty) returns (google.protobuf.Empty) {}

  // StartReceiving will enable high vis receiving from javascript.
  rpc StartReceiving (google.protobuf.Empty) returns (google.protobuf.Empty) {}

  // WaitForSenderAndAcceptShare is called by receiver to receive the file from
  // sender.
  rpc WaitForSenderAndAcceptShare(CrOSReceiveFilesRequest) returns (CrOSShareTokenResponse) {}
}

// CrOSLoginRequest to login to Chrome with configurable GAIA credentials.
message CrOSLoginRequest {
  string username = 1;
  string password = 2;
}

// CrOSSetupRequest is a request to setup and configure Nearby Share on a
// ChromeOS device.
message CrOSSetupRequest {
  int32 data_usage = 1;
  int32 visibility = 2;
  string device_name = 3;
}

// CrOSSendFileRequest contains the archive of files to be sent by Nearby Share.
message CrOSSendFileRequest {
  string file_name = 1;
}

// CrOSSendFilesResponse is the individual file names that will be sent.
message CrOSSendFilesResponse {
  repeated string file_names = 1;
}

// CrOSSelectShareTargetRequest contains the receiver to send files to.
message CrOSSelectShareTargetRequest {
  string receiver_name = 1;
}

// CrOSFileHashRequest contains the list of files we want to hash.
message CrOSFileHashRequest {
  repeated string file_names = 1;
  string file_dir = 2;
}

// CrOSFileHashResponse contains the list of hashes generated for a list of
// files.
message CrOSFileHashResponse {
  repeated string hashes = 1;
}

// CrOSReceiveFilesRequest contains the sender name that we want to receive
// files from.
message CrOSReceiveFilesRequest {
  string sender_name = 1;
}

// CrOSShareTokenResponse contains the share token from the receiver.
message CrOSShareTokenResponse {
  string share_token = 1;
}
