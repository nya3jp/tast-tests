// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package tast.cros.wifi;

import "google/protobuf/empty.proto";

option go_package = "chromiumos/tast/services/cros/wifi";

// ShillService allows remote WiFi setup through shill dbus interface.
service ShillService {
  // InitDUT initialize the DUT for WiFi testing.
  rpc InitDUT(InitDUTRequest) returns (google.protobuf.Empty) {}

  // ReinitTestState cleans and sets up the environment for a single WiFi testcase.
  rpc ReinitTestState(google.protobuf.Empty) returns (google.protobuf.Empty) {}

  // TearDown reverts the settings made in InitDUT (and also ReinitTestState).
  rpc TearDown(google.protobuf.Empty) returns (google.protobuf.Empty) {}

  // Connect attempts to connect WiFi network.
  rpc Connect(ConnectRequest) returns (ConnectResponse) {}

  // Disconnect attempts to disconnect from a service.
  rpc Disconnect(DisconnectRequest) returns (google.protobuf.Empty) {}

  // DeleteEntriesForSSID deletes all WiFi profile entries for a given ssid.
  rpc DeleteEntriesForSSID(DeleteEntriesForSSIDRequest) returns (google.protobuf.Empty) {}

  // QueryService queries shill service information.
  rpc QueryService(QueryServiceRequest) returns (QueryServiceResponse) {}

  // GetInterface returns the WiFi device interface name (e.g., wlan0).
  rpc GetInterface(google.protobuf.Empty) returns (GetInterfaceResponse) {}

  // GetIPv4Addrs returns the IPv4 addresses for the network interface.
  rpc GetIPv4Addrs(GetIPv4AddrsRequest) returns (GetIPv4AddrsResponse) {}

  // GetHardwareAddr returns the HardwareAddr for the network interface.
  rpc GetHardwareAddr(GetHardwareAddrRequest) returns (GetHardwareAddrResponse) {}

  // ExpectWifiFrequencies checks if the device discovers the given SSID on the specific frequencies.
  rpc ExpectWifiFrequencies(ExpectWifiFrequenciesRequest) returns (google.protobuf.Empty) {}

  // GetBgscanConfig returns the bgscan configuration the device's WiFi module currently uses.
  rpc GetBgscanConfig(google.protobuf.Empty) returns (GetBgscanConfigResponse) {}

  // SetBgscanConfig sets the device's WiFi module's bgscan configuration.
  rpc SetBgscanConfig(SetBgscanConfigRequest) returns (google.protobuf.Empty) {}

  // AssureDisconnect assures that the WiFi service has disconnected within timeout (nanoseconds).
  rpc AssureDisconnect(AssureDisconnectRequest) returns (google.protobuf.Empty) {}

  // DisableEnableTest disables and then enables the WiFi interface.
  // This is the main body of the DisableEnable test.
  rpc DisableEnableTest(DisableEnableTestRequest) returns (google.protobuf.Empty) {}

  // RequestScans requests shill to trigger active scans on WiFi devices.
  rpc RequestScans(RequestScansRequest) returns (google.protobuf.Empty) {}

  // SetMACRandomize sets the MAC randomization setting on the WiFi device.
  // The original setting is returned for ease of restoring.
  rpc SetMACRandomize(SetMACRandomizeRequest) returns (SetMACRandomizeResponse) {}

  // WaitScanIdle waits for not scanning state. If there's a running scan, it can
  // wait for it to be done with timeout 10 seconds.
  // This is useful when the test sets some parameters regarding scans and wants
  // to avoid noices due to not yet ended scans.
  rpc WaitScanIdle(google.protobuf.Empty) returns (google.protobuf.Empty) {}

  // ConfigureAndAssertAutoConnect configures the matched shill service and then
  // waits for the IsConnected property becomes true.
  // Note that this function does not attempt to connect; it waits for auto
  // connect instead.
  rpc ConfigureAndAssertAutoConnect(ConfigureAndAssertAutoConnectRequest) returns (ConfigureAndAssertAutoConnectResponse) {}

  // GetCurrentTime returns the current local time in the given format.
  rpc GetCurrentTime(google.protobuf.Empty) returns (GetCurrentTimeResponse) {}

  // SelectedService returns the object path of selected service of WiFi service.
  rpc SelectedService(google.protobuf.Empty) returns (SelectedServiceResponse) {}

  // ExpectShillProperty is a streaming gRPC, takes a shill service path, expects a list of property
  // criteria in order, and takes a list of shill properties to monitor. When a property's value is
  // expected, it responds the property's (key, value) pair. The method sends an empty response as the
  // property watcher is set. A property matching criterion consists of a property name, a list of
  // expected values, a list of excluded values, and a "CheckType". We say a criterion is met iff the
  // property value is in one of the expected values and not in any of the excluded values. If the
  // property value is one of the excluded values, the method fails immediately. The call monitors the
  // specified shill properties and returns the monitor results as a chronological list of pairs
  // (changed property, changed value) at the end.
  // For CheckMethod, it has three methods:
  // 1. CHECK_ONLY: checks if the criterion is met.
  // 2. ON_CHANGE: waits for the property changes to the expected values.
  // 3. CHECK_WAIT: checks if the criterion is met; if not, waits until the property's value is met.
  rpc ExpectShillProperty(ExpectShillPropertyRequest) returns (stream ExpectShillPropertyResponse) {}

  // ProfileBasicTest is the main body of the ProfileBasic test, which creates,
  // pushes, and pops the profiles and asserts the connection states between
  // those operations.
  rpc ProfileBasicTest(ProfileBasicTestRequest) returns (google.protobuf.Empty) {}

  // DiscoverBSSID discovers the specified BSSID by running a scan.
  rpc DiscoverBSSID (DiscoverBSSIDRequest) returns (DiscoverBSSIDResponse) {}

  // RequestRoam requests DUT to roam to the specified BSSID and waits until
  // the DUT has roamed.
  rpc RequestRoam (RequestRoamRequest) returns (google.protobuf.Empty) {}

  // SetDHCPProperties sets the DHCP properties in shill and returns the original
  // values.
  rpc SetDHCPProperties(SetDHCPPropertiesRequest) returns (SetDHCPPropertiesResponse) {}

  // Reassociate triggers reassociation with the current AP and waits until it
  // has reconnected or the timeout (in nanoseconds) expires.
  rpc Reassociate (ReassociateRequest) returns (google.protobuf.Empty) {}

  // GetWifiEnabled checks to see if Wifi is an enabled technology on shill.
  // This call will wait for WiFi to appear in available technologies so we
  // can get correct enabled setting.
  rpc GetWifiEnabled(google.protobuf.Empty) returns (GetWifiEnabledResponse) {}

  // SetWifiEnabled persistently enables/disables Wifi via shill.
  rpc SetWifiEnabled(SetWifiEnabledRequest) returns (google.protobuf.Empty) {}

  // WaitForBSSID waits for a specific BSSID to be found.
  rpc WaitForBSSID (WaitForBSSIDRequest) returns (google.protobuf.Empty) {}

  // MACRandomizeSupport tells if MAC randomization is supported for the WiFi device.
  rpc MACRandomizeSupport(google.protobuf.Empty) returns (MACRandomizeSupportResponse) {}

  // GetMACRandomize tells if MAC randomization is enabled for the WiFi device.
  rpc GetMACRandomize(google.protobuf.Empty) returns (GetMACRandomizeResponse) {}

  // EAPAuthSkipped is a streaming gRPC, who watches wpa_supplicant's D-Bus signals until the next connection
  // completes, and tells that the EAP authentication is skipped (i.e., PMKSA is cached and used) or not.
  // Note that the method sends an empty response as the signal watcher is set.
  rpc EAPAuthSkipped(google.protobuf.Empty) returns (stream EAPAuthSkippedResponse) {}

  // SuspendAssertConnect suspends the DUT and waits for connection after resuming.
  rpc SuspendAssertConnect(SuspendAssertConnectRequest) returns (SuspendAssertConnectResponse) {}

  // Suspend suspends the DUT.
  rpc Suspend(SuspendRequest) returns (SuspendResponse) {}

  // GetGlobalFTProperty returns the WiFi.GlobalFTEnabled manager property value.
  rpc GetGlobalFTProperty(google.protobuf.Empty) returns (GetGlobalFTPropertyResponse) {}

  // SetGlobalFTProperty set the WiFi.GlobalFTEnabled manager property value.
  rpc SetGlobalFTProperty(SetGlobalFTPropertyRequest) returns (google.protobuf.Empty) {}

  // GetScanAllowRoamProperty returns the WiFi.ScanAllowRoam manager property value.
  rpc GetScanAllowRoamProperty(google.protobuf.Empty) returns (GetScanAllowRoamPropertyResponse) {}

  // SetScanAllowRoamProperty set the WiFi.ScanAllowRoam manager property value.
  rpc SetScanAllowRoamProperty(SetScanAllowRoamPropertyRequest) returns (google.protobuf.Empty) {}

  // DisconnectReason is a streaming gRPC, who waits for the wpa_supplicant's
  // DisconnectReason property change, and returns the code to the client.
  // To notify the caller that it is ready, it sends an empty response after
  // the signal watcher is initialized.
  rpc DisconnectReason(google.protobuf.Empty) returns (stream DisconnectReasonResponse) {}

  // FlushBSS flushes BSS entries over the specified age from wpa_supplicant's cache.
  rpc FlushBSS(FlushBSSRequest) returns (google.protobuf.Empty) {}

  // ResetTest is the main body of the Reset test, which resets/suspends and verifies the connection for several times.
  rpc ResetTest(ResetTestRequest) returns (google.protobuf.Empty) {}

  // HealthCheck examines if the DUT is healthy. If some tests fail to bring
  // the WiFi device back, it treats the DUT as unhealthy. Testing host needs
  // to reboot the DUT to refrain it from affecting the following tests.
  rpc HealthCheck(google.protobuf.Empty) returns (google.protobuf.Empty) {}

  // GetLoggingConfig returns the logging configuration the device currently uses.
  rpc GetLoggingConfig(google.protobuf.Empty) returns (GetLoggingConfigResponse) {}

  // SetLoggingConfig sets the device logging configuration.
  rpc SetLoggingConfig(SetLoggingConfigRequest) returns (google.protobuf.Empty) {}

  // GetWakeOnWifi gets WakeOnWiFi related properties of WiFi device.
  rpc GetWakeOnWifi(google.protobuf.Empty) returns (GetWakeOnWifiResponse) {}

  // SetWakeOnWifi sets WakeOnWiFi related properties of WiFi device.
  rpc SetWakeOnWifi(SetWakeOnWifiRequest) returns (google.protobuf.Empty) {}

  // CheckLastWakeReason checks if the last wake reason of WiFi device is as expected.
  rpc CheckLastWakeReason(CheckLastWakeReasonRequest) returns (google.protobuf.Empty) {}

  // WatchDarkResume is a streaming gRPC which watchers power manager's D-Bus
  // signals until next resume (SuspendDone), and returns the count of dark
  // resumes.
  // Note that it sends back an empty response first to notify the caller that
  // the D-Bus watcher is ready.
  rpc WatchDarkResume(google.protobuf.Empty) returns (stream WatchDarkResumeResponse) {}
}

message ConnectRequest {
  bytes ssid = 1;
  // hidden denotes that if the SSID is hidden.
  bool hidden = 2;
  // security is the SecurityClass (defined in shill/service.go) of the WiFi
  // service to Connect.
  string security = 3;
  // shillprops is the shill properties the DUT should set to Connect to the
  // WiFi service.
  map<string, ShillVal> shillprops = 4;
}

message ShillVal {
  oneof val {
    string str = 1;
    bool bool = 2;
    uint32 uint32 = 3;
    // Because 'repeated' label is not allowed in oneof type, we define StrArray
    // for repeated string field.
    StrArray str_array = 4;
    Uint32Array uint32_array = 5;
  }
}

message StrArray {
  repeated string vals = 1;
}

message Uint32Array {
  repeated uint32 vals = 1;
}

// ConnectResponse is the response of Connect call which includes the
// object path of connected service and timing data of the connection
// (all time in nanosecond unit).
message ConnectResponse {
  string service_path = 1;
  int64 discovery_time = 2;
  int64 association_time = 3;
  int64 configuration_time = 4;
}

message DiscoverBSSIDRequest {
  string bssid = 1;
  string interface = 2;
  bytes ssid = 3;
}

message DiscoverBSSIDResponse {
  int64 discovery_time = 1;
}

message DisconnectRequest {
  string service_path = 1;
  bool remove_profile = 2;
}

message DeleteEntriesForSSIDRequest {
  bytes ssid = 1;
}

message QueryServiceRequest {
  string path = 1;
}

message QueryServiceResponse {
  message Wifi {
    string bssid = 1;
    uint32 frequency = 2;
    repeated uint32 frequency_list = 3;
    string hex_ssid = 4;
    bool hidden_ssid = 5;
    uint32 phy_mode = 6;
  }
  string name = 1;
  string device = 2;
  string type = 3;
  string mode = 4;
  string state = 5;
  bool visible = 6;
  bool is_connected = 7;
  Wifi wifi = 8;
  string guid = 9;
}

message GetInterfaceResponse {
  string name = 1;
}

message GetIPv4AddrsRequest {
  string interface_name = 1;
}

message GetIPv4AddrsResponse {
  repeated string ipv4 = 1;
}

message GetHardwareAddrRequest {
  string interfaceName = 1;
}

message GetHardwareAddrResponse {
  string hw_addr = 1;
}

message ExpectWifiFrequenciesRequest {
  // SSID to look up. Required.
  bytes ssid = 1;
  // Expected list of frequencies for the SSID.
  repeated uint32 frequencies = 2;
}

message BgscanConfig {
  string method = 1;
  // ShortInterval time in seconds, only value in uint16 range is valid as dbus property type is uint16.
  uint32 short_interval = 2;
  // LongInterval time in seconds, only value in uint16 range is valid as dbus property type is uint16.
  uint32 long_interval = 3;
}

message GetBgscanConfigResponse {
  BgscanConfig config = 1;
}

message SetBgscanConfigRequest {
  BgscanConfig config = 1;
}

message AssureDisconnectRequest {
  string service_path = 1;
  int64 timeout = 2;
}

message DisableEnableTestRequest {
  string interface_name = 1;
  string service_path = 2;
}

message RequestScansRequest {
  int32 count = 1;
}

message SetMACRandomizeRequest {
  bool enable = 1;
}

message SetMACRandomizeResponse {
  bool old_setting = 1;
}

message ConfigureAndAssertAutoConnectRequest {
  map<string, ShillVal> props = 1;
}

message ConfigureAndAssertAutoConnectResponse {
  string path = 1;
}

message GetCurrentTimeResponse {
  int64 now_second = 1;
  int64 now_nanosecond = 2;
}

message SelectedServiceResponse {
  string service_path = 1;
}

message ExpectShillPropertyRequest {
  // Criterion checking methods.
  enum CheckMethod {
    // Check if the property value is expected; if not, wait until it is expected.
    CHECK_WAIT = 0;
    // Check on property change.
    ON_CHANGE = 1;
    // Check if the property value is expected.
    CHECK_ONLY = 2;
  }

  message Criterion {
    // The shill property name.
    string key = 1;
    // The expected property values.
    repeated ShillVal any_of = 2;
    // The unexpected property values.
    repeated ShillVal none_of = 3;
    CheckMethod method = 4;
  }

  // Shill object path (e.g. Service or Device).
  string object_path = 1;
  repeated Criterion props = 2;
  repeated string monitor_props = 3;
}

message ShillPropertyChangedSignal {
  string prop = 1;
  ShillVal val = 2;
}

message ExpectShillPropertyResponse {
  string key = 1;
  ShillVal val = 2;
  repeated ShillPropertyChangedSignal props = 3;
  bool monitor_done = 4;
}

message ProfileBasicTestRequest {
  // The configuration for connecting to a certain AP, as like ConnectRequest.
  message Config {
    bytes ssid = 1;
    string security = 2;
    string ip = 3;
    map<string, ShillVal> shill_props = 4;
  }
  Config ap0 = 1;
  Config ap1 = 2;
}

message RequestRoamRequest {
  string interface_name = 1;
  string bssid = 2;
  int64 timeout = 3;
}

message DHCPProperties {
  string hostname = 1;
}

message SetDHCPPropertiesRequest {
  DHCPProperties props = 1;
}

message SetDHCPPropertiesResponse {
  DHCPProperties props = 1;
}

message ReassociateRequest {
  string interface_name = 1;
  int64 timeout = 2;
}

message GetWifiEnabledResponse{
    bool enabled = 1;
}

message SetWifiEnabledRequest{
    bool enabled = 1;
}

message WaitForBSSIDRequest {
  bytes ssid = 1;
  string bssid = 2;
}

message MACRandomizeSupportResponse {
  bool supported = 1;
}

message GetMACRandomizeResponse {
  bool enabled = 1;
}

message EAPAuthSkippedResponse {
  bool skipped = 1;
}

message DisconnectReasonResponse {
  int32 reason = 1;
}

message SuspendAssertConnectRequest {
  int64 wake_up_timeout = 1;
  string service_path = 2;
}

message SuspendAssertConnectResponse {
  int64 reconnect_time = 1;
}

message SuspendRequest {
  int64 wake_up_timeout = 1;
  bool check_early_wake = 2;
}

message SuspendResponse {
  int64 suspend_time = 1;
}

message GetGlobalFTPropertyResponse {
  bool enabled = 1;
}

message SetGlobalFTPropertyRequest {
  bool enabled = 1;
}

message GetScanAllowRoamPropertyResponse {
  bool allow = 1;
}

message SetScanAllowRoamPropertyRequest {
  bool allow = 1;
}

message InitDUTRequest {
  bool with_ui = 1;
}

message FlushBSSRequest {
  string interface_name = 1;
  int64 age = 2;
}

message ResetTestRequest {
  string service_path = 1;
  string server_ip = 2;
}

message SetLoggingConfigRequest {
  int32 debug_level = 1;
  repeated string debug_tags = 2;
}

message GetLoggingConfigResponse {
  int32 debug_level = 1;
  repeated string debug_tags = 2;
}

message WakeOnWifiConfig {
  bool allowed = 1;
  string features = 2;
  uint32 net_detect_scan_period = 3;
}

message SetWakeOnWifiRequest {
  WakeOnWifiConfig config = 1;
}

message GetWakeOnWifiResponse {
  WakeOnWifiConfig config = 1;
}

message CheckLastWakeReasonRequest {
  string reason = 1;
}

message WatchDarkResumeResponse {
  uint32 count = 1;
}
