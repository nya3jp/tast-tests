// Copyright 2022 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: display_service.proto

package wwcb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayIndex int32  `protobuf:"varint,1,opt,name=display_index,json=displayIndex,proto3" json:"display_index,omitempty"`
	DisplayCount int32  `protobuf:"varint,2,opt,name=display_count,json=displayCount,proto3" json:"display_count,omitempty"`
	Enable       bool   `protobuf:"varint,3,opt,name=enable,proto3" json:"enable,omitempty"`
	WindowTitle  string `protobuf:"bytes,4,opt,name=window_title,json=windowTitle,proto3" json:"window_title,omitempty"`
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_display_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_display_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_display_service_proto_rawDescGZIP(), []int{0}
}

func (x *QueryRequest) GetDisplayIndex() int32 {
	if x != nil {
		return x.DisplayIndex
	}
	return 0
}

func (x *QueryRequest) GetDisplayCount() int32 {
	if x != nil {
		return x.DisplayCount
	}
	return 0
}

func (x *QueryRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *QueryRequest) GetWindowTitle() string {
	if x != nil {
		return x.WindowTitle
	}
	return ""
}

var File_display_service_proto protoreflect.FileDescriptor

var file_display_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72,
	0x6f, 0x73, 0x2e, 0x77, 0x77, 0x63, 0x62, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x01, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x32, 0x99, 0x03, 0x0a, 0x0e, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a,
	0x10, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x12, 0x1c, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x77,
	0x63, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x11, 0x53, 0x65, 0x74,
	0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x1c,
	0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x77, 0x63, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x15, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12,
	0x1c, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x77, 0x63, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x15, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x12, 0x1c, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x77, 0x63,
	0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c,
	0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x77, 0x63, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x24, 0x5a, 0x22, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69,
	0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x77, 0x77, 0x63, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_display_service_proto_rawDescOnce sync.Once
	file_display_service_proto_rawDescData = file_display_service_proto_rawDesc
)

func file_display_service_proto_rawDescGZIP() []byte {
	file_display_service_proto_rawDescOnce.Do(func() {
		file_display_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_display_service_proto_rawDescData)
	})
	return file_display_service_proto_rawDescData
}

var file_display_service_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_display_service_proto_goTypes = []interface{}{
	(*QueryRequest)(nil),  // 0: tast.cros.wwcb.QueryRequest
	(*emptypb.Empty)(nil), // 1: google.protobuf.Empty
}
var file_display_service_proto_depIdxs = []int32{
	0, // 0: tast.cros.wwcb.DisplayService.SetMirrorDisplay:input_type -> tast.cros.wwcb.QueryRequest
	0, // 1: tast.cros.wwcb.DisplayService.SetPrimaryDisplay:input_type -> tast.cros.wwcb.QueryRequest
	0, // 2: tast.cros.wwcb.DisplayService.SwitchWindowToDisplay:input_type -> tast.cros.wwcb.QueryRequest
	0, // 3: tast.cros.wwcb.DisplayService.VerifyWindowOnDisplay:input_type -> tast.cros.wwcb.QueryRequest
	0, // 4: tast.cros.wwcb.DisplayService.VerifyDisplayCount:input_type -> tast.cros.wwcb.QueryRequest
	1, // 5: tast.cros.wwcb.DisplayService.SetMirrorDisplay:output_type -> google.protobuf.Empty
	1, // 6: tast.cros.wwcb.DisplayService.SetPrimaryDisplay:output_type -> google.protobuf.Empty
	1, // 7: tast.cros.wwcb.DisplayService.SwitchWindowToDisplay:output_type -> google.protobuf.Empty
	1, // 8: tast.cros.wwcb.DisplayService.VerifyWindowOnDisplay:output_type -> google.protobuf.Empty
	1, // 9: tast.cros.wwcb.DisplayService.VerifyDisplayCount:output_type -> google.protobuf.Empty
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_display_service_proto_init() }
func file_display_service_proto_init() {
	if File_display_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_display_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_display_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_display_service_proto_goTypes,
		DependencyIndexes: file_display_service_proto_depIdxs,
		MessageInfos:      file_display_service_proto_msgTypes,
	}.Build()
	File_display_service_proto = out.File
	file_display_service_proto_rawDesc = nil
	file_display_service_proto_goTypes = nil
	file_display_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DisplayServiceClient is the client API for DisplayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DisplayServiceClient interface {
	// SetMirrorDisplay sets the mirror display settings.
	SetMirrorDisplay(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SetPrimaryDisplay sets the internal or external display as primary mode.
	SetPrimaryDisplay(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SwitchWindowToDisplay finds the window with given title then switch it to the expected display.
	SwitchWindowToDisplay(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// VerifyWindowOnDisplay finds the window with given title then verify it is showing on the expected display or not.
	VerifyWindowOnDisplay(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// VerifyDisplayCount verifies the given  display count to compare with the current numbers of display that system detected.
	VerifyDisplayCount(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type displayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDisplayServiceClient(cc grpc.ClientConnInterface) DisplayServiceClient {
	return &displayServiceClient{cc}
}

func (c *displayServiceClient) SetMirrorDisplay(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wwcb.DisplayService/SetMirrorDisplay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *displayServiceClient) SetPrimaryDisplay(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wwcb.DisplayService/SetPrimaryDisplay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *displayServiceClient) SwitchWindowToDisplay(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wwcb.DisplayService/SwitchWindowToDisplay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *displayServiceClient) VerifyWindowOnDisplay(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wwcb.DisplayService/VerifyWindowOnDisplay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *displayServiceClient) VerifyDisplayCount(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wwcb.DisplayService/VerifyDisplayCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DisplayServiceServer is the server API for DisplayService service.
type DisplayServiceServer interface {
	// SetMirrorDisplay sets the mirror display settings.
	SetMirrorDisplay(context.Context, *QueryRequest) (*emptypb.Empty, error)
	// SetPrimaryDisplay sets the internal or external display as primary mode.
	SetPrimaryDisplay(context.Context, *QueryRequest) (*emptypb.Empty, error)
	// SwitchWindowToDisplay finds the window with given title then switch it to the expected display.
	SwitchWindowToDisplay(context.Context, *QueryRequest) (*emptypb.Empty, error)
	// VerifyWindowOnDisplay finds the window with given title then verify it is showing on the expected display or not.
	VerifyWindowOnDisplay(context.Context, *QueryRequest) (*emptypb.Empty, error)
	// VerifyDisplayCount verifies the given  display count to compare with the current numbers of display that system detected.
	VerifyDisplayCount(context.Context, *QueryRequest) (*emptypb.Empty, error)
}

// UnimplementedDisplayServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDisplayServiceServer struct {
}

func (*UnimplementedDisplayServiceServer) SetMirrorDisplay(context.Context, *QueryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMirrorDisplay not implemented")
}
func (*UnimplementedDisplayServiceServer) SetPrimaryDisplay(context.Context, *QueryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPrimaryDisplay not implemented")
}
func (*UnimplementedDisplayServiceServer) SwitchWindowToDisplay(context.Context, *QueryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchWindowToDisplay not implemented")
}
func (*UnimplementedDisplayServiceServer) VerifyWindowOnDisplay(context.Context, *QueryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyWindowOnDisplay not implemented")
}
func (*UnimplementedDisplayServiceServer) VerifyDisplayCount(context.Context, *QueryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyDisplayCount not implemented")
}

func RegisterDisplayServiceServer(s *grpc.Server, srv DisplayServiceServer) {
	s.RegisterService(&_DisplayService_serviceDesc, srv)
}

func _DisplayService_SetMirrorDisplay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisplayServiceServer).SetMirrorDisplay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wwcb.DisplayService/SetMirrorDisplay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisplayServiceServer).SetMirrorDisplay(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisplayService_SetPrimaryDisplay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisplayServiceServer).SetPrimaryDisplay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wwcb.DisplayService/SetPrimaryDisplay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisplayServiceServer).SetPrimaryDisplay(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisplayService_SwitchWindowToDisplay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisplayServiceServer).SwitchWindowToDisplay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wwcb.DisplayService/SwitchWindowToDisplay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisplayServiceServer).SwitchWindowToDisplay(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisplayService_VerifyWindowOnDisplay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisplayServiceServer).VerifyWindowOnDisplay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wwcb.DisplayService/VerifyWindowOnDisplay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisplayServiceServer).VerifyWindowOnDisplay(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisplayService_VerifyDisplayCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisplayServiceServer).VerifyDisplayCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wwcb.DisplayService/VerifyDisplayCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisplayServiceServer).VerifyDisplayCount(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DisplayService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.wwcb.DisplayService",
	HandlerType: (*DisplayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetMirrorDisplay",
			Handler:    _DisplayService_SetMirrorDisplay_Handler,
		},
		{
			MethodName: "SetPrimaryDisplay",
			Handler:    _DisplayService_SetPrimaryDisplay_Handler,
		},
		{
			MethodName: "SwitchWindowToDisplay",
			Handler:    _DisplayService_SwitchWindowToDisplay_Handler,
		},
		{
			MethodName: "VerifyWindowOnDisplay",
			Handler:    _DisplayService_VerifyWindowOnDisplay_Handler,
		},
		{
			MethodName: "VerifyDisplayCount",
			Handler:    _DisplayService_VerifyDisplayCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "display_service.proto",
}
