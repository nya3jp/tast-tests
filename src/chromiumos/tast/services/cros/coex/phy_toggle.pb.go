// Code generated by protoc-gen-go. DO NOT EDIT.
// source: phy_toggle.proto

package coex

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Credentials struct {
	Req                  string   `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Credentials) Reset()         { *m = Credentials{} }
func (m *Credentials) String() string { return proto.CompactTextString(m) }
func (*Credentials) ProtoMessage()    {}
func (*Credentials) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3936826fbcadde, []int{0}
}

func (m *Credentials) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Credentials.Unmarshal(m, b)
}
func (m *Credentials) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Credentials.Marshal(b, m, deterministic)
}
func (m *Credentials) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Credentials.Merge(m, src)
}
func (m *Credentials) XXX_Size() int {
	return xxx_messageInfo_Credentials.Size(m)
}
func (m *Credentials) XXX_DiscardUnknown() {
	xxx_messageInfo_Credentials.DiscardUnknown(m)
}

var xxx_messageInfo_Credentials proto.InternalMessageInfo

func (m *Credentials) GetReq() string {
	if m != nil {
		return m.Req
	}
	return ""
}

func init() {
	proto.RegisterType((*Credentials)(nil), "tast.cros.coex.Credentials")
}

func init() { proto.RegisterFile("phy_toggle.proto", fileDescriptor_5a3936826fbcadde) }

var fileDescriptor_5a3936826fbcadde = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0xce, 0xb1, 0x4a, 0xc4, 0x40,
	0x10, 0x06, 0x60, 0x83, 0x20, 0x64, 0x05, 0x3d, 0xb6, 0x10, 0xb9, 0x2b, 0x94, 0x60, 0x61, 0x35,
	0x0b, 0xda, 0x0b, 0xe6, 0x10, 0xb4, 0x13, 0xd1, 0xc6, 0x46, 0x72, 0x71, 0x6e, 0x37, 0x90, 0x64,
	0xe2, 0xcc, 0x44, 0xcc, 0xa3, 0xfa, 0x36, 0xb2, 0x7b, 0x08, 0x5a, 0x68, 0x71, 0xdd, 0xb2, 0x33,
	0xff, 0x37, 0xbf, 0x99, 0x0d, 0x61, 0x7a, 0x51, 0xf2, 0xbe, 0x45, 0x18, 0x98, 0x94, 0xec, 0x81,
	0x56, 0xa2, 0x50, 0x33, 0x09, 0xd4, 0x84, 0x1f, 0xf3, 0x85, 0x27, 0xf2, 0x2d, 0xba, 0x34, 0x5d,
	0x8d, 0x6b, 0x87, 0xdd, 0xa0, 0xd3, 0x66, 0xb9, 0x38, 0x31, 0xfb, 0x4b, 0xc6, 0x57, 0xec, 0xb5,
	0xa9, 0x5a, 0xb1, 0x33, 0xb3, 0xcb, 0xf8, 0x76, 0x9c, 0x9d, 0x66, 0xe7, 0xf9, 0x43, 0x7c, 0x5e,
	0x7c, 0x66, 0x26, 0xbf, 0x0f, 0xd3, 0x63, 0xba, 0x60, 0xaf, 0x8c, 0xb9, 0x16, 0x41, 0xd6, 0xbb,
	0xf5, 0xd3, 0x60, 0x8f, 0x60, 0x43, 0xc3, 0x37, 0x0d, 0x37, 0x91, 0x9e, 0xff, 0xf1, 0x5f, 0xec,
	0xd8, 0xd2, 0xe4, 0x25, 0x37, 0xbd, 0x4f, 0xf1, 0x05, 0xfc, 0x6e, 0x0a, 0x3f, 0x9a, 0xfc, 0x63,
	0xdc, 0x9a, 0xc3, 0x65, 0xa8, 0x7a, 0x8f, 0x65, 0x3b, 0xa2, 0x12, 0x69, 0xd8, 0x52, 0x2a, 0xcf,
	0x9e, 0x8b, 0x3a, 0x30, 0x75, 0xcd, 0xd8, 0x91, 0xb8, 0x48, 0x38, 0x41, 0x7e, 0x6f, 0x6a, 0x14,
	0x17, 0x2d, 0x17, 0xad, 0xd5, 0x5e, 0xca, 0x5d, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0x3a, 0xf7,
	0xea, 0xa0, 0x6a, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PhyToggleClient is the client API for PhyToggle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PhyToggleClient interface {
	//test
	AssertIfUp(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	//test
	BringIfUp(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*empty.Empty, error)
	//test
	ChangeBluetooth(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*empty.Empty, error)
}

type phyToggleClient struct {
	cc *grpc.ClientConn
}

func NewPhyToggleClient(cc *grpc.ClientConn) PhyToggleClient {
	return &phyToggleClient{cc}
}

func (c *phyToggleClient) AssertIfUp(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.coex.PhyToggle/AssertIfUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phyToggleClient) BringIfUp(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.coex.PhyToggle/BringIfUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phyToggleClient) ChangeBluetooth(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.coex.PhyToggle/ChangeBluetooth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhyToggleServer is the server API for PhyToggle service.
type PhyToggleServer interface {
	//test
	AssertIfUp(context.Context, *empty.Empty) (*empty.Empty, error)
	//test
	BringIfUp(context.Context, *Credentials) (*empty.Empty, error)
	//test
	ChangeBluetooth(context.Context, *Credentials) (*empty.Empty, error)
}

// UnimplementedPhyToggleServer can be embedded to have forward compatible implementations.
type UnimplementedPhyToggleServer struct {
}

func (*UnimplementedPhyToggleServer) AssertIfUp(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssertIfUp not implemented")
}
func (*UnimplementedPhyToggleServer) BringIfUp(ctx context.Context, req *Credentials) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BringIfUp not implemented")
}
func (*UnimplementedPhyToggleServer) ChangeBluetooth(ctx context.Context, req *Credentials) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeBluetooth not implemented")
}

func RegisterPhyToggleServer(s *grpc.Server, srv PhyToggleServer) {
	s.RegisterService(&_PhyToggle_serviceDesc, srv)
}

func _PhyToggle_AssertIfUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhyToggleServer).AssertIfUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.coex.PhyToggle/AssertIfUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhyToggleServer).AssertIfUp(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhyToggle_BringIfUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhyToggleServer).BringIfUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.coex.PhyToggle/BringIfUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhyToggleServer).BringIfUp(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhyToggle_ChangeBluetooth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhyToggleServer).ChangeBluetooth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.coex.PhyToggle/ChangeBluetooth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhyToggleServer).ChangeBluetooth(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

var _PhyToggle_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.coex.PhyToggle",
	HandlerType: (*PhyToggleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssertIfUp",
			Handler:    _PhyToggle_AssertIfUp_Handler,
		},
		{
			MethodName: "BringIfUp",
			Handler:    _PhyToggle_BringIfUp_Handler,
		},
		{
			MethodName: "ChangeBluetooth",
			Handler:    _PhyToggle_ChangeBluetooth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "phy_toggle.proto",
}
