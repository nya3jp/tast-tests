// Code generated by protoc-gen-go. DO NOT EDIT.
// source: phy_toggle.proto

package coex

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Credentials struct {
	Req                  string   `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Credentials) Reset()         { *m = Credentials{} }
func (m *Credentials) String() string { return proto.CompactTextString(m) }
func (*Credentials) ProtoMessage()    {}
func (*Credentials) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3936826fbcadde, []int{0}
}

func (m *Credentials) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Credentials.Unmarshal(m, b)
}
func (m *Credentials) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Credentials.Marshal(b, m, deterministic)
}
func (m *Credentials) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Credentials.Merge(m, src)
}
func (m *Credentials) XXX_Size() int {
	return xxx_messageInfo_Credentials.Size(m)
}
func (m *Credentials) XXX_DiscardUnknown() {
	xxx_messageInfo_Credentials.DiscardUnknown(m)
}

var xxx_messageInfo_Credentials proto.InternalMessageInfo

func (m *Credentials) GetReq() string {
	if m != nil {
		return m.Req
	}
	return ""
}

func init() {
	proto.RegisterType((*Credentials)(nil), "tast.cros.coex.Credentials")
}

func init() { proto.RegisterFile("phy_toggle.proto", fileDescriptor_5a3936826fbcadde) }

var fileDescriptor_5a3936826fbcadde = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0xd1, 0xcd, 0x4a, 0xc3, 0x40,
	0x10, 0x07, 0x70, 0x8b, 0x22, 0x74, 0x22, 0x25, 0x46, 0x10, 0x69, 0x0f, 0x4a, 0xf0, 0xe0, 0x69,
	0x17, 0xf4, 0x05, 0x34, 0xa6, 0x88, 0xb7, 0x22, 0x8a, 0xe0, 0x45, 0x92, 0x38, 0x4d, 0x16, 0x92,
	0x4c, 0xdc, 0xd9, 0xa8, 0x79, 0x35, 0x9f, 0x4e, 0x36, 0xa9, 0xf5, 0x03, 0xf4, 0xb0, 0xb7, 0x65,
	0x3f, 0x7e, 0x3b, 0x33, 0x7f, 0xf0, 0x9b, 0xa2, 0x7b, 0x34, 0x94, 0xe7, 0x25, 0x8a, 0x46, 0x93,
	0xa1, 0x60, 0x62, 0x12, 0x36, 0x22, 0xd3, 0xc4, 0x22, 0x23, 0x7c, 0x9b, 0xce, 0x72, 0xa2, 0xbc,
	0x44, 0xd9, 0x9f, 0xa6, 0xed, 0x52, 0x62, 0xd5, 0x98, 0x6e, 0xb8, 0x1c, 0x1e, 0x82, 0x77, 0xa9,
	0xf1, 0x09, 0x6b, 0xa3, 0x92, 0x92, 0x03, 0x1f, 0x36, 0x35, 0x3e, 0x1f, 0x8c, 0x8e, 0x46, 0x27,
	0xe3, 0x1b, 0xbb, 0x3c, 0x7d, 0xdf, 0x82, 0xf1, 0xa2, 0xe8, 0x6e, 0xfb, 0x1f, 0x82, 0x73, 0xd8,
	0xb9, 0x60, 0x46, 0x6d, 0x16, 0x45, 0xc7, 0x77, 0x4d, 0xb0, 0x2f, 0x06, 0x5c, 0x7c, 0xe2, 0x62,
	0x6e, 0xf1, 0xe9, 0x1f, 0xfb, 0xe1, 0x46, 0x30, 0x87, 0xdd, 0x41, 0x88, 0xca, 0x16, 0x0d, 0x91,
	0x29, 0x9c, 0x98, 0x2b, 0xd8, 0xfb, 0xc5, 0xc4, 0xf4, 0x5a, 0x3b, 0x40, 0xeb, 0x8e, 0xee, 0xd5,
	0x52, 0x39, 0x95, 0x12, 0xc1, 0xe4, 0x4b, 0x70, 0xac, 0x22, 0x06, 0x2f, 0xd2, 0xaa, 0xce, 0x57,
	0x63, 0x9d, 0x89, 0x9f, 0x19, 0x8a, 0x6f, 0x19, 0xfd, 0xa3, 0x5c, 0x83, 0x1f, 0x2b, 0x4e, 0xd2,
	0x12, 0xd7, 0x53, 0x71, 0xa5, 0x62, 0xf0, 0x56, 0x94, 0xed, 0xca, 0x51, 0x89, 0x8e, 0x1f, 0xc2,
	0xac, 0xd0, 0x54, 0xa9, 0xb6, 0x22, 0x96, 0x96, 0x90, 0x8c, 0xfa, 0x45, 0x65, 0xc8, 0xd2, 0x5a,
	0xd2, 0x5a, 0xe9, 0x76, 0xff, 0xee, 0xec, 0x23, 0x00, 0x00, 0xff, 0xff, 0x07, 0x8f, 0xb1, 0x2f,
	0xcb, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PhyToggleClient is the client API for PhyToggle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PhyToggleClient interface {
	// Verifies WiFi and Bluetooth are up
	AssertPhysUp(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Verifies that Bluetooth is up
	AssertBluetoothUp(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Verifies that Bluetooth is down
	AssertBluetoothDown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Verifies that Wifi ups up
	AssertWifiUp(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Verifies that Wifi is down
	AssertWifiDown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Brings WiFi and Bluetooth up
	BringPhysUp(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*empty.Empty, error)
	//  Turns off Bluetooth through the UI
	DisableBluetooth(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*empty.Empty, error)
	//  Turns off Wifi through the UI
	DisableWifi(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*empty.Empty, error)
}

type phyToggleClient struct {
	cc *grpc.ClientConn
}

func NewPhyToggleClient(cc *grpc.ClientConn) PhyToggleClient {
	return &phyToggleClient{cc}
}

func (c *phyToggleClient) AssertPhysUp(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.coex.PhyToggle/AssertPhysUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phyToggleClient) AssertBluetoothUp(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.coex.PhyToggle/AssertBluetoothUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phyToggleClient) AssertBluetoothDown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.coex.PhyToggle/AssertBluetoothDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phyToggleClient) AssertWifiUp(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.coex.PhyToggle/AssertWifiUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phyToggleClient) AssertWifiDown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.coex.PhyToggle/AssertWifiDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phyToggleClient) BringPhysUp(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.coex.PhyToggle/BringPhysUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phyToggleClient) DisableBluetooth(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.coex.PhyToggle/DisableBluetooth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phyToggleClient) DisableWifi(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.coex.PhyToggle/DisableWifi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhyToggleServer is the server API for PhyToggle service.
type PhyToggleServer interface {
	// Verifies WiFi and Bluetooth are up
	AssertPhysUp(context.Context, *empty.Empty) (*empty.Empty, error)
	// Verifies that Bluetooth is up
	AssertBluetoothUp(context.Context, *empty.Empty) (*empty.Empty, error)
	// Verifies that Bluetooth is down
	AssertBluetoothDown(context.Context, *empty.Empty) (*empty.Empty, error)
	// Verifies that Wifi ups up
	AssertWifiUp(context.Context, *empty.Empty) (*empty.Empty, error)
	// Verifies that Wifi is down
	AssertWifiDown(context.Context, *empty.Empty) (*empty.Empty, error)
	// Brings WiFi and Bluetooth up
	BringPhysUp(context.Context, *Credentials) (*empty.Empty, error)
	//  Turns off Bluetooth through the UI
	DisableBluetooth(context.Context, *Credentials) (*empty.Empty, error)
	//  Turns off Wifi through the UI
	DisableWifi(context.Context, *Credentials) (*empty.Empty, error)
}

// UnimplementedPhyToggleServer can be embedded to have forward compatible implementations.
type UnimplementedPhyToggleServer struct {
}

func (*UnimplementedPhyToggleServer) AssertPhysUp(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssertPhysUp not implemented")
}
func (*UnimplementedPhyToggleServer) AssertBluetoothUp(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssertBluetoothUp not implemented")
}
func (*UnimplementedPhyToggleServer) AssertBluetoothDown(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssertBluetoothDown not implemented")
}
func (*UnimplementedPhyToggleServer) AssertWifiUp(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssertWifiUp not implemented")
}
func (*UnimplementedPhyToggleServer) AssertWifiDown(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssertWifiDown not implemented")
}
func (*UnimplementedPhyToggleServer) BringPhysUp(ctx context.Context, req *Credentials) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BringPhysUp not implemented")
}
func (*UnimplementedPhyToggleServer) DisableBluetooth(ctx context.Context, req *Credentials) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableBluetooth not implemented")
}
func (*UnimplementedPhyToggleServer) DisableWifi(ctx context.Context, req *Credentials) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableWifi not implemented")
}

func RegisterPhyToggleServer(s *grpc.Server, srv PhyToggleServer) {
	s.RegisterService(&_PhyToggle_serviceDesc, srv)
}

func _PhyToggle_AssertPhysUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhyToggleServer).AssertPhysUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.coex.PhyToggle/AssertPhysUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhyToggleServer).AssertPhysUp(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhyToggle_AssertBluetoothUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhyToggleServer).AssertBluetoothUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.coex.PhyToggle/AssertBluetoothUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhyToggleServer).AssertBluetoothUp(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhyToggle_AssertBluetoothDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhyToggleServer).AssertBluetoothDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.coex.PhyToggle/AssertBluetoothDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhyToggleServer).AssertBluetoothDown(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhyToggle_AssertWifiUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhyToggleServer).AssertWifiUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.coex.PhyToggle/AssertWifiUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhyToggleServer).AssertWifiUp(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhyToggle_AssertWifiDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhyToggleServer).AssertWifiDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.coex.PhyToggle/AssertWifiDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhyToggleServer).AssertWifiDown(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhyToggle_BringPhysUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhyToggleServer).BringPhysUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.coex.PhyToggle/BringPhysUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhyToggleServer).BringPhysUp(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhyToggle_DisableBluetooth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhyToggleServer).DisableBluetooth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.coex.PhyToggle/DisableBluetooth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhyToggleServer).DisableBluetooth(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhyToggle_DisableWifi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhyToggleServer).DisableWifi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.coex.PhyToggle/DisableWifi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhyToggleServer).DisableWifi(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

var _PhyToggle_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.coex.PhyToggle",
	HandlerType: (*PhyToggleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssertPhysUp",
			Handler:    _PhyToggle_AssertPhysUp_Handler,
		},
		{
			MethodName: "AssertBluetoothUp",
			Handler:    _PhyToggle_AssertBluetoothUp_Handler,
		},
		{
			MethodName: "AssertBluetoothDown",
			Handler:    _PhyToggle_AssertBluetoothDown_Handler,
		},
		{
			MethodName: "AssertWifiUp",
			Handler:    _PhyToggle_AssertWifiUp_Handler,
		},
		{
			MethodName: "AssertWifiDown",
			Handler:    _PhyToggle_AssertWifiDown_Handler,
		},
		{
			MethodName: "BringPhysUp",
			Handler:    _PhyToggle_BringPhysUp_Handler,
		},
		{
			MethodName: "DisableBluetooth",
			Handler:    _PhyToggle_DisableBluetooth_Handler,
		},
		{
			MethodName: "DisableWifi",
			Handler:    _PhyToggle_DisableWifi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "phy_toggle.proto",
}
