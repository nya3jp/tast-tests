// Copyright 2022 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: app_service.proto

package shimlessrma

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NewShimlessRMARequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Provides manifestKey for testing extension.
	ManifestKey string `protobuf:"bytes,1,opt,name=manifestKey,proto3" json:"manifestKey,omitempty"`
	// Indicates whether it is a re-connect.
	// If yes, then we avoid some operations, like creating empty state file.
	Reconnect bool `protobuf:"varint,2,opt,name=reconnect,proto3" json:"reconnect,omitempty"`
}

func (x *NewShimlessRMARequest) Reset() {
	*x = NewShimlessRMARequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewShimlessRMARequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewShimlessRMARequest) ProtoMessage() {}

func (x *NewShimlessRMARequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewShimlessRMARequest.ProtoReflect.Descriptor instead.
func (*NewShimlessRMARequest) Descriptor() ([]byte, []int) {
	return file_app_service_proto_rawDescGZIP(), []int{0}
}

func (x *NewShimlessRMARequest) GetManifestKey() string {
	if x != nil {
		return x.ManifestKey
	}
	return ""
}

func (x *NewShimlessRMARequest) GetReconnect() bool {
	if x != nil {
		return x.Reconnect
	}
	return false
}

type WaitForPageToLoadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Provides title of a page.
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// Provides the waiting periods in seconds.
	DurationInSecond int32 `protobuf:"varint,2,opt,name=durationInSecond,proto3" json:"durationInSecond,omitempty"`
}

func (x *WaitForPageToLoadRequest) Reset() {
	*x = WaitForPageToLoadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForPageToLoadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForPageToLoadRequest) ProtoMessage() {}

func (x *WaitForPageToLoadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForPageToLoadRequest.ProtoReflect.Descriptor instead.
func (*WaitForPageToLoadRequest) Descriptor() ([]byte, []int) {
	return file_app_service_proto_rawDescGZIP(), []int{1}
}

func (x *WaitForPageToLoadRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *WaitForPageToLoadRequest) GetDurationInSecond() int32 {
	if x != nil {
		return x.DurationInSecond
	}
	return 0
}

type LeftClickButtonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Provides the label of button.
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *LeftClickButtonRequest) Reset() {
	*x = LeftClickButtonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeftClickButtonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeftClickButtonRequest) ProtoMessage() {}

func (x *LeftClickButtonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeftClickButtonRequest.ProtoReflect.Descriptor instead.
func (*LeftClickButtonRequest) Descriptor() ([]byte, []int) {
	return file_app_service_proto_rawDescGZIP(), []int{2}
}

func (x *LeftClickButtonRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type WaitUntilButtonEnabledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Provides the label of button.
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// Provides the waiting periods in seconds.
	DurationInSecond int32 `protobuf:"varint,2,opt,name=durationInSecond,proto3" json:"durationInSecond,omitempty"`
}

func (x *WaitUntilButtonEnabledRequest) Reset() {
	*x = WaitUntilButtonEnabledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitUntilButtonEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitUntilButtonEnabledRequest) ProtoMessage() {}

func (x *WaitUntilButtonEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitUntilButtonEnabledRequest.ProtoReflect.Descriptor instead.
func (*WaitUntilButtonEnabledRequest) Descriptor() ([]byte, []int) {
	return file_app_service_proto_rawDescGZIP(), []int{3}
}

func (x *WaitUntilButtonEnabledRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *WaitUntilButtonEnabledRequest) GetDurationInSecond() int32 {
	if x != nil {
		return x.DurationInSecond
	}
	return 0
}

type LeftClickRadioButtonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Provides the label of radio button.
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *LeftClickRadioButtonRequest) Reset() {
	*x = LeftClickRadioButtonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeftClickRadioButtonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeftClickRadioButtonRequest) ProtoMessage() {}

func (x *LeftClickRadioButtonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeftClickRadioButtonRequest.ProtoReflect.Descriptor instead.
func (*LeftClickRadioButtonRequest) Descriptor() ([]byte, []int) {
	return file_app_service_proto_rawDescGZIP(), []int{4}
}

func (x *LeftClickRadioButtonRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type LeftClickLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Label provides the label of link.
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *LeftClickLinkRequest) Reset() {
	*x = LeftClickLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeftClickLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeftClickLinkRequest) ProtoMessage() {}

func (x *LeftClickLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeftClickLinkRequest.ProtoReflect.Descriptor instead.
func (*LeftClickLinkRequest) Descriptor() ([]byte, []int) {
	return file_app_service_proto_rawDescGZIP(), []int{5}
}

func (x *LeftClickLinkRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type RetrieveTextByPrefixRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Prefix provides the prefix of text.
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *RetrieveTextByPrefixRequest) Reset() {
	*x = RetrieveTextByPrefixRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveTextByPrefixRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveTextByPrefixRequest) ProtoMessage() {}

func (x *RetrieveTextByPrefixRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveTextByPrefixRequest.ProtoReflect.Descriptor instead.
func (*RetrieveTextByPrefixRequest) Descriptor() ([]byte, []int) {
	return file_app_service_proto_rawDescGZIP(), []int{6}
}

func (x *RetrieveTextByPrefixRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type RetrieveTextByPrefixResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the text with prefix.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RetrieveTextByPrefixResponse) Reset() {
	*x = RetrieveTextByPrefixResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveTextByPrefixResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveTextByPrefixResponse) ProtoMessage() {}

func (x *RetrieveTextByPrefixResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveTextByPrefixResponse.ProtoReflect.Descriptor instead.
func (*RetrieveTextByPrefixResponse) Descriptor() ([]byte, []int) {
	return file_app_service_proto_rawDescGZIP(), []int{7}
}

func (x *RetrieveTextByPrefixResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EnterIntoTextInputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TextInputName is the name of text input.
	TextInputName string `protobuf:"bytes,1,opt,name=textInputName,proto3" json:"textInputName,omitempty"`
	// Content is the text which will be entered into input.
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *EnterIntoTextInputRequest) Reset() {
	*x = EnterIntoTextInputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterIntoTextInputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterIntoTextInputRequest) ProtoMessage() {}

func (x *EnterIntoTextInputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterIntoTextInputRequest.ProtoReflect.Descriptor instead.
func (*EnterIntoTextInputRequest) Descriptor() ([]byte, []int) {
	return file_app_service_proto_rawDescGZIP(), []int{8}
}

func (x *EnterIntoTextInputRequest) GetTextInputName() string {
	if x != nil {
		return x.TextInputName
	}
	return ""
}

func (x *EnterIntoTextInputRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

var File_app_service_proto protoreflect.FileDescriptor

var file_app_service_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x15, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x73,
	0x68, 0x69, 0x6d, 0x6c, 0x65, 0x73, 0x73, 0x72, 0x6d, 0x61, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x57, 0x0a, 0x15, 0x4e, 0x65, 0x77, 0x53, 0x68,
	0x69, 0x6d, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x4d, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x22, 0x5c, 0x0a, 0x18, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0x2e,
	0x0a, 0x16, 0x4c, 0x65, 0x66, 0x74, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x61,
	0x0a, 0x1d, 0x57, 0x61, 0x69, 0x74, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x22, 0x33, 0x0a, 0x1b, 0x4c, 0x65, 0x66, 0x74, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x52, 0x61,
	0x64, 0x69, 0x6f, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x2c, 0x0a, 0x14, 0x4c, 0x65, 0x66, 0x74, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x22, 0x35, 0x0a, 0x1b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x54, 0x65, 0x78, 0x74, 0x42, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x34, 0x0a, 0x1c, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x42, 0x79, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x5b, 0x0a, 0x19, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x6f, 0x54, 0x65,
	0x78, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x32, 0x90,
	0x08, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a,
	0x0e, 0x4e, 0x65, 0x77, 0x53, 0x68, 0x69, 0x6d, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x4d, 0x41, 0x12,
	0x2c, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x73, 0x68, 0x69, 0x6d,
	0x6c, 0x65, 0x73, 0x73, 0x72, 0x6d, 0x61, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x68, 0x69, 0x6d, 0x6c,
	0x65, 0x73, 0x73, 0x52, 0x4d, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x53, 0x68, 0x69, 0x6d, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x4d, 0x41, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a,
	0x14, 0x54, 0x65, 0x73, 0x74, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x11, 0x57, 0x61, 0x69, 0x74, 0x46,
	0x6f, 0x72, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x2f, 0x2e, 0x74,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x73, 0x68, 0x69, 0x6d, 0x6c, 0x65, 0x73,
	0x73, 0x72, 0x6d, 0x61, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0f, 0x4c, 0x65, 0x66, 0x74, 0x43,
	0x6c, 0x69, 0x63, 0x6b, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x74, 0x61, 0x73,
	0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x73, 0x68, 0x69, 0x6d, 0x6c, 0x65, 0x73, 0x73, 0x72,
	0x6d, 0x61, 0x2e, 0x4c, 0x65, 0x66, 0x74, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x16, 0x57, 0x61, 0x69, 0x74, 0x55, 0x6e, 0x74, 0x69, 0x6c,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x34, 0x2e,
	0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x73, 0x68, 0x69, 0x6d, 0x6c, 0x65,
	0x73, 0x73, 0x72, 0x6d, 0x61, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x64, 0x0a,
	0x14, 0x4c, 0x65, 0x66, 0x74, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f,
	0x73, 0x2e, 0x73, 0x68, 0x69, 0x6d, 0x6c, 0x65, 0x73, 0x73, 0x72, 0x6d, 0x61, 0x2e, 0x4c, 0x65,
	0x66, 0x74, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0d, 0x4c, 0x65, 0x66, 0x74, 0x43, 0x6c, 0x69, 0x63, 0x6b,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2b, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x2e, 0x73, 0x68, 0x69, 0x6d, 0x6c, 0x65, 0x73, 0x73, 0x72, 0x6d, 0x61, 0x2e, 0x4c, 0x65, 0x66,
	0x74, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x14,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x42, 0x79, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x32, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x2e, 0x73, 0x68, 0x69, 0x6d, 0x6c, 0x65, 0x73, 0x73, 0x72, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x42, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x2e, 0x73, 0x68, 0x69, 0x6d, 0x6c, 0x65, 0x73, 0x73, 0x72, 0x6d, 0x61,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x42, 0x79, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x60, 0x0a, 0x12, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x6f, 0x54, 0x65, 0x78, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x30, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f,
	0x73, 0x2e, 0x73, 0x68, 0x69, 0x6d, 0x6c, 0x65, 0x73, 0x73, 0x72, 0x6d, 0x61, 0x2e, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x4e, 0x0a, 0x1a, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x42, 0x2b, 0x5a, 0x29, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f,
	0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72,
	0x6f, 0x73, 0x2f, 0x73, 0x68, 0x69, 0x6d, 0x6c, 0x65, 0x73, 0x73, 0x72, 0x6d, 0x61, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_app_service_proto_rawDescOnce sync.Once
	file_app_service_proto_rawDescData = file_app_service_proto_rawDesc
)

func file_app_service_proto_rawDescGZIP() []byte {
	file_app_service_proto_rawDescOnce.Do(func() {
		file_app_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_app_service_proto_rawDescData)
	})
	return file_app_service_proto_rawDescData
}

var file_app_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_app_service_proto_goTypes = []interface{}{
	(*NewShimlessRMARequest)(nil),         // 0: tast.cros.shimlessrma.NewShimlessRMARequest
	(*WaitForPageToLoadRequest)(nil),      // 1: tast.cros.shimlessrma.WaitForPageToLoadRequest
	(*LeftClickButtonRequest)(nil),        // 2: tast.cros.shimlessrma.LeftClickButtonRequest
	(*WaitUntilButtonEnabledRequest)(nil), // 3: tast.cros.shimlessrma.WaitUntilButtonEnabledRequest
	(*LeftClickRadioButtonRequest)(nil),   // 4: tast.cros.shimlessrma.LeftClickRadioButtonRequest
	(*LeftClickLinkRequest)(nil),          // 5: tast.cros.shimlessrma.LeftClickLinkRequest
	(*RetrieveTextByPrefixRequest)(nil),   // 6: tast.cros.shimlessrma.RetrieveTextByPrefixRequest
	(*RetrieveTextByPrefixResponse)(nil),  // 7: tast.cros.shimlessrma.RetrieveTextByPrefixResponse
	(*EnterIntoTextInputRequest)(nil),     // 8: tast.cros.shimlessrma.EnterIntoTextInputRequest
	(*emptypb.Empty)(nil),                 // 9: google.protobuf.Empty
}
var file_app_service_proto_depIdxs = []int32{
	0,  // 0: tast.cros.shimlessrma.AppService.NewShimlessRMA:input_type -> tast.cros.shimlessrma.NewShimlessRMARequest
	9,  // 1: tast.cros.shimlessrma.AppService.CloseShimlessRMA:input_type -> google.protobuf.Empty
	9,  // 2: tast.cros.shimlessrma.AppService.TestWelcomeAndCancel:input_type -> google.protobuf.Empty
	1,  // 3: tast.cros.shimlessrma.AppService.WaitForPageToLoad:input_type -> tast.cros.shimlessrma.WaitForPageToLoadRequest
	2,  // 4: tast.cros.shimlessrma.AppService.LeftClickButton:input_type -> tast.cros.shimlessrma.LeftClickButtonRequest
	3,  // 5: tast.cros.shimlessrma.AppService.WaitUntilButtonEnabled:input_type -> tast.cros.shimlessrma.WaitUntilButtonEnabledRequest
	4,  // 6: tast.cros.shimlessrma.AppService.LeftClickRadioButton:input_type -> tast.cros.shimlessrma.LeftClickRadioButtonRequest
	5,  // 7: tast.cros.shimlessrma.AppService.LeftClickLink:input_type -> tast.cros.shimlessrma.LeftClickLinkRequest
	6,  // 8: tast.cros.shimlessrma.AppService.RetrieveTextByPrefix:input_type -> tast.cros.shimlessrma.RetrieveTextByPrefixRequest
	8,  // 9: tast.cros.shimlessrma.AppService.EnterIntoTextInput:input_type -> tast.cros.shimlessrma.EnterIntoTextInputRequest
	9,  // 10: tast.cros.shimlessrma.AppService.BypassFirmwareInstallation:input_type -> google.protobuf.Empty
	9,  // 11: tast.cros.shimlessrma.AppService.NewShimlessRMA:output_type -> google.protobuf.Empty
	9,  // 12: tast.cros.shimlessrma.AppService.CloseShimlessRMA:output_type -> google.protobuf.Empty
	9,  // 13: tast.cros.shimlessrma.AppService.TestWelcomeAndCancel:output_type -> google.protobuf.Empty
	9,  // 14: tast.cros.shimlessrma.AppService.WaitForPageToLoad:output_type -> google.protobuf.Empty
	9,  // 15: tast.cros.shimlessrma.AppService.LeftClickButton:output_type -> google.protobuf.Empty
	9,  // 16: tast.cros.shimlessrma.AppService.WaitUntilButtonEnabled:output_type -> google.protobuf.Empty
	9,  // 17: tast.cros.shimlessrma.AppService.LeftClickRadioButton:output_type -> google.protobuf.Empty
	9,  // 18: tast.cros.shimlessrma.AppService.LeftClickLink:output_type -> google.protobuf.Empty
	7,  // 19: tast.cros.shimlessrma.AppService.RetrieveTextByPrefix:output_type -> tast.cros.shimlessrma.RetrieveTextByPrefixResponse
	9,  // 20: tast.cros.shimlessrma.AppService.EnterIntoTextInput:output_type -> google.protobuf.Empty
	9,  // 21: tast.cros.shimlessrma.AppService.BypassFirmwareInstallation:output_type -> google.protobuf.Empty
	11, // [11:22] is the sub-list for method output_type
	0,  // [0:11] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_app_service_proto_init() }
func file_app_service_proto_init() {
	if File_app_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_app_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewShimlessRMARequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForPageToLoadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeftClickButtonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitUntilButtonEnabledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeftClickRadioButtonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeftClickLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveTextByPrefixRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveTextByPrefixResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterIntoTextInputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_app_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_app_service_proto_goTypes,
		DependencyIndexes: file_app_service_proto_depIdxs,
		MessageInfos:      file_app_service_proto_msgTypes,
	}.Build()
	File_app_service_proto = out.File
	file_app_service_proto_rawDesc = nil
	file_app_service_proto_goTypes = nil
	file_app_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AppServiceClient is the client API for AppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AppServiceClient interface {
	// Creates ShimlessRMA.
	NewShimlessRMA(ctx context.Context, in *NewShimlessRMARequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Closes and releases the resources obtained by New.
	CloseShimlessRMA(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Tests welcome page is loaded and then cancel it.
	TestWelcomeAndCancel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Waits for page to load.
	WaitForPageToLoad(ctx context.Context, in *WaitForPageToLoadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Left clicks a button.
	LeftClickButton(ctx context.Context, in *LeftClickButtonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Waits until a button enabled.
	WaitUntilButtonEnabled(ctx context.Context, in *WaitUntilButtonEnabledRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Left clicks a Radio button.
	LeftClickRadioButton(ctx context.Context, in *LeftClickRadioButtonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Left clicks a link.
	LeftClickLink(ctx context.Context, in *LeftClickLinkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Retrieve a text by prefix
	RetrieveTextByPrefix(ctx context.Context, in *RetrieveTextByPrefixRequest, opts ...grpc.CallOption) (*RetrieveTextByPrefixResponse, error)
	// Enter the content into input box.
	EnterIntoTextInput(ctx context.Context, in *EnterIntoTextInputRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Bypass firmare installation.
	BypassFirmwareInstallation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type appServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppServiceClient(cc grpc.ClientConnInterface) AppServiceClient {
	return &appServiceClient{cc}
}

func (c *appServiceClient) NewShimlessRMA(ctx context.Context, in *NewShimlessRMARequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.shimlessrma.AppService/NewShimlessRMA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) CloseShimlessRMA(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.shimlessrma.AppService/CloseShimlessRMA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) TestWelcomeAndCancel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.shimlessrma.AppService/TestWelcomeAndCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) WaitForPageToLoad(ctx context.Context, in *WaitForPageToLoadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.shimlessrma.AppService/WaitForPageToLoad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) LeftClickButton(ctx context.Context, in *LeftClickButtonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.shimlessrma.AppService/LeftClickButton", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) WaitUntilButtonEnabled(ctx context.Context, in *WaitUntilButtonEnabledRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.shimlessrma.AppService/WaitUntilButtonEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) LeftClickRadioButton(ctx context.Context, in *LeftClickRadioButtonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.shimlessrma.AppService/LeftClickRadioButton", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) LeftClickLink(ctx context.Context, in *LeftClickLinkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.shimlessrma.AppService/LeftClickLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) RetrieveTextByPrefix(ctx context.Context, in *RetrieveTextByPrefixRequest, opts ...grpc.CallOption) (*RetrieveTextByPrefixResponse, error) {
	out := new(RetrieveTextByPrefixResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.shimlessrma.AppService/RetrieveTextByPrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) EnterIntoTextInput(ctx context.Context, in *EnterIntoTextInputRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.shimlessrma.AppService/EnterIntoTextInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) BypassFirmwareInstallation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.shimlessrma.AppService/BypassFirmwareInstallation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppServiceServer is the server API for AppService service.
type AppServiceServer interface {
	// Creates ShimlessRMA.
	NewShimlessRMA(context.Context, *NewShimlessRMARequest) (*emptypb.Empty, error)
	// Closes and releases the resources obtained by New.
	CloseShimlessRMA(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Tests welcome page is loaded and then cancel it.
	TestWelcomeAndCancel(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Waits for page to load.
	WaitForPageToLoad(context.Context, *WaitForPageToLoadRequest) (*emptypb.Empty, error)
	// Left clicks a button.
	LeftClickButton(context.Context, *LeftClickButtonRequest) (*emptypb.Empty, error)
	// Waits until a button enabled.
	WaitUntilButtonEnabled(context.Context, *WaitUntilButtonEnabledRequest) (*emptypb.Empty, error)
	// Left clicks a Radio button.
	LeftClickRadioButton(context.Context, *LeftClickRadioButtonRequest) (*emptypb.Empty, error)
	// Left clicks a link.
	LeftClickLink(context.Context, *LeftClickLinkRequest) (*emptypb.Empty, error)
	// Retrieve a text by prefix
	RetrieveTextByPrefix(context.Context, *RetrieveTextByPrefixRequest) (*RetrieveTextByPrefixResponse, error)
	// Enter the content into input box.
	EnterIntoTextInput(context.Context, *EnterIntoTextInputRequest) (*emptypb.Empty, error)
	// Bypass firmare installation.
	BypassFirmwareInstallation(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
}

// UnimplementedAppServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAppServiceServer struct {
}

func (*UnimplementedAppServiceServer) NewShimlessRMA(context.Context, *NewShimlessRMARequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewShimlessRMA not implemented")
}
func (*UnimplementedAppServiceServer) CloseShimlessRMA(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseShimlessRMA not implemented")
}
func (*UnimplementedAppServiceServer) TestWelcomeAndCancel(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestWelcomeAndCancel not implemented")
}
func (*UnimplementedAppServiceServer) WaitForPageToLoad(context.Context, *WaitForPageToLoadRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForPageToLoad not implemented")
}
func (*UnimplementedAppServiceServer) LeftClickButton(context.Context, *LeftClickButtonRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeftClickButton not implemented")
}
func (*UnimplementedAppServiceServer) WaitUntilButtonEnabled(context.Context, *WaitUntilButtonEnabledRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitUntilButtonEnabled not implemented")
}
func (*UnimplementedAppServiceServer) LeftClickRadioButton(context.Context, *LeftClickRadioButtonRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeftClickRadioButton not implemented")
}
func (*UnimplementedAppServiceServer) LeftClickLink(context.Context, *LeftClickLinkRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeftClickLink not implemented")
}
func (*UnimplementedAppServiceServer) RetrieveTextByPrefix(context.Context, *RetrieveTextByPrefixRequest) (*RetrieveTextByPrefixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveTextByPrefix not implemented")
}
func (*UnimplementedAppServiceServer) EnterIntoTextInput(context.Context, *EnterIntoTextInputRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterIntoTextInput not implemented")
}
func (*UnimplementedAppServiceServer) BypassFirmwareInstallation(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BypassFirmwareInstallation not implemented")
}

func RegisterAppServiceServer(s *grpc.Server, srv AppServiceServer) {
	s.RegisterService(&_AppService_serviceDesc, srv)
}

func _AppService_NewShimlessRMA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewShimlessRMARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).NewShimlessRMA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.shimlessrma.AppService/NewShimlessRMA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).NewShimlessRMA(ctx, req.(*NewShimlessRMARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_CloseShimlessRMA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CloseShimlessRMA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.shimlessrma.AppService/CloseShimlessRMA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CloseShimlessRMA(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_TestWelcomeAndCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).TestWelcomeAndCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.shimlessrma.AppService/TestWelcomeAndCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).TestWelcomeAndCancel(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_WaitForPageToLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitForPageToLoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).WaitForPageToLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.shimlessrma.AppService/WaitForPageToLoad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).WaitForPageToLoad(ctx, req.(*WaitForPageToLoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_LeftClickButton_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeftClickButtonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).LeftClickButton(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.shimlessrma.AppService/LeftClickButton",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).LeftClickButton(ctx, req.(*LeftClickButtonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_WaitUntilButtonEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitUntilButtonEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).WaitUntilButtonEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.shimlessrma.AppService/WaitUntilButtonEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).WaitUntilButtonEnabled(ctx, req.(*WaitUntilButtonEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_LeftClickRadioButton_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeftClickRadioButtonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).LeftClickRadioButton(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.shimlessrma.AppService/LeftClickRadioButton",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).LeftClickRadioButton(ctx, req.(*LeftClickRadioButtonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_LeftClickLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeftClickLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).LeftClickLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.shimlessrma.AppService/LeftClickLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).LeftClickLink(ctx, req.(*LeftClickLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_RetrieveTextByPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveTextByPrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).RetrieveTextByPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.shimlessrma.AppService/RetrieveTextByPrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).RetrieveTextByPrefix(ctx, req.(*RetrieveTextByPrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_EnterIntoTextInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnterIntoTextInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).EnterIntoTextInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.shimlessrma.AppService/EnterIntoTextInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).EnterIntoTextInput(ctx, req.(*EnterIntoTextInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_BypassFirmwareInstallation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).BypassFirmwareInstallation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.shimlessrma.AppService/BypassFirmwareInstallation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).BypassFirmwareInstallation(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.shimlessrma.AppService",
	HandlerType: (*AppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewShimlessRMA",
			Handler:    _AppService_NewShimlessRMA_Handler,
		},
		{
			MethodName: "CloseShimlessRMA",
			Handler:    _AppService_CloseShimlessRMA_Handler,
		},
		{
			MethodName: "TestWelcomeAndCancel",
			Handler:    _AppService_TestWelcomeAndCancel_Handler,
		},
		{
			MethodName: "WaitForPageToLoad",
			Handler:    _AppService_WaitForPageToLoad_Handler,
		},
		{
			MethodName: "LeftClickButton",
			Handler:    _AppService_LeftClickButton_Handler,
		},
		{
			MethodName: "WaitUntilButtonEnabled",
			Handler:    _AppService_WaitUntilButtonEnabled_Handler,
		},
		{
			MethodName: "LeftClickRadioButton",
			Handler:    _AppService_LeftClickRadioButton_Handler,
		},
		{
			MethodName: "LeftClickLink",
			Handler:    _AppService_LeftClickLink_Handler,
		},
		{
			MethodName: "RetrieveTextByPrefix",
			Handler:    _AppService_RetrieveTextByPrefix_Handler,
		},
		{
			MethodName: "EnterIntoTextInput",
			Handler:    _AppService_EnterIntoTextInput_Handler,
		},
		{
			MethodName: "BypassFirmwareInstallation",
			Handler:    _AppService_BypassFirmwareInstallation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app_service.proto",
}
