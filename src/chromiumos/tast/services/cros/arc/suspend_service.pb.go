// Code generated by protoc-gen-go. DO NOT EDIT.
// source: suspend_service.proto

package arc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ClockValues struct {
	ClockMonotonic       *duration.Duration `protobuf:"bytes,1,opt,name=clock_monotonic,json=clockMonotonic,proto3" json:"clock_monotonic,omitempty"`
	ClockBoottime        *duration.Duration `protobuf:"bytes,2,opt,name=clock_boottime,json=clockBoottime,proto3" json:"clock_boottime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ClockValues) Reset()         { *m = ClockValues{} }
func (m *ClockValues) String() string { return proto.CompactTextString(m) }
func (*ClockValues) ProtoMessage()    {}
func (*ClockValues) Descriptor() ([]byte, []int) {
	return fileDescriptor_f10ed12feda6cd00, []int{0}
}

func (m *ClockValues) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClockValues.Unmarshal(m, b)
}
func (m *ClockValues) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClockValues.Marshal(b, m, deterministic)
}
func (m *ClockValues) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClockValues.Merge(m, src)
}
func (m *ClockValues) XXX_Size() int {
	return xxx_messageInfo_ClockValues.Size(m)
}
func (m *ClockValues) XXX_DiscardUnknown() {
	xxx_messageInfo_ClockValues.DiscardUnknown(m)
}

var xxx_messageInfo_ClockValues proto.InternalMessageInfo

func (m *ClockValues) GetClockMonotonic() *duration.Duration {
	if m != nil {
		return m.ClockMonotonic
	}
	return nil
}

func (m *ClockValues) GetClockBoottime() *duration.Duration {
	if m != nil {
		return m.ClockBoottime
	}
	return nil
}

type GetClockValuesResponse struct {
	Host                 *ClockValues `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Arc                  *ClockValues `protobuf:"bytes,2,opt,name=arc,proto3" json:"arc,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetClockValuesResponse) Reset()         { *m = GetClockValuesResponse{} }
func (m *GetClockValuesResponse) String() string { return proto.CompactTextString(m) }
func (*GetClockValuesResponse) ProtoMessage()    {}
func (*GetClockValuesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f10ed12feda6cd00, []int{1}
}

func (m *GetClockValuesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetClockValuesResponse.Unmarshal(m, b)
}
func (m *GetClockValuesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetClockValuesResponse.Marshal(b, m, deterministic)
}
func (m *GetClockValuesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClockValuesResponse.Merge(m, src)
}
func (m *GetClockValuesResponse) XXX_Size() int {
	return xxx_messageInfo_GetClockValuesResponse.Size(m)
}
func (m *GetClockValuesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClockValuesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetClockValuesResponse proto.InternalMessageInfo

func (m *GetClockValuesResponse) GetHost() *ClockValues {
	if m != nil {
		return m.Host
	}
	return nil
}

func (m *GetClockValuesResponse) GetArc() *ClockValues {
	if m != nil {
		return m.Arc
	}
	return nil
}

type SuspendServiceParams struct {
	ReadClocksPathInArc  string   `protobuf:"bytes,1,opt,name=read_clocks_path_in_arc,json=readClocksPathInArc,proto3" json:"read_clocks_path_in_arc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SuspendServiceParams) Reset()         { *m = SuspendServiceParams{} }
func (m *SuspendServiceParams) String() string { return proto.CompactTextString(m) }
func (*SuspendServiceParams) ProtoMessage()    {}
func (*SuspendServiceParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_f10ed12feda6cd00, []int{2}
}

func (m *SuspendServiceParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SuspendServiceParams.Unmarshal(m, b)
}
func (m *SuspendServiceParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SuspendServiceParams.Marshal(b, m, deterministic)
}
func (m *SuspendServiceParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuspendServiceParams.Merge(m, src)
}
func (m *SuspendServiceParams) XXX_Size() int {
	return xxx_messageInfo_SuspendServiceParams.Size(m)
}
func (m *SuspendServiceParams) XXX_DiscardUnknown() {
	xxx_messageInfo_SuspendServiceParams.DiscardUnknown(m)
}

var xxx_messageInfo_SuspendServiceParams proto.InternalMessageInfo

func (m *SuspendServiceParams) GetReadClocksPathInArc() string {
	if m != nil {
		return m.ReadClocksPathInArc
	}
	return ""
}

func init() {
	proto.RegisterType((*ClockValues)(nil), "tast.cros.arc.ClockValues")
	proto.RegisterType((*GetClockValuesResponse)(nil), "tast.cros.arc.GetClockValuesResponse")
	proto.RegisterType((*SuspendServiceParams)(nil), "tast.cros.arc.SuspendServiceParams")
}

func init() { proto.RegisterFile("suspend_service.proto", fileDescriptor_f10ed12feda6cd00) }

var fileDescriptor_f10ed12feda6cd00 = []byte{
	// 352 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xdf, 0x4a, 0xc3, 0x30,
	0x14, 0xc6, 0x57, 0x15, 0xc5, 0x8c, 0x4d, 0x88, 0x3a, 0x67, 0x05, 0xd1, 0x0e, 0xc1, 0x0b, 0x49,
	0x61, 0xfa, 0x00, 0x3a, 0x15, 0x15, 0x14, 0xc6, 0x06, 0x5e, 0x78, 0x61, 0xc9, 0xb2, 0xb8, 0x16,
	0xd7, 0x9c, 0x92, 0x93, 0x0e, 0x7c, 0x0e, 0xdf, 0xc6, 0xa7, 0x93, 0xa4, 0x1d, 0x6c, 0x73, 0xa8,
	0x97, 0xc9, 0xf7, 0x87, 0x1f, 0x5f, 0x42, 0x76, 0x31, 0xc7, 0x4c, 0xaa, 0x61, 0x84, 0x52, 0x4f,
	0x12, 0x21, 0x59, 0xa6, 0xc1, 0x00, 0xad, 0x19, 0x8e, 0x86, 0x09, 0x0d, 0xc8, 0xb8, 0x16, 0xfe,
	0xc1, 0x08, 0x60, 0x34, 0x96, 0xa1, 0x13, 0x07, 0xf9, 0x5b, 0x28, 0xd3, 0xcc, 0x7c, 0x14, 0x5e,
	0xff, 0x70, 0x51, 0x1c, 0xe6, 0x9a, 0x9b, 0x04, 0x54, 0xa1, 0x07, 0x9f, 0x1e, 0xa9, 0x5e, 0x8f,
	0x41, 0xbc, 0x3f, 0xf3, 0x71, 0x2e, 0x91, 0x76, 0xc8, 0x96, 0xb0, 0xc7, 0x28, 0x05, 0x05, 0x06,
	0x54, 0x22, 0x9a, 0xde, 0x91, 0x77, 0x5a, 0x6d, 0xef, 0xb3, 0xa2, 0x89, 0x4d, 0x9b, 0xd8, 0x4d,
	0xd9, 0xd4, 0xab, 0xbb, 0xc4, 0xd3, 0x34, 0x40, 0x2f, 0x49, 0x71, 0x13, 0x0d, 0x00, 0x8c, 0x49,
	0x52, 0xd9, 0x5c, 0xf9, 0xab, 0xa2, 0xe6, 0x02, 0x9d, 0xd2, 0x1f, 0x4c, 0x48, 0xe3, 0x4e, 0x9a,
	0x19, 0xae, 0x9e, 0xc4, 0x0c, 0x14, 0x4a, 0xca, 0xc8, 0x5a, 0x0c, 0x68, 0x4a, 0x28, 0x9f, 0xcd,
	0x4d, 0xc1, 0x66, 0x13, 0xce, 0x47, 0xcf, 0xc8, 0x2a, 0xd7, 0xa2, 0x04, 0xf8, 0xcd, 0x6e, 0x6d,
	0xc1, 0x23, 0xd9, 0xe9, 0x17, 0x93, 0xf7, 0x8b, 0xc5, 0xbb, 0x5c, 0xf3, 0x14, 0xe9, 0x05, 0xd9,
	0xd3, 0x92, 0x0f, 0x23, 0x47, 0x89, 0x51, 0xc6, 0x4d, 0x1c, 0x25, 0x2a, 0xb2, 0xcd, 0x16, 0x64,
	0xb3, 0xb7, 0x6d, 0x65, 0x57, 0x87, 0x5d, 0x6e, 0xe2, 0x07, 0x75, 0xa5, 0x45, 0xfb, 0xcb, 0x23,
	0xf5, 0xf9, 0x3a, 0x7a, 0x4f, 0x36, 0xba, 0x5a, 0x66, 0x5c, 0x4b, 0xda, 0xf8, 0xb1, 0xc6, 0xad,
	0x7d, 0x37, 0xbf, 0xb5, 0x00, 0xb9, 0x0c, 0x28, 0xa8, 0xd0, 0x57, 0x52, 0x9f, 0x9f, 0x88, 0xfe,
	0x27, 0xe8, 0x9f, 0x2c, 0x98, 0x96, 0xcf, 0x1c, 0x54, 0x3a, 0xad, 0x97, 0x63, 0x11, 0x6b, 0x48,
	0x93, 0x3c, 0x05, 0x0c, 0x6d, 0x28, 0x2c, 0x7f, 0x21, 0x86, 0x36, 0x1d, 0x72, 0x2d, 0x06, 0xeb,
	0x8e, 0xfd, 0xfc, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x99, 0x53, 0xaa, 0x50, 0xa9, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SuspendServiceClient is the client API for SuspendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SuspendServiceClient interface {
	// Prepare to prepare the device for reading clocks and suspend
	Prepare(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SuspendServiceParams, error)
	// GetPerfValues signs in to DUT and measures Android boot performance metrics.
	GetClockValues(ctx context.Context, in *SuspendServiceParams, opts ...grpc.CallOption) (*GetClockValuesResponse, error)
}

type suspendServiceClient struct {
	cc *grpc.ClientConn
}

func NewSuspendServiceClient(cc *grpc.ClientConn) SuspendServiceClient {
	return &suspendServiceClient{cc}
}

func (c *suspendServiceClient) Prepare(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SuspendServiceParams, error) {
	out := new(SuspendServiceParams)
	err := c.cc.Invoke(ctx, "/tast.cros.arc.SuspendService/Prepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suspendServiceClient) GetClockValues(ctx context.Context, in *SuspendServiceParams, opts ...grpc.CallOption) (*GetClockValuesResponse, error) {
	out := new(GetClockValuesResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.arc.SuspendService/GetClockValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuspendServiceServer is the server API for SuspendService service.
type SuspendServiceServer interface {
	// Prepare to prepare the device for reading clocks and suspend
	Prepare(context.Context, *empty.Empty) (*SuspendServiceParams, error)
	// GetPerfValues signs in to DUT and measures Android boot performance metrics.
	GetClockValues(context.Context, *SuspendServiceParams) (*GetClockValuesResponse, error)
}

// UnimplementedSuspendServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSuspendServiceServer struct {
}

func (*UnimplementedSuspendServiceServer) Prepare(ctx context.Context, req *empty.Empty) (*SuspendServiceParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (*UnimplementedSuspendServiceServer) GetClockValues(ctx context.Context, req *SuspendServiceParams) (*GetClockValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClockValues not implemented")
}

func RegisterSuspendServiceServer(s *grpc.Server, srv SuspendServiceServer) {
	s.RegisterService(&_SuspendService_serviceDesc, srv)
}

func _SuspendService_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuspendServiceServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.arc.SuspendService/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuspendServiceServer).Prepare(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuspendService_GetClockValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendServiceParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuspendServiceServer).GetClockValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.arc.SuspendService/GetClockValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuspendServiceServer).GetClockValues(ctx, req.(*SuspendServiceParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _SuspendService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.arc.SuspendService",
	HandlerType: (*SuspendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepare",
			Handler:    _SuspendService_Prepare_Handler,
		},
		{
			MethodName: "GetClockValues",
			Handler:    _SuspendService_GetClockValues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "suspend_service.proto",
}
