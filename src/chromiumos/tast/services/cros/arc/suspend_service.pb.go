// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: suspend_service.proto

package arc

import (
	context "context"
	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClockValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClockMonotonic *duration.Duration `protobuf:"bytes,1,opt,name=clock_monotonic,json=clockMonotonic,proto3" json:"clock_monotonic,omitempty"`
	ClockBoottime  *duration.Duration `protobuf:"bytes,2,opt,name=clock_boottime,json=clockBoottime,proto3" json:"clock_boottime,omitempty"`
}

func (x *ClockValues) Reset() {
	*x = ClockValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suspend_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClockValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockValues) ProtoMessage() {}

func (x *ClockValues) ProtoReflect() protoreflect.Message {
	mi := &file_suspend_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockValues.ProtoReflect.Descriptor instead.
func (*ClockValues) Descriptor() ([]byte, []int) {
	return file_suspend_service_proto_rawDescGZIP(), []int{0}
}

func (x *ClockValues) GetClockMonotonic() *duration.Duration {
	if x != nil {
		return x.ClockMonotonic
	}
	return nil
}

func (x *ClockValues) GetClockBoottime() *duration.Duration {
	if x != nil {
		return x.ClockBoottime
	}
	return nil
}

type GetClockValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host *ClockValues `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Arc  *ClockValues `protobuf:"bytes,2,opt,name=arc,proto3" json:"arc,omitempty"`
}

func (x *GetClockValuesResponse) Reset() {
	*x = GetClockValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suspend_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClockValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClockValuesResponse) ProtoMessage() {}

func (x *GetClockValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_suspend_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClockValuesResponse.ProtoReflect.Descriptor instead.
func (*GetClockValuesResponse) Descriptor() ([]byte, []int) {
	return file_suspend_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetClockValuesResponse) GetHost() *ClockValues {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *GetClockValuesResponse) GetArc() *ClockValues {
	if x != nil {
		return x.Arc
	}
	return nil
}

type SuspendServiceParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadClocksPathInArc string `protobuf:"bytes,1,opt,name=read_clocks_path_in_arc,json=readClocksPathInArc,proto3" json:"read_clocks_path_in_arc,omitempty"`
}

func (x *SuspendServiceParams) Reset() {
	*x = SuspendServiceParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_suspend_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuspendServiceParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendServiceParams) ProtoMessage() {}

func (x *SuspendServiceParams) ProtoReflect() protoreflect.Message {
	mi := &file_suspend_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendServiceParams.ProtoReflect.Descriptor instead.
func (*SuspendServiceParams) Descriptor() ([]byte, []int) {
	return file_suspend_service_proto_rawDescGZIP(), []int{2}
}

func (x *SuspendServiceParams) GetReadClocksPathInArc() string {
	if x != nil {
		return x.ReadClocksPathInArc
	}
	return ""
}

var File_suspend_service_proto protoreflect.FileDescriptor

var file_suspend_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72,
	0x6f, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x93, 0x01, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x6e,
	0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f,
	0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x12, 0x40, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x42, 0x6f, 0x6f, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x76, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x61, 0x72,
	0x63, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x63,
	0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x03, 0x61, 0x72,
	0x63, 0x22, 0x4c, 0x0a, 0x14, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x34, 0x0a, 0x17, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x6e,
	0x5f, 0x61, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x61, 0x64,
	0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x50, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x41, 0x72, 0x63, 0x32,
	0xf8, 0x01, 0x0a, 0x0e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x23, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f,
	0x73, 0x2e, 0x61, 0x72, 0x63, 0x2e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x23,
	0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x2e, 0x53,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x1a, 0x25, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e,
	0x61, 0x72, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x08,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x23, 0x5a, 0x21, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x61, 0x72, 0x63, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_suspend_service_proto_rawDescOnce sync.Once
	file_suspend_service_proto_rawDescData = file_suspend_service_proto_rawDesc
)

func file_suspend_service_proto_rawDescGZIP() []byte {
	file_suspend_service_proto_rawDescOnce.Do(func() {
		file_suspend_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_suspend_service_proto_rawDescData)
	})
	return file_suspend_service_proto_rawDescData
}

var file_suspend_service_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_suspend_service_proto_goTypes = []interface{}{
	(*ClockValues)(nil),            // 0: tast.cros.arc.ClockValues
	(*GetClockValuesResponse)(nil), // 1: tast.cros.arc.GetClockValuesResponse
	(*SuspendServiceParams)(nil),   // 2: tast.cros.arc.SuspendServiceParams
	(*duration.Duration)(nil),      // 3: google.protobuf.Duration
	(*empty.Empty)(nil),            // 4: google.protobuf.Empty
}
var file_suspend_service_proto_depIdxs = []int32{
	3, // 0: tast.cros.arc.ClockValues.clock_monotonic:type_name -> google.protobuf.Duration
	3, // 1: tast.cros.arc.ClockValues.clock_boottime:type_name -> google.protobuf.Duration
	0, // 2: tast.cros.arc.GetClockValuesResponse.host:type_name -> tast.cros.arc.ClockValues
	0, // 3: tast.cros.arc.GetClockValuesResponse.arc:type_name -> tast.cros.arc.ClockValues
	4, // 4: tast.cros.arc.SuspendService.Prepare:input_type -> google.protobuf.Empty
	2, // 5: tast.cros.arc.SuspendService.GetClockValues:input_type -> tast.cros.arc.SuspendServiceParams
	4, // 6: tast.cros.arc.SuspendService.Finalize:input_type -> google.protobuf.Empty
	2, // 7: tast.cros.arc.SuspendService.Prepare:output_type -> tast.cros.arc.SuspendServiceParams
	1, // 8: tast.cros.arc.SuspendService.GetClockValues:output_type -> tast.cros.arc.GetClockValuesResponse
	4, // 9: tast.cros.arc.SuspendService.Finalize:output_type -> google.protobuf.Empty
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_suspend_service_proto_init() }
func file_suspend_service_proto_init() {
	if File_suspend_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_suspend_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClockValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suspend_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClockValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_suspend_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuspendServiceParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_suspend_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_suspend_service_proto_goTypes,
		DependencyIndexes: file_suspend_service_proto_depIdxs,
		MessageInfos:      file_suspend_service_proto_msgTypes,
	}.Build()
	File_suspend_service_proto = out.File
	file_suspend_service_proto_rawDesc = nil
	file_suspend_service_proto_goTypes = nil
	file_suspend_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SuspendServiceClient is the client API for SuspendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SuspendServiceClient interface {
	// Prepare to prepare the device for reading clocks and suspend.
	Prepare(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SuspendServiceParams, error)
	// GetPerfValues signs in to DUT and measures Android boot performance metrics.
	GetClockValues(ctx context.Context, in *SuspendServiceParams, opts ...grpc.CallOption) (*GetClockValuesResponse, error)
	// Finalize does some clean-ups.
	Finalize(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type suspendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSuspendServiceClient(cc grpc.ClientConnInterface) SuspendServiceClient {
	return &suspendServiceClient{cc}
}

func (c *suspendServiceClient) Prepare(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SuspendServiceParams, error) {
	out := new(SuspendServiceParams)
	err := c.cc.Invoke(ctx, "/tast.cros.arc.SuspendService/Prepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suspendServiceClient) GetClockValues(ctx context.Context, in *SuspendServiceParams, opts ...grpc.CallOption) (*GetClockValuesResponse, error) {
	out := new(GetClockValuesResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.arc.SuspendService/GetClockValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suspendServiceClient) Finalize(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.arc.SuspendService/Finalize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuspendServiceServer is the server API for SuspendService service.
type SuspendServiceServer interface {
	// Prepare to prepare the device for reading clocks and suspend.
	Prepare(context.Context, *empty.Empty) (*SuspendServiceParams, error)
	// GetPerfValues signs in to DUT and measures Android boot performance metrics.
	GetClockValues(context.Context, *SuspendServiceParams) (*GetClockValuesResponse, error)
	// Finalize does some clean-ups.
	Finalize(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedSuspendServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSuspendServiceServer struct {
}

func (*UnimplementedSuspendServiceServer) Prepare(context.Context, *empty.Empty) (*SuspendServiceParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (*UnimplementedSuspendServiceServer) GetClockValues(context.Context, *SuspendServiceParams) (*GetClockValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClockValues not implemented")
}
func (*UnimplementedSuspendServiceServer) Finalize(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Finalize not implemented")
}

func RegisterSuspendServiceServer(s *grpc.Server, srv SuspendServiceServer) {
	s.RegisterService(&_SuspendService_serviceDesc, srv)
}

func _SuspendService_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuspendServiceServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.arc.SuspendService/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuspendServiceServer).Prepare(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuspendService_GetClockValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendServiceParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuspendServiceServer).GetClockValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.arc.SuspendService/GetClockValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuspendServiceServer).GetClockValues(ctx, req.(*SuspendServiceParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuspendService_Finalize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuspendServiceServer).Finalize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.arc.SuspendService/Finalize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuspendServiceServer).Finalize(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _SuspendService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.arc.SuspendService",
	HandlerType: (*SuspendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepare",
			Handler:    _SuspendService_Prepare_Handler,
		},
		{
			MethodName: "GetClockValues",
			Handler:    _SuspendService_GetClockValues_Handler,
		},
		{
			MethodName: "Finalize",
			Handler:    _SuspendService_Finalize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "suspend_service.proto",
}
