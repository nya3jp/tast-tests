// Code generated by protoc-gen-go. DO NOT EDIT.
// source: adb_sideload_service.proto

package arc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("adb_sideload_service.proto", fileDescriptor_0841636c70d7af15) }

var fileDescriptor_0841636c70d7af15 = []byte{
	// 186 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0xcf, 0xbb, 0x0a, 0xc2, 0x30,
	0x14, 0xc6, 0x71, 0x5d, 0x1c, 0x02, 0x82, 0x04, 0x74, 0xa8, 0x93, 0xba, 0x27, 0xa0, 0x4f, 0xe0,
	0xa5, 0x82, 0x73, 0x37, 0x97, 0x92, 0x5b, 0x6b, 0x20, 0xe9, 0x29, 0x27, 0xa9, 0xe0, 0x03, 0xf9,
	0x9e, 0xd2, 0x8b, 0xe2, 0xe2, 0xe0, 0x9a, 0x2f, 0xe7, 0x07, 0x7f, 0x92, 0x08, 0x2d, 0xf3, 0x60,
	0xb5, 0x71, 0x20, 0x74, 0x1e, 0x0c, 0xde, 0xad, 0x32, 0xac, 0x46, 0x88, 0x40, 0xa7, 0x51, 0x84,
	0xc8, 0x14, 0x42, 0x60, 0x02, 0x55, 0xb2, 0x2c, 0x01, 0x4a, 0x67, 0x78, 0x37, 0xca, 0xa6, 0xe0,
	0xc6, 0xd7, 0xf1, 0xd1, 0xff, 0xdd, 0x3e, 0xc7, 0x84, 0xee, 0xb5, 0xcc, 0x06, 0x29, 0xeb, 0x21,
	0x7a, 0x21, 0xf3, 0xb4, 0x12, 0xd2, 0x99, 0xaf, 0xed, 0xec, 0x44, 0x49, 0x17, 0xac, 0xd7, 0xd8,
	0x5b, 0x63, 0x69, 0xab, 0x25, 0x3f, 0xde, 0xd7, 0x23, 0x7a, 0x22, 0xb3, 0x0f, 0x75, 0x84, 0xaa,
	0xb0, 0xe8, 0xff, 0x57, 0x0e, 0x9b, 0xeb, 0x4a, 0xdd, 0x10, 0xbc, 0x6d, 0x3c, 0x04, 0xde, 0x06,
	0xf2, 0x21, 0x3a, 0xf0, 0xb6, 0x94, 0x0b, 0x54, 0x72, 0xd2, 0x9d, 0xed, 0x5e, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x03, 0xe9, 0x97, 0x8d, 0x1d, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AdbSideloadServiceClient is the client API for AdbSideloadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdbSideloadServiceClient interface {
	// WaitUntilCPUCoolDown internally calls power.WaitUntilCPUCoolDown on DUT
	// and waits until CPU is cooled down.
	EnableAdbSideloadFlag(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	EnableAdbConfirm(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type adbSideloadServiceClient struct {
	cc *grpc.ClientConn
}

func NewAdbSideloadServiceClient(cc *grpc.ClientConn) AdbSideloadServiceClient {
	return &adbSideloadServiceClient{cc}
}

func (c *adbSideloadServiceClient) EnableAdbSideloadFlag(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.arc.AdbSideloadService/EnableAdbSideloadFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adbSideloadServiceClient) EnableAdbConfirm(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.arc.AdbSideloadService/EnableAdbConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdbSideloadServiceServer is the server API for AdbSideloadService service.
type AdbSideloadServiceServer interface {
	// WaitUntilCPUCoolDown internally calls power.WaitUntilCPUCoolDown on DUT
	// and waits until CPU is cooled down.
	EnableAdbSideloadFlag(context.Context, *empty.Empty) (*empty.Empty, error)
	EnableAdbConfirm(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedAdbSideloadServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAdbSideloadServiceServer struct {
}

func (*UnimplementedAdbSideloadServiceServer) EnableAdbSideloadFlag(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableAdbSideloadFlag not implemented")
}
func (*UnimplementedAdbSideloadServiceServer) EnableAdbConfirm(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableAdbConfirm not implemented")
}

func RegisterAdbSideloadServiceServer(s *grpc.Server, srv AdbSideloadServiceServer) {
	s.RegisterService(&_AdbSideloadService_serviceDesc, srv)
}

func _AdbSideloadService_EnableAdbSideloadFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdbSideloadServiceServer).EnableAdbSideloadFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.arc.AdbSideloadService/EnableAdbSideloadFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdbSideloadServiceServer).EnableAdbSideloadFlag(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdbSideloadService_EnableAdbConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdbSideloadServiceServer).EnableAdbConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.arc.AdbSideloadService/EnableAdbConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdbSideloadServiceServer).EnableAdbConfirm(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdbSideloadService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.arc.AdbSideloadService",
	HandlerType: (*AdbSideloadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnableAdbSideloadFlag",
			Handler:    _AdbSideloadService_EnableAdbSideloadFlag_Handler,
		},
		{
			MethodName: "EnableAdbConfirm",
			Handler:    _AdbSideloadService_EnableAdbConfirm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "adb_sideload_service.proto",
}
