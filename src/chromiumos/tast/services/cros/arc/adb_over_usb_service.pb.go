// Code generated by protoc-gen-go. DO NOT EDIT.
// source: adb_over_usb_service.proto

package arc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EnableUDCRequest struct {
	// Enable or disable UDC on DUT. If set 1, enable UDC on DUT. If set 0, disable UDC on DUT.
	Enable               string   `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnableUDCRequest) Reset()         { *m = EnableUDCRequest{} }
func (m *EnableUDCRequest) String() string { return proto.CompactTextString(m) }
func (*EnableUDCRequest) ProtoMessage()    {}
func (*EnableUDCRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_187e74bea48a6e82, []int{0}
}

func (m *EnableUDCRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnableUDCRequest.Unmarshal(m, b)
}
func (m *EnableUDCRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnableUDCRequest.Marshal(b, m, deterministic)
}
func (m *EnableUDCRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnableUDCRequest.Merge(m, src)
}
func (m *EnableUDCRequest) XXX_Size() int {
	return xxx_messageInfo_EnableUDCRequest.Size(m)
}
func (m *EnableUDCRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnableUDCRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnableUDCRequest proto.InternalMessageInfo

func (m *EnableUDCRequest) GetEnable() string {
	if m != nil {
		return m.Enable
	}
	return ""
}

type EnableUDCResponse struct {
	// Return result of request of EnableUDC. If return true, UDC request executed successfully, and needs a device reboot. If return false, means no-op.
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnableUDCResponse) Reset()         { *m = EnableUDCResponse{} }
func (m *EnableUDCResponse) String() string { return proto.CompactTextString(m) }
func (*EnableUDCResponse) ProtoMessage()    {}
func (*EnableUDCResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_187e74bea48a6e82, []int{1}
}

func (m *EnableUDCResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnableUDCResponse.Unmarshal(m, b)
}
func (m *EnableUDCResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnableUDCResponse.Marshal(b, m, deterministic)
}
func (m *EnableUDCResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnableUDCResponse.Merge(m, src)
}
func (m *EnableUDCResponse) XXX_Size() int {
	return xxx_messageInfo_EnableUDCResponse.Size(m)
}
func (m *EnableUDCResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EnableUDCResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EnableUDCResponse proto.InternalMessageInfo

func (m *EnableUDCResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func init() {
	proto.RegisterType((*EnableUDCRequest)(nil), "tast.cros.arc.EnableUDCRequest")
	proto.RegisterType((*EnableUDCResponse)(nil), "tast.cros.arc.EnableUDCResponse")
}

func init() { proto.RegisterFile("adb_over_usb_service.proto", fileDescriptor_187e74bea48a6e82) }

var fileDescriptor_187e74bea48a6e82 = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0xd7, 0xcb, 0x70, 0x01, 0xc1, 0xe5, 0x30, 0xa4, 0x1e, 0x9c, 0xf5, 0x22, 0x0a, 0x09,
	0xe8, 0x27, 0x58, 0xd7, 0x79, 0xf0, 0xa2, 0xb4, 0xec, 0xe2, 0xa5, 0x24, 0xf1, 0xb9, 0x0d, 0xdb,
	0xbd, 0x9a, 0x97, 0x14, 0xfc, 0x50, 0x7e, 0x47, 0x69, 0x53, 0x45, 0x85, 0x1d, 0xdf, 0xcb, 0x2f,
	0xf9, 0xff, 0xfe, 0x61, 0xb1, 0x7a, 0xd1, 0x25, 0xb6, 0x60, 0x4b, 0x4f, 0xba, 0x24, 0xb0, 0xed,
	0xce, 0x80, 0x68, 0x2c, 0x3a, 0xe4, 0xc7, 0x4e, 0x91, 0x13, 0xc6, 0x22, 0x09, 0x65, 0x4d, 0x7c,
	0xb6, 0x41, 0xdc, 0x54, 0x20, 0xfb, 0x43, 0xed, 0x5f, 0x25, 0xd4, 0x8d, 0xfb, 0x08, 0x6c, 0x72,
	0xcd, 0x4e, 0x56, 0x7b, 0xa5, 0x2b, 0x58, 0x67, 0xcb, 0x1c, 0xde, 0x3d, 0x90, 0xe3, 0x33, 0x36,
	0x86, 0x7e, 0x77, 0x1a, 0xcd, 0xa3, 0xab, 0x49, 0x3e, 0x4c, 0xc9, 0x0d, 0x9b, 0xfe, 0x62, 0xa9,
	0xc1, 0x3d, 0x41, 0x07, 0x5b, 0x20, 0x5f, 0xb9, 0x1e, 0x3e, 0xca, 0x87, 0xe9, 0xf6, 0x33, 0x62,
	0xd3, 0x45, 0x96, 0x3e, 0xb6, 0x60, 0xd7, 0x45, 0x5a, 0x04, 0x41, 0xfe, 0xc4, 0x26, 0x3f, 0x4f,
	0xf0, 0x73, 0xf1, 0x47, 0x54, 0xfc, 0x17, 0x89, 0xe7, 0x87, 0x81, 0x90, 0x9e, 0x8c, 0xf8, 0x3d,
	0xe3, 0xcb, 0x2d, 0x98, 0xb7, 0x45, 0x96, 0x66, 0x0f, 0xa8, 0x0b, 0xa7, 0x9c, 0x27, 0x3e, 0x13,
	0xa1, 0xb4, 0xf8, 0x2e, 0x2d, 0x56, 0x5d, 0xe9, 0xf8, 0xc0, 0x3e, 0x19, 0xa5, 0x97, 0xcf, 0x17,
	0x66, 0x6b, 0xb1, 0xde, 0xf9, 0x1a, 0x49, 0x76, 0xb9, 0x72, 0xf8, 0x55, 0x92, 0x9d, 0x80, 0x54,
	0xd6, 0xe8, 0x71, 0x7f, 0xed, 0xee, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x28, 0x0f, 0xfc, 0x7e,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ADBOverUSBServiceClient is the client API for ADBOverUSBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ADBOverUSBServiceClient interface {
	// Enable or disable USB Device Controller (UDC) if UDC is not enabled initially.
	EnableUDC(ctx context.Context, in *EnableUDCRequest, opts ...grpc.CallOption) (*EnableUDCResponse, error)
	// Check ADBD job status.
	CheckADBDJobStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type aDBOverUSBServiceClient struct {
	cc *grpc.ClientConn
}

func NewADBOverUSBServiceClient(cc *grpc.ClientConn) ADBOverUSBServiceClient {
	return &aDBOverUSBServiceClient{cc}
}

func (c *aDBOverUSBServiceClient) EnableUDC(ctx context.Context, in *EnableUDCRequest, opts ...grpc.CallOption) (*EnableUDCResponse, error) {
	out := new(EnableUDCResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.arc.ADBOverUSBService/EnableUDC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aDBOverUSBServiceClient) CheckADBDJobStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.arc.ADBOverUSBService/CheckADBDJobStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ADBOverUSBServiceServer is the server API for ADBOverUSBService service.
type ADBOverUSBServiceServer interface {
	// Enable or disable USB Device Controller (UDC) if UDC is not enabled initially.
	EnableUDC(context.Context, *EnableUDCRequest) (*EnableUDCResponse, error)
	// Check ADBD job status.
	CheckADBDJobStatus(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedADBOverUSBServiceServer can be embedded to have forward compatible implementations.
type UnimplementedADBOverUSBServiceServer struct {
}

func (*UnimplementedADBOverUSBServiceServer) EnableUDC(ctx context.Context, req *EnableUDCRequest) (*EnableUDCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableUDC not implemented")
}
func (*UnimplementedADBOverUSBServiceServer) CheckADBDJobStatus(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckADBDJobStatus not implemented")
}

func RegisterADBOverUSBServiceServer(s *grpc.Server, srv ADBOverUSBServiceServer) {
	s.RegisterService(&_ADBOverUSBService_serviceDesc, srv)
}

func _ADBOverUSBService_EnableUDC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableUDCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ADBOverUSBServiceServer).EnableUDC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.arc.ADBOverUSBService/EnableUDC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ADBOverUSBServiceServer).EnableUDC(ctx, req.(*EnableUDCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ADBOverUSBService_CheckADBDJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ADBOverUSBServiceServer).CheckADBDJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.arc.ADBOverUSBService/CheckADBDJobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ADBOverUSBServiceServer).CheckADBDJobStatus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ADBOverUSBService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.arc.ADBOverUSBService",
	HandlerType: (*ADBOverUSBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnableUDC",
			Handler:    _ADBOverUSBService_EnableUDC_Handler,
		},
		{
			MethodName: "CheckADBDJobStatus",
			Handler:    _ADBOverUSBService_CheckADBDJobStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "adb_over_usb_service.proto",
}
