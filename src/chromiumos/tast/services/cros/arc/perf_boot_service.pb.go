// Code generated by protoc-gen-go. DO NOT EDIT.
// source: perf_boot_service.proto

package arc

import (
	perfpb "chromiumos/tast/common/perf/perfpb"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("perf_boot_service.proto", fileDescriptor_7e5cf6399dafe784) }

var fileDescriptor_7e5cf6399dafe784 = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0xd0, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x06, 0xe0, 0x7a, 0xf1, 0xb0, 0x58, 0x84, 0x45, 0x14, 0xd6, 0x83, 0x58, 0xef, 0x13, 0xd0,
	0x37, 0x68, 0x15, 0xc5, 0x53, 0x41, 0xaa, 0xe0, 0xa5, 0x64, 0xc3, 0x6c, 0x5d, 0xd8, 0xec, 0x1f,
	0x26, 0xb3, 0x15, 0x9f, 0xc8, 0xd7, 0x94, 0x24, 0xf6, 0xd8, 0x4b, 0x20, 0xc9, 0x9f, 0x2f, 0xfc,
	0x53, 0x5d, 0x05, 0x96, 0x6e, 0xdb, 0x02, 0xba, 0x8d, 0x2c, 0xfb, 0xde, 0x31, 0x05, 0x81, 0xa2,
	0x9e, 0xab, 0x8d, 0x4a, 0x4e, 0x10, 0xc9, 0x8a, 0x6b, 0xae, 0x77, 0xc0, 0x6e, 0x60, 0x93, 0x2f,
	0xdb, 0xa9, 0x33, 0xec, 0x83, 0xfe, 0x94, 0x6c, 0x73, 0xb6, 0xb7, 0xc3, 0xc4, 0xb1, 0xec, 0xee,
	0x7f, 0x4f, 0xaa, 0xf3, 0x35, 0x4b, 0xb7, 0x04, 0xf4, 0xad, 0x98, 0xf5, 0x4b, 0x75, 0xf1, 0x61,
	0x7b, 0xdd, 0x8c, 0xda, 0x0f, 0xab, 0xf5, 0x66, 0x05, 0x0c, 0x8f, 0xf8, 0x1e, 0xeb, 0x4b, 0x2a,
	0x2e, 0x1d, 0x5c, 0x7a, 0x4a, 0x6e, 0x73, 0xe4, 0x7c, 0x31, 0xab, 0x5f, 0xab, 0xf9, 0x33, 0x6b,
	0xf2, 0xdf, 0xf3, 0xa7, 0x47, 0x89, 0x1b, 0x2a, 0x0d, 0xe0, 0x3d, 0x46, 0x4a, 0x35, 0xf3, 0x12,
	0x5a, 0x2a, 0x0f, 0x17, 0xb3, 0xe5, 0xdd, 0xe7, 0xad, 0xfb, 0x12, 0xf8, 0x7e, 0xf2, 0x88, 0x26,
	0xc5, 0xcd, 0xff, 0x10, 0xa2, 0x49, 0xcd, 0x8d, 0x15, 0xd7, 0x9e, 0x66, 0xf7, 0xe1, 0x2f, 0x00,
	0x00, 0xff, 0xff, 0x96, 0x76, 0x04, 0xcf, 0x2a, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PerfBootServiceClient is the client API for PerfBootService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PerfBootServiceClient interface {
	// WaitUntilCPUCoolDown internally calls power.WaitUntilCPUCoolDown on DUT
	// and waits until CPU is cooled down.
	WaitUntilCPUCoolDown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetPerfValues signs in to DUT and measures Android boot performance metrics.
	GetPerfValues(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*perfpb.Values, error)
}

type perfBootServiceClient struct {
	cc *grpc.ClientConn
}

func NewPerfBootServiceClient(cc *grpc.ClientConn) PerfBootServiceClient {
	return &perfBootServiceClient{cc}
}

func (c *perfBootServiceClient) WaitUntilCPUCoolDown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.arc.PerfBootService/WaitUntilCPUCoolDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfBootServiceClient) GetPerfValues(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*perfpb.Values, error) {
	out := new(perfpb.Values)
	err := c.cc.Invoke(ctx, "/tast.cros.arc.PerfBootService/GetPerfValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PerfBootServiceServer is the server API for PerfBootService service.
type PerfBootServiceServer interface {
	// WaitUntilCPUCoolDown internally calls power.WaitUntilCPUCoolDown on DUT
	// and waits until CPU is cooled down.
	WaitUntilCPUCoolDown(context.Context, *empty.Empty) (*empty.Empty, error)
	// GetPerfValues signs in to DUT and measures Android boot performance metrics.
	GetPerfValues(context.Context, *empty.Empty) (*perfpb.Values, error)
}

// UnimplementedPerfBootServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPerfBootServiceServer struct {
}

func (*UnimplementedPerfBootServiceServer) WaitUntilCPUCoolDown(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitUntilCPUCoolDown not implemented")
}
func (*UnimplementedPerfBootServiceServer) GetPerfValues(ctx context.Context, req *empty.Empty) (*perfpb.Values, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerfValues not implemented")
}

func RegisterPerfBootServiceServer(s *grpc.Server, srv PerfBootServiceServer) {
	s.RegisterService(&_PerfBootService_serviceDesc, srv)
}

func _PerfBootService_WaitUntilCPUCoolDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfBootServiceServer).WaitUntilCPUCoolDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.arc.PerfBootService/WaitUntilCPUCoolDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfBootServiceServer).WaitUntilCPUCoolDown(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfBootService_GetPerfValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfBootServiceServer).GetPerfValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.arc.PerfBootService/GetPerfValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfBootServiceServer).GetPerfValues(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _PerfBootService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.arc.PerfBootService",
	HandlerType: (*PerfBootServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WaitUntilCPUCoolDown",
			Handler:    _PerfBootService_WaitUntilCPUCoolDown_Handler,
		},
		{
			MethodName: "GetPerfValues",
			Handler:    _PerfBootService_GetPerfValues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "perf_boot_service.proto",
}
