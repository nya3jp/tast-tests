// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gmscore_cache_service.proto

package arc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GmsCoreCacheRequest struct {
	// Specify which build is requested.
	VmEnabled            bool     `protobuf:"varint,1,opt,name=vm_enabled,json=vmEnabled,proto3" json:"vm_enabled,omitempty"`
	PackagesCopy         bool     `protobuf:"varint,2,opt,name=packages_copy,json=packagesCopy,proto3" json:"packages_copy,omitempty"`
	GmsCoreEnabled       bool     `protobuf:"varint,3,opt,name=gms_core_enabled,json=gmsCoreEnabled,proto3" json:"gms_core_enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GmsCoreCacheRequest) Reset()         { *m = GmsCoreCacheRequest{} }
func (m *GmsCoreCacheRequest) String() string { return proto.CompactTextString(m) }
func (*GmsCoreCacheRequest) ProtoMessage()    {}
func (*GmsCoreCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ccdc44cc9fc7270, []int{0}
}

func (m *GmsCoreCacheRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GmsCoreCacheRequest.Unmarshal(m, b)
}
func (m *GmsCoreCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GmsCoreCacheRequest.Marshal(b, m, deterministic)
}
func (m *GmsCoreCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GmsCoreCacheRequest.Merge(m, src)
}
func (m *GmsCoreCacheRequest) XXX_Size() int {
	return xxx_messageInfo_GmsCoreCacheRequest.Size(m)
}
func (m *GmsCoreCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GmsCoreCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GmsCoreCacheRequest proto.InternalMessageInfo

func (m *GmsCoreCacheRequest) GetVmEnabled() bool {
	if m != nil {
		return m.VmEnabled
	}
	return false
}

func (m *GmsCoreCacheRequest) GetPackagesCopy() bool {
	if m != nil {
		return m.PackagesCopy
	}
	return false
}

func (m *GmsCoreCacheRequest) GetGmsCoreEnabled() bool {
	if m != nil {
		return m.GmsCoreEnabled
	}
	return false
}

type GmsCoreCacheResponse struct {
	// Path to directory with caches.
	TargetDir string `protobuf:"bytes,1,opt,name=target_dir,json=targetDir,proto3" json:"target_dir,omitempty"`
	// Name of packages cache.
	PackagesCacheName string `protobuf:"bytes,2,opt,name=packages_cache_name,json=packagesCacheName,proto3" json:"packages_cache_name,omitempty"`
	//Name of GMS Core caches packed to tar file.
	GmsCoreCacheName string `protobuf:"bytes,3,opt,name=gms_core_cache_name,json=gmsCoreCacheName,proto3" json:"gms_core_cache_name,omitempty"`
	//Name of GMS Core manifest file.
	GmsCoreManifestName string `protobuf:"bytes,4,opt,name=gms_core_manifest_name,json=gmsCoreManifestName,proto3" json:"gms_core_manifest_name,omitempty"`
	// Name of GSF cache.
	GsfCacheName         string   `protobuf:"bytes,5,opt,name=gsf_cache_name,json=gsfCacheName,proto3" json:"gsf_cache_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GmsCoreCacheResponse) Reset()         { *m = GmsCoreCacheResponse{} }
func (m *GmsCoreCacheResponse) String() string { return proto.CompactTextString(m) }
func (*GmsCoreCacheResponse) ProtoMessage()    {}
func (*GmsCoreCacheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ccdc44cc9fc7270, []int{1}
}

func (m *GmsCoreCacheResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GmsCoreCacheResponse.Unmarshal(m, b)
}
func (m *GmsCoreCacheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GmsCoreCacheResponse.Marshal(b, m, deterministic)
}
func (m *GmsCoreCacheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GmsCoreCacheResponse.Merge(m, src)
}
func (m *GmsCoreCacheResponse) XXX_Size() int {
	return xxx_messageInfo_GmsCoreCacheResponse.Size(m)
}
func (m *GmsCoreCacheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GmsCoreCacheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GmsCoreCacheResponse proto.InternalMessageInfo

func (m *GmsCoreCacheResponse) GetTargetDir() string {
	if m != nil {
		return m.TargetDir
	}
	return ""
}

func (m *GmsCoreCacheResponse) GetPackagesCacheName() string {
	if m != nil {
		return m.PackagesCacheName
	}
	return ""
}

func (m *GmsCoreCacheResponse) GetGmsCoreCacheName() string {
	if m != nil {
		return m.GmsCoreCacheName
	}
	return ""
}

func (m *GmsCoreCacheResponse) GetGmsCoreManifestName() string {
	if m != nil {
		return m.GmsCoreManifestName
	}
	return ""
}

func (m *GmsCoreCacheResponse) GetGsfCacheName() string {
	if m != nil {
		return m.GsfCacheName
	}
	return ""
}

func init() {
	proto.RegisterType((*GmsCoreCacheRequest)(nil), "tast.cros.arc.GmsCoreCacheRequest")
	proto.RegisterType((*GmsCoreCacheResponse)(nil), "tast.cros.arc.GmsCoreCacheResponse")
}

func init() { proto.RegisterFile("gmscore_cache_service.proto", fileDescriptor_7ccdc44cc9fc7270) }

var fileDescriptor_7ccdc44cc9fc7270 = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xc1, 0x4e, 0xf2, 0x40,
	0x10, 0xc7, 0xbf, 0x7e, 0xa8, 0xa1, 0x1b, 0x20, 0xb8, 0x35, 0x86, 0x68, 0x4c, 0xb4, 0x78, 0xe0,
	0x62, 0x9b, 0xc8, 0x1b, 0x88, 0x86, 0x93, 0x1e, 0x6a, 0xbc, 0x78, 0x69, 0x96, 0x65, 0x58, 0x1a,
	0xd9, 0x6e, 0x9d, 0x59, 0x48, 0x38, 0xfb, 0xc0, 0xbe, 0x82, 0xe9, 0xb6, 0x56, 0x48, 0x8c, 0xd7,
	0x99, 0xdf, 0x7f, 0xfa, 0xeb, 0xce, 0xb0, 0x73, 0xa5, 0x49, 0x1a, 0x84, 0x54, 0x0a, 0xb9, 0x84,
	0x94, 0x00, 0x37, 0x99, 0x84, 0xa8, 0x40, 0x63, 0x0d, 0xef, 0x5a, 0x41, 0x36, 0x92, 0x68, 0x28,
	0x12, 0x28, 0xc3, 0x0f, 0x8f, 0x05, 0x53, 0x4d, 0x13, 0x83, 0x30, 0x29, 0xe9, 0x04, 0xde, 0xd7,
	0x40, 0x96, 0x5f, 0x30, 0xb6, 0xd1, 0x29, 0xe4, 0x62, 0xb6, 0x82, 0xf9, 0xc0, 0xbb, 0xf4, 0x46,
	0xed, 0xc4, 0xdf, 0xe8, 0x87, 0xaa, 0xc0, 0x87, 0xac, 0x5b, 0x08, 0xf9, 0x26, 0x14, 0x50, 0x2a,
	0x4d, 0xb1, 0x1d, 0xfc, 0x77, 0x44, 0xe7, 0xbb, 0x38, 0x31, 0xc5, 0x96, 0x8f, 0x58, 0x5f, 0xe9,
	0xb2, 0x8f, 0xd0, 0x4c, 0x6a, 0x39, 0xae, 0xa7, 0xaa, 0x4f, 0xd6, 0xe3, 0xc2, 0x4f, 0x8f, 0x9d,
	0xec, 0x5b, 0x50, 0x61, 0x72, 0x82, 0x52, 0xc3, 0x0a, 0x54, 0x60, 0xd3, 0x79, 0x86, 0x4e, 0xc3,
	0x4f, 0xfc, 0xaa, 0x72, 0x9f, 0x21, 0x8f, 0x58, 0xf0, 0xa3, 0xe1, 0x7e, 0x36, 0x17, 0x1a, 0x9c,
	0x8c, 0x9f, 0x1c, 0x37, 0x32, 0x65, 0xe7, 0x49, 0x68, 0xe0, 0x37, 0x2c, 0x68, 0x8c, 0x76, 0xf8,
	0x96, 0xe3, 0xfb, 0x6a, 0xc7, 0xc0, 0xe1, 0x63, 0x76, 0xda, 0xe0, 0x5a, 0xe4, 0xd9, 0x02, 0xc8,
	0x56, 0x89, 0x03, 0x97, 0x08, 0xea, 0xc4, 0x63, 0xdd, 0x73, 0xa1, 0x6b, 0xd6, 0x53, 0xb4, 0xd8,
	0x1d, 0x7f, 0xe8, 0xe0, 0x8e, 0xa2, 0x45, 0x33, 0xfa, 0x76, 0xb5, 0xff, 0xec, 0xcf, 0xd5, 0x8e,
	0xf8, 0x0b, 0x6b, 0x4f, 0x21, 0x07, 0x14, 0x16, 0x78, 0x18, 0xed, 0xad, 0x2a, 0xfa, 0x65, 0x4d,
	0x67, 0xc3, 0x3f, 0x99, 0xea, 0x11, 0xc3, 0x7f, 0x77, 0xc3, 0xd7, 0x2b, 0xb9, 0x44, 0xa3, 0xb3,
	0xb5, 0x36, 0x14, 0x97, 0x91, 0xb8, 0xbe, 0x0a, 0x8a, 0xcb, 0x6c, 0x2c, 0x50, 0xce, 0x8e, 0xdc,
	0x81, 0x8c, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xfd, 0xa4, 0x4f, 0x17, 0x3f, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GmsCoreCacheServiceClient is the client API for GmsCoreCacheService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GmsCoreCacheServiceClient interface {
	// Generate generates GMS Core and GFS caches.
	Generate(ctx context.Context, in *GmsCoreCacheRequest, opts ...grpc.CallOption) (*GmsCoreCacheResponse, error)
}

type gmsCoreCacheServiceClient struct {
	cc *grpc.ClientConn
}

func NewGmsCoreCacheServiceClient(cc *grpc.ClientConn) GmsCoreCacheServiceClient {
	return &gmsCoreCacheServiceClient{cc}
}

func (c *gmsCoreCacheServiceClient) Generate(ctx context.Context, in *GmsCoreCacheRequest, opts ...grpc.CallOption) (*GmsCoreCacheResponse, error) {
	out := new(GmsCoreCacheResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.arc.GmsCoreCacheService/Generate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GmsCoreCacheServiceServer is the server API for GmsCoreCacheService service.
type GmsCoreCacheServiceServer interface {
	// Generate generates GMS Core and GFS caches.
	Generate(context.Context, *GmsCoreCacheRequest) (*GmsCoreCacheResponse, error)
}

// UnimplementedGmsCoreCacheServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGmsCoreCacheServiceServer struct {
}

func (*UnimplementedGmsCoreCacheServiceServer) Generate(ctx context.Context, req *GmsCoreCacheRequest) (*GmsCoreCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}

func RegisterGmsCoreCacheServiceServer(s *grpc.Server, srv GmsCoreCacheServiceServer) {
	s.RegisterService(&_GmsCoreCacheService_serviceDesc, srv)
}

func _GmsCoreCacheService_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GmsCoreCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmsCoreCacheServiceServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.arc.GmsCoreCacheService/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmsCoreCacheServiceServer).Generate(ctx, req.(*GmsCoreCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GmsCoreCacheService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.arc.GmsCoreCacheService",
	HandlerType: (*GmsCoreCacheServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _GmsCoreCacheService_Generate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gmscore_cache_service.proto",
}
