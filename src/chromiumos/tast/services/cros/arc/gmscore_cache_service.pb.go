// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: gmscore_cache_service.proto

package arc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GmsCoreCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set, PackagesCopy is requested. Otherwise, requests PackageSkipCopy.
	PackagesCacheEnabled bool `protobuf:"varint,1,opt,name=packages_cache_enabled,json=packagesCacheEnabled,proto3" json:"packages_cache_enabled,omitempty"`
	// If set, GMSCoreEnabled is requested. Otherwise, requests GMSCoreDisabled.
	GmsCoreEnabled bool `protobuf:"varint,2,opt,name=gms_core_enabled,json=gmsCoreEnabled,proto3" json:"gms_core_enabled,omitempty"`
}

func (x *GmsCoreCacheRequest) Reset() {
	*x = GmsCoreCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gmscore_cache_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GmsCoreCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GmsCoreCacheRequest) ProtoMessage() {}

func (x *GmsCoreCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gmscore_cache_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GmsCoreCacheRequest.ProtoReflect.Descriptor instead.
func (*GmsCoreCacheRequest) Descriptor() ([]byte, []int) {
	return file_gmscore_cache_service_proto_rawDescGZIP(), []int{0}
}

func (x *GmsCoreCacheRequest) GetPackagesCacheEnabled() bool {
	if x != nil {
		return x.PackagesCacheEnabled
	}
	return false
}

func (x *GmsCoreCacheRequest) GetGmsCoreEnabled() bool {
	if x != nil {
		return x.GmsCoreEnabled
	}
	return false
}

type GmsCoreCacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path to directory with caches.
	TargetDir string `protobuf:"bytes,1,opt,name=target_dir,json=targetDir,proto3" json:"target_dir,omitempty"`
	// Name of packages cache.
	PackagesCacheName string `protobuf:"bytes,2,opt,name=packages_cache_name,json=packagesCacheName,proto3" json:"packages_cache_name,omitempty"`
	//Name of GMS Core caches packed to tar file.
	GmsCoreCacheName string `protobuf:"bytes,3,opt,name=gms_core_cache_name,json=gmsCoreCacheName,proto3" json:"gms_core_cache_name,omitempty"`
	//Name of GMS Core manifest file.
	GmsCoreManifestName string `protobuf:"bytes,4,opt,name=gms_core_manifest_name,json=gmsCoreManifestName,proto3" json:"gms_core_manifest_name,omitempty"`
	// Name of GSF cache.
	GsfCacheName string `protobuf:"bytes,5,opt,name=gsf_cache_name,json=gsfCacheName,proto3" json:"gsf_cache_name,omitempty"`
	// Name of generated packages cache.
	GeneratedPackagesCacheName string `protobuf:"bytes,6,opt,name=generated_packages_cache_name,json=generatedPackagesCacheName,proto3" json:"generated_packages_cache_name,omitempty"`
}

func (x *GmsCoreCacheResponse) Reset() {
	*x = GmsCoreCacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gmscore_cache_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GmsCoreCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GmsCoreCacheResponse) ProtoMessage() {}

func (x *GmsCoreCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gmscore_cache_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GmsCoreCacheResponse.ProtoReflect.Descriptor instead.
func (*GmsCoreCacheResponse) Descriptor() ([]byte, []int) {
	return file_gmscore_cache_service_proto_rawDescGZIP(), []int{1}
}

func (x *GmsCoreCacheResponse) GetTargetDir() string {
	if x != nil {
		return x.TargetDir
	}
	return ""
}

func (x *GmsCoreCacheResponse) GetPackagesCacheName() string {
	if x != nil {
		return x.PackagesCacheName
	}
	return ""
}

func (x *GmsCoreCacheResponse) GetGmsCoreCacheName() string {
	if x != nil {
		return x.GmsCoreCacheName
	}
	return ""
}

func (x *GmsCoreCacheResponse) GetGmsCoreManifestName() string {
	if x != nil {
		return x.GmsCoreManifestName
	}
	return ""
}

func (x *GmsCoreCacheResponse) GetGsfCacheName() string {
	if x != nil {
		return x.GsfCacheName
	}
	return ""
}

func (x *GmsCoreCacheResponse) GetGeneratedPackagesCacheName() string {
	if x != nil {
		return x.GeneratedPackagesCacheName
	}
	return ""
}

var File_gmscore_cache_service_proto protoreflect.FileDescriptor

var file_gmscore_cache_service_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x67, 0x6d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x74,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x22, 0x75, 0x0a, 0x13,
	0x47, 0x6d, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6d, 0x73,
	0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x67, 0x6d, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x22, 0xb2, 0x02, 0x0a, 0x14, 0x47, 0x6d, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x69, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x67,
	0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x6d, 0x73, 0x43, 0x6f, 0x72,
	0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x67, 0x6d,
	0x73, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x67, 0x6d, 0x73, 0x43,
	0x6f, 0x72, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x67, 0x73, 0x66, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x73, 0x66, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x6c, 0x0a, 0x13, 0x47, 0x6d, 0x73, 0x43,
	0x6f, 0x72, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x55, 0x0a, 0x08, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x74, 0x61,
	0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x2e, 0x47, 0x6d, 0x73, 0x43,
	0x6f, 0x72, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x2e,
	0x47, 0x6d, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x23, 0x5a, 0x21, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69,
	0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x61, 0x72, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_gmscore_cache_service_proto_rawDescOnce sync.Once
	file_gmscore_cache_service_proto_rawDescData = file_gmscore_cache_service_proto_rawDesc
)

func file_gmscore_cache_service_proto_rawDescGZIP() []byte {
	file_gmscore_cache_service_proto_rawDescOnce.Do(func() {
		file_gmscore_cache_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_gmscore_cache_service_proto_rawDescData)
	})
	return file_gmscore_cache_service_proto_rawDescData
}

var file_gmscore_cache_service_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_gmscore_cache_service_proto_goTypes = []interface{}{
	(*GmsCoreCacheRequest)(nil),  // 0: tast.cros.arc.GmsCoreCacheRequest
	(*GmsCoreCacheResponse)(nil), // 1: tast.cros.arc.GmsCoreCacheResponse
}
var file_gmscore_cache_service_proto_depIdxs = []int32{
	0, // 0: tast.cros.arc.GmsCoreCacheService.Generate:input_type -> tast.cros.arc.GmsCoreCacheRequest
	1, // 1: tast.cros.arc.GmsCoreCacheService.Generate:output_type -> tast.cros.arc.GmsCoreCacheResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_gmscore_cache_service_proto_init() }
func file_gmscore_cache_service_proto_init() {
	if File_gmscore_cache_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gmscore_cache_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GmsCoreCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gmscore_cache_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GmsCoreCacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gmscore_cache_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gmscore_cache_service_proto_goTypes,
		DependencyIndexes: file_gmscore_cache_service_proto_depIdxs,
		MessageInfos:      file_gmscore_cache_service_proto_msgTypes,
	}.Build()
	File_gmscore_cache_service_proto = out.File
	file_gmscore_cache_service_proto_rawDesc = nil
	file_gmscore_cache_service_proto_goTypes = nil
	file_gmscore_cache_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GmsCoreCacheServiceClient is the client API for GmsCoreCacheService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GmsCoreCacheServiceClient interface {
	// Generate generates GMS Core and GFS caches.
	Generate(ctx context.Context, in *GmsCoreCacheRequest, opts ...grpc.CallOption) (*GmsCoreCacheResponse, error)
}

type gmsCoreCacheServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGmsCoreCacheServiceClient(cc grpc.ClientConnInterface) GmsCoreCacheServiceClient {
	return &gmsCoreCacheServiceClient{cc}
}

func (c *gmsCoreCacheServiceClient) Generate(ctx context.Context, in *GmsCoreCacheRequest, opts ...grpc.CallOption) (*GmsCoreCacheResponse, error) {
	out := new(GmsCoreCacheResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.arc.GmsCoreCacheService/Generate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GmsCoreCacheServiceServer is the server API for GmsCoreCacheService service.
type GmsCoreCacheServiceServer interface {
	// Generate generates GMS Core and GFS caches.
	Generate(context.Context, *GmsCoreCacheRequest) (*GmsCoreCacheResponse, error)
}

// UnimplementedGmsCoreCacheServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGmsCoreCacheServiceServer struct {
}

func (*UnimplementedGmsCoreCacheServiceServer) Generate(context.Context, *GmsCoreCacheRequest) (*GmsCoreCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}

func RegisterGmsCoreCacheServiceServer(s *grpc.Server, srv GmsCoreCacheServiceServer) {
	s.RegisterService(&_GmsCoreCacheService_serviceDesc, srv)
}

func _GmsCoreCacheService_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GmsCoreCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmsCoreCacheServiceServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.arc.GmsCoreCacheService/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmsCoreCacheServiceServer).Generate(ctx, req.(*GmsCoreCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GmsCoreCacheService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.arc.GmsCoreCacheService",
	HandlerType: (*GmsCoreCacheServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _GmsCoreCacheService_Generate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gmscore_cache_service.proto",
}
