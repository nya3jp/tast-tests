// Copyright 2022 The ChromiumOS Authors.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: power_perf_service.proto

package arc

import (
	perfpb "chromiumos/tast/common/perf/perfpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_power_perf_service_proto protoreflect.FileDescriptor

var file_power_perf_service_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x74, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x32, 0x9e, 0x02, 0x0a, 0x10, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x65,
	0x72, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0f, 0x53, 0x74,
	0x6f, 0x70, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x70, 0x62, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x07, 0x43, 0x6c, 0x65, 0x61,
	0x6e, 0x75, 0x70, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x23, 0x5a, 0x21, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75,
	0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x61, 0x72, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var file_power_perf_service_proto_goTypes = []interface{}{
	(*emptypb.Empty)(nil), // 0: google.protobuf.Empty
	(*perfpb.Values)(nil), // 1: tast.common.perf.perfpb.Values
}
var file_power_perf_service_proto_depIdxs = []int32{
	0, // 0: tast.cros.arc.PowerPerfService.Setup:input_type -> google.protobuf.Empty
	0, // 1: tast.cros.arc.PowerPerfService.StartMeasurement:input_type -> google.protobuf.Empty
	0, // 2: tast.cros.arc.PowerPerfService.StopMeasurement:input_type -> google.protobuf.Empty
	0, // 3: tast.cros.arc.PowerPerfService.Cleanup:input_type -> google.protobuf.Empty
	0, // 4: tast.cros.arc.PowerPerfService.Setup:output_type -> google.protobuf.Empty
	0, // 5: tast.cros.arc.PowerPerfService.StartMeasurement:output_type -> google.protobuf.Empty
	1, // 6: tast.cros.arc.PowerPerfService.StopMeasurement:output_type -> tast.common.perf.perfpb.Values
	0, // 7: tast.cros.arc.PowerPerfService.Cleanup:output_type -> google.protobuf.Empty
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_power_perf_service_proto_init() }
func file_power_perf_service_proto_init() {
	if File_power_perf_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_power_perf_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_power_perf_service_proto_goTypes,
		DependencyIndexes: file_power_perf_service_proto_depIdxs,
	}.Build()
	File_power_perf_service_proto = out.File
	file_power_perf_service_proto_rawDesc = nil
	file_power_perf_service_proto_goTypes = nil
	file_power_perf_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PowerPerfServiceClient is the client API for PowerPerfService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PowerPerfServiceClient interface {
	Setup(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StartMeasurement(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StopMeasurement(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*perfpb.Values, error)
	Cleanup(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type powerPerfServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPowerPerfServiceClient(cc grpc.ClientConnInterface) PowerPerfServiceClient {
	return &powerPerfServiceClient{cc}
}

func (c *powerPerfServiceClient) Setup(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.arc.PowerPerfService/Setup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerPerfServiceClient) StartMeasurement(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.arc.PowerPerfService/StartMeasurement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerPerfServiceClient) StopMeasurement(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*perfpb.Values, error) {
	out := new(perfpb.Values)
	err := c.cc.Invoke(ctx, "/tast.cros.arc.PowerPerfService/StopMeasurement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerPerfServiceClient) Cleanup(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.arc.PowerPerfService/Cleanup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PowerPerfServiceServer is the server API for PowerPerfService service.
type PowerPerfServiceServer interface {
	Setup(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	StartMeasurement(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	StopMeasurement(context.Context, *emptypb.Empty) (*perfpb.Values, error)
	Cleanup(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
}

// UnimplementedPowerPerfServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPowerPerfServiceServer struct {
}

func (*UnimplementedPowerPerfServiceServer) Setup(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Setup not implemented")
}
func (*UnimplementedPowerPerfServiceServer) StartMeasurement(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMeasurement not implemented")
}
func (*UnimplementedPowerPerfServiceServer) StopMeasurement(context.Context, *emptypb.Empty) (*perfpb.Values, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopMeasurement not implemented")
}
func (*UnimplementedPowerPerfServiceServer) Cleanup(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cleanup not implemented")
}

func RegisterPowerPerfServiceServer(s *grpc.Server, srv PowerPerfServiceServer) {
	s.RegisterService(&_PowerPerfService_serviceDesc, srv)
}

func _PowerPerfService_Setup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerPerfServiceServer).Setup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.arc.PowerPerfService/Setup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerPerfServiceServer).Setup(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerPerfService_StartMeasurement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerPerfServiceServer).StartMeasurement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.arc.PowerPerfService/StartMeasurement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerPerfServiceServer).StartMeasurement(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerPerfService_StopMeasurement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerPerfServiceServer).StopMeasurement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.arc.PowerPerfService/StopMeasurement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerPerfServiceServer).StopMeasurement(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerPerfService_Cleanup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerPerfServiceServer).Cleanup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.arc.PowerPerfService/Cleanup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerPerfServiceServer).Cleanup(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _PowerPerfService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.arc.PowerPerfService",
	HandlerType: (*PowerPerfServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Setup",
			Handler:    _PowerPerfService_Setup_Handler,
		},
		{
			MethodName: "StartMeasurement",
			Handler:    _PowerPerfService_StartMeasurement_Handler,
		},
		{
			MethodName: "StopMeasurement",
			Handler:    _PowerPerfService_StopMeasurement_Handler,
		},
		{
			MethodName: "Cleanup",
			Handler:    _PowerPerfService_Cleanup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "power_perf_service.proto",
}
