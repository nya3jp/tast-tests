// Code generated by protoc-gen-go. DO NOT EDIT.
// source: freeze_fuse_service.proto

package filemanager

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TestMountZipAndSuspendRequest struct {
	User                 string   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	ZipDataPath          string   `protobuf:"bytes,3,opt,name=zip_data_path,json=zipDataPath,proto3" json:"zip_data_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestMountZipAndSuspendRequest) Reset()         { *m = TestMountZipAndSuspendRequest{} }
func (m *TestMountZipAndSuspendRequest) String() string { return proto.CompactTextString(m) }
func (*TestMountZipAndSuspendRequest) ProtoMessage()    {}
func (*TestMountZipAndSuspendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae5d0c4068efca20, []int{0}
}

func (m *TestMountZipAndSuspendRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestMountZipAndSuspendRequest.Unmarshal(m, b)
}
func (m *TestMountZipAndSuspendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestMountZipAndSuspendRequest.Marshal(b, m, deterministic)
}
func (m *TestMountZipAndSuspendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestMountZipAndSuspendRequest.Merge(m, src)
}
func (m *TestMountZipAndSuspendRequest) XXX_Size() int {
	return xxx_messageInfo_TestMountZipAndSuspendRequest.Size(m)
}
func (m *TestMountZipAndSuspendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TestMountZipAndSuspendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TestMountZipAndSuspendRequest proto.InternalMessageInfo

func (m *TestMountZipAndSuspendRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *TestMountZipAndSuspendRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *TestMountZipAndSuspendRequest) GetZipDataPath() string {
	if m != nil {
		return m.ZipDataPath
	}
	return ""
}

func init() {
	proto.RegisterType((*TestMountZipAndSuspendRequest)(nil), "tast.cros.filemanager.TestMountZipAndSuspendRequest")
}

func init() { proto.RegisterFile("freeze_fuse_service.proto", fileDescriptor_ae5d0c4068efca20) }

var fileDescriptor_ae5d0c4068efca20 = []byte{
	// 262 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x41, 0x4b, 0xc4, 0x30,
	0x10, 0x85, 0x5d, 0x15, 0xd1, 0x88, 0x07, 0x03, 0x2e, 0xb5, 0x22, 0x48, 0x4f, 0x8a, 0x90, 0x80,
	0xfa, 0x07, 0x14, 0x77, 0x6f, 0x82, 0x6c, 0xf5, 0xb2, 0x97, 0x92, 0x6d, 0xa7, 0x6d, 0x60, 0xdb,
	0xc4, 0xcc, 0x44, 0xb1, 0xe0, 0x7f, 0x97, 0xa6, 0x2a, 0x1e, 0xca, 0xde, 0x92, 0xe1, 0xbd, 0x79,
	0xef, 0x1b, 0x76, 0x5a, 0x3a, 0x80, 0x0e, 0xb2, 0xd2, 0x23, 0x64, 0x08, 0xee, 0x5d, 0xe7, 0x20,
	0xac, 0x33, 0x64, 0xf8, 0x09, 0x29, 0x24, 0x91, 0x3b, 0x83, 0xa2, 0xd4, 0x6b, 0x68, 0x54, 0xab,
	0x2a, 0x70, 0xf1, 0x59, 0x65, 0x4c, 0xb5, 0x06, 0x19, 0x44, 0x2b, 0x5f, 0x4a, 0x68, 0x2c, 0x7d,
	0x0e, 0x9e, 0x04, 0xd9, 0xf9, 0x0b, 0x20, 0x3d, 0x19, 0xdf, 0xd2, 0x52, 0xdb, 0xfb, 0xb6, 0x48,
	0x3d, 0x5a, 0x68, 0x8b, 0x05, 0xbc, 0x79, 0x40, 0xe2, 0x9c, 0xed, 0x7a, 0x04, 0x17, 0x4d, 0x2e,
	0x26, 0x97, 0x07, 0x8b, 0xf0, 0xe6, 0x31, 0xdb, 0xb7, 0x0a, 0xf1, 0xc3, 0xb8, 0x22, 0xda, 0x0e,
	0xf3, 0xbf, 0x3f, 0x4f, 0xd8, 0x51, 0xa7, 0x6d, 0x56, 0x28, 0x52, 0x99, 0x55, 0x54, 0x47, 0x3b,
	0x41, 0x70, 0xd8, 0x69, 0xfb, 0xa8, 0x48, 0x3d, 0x2b, 0xaa, 0x6f, 0xbe, 0xd8, 0xf1, 0x3c, 0x50,
	0xcc, 0x5f, 0xd3, 0x59, 0x3a, 0x30, 0xf0, 0x9a, 0x4d, 0xc7, 0x9b, 0xf0, 0x3b, 0x31, 0x0a, 0x26,
	0x36, 0x16, 0x8f, 0xa7, 0x62, 0xe0, 0x16, 0xbf, 0xdc, 0x62, 0xd6, 0x73, 0x27, 0x5b, 0x0f, 0xd7,
	0xcb, 0xab, 0xbc, 0x76, 0xa6, 0xd1, 0xbe, 0x31, 0x28, 0xfb, 0xdd, 0xf2, 0xe7, 0x90, 0x28, 0xfb,
	0x10, 0xf9, 0x2f, 0x64, 0xb5, 0x17, 0xec, 0xb7, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x3f,
	0x7d, 0x30, 0x78, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FreezeFUSEServiceClient is the client API for FreezeFUSEService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FreezeFUSEServiceClient interface {
	TestMountZipAndSuspend(ctx context.Context, in *TestMountZipAndSuspendRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type freezeFUSEServiceClient struct {
	cc *grpc.ClientConn
}

func NewFreezeFUSEServiceClient(cc *grpc.ClientConn) FreezeFUSEServiceClient {
	return &freezeFUSEServiceClient{cc}
}

func (c *freezeFUSEServiceClient) TestMountZipAndSuspend(ctx context.Context, in *TestMountZipAndSuspendRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.filemanager.FreezeFUSEService/TestMountZipAndSuspend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FreezeFUSEServiceServer is the server API for FreezeFUSEService service.
type FreezeFUSEServiceServer interface {
	TestMountZipAndSuspend(context.Context, *TestMountZipAndSuspendRequest) (*empty.Empty, error)
}

// UnimplementedFreezeFUSEServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFreezeFUSEServiceServer struct {
}

func (*UnimplementedFreezeFUSEServiceServer) TestMountZipAndSuspend(ctx context.Context, req *TestMountZipAndSuspendRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestMountZipAndSuspend not implemented")
}

func RegisterFreezeFUSEServiceServer(s *grpc.Server, srv FreezeFUSEServiceServer) {
	s.RegisterService(&_FreezeFUSEService_serviceDesc, srv)
}

func _FreezeFUSEService_TestMountZipAndSuspend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestMountZipAndSuspendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreezeFUSEServiceServer).TestMountZipAndSuspend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.filemanager.FreezeFUSEService/TestMountZipAndSuspend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreezeFUSEServiceServer).TestMountZipAndSuspend(ctx, req.(*TestMountZipAndSuspendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FreezeFUSEService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.filemanager.FreezeFUSEService",
	HandlerType: (*FreezeFUSEServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestMountZipAndSuspend",
			Handler:    _FreezeFUSEService_TestMountZipAndSuspend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "freeze_fuse_service.proto",
}
