// Code generated by protoc-gen-go. DO NOT EDIT.
// source: screenshot_service.proto

package graphics

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("screenshot_service.proto", fileDescriptor_75bfd2a325c3ba85) }

var fileDescriptor_75bfd2a325c3ba85 = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0xce, 0x3f, 0xcb, 0xc2, 0x40,
	0x0c, 0xc7, 0xf1, 0xed, 0x19, 0xba, 0x3d, 0x37, 0x14, 0xa9, 0xbb, 0x38, 0x25, 0xa0, 0xaf, 0xc0,
	0x7f, 0xe0, 0xde, 0x4d, 0x10, 0x69, 0xcf, 0xd8, 0x16, 0xda, 0xe6, 0x48, 0x52, 0xc1, 0x77, 0x2f,
	0xed, 0x59, 0x37, 0xd7, 0xbb, 0xfc, 0x3e, 0x7c, 0x93, 0x85, 0x7a, 0x21, 0xea, 0xb5, 0x66, 0xbb,
	0x29, 0xc9, 0xb3, 0xf1, 0x04, 0x41, 0xd8, 0xd8, 0x39, 0x2b, 0xd4, 0xc0, 0x0b, 0x2b, 0x54, 0x52,
	0x84, 0xba, 0xf1, 0x9a, 0x2d, 0x2b, 0xe6, 0xaa, 0x25, 0x9c, 0x2e, 0xca, 0xe1, 0x81, 0xd4, 0x05,
	0x7b, 0xc5, 0xc1, 0xe6, 0x9a, 0xfc, 0xe7, 0x5f, 0x2c, 0x8f, 0x96, 0x3b, 0x27, 0xe9, 0xa1, 0x08,
	0x36, 0x08, 0xc5, 0xbf, 0x5d, 0x7f, 0x3f, 0x52, 0x4b, 0x46, 0x2e, 0x85, 0x88, 0xc1, 0x8c, 0xc1,
	0x69, 0xc4, 0xb2, 0x1f, 0xef, 0xfb, 0xf5, 0x65, 0xe5, 0x6b, 0xe1, 0xae, 0x19, 0x3a, 0x56, 0x1c,
	0xe3, 0xf0, 0x13, 0xac, 0x38, 0x56, 0xe2, 0x5c, 0x59, 0xfe, 0x4d, 0xcb, 0xed, 0x3b, 0x00, 0x00,
	0xff, 0xff, 0x7b, 0x3f, 0x47, 0xde, 0xdc, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ScreenshotServiceClient is the client API for ScreenshotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScreenshotServiceClient interface {
	// CaptureScreenAndDelete captures a temporary screenshot, and deletes it immediately.
	CaptureScreenAndDelete(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type screenshotServiceClient struct {
	cc *grpc.ClientConn
}

func NewScreenshotServiceClient(cc *grpc.ClientConn) ScreenshotServiceClient {
	return &screenshotServiceClient{cc}
}

func (c *screenshotServiceClient) CaptureScreenAndDelete(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.graphics.ScreenshotService/CaptureScreenAndDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScreenshotServiceServer is the server API for ScreenshotService service.
type ScreenshotServiceServer interface {
	// CaptureScreenAndDelete captures a temporary screenshot, and deletes it immediately.
	CaptureScreenAndDelete(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedScreenshotServiceServer can be embedded to have forward compatible implementations.
type UnimplementedScreenshotServiceServer struct {
}

func (*UnimplementedScreenshotServiceServer) CaptureScreenAndDelete(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptureScreenAndDelete not implemented")
}

func RegisterScreenshotServiceServer(s *grpc.Server, srv ScreenshotServiceServer) {
	s.RegisterService(&_ScreenshotService_serviceDesc, srv)
}

func _ScreenshotService_CaptureScreenAndDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScreenshotServiceServer).CaptureScreenAndDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.graphics.ScreenshotService/CaptureScreenAndDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScreenshotServiceServer).CaptureScreenAndDelete(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ScreenshotService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.graphics.ScreenshotService",
	HandlerType: (*ScreenshotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CaptureScreenAndDelete",
			Handler:    _ScreenshotService_CaptureScreenAndDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "screenshot_service.proto",
}
