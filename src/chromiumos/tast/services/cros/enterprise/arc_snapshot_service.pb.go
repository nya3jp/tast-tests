// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: arc_snapshot_service.proto

package enterprise

import (
	perfpb "chromiumos/tast/common/perf/perfpb"
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnrollRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Pass string `protobuf:"bytes,2,opt,name=pass,proto3" json:"pass,omitempty"`
}

func (x *EnrollRequest) Reset() {
	*x = EnrollRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arc_snapshot_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrollRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrollRequest) ProtoMessage() {}

func (x *EnrollRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arc_snapshot_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrollRequest.ProtoReflect.Descriptor instead.
func (*EnrollRequest) Descriptor() ([]byte, []int) {
	return file_arc_snapshot_service_proto_rawDescGZIP(), []int{0}
}

func (x *EnrollRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *EnrollRequest) GetPass() string {
	if x != nil {
		return x.Pass
	}
	return ""
}

type WaitForPackagesInMgsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	User       string   `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Packages   []string `protobuf:"bytes,3,rep,name=packages,proto3" json:"packages,omitempty"`
	IsHeadless bool     `protobuf:"varint,4,opt,name=is_headless,json=isHeadless,proto3" json:"is_headless,omitempty"`
}

func (x *WaitForPackagesInMgsRequest) Reset() {
	*x = WaitForPackagesInMgsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arc_snapshot_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForPackagesInMgsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForPackagesInMgsRequest) ProtoMessage() {}

func (x *WaitForPackagesInMgsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arc_snapshot_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForPackagesInMgsRequest.ProtoReflect.Descriptor instead.
func (*WaitForPackagesInMgsRequest) Descriptor() ([]byte, []int) {
	return file_arc_snapshot_service_proto_rawDescGZIP(), []int{1}
}

func (x *WaitForPackagesInMgsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WaitForPackagesInMgsRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *WaitForPackagesInMgsRequest) GetPackages() []string {
	if x != nil {
		return x.Packages
	}
	return nil
}

func (x *WaitForPackagesInMgsRequest) GetIsHeadless() bool {
	if x != nil {
		return x.IsHeadless
	}
	return false
}

type WaitForPackagesInMgsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User string         `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Perf *perfpb.Values `protobuf:"bytes,2,opt,name=perf,proto3" json:"perf,omitempty"`
}

func (x *WaitForPackagesInMgsResponse) Reset() {
	*x = WaitForPackagesInMgsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arc_snapshot_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForPackagesInMgsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForPackagesInMgsResponse) ProtoMessage() {}

func (x *WaitForPackagesInMgsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arc_snapshot_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForPackagesInMgsResponse.ProtoReflect.Descriptor instead.
func (*WaitForPackagesInMgsResponse) Descriptor() ([]byte, []int) {
	return file_arc_snapshot_service_proto_rawDescGZIP(), []int{2}
}

func (x *WaitForPackagesInMgsResponse) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *WaitForPackagesInMgsResponse) GetPerf() *perfpb.Values {
	if x != nil {
		return x.Perf
	}
	return nil
}

type WaitForSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapshotNames []string `protobuf:"bytes,1,rep,name=snapshot_names,json=snapshotNames,proto3" json:"snapshot_names,omitempty"`
}

func (x *WaitForSnapshotRequest) Reset() {
	*x = WaitForSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arc_snapshot_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForSnapshotRequest) ProtoMessage() {}

func (x *WaitForSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arc_snapshot_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForSnapshotRequest.ProtoReflect.Descriptor instead.
func (*WaitForSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_arc_snapshot_service_proto_rawDescGZIP(), []int{3}
}

func (x *WaitForSnapshotRequest) GetSnapshotNames() []string {
	if x != nil {
		return x.SnapshotNames
	}
	return nil
}

var File_arc_snapshot_service_proto protoreflect.FileDescriptor

var file_arc_snapshot_service_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x61, 0x72, 0x63, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x74, 0x61,
	0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x37, 0x0a,
	0x0d, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x73, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x1b, 0x57, 0x61, 0x69, 0x74, 0x46,
	0x6f, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x49, 0x6e, 0x4d, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x48, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x22, 0x67, 0x0a, 0x1c, 0x57,
	0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x49, 0x6e,
	0x4d, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x33, 0x0a, 0x04, 0x70, 0x65, 0x72, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x04,
	0x70, 0x65, 0x72, 0x66, 0x22, 0x3f, 0x0a, 0x16, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x32, 0xb9, 0x02, 0x0a, 0x12, 0x41, 0x72, 0x63, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x06,
	0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x23, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72,
	0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x45, 0x6e,
	0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x14, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x49, 0x6e, 0x4d, 0x67, 0x73, 0x12, 0x31, 0x2e,
	0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x73, 0x49, 0x6e, 0x4d, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x49, 0x6e, 0x4d, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0f, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f,
	0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2c, 0x2e, 0x74, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x42, 0x2a, 0x5a, 0x28, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f,
	0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72,
	0x6f, 0x73, 0x2f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arc_snapshot_service_proto_rawDescOnce sync.Once
	file_arc_snapshot_service_proto_rawDescData = file_arc_snapshot_service_proto_rawDesc
)

func file_arc_snapshot_service_proto_rawDescGZIP() []byte {
	file_arc_snapshot_service_proto_rawDescOnce.Do(func() {
		file_arc_snapshot_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_arc_snapshot_service_proto_rawDescData)
	})
	return file_arc_snapshot_service_proto_rawDescData
}

var file_arc_snapshot_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_arc_snapshot_service_proto_goTypes = []interface{}{
	(*EnrollRequest)(nil),                // 0: tast.cros.enterprise.EnrollRequest
	(*WaitForPackagesInMgsRequest)(nil),  // 1: tast.cros.enterprise.WaitForPackagesInMgsRequest
	(*WaitForPackagesInMgsResponse)(nil), // 2: tast.cros.enterprise.WaitForPackagesInMgsResponse
	(*WaitForSnapshotRequest)(nil),       // 3: tast.cros.enterprise.WaitForSnapshotRequest
	(*perfpb.Values)(nil),                // 4: tast.common.perf.perfpb.Values
	(*empty.Empty)(nil),                  // 5: google.protobuf.Empty
}
var file_arc_snapshot_service_proto_depIdxs = []int32{
	4, // 0: tast.cros.enterprise.WaitForPackagesInMgsResponse.perf:type_name -> tast.common.perf.perfpb.Values
	0, // 1: tast.cros.enterprise.ArcSnapshotService.Enroll:input_type -> tast.cros.enterprise.EnrollRequest
	1, // 2: tast.cros.enterprise.ArcSnapshotService.WaitForPackagesInMgs:input_type -> tast.cros.enterprise.WaitForPackagesInMgsRequest
	3, // 3: tast.cros.enterprise.ArcSnapshotService.WaitForSnapshot:input_type -> tast.cros.enterprise.WaitForSnapshotRequest
	5, // 4: tast.cros.enterprise.ArcSnapshotService.Enroll:output_type -> google.protobuf.Empty
	2, // 5: tast.cros.enterprise.ArcSnapshotService.WaitForPackagesInMgs:output_type -> tast.cros.enterprise.WaitForPackagesInMgsResponse
	5, // 6: tast.cros.enterprise.ArcSnapshotService.WaitForSnapshot:output_type -> google.protobuf.Empty
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_arc_snapshot_service_proto_init() }
func file_arc_snapshot_service_proto_init() {
	if File_arc_snapshot_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_arc_snapshot_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnrollRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arc_snapshot_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForPackagesInMgsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arc_snapshot_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForPackagesInMgsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arc_snapshot_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arc_snapshot_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_arc_snapshot_service_proto_goTypes,
		DependencyIndexes: file_arc_snapshot_service_proto_depIdxs,
		MessageInfos:      file_arc_snapshot_service_proto_msgTypes,
	}.Build()
	File_arc_snapshot_service_proto = out.File
	file_arc_snapshot_service_proto_rawDesc = nil
	file_arc_snapshot_service_proto_goTypes = nil
	file_arc_snapshot_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ArcSnapshotServiceClient is the client API for ArcSnapshotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArcSnapshotServiceClient interface {
	Enroll(ctx context.Context, in *EnrollRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	WaitForPackagesInMgs(ctx context.Context, in *WaitForPackagesInMgsRequest, opts ...grpc.CallOption) (*WaitForPackagesInMgsResponse, error)
	WaitForSnapshot(ctx context.Context, in *WaitForSnapshotRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type arcSnapshotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArcSnapshotServiceClient(cc grpc.ClientConnInterface) ArcSnapshotServiceClient {
	return &arcSnapshotServiceClient{cc}
}

func (c *arcSnapshotServiceClient) Enroll(ctx context.Context, in *EnrollRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.enterprise.ArcSnapshotService/Enroll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arcSnapshotServiceClient) WaitForPackagesInMgs(ctx context.Context, in *WaitForPackagesInMgsRequest, opts ...grpc.CallOption) (*WaitForPackagesInMgsResponse, error) {
	out := new(WaitForPackagesInMgsResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.enterprise.ArcSnapshotService/WaitForPackagesInMgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arcSnapshotServiceClient) WaitForSnapshot(ctx context.Context, in *WaitForSnapshotRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.enterprise.ArcSnapshotService/WaitForSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArcSnapshotServiceServer is the server API for ArcSnapshotService service.
type ArcSnapshotServiceServer interface {
	Enroll(context.Context, *EnrollRequest) (*empty.Empty, error)
	WaitForPackagesInMgs(context.Context, *WaitForPackagesInMgsRequest) (*WaitForPackagesInMgsResponse, error)
	WaitForSnapshot(context.Context, *WaitForSnapshotRequest) (*empty.Empty, error)
}

// UnimplementedArcSnapshotServiceServer can be embedded to have forward compatible implementations.
type UnimplementedArcSnapshotServiceServer struct {
}

func (*UnimplementedArcSnapshotServiceServer) Enroll(context.Context, *EnrollRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enroll not implemented")
}
func (*UnimplementedArcSnapshotServiceServer) WaitForPackagesInMgs(context.Context, *WaitForPackagesInMgsRequest) (*WaitForPackagesInMgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForPackagesInMgs not implemented")
}
func (*UnimplementedArcSnapshotServiceServer) WaitForSnapshot(context.Context, *WaitForSnapshotRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForSnapshot not implemented")
}

func RegisterArcSnapshotServiceServer(s *grpc.Server, srv ArcSnapshotServiceServer) {
	s.RegisterService(&_ArcSnapshotService_serviceDesc, srv)
}

func _ArcSnapshotService_Enroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArcSnapshotServiceServer).Enroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.enterprise.ArcSnapshotService/Enroll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArcSnapshotServiceServer).Enroll(ctx, req.(*EnrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArcSnapshotService_WaitForPackagesInMgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitForPackagesInMgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArcSnapshotServiceServer).WaitForPackagesInMgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.enterprise.ArcSnapshotService/WaitForPackagesInMgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArcSnapshotServiceServer).WaitForPackagesInMgs(ctx, req.(*WaitForPackagesInMgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArcSnapshotService_WaitForSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitForSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArcSnapshotServiceServer).WaitForSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.enterprise.ArcSnapshotService/WaitForSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArcSnapshotServiceServer).WaitForSnapshot(ctx, req.(*WaitForSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ArcSnapshotService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.enterprise.ArcSnapshotService",
	HandlerType: (*ArcSnapshotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enroll",
			Handler:    _ArcSnapshotService_Enroll_Handler,
		},
		{
			MethodName: "WaitForPackagesInMgs",
			Handler:    _ArcSnapshotService_WaitForPackagesInMgs_Handler,
		},
		{
			MethodName: "WaitForSnapshot",
			Handler:    _ArcSnapshotService_WaitForSnapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "arc_snapshot_service.proto",
}
