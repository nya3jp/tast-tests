// Code generated by protoc-gen-go. DO NOT EDIT.
// source: arc_snapshot_service.proto

package enterprise

import (
	perfpb "chromiumos/tast/common/perf/perfpb"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EnrollRequest struct {
	User                 string   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Pass                 string   `protobuf:"bytes,2,opt,name=pass,proto3" json:"pass,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnrollRequest) Reset()         { *m = EnrollRequest{} }
func (m *EnrollRequest) String() string { return proto.CompactTextString(m) }
func (*EnrollRequest) ProtoMessage()    {}
func (*EnrollRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd0c88dec525b09f, []int{0}
}

func (m *EnrollRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnrollRequest.Unmarshal(m, b)
}
func (m *EnrollRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnrollRequest.Marshal(b, m, deterministic)
}
func (m *EnrollRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnrollRequest.Merge(m, src)
}
func (m *EnrollRequest) XXX_Size() int {
	return xxx_messageInfo_EnrollRequest.Size(m)
}
func (m *EnrollRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnrollRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnrollRequest proto.InternalMessageInfo

func (m *EnrollRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *EnrollRequest) GetPass() string {
	if m != nil {
		return m.Pass
	}
	return ""
}

type WaitForPackagesInMgsRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	User                 string   `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Packages             []string `protobuf:"bytes,3,rep,name=packages,proto3" json:"packages,omitempty"`
	IsHeadless           bool     `protobuf:"varint,4,opt,name=is_headless,json=isHeadless,proto3" json:"is_headless,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WaitForPackagesInMgsRequest) Reset()         { *m = WaitForPackagesInMgsRequest{} }
func (m *WaitForPackagesInMgsRequest) String() string { return proto.CompactTextString(m) }
func (*WaitForPackagesInMgsRequest) ProtoMessage()    {}
func (*WaitForPackagesInMgsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd0c88dec525b09f, []int{1}
}

func (m *WaitForPackagesInMgsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WaitForPackagesInMgsRequest.Unmarshal(m, b)
}
func (m *WaitForPackagesInMgsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WaitForPackagesInMgsRequest.Marshal(b, m, deterministic)
}
func (m *WaitForPackagesInMgsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitForPackagesInMgsRequest.Merge(m, src)
}
func (m *WaitForPackagesInMgsRequest) XXX_Size() int {
	return xxx_messageInfo_WaitForPackagesInMgsRequest.Size(m)
}
func (m *WaitForPackagesInMgsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitForPackagesInMgsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WaitForPackagesInMgsRequest proto.InternalMessageInfo

func (m *WaitForPackagesInMgsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WaitForPackagesInMgsRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *WaitForPackagesInMgsRequest) GetPackages() []string {
	if m != nil {
		return m.Packages
	}
	return nil
}

func (m *WaitForPackagesInMgsRequest) GetIsHeadless() bool {
	if m != nil {
		return m.IsHeadless
	}
	return false
}

type WaitForSnapshotRequest struct {
	SnapshotNames        []string `protobuf:"bytes,1,rep,name=snapshot_names,json=snapshotNames,proto3" json:"snapshot_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WaitForSnapshotRequest) Reset()         { *m = WaitForSnapshotRequest{} }
func (m *WaitForSnapshotRequest) String() string { return proto.CompactTextString(m) }
func (*WaitForSnapshotRequest) ProtoMessage()    {}
func (*WaitForSnapshotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd0c88dec525b09f, []int{2}
}

func (m *WaitForSnapshotRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WaitForSnapshotRequest.Unmarshal(m, b)
}
func (m *WaitForSnapshotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WaitForSnapshotRequest.Marshal(b, m, deterministic)
}
func (m *WaitForSnapshotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitForSnapshotRequest.Merge(m, src)
}
func (m *WaitForSnapshotRequest) XXX_Size() int {
	return xxx_messageInfo_WaitForSnapshotRequest.Size(m)
}
func (m *WaitForSnapshotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitForSnapshotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WaitForSnapshotRequest proto.InternalMessageInfo

func (m *WaitForSnapshotRequest) GetSnapshotNames() []string {
	if m != nil {
		return m.SnapshotNames
	}
	return nil
}

type WaitForPackagesInMgsResponse struct {
	User                 string         `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Perf                 *perfpb.Values `protobuf:"bytes,2,opt,name=perf,proto3" json:"perf,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *WaitForPackagesInMgsResponse) Reset()         { *m = WaitForPackagesInMgsResponse{} }
func (m *WaitForPackagesInMgsResponse) String() string { return proto.CompactTextString(m) }
func (*WaitForPackagesInMgsResponse) ProtoMessage()    {}
func (*WaitForPackagesInMgsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd0c88dec525b09f, []int{3}
}

func (m *WaitForPackagesInMgsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WaitForPackagesInMgsResponse.Unmarshal(m, b)
}
func (m *WaitForPackagesInMgsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WaitForPackagesInMgsResponse.Marshal(b, m, deterministic)
}
func (m *WaitForPackagesInMgsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitForPackagesInMgsResponse.Merge(m, src)
}
func (m *WaitForPackagesInMgsResponse) XXX_Size() int {
	return xxx_messageInfo_WaitForPackagesInMgsResponse.Size(m)
}
func (m *WaitForPackagesInMgsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitForPackagesInMgsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WaitForPackagesInMgsResponse proto.InternalMessageInfo

func (m *WaitForPackagesInMgsResponse) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *WaitForPackagesInMgsResponse) GetPerf() *perfpb.Values {
	if m != nil {
		return m.Perf
	}
	return nil
}

func init() {
	proto.RegisterType((*EnrollRequest)(nil), "tast.cros.enterprise.EnrollRequest")
	proto.RegisterType((*WaitForPackagesInMgsRequest)(nil), "tast.cros.enterprise.WaitForPackagesInMgsRequest")
	proto.RegisterType((*WaitForSnapshotRequest)(nil), "tast.cros.enterprise.WaitForSnapshotRequest")
	proto.RegisterType((*WaitForPackagesInMgsResponse)(nil), "tast.cros.enterprise.WaitForPackagesInMgsResponse")
}

func init() { proto.RegisterFile("arc_snapshot_service.proto", fileDescriptor_bd0c88dec525b09f) }

var fileDescriptor_bd0c88dec525b09f = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x5f, 0xcb, 0xd3, 0x30,
	0x14, 0xc6, 0xdf, 0xee, 0x1d, 0x2f, 0xef, 0x32, 0xa7, 0x10, 0xc6, 0x28, 0x9d, 0xb0, 0x51, 0x11,
	0x8a, 0x48, 0x8a, 0xdb, 0x85, 0x97, 0xa2, 0x30, 0xff, 0x5c, 0x28, 0xd2, 0x81, 0xa2, 0x37, 0x23,
	0xab, 0x67, 0x5d, 0xb1, 0x6d, 0x62, 0x4e, 0x3a, 0xf0, 0x4a, 0xf0, 0x5b, 0xf9, 0xed, 0x24, 0x49,
	0x3b, 0xe7, 0xa8, 0x03, 0x6f, 0xca, 0xc9, 0xd3, 0x9c, 0x27, 0x39, 0xcf, 0x8f, 0x90, 0x80, 0xab,
	0x74, 0x83, 0x15, 0x97, 0xb8, 0x17, 0x7a, 0x83, 0xa0, 0x0e, 0x79, 0x0a, 0x4c, 0x2a, 0xa1, 0x05,
	0x1d, 0x6b, 0x8e, 0x9a, 0xa5, 0x4a, 0x20, 0x83, 0x4a, 0x83, 0x92, 0x2a, 0x47, 0x08, 0xa6, 0x99,
	0x10, 0x59, 0x01, 0xb1, 0xdd, 0xb3, 0xad, 0x77, 0x31, 0x94, 0x52, 0x7f, 0x77, 0x2d, 0xc1, 0x9d,
	0x03, 0x2f, 0x6a, 0x40, 0xb7, 0x0a, 0x9f, 0x92, 0xd1, 0xaa, 0x52, 0xa2, 0x28, 0x12, 0xf8, 0x56,
	0x03, 0x6a, 0x4a, 0x49, 0xbf, 0x46, 0x50, 0xbe, 0x37, 0xf7, 0xa2, 0x41, 0x62, 0x6b, 0xa3, 0x49,
	0x8e, 0xe8, 0xf7, 0x9c, 0x66, 0xea, 0xf0, 0xa7, 0x47, 0xa6, 0x1f, 0x79, 0xae, 0x5f, 0x0a, 0xf5,
	0x9e, 0xa7, 0x5f, 0x79, 0x06, 0xf8, 0xa6, 0x7a, 0x9b, 0xe1, 0x89, 0x4f, 0xc5, 0x4b, 0x68, 0x7d,
	0x4c, 0x7d, 0xf4, 0xee, 0x9d, 0x78, 0x07, 0xe4, 0x56, 0x36, 0xfd, 0xfe, 0xf5, 0xfc, 0x3a, 0x1a,
	0x24, 0xc7, 0x35, 0x9d, 0x91, 0x61, 0x8e, 0x9b, 0x3d, 0xf0, 0x2f, 0x05, 0x20, 0xfa, 0xfd, 0xb9,
	0x17, 0xdd, 0x26, 0x24, 0xc7, 0xd7, 0x8d, 0x12, 0x3e, 0x23, 0x93, 0xe6, 0x0e, 0xeb, 0x26, 0x9f,
	0xf6, 0xf8, 0x87, 0xe4, 0xee, 0x31, 0x32, 0x73, 0x36, 0xfa, 0x9e, 0x35, 0x1f, 0xb5, 0xea, 0x3b,
	0x23, 0x86, 0x19, 0xb9, 0xdf, 0x3d, 0x04, 0x4a, 0x51, 0x21, 0x74, 0xa6, 0xb1, 0x24, 0x7d, 0x09,
	0x6a, 0x67, 0xa7, 0x18, 0x2e, 0x66, 0xcc, 0x21, 0x10, 0x65, 0x29, 0x2a, 0x66, 0x7e, 0xd8, 0x8f,
	0xdc, 0xb2, 0x0f, 0x36, 0xe7, 0xc4, 0x6e, 0x5e, 0xfc, 0xea, 0x11, 0xfa, 0x5c, 0xa5, 0xed, 0x35,
	0xd7, 0x8e, 0x22, 0x7d, 0x45, 0x6e, 0x5c, 0xfc, 0xf4, 0x01, 0xeb, 0x42, 0xc9, 0xfe, 0x82, 0x13,
	0x4c, 0x98, 0x23, 0xcb, 0x5a, 0xb2, 0x6c, 0x65, 0xc8, 0x86, 0x57, 0xf4, 0x07, 0x19, 0x77, 0x0d,
	0x42, 0x9f, 0x74, 0xdb, 0x5e, 0x20, 0x17, 0x2c, 0xfe, 0xa7, 0xc5, 0xe5, 0x14, 0x5e, 0xd1, 0x4f,
	0xe4, 0xde, 0x19, 0x0a, 0xfa, 0xf8, 0xa2, 0xd1, 0x19, 0xb1, 0x7f, 0xcf, 0xf6, 0xe2, 0xd1, 0xe7,
	0x28, 0xdd, 0x2b, 0x51, 0xe6, 0x75, 0x29, 0x30, 0x36, 0x9e, 0x71, 0xf3, 0x0a, 0x30, 0x36, 0xe6,
	0xf1, 0x1f, 0xf3, 0xed, 0x8d, 0xed, 0x5e, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xb3, 0xda, 0x59,
	0xb7, 0x35, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ArcSnapshotServiceClient is the client API for ArcSnapshotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArcSnapshotServiceClient interface {
	Enroll(ctx context.Context, in *EnrollRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	WaitForPackagesInMgs(ctx context.Context, in *WaitForPackagesInMgsRequest, opts ...grpc.CallOption) (*WaitForPackagesInMgsResponse, error)
	WaitForSnapshot(ctx context.Context, in *WaitForSnapshotRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type arcSnapshotServiceClient struct {
	cc *grpc.ClientConn
}

func NewArcSnapshotServiceClient(cc *grpc.ClientConn) ArcSnapshotServiceClient {
	return &arcSnapshotServiceClient{cc}
}

func (c *arcSnapshotServiceClient) Enroll(ctx context.Context, in *EnrollRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.enterprise.ArcSnapshotService/Enroll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arcSnapshotServiceClient) WaitForPackagesInMgs(ctx context.Context, in *WaitForPackagesInMgsRequest, opts ...grpc.CallOption) (*WaitForPackagesInMgsResponse, error) {
	out := new(WaitForPackagesInMgsResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.enterprise.ArcSnapshotService/WaitForPackagesInMgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arcSnapshotServiceClient) WaitForSnapshot(ctx context.Context, in *WaitForSnapshotRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.enterprise.ArcSnapshotService/WaitForSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArcSnapshotServiceServer is the server API for ArcSnapshotService service.
type ArcSnapshotServiceServer interface {
	Enroll(context.Context, *EnrollRequest) (*empty.Empty, error)
	WaitForPackagesInMgs(context.Context, *WaitForPackagesInMgsRequest) (*WaitForPackagesInMgsResponse, error)
	WaitForSnapshot(context.Context, *WaitForSnapshotRequest) (*empty.Empty, error)
}

// UnimplementedArcSnapshotServiceServer can be embedded to have forward compatible implementations.
type UnimplementedArcSnapshotServiceServer struct {
}

func (*UnimplementedArcSnapshotServiceServer) Enroll(ctx context.Context, req *EnrollRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enroll not implemented")
}
func (*UnimplementedArcSnapshotServiceServer) WaitForPackagesInMgs(ctx context.Context, req *WaitForPackagesInMgsRequest) (*WaitForPackagesInMgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForPackagesInMgs not implemented")
}
func (*UnimplementedArcSnapshotServiceServer) WaitForSnapshot(ctx context.Context, req *WaitForSnapshotRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForSnapshot not implemented")
}

func RegisterArcSnapshotServiceServer(s *grpc.Server, srv ArcSnapshotServiceServer) {
	s.RegisterService(&_ArcSnapshotService_serviceDesc, srv)
}

func _ArcSnapshotService_Enroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArcSnapshotServiceServer).Enroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.enterprise.ArcSnapshotService/Enroll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArcSnapshotServiceServer).Enroll(ctx, req.(*EnrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArcSnapshotService_WaitForPackagesInMgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitForPackagesInMgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArcSnapshotServiceServer).WaitForPackagesInMgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.enterprise.ArcSnapshotService/WaitForPackagesInMgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArcSnapshotServiceServer).WaitForPackagesInMgs(ctx, req.(*WaitForPackagesInMgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArcSnapshotService_WaitForSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitForSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArcSnapshotServiceServer).WaitForSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.enterprise.ArcSnapshotService/WaitForSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArcSnapshotServiceServer).WaitForSnapshot(ctx, req.(*WaitForSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ArcSnapshotService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.enterprise.ArcSnapshotService",
	HandlerType: (*ArcSnapshotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enroll",
			Handler:    _ArcSnapshotService_Enroll_Handler,
		},
		{
			MethodName: "WaitForPackagesInMgs",
			Handler:    _ArcSnapshotService_WaitForPackagesInMgs_Handler,
		},
		{
			MethodName: "WaitForSnapshot",
			Handler:    _ArcSnapshotService_WaitForSnapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "arc_snapshot_service.proto",
}
