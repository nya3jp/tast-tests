// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: dlp/dlp.proto

package dlp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BrowserType int32

const (
	BrowserType_ASH    BrowserType = 0
	BrowserType_LACROS BrowserType = 1
)

// Enum value maps for BrowserType.
var (
	BrowserType_name = map[int32]string{
		0: "ASH",
		1: "LACROS",
	}
	BrowserType_value = map[string]int32{
		"ASH":    0,
		"LACROS": 1,
	}
)

func (x BrowserType) Enum() *BrowserType {
	p := new(BrowserType)
	*p = x
	return p
}

func (x BrowserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BrowserType) Descriptor() protoreflect.EnumDescriptor {
	return file_dlp_dlp_proto_enumTypes[0].Descriptor()
}

func (BrowserType) Type() protoreflect.EnumType {
	return &file_dlp_dlp_proto_enumTypes[0]
}

func (x BrowserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BrowserType.Descriptor instead.
func (BrowserType) EnumDescriptor() ([]byte, []int) {
	return file_dlp_dlp_proto_rawDescGZIP(), []int{0}
}

// The mode of the applied restriction.
type Mode int32

const (
	Mode_BLOCK        Mode = 0
	Mode_REPORT       Mode = 1
	Mode_WARN_CANCEL  Mode = 2
	Mode_WARN_PROCEED Mode = 3
	Mode_ALLOW        Mode = 4
)

// Enum value maps for Mode.
var (
	Mode_name = map[int32]string{
		0: "BLOCK",
		1: "REPORT",
		2: "WARN_CANCEL",
		3: "WARN_PROCEED",
		4: "ALLOW",
	}
	Mode_value = map[string]int32{
		"BLOCK":        0,
		"REPORT":       1,
		"WARN_CANCEL":  2,
		"WARN_PROCEED": 3,
		"ALLOW":        4,
	}
)

func (x Mode) Enum() *Mode {
	p := new(Mode)
	*p = x
	return p
}

func (x Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_dlp_dlp_proto_enumTypes[1].Descriptor()
}

func (Mode) Type() protoreflect.EnumType {
	return &file_dlp_dlp_proto_enumTypes[1]
}

func (x Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mode.Descriptor instead.
func (Mode) EnumDescriptor() ([]byte, []int) {
	return file_dlp_dlp_proto_rawDescGZIP(), []int{1}
}

type EnrollAndLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username           string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password           string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	DmserverUrl        string `protobuf:"bytes,3,opt,name=dmserver_url,json=dmserverUrl,proto3" json:"dmserver_url,omitempty"`
	ReportingServerUrl string `protobuf:"bytes,4,opt,name=reporting_server_url,json=reportingServerUrl,proto3" json:"reporting_server_url,omitempty"`
	EnabledFeatures    string `protobuf:"bytes,5,opt,name=enabled_features,json=enabledFeatures,proto3" json:"enabled_features,omitempty"`
	EnableLacros       bool   `protobuf:"varint,6,opt,name=enable_lacros,json=enableLacros,proto3" json:"enable_lacros,omitempty"`
}

func (x *EnrollAndLoginRequest) Reset() {
	*x = EnrollAndLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dlp_dlp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrollAndLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrollAndLoginRequest) ProtoMessage() {}

func (x *EnrollAndLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dlp_dlp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrollAndLoginRequest.ProtoReflect.Descriptor instead.
func (*EnrollAndLoginRequest) Descriptor() ([]byte, []int) {
	return file_dlp_dlp_proto_rawDescGZIP(), []int{0}
}

func (x *EnrollAndLoginRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *EnrollAndLoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *EnrollAndLoginRequest) GetDmserverUrl() string {
	if x != nil {
		return x.DmserverUrl
	}
	return ""
}

func (x *EnrollAndLoginRequest) GetReportingServerUrl() string {
	if x != nil {
		return x.ReportingServerUrl
	}
	return ""
}

func (x *EnrollAndLoginRequest) GetEnabledFeatures() string {
	if x != nil {
		return x.EnabledFeatures
	}
	return ""
}

func (x *EnrollAndLoginRequest) GetEnableLacros() bool {
	if x != nil {
		return x.EnableLacros
	}
	return false
}

type ActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrowserType BrowserType `protobuf:"varint,1,opt,name=browser_type,json=browserType,proto3,enum=tast.cros.dlp.BrowserType" json:"browser_type,omitempty"`
}

func (x *ActionRequest) Reset() {
	*x = ActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dlp_dlp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionRequest) ProtoMessage() {}

func (x *ActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dlp_dlp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionRequest.ProtoReflect.Descriptor instead.
func (*ActionRequest) Descriptor() ([]byte, []int) {
	return file_dlp_dlp_proto_rawDescGZIP(), []int{1}
}

func (x *ActionRequest) GetBrowserType() BrowserType {
	if x != nil {
		return x.BrowserType
	}
	return BrowserType_ASH
}

var File_dlp_dlp_proto protoreflect.FileDescriptor

var file_dlp_dlp_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x64, 0x6c, 0x70, 0x2f, 0x64, 0x6c, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0d, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x64, 0x6c, 0x70, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf4, 0x01, 0x0a, 0x15,
	0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x41, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c,
	0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55,
	0x72, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x61, 0x63, 0x72,
	0x6f, 0x73, 0x22, 0x4e, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x64, 0x6c, 0x70, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x2a, 0x22, 0x0a, 0x0b, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x48, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x41,
	0x43, 0x52, 0x4f, 0x53, 0x10, 0x01, 0x2a, 0x4b, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x09,
	0x0a, 0x05, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x50,
	0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x41, 0x52, 0x4e, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x41, 0x52, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x45, 0x44, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4c, 0x4c, 0x4f,
	0x57, 0x10, 0x04, 0x32, 0xfb, 0x01, 0x0a, 0x19, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x61, 0x6b,
	0x50, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x50, 0x0a, 0x0e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x41, 0x6e, 0x64, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x24, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e,
	0x64, 0x6c, 0x70, 0x2e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x41, 0x6e, 0x64, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x68, 0x72, 0x6f, 0x6d,
	0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x12, 0x43, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x70, 0x79, 0x50, 0x61, 0x73, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x74, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x64, 0x6c, 0x70, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x42, 0x23, 0x5a, 0x21, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f,
	0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72,
	0x6f, 0x73, 0x2f, 0x64, 0x6c, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dlp_dlp_proto_rawDescOnce sync.Once
	file_dlp_dlp_proto_rawDescData = file_dlp_dlp_proto_rawDesc
)

func file_dlp_dlp_proto_rawDescGZIP() []byte {
	file_dlp_dlp_proto_rawDescOnce.Do(func() {
		file_dlp_dlp_proto_rawDescData = protoimpl.X.CompressGZIP(file_dlp_dlp_proto_rawDescData)
	})
	return file_dlp_dlp_proto_rawDescData
}

var file_dlp_dlp_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dlp_dlp_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_dlp_dlp_proto_goTypes = []interface{}{
	(BrowserType)(0),              // 0: tast.cros.dlp.BrowserType
	(Mode)(0),                     // 1: tast.cros.dlp.Mode
	(*EnrollAndLoginRequest)(nil), // 2: tast.cros.dlp.EnrollAndLoginRequest
	(*ActionRequest)(nil),         // 3: tast.cros.dlp.ActionRequest
	(*emptypb.Empty)(nil),         // 4: google.protobuf.Empty
}
var file_dlp_dlp_proto_depIdxs = []int32{
	0, // 0: tast.cros.dlp.ActionRequest.browser_type:type_name -> tast.cros.dlp.BrowserType
	2, // 1: tast.cros.dlp.DataLeakPreventionService.EnrollAndLogin:input_type -> tast.cros.dlp.EnrollAndLoginRequest
	4, // 2: tast.cros.dlp.DataLeakPreventionService.StopChrome:input_type -> google.protobuf.Empty
	3, // 3: tast.cros.dlp.DataLeakPreventionService.ClipboardCopyPaste:input_type -> tast.cros.dlp.ActionRequest
	4, // 4: tast.cros.dlp.DataLeakPreventionService.EnrollAndLogin:output_type -> google.protobuf.Empty
	4, // 5: tast.cros.dlp.DataLeakPreventionService.StopChrome:output_type -> google.protobuf.Empty
	4, // 6: tast.cros.dlp.DataLeakPreventionService.ClipboardCopyPaste:output_type -> google.protobuf.Empty
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_dlp_dlp_proto_init() }
func file_dlp_dlp_proto_init() {
	if File_dlp_dlp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dlp_dlp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnrollAndLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dlp_dlp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dlp_dlp_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dlp_dlp_proto_goTypes,
		DependencyIndexes: file_dlp_dlp_proto_depIdxs,
		EnumInfos:         file_dlp_dlp_proto_enumTypes,
		MessageInfos:      file_dlp_dlp_proto_msgTypes,
	}.Build()
	File_dlp_dlp_proto = out.File
	file_dlp_dlp_proto_rawDesc = nil
	file_dlp_dlp_proto_goTypes = nil
	file_dlp_dlp_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DataLeakPreventionServiceClient is the client API for DataLeakPreventionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataLeakPreventionServiceClient interface {
	EnrollAndLogin(ctx context.Context, in *EnrollAndLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StopChrome(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ClipboardCopyPaste(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type dataLeakPreventionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataLeakPreventionServiceClient(cc grpc.ClientConnInterface) DataLeakPreventionServiceClient {
	return &dataLeakPreventionServiceClient{cc}
}

func (c *dataLeakPreventionServiceClient) EnrollAndLogin(ctx context.Context, in *EnrollAndLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.dlp.DataLeakPreventionService/EnrollAndLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLeakPreventionServiceClient) StopChrome(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.dlp.DataLeakPreventionService/StopChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLeakPreventionServiceClient) ClipboardCopyPaste(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.dlp.DataLeakPreventionService/ClipboardCopyPaste", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataLeakPreventionServiceServer is the server API for DataLeakPreventionService service.
type DataLeakPreventionServiceServer interface {
	EnrollAndLogin(context.Context, *EnrollAndLoginRequest) (*emptypb.Empty, error)
	StopChrome(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	ClipboardCopyPaste(context.Context, *ActionRequest) (*emptypb.Empty, error)
}

// UnimplementedDataLeakPreventionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDataLeakPreventionServiceServer struct {
}

func (*UnimplementedDataLeakPreventionServiceServer) EnrollAndLogin(context.Context, *EnrollAndLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollAndLogin not implemented")
}
func (*UnimplementedDataLeakPreventionServiceServer) StopChrome(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopChrome not implemented")
}
func (*UnimplementedDataLeakPreventionServiceServer) ClipboardCopyPaste(context.Context, *ActionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClipboardCopyPaste not implemented")
}

func RegisterDataLeakPreventionServiceServer(s *grpc.Server, srv DataLeakPreventionServiceServer) {
	s.RegisterService(&_DataLeakPreventionService_serviceDesc, srv)
}

func _DataLeakPreventionService_EnrollAndLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollAndLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLeakPreventionServiceServer).EnrollAndLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.dlp.DataLeakPreventionService/EnrollAndLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLeakPreventionServiceServer).EnrollAndLogin(ctx, req.(*EnrollAndLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLeakPreventionService_StopChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLeakPreventionServiceServer).StopChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.dlp.DataLeakPreventionService/StopChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLeakPreventionServiceServer).StopChrome(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLeakPreventionService_ClipboardCopyPaste_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLeakPreventionServiceServer).ClipboardCopyPaste(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.dlp.DataLeakPreventionService/ClipboardCopyPaste",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLeakPreventionServiceServer).ClipboardCopyPaste(ctx, req.(*ActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataLeakPreventionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.dlp.DataLeakPreventionService",
	HandlerType: (*DataLeakPreventionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnrollAndLogin",
			Handler:    _DataLeakPreventionService_EnrollAndLogin_Handler,
		},
		{
			MethodName: "StopChrome",
			Handler:    _DataLeakPreventionService_StopChrome_Handler,
		},
		{
			MethodName: "ClipboardCopyPaste",
			Handler:    _DataLeakPreventionService_ClipboardCopyPaste_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dlp/dlp.proto",
}
