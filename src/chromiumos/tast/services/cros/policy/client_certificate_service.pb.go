// Code generated by protoc-gen-go. DO NOT EDIT.
// source: client_certificate_service.proto

package policy

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("client_certificate_service.proto", fileDescriptor_0d29485bc3caf52d) }

var fileDescriptor_0d29485bc3caf52d = []byte{
	// 180 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0xcf, 0xb1, 0x0a, 0xc2, 0x40,
	0x0c, 0x06, 0x60, 0x27, 0x87, 0x4e, 0xd2, 0x41, 0xa4, 0x2e, 0x45, 0xc4, 0xf1, 0x0e, 0xf4, 0x0d,
	0x2c, 0x0e, 0x9d, 0xed, 0xe4, 0x52, 0xda, 0x98, 0xd6, 0x83, 0x6b, 0x73, 0x5c, 0x52, 0xa1, 0x6f,
	0x2f, 0xed, 0x29, 0x0e, 0xe2, 0x9a, 0x3f, 0xf9, 0xf8, 0x13, 0xa5, 0x60, 0x0d, 0xf6, 0x52, 0x02,
	0x7a, 0x31, 0x8d, 0x81, 0x4a, 0xb0, 0x64, 0xf4, 0x4f, 0x03, 0xa8, 0x9c, 0x27, 0xa1, 0x78, 0x25,
	0x15, 0x8b, 0x02, 0x4f, 0xac, 0x1c, 0x59, 0x03, 0x63, 0xb2, 0x6d, 0x89, 0x5a, 0x8b, 0x7a, 0xce,
	0xeb, 0xa1, 0xd1, 0xd8, 0x39, 0x19, 0xc3, 0xfa, 0xd1, 0x45, 0x9b, 0x6c, 0x26, 0xb3, 0xaf, 0x78,
	0x0d, 0x60, 0x5c, 0x44, 0x69, 0x81, 0x2c, 0x3f, 0x79, 0xce, 0x79, 0xcf, 0x52, 0x59, 0x8b, 0xf7,
	0x78, 0xad, 0x82, 0xae, 0x3e, 0xba, 0xba, 0x4c, 0x7a, 0xf2, 0x67, 0xbe, 0x5b, 0x9c, 0x0f, 0xb7,
	0x3d, 0x3c, 0x3c, 0x75, 0x66, 0xe8, 0x88, 0xf5, 0xd4, 0x56, 0xbf, 0x3f, 0x60, 0x3d, 0xd5, 0xd6,
	0xa1, 0x76, 0xbd, 0x9c, 0x2f, 0x4f, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa4, 0xb2, 0x00, 0x8f,
	0xf3, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClientCertificateServiceClient is the client API for ClientCertificateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientCertificateServiceClient interface {
	TestClientCertificateIsInstalled(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type clientCertificateServiceClient struct {
	cc *grpc.ClientConn
}

func NewClientCertificateServiceClient(cc *grpc.ClientConn) ClientCertificateServiceClient {
	return &clientCertificateServiceClient{cc}
}

func (c *clientCertificateServiceClient) TestClientCertificateIsInstalled(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.ClientCertificateService/TestClientCertificateIsInstalled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientCertificateServiceServer is the server API for ClientCertificateService service.
type ClientCertificateServiceServer interface {
	TestClientCertificateIsInstalled(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedClientCertificateServiceServer can be embedded to have forward compatible implementations.
type UnimplementedClientCertificateServiceServer struct {
}

func (*UnimplementedClientCertificateServiceServer) TestClientCertificateIsInstalled(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestClientCertificateIsInstalled not implemented")
}

func RegisterClientCertificateServiceServer(s *grpc.Server, srv ClientCertificateServiceServer) {
	s.RegisterService(&_ClientCertificateService_serviceDesc, srv)
}

func _ClientCertificateService_TestClientCertificateIsInstalled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCertificateServiceServer).TestClientCertificateIsInstalled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.ClientCertificateService/TestClientCertificateIsInstalled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCertificateServiceServer).TestClientCertificateIsInstalled(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientCertificateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.policy.ClientCertificateService",
	HandlerType: (*ClientCertificateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestClientCertificateIsInstalled",
			Handler:    _ClientCertificateService_TestClientCertificateIsInstalled_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client_certificate_service.proto",
}
