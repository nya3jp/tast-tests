// Code generated by protoc-gen-go. DO NOT EDIT.
// source: policy.proto

package policy

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EnrollUsingChromeRequest struct {
	PolicyJson           []byte       `protobuf:"bytes,1,opt,name=policy_json,json=policyJson,proto3" json:"policy_json,omitempty"`
	Username             string       `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Extensions           []*Extension `protobuf:"bytes,3,rep,name=extensions,proto3" json:"extensions,omitempty"`
	ExtraArgs            string       `protobuf:"bytes,4,opt,name=extra_args,json=extraArgs,proto3" json:"extra_args,omitempty"`
	FakedmsDir           string       `protobuf:"bytes,5,opt,name=fakedms_dir,json=fakedmsDir,proto3" json:"fakedms_dir,omitempty"`
	SkipLogin            bool         `protobuf:"varint,6,opt,name=skip_login,json=skipLogin,proto3" json:"skip_login,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *EnrollUsingChromeRequest) Reset()         { *m = EnrollUsingChromeRequest{} }
func (m *EnrollUsingChromeRequest) String() string { return proto.CompactTextString(m) }
func (*EnrollUsingChromeRequest) ProtoMessage()    {}
func (*EnrollUsingChromeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{0}
}

func (m *EnrollUsingChromeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnrollUsingChromeRequest.Unmarshal(m, b)
}
func (m *EnrollUsingChromeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnrollUsingChromeRequest.Marshal(b, m, deterministic)
}
func (m *EnrollUsingChromeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnrollUsingChromeRequest.Merge(m, src)
}
func (m *EnrollUsingChromeRequest) XXX_Size() int {
	return xxx_messageInfo_EnrollUsingChromeRequest.Size(m)
}
func (m *EnrollUsingChromeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnrollUsingChromeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnrollUsingChromeRequest proto.InternalMessageInfo

func (m *EnrollUsingChromeRequest) GetPolicyJson() []byte {
	if m != nil {
		return m.PolicyJson
	}
	return nil
}

func (m *EnrollUsingChromeRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *EnrollUsingChromeRequest) GetExtensions() []*Extension {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func (m *EnrollUsingChromeRequest) GetExtraArgs() string {
	if m != nil {
		return m.ExtraArgs
	}
	return ""
}

func (m *EnrollUsingChromeRequest) GetFakedmsDir() string {
	if m != nil {
		return m.FakedmsDir
	}
	return ""
}

func (m *EnrollUsingChromeRequest) GetSkipLogin() bool {
	if m != nil {
		return m.SkipLogin
	}
	return false
}

type CreateFakeDMSDirRequest struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateFakeDMSDirRequest) Reset()         { *m = CreateFakeDMSDirRequest{} }
func (m *CreateFakeDMSDirRequest) String() string { return proto.CompactTextString(m) }
func (*CreateFakeDMSDirRequest) ProtoMessage()    {}
func (*CreateFakeDMSDirRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{1}
}

func (m *CreateFakeDMSDirRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateFakeDMSDirRequest.Unmarshal(m, b)
}
func (m *CreateFakeDMSDirRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateFakeDMSDirRequest.Marshal(b, m, deterministic)
}
func (m *CreateFakeDMSDirRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateFakeDMSDirRequest.Merge(m, src)
}
func (m *CreateFakeDMSDirRequest) XXX_Size() int {
	return xxx_messageInfo_CreateFakeDMSDirRequest.Size(m)
}
func (m *CreateFakeDMSDirRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateFakeDMSDirRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateFakeDMSDirRequest proto.InternalMessageInfo

func (m *CreateFakeDMSDirRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type RemoveFakeDMSDirRequest struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveFakeDMSDirRequest) Reset()         { *m = RemoveFakeDMSDirRequest{} }
func (m *RemoveFakeDMSDirRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveFakeDMSDirRequest) ProtoMessage()    {}
func (*RemoveFakeDMSDirRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{2}
}

func (m *RemoveFakeDMSDirRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveFakeDMSDirRequest.Unmarshal(m, b)
}
func (m *RemoveFakeDMSDirRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveFakeDMSDirRequest.Marshal(b, m, deterministic)
}
func (m *RemoveFakeDMSDirRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveFakeDMSDirRequest.Merge(m, src)
}
func (m *RemoveFakeDMSDirRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveFakeDMSDirRequest.Size(m)
}
func (m *RemoveFakeDMSDirRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveFakeDMSDirRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveFakeDMSDirRequest proto.InternalMessageInfo

func (m *RemoveFakeDMSDirRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type UpdatePoliciesRequest struct {
	PolicyJson           []byte   `protobuf:"bytes,1,opt,name=policy_json,json=policyJson,proto3" json:"policy_json,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatePoliciesRequest) Reset()         { *m = UpdatePoliciesRequest{} }
func (m *UpdatePoliciesRequest) String() string { return proto.CompactTextString(m) }
func (*UpdatePoliciesRequest) ProtoMessage()    {}
func (*UpdatePoliciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{3}
}

func (m *UpdatePoliciesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdatePoliciesRequest.Unmarshal(m, b)
}
func (m *UpdatePoliciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdatePoliciesRequest.Marshal(b, m, deterministic)
}
func (m *UpdatePoliciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePoliciesRequest.Merge(m, src)
}
func (m *UpdatePoliciesRequest) XXX_Size() int {
	return xxx_messageInfo_UpdatePoliciesRequest.Size(m)
}
func (m *UpdatePoliciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePoliciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePoliciesRequest proto.InternalMessageInfo

func (m *UpdatePoliciesRequest) GetPolicyJson() []byte {
	if m != nil {
		return m.PolicyJson
	}
	return nil
}

type ServePolicyDataRequest struct {
	Contents             []byte   `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServePolicyDataRequest) Reset()         { *m = ServePolicyDataRequest{} }
func (m *ServePolicyDataRequest) String() string { return proto.CompactTextString(m) }
func (*ServePolicyDataRequest) ProtoMessage()    {}
func (*ServePolicyDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{4}
}

func (m *ServePolicyDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServePolicyDataRequest.Unmarshal(m, b)
}
func (m *ServePolicyDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServePolicyDataRequest.Marshal(b, m, deterministic)
}
func (m *ServePolicyDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServePolicyDataRequest.Merge(m, src)
}
func (m *ServePolicyDataRequest) XXX_Size() int {
	return xxx_messageInfo_ServePolicyDataRequest.Size(m)
}
func (m *ServePolicyDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ServePolicyDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ServePolicyDataRequest proto.InternalMessageInfo

func (m *ServePolicyDataRequest) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

type ServePolicyDataResponse struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Hash                 string   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServePolicyDataResponse) Reset()         { *m = ServePolicyDataResponse{} }
func (m *ServePolicyDataResponse) String() string { return proto.CompactTextString(m) }
func (*ServePolicyDataResponse) ProtoMessage()    {}
func (*ServePolicyDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{5}
}

func (m *ServePolicyDataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServePolicyDataResponse.Unmarshal(m, b)
}
func (m *ServePolicyDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServePolicyDataResponse.Marshal(b, m, deterministic)
}
func (m *ServePolicyDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServePolicyDataResponse.Merge(m, src)
}
func (m *ServePolicyDataResponse) XXX_Size() int {
	return xxx_messageInfo_ServePolicyDataResponse.Size(m)
}
func (m *ServePolicyDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServePolicyDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServePolicyDataResponse proto.InternalMessageInfo

func (m *ServePolicyDataResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ServePolicyDataResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type EvalInExtensionRequest struct {
	ExtensionId          string   `protobuf:"bytes,1,opt,name=extension_id,json=extensionId,proto3" json:"extension_id,omitempty"`
	Expression           string   `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EvalInExtensionRequest) Reset()         { *m = EvalInExtensionRequest{} }
func (m *EvalInExtensionRequest) String() string { return proto.CompactTextString(m) }
func (*EvalInExtensionRequest) ProtoMessage()    {}
func (*EvalInExtensionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{6}
}

func (m *EvalInExtensionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvalInExtensionRequest.Unmarshal(m, b)
}
func (m *EvalInExtensionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvalInExtensionRequest.Marshal(b, m, deterministic)
}
func (m *EvalInExtensionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvalInExtensionRequest.Merge(m, src)
}
func (m *EvalInExtensionRequest) XXX_Size() int {
	return xxx_messageInfo_EvalInExtensionRequest.Size(m)
}
func (m *EvalInExtensionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EvalInExtensionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EvalInExtensionRequest proto.InternalMessageInfo

func (m *EvalInExtensionRequest) GetExtensionId() string {
	if m != nil {
		return m.ExtensionId
	}
	return ""
}

func (m *EvalInExtensionRequest) GetExpression() string {
	if m != nil {
		return m.Expression
	}
	return ""
}

type EvalInExtensionResponse struct {
	Result               []byte   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EvalInExtensionResponse) Reset()         { *m = EvalInExtensionResponse{} }
func (m *EvalInExtensionResponse) String() string { return proto.CompactTextString(m) }
func (*EvalInExtensionResponse) ProtoMessage()    {}
func (*EvalInExtensionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{7}
}

func (m *EvalInExtensionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvalInExtensionResponse.Unmarshal(m, b)
}
func (m *EvalInExtensionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvalInExtensionResponse.Marshal(b, m, deterministic)
}
func (m *EvalInExtensionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvalInExtensionResponse.Merge(m, src)
}
func (m *EvalInExtensionResponse) XXX_Size() int {
	return xxx_messageInfo_EvalInExtensionResponse.Size(m)
}
func (m *EvalInExtensionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EvalInExtensionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EvalInExtensionResponse proto.InternalMessageInfo

func (m *EvalInExtensionResponse) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

type ExtensionFile struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Contents             []byte   `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtensionFile) Reset()         { *m = ExtensionFile{} }
func (m *ExtensionFile) String() string { return proto.CompactTextString(m) }
func (*ExtensionFile) ProtoMessage()    {}
func (*ExtensionFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{8}
}

func (m *ExtensionFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtensionFile.Unmarshal(m, b)
}
func (m *ExtensionFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtensionFile.Marshal(b, m, deterministic)
}
func (m *ExtensionFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtensionFile.Merge(m, src)
}
func (m *ExtensionFile) XXX_Size() int {
	return xxx_messageInfo_ExtensionFile.Size(m)
}
func (m *ExtensionFile) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtensionFile.DiscardUnknown(m)
}

var xxx_messageInfo_ExtensionFile proto.InternalMessageInfo

func (m *ExtensionFile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ExtensionFile) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

type Extension struct {
	Id                   string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Files                []*ExtensionFile `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Extension) Reset()         { *m = Extension{} }
func (m *Extension) String() string { return proto.CompactTextString(m) }
func (*Extension) ProtoMessage()    {}
func (*Extension) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{9}
}

func (m *Extension) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Extension.Unmarshal(m, b)
}
func (m *Extension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Extension.Marshal(b, m, deterministic)
}
func (m *Extension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Extension.Merge(m, src)
}
func (m *Extension) XXX_Size() int {
	return xxx_messageInfo_Extension.Size(m)
}
func (m *Extension) XXX_DiscardUnknown() {
	xxx_messageInfo_Extension.DiscardUnknown(m)
}

var xxx_messageInfo_Extension proto.InternalMessageInfo

func (m *Extension) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Extension) GetFiles() []*ExtensionFile {
	if m != nil {
		return m.Files
	}
	return nil
}

type VerifyVisibleNotificationRequest struct {
	NotificationId       string   `protobuf:"bytes,1,opt,name=notification_id,json=notificationId,proto3" json:"notification_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyVisibleNotificationRequest) Reset()         { *m = VerifyVisibleNotificationRequest{} }
func (m *VerifyVisibleNotificationRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyVisibleNotificationRequest) ProtoMessage()    {}
func (*VerifyVisibleNotificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{10}
}

func (m *VerifyVisibleNotificationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VerifyVisibleNotificationRequest.Unmarshal(m, b)
}
func (m *VerifyVisibleNotificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VerifyVisibleNotificationRequest.Marshal(b, m, deterministic)
}
func (m *VerifyVisibleNotificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyVisibleNotificationRequest.Merge(m, src)
}
func (m *VerifyVisibleNotificationRequest) XXX_Size() int {
	return xxx_messageInfo_VerifyVisibleNotificationRequest.Size(m)
}
func (m *VerifyVisibleNotificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyVisibleNotificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyVisibleNotificationRequest proto.InternalMessageInfo

func (m *VerifyVisibleNotificationRequest) GetNotificationId() string {
	if m != nil {
		return m.NotificationId
	}
	return ""
}

type EvalExpressionInChromeUrlRequest struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Expression           string   `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EvalExpressionInChromeUrlRequest) Reset()         { *m = EvalExpressionInChromeUrlRequest{} }
func (m *EvalExpressionInChromeUrlRequest) String() string { return proto.CompactTextString(m) }
func (*EvalExpressionInChromeUrlRequest) ProtoMessage()    {}
func (*EvalExpressionInChromeUrlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{11}
}

func (m *EvalExpressionInChromeUrlRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvalExpressionInChromeUrlRequest.Unmarshal(m, b)
}
func (m *EvalExpressionInChromeUrlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvalExpressionInChromeUrlRequest.Marshal(b, m, deterministic)
}
func (m *EvalExpressionInChromeUrlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvalExpressionInChromeUrlRequest.Merge(m, src)
}
func (m *EvalExpressionInChromeUrlRequest) XXX_Size() int {
	return xxx_messageInfo_EvalExpressionInChromeUrlRequest.Size(m)
}
func (m *EvalExpressionInChromeUrlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EvalExpressionInChromeUrlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EvalExpressionInChromeUrlRequest proto.InternalMessageInfo

func (m *EvalExpressionInChromeUrlRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *EvalExpressionInChromeUrlRequest) GetExpression() string {
	if m != nil {
		return m.Expression
	}
	return ""
}

type BatteryStatusResponse struct {
	Percentage           float64  `protobuf:"fixed64,1,opt,name=percentage,proto3" json:"percentage,omitempty"`
	OnAc                 bool     `protobuf:"varint,2,opt,name=on_ac,json=onAc,proto3" json:"on_ac,omitempty"`
	Charging             bool     `protobuf:"varint,3,opt,name=charging,proto3" json:"charging,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatteryStatusResponse) Reset()         { *m = BatteryStatusResponse{} }
func (m *BatteryStatusResponse) String() string { return proto.CompactTextString(m) }
func (*BatteryStatusResponse) ProtoMessage()    {}
func (*BatteryStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{12}
}

func (m *BatteryStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatteryStatusResponse.Unmarshal(m, b)
}
func (m *BatteryStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatteryStatusResponse.Marshal(b, m, deterministic)
}
func (m *BatteryStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatteryStatusResponse.Merge(m, src)
}
func (m *BatteryStatusResponse) XXX_Size() int {
	return xxx_messageInfo_BatteryStatusResponse.Size(m)
}
func (m *BatteryStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatteryStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatteryStatusResponse proto.InternalMessageInfo

func (m *BatteryStatusResponse) GetPercentage() float64 {
	if m != nil {
		return m.Percentage
	}
	return 0
}

func (m *BatteryStatusResponse) GetOnAc() bool {
	if m != nil {
		return m.OnAc
	}
	return false
}

func (m *BatteryStatusResponse) GetCharging() bool {
	if m != nil {
		return m.Charging
	}
	return false
}

type BatteryChargeRequest struct {
	Percentage           float64  `protobuf:"fixed64,1,opt,name=percentage,proto3" json:"percentage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatteryChargeRequest) Reset()         { *m = BatteryChargeRequest{} }
func (m *BatteryChargeRequest) String() string { return proto.CompactTextString(m) }
func (*BatteryChargeRequest) ProtoMessage()    {}
func (*BatteryChargeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{13}
}

func (m *BatteryChargeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatteryChargeRequest.Unmarshal(m, b)
}
func (m *BatteryChargeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatteryChargeRequest.Marshal(b, m, deterministic)
}
func (m *BatteryChargeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatteryChargeRequest.Merge(m, src)
}
func (m *BatteryChargeRequest) XXX_Size() int {
	return xxx_messageInfo_BatteryChargeRequest.Size(m)
}
func (m *BatteryChargeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatteryChargeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatteryChargeRequest proto.InternalMessageInfo

func (m *BatteryChargeRequest) GetPercentage() float64 {
	if m != nil {
		return m.Percentage
	}
	return 0
}

type BatteryDrainRequest struct {
	Percentage float64 `protobuf:"fixed64,1,opt,name=percentage,proto3" json:"percentage,omitempty"`
	// Battery Drain depends on policy service chrome instance, i.e. enrollment must be called
	// beforehand. But in some case that may not be the case, so for that setting force as true
	// will create a new chrome instance.
	Force                bool     `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatteryDrainRequest) Reset()         { *m = BatteryDrainRequest{} }
func (m *BatteryDrainRequest) String() string { return proto.CompactTextString(m) }
func (*BatteryDrainRequest) ProtoMessage()    {}
func (*BatteryDrainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{14}
}

func (m *BatteryDrainRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatteryDrainRequest.Unmarshal(m, b)
}
func (m *BatteryDrainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatteryDrainRequest.Marshal(b, m, deterministic)
}
func (m *BatteryDrainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatteryDrainRequest.Merge(m, src)
}
func (m *BatteryDrainRequest) XXX_Size() int {
	return xxx_messageInfo_BatteryDrainRequest.Size(m)
}
func (m *BatteryDrainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatteryDrainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatteryDrainRequest proto.InternalMessageInfo

func (m *BatteryDrainRequest) GetPercentage() float64 {
	if m != nil {
		return m.Percentage
	}
	return 0
}

func (m *BatteryDrainRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func init() {
	proto.RegisterType((*EnrollUsingChromeRequest)(nil), "tast.cros.policy.EnrollUsingChromeRequest")
	proto.RegisterType((*CreateFakeDMSDirRequest)(nil), "tast.cros.policy.CreateFakeDMSDirRequest")
	proto.RegisterType((*RemoveFakeDMSDirRequest)(nil), "tast.cros.policy.RemoveFakeDMSDirRequest")
	proto.RegisterType((*UpdatePoliciesRequest)(nil), "tast.cros.policy.UpdatePoliciesRequest")
	proto.RegisterType((*ServePolicyDataRequest)(nil), "tast.cros.policy.ServePolicyDataRequest")
	proto.RegisterType((*ServePolicyDataResponse)(nil), "tast.cros.policy.ServePolicyDataResponse")
	proto.RegisterType((*EvalInExtensionRequest)(nil), "tast.cros.policy.EvalInExtensionRequest")
	proto.RegisterType((*EvalInExtensionResponse)(nil), "tast.cros.policy.EvalInExtensionResponse")
	proto.RegisterType((*ExtensionFile)(nil), "tast.cros.policy.ExtensionFile")
	proto.RegisterType((*Extension)(nil), "tast.cros.policy.Extension")
	proto.RegisterType((*VerifyVisibleNotificationRequest)(nil), "tast.cros.policy.VerifyVisibleNotificationRequest")
	proto.RegisterType((*EvalExpressionInChromeUrlRequest)(nil), "tast.cros.policy.EvalExpressionInChromeUrlRequest")
	proto.RegisterType((*BatteryStatusResponse)(nil), "tast.cros.policy.BatteryStatusResponse")
	proto.RegisterType((*BatteryChargeRequest)(nil), "tast.cros.policy.BatteryChargeRequest")
	proto.RegisterType((*BatteryDrainRequest)(nil), "tast.cros.policy.BatteryDrainRequest")
}

func init() { proto.RegisterFile("policy.proto", fileDescriptor_ac3b897852294d6a) }

var fileDescriptor_ac3b897852294d6a = []byte{
	// 895 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x6d, 0x6f, 0xdb, 0x36,
	0x10, 0xc7, 0xe3, 0x3c, 0x21, 0xbe, 0x3c, 0x34, 0x63, 0x13, 0x47, 0x75, 0xb1, 0xd6, 0x13, 0xb6,
	0xd6, 0x19, 0x30, 0x1b, 0xcb, 0x1e, 0x30, 0x60, 0x2f, 0x8a, 0x34, 0x76, 0x31, 0x37, 0xdd, 0x93,
	0xbc, 0x74, 0xd8, 0x06, 0xcc, 0x60, 0xe4, 0xb3, 0xcc, 0x45, 0x26, 0x35, 0x92, 0x0e, 0x96, 0x8f,
	0xb3, 0xcf, 0xb8, 0x2f, 0x30, 0x50, 0xa2, 0x55, 0xc5, 0x96, 0x14, 0x6f, 0xc8, 0x3b, 0xf1, 0x74,
	0xf7, 0xe7, 0xf1, 0x7f, 0xe4, 0x0f, 0x76, 0x22, 0x11, 0x32, 0xff, 0xa6, 0x15, 0x49, 0xa1, 0x05,
	0xd9, 0xd7, 0x54, 0xe9, 0x96, 0x2f, 0x85, 0x6a, 0x25, 0xf1, 0xfa, 0xe3, 0x40, 0x88, 0x20, 0xc4,
	0x76, 0xfc, 0xff, 0x72, 0x3a, 0x6a, 0xe3, 0x24, 0xd2, 0x36, 0xdd, 0xfd, 0xa7, 0x02, 0x4e, 0x97,
	0x4b, 0x11, 0x86, 0x17, 0x8a, 0xf1, 0xe0, 0x6c, 0x2c, 0xc5, 0x04, 0x3d, 0xfc, 0x73, 0x8a, 0x4a,
	0x93, 0xa7, 0xb0, 0x9d, 0x68, 0x0c, 0xfe, 0x50, 0x82, 0x3b, 0x95, 0x46, 0xa5, 0xb9, 0xe3, 0x41,
	0x12, 0x7a, 0xad, 0x04, 0x27, 0x75, 0xd8, 0x9a, 0x2a, 0x94, 0x9c, 0x4e, 0xd0, 0x59, 0x6d, 0x54,
	0x9a, 0x55, 0x2f, 0x5d, 0x93, 0xaf, 0x01, 0xf0, 0x2f, 0x8d, 0x5c, 0x31, 0xc1, 0x95, 0xb3, 0xd6,
	0x58, 0x6b, 0x6e, 0x9f, 0x3c, 0x6e, 0xcd, 0x77, 0xd7, 0xea, 0xce, 0x72, 0xbc, 0x4c, 0x3a, 0x79,
	0x3f, 0x2e, 0x96, 0x74, 0x40, 0x65, 0xa0, 0x9c, 0xf5, 0x58, 0xba, 0x1a, 0x47, 0x4e, 0x65, 0xa0,
	0x4c, 0x63, 0x23, 0x7a, 0x85, 0xc3, 0x89, 0x1a, 0x0c, 0x99, 0x74, 0x36, 0xe2, 0xff, 0x60, 0x43,
	0x1d, 0x26, 0x4d, 0xbd, 0xba, 0x62, 0xd1, 0x20, 0x14, 0x01, 0xe3, 0xce, 0x66, 0xa3, 0xd2, 0xdc,
	0xf2, 0xaa, 0x26, 0xf2, 0xc6, 0x04, 0xdc, 0x4f, 0xe0, 0xe8, 0x4c, 0x22, 0xd5, 0xf8, 0x8a, 0x5e,
	0x61, 0xe7, 0xdb, 0x7e, 0x87, 0xc9, 0xd9, 0x99, 0x09, 0xac, 0x47, 0x54, 0x8f, 0xe3, 0xc3, 0x56,
	0xbd, 0xf8, 0xdb, 0xa4, 0x7b, 0x38, 0x11, 0xd7, 0x4b, 0xa6, 0x7f, 0x05, 0x87, 0x17, 0xd1, 0x90,
	0x6a, 0xfc, 0xc1, 0x1c, 0x91, 0xa1, 0x5a, 0xd6, 0x4f, 0xf7, 0x73, 0xa8, 0xf5, 0x51, 0x5e, 0x27,
	0x85, 0x37, 0x1d, 0xaa, 0xe9, 0xac, 0xb4, 0x0e, 0x5b, 0xbe, 0xe0, 0x1a, 0xb9, 0x56, 0xb6, 0x2e,
	0x5d, 0xbb, 0x2f, 0xe0, 0x68, 0xa1, 0x4a, 0x45, 0x82, 0x2b, 0x24, 0xfb, 0xb0, 0x36, 0x95, 0xa1,
	0xed, 0xce, 0x7c, 0x9a, 0x86, 0xc7, 0x54, 0x8d, 0xed, 0xb8, 0xe2, 0x6f, 0xf7, 0x37, 0xa8, 0x75,
	0xaf, 0x69, 0xd8, 0xe3, 0xef, 0x86, 0x61, 0xb7, 0xfd, 0x00, 0x76, 0xd2, 0xa9, 0x0c, 0xd8, 0xd0,
	0x0a, 0x6d, 0xa7, 0xb1, 0xde, 0x90, 0x3c, 0x31, 0xa3, 0x8a, 0x24, 0x2a, 0xb3, 0xb6, 0xb2, 0x99,
	0x88, 0xfb, 0x29, 0x1c, 0x2d, 0x88, 0xdb, 0xee, 0x6a, 0xb0, 0x29, 0x51, 0x4d, 0x43, 0x6d, 0x8f,
	0x64, 0x57, 0xee, 0x0b, 0xd8, 0x4d, 0x93, 0x5f, 0xb1, 0x10, 0x4d, 0xd3, 0xf1, 0x1d, 0xb3, 0x2e,
	0xc7, 0xf7, 0x2b, 0xeb, 0xc8, 0xea, 0x9c, 0x23, 0x1e, 0x54, 0x53, 0x01, 0xb2, 0x07, 0xab, 0x69,
	0xe7, 0xab, 0x6c, 0x48, 0xbe, 0x80, 0x8d, 0x11, 0x0b, 0xd1, 0x54, 0x99, 0x3b, 0xf9, 0xb4, 0xe4,
	0x4e, 0x9a, 0xcd, 0xbd, 0x24, 0xdb, 0x3d, 0x87, 0xc6, 0x5b, 0x94, 0x6c, 0x74, 0xf3, 0x96, 0x29,
	0x76, 0x19, 0xe2, 0x77, 0x42, 0xb3, 0x11, 0xf3, 0xa9, 0xce, 0xd8, 0xf5, 0x1c, 0x1e, 0xf0, 0x4c,
	0xf8, 0x9d, 0x63, 0x7b, 0xd9, 0x70, 0x6f, 0xe8, 0xfe, 0x04, 0x0d, 0x63, 0x4a, 0x37, 0xb5, 0xa9,
	0xc7, 0x93, 0xa7, 0x77, 0x21, 0xc3, 0x99, 0xd8, 0xe2, 0xec, 0xee, 0xb2, 0x7a, 0x0c, 0x87, 0x2f,
	0xa9, 0xd6, 0x28, 0x6f, 0xfa, 0x9a, 0xea, 0xa9, 0x4a, 0x8d, 0x7e, 0x02, 0x10, 0xa1, 0xf4, 0x91,
	0x6b, 0x1a, 0x24, 0x2e, 0x56, 0xbc, 0x4c, 0x84, 0x3c, 0x84, 0x0d, 0xc1, 0x07, 0xd4, 0x8f, 0x35,
	0xb7, 0xbc, 0x75, 0xc1, 0x4f, 0xfd, 0xd8, 0xe0, 0x31, 0x95, 0x01, 0xe3, 0x81, 0xb3, 0x16, 0xc7,
	0xd3, 0xb5, 0xfb, 0x25, 0x1c, 0xd8, 0x9d, 0xce, 0x4c, 0x28, 0x25, 0xc6, 0x1d, 0x1b, 0xb9, 0xe7,
	0xf0, 0xd0, 0xd6, 0x75, 0x24, 0x65, 0x7c, 0xc9, 0x32, 0x72, 0x00, 0x1b, 0x23, 0x21, 0x7d, 0xb4,
	0xfd, 0x25, 0x8b, 0x93, 0xbf, 0xb7, 0x61, 0x37, 0xb9, 0xf3, 0xe6, 0xfa, 0x33, 0x1f, 0xc9, 0x2f,
	0xf0, 0xde, 0x02, 0xcc, 0xc8, 0xc7, 0x39, 0x03, 0x2e, 0x20, 0x5e, 0xbd, 0xd6, 0x4a, 0x60, 0xd9,
	0x9a, 0xc1, 0xb2, 0xd5, 0x35, 0xb0, 0x74, 0x57, 0x48, 0x1f, 0xf6, 0x6e, 0x3f, 0x6a, 0xf2, 0x7c,
	0x51, 0x37, 0xf7, 0xd9, 0x97, 0x88, 0xf6, 0xe0, 0xf0, 0x6c, 0x8c, 0xfe, 0x55, 0xd2, 0xc4, 0x29,
	0x1f, 0x5a, 0xc0, 0x90, 0x82, 0x92, 0x12, 0xa9, 0x6f, 0xe0, 0xa0, 0xaf, 0x45, 0x74, 0x0f, 0x4a,
	0x3f, 0xc3, 0xfe, 0x3c, 0x1c, 0xc9, 0xf1, 0xe2, 0x59, 0x0b, 0x00, 0x5a, 0x2e, 0x3c, 0x8f, 0xd1,
	0x3c, 0xe1, 0x02, 0xd4, 0x96, 0x08, 0x9f, 0xc3, 0x51, 0x5f, 0x53, 0xa9, 0xcd, 0xbb, 0x95, 0x9c,
	0x86, 0x06, 0x81, 0x31, 0x11, 0xe5, 0xff, 0x38, 0xfe, 0x18, 0x1e, 0xcc, 0xd1, 0x94, 0x34, 0x17,
	0x9b, 0xcc, 0xc7, 0x74, 0xfd, 0x78, 0x89, 0xcc, 0xe4, 0x4d, 0xba, 0x2b, 0xe4, 0x35, 0xd4, 0xcc,
	0xc8, 0xee, 0xa5, 0xeb, 0xdf, 0xc1, 0x31, 0x40, 0x31, 0xef, 0x1e, 0x27, 0xc8, 0x75, 0x06, 0xb7,
	0x79, 0xed, 0xe7, 0xe3, 0xbe, 0xdc, 0x95, 0xb9, 0x9a, 0xff, 0x20, 0x7b, 0xbc, 0x44, 0x66, 0xea,
	0x0a, 0x83, 0x47, 0x85, 0x9c, 0x25, 0x27, 0x8b, 0x4a, 0x77, 0x41, 0xb9, 0xe4, 0x50, 0x0c, 0x1e,
	0x15, 0x50, 0xd8, 0x7b, 0x93, 0xb7, 0xd5, 0x5d, 0xc8, 0x2e, 0xd9, 0xca, 0x83, 0xdd, 0x5b, 0x68,
	0x2e, 0x1c, 0x71, 0x0e, 0x55, 0x72, 0x99, 0xee, 0xae, 0x90, 0x1f, 0x53, 0xcd, 0x04, 0xc2, 0xe4,
	0x59, 0x61, 0xed, 0x2d, 0x4a, 0x97, 0xb4, 0xf9, 0x3d, 0xec, 0x64, 0xf9, 0x4c, 0x3e, 0x2a, 0x54,
	0xcc, 0xf2, 0xbb, 0x58, 0xf0, 0xe5, 0xb3, 0x5f, 0x3f, 0xf4, 0x8d, 0x4b, 0x6c, 0x3a, 0x11, 0xaa,
	0x6d, 0xc4, 0xda, 0x2a, 0x81, 0xb5, 0x6a, 0x1b, 0xd5, 0x76, 0xa2, 0x7a, 0xb9, 0x19, 0x57, 0x7e,
	0xf6, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x7a, 0xc9, 0x08, 0xcd, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PolicyServiceClient is the client API for PolicyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PolicyServiceClient interface {
	EnrollUsingChrome(ctx context.Context, in *EnrollUsingChromeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdatePolicies(ctx context.Context, in *UpdatePoliciesRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CheckChromeAndFakeDMS(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	StopChromeAndFakeDMS(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateFakeDMSDir(ctx context.Context, in *CreateFakeDMSDirRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RemoveFakeDMSDir(ctx context.Context, in *RemoveFakeDMSDirRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	StartExternalDataServer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	ServePolicyData(ctx context.Context, in *ServePolicyDataRequest, opts ...grpc.CallOption) (*ServePolicyDataResponse, error)
	StopExternalDataServer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	EvalStatementInExtension(ctx context.Context, in *EvalInExtensionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	EvalInExtension(ctx context.Context, in *EvalInExtensionRequest, opts ...grpc.CallOption) (*EvalInExtensionResponse, error)
	// Verifies that the notification corresponding to the id in the request is visible.
	VerifyVisibleNotification(ctx context.Context, in *VerifyVisibleNotificationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Creates a new connection to the Chrome URL in the request and evaluates the expression in the request on it.
	EvalExpressionInChromeURL(ctx context.Context, in *EvalExpressionInChromeUrlRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Battery power utilities RPCs.
	// Fetches necessary battery status.
	BatteryStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BatteryStatusResponse, error)
	// Charges the DUT to the specified value.
	BatteryCharge(ctx context.Context, in *BatteryChargeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Drains the DUT to the specified value.
	BatteryDrain(ctx context.Context, in *BatteryDrainRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type policyServiceClient struct {
	cc *grpc.ClientConn
}

func NewPolicyServiceClient(cc *grpc.ClientConn) PolicyServiceClient {
	return &policyServiceClient{cc}
}

func (c *policyServiceClient) EnrollUsingChrome(ctx context.Context, in *EnrollUsingChromeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/EnrollUsingChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) UpdatePolicies(ctx context.Context, in *UpdatePoliciesRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/UpdatePolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) CheckChromeAndFakeDMS(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/CheckChromeAndFakeDMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) StopChromeAndFakeDMS(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/StopChromeAndFakeDMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) CreateFakeDMSDir(ctx context.Context, in *CreateFakeDMSDirRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/CreateFakeDMSDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) RemoveFakeDMSDir(ctx context.Context, in *RemoveFakeDMSDirRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/RemoveFakeDMSDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) StartExternalDataServer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/StartExternalDataServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) ServePolicyData(ctx context.Context, in *ServePolicyDataRequest, opts ...grpc.CallOption) (*ServePolicyDataResponse, error) {
	out := new(ServePolicyDataResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/ServePolicyData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) StopExternalDataServer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/StopExternalDataServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) EvalStatementInExtension(ctx context.Context, in *EvalInExtensionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/EvalStatementInExtension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) EvalInExtension(ctx context.Context, in *EvalInExtensionRequest, opts ...grpc.CallOption) (*EvalInExtensionResponse, error) {
	out := new(EvalInExtensionResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/EvalInExtension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) VerifyVisibleNotification(ctx context.Context, in *VerifyVisibleNotificationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/VerifyVisibleNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) EvalExpressionInChromeURL(ctx context.Context, in *EvalExpressionInChromeUrlRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/EvalExpressionInChromeURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) BatteryStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BatteryStatusResponse, error) {
	out := new(BatteryStatusResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/BatteryStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) BatteryCharge(ctx context.Context, in *BatteryChargeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/BatteryCharge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) BatteryDrain(ctx context.Context, in *BatteryDrainRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/BatteryDrain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicyServiceServer is the server API for PolicyService service.
type PolicyServiceServer interface {
	EnrollUsingChrome(context.Context, *EnrollUsingChromeRequest) (*empty.Empty, error)
	UpdatePolicies(context.Context, *UpdatePoliciesRequest) (*empty.Empty, error)
	CheckChromeAndFakeDMS(context.Context, *empty.Empty) (*empty.Empty, error)
	StopChromeAndFakeDMS(context.Context, *empty.Empty) (*empty.Empty, error)
	CreateFakeDMSDir(context.Context, *CreateFakeDMSDirRequest) (*empty.Empty, error)
	RemoveFakeDMSDir(context.Context, *RemoveFakeDMSDirRequest) (*empty.Empty, error)
	StartExternalDataServer(context.Context, *empty.Empty) (*empty.Empty, error)
	ServePolicyData(context.Context, *ServePolicyDataRequest) (*ServePolicyDataResponse, error)
	StopExternalDataServer(context.Context, *empty.Empty) (*empty.Empty, error)
	EvalStatementInExtension(context.Context, *EvalInExtensionRequest) (*empty.Empty, error)
	EvalInExtension(context.Context, *EvalInExtensionRequest) (*EvalInExtensionResponse, error)
	// Verifies that the notification corresponding to the id in the request is visible.
	VerifyVisibleNotification(context.Context, *VerifyVisibleNotificationRequest) (*empty.Empty, error)
	// Creates a new connection to the Chrome URL in the request and evaluates the expression in the request on it.
	EvalExpressionInChromeURL(context.Context, *EvalExpressionInChromeUrlRequest) (*empty.Empty, error)
	// Battery power utilities RPCs.
	// Fetches necessary battery status.
	BatteryStatus(context.Context, *empty.Empty) (*BatteryStatusResponse, error)
	// Charges the DUT to the specified value.
	BatteryCharge(context.Context, *BatteryChargeRequest) (*empty.Empty, error)
	// Drains the DUT to the specified value.
	BatteryDrain(context.Context, *BatteryDrainRequest) (*empty.Empty, error)
}

// UnimplementedPolicyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPolicyServiceServer struct {
}

func (*UnimplementedPolicyServiceServer) EnrollUsingChrome(ctx context.Context, req *EnrollUsingChromeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollUsingChrome not implemented")
}
func (*UnimplementedPolicyServiceServer) UpdatePolicies(ctx context.Context, req *UpdatePoliciesRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicies not implemented")
}
func (*UnimplementedPolicyServiceServer) CheckChromeAndFakeDMS(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckChromeAndFakeDMS not implemented")
}
func (*UnimplementedPolicyServiceServer) StopChromeAndFakeDMS(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopChromeAndFakeDMS not implemented")
}
func (*UnimplementedPolicyServiceServer) CreateFakeDMSDir(ctx context.Context, req *CreateFakeDMSDirRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFakeDMSDir not implemented")
}
func (*UnimplementedPolicyServiceServer) RemoveFakeDMSDir(ctx context.Context, req *RemoveFakeDMSDirRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFakeDMSDir not implemented")
}
func (*UnimplementedPolicyServiceServer) StartExternalDataServer(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartExternalDataServer not implemented")
}
func (*UnimplementedPolicyServiceServer) ServePolicyData(ctx context.Context, req *ServePolicyDataRequest) (*ServePolicyDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServePolicyData not implemented")
}
func (*UnimplementedPolicyServiceServer) StopExternalDataServer(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopExternalDataServer not implemented")
}
func (*UnimplementedPolicyServiceServer) EvalStatementInExtension(ctx context.Context, req *EvalInExtensionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvalStatementInExtension not implemented")
}
func (*UnimplementedPolicyServiceServer) EvalInExtension(ctx context.Context, req *EvalInExtensionRequest) (*EvalInExtensionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvalInExtension not implemented")
}
func (*UnimplementedPolicyServiceServer) VerifyVisibleNotification(ctx context.Context, req *VerifyVisibleNotificationRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyVisibleNotification not implemented")
}
func (*UnimplementedPolicyServiceServer) EvalExpressionInChromeURL(ctx context.Context, req *EvalExpressionInChromeUrlRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvalExpressionInChromeURL not implemented")
}
func (*UnimplementedPolicyServiceServer) BatteryStatus(ctx context.Context, req *empty.Empty) (*BatteryStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatteryStatus not implemented")
}
func (*UnimplementedPolicyServiceServer) BatteryCharge(ctx context.Context, req *BatteryChargeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatteryCharge not implemented")
}
func (*UnimplementedPolicyServiceServer) BatteryDrain(ctx context.Context, req *BatteryDrainRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatteryDrain not implemented")
}

func RegisterPolicyServiceServer(s *grpc.Server, srv PolicyServiceServer) {
	s.RegisterService(&_PolicyService_serviceDesc, srv)
}

func _PolicyService_EnrollUsingChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollUsingChromeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).EnrollUsingChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/EnrollUsingChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).EnrollUsingChrome(ctx, req.(*EnrollUsingChromeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_UpdatePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).UpdatePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/UpdatePolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).UpdatePolicies(ctx, req.(*UpdatePoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_CheckChromeAndFakeDMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).CheckChromeAndFakeDMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/CheckChromeAndFakeDMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).CheckChromeAndFakeDMS(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_StopChromeAndFakeDMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).StopChromeAndFakeDMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/StopChromeAndFakeDMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).StopChromeAndFakeDMS(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_CreateFakeDMSDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFakeDMSDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).CreateFakeDMSDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/CreateFakeDMSDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).CreateFakeDMSDir(ctx, req.(*CreateFakeDMSDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_RemoveFakeDMSDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFakeDMSDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).RemoveFakeDMSDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/RemoveFakeDMSDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).RemoveFakeDMSDir(ctx, req.(*RemoveFakeDMSDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_StartExternalDataServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).StartExternalDataServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/StartExternalDataServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).StartExternalDataServer(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_ServePolicyData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServePolicyDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).ServePolicyData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/ServePolicyData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).ServePolicyData(ctx, req.(*ServePolicyDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_StopExternalDataServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).StopExternalDataServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/StopExternalDataServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).StopExternalDataServer(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_EvalStatementInExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvalInExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).EvalStatementInExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/EvalStatementInExtension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).EvalStatementInExtension(ctx, req.(*EvalInExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_EvalInExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvalInExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).EvalInExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/EvalInExtension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).EvalInExtension(ctx, req.(*EvalInExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_VerifyVisibleNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyVisibleNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).VerifyVisibleNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/VerifyVisibleNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).VerifyVisibleNotification(ctx, req.(*VerifyVisibleNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_EvalExpressionInChromeURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvalExpressionInChromeUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).EvalExpressionInChromeURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/EvalExpressionInChromeURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).EvalExpressionInChromeURL(ctx, req.(*EvalExpressionInChromeUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_BatteryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).BatteryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/BatteryStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).BatteryStatus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_BatteryCharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatteryChargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).BatteryCharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/BatteryCharge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).BatteryCharge(ctx, req.(*BatteryChargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_BatteryDrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatteryDrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).BatteryDrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/BatteryDrain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).BatteryDrain(ctx, req.(*BatteryDrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PolicyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.policy.PolicyService",
	HandlerType: (*PolicyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnrollUsingChrome",
			Handler:    _PolicyService_EnrollUsingChrome_Handler,
		},
		{
			MethodName: "UpdatePolicies",
			Handler:    _PolicyService_UpdatePolicies_Handler,
		},
		{
			MethodName: "CheckChromeAndFakeDMS",
			Handler:    _PolicyService_CheckChromeAndFakeDMS_Handler,
		},
		{
			MethodName: "StopChromeAndFakeDMS",
			Handler:    _PolicyService_StopChromeAndFakeDMS_Handler,
		},
		{
			MethodName: "CreateFakeDMSDir",
			Handler:    _PolicyService_CreateFakeDMSDir_Handler,
		},
		{
			MethodName: "RemoveFakeDMSDir",
			Handler:    _PolicyService_RemoveFakeDMSDir_Handler,
		},
		{
			MethodName: "StartExternalDataServer",
			Handler:    _PolicyService_StartExternalDataServer_Handler,
		},
		{
			MethodName: "ServePolicyData",
			Handler:    _PolicyService_ServePolicyData_Handler,
		},
		{
			MethodName: "StopExternalDataServer",
			Handler:    _PolicyService_StopExternalDataServer_Handler,
		},
		{
			MethodName: "EvalStatementInExtension",
			Handler:    _PolicyService_EvalStatementInExtension_Handler,
		},
		{
			MethodName: "EvalInExtension",
			Handler:    _PolicyService_EvalInExtension_Handler,
		},
		{
			MethodName: "VerifyVisibleNotification",
			Handler:    _PolicyService_VerifyVisibleNotification_Handler,
		},
		{
			MethodName: "EvalExpressionInChromeURL",
			Handler:    _PolicyService_EvalExpressionInChromeURL_Handler,
		},
		{
			MethodName: "BatteryStatus",
			Handler:    _PolicyService_BatteryStatus_Handler,
		},
		{
			MethodName: "BatteryCharge",
			Handler:    _PolicyService_BatteryCharge_Handler,
		},
		{
			MethodName: "BatteryDrain",
			Handler:    _PolicyService_BatteryDrain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "policy.proto",
}
