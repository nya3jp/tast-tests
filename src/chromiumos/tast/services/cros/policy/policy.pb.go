// Code generated by protoc-gen-go. DO NOT EDIT.
// source: policy.proto

package policy

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PolicyBlob struct {
	PolicyBlob           []byte   `protobuf:"bytes,1,opt,name=policy_blob,json=policyBlob,proto3" json:"policy_blob,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PolicyBlob) Reset()         { *m = PolicyBlob{} }
func (m *PolicyBlob) String() string { return proto.CompactTextString(m) }
func (*PolicyBlob) ProtoMessage()    {}
func (*PolicyBlob) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{0}
}

func (m *PolicyBlob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolicyBlob.Unmarshal(m, b)
}
func (m *PolicyBlob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolicyBlob.Marshal(b, m, deterministic)
}
func (m *PolicyBlob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyBlob.Merge(m, src)
}
func (m *PolicyBlob) XXX_Size() int {
	return xxx_messageInfo_PolicyBlob.Size(m)
}
func (m *PolicyBlob) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyBlob.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyBlob proto.InternalMessageInfo

func (m *PolicyBlob) GetPolicyBlob() []byte {
	if m != nil {
		return m.PolicyBlob
	}
	return nil
}

type StartURLPolicyServerRequest struct {
	Contents             []byte   `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartURLPolicyServerRequest) Reset()         { *m = StartURLPolicyServerRequest{} }
func (m *StartURLPolicyServerRequest) String() string { return proto.CompactTextString(m) }
func (*StartURLPolicyServerRequest) ProtoMessage()    {}
func (*StartURLPolicyServerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{1}
}

func (m *StartURLPolicyServerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartURLPolicyServerRequest.Unmarshal(m, b)
}
func (m *StartURLPolicyServerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartURLPolicyServerRequest.Marshal(b, m, deterministic)
}
func (m *StartURLPolicyServerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartURLPolicyServerRequest.Merge(m, src)
}
func (m *StartURLPolicyServerRequest) XXX_Size() int {
	return xxx_messageInfo_StartURLPolicyServerRequest.Size(m)
}
func (m *StartURLPolicyServerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartURLPolicyServerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartURLPolicyServerRequest proto.InternalMessageInfo

func (m *StartURLPolicyServerRequest) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

type StartURLPolicyServerResponse struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Hash                 string   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartURLPolicyServerResponse) Reset()         { *m = StartURLPolicyServerResponse{} }
func (m *StartURLPolicyServerResponse) String() string { return proto.CompactTextString(m) }
func (*StartURLPolicyServerResponse) ProtoMessage()    {}
func (*StartURLPolicyServerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{2}
}

func (m *StartURLPolicyServerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartURLPolicyServerResponse.Unmarshal(m, b)
}
func (m *StartURLPolicyServerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartURLPolicyServerResponse.Marshal(b, m, deterministic)
}
func (m *StartURLPolicyServerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartURLPolicyServerResponse.Merge(m, src)
}
func (m *StartURLPolicyServerResponse) XXX_Size() int {
	return xxx_messageInfo_StartURLPolicyServerResponse.Size(m)
}
func (m *StartURLPolicyServerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartURLPolicyServerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartURLPolicyServerResponse proto.InternalMessageInfo

func (m *StartURLPolicyServerResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *StartURLPolicyServerResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type StopURLPolicyServerRequest struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopURLPolicyServerRequest) Reset()         { *m = StopURLPolicyServerRequest{} }
func (m *StopURLPolicyServerRequest) String() string { return proto.CompactTextString(m) }
func (*StopURLPolicyServerRequest) ProtoMessage()    {}
func (*StopURLPolicyServerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{3}
}

func (m *StopURLPolicyServerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopURLPolicyServerRequest.Unmarshal(m, b)
}
func (m *StopURLPolicyServerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopURLPolicyServerRequest.Marshal(b, m, deterministic)
}
func (m *StopURLPolicyServerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopURLPolicyServerRequest.Merge(m, src)
}
func (m *StopURLPolicyServerRequest) XXX_Size() int {
	return xxx_messageInfo_StopURLPolicyServerRequest.Size(m)
}
func (m *StopURLPolicyServerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopURLPolicyServerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopURLPolicyServerRequest proto.InternalMessageInfo

func (m *StopURLPolicyServerRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type EvalOnTestAPIConnRequest struct {
	Expression           string   `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	IsPromise            bool     `protobuf:"varint,2,opt,name=is_promise,json=isPromise,proto3" json:"is_promise,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EvalOnTestAPIConnRequest) Reset()         { *m = EvalOnTestAPIConnRequest{} }
func (m *EvalOnTestAPIConnRequest) String() string { return proto.CompactTextString(m) }
func (*EvalOnTestAPIConnRequest) ProtoMessage()    {}
func (*EvalOnTestAPIConnRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{4}
}

func (m *EvalOnTestAPIConnRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvalOnTestAPIConnRequest.Unmarshal(m, b)
}
func (m *EvalOnTestAPIConnRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvalOnTestAPIConnRequest.Marshal(b, m, deterministic)
}
func (m *EvalOnTestAPIConnRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvalOnTestAPIConnRequest.Merge(m, src)
}
func (m *EvalOnTestAPIConnRequest) XXX_Size() int {
	return xxx_messageInfo_EvalOnTestAPIConnRequest.Size(m)
}
func (m *EvalOnTestAPIConnRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EvalOnTestAPIConnRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EvalOnTestAPIConnRequest proto.InternalMessageInfo

func (m *EvalOnTestAPIConnRequest) GetExpression() string {
	if m != nil {
		return m.Expression
	}
	return ""
}

func (m *EvalOnTestAPIConnRequest) GetIsPromise() bool {
	if m != nil {
		return m.IsPromise
	}
	return false
}

type EvalOnTestAPIConnResponse struct {
	Result               []byte   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EvalOnTestAPIConnResponse) Reset()         { *m = EvalOnTestAPIConnResponse{} }
func (m *EvalOnTestAPIConnResponse) String() string { return proto.CompactTextString(m) }
func (*EvalOnTestAPIConnResponse) ProtoMessage()    {}
func (*EvalOnTestAPIConnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{5}
}

func (m *EvalOnTestAPIConnResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvalOnTestAPIConnResponse.Unmarshal(m, b)
}
func (m *EvalOnTestAPIConnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvalOnTestAPIConnResponse.Marshal(b, m, deterministic)
}
func (m *EvalOnTestAPIConnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvalOnTestAPIConnResponse.Merge(m, src)
}
func (m *EvalOnTestAPIConnResponse) XXX_Size() int {
	return xxx_messageInfo_EvalOnTestAPIConnResponse.Size(m)
}
func (m *EvalOnTestAPIConnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EvalOnTestAPIConnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EvalOnTestAPIConnResponse proto.InternalMessageInfo

func (m *EvalOnTestAPIConnResponse) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*PolicyBlob)(nil), "tast.cros.policy.PolicyBlob")
	proto.RegisterType((*StartURLPolicyServerRequest)(nil), "tast.cros.policy.StartURLPolicyServerRequest")
	proto.RegisterType((*StartURLPolicyServerResponse)(nil), "tast.cros.policy.StartURLPolicyServerResponse")
	proto.RegisterType((*StopURLPolicyServerRequest)(nil), "tast.cros.policy.StopURLPolicyServerRequest")
	proto.RegisterType((*EvalOnTestAPIConnRequest)(nil), "tast.cros.policy.EvalOnTestAPIConnRequest")
	proto.RegisterType((*EvalOnTestAPIConnResponse)(nil), "tast.cros.policy.EvalOnTestAPIConnResponse")
}

func init() { proto.RegisterFile("policy.proto", fileDescriptor_ac3b897852294d6a) }

var fileDescriptor_ac3b897852294d6a = []byte{
	// 438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x5d, 0x6b, 0xd4, 0x40,
	0x14, 0x6d, 0xb5, 0x94, 0xf6, 0xb6, 0x4a, 0x3b, 0x4a, 0x59, 0xd3, 0xfa, 0x41, 0x10, 0x11, 0xb5,
	0x13, 0xb0, 0x4f, 0xbe, 0x28, 0x76, 0x5d, 0x50, 0x14, 0x5c, 0xb2, 0xee, 0x83, 0x82, 0x94, 0x24,
	0x5e, 0x77, 0x07, 0x67, 0xe7, 0x8e, 0x73, 0x27, 0x55, 0x7f, 0xb5, 0x7f, 0x41, 0x92, 0xc9, 0xb6,
	0xd2, 0x4d, 0x96, 0xd2, 0xb7, 0x99, 0x9b, 0x73, 0x4e, 0xee, 0x99, 0x73, 0x60, 0xdb, 0x92, 0x56,
	0xc5, 0x1f, 0x69, 0x1d, 0x79, 0x12, 0x3b, 0x3e, 0x63, 0x2f, 0x0b, 0x47, 0x2c, 0xc3, 0x3c, 0xda,
	0x9f, 0x10, 0x4d, 0x34, 0x26, 0xf5, 0xf7, 0xbc, 0xfc, 0x9e, 0xe0, 0xcc, 0xfa, 0x06, 0x1e, 0x1f,
	0x02, 0x0c, 0x6b, 0xd8, 0xb1, 0xa6, 0x5c, 0xdc, 0x87, 0xad, 0x40, 0x3a, 0xc9, 0x35, 0xe5, 0xbd,
	0xd5, 0x07, 0xab, 0x8f, 0xb7, 0x53, 0xb0, 0x67, 0x80, 0xf8, 0x05, 0xec, 0x8f, 0x7c, 0xe6, 0xfc,
	0x38, 0xfd, 0x10, 0x68, 0x23, 0x74, 0xa7, 0xe8, 0x52, 0xfc, 0x59, 0x22, 0x7b, 0x11, 0xc1, 0x46,
	0x41, 0xc6, 0xa3, 0xf1, 0xdc, 0x90, 0xcf, 0xee, 0xf1, 0x1b, 0x38, 0x68, 0xa7, 0xb2, 0x25, 0xc3,
	0x28, 0x76, 0xe0, 0x7a, 0xe9, 0x74, 0x4d, 0xdb, 0x4c, 0xab, 0xa3, 0x10, 0xb0, 0x36, 0xcd, 0x78,
	0xda, 0xbb, 0x56, 0x8f, 0xea, 0x73, 0x2c, 0x21, 0x1a, 0x79, 0xb2, 0x1d, 0xff, 0x5f, 0xd0, 0x88,
	0x3f, 0x43, 0x6f, 0x70, 0x9a, 0xe9, 0x8f, 0xe6, 0x13, 0xb2, 0x7f, 0x3d, 0x7c, 0xd7, 0x27, 0x63,
	0xe6, 0xe8, 0x7b, 0x00, 0xf8, 0xdb, 0x3a, 0x64, 0x56, 0x64, 0x1a, 0xd2, 0x7f, 0x13, 0x71, 0x17,
	0x40, 0xf1, 0x89, 0x75, 0x34, 0x53, 0x8c, 0xf5, 0x16, 0x1b, 0xe9, 0xa6, 0xe2, 0x61, 0x18, 0xc4,
	0x47, 0x70, 0xa7, 0x45, 0xba, 0x71, 0xb3, 0x07, 0xeb, 0x0e, 0xb9, 0xd4, 0xbe, 0x79, 0x87, 0xe6,
	0xf6, 0xfc, 0xef, 0x1a, 0xdc, 0x38, 0xdf, 0x5c, 0x15, 0x28, 0xde, 0xc3, 0xee, 0xc0, 0x38, 0xd2,
	0x7a, 0xcc, 0xca, 0x4c, 0xfa, 0x53, 0x47, 0x33, 0x14, 0x07, 0xf2, 0x62, 0x8c, 0xf2, 0x3c, 0xa6,
	0x68, 0x4f, 0x86, 0x48, 0xe5, 0x3c, 0x52, 0x39, 0xa8, 0x22, 0x8d, 0x57, 0xc4, 0x5b, 0xb8, 0x39,
	0xb6, 0xdf, 0x32, 0x8f, 0x35, 0x5a, 0x21, 0x5f, 0x59, 0xe9, 0x15, 0x6c, 0xf5, 0xa7, 0x58, 0xfc,
	0x68, 0x16, 0xea, 0x00, 0x2e, 0x11, 0x78, 0x09, 0x50, 0x25, 0x75, 0x65, 0xfe, 0x2f, 0xb8, 0xdd,
	0xd6, 0x17, 0x71, 0xb8, 0x68, 0x68, 0x49, 0x25, 0x23, 0x79, 0x59, 0x78, 0x08, 0x2e, 0x5e, 0x11,
	0x5f, 0xe1, 0x56, 0x4b, 0xc5, 0xc4, 0xb3, 0x36, 0xa1, 0xae, 0x26, 0x2e, 0xf1, 0x65, 0x60, 0x77,
	0xa1, 0x36, 0xe2, 0xc9, 0xa2, 0x78, 0x57, 0x6d, 0xa3, 0xa7, 0x97, 0xc2, 0xce, 0xed, 0x1c, 0x3f,
	0xfa, 0xf2, 0xb0, 0xa8, 0x32, 0x50, 0xe5, 0x8c, 0x38, 0xa9, 0xa8, 0x09, 0x87, 0xea, 0x71, 0x52,
	0x69, 0x24, 0x41, 0x23, 0x5f, 0xaf, 0x37, 0x3d, 0xfa, 0x17, 0x00, 0x00, 0xff, 0xff, 0xaf, 0xce,
	0x87, 0xf8, 0x4f, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PolicyServiceClient is the client API for PolicyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PolicyServiceClient interface {
	EnrollUsingChrome(ctx context.Context, in *PolicyBlob, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdatePolicies(ctx context.Context, in *PolicyBlob, opts ...grpc.CallOption) (*empty.Empty, error)
	CheckChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	StopChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	StartURLPolicyServer(ctx context.Context, in *StartURLPolicyServerRequest, opts ...grpc.CallOption) (*StartURLPolicyServerResponse, error)
	StopURLPolicyServer(ctx context.Context, in *StopURLPolicyServerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	EvalOnTestAPIConn(ctx context.Context, in *EvalOnTestAPIConnRequest, opts ...grpc.CallOption) (*EvalOnTestAPIConnResponse, error)
}

type policyServiceClient struct {
	cc *grpc.ClientConn
}

func NewPolicyServiceClient(cc *grpc.ClientConn) PolicyServiceClient {
	return &policyServiceClient{cc}
}

func (c *policyServiceClient) EnrollUsingChrome(ctx context.Context, in *PolicyBlob, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/EnrollUsingChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) UpdatePolicies(ctx context.Context, in *PolicyBlob, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/UpdatePolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) CheckChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/CheckChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) StopChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/StopChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) StartURLPolicyServer(ctx context.Context, in *StartURLPolicyServerRequest, opts ...grpc.CallOption) (*StartURLPolicyServerResponse, error) {
	out := new(StartURLPolicyServerResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/StartURLPolicyServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) StopURLPolicyServer(ctx context.Context, in *StopURLPolicyServerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/StopURLPolicyServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) EvalOnTestAPIConn(ctx context.Context, in *EvalOnTestAPIConnRequest, opts ...grpc.CallOption) (*EvalOnTestAPIConnResponse, error) {
	out := new(EvalOnTestAPIConnResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/EvalOnTestAPIConn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicyServiceServer is the server API for PolicyService service.
type PolicyServiceServer interface {
	EnrollUsingChrome(context.Context, *PolicyBlob) (*empty.Empty, error)
	UpdatePolicies(context.Context, *PolicyBlob) (*empty.Empty, error)
	CheckChrome(context.Context, *empty.Empty) (*empty.Empty, error)
	StopChrome(context.Context, *empty.Empty) (*empty.Empty, error)
	StartURLPolicyServer(context.Context, *StartURLPolicyServerRequest) (*StartURLPolicyServerResponse, error)
	StopURLPolicyServer(context.Context, *StopURLPolicyServerRequest) (*empty.Empty, error)
	EvalOnTestAPIConn(context.Context, *EvalOnTestAPIConnRequest) (*EvalOnTestAPIConnResponse, error)
}

// UnimplementedPolicyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPolicyServiceServer struct {
}

func (*UnimplementedPolicyServiceServer) EnrollUsingChrome(ctx context.Context, req *PolicyBlob) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollUsingChrome not implemented")
}
func (*UnimplementedPolicyServiceServer) UpdatePolicies(ctx context.Context, req *PolicyBlob) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicies not implemented")
}
func (*UnimplementedPolicyServiceServer) CheckChrome(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckChrome not implemented")
}
func (*UnimplementedPolicyServiceServer) StopChrome(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopChrome not implemented")
}
func (*UnimplementedPolicyServiceServer) StartURLPolicyServer(ctx context.Context, req *StartURLPolicyServerRequest) (*StartURLPolicyServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartURLPolicyServer not implemented")
}
func (*UnimplementedPolicyServiceServer) StopURLPolicyServer(ctx context.Context, req *StopURLPolicyServerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopURLPolicyServer not implemented")
}
func (*UnimplementedPolicyServiceServer) EvalOnTestAPIConn(ctx context.Context, req *EvalOnTestAPIConnRequest) (*EvalOnTestAPIConnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvalOnTestAPIConn not implemented")
}

func RegisterPolicyServiceServer(s *grpc.Server, srv PolicyServiceServer) {
	s.RegisterService(&_PolicyService_serviceDesc, srv)
}

func _PolicyService_EnrollUsingChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyBlob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).EnrollUsingChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/EnrollUsingChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).EnrollUsingChrome(ctx, req.(*PolicyBlob))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_UpdatePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyBlob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).UpdatePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/UpdatePolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).UpdatePolicies(ctx, req.(*PolicyBlob))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_CheckChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).CheckChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/CheckChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).CheckChrome(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_StopChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).StopChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/StopChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).StopChrome(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_StartURLPolicyServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartURLPolicyServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).StartURLPolicyServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/StartURLPolicyServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).StartURLPolicyServer(ctx, req.(*StartURLPolicyServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_StopURLPolicyServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopURLPolicyServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).StopURLPolicyServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/StopURLPolicyServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).StopURLPolicyServer(ctx, req.(*StopURLPolicyServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_EvalOnTestAPIConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvalOnTestAPIConnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).EvalOnTestAPIConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/EvalOnTestAPIConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).EvalOnTestAPIConn(ctx, req.(*EvalOnTestAPIConnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PolicyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.policy.PolicyService",
	HandlerType: (*PolicyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnrollUsingChrome",
			Handler:    _PolicyService_EnrollUsingChrome_Handler,
		},
		{
			MethodName: "UpdatePolicies",
			Handler:    _PolicyService_UpdatePolicies_Handler,
		},
		{
			MethodName: "CheckChrome",
			Handler:    _PolicyService_CheckChrome_Handler,
		},
		{
			MethodName: "StopChrome",
			Handler:    _PolicyService_StopChrome_Handler,
		},
		{
			MethodName: "StartURLPolicyServer",
			Handler:    _PolicyService_StartURLPolicyServer_Handler,
		},
		{
			MethodName: "StopURLPolicyServer",
			Handler:    _PolicyService_StopURLPolicyServer_Handler,
		},
		{
			MethodName: "EvalOnTestAPIConn",
			Handler:    _PolicyService_EvalOnTestAPIConn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "policy.proto",
}
