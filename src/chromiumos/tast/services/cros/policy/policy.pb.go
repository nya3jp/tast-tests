// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: policy/policy.proto

package policy

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnrollUsingChromeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyJson []byte       `protobuf:"bytes,1,opt,name=policy_json,json=policyJson,proto3" json:"policy_json,omitempty"`
	Username   string       `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Extensions []*Extension `protobuf:"bytes,3,rep,name=extensions,proto3" json:"extensions,omitempty"`
	ExtraArgs  string       `protobuf:"bytes,4,opt,name=extra_args,json=extraArgs,proto3" json:"extra_args,omitempty"`
	FakedmsDir string       `protobuf:"bytes,5,opt,name=fakedms_dir,json=fakedmsDir,proto3" json:"fakedms_dir,omitempty"`
	SkipLogin  bool         `protobuf:"varint,6,opt,name=skip_login,json=skipLogin,proto3" json:"skip_login,omitempty"`
}

func (x *EnrollUsingChromeRequest) Reset() {
	*x = EnrollUsingChromeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrollUsingChromeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrollUsingChromeRequest) ProtoMessage() {}

func (x *EnrollUsingChromeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrollUsingChromeRequest.ProtoReflect.Descriptor instead.
func (*EnrollUsingChromeRequest) Descriptor() ([]byte, []int) {
	return file_policy_policy_proto_rawDescGZIP(), []int{0}
}

func (x *EnrollUsingChromeRequest) GetPolicyJson() []byte {
	if x != nil {
		return x.PolicyJson
	}
	return nil
}

func (x *EnrollUsingChromeRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *EnrollUsingChromeRequest) GetExtensions() []*Extension {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *EnrollUsingChromeRequest) GetExtraArgs() string {
	if x != nil {
		return x.ExtraArgs
	}
	return ""
}

func (x *EnrollUsingChromeRequest) GetFakedmsDir() string {
	if x != nil {
		return x.FakedmsDir
	}
	return ""
}

func (x *EnrollUsingChromeRequest) GetSkipLogin() bool {
	if x != nil {
		return x.SkipLogin
	}
	return false
}

type GAIAEnrollUsingChromeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username    string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password    string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	DmserverURL string `protobuf:"bytes,3,opt,name=dmserverURL,proto3" json:"dmserverURL,omitempty"`
}

func (x *GAIAEnrollUsingChromeRequest) Reset() {
	*x = GAIAEnrollUsingChromeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GAIAEnrollUsingChromeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GAIAEnrollUsingChromeRequest) ProtoMessage() {}

func (x *GAIAEnrollUsingChromeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GAIAEnrollUsingChromeRequest.ProtoReflect.Descriptor instead.
func (*GAIAEnrollUsingChromeRequest) Descriptor() ([]byte, []int) {
	return file_policy_policy_proto_rawDescGZIP(), []int{1}
}

func (x *GAIAEnrollUsingChromeRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GAIAEnrollUsingChromeRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *GAIAEnrollUsingChromeRequest) GetDmserverURL() string {
	if x != nil {
		return x.DmserverURL
	}
	return ""
}

type GAIAEnrollAndLoginUsingChromeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username    string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password    string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	DmserverURL string `protobuf:"bytes,3,opt,name=dmserverURL,proto3" json:"dmserverURL,omitempty"`
}

func (x *GAIAEnrollAndLoginUsingChromeRequest) Reset() {
	*x = GAIAEnrollAndLoginUsingChromeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GAIAEnrollAndLoginUsingChromeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GAIAEnrollAndLoginUsingChromeRequest) ProtoMessage() {}

func (x *GAIAEnrollAndLoginUsingChromeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GAIAEnrollAndLoginUsingChromeRequest.ProtoReflect.Descriptor instead.
func (*GAIAEnrollAndLoginUsingChromeRequest) Descriptor() ([]byte, []int) {
	return file_policy_policy_proto_rawDescGZIP(), []int{2}
}

func (x *GAIAEnrollAndLoginUsingChromeRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GAIAEnrollAndLoginUsingChromeRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *GAIAEnrollAndLoginUsingChromeRequest) GetDmserverURL() string {
	if x != nil {
		return x.DmserverURL
	}
	return ""
}

type CreateFakeDMSDirRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *CreateFakeDMSDirRequest) Reset() {
	*x = CreateFakeDMSDirRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFakeDMSDirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFakeDMSDirRequest) ProtoMessage() {}

func (x *CreateFakeDMSDirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFakeDMSDirRequest.ProtoReflect.Descriptor instead.
func (*CreateFakeDMSDirRequest) Descriptor() ([]byte, []int) {
	return file_policy_policy_proto_rawDescGZIP(), []int{3}
}

func (x *CreateFakeDMSDirRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type RemoveFakeDMSDirRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *RemoveFakeDMSDirRequest) Reset() {
	*x = RemoveFakeDMSDirRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFakeDMSDirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFakeDMSDirRequest) ProtoMessage() {}

func (x *RemoveFakeDMSDirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFakeDMSDirRequest.ProtoReflect.Descriptor instead.
func (*RemoveFakeDMSDirRequest) Descriptor() ([]byte, []int) {
	return file_policy_policy_proto_rawDescGZIP(), []int{4}
}

func (x *RemoveFakeDMSDirRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type UpdatePoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyJson []byte `protobuf:"bytes,1,opt,name=policy_json,json=policyJson,proto3" json:"policy_json,omitempty"`
}

func (x *UpdatePoliciesRequest) Reset() {
	*x = UpdatePoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_policy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePoliciesRequest) ProtoMessage() {}

func (x *UpdatePoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_policy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePoliciesRequest.ProtoReflect.Descriptor instead.
func (*UpdatePoliciesRequest) Descriptor() ([]byte, []int) {
	return file_policy_policy_proto_rawDescGZIP(), []int{5}
}

func (x *UpdatePoliciesRequest) GetPolicyJson() []byte {
	if x != nil {
		return x.PolicyJson
	}
	return nil
}

type ServePolicyDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contents []byte `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *ServePolicyDataRequest) Reset() {
	*x = ServePolicyDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_policy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServePolicyDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServePolicyDataRequest) ProtoMessage() {}

func (x *ServePolicyDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_policy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServePolicyDataRequest.ProtoReflect.Descriptor instead.
func (*ServePolicyDataRequest) Descriptor() ([]byte, []int) {
	return file_policy_policy_proto_rawDescGZIP(), []int{6}
}

func (x *ServePolicyDataRequest) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

type ServePolicyDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url  string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *ServePolicyDataResponse) Reset() {
	*x = ServePolicyDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_policy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServePolicyDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServePolicyDataResponse) ProtoMessage() {}

func (x *ServePolicyDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_policy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServePolicyDataResponse.ProtoReflect.Descriptor instead.
func (*ServePolicyDataResponse) Descriptor() ([]byte, []int) {
	return file_policy_policy_proto_rawDescGZIP(), []int{7}
}

func (x *ServePolicyDataResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ServePolicyDataResponse) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type EvalInExtensionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtensionId string `protobuf:"bytes,1,opt,name=extension_id,json=extensionId,proto3" json:"extension_id,omitempty"`
	Expression  string `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *EvalInExtensionRequest) Reset() {
	*x = EvalInExtensionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_policy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvalInExtensionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvalInExtensionRequest) ProtoMessage() {}

func (x *EvalInExtensionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_policy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvalInExtensionRequest.ProtoReflect.Descriptor instead.
func (*EvalInExtensionRequest) Descriptor() ([]byte, []int) {
	return file_policy_policy_proto_rawDescGZIP(), []int{8}
}

func (x *EvalInExtensionRequest) GetExtensionId() string {
	if x != nil {
		return x.ExtensionId
	}
	return ""
}

func (x *EvalInExtensionRequest) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

type EvalInExtensionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *EvalInExtensionResponse) Reset() {
	*x = EvalInExtensionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_policy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvalInExtensionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvalInExtensionResponse) ProtoMessage() {}

func (x *EvalInExtensionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_policy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvalInExtensionResponse.ProtoReflect.Descriptor instead.
func (*EvalInExtensionResponse) Descriptor() ([]byte, []int) {
	return file_policy_policy_proto_rawDescGZIP(), []int{9}
}

func (x *EvalInExtensionResponse) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

type ExtensionFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Contents []byte `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *ExtensionFile) Reset() {
	*x = ExtensionFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_policy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionFile) ProtoMessage() {}

func (x *ExtensionFile) ProtoReflect() protoreflect.Message {
	mi := &file_policy_policy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionFile.ProtoReflect.Descriptor instead.
func (*ExtensionFile) Descriptor() ([]byte, []int) {
	return file_policy_policy_proto_rawDescGZIP(), []int{10}
}

func (x *ExtensionFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExtensionFile) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

type Extension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Files []*ExtensionFile `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *Extension) Reset() {
	*x = Extension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_policy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extension) ProtoMessage() {}

func (x *Extension) ProtoReflect() protoreflect.Message {
	mi := &file_policy_policy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extension.ProtoReflect.Descriptor instead.
func (*Extension) Descriptor() ([]byte, []int) {
	return file_policy_policy_proto_rawDescGZIP(), []int{11}
}

func (x *Extension) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Extension) GetFiles() []*ExtensionFile {
	if x != nil {
		return x.Files
	}
	return nil
}

type VerifyVisibleNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotificationId string `protobuf:"bytes,1,opt,name=notification_id,json=notificationId,proto3" json:"notification_id,omitempty"`
}

func (x *VerifyVisibleNotificationRequest) Reset() {
	*x = VerifyVisibleNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_policy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyVisibleNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyVisibleNotificationRequest) ProtoMessage() {}

func (x *VerifyVisibleNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_policy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyVisibleNotificationRequest.ProtoReflect.Descriptor instead.
func (*VerifyVisibleNotificationRequest) Descriptor() ([]byte, []int) {
	return file_policy_policy_proto_rawDescGZIP(), []int{12}
}

func (x *VerifyVisibleNotificationRequest) GetNotificationId() string {
	if x != nil {
		return x.NotificationId
	}
	return ""
}

type EvalExpressionInChromeUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url        string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Expression string `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *EvalExpressionInChromeUrlRequest) Reset() {
	*x = EvalExpressionInChromeUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_policy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvalExpressionInChromeUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvalExpressionInChromeUrlRequest) ProtoMessage() {}

func (x *EvalExpressionInChromeUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_policy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvalExpressionInChromeUrlRequest.ProtoReflect.Descriptor instead.
func (*EvalExpressionInChromeUrlRequest) Descriptor() ([]byte, []int) {
	return file_policy_policy_proto_rawDescGZIP(), []int{13}
}

func (x *EvalExpressionInChromeUrlRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *EvalExpressionInChromeUrlRequest) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

type StartChromeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyJson     []byte `protobuf:"bytes,1,opt,name=policy_json,json=policyJson,proto3" json:"policy_json,omitempty"`
	Username       string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	SkipLogin      bool   `protobuf:"varint,3,opt,name=skip_login,json=skipLogin,proto3" json:"skip_login,omitempty"`
	KeepEnrollment bool   `protobuf:"varint,4,opt,name=keep_enrollment,json=keepEnrollment,proto3" json:"keep_enrollment,omitempty"`
	DeferLogin     bool   `protobuf:"varint,5,opt,name=defer_login,json=deferLogin,proto3" json:"defer_login,omitempty"`
}

func (x *StartChromeRequest) Reset() {
	*x = StartChromeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_policy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartChromeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartChromeRequest) ProtoMessage() {}

func (x *StartChromeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_policy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartChromeRequest.ProtoReflect.Descriptor instead.
func (*StartChromeRequest) Descriptor() ([]byte, []int) {
	return file_policy_policy_proto_rawDescGZIP(), []int{14}
}

func (x *StartChromeRequest) GetPolicyJson() []byte {
	if x != nil {
		return x.PolicyJson
	}
	return nil
}

func (x *StartChromeRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *StartChromeRequest) GetSkipLogin() bool {
	if x != nil {
		return x.SkipLogin
	}
	return false
}

func (x *StartChromeRequest) GetKeepEnrollment() bool {
	if x != nil {
		return x.KeepEnrollment
	}
	return false
}

func (x *StartChromeRequest) GetDeferLogin() bool {
	if x != nil {
		return x.DeferLogin
	}
	return false
}

var File_policy_policy_proto protoreflect.FileDescriptor

var file_policy_policy_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf3, 0x01, 0x0a, 0x18, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x55,
	0x73, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6a, 0x73, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4a, 0x73,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61,
	0x6b, 0x65, 0x64, 0x6d, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x66, 0x61, 0x6b, 0x65, 0x64, 0x6d, 0x73, 0x44, 0x69, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x6b, 0x69, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x73, 0x6b, 0x69, 0x70, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0x78, 0x0a, 0x1c, 0x47, 0x41,
	0x49, 0x41, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x52,
	0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x55, 0x52, 0x4c, 0x22, 0x80, 0x01, 0x0a, 0x24, 0x47, 0x41, 0x49, 0x41, 0x45, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x41, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x73, 0x69, 0x6e, 0x67,
	0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x22, 0x2d, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x61, 0x6b, 0x65, 0x44, 0x4d, 0x53, 0x44, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x2d, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x46, 0x61, 0x6b, 0x65, 0x44, 0x4d, 0x53, 0x44, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x38, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4a, 0x73, 0x6f, 0x6e, 0x22,
	0x34, 0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x3f, 0x0a, 0x17, 0x53, 0x65, 0x72, 0x76, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x5b, 0x0a, 0x16, 0x45, 0x76, 0x61, 0x6c, 0x49, 0x6e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x31, 0x0a, 0x17, 0x45, 0x76, 0x61, 0x6c, 0x49, 0x6e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x3f, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x52, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x20, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x20, 0x45, 0x76, 0x61, 0x6c,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x43, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xba,
	0x01, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6b, 0x65, 0x65, 0x70,
	0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65,
	0x66, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x64, 0x65, 0x66, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x32, 0xd1, 0x0c, 0x0a, 0x0d,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a,
	0x11, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x12, 0x2a, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x55, 0x73, 0x69, 0x6e,
	0x67, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x15, 0x47, 0x41, 0x49, 0x41,
	0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x72, 0x6f, 0x6d,
	0x65, 0x12, 0x2e, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x47, 0x41, 0x49, 0x41, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x55,
	0x73, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x1d, 0x47,
	0x41, 0x49, 0x41, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x41, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x12, 0x36, 0x2e, 0x74,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x47, 0x41, 0x49, 0x41, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x41, 0x6e, 0x64, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x53,
	0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x27, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x41, 0x6e, 0x64, 0x46, 0x61, 0x6b, 0x65, 0x44, 0x4d, 0x53, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x48,
	0x0a, 0x14, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x46,
	0x61, 0x6b, 0x65, 0x44, 0x4d, 0x53, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x12, 0x24, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x70, 0x43,
	0x68, 0x72, 0x6f, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x61, 0x6b, 0x65, 0x44, 0x4d, 0x53, 0x44, 0x69, 0x72, 0x12, 0x29,
	0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x61, 0x6b, 0x65, 0x44, 0x4d, 0x53, 0x44,
	0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x61, 0x6b,
	0x65, 0x44, 0x4d, 0x53, 0x44, 0x69, 0x72, 0x12, 0x29, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x46, 0x61, 0x6b, 0x65, 0x44, 0x4d, 0x53, 0x44, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x17,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x0f, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x2e, 0x74,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72,
	0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x5e, 0x0a, 0x18, 0x45, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x74, 0x61,
	0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x45,
	0x76, 0x61, 0x6c, 0x49, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x68, 0x0a, 0x0f, 0x45, 0x76, 0x61, 0x6c, 0x49, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x49, 0x6e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x74,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x45, 0x76, 0x61, 0x6c, 0x49, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x19, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72,
	0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x19, 0x45, 0x76, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x55, 0x52,
	0x4c, 0x12, 0x32, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42,
	0x26, 0x5a, 0x24, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x61,
	0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x73,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_policy_policy_proto_rawDescOnce sync.Once
	file_policy_policy_proto_rawDescData = file_policy_policy_proto_rawDesc
)

func file_policy_policy_proto_rawDescGZIP() []byte {
	file_policy_policy_proto_rawDescOnce.Do(func() {
		file_policy_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_policy_policy_proto_rawDescData)
	})
	return file_policy_policy_proto_rawDescData
}

var file_policy_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_policy_policy_proto_goTypes = []interface{}{
	(*EnrollUsingChromeRequest)(nil),             // 0: tast.cros.policy.EnrollUsingChromeRequest
	(*GAIAEnrollUsingChromeRequest)(nil),         // 1: tast.cros.policy.GAIAEnrollUsingChromeRequest
	(*GAIAEnrollAndLoginUsingChromeRequest)(nil), // 2: tast.cros.policy.GAIAEnrollAndLoginUsingChromeRequest
	(*CreateFakeDMSDirRequest)(nil),              // 3: tast.cros.policy.CreateFakeDMSDirRequest
	(*RemoveFakeDMSDirRequest)(nil),              // 4: tast.cros.policy.RemoveFakeDMSDirRequest
	(*UpdatePoliciesRequest)(nil),                // 5: tast.cros.policy.UpdatePoliciesRequest
	(*ServePolicyDataRequest)(nil),               // 6: tast.cros.policy.ServePolicyDataRequest
	(*ServePolicyDataResponse)(nil),              // 7: tast.cros.policy.ServePolicyDataResponse
	(*EvalInExtensionRequest)(nil),               // 8: tast.cros.policy.EvalInExtensionRequest
	(*EvalInExtensionResponse)(nil),              // 9: tast.cros.policy.EvalInExtensionResponse
	(*ExtensionFile)(nil),                        // 10: tast.cros.policy.ExtensionFile
	(*Extension)(nil),                            // 11: tast.cros.policy.Extension
	(*VerifyVisibleNotificationRequest)(nil),     // 12: tast.cros.policy.VerifyVisibleNotificationRequest
	(*EvalExpressionInChromeUrlRequest)(nil),     // 13: tast.cros.policy.EvalExpressionInChromeUrlRequest
	(*StartChromeRequest)(nil),                   // 14: tast.cros.policy.StartChromeRequest
	(*empty.Empty)(nil),                          // 15: google.protobuf.Empty
}
var file_policy_policy_proto_depIdxs = []int32{
	11, // 0: tast.cros.policy.EnrollUsingChromeRequest.extensions:type_name -> tast.cros.policy.Extension
	10, // 1: tast.cros.policy.Extension.files:type_name -> tast.cros.policy.ExtensionFile
	0,  // 2: tast.cros.policy.PolicyService.EnrollUsingChrome:input_type -> tast.cros.policy.EnrollUsingChromeRequest
	1,  // 3: tast.cros.policy.PolicyService.GAIAEnrollUsingChrome:input_type -> tast.cros.policy.GAIAEnrollUsingChromeRequest
	2,  // 4: tast.cros.policy.PolicyService.GAIAEnrollAndLoginUsingChrome:input_type -> tast.cros.policy.GAIAEnrollAndLoginUsingChromeRequest
	5,  // 5: tast.cros.policy.PolicyService.UpdatePolicies:input_type -> tast.cros.policy.UpdatePoliciesRequest
	15, // 6: tast.cros.policy.PolicyService.CheckChromeAndFakeDMS:input_type -> google.protobuf.Empty
	15, // 7: tast.cros.policy.PolicyService.StopChromeAndFakeDMS:input_type -> google.protobuf.Empty
	14, // 8: tast.cros.policy.PolicyService.StartChrome:input_type -> tast.cros.policy.StartChromeRequest
	15, // 9: tast.cros.policy.PolicyService.StopChrome:input_type -> google.protobuf.Empty
	15, // 10: tast.cros.policy.PolicyService.ContinueLogin:input_type -> google.protobuf.Empty
	3,  // 11: tast.cros.policy.PolicyService.CreateFakeDMSDir:input_type -> tast.cros.policy.CreateFakeDMSDirRequest
	4,  // 12: tast.cros.policy.PolicyService.RemoveFakeDMSDir:input_type -> tast.cros.policy.RemoveFakeDMSDirRequest
	15, // 13: tast.cros.policy.PolicyService.StartExternalDataServer:input_type -> google.protobuf.Empty
	6,  // 14: tast.cros.policy.PolicyService.ServePolicyData:input_type -> tast.cros.policy.ServePolicyDataRequest
	15, // 15: tast.cros.policy.PolicyService.StopExternalDataServer:input_type -> google.protobuf.Empty
	8,  // 16: tast.cros.policy.PolicyService.EvalStatementInExtension:input_type -> tast.cros.policy.EvalInExtensionRequest
	8,  // 17: tast.cros.policy.PolicyService.EvalInExtension:input_type -> tast.cros.policy.EvalInExtensionRequest
	12, // 18: tast.cros.policy.PolicyService.VerifyVisibleNotification:input_type -> tast.cros.policy.VerifyVisibleNotificationRequest
	13, // 19: tast.cros.policy.PolicyService.EvalExpressionInChromeURL:input_type -> tast.cros.policy.EvalExpressionInChromeUrlRequest
	15, // 20: tast.cros.policy.PolicyService.EnrollUsingChrome:output_type -> google.protobuf.Empty
	15, // 21: tast.cros.policy.PolicyService.GAIAEnrollUsingChrome:output_type -> google.protobuf.Empty
	15, // 22: tast.cros.policy.PolicyService.GAIAEnrollAndLoginUsingChrome:output_type -> google.protobuf.Empty
	15, // 23: tast.cros.policy.PolicyService.UpdatePolicies:output_type -> google.protobuf.Empty
	15, // 24: tast.cros.policy.PolicyService.CheckChromeAndFakeDMS:output_type -> google.protobuf.Empty
	15, // 25: tast.cros.policy.PolicyService.StopChromeAndFakeDMS:output_type -> google.protobuf.Empty
	15, // 26: tast.cros.policy.PolicyService.StartChrome:output_type -> google.protobuf.Empty
	15, // 27: tast.cros.policy.PolicyService.StopChrome:output_type -> google.protobuf.Empty
	15, // 28: tast.cros.policy.PolicyService.ContinueLogin:output_type -> google.protobuf.Empty
	15, // 29: tast.cros.policy.PolicyService.CreateFakeDMSDir:output_type -> google.protobuf.Empty
	15, // 30: tast.cros.policy.PolicyService.RemoveFakeDMSDir:output_type -> google.protobuf.Empty
	15, // 31: tast.cros.policy.PolicyService.StartExternalDataServer:output_type -> google.protobuf.Empty
	7,  // 32: tast.cros.policy.PolicyService.ServePolicyData:output_type -> tast.cros.policy.ServePolicyDataResponse
	15, // 33: tast.cros.policy.PolicyService.StopExternalDataServer:output_type -> google.protobuf.Empty
	15, // 34: tast.cros.policy.PolicyService.EvalStatementInExtension:output_type -> google.protobuf.Empty
	9,  // 35: tast.cros.policy.PolicyService.EvalInExtension:output_type -> tast.cros.policy.EvalInExtensionResponse
	15, // 36: tast.cros.policy.PolicyService.VerifyVisibleNotification:output_type -> google.protobuf.Empty
	15, // 37: tast.cros.policy.PolicyService.EvalExpressionInChromeURL:output_type -> google.protobuf.Empty
	20, // [20:38] is the sub-list for method output_type
	2,  // [2:20] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_policy_policy_proto_init() }
func file_policy_policy_proto_init() {
	if File_policy_policy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_policy_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnrollUsingChromeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GAIAEnrollUsingChromeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GAIAEnrollAndLoginUsingChromeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_policy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFakeDMSDirRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_policy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFakeDMSDirRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_policy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_policy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServePolicyDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_policy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServePolicyDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_policy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvalInExtensionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_policy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvalInExtensionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_policy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtensionFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_policy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_policy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyVisibleNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_policy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvalExpressionInChromeUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_policy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartChromeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_policy_policy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_policy_policy_proto_goTypes,
		DependencyIndexes: file_policy_policy_proto_depIdxs,
		MessageInfos:      file_policy_policy_proto_msgTypes,
	}.Build()
	File_policy_policy_proto = out.File
	file_policy_policy_proto_rawDesc = nil
	file_policy_policy_proto_goTypes = nil
	file_policy_policy_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PolicyServiceClient is the client API for PolicyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PolicyServiceClient interface {
	EnrollUsingChrome(ctx context.Context, in *EnrollUsingChromeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GAIAEnrollUsingChrome(ctx context.Context, in *GAIAEnrollUsingChromeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GAIAEnrollAndLoginUsingChrome(ctx context.Context, in *GAIAEnrollAndLoginUsingChromeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdatePolicies(ctx context.Context, in *UpdatePoliciesRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CheckChromeAndFakeDMS(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	StopChromeAndFakeDMS(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	StartChrome(ctx context.Context, in *StartChromeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	StopChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	ContinueLogin(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateFakeDMSDir(ctx context.Context, in *CreateFakeDMSDirRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RemoveFakeDMSDir(ctx context.Context, in *RemoveFakeDMSDirRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	StartExternalDataServer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	ServePolicyData(ctx context.Context, in *ServePolicyDataRequest, opts ...grpc.CallOption) (*ServePolicyDataResponse, error)
	StopExternalDataServer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	EvalStatementInExtension(ctx context.Context, in *EvalInExtensionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	EvalInExtension(ctx context.Context, in *EvalInExtensionRequest, opts ...grpc.CallOption) (*EvalInExtensionResponse, error)
	// Verifies that the notification corresponding to the id in the request is visible.
	VerifyVisibleNotification(ctx context.Context, in *VerifyVisibleNotificationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Creates a new connection to the Chrome URL in the request and evaluates the expression in the request on it.
	EvalExpressionInChromeURL(ctx context.Context, in *EvalExpressionInChromeUrlRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type policyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicyServiceClient(cc grpc.ClientConnInterface) PolicyServiceClient {
	return &policyServiceClient{cc}
}

func (c *policyServiceClient) EnrollUsingChrome(ctx context.Context, in *EnrollUsingChromeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/EnrollUsingChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) GAIAEnrollUsingChrome(ctx context.Context, in *GAIAEnrollUsingChromeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/GAIAEnrollUsingChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) GAIAEnrollAndLoginUsingChrome(ctx context.Context, in *GAIAEnrollAndLoginUsingChromeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/GAIAEnrollAndLoginUsingChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) UpdatePolicies(ctx context.Context, in *UpdatePoliciesRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/UpdatePolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) CheckChromeAndFakeDMS(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/CheckChromeAndFakeDMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) StopChromeAndFakeDMS(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/StopChromeAndFakeDMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) StartChrome(ctx context.Context, in *StartChromeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/StartChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) StopChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/StopChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) ContinueLogin(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/ContinueLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) CreateFakeDMSDir(ctx context.Context, in *CreateFakeDMSDirRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/CreateFakeDMSDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) RemoveFakeDMSDir(ctx context.Context, in *RemoveFakeDMSDirRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/RemoveFakeDMSDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) StartExternalDataServer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/StartExternalDataServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) ServePolicyData(ctx context.Context, in *ServePolicyDataRequest, opts ...grpc.CallOption) (*ServePolicyDataResponse, error) {
	out := new(ServePolicyDataResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/ServePolicyData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) StopExternalDataServer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/StopExternalDataServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) EvalStatementInExtension(ctx context.Context, in *EvalInExtensionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/EvalStatementInExtension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) EvalInExtension(ctx context.Context, in *EvalInExtensionRequest, opts ...grpc.CallOption) (*EvalInExtensionResponse, error) {
	out := new(EvalInExtensionResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/EvalInExtension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) VerifyVisibleNotification(ctx context.Context, in *VerifyVisibleNotificationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/VerifyVisibleNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) EvalExpressionInChromeURL(ctx context.Context, in *EvalExpressionInChromeUrlRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/EvalExpressionInChromeURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicyServiceServer is the server API for PolicyService service.
type PolicyServiceServer interface {
	EnrollUsingChrome(context.Context, *EnrollUsingChromeRequest) (*empty.Empty, error)
	GAIAEnrollUsingChrome(context.Context, *GAIAEnrollUsingChromeRequest) (*empty.Empty, error)
	GAIAEnrollAndLoginUsingChrome(context.Context, *GAIAEnrollAndLoginUsingChromeRequest) (*empty.Empty, error)
	UpdatePolicies(context.Context, *UpdatePoliciesRequest) (*empty.Empty, error)
	CheckChromeAndFakeDMS(context.Context, *empty.Empty) (*empty.Empty, error)
	StopChromeAndFakeDMS(context.Context, *empty.Empty) (*empty.Empty, error)
	StartChrome(context.Context, *StartChromeRequest) (*empty.Empty, error)
	StopChrome(context.Context, *empty.Empty) (*empty.Empty, error)
	ContinueLogin(context.Context, *empty.Empty) (*empty.Empty, error)
	CreateFakeDMSDir(context.Context, *CreateFakeDMSDirRequest) (*empty.Empty, error)
	RemoveFakeDMSDir(context.Context, *RemoveFakeDMSDirRequest) (*empty.Empty, error)
	StartExternalDataServer(context.Context, *empty.Empty) (*empty.Empty, error)
	ServePolicyData(context.Context, *ServePolicyDataRequest) (*ServePolicyDataResponse, error)
	StopExternalDataServer(context.Context, *empty.Empty) (*empty.Empty, error)
	EvalStatementInExtension(context.Context, *EvalInExtensionRequest) (*empty.Empty, error)
	EvalInExtension(context.Context, *EvalInExtensionRequest) (*EvalInExtensionResponse, error)
	// Verifies that the notification corresponding to the id in the request is visible.
	VerifyVisibleNotification(context.Context, *VerifyVisibleNotificationRequest) (*empty.Empty, error)
	// Creates a new connection to the Chrome URL in the request and evaluates the expression in the request on it.
	EvalExpressionInChromeURL(context.Context, *EvalExpressionInChromeUrlRequest) (*empty.Empty, error)
}

// UnimplementedPolicyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPolicyServiceServer struct {
}

func (*UnimplementedPolicyServiceServer) EnrollUsingChrome(context.Context, *EnrollUsingChromeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollUsingChrome not implemented")
}
func (*UnimplementedPolicyServiceServer) GAIAEnrollUsingChrome(context.Context, *GAIAEnrollUsingChromeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GAIAEnrollUsingChrome not implemented")
}
func (*UnimplementedPolicyServiceServer) GAIAEnrollAndLoginUsingChrome(context.Context, *GAIAEnrollAndLoginUsingChromeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GAIAEnrollAndLoginUsingChrome not implemented")
}
func (*UnimplementedPolicyServiceServer) UpdatePolicies(context.Context, *UpdatePoliciesRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicies not implemented")
}
func (*UnimplementedPolicyServiceServer) CheckChromeAndFakeDMS(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckChromeAndFakeDMS not implemented")
}
func (*UnimplementedPolicyServiceServer) StopChromeAndFakeDMS(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopChromeAndFakeDMS not implemented")
}
func (*UnimplementedPolicyServiceServer) StartChrome(context.Context, *StartChromeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartChrome not implemented")
}
func (*UnimplementedPolicyServiceServer) StopChrome(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopChrome not implemented")
}
func (*UnimplementedPolicyServiceServer) ContinueLogin(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContinueLogin not implemented")
}
func (*UnimplementedPolicyServiceServer) CreateFakeDMSDir(context.Context, *CreateFakeDMSDirRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFakeDMSDir not implemented")
}
func (*UnimplementedPolicyServiceServer) RemoveFakeDMSDir(context.Context, *RemoveFakeDMSDirRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFakeDMSDir not implemented")
}
func (*UnimplementedPolicyServiceServer) StartExternalDataServer(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartExternalDataServer not implemented")
}
func (*UnimplementedPolicyServiceServer) ServePolicyData(context.Context, *ServePolicyDataRequest) (*ServePolicyDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServePolicyData not implemented")
}
func (*UnimplementedPolicyServiceServer) StopExternalDataServer(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopExternalDataServer not implemented")
}
func (*UnimplementedPolicyServiceServer) EvalStatementInExtension(context.Context, *EvalInExtensionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvalStatementInExtension not implemented")
}
func (*UnimplementedPolicyServiceServer) EvalInExtension(context.Context, *EvalInExtensionRequest) (*EvalInExtensionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvalInExtension not implemented")
}
func (*UnimplementedPolicyServiceServer) VerifyVisibleNotification(context.Context, *VerifyVisibleNotificationRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyVisibleNotification not implemented")
}
func (*UnimplementedPolicyServiceServer) EvalExpressionInChromeURL(context.Context, *EvalExpressionInChromeUrlRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvalExpressionInChromeURL not implemented")
}

func RegisterPolicyServiceServer(s *grpc.Server, srv PolicyServiceServer) {
	s.RegisterService(&_PolicyService_serviceDesc, srv)
}

func _PolicyService_EnrollUsingChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollUsingChromeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).EnrollUsingChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/EnrollUsingChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).EnrollUsingChrome(ctx, req.(*EnrollUsingChromeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_GAIAEnrollUsingChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GAIAEnrollUsingChromeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).GAIAEnrollUsingChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/GAIAEnrollUsingChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).GAIAEnrollUsingChrome(ctx, req.(*GAIAEnrollUsingChromeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_GAIAEnrollAndLoginUsingChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GAIAEnrollAndLoginUsingChromeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).GAIAEnrollAndLoginUsingChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/GAIAEnrollAndLoginUsingChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).GAIAEnrollAndLoginUsingChrome(ctx, req.(*GAIAEnrollAndLoginUsingChromeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_UpdatePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).UpdatePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/UpdatePolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).UpdatePolicies(ctx, req.(*UpdatePoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_CheckChromeAndFakeDMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).CheckChromeAndFakeDMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/CheckChromeAndFakeDMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).CheckChromeAndFakeDMS(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_StopChromeAndFakeDMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).StopChromeAndFakeDMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/StopChromeAndFakeDMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).StopChromeAndFakeDMS(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_StartChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartChromeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).StartChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/StartChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).StartChrome(ctx, req.(*StartChromeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_StopChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).StopChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/StopChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).StopChrome(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_ContinueLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).ContinueLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/ContinueLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).ContinueLogin(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_CreateFakeDMSDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFakeDMSDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).CreateFakeDMSDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/CreateFakeDMSDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).CreateFakeDMSDir(ctx, req.(*CreateFakeDMSDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_RemoveFakeDMSDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFakeDMSDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).RemoveFakeDMSDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/RemoveFakeDMSDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).RemoveFakeDMSDir(ctx, req.(*RemoveFakeDMSDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_StartExternalDataServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).StartExternalDataServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/StartExternalDataServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).StartExternalDataServer(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_ServePolicyData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServePolicyDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).ServePolicyData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/ServePolicyData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).ServePolicyData(ctx, req.(*ServePolicyDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_StopExternalDataServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).StopExternalDataServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/StopExternalDataServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).StopExternalDataServer(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_EvalStatementInExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvalInExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).EvalStatementInExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/EvalStatementInExtension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).EvalStatementInExtension(ctx, req.(*EvalInExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_EvalInExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvalInExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).EvalInExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/EvalInExtension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).EvalInExtension(ctx, req.(*EvalInExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_VerifyVisibleNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyVisibleNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).VerifyVisibleNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/VerifyVisibleNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).VerifyVisibleNotification(ctx, req.(*VerifyVisibleNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_EvalExpressionInChromeURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvalExpressionInChromeUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).EvalExpressionInChromeURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/EvalExpressionInChromeURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).EvalExpressionInChromeURL(ctx, req.(*EvalExpressionInChromeUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PolicyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.policy.PolicyService",
	HandlerType: (*PolicyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnrollUsingChrome",
			Handler:    _PolicyService_EnrollUsingChrome_Handler,
		},
		{
			MethodName: "GAIAEnrollUsingChrome",
			Handler:    _PolicyService_GAIAEnrollUsingChrome_Handler,
		},
		{
			MethodName: "GAIAEnrollAndLoginUsingChrome",
			Handler:    _PolicyService_GAIAEnrollAndLoginUsingChrome_Handler,
		},
		{
			MethodName: "UpdatePolicies",
			Handler:    _PolicyService_UpdatePolicies_Handler,
		},
		{
			MethodName: "CheckChromeAndFakeDMS",
			Handler:    _PolicyService_CheckChromeAndFakeDMS_Handler,
		},
		{
			MethodName: "StopChromeAndFakeDMS",
			Handler:    _PolicyService_StopChromeAndFakeDMS_Handler,
		},
		{
			MethodName: "StartChrome",
			Handler:    _PolicyService_StartChrome_Handler,
		},
		{
			MethodName: "StopChrome",
			Handler:    _PolicyService_StopChrome_Handler,
		},
		{
			MethodName: "ContinueLogin",
			Handler:    _PolicyService_ContinueLogin_Handler,
		},
		{
			MethodName: "CreateFakeDMSDir",
			Handler:    _PolicyService_CreateFakeDMSDir_Handler,
		},
		{
			MethodName: "RemoveFakeDMSDir",
			Handler:    _PolicyService_RemoveFakeDMSDir_Handler,
		},
		{
			MethodName: "StartExternalDataServer",
			Handler:    _PolicyService_StartExternalDataServer_Handler,
		},
		{
			MethodName: "ServePolicyData",
			Handler:    _PolicyService_ServePolicyData_Handler,
		},
		{
			MethodName: "StopExternalDataServer",
			Handler:    _PolicyService_StopExternalDataServer_Handler,
		},
		{
			MethodName: "EvalStatementInExtension",
			Handler:    _PolicyService_EvalStatementInExtension_Handler,
		},
		{
			MethodName: "EvalInExtension",
			Handler:    _PolicyService_EvalInExtension_Handler,
		},
		{
			MethodName: "VerifyVisibleNotification",
			Handler:    _PolicyService_VerifyVisibleNotification_Handler,
		},
		{
			MethodName: "EvalExpressionInChromeURL",
			Handler:    _PolicyService_EvalExpressionInChromeURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "policy/policy.proto",
}
