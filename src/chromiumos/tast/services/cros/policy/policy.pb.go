// Code generated by protoc-gen-go. DO NOT EDIT.
// source: policy.proto

package policy

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EnrollUsingChromeRequest struct {
	PolicyJson           []byte       `protobuf:"bytes,1,opt,name=policy_json,json=policyJson,proto3" json:"policy_json,omitempty"`
	Username             string       `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Extensions           []*Extension `protobuf:"bytes,3,rep,name=extensions,proto3" json:"extensions,omitempty"`
	ExtraArgs            string       `protobuf:"bytes,4,opt,name=extra_args,json=extraArgs,proto3" json:"extra_args,omitempty"`
	FakedmsDir           string       `protobuf:"bytes,5,opt,name=fakedms_dir,json=fakedmsDir,proto3" json:"fakedms_dir,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *EnrollUsingChromeRequest) Reset()         { *m = EnrollUsingChromeRequest{} }
func (m *EnrollUsingChromeRequest) String() string { return proto.CompactTextString(m) }
func (*EnrollUsingChromeRequest) ProtoMessage()    {}
func (*EnrollUsingChromeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{0}
}

func (m *EnrollUsingChromeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnrollUsingChromeRequest.Unmarshal(m, b)
}
func (m *EnrollUsingChromeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnrollUsingChromeRequest.Marshal(b, m, deterministic)
}
func (m *EnrollUsingChromeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnrollUsingChromeRequest.Merge(m, src)
}
func (m *EnrollUsingChromeRequest) XXX_Size() int {
	return xxx_messageInfo_EnrollUsingChromeRequest.Size(m)
}
func (m *EnrollUsingChromeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnrollUsingChromeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnrollUsingChromeRequest proto.InternalMessageInfo

func (m *EnrollUsingChromeRequest) GetPolicyJson() []byte {
	if m != nil {
		return m.PolicyJson
	}
	return nil
}

func (m *EnrollUsingChromeRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *EnrollUsingChromeRequest) GetExtensions() []*Extension {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func (m *EnrollUsingChromeRequest) GetExtraArgs() string {
	if m != nil {
		return m.ExtraArgs
	}
	return ""
}

func (m *EnrollUsingChromeRequest) GetFakedmsDir() string {
	if m != nil {
		return m.FakedmsDir
	}
	return ""
}

type CreateTempDirResponse struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTempDirResponse) Reset()         { *m = CreateTempDirResponse{} }
func (m *CreateTempDirResponse) String() string { return proto.CompactTextString(m) }
func (*CreateTempDirResponse) ProtoMessage()    {}
func (*CreateTempDirResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{1}
}

func (m *CreateTempDirResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateTempDirResponse.Unmarshal(m, b)
}
func (m *CreateTempDirResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateTempDirResponse.Marshal(b, m, deterministic)
}
func (m *CreateTempDirResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTempDirResponse.Merge(m, src)
}
func (m *CreateTempDirResponse) XXX_Size() int {
	return xxx_messageInfo_CreateTempDirResponse.Size(m)
}
func (m *CreateTempDirResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTempDirResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTempDirResponse proto.InternalMessageInfo

func (m *CreateTempDirResponse) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type RemoveTempDirRequest struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveTempDirRequest) Reset()         { *m = RemoveTempDirRequest{} }
func (m *RemoveTempDirRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveTempDirRequest) ProtoMessage()    {}
func (*RemoveTempDirRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{2}
}

func (m *RemoveTempDirRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveTempDirRequest.Unmarshal(m, b)
}
func (m *RemoveTempDirRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveTempDirRequest.Marshal(b, m, deterministic)
}
func (m *RemoveTempDirRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveTempDirRequest.Merge(m, src)
}
func (m *RemoveTempDirRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveTempDirRequest.Size(m)
}
func (m *RemoveTempDirRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveTempDirRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveTempDirRequest proto.InternalMessageInfo

func (m *RemoveTempDirRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type UpdatePoliciesRequest struct {
	PolicyJson           []byte   `protobuf:"bytes,1,opt,name=policy_json,json=policyJson,proto3" json:"policy_json,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatePoliciesRequest) Reset()         { *m = UpdatePoliciesRequest{} }
func (m *UpdatePoliciesRequest) String() string { return proto.CompactTextString(m) }
func (*UpdatePoliciesRequest) ProtoMessage()    {}
func (*UpdatePoliciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{3}
}

func (m *UpdatePoliciesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdatePoliciesRequest.Unmarshal(m, b)
}
func (m *UpdatePoliciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdatePoliciesRequest.Marshal(b, m, deterministic)
}
func (m *UpdatePoliciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePoliciesRequest.Merge(m, src)
}
func (m *UpdatePoliciesRequest) XXX_Size() int {
	return xxx_messageInfo_UpdatePoliciesRequest.Size(m)
}
func (m *UpdatePoliciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePoliciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePoliciesRequest proto.InternalMessageInfo

func (m *UpdatePoliciesRequest) GetPolicyJson() []byte {
	if m != nil {
		return m.PolicyJson
	}
	return nil
}

type ServePolicyDataRequest struct {
	Contents             []byte   `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServePolicyDataRequest) Reset()         { *m = ServePolicyDataRequest{} }
func (m *ServePolicyDataRequest) String() string { return proto.CompactTextString(m) }
func (*ServePolicyDataRequest) ProtoMessage()    {}
func (*ServePolicyDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{4}
}

func (m *ServePolicyDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServePolicyDataRequest.Unmarshal(m, b)
}
func (m *ServePolicyDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServePolicyDataRequest.Marshal(b, m, deterministic)
}
func (m *ServePolicyDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServePolicyDataRequest.Merge(m, src)
}
func (m *ServePolicyDataRequest) XXX_Size() int {
	return xxx_messageInfo_ServePolicyDataRequest.Size(m)
}
func (m *ServePolicyDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ServePolicyDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ServePolicyDataRequest proto.InternalMessageInfo

func (m *ServePolicyDataRequest) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

type ServePolicyDataResponse struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Hash                 string   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServePolicyDataResponse) Reset()         { *m = ServePolicyDataResponse{} }
func (m *ServePolicyDataResponse) String() string { return proto.CompactTextString(m) }
func (*ServePolicyDataResponse) ProtoMessage()    {}
func (*ServePolicyDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{5}
}

func (m *ServePolicyDataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServePolicyDataResponse.Unmarshal(m, b)
}
func (m *ServePolicyDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServePolicyDataResponse.Marshal(b, m, deterministic)
}
func (m *ServePolicyDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServePolicyDataResponse.Merge(m, src)
}
func (m *ServePolicyDataResponse) XXX_Size() int {
	return xxx_messageInfo_ServePolicyDataResponse.Size(m)
}
func (m *ServePolicyDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServePolicyDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServePolicyDataResponse proto.InternalMessageInfo

func (m *ServePolicyDataResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ServePolicyDataResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type EvalInExtensionRequest struct {
	ExtensionId          string   `protobuf:"bytes,1,opt,name=extension_id,json=extensionId,proto3" json:"extension_id,omitempty"`
	Expression           string   `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EvalInExtensionRequest) Reset()         { *m = EvalInExtensionRequest{} }
func (m *EvalInExtensionRequest) String() string { return proto.CompactTextString(m) }
func (*EvalInExtensionRequest) ProtoMessage()    {}
func (*EvalInExtensionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{6}
}

func (m *EvalInExtensionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvalInExtensionRequest.Unmarshal(m, b)
}
func (m *EvalInExtensionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvalInExtensionRequest.Marshal(b, m, deterministic)
}
func (m *EvalInExtensionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvalInExtensionRequest.Merge(m, src)
}
func (m *EvalInExtensionRequest) XXX_Size() int {
	return xxx_messageInfo_EvalInExtensionRequest.Size(m)
}
func (m *EvalInExtensionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EvalInExtensionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EvalInExtensionRequest proto.InternalMessageInfo

func (m *EvalInExtensionRequest) GetExtensionId() string {
	if m != nil {
		return m.ExtensionId
	}
	return ""
}

func (m *EvalInExtensionRequest) GetExpression() string {
	if m != nil {
		return m.Expression
	}
	return ""
}

type EvalInExtensionResponse struct {
	Result               []byte   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EvalInExtensionResponse) Reset()         { *m = EvalInExtensionResponse{} }
func (m *EvalInExtensionResponse) String() string { return proto.CompactTextString(m) }
func (*EvalInExtensionResponse) ProtoMessage()    {}
func (*EvalInExtensionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{7}
}

func (m *EvalInExtensionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvalInExtensionResponse.Unmarshal(m, b)
}
func (m *EvalInExtensionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvalInExtensionResponse.Marshal(b, m, deterministic)
}
func (m *EvalInExtensionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvalInExtensionResponse.Merge(m, src)
}
func (m *EvalInExtensionResponse) XXX_Size() int {
	return xxx_messageInfo_EvalInExtensionResponse.Size(m)
}
func (m *EvalInExtensionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EvalInExtensionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EvalInExtensionResponse proto.InternalMessageInfo

func (m *EvalInExtensionResponse) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

type ExtensionFile struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Contents             []byte   `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtensionFile) Reset()         { *m = ExtensionFile{} }
func (m *ExtensionFile) String() string { return proto.CompactTextString(m) }
func (*ExtensionFile) ProtoMessage()    {}
func (*ExtensionFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{8}
}

func (m *ExtensionFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtensionFile.Unmarshal(m, b)
}
func (m *ExtensionFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtensionFile.Marshal(b, m, deterministic)
}
func (m *ExtensionFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtensionFile.Merge(m, src)
}
func (m *ExtensionFile) XXX_Size() int {
	return xxx_messageInfo_ExtensionFile.Size(m)
}
func (m *ExtensionFile) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtensionFile.DiscardUnknown(m)
}

var xxx_messageInfo_ExtensionFile proto.InternalMessageInfo

func (m *ExtensionFile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ExtensionFile) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

type Extension struct {
	Id                   string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Files                []*ExtensionFile `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Extension) Reset()         { *m = Extension{} }
func (m *Extension) String() string { return proto.CompactTextString(m) }
func (*Extension) ProtoMessage()    {}
func (*Extension) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{9}
}

func (m *Extension) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Extension.Unmarshal(m, b)
}
func (m *Extension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Extension.Marshal(b, m, deterministic)
}
func (m *Extension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Extension.Merge(m, src)
}
func (m *Extension) XXX_Size() int {
	return xxx_messageInfo_Extension.Size(m)
}
func (m *Extension) XXX_DiscardUnknown() {
	xxx_messageInfo_Extension.DiscardUnknown(m)
}

var xxx_messageInfo_Extension proto.InternalMessageInfo

func (m *Extension) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Extension) GetFiles() []*ExtensionFile {
	if m != nil {
		return m.Files
	}
	return nil
}

type VerifyVisibleNotificationRequest struct {
	NotificationId       string   `protobuf:"bytes,1,opt,name=notification_id,json=notificationId,proto3" json:"notification_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyVisibleNotificationRequest) Reset()         { *m = VerifyVisibleNotificationRequest{} }
func (m *VerifyVisibleNotificationRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyVisibleNotificationRequest) ProtoMessage()    {}
func (*VerifyVisibleNotificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{10}
}

func (m *VerifyVisibleNotificationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VerifyVisibleNotificationRequest.Unmarshal(m, b)
}
func (m *VerifyVisibleNotificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VerifyVisibleNotificationRequest.Marshal(b, m, deterministic)
}
func (m *VerifyVisibleNotificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyVisibleNotificationRequest.Merge(m, src)
}
func (m *VerifyVisibleNotificationRequest) XXX_Size() int {
	return xxx_messageInfo_VerifyVisibleNotificationRequest.Size(m)
}
func (m *VerifyVisibleNotificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyVisibleNotificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyVisibleNotificationRequest proto.InternalMessageInfo

func (m *VerifyVisibleNotificationRequest) GetNotificationId() string {
	if m != nil {
		return m.NotificationId
	}
	return ""
}

type EvalExpressionInChromeUrlRequest struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Expression           string   `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EvalExpressionInChromeUrlRequest) Reset()         { *m = EvalExpressionInChromeUrlRequest{} }
func (m *EvalExpressionInChromeUrlRequest) String() string { return proto.CompactTextString(m) }
func (*EvalExpressionInChromeUrlRequest) ProtoMessage()    {}
func (*EvalExpressionInChromeUrlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{11}
}

func (m *EvalExpressionInChromeUrlRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvalExpressionInChromeUrlRequest.Unmarshal(m, b)
}
func (m *EvalExpressionInChromeUrlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvalExpressionInChromeUrlRequest.Marshal(b, m, deterministic)
}
func (m *EvalExpressionInChromeUrlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvalExpressionInChromeUrlRequest.Merge(m, src)
}
func (m *EvalExpressionInChromeUrlRequest) XXX_Size() int {
	return xxx_messageInfo_EvalExpressionInChromeUrlRequest.Size(m)
}
func (m *EvalExpressionInChromeUrlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EvalExpressionInChromeUrlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EvalExpressionInChromeUrlRequest proto.InternalMessageInfo

func (m *EvalExpressionInChromeUrlRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *EvalExpressionInChromeUrlRequest) GetExpression() string {
	if m != nil {
		return m.Expression
	}
	return ""
}

type VerifyArcAppConnectivityRequest struct {
	// URL for testing network connectivity. The ARC++ app will connect to this
	// URL and return proxy configuration if the connection was successful.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Indicates if the system-proxy daemon should be used to authenticate the
	// network request originating from the app to a remote HTTP proxy. If true,
	// the `proxy_username` and `proxy_password` must be set.
	UseSystemProxy bool `protobuf:"varint,2,opt,name=use_system_proxy,json=useSystemProxy,proto3" json:"use_system_proxy,omitempty"`
	// Username to authenticate to the HTTP proxy via the system-proxy dialog.
	// Only used if `use_system_proxy` is true.
	ProxyUsername string `protobuf:"bytes,3,opt,name=proxy_username,json=proxyUsername,proto3" json:"proxy_username,omitempty"`
	// Password to authenticate to the HTTP proxy via the system-proxy dialog.
	// Only used if `use_system_proxy` is true.
	ProxyPassword        string   `protobuf:"bytes,4,opt,name=proxy_password,json=proxyPassword,proto3" json:"proxy_password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyArcAppConnectivityRequest) Reset()         { *m = VerifyArcAppConnectivityRequest{} }
func (m *VerifyArcAppConnectivityRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyArcAppConnectivityRequest) ProtoMessage()    {}
func (*VerifyArcAppConnectivityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{12}
}

func (m *VerifyArcAppConnectivityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VerifyArcAppConnectivityRequest.Unmarshal(m, b)
}
func (m *VerifyArcAppConnectivityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VerifyArcAppConnectivityRequest.Marshal(b, m, deterministic)
}
func (m *VerifyArcAppConnectivityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyArcAppConnectivityRequest.Merge(m, src)
}
func (m *VerifyArcAppConnectivityRequest) XXX_Size() int {
	return xxx_messageInfo_VerifyArcAppConnectivityRequest.Size(m)
}
func (m *VerifyArcAppConnectivityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyArcAppConnectivityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyArcAppConnectivityRequest proto.InternalMessageInfo

func (m *VerifyArcAppConnectivityRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *VerifyArcAppConnectivityRequest) GetUseSystemProxy() bool {
	if m != nil {
		return m.UseSystemProxy
	}
	return false
}

func (m *VerifyArcAppConnectivityRequest) GetProxyUsername() string {
	if m != nil {
		return m.ProxyUsername
	}
	return ""
}

func (m *VerifyArcAppConnectivityRequest) GetProxyPassword() string {
	if m != nil {
		return m.ProxyPassword
	}
	return ""
}

type VerifyArcAppConnectivityResponse struct {
	// The HTTP proxy used by the ARC app as host:port (should be the global
	// proxy).
	Proxy                string   `protobuf:"bytes,1,opt,name=proxy,proto3" json:"proxy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyArcAppConnectivityResponse) Reset()         { *m = VerifyArcAppConnectivityResponse{} }
func (m *VerifyArcAppConnectivityResponse) String() string { return proto.CompactTextString(m) }
func (*VerifyArcAppConnectivityResponse) ProtoMessage()    {}
func (*VerifyArcAppConnectivityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{13}
}

func (m *VerifyArcAppConnectivityResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VerifyArcAppConnectivityResponse.Unmarshal(m, b)
}
func (m *VerifyArcAppConnectivityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VerifyArcAppConnectivityResponse.Marshal(b, m, deterministic)
}
func (m *VerifyArcAppConnectivityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyArcAppConnectivityResponse.Merge(m, src)
}
func (m *VerifyArcAppConnectivityResponse) XXX_Size() int {
	return xxx_messageInfo_VerifyArcAppConnectivityResponse.Size(m)
}
func (m *VerifyArcAppConnectivityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyArcAppConnectivityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyArcAppConnectivityResponse proto.InternalMessageInfo

func (m *VerifyArcAppConnectivityResponse) GetProxy() string {
	if m != nil {
		return m.Proxy
	}
	return ""
}

func init() {
	proto.RegisterType((*EnrollUsingChromeRequest)(nil), "tast.cros.policy.EnrollUsingChromeRequest")
	proto.RegisterType((*CreateTempDirResponse)(nil), "tast.cros.policy.CreateTempDirResponse")
	proto.RegisterType((*RemoveTempDirRequest)(nil), "tast.cros.policy.RemoveTempDirRequest")
	proto.RegisterType((*UpdatePoliciesRequest)(nil), "tast.cros.policy.UpdatePoliciesRequest")
	proto.RegisterType((*ServePolicyDataRequest)(nil), "tast.cros.policy.ServePolicyDataRequest")
	proto.RegisterType((*ServePolicyDataResponse)(nil), "tast.cros.policy.ServePolicyDataResponse")
	proto.RegisterType((*EvalInExtensionRequest)(nil), "tast.cros.policy.EvalInExtensionRequest")
	proto.RegisterType((*EvalInExtensionResponse)(nil), "tast.cros.policy.EvalInExtensionResponse")
	proto.RegisterType((*ExtensionFile)(nil), "tast.cros.policy.ExtensionFile")
	proto.RegisterType((*Extension)(nil), "tast.cros.policy.Extension")
	proto.RegisterType((*VerifyVisibleNotificationRequest)(nil), "tast.cros.policy.VerifyVisibleNotificationRequest")
	proto.RegisterType((*EvalExpressionInChromeUrlRequest)(nil), "tast.cros.policy.EvalExpressionInChromeUrlRequest")
	proto.RegisterType((*VerifyArcAppConnectivityRequest)(nil), "tast.cros.policy.VerifyArcAppConnectivityRequest")
	proto.RegisterType((*VerifyArcAppConnectivityResponse)(nil), "tast.cros.policy.VerifyArcAppConnectivityResponse")
}

func init() { proto.RegisterFile("policy.proto", fileDescriptor_ac3b897852294d6a) }

var fileDescriptor_ac3b897852294d6a = []byte{
	// 887 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xe1, 0x6e, 0x1b, 0x45,
	0x10, 0xae, 0x93, 0xa6, 0x4a, 0x26, 0xb1, 0x9b, 0xae, 0x12, 0xc7, 0x75, 0x05, 0x31, 0x27, 0x68,
	0xdd, 0x22, 0xd9, 0x6a, 0x00, 0xa9, 0x12, 0x3f, 0x2a, 0x93, 0xb8, 0xc2, 0x2d, 0xa0, 0x70, 0x6e,
	0x2a, 0x01, 0x12, 0xd6, 0xe6, 0x6e, 0x6c, 0x2f, 0xb9, 0xdb, 0x3d, 0x76, 0xd7, 0xa1, 0xfe, 0xcd,
	0xe3, 0xf0, 0x3a, 0xbc, 0x05, 0x2f, 0x81, 0x76, 0xf7, 0x7c, 0x71, 0xe2, 0x3b, 0x27, 0xad, 0xf2,
	0xef, 0x76, 0x6e, 0xe6, 0xdb, 0x6f, 0xbf, 0x99, 0xf9, 0x60, 0x2b, 0x11, 0x11, 0x0b, 0xa6, 0xad,
	0x44, 0x0a, 0x2d, 0xc8, 0xb6, 0xa6, 0x4a, 0xb7, 0x02, 0x29, 0x54, 0xcb, 0xc5, 0xeb, 0x8f, 0x46,
	0x42, 0x8c, 0x22, 0x6c, 0xdb, 0xff, 0xa7, 0x93, 0x61, 0x1b, 0xe3, 0x44, 0xa7, 0xe9, 0xde, 0xbf,
	0x25, 0xa8, 0x75, 0xb9, 0x14, 0x51, 0x74, 0xa2, 0x18, 0x1f, 0x1d, 0x8e, 0xa5, 0x88, 0xd1, 0xc7,
	0x3f, 0x27, 0xa8, 0x34, 0xd9, 0x87, 0x4d, 0x87, 0x31, 0xf8, 0x43, 0x09, 0x5e, 0x2b, 0x35, 0x4a,
	0xcd, 0x2d, 0x1f, 0x5c, 0xe8, 0xb5, 0x12, 0x9c, 0xd4, 0x61, 0x7d, 0xa2, 0x50, 0x72, 0x1a, 0x63,
	0x6d, 0xa5, 0x51, 0x6a, 0x6e, 0xf8, 0xd9, 0x99, 0x7c, 0x0b, 0x80, 0xef, 0x35, 0x72, 0xc5, 0x04,
	0x57, 0xb5, 0xd5, 0xc6, 0x6a, 0x73, 0xf3, 0xe0, 0x51, 0xeb, 0x2a, 0xbb, 0x56, 0x77, 0x96, 0xe3,
	0xcf, 0xa5, 0x93, 0x4f, 0x6c, 0xb1, 0xa4, 0x03, 0x2a, 0x47, 0xaa, 0x76, 0xd7, 0x42, 0x6f, 0xd8,
	0x48, 0x47, 0x8e, 0x94, 0x21, 0x36, 0xa4, 0x67, 0x18, 0xc6, 0x6a, 0x10, 0x32, 0x59, 0x5b, 0xb3,
	0xff, 0x21, 0x0d, 0x1d, 0x31, 0xe9, 0x7d, 0x09, 0xbb, 0x87, 0x12, 0xa9, 0xc6, 0xb7, 0x18, 0x27,
	0x47, 0x4c, 0xfa, 0xa8, 0x12, 0xc1, 0x15, 0x12, 0x02, 0x77, 0x13, 0xaa, 0xc7, 0xf6, 0x2d, 0x1b,
	0xbe, 0xfd, 0xf6, 0x9e, 0xc1, 0x8e, 0x8f, 0xb1, 0x38, 0xbf, 0x48, 0x76, 0xcf, 0xcf, 0xcb, 0x7d,
	0x01, 0xbb, 0x27, 0x49, 0x48, 0x35, 0x1e, 0x1b, 0xfa, 0x0c, 0xd5, 0x4d, 0xb5, 0xf2, 0xbe, 0x86,
	0x6a, 0x1f, 0xe5, 0xb9, 0x2b, 0x9c, 0x1e, 0x51, 0x4d, 0x67, 0xa5, 0x75, 0x58, 0x0f, 0x04, 0xd7,
	0xc8, 0xb5, 0x4a, 0xeb, 0xb2, 0xb3, 0xf7, 0x12, 0xf6, 0x16, 0xaa, 0xd2, 0xa7, 0x6c, 0xc3, 0xea,
	0x44, 0x46, 0x29, 0x3b, 0xf3, 0x69, 0x08, 0x8f, 0xa9, 0x1a, 0xa7, 0xad, 0xb0, 0xdf, 0xde, 0x6f,
	0x50, 0xed, 0x9e, 0xd3, 0xa8, 0xc7, 0x2f, 0x84, 0x4e, 0xaf, 0xfd, 0x0c, 0xb6, 0x32, 0xc5, 0x07,
	0x2c, 0x4c, 0x81, 0x36, 0xb3, 0x58, 0x2f, 0x24, 0x9f, 0x9a, 0x36, 0x24, 0x12, 0x95, 0x39, 0xa7,
	0xb0, 0x73, 0x11, 0xef, 0x39, 0xec, 0x2d, 0x80, 0xa7, 0xec, 0xaa, 0x70, 0x4f, 0xa2, 0x9a, 0x44,
	0x3a, 0x7d, 0x52, 0x7a, 0xf2, 0x5e, 0x42, 0x39, 0x4b, 0x7e, 0xc5, 0x22, 0xdb, 0x11, 0x3b, 0x3f,
	0xa9, 0xca, 0x76, 0x76, 0xe6, 0x15, 0x59, 0xb9, 0xa2, 0x88, 0x0f, 0x1b, 0x19, 0x00, 0xa9, 0xc0,
	0x4a, 0xc6, 0x7c, 0x85, 0x85, 0xe4, 0x1b, 0x58, 0x1b, 0xb2, 0x08, 0x4d, 0x95, 0x99, 0xb7, 0xfd,
	0x25, 0xf3, 0x66, 0x2e, 0xf7, 0x5d, 0xb6, 0xf7, 0x06, 0x1a, 0xef, 0x50, 0xb2, 0xe1, 0xf4, 0x1d,
	0x53, 0xec, 0x34, 0xc2, 0x9f, 0x84, 0x66, 0x43, 0x16, 0x50, 0x3d, 0x27, 0xd7, 0x13, 0xb8, 0xcf,
	0xe7, 0xc2, 0x17, 0x8a, 0x55, 0xe6, 0xc3, 0xbd, 0xd0, 0x7b, 0x0b, 0x0d, 0x23, 0x4a, 0x37, 0x93,
	0xa9, 0xc7, 0xdd, 0x5a, 0x9d, 0xc8, 0x68, 0x06, 0xb6, 0xd8, 0xbb, 0xeb, 0xa4, 0xfe, 0xa7, 0x04,
	0xfb, 0x8e, 0x63, 0x47, 0x06, 0x9d, 0x24, 0x39, 0x14, 0x9c, 0x63, 0xa0, 0xd9, 0x39, 0xd3, 0xd3,
	0x62, 0xd4, 0x26, 0x6c, 0x4f, 0x14, 0x0e, 0xd4, 0x54, 0x69, 0x8c, 0x07, 0x89, 0x14, 0xef, 0xa7,
	0x16, 0x7b, 0xdd, 0xaf, 0x4c, 0x14, 0xf6, 0x6d, 0xf8, 0xd8, 0x44, 0xc9, 0x17, 0x50, 0xb1, 0xbf,
	0x07, 0xd9, 0x42, 0xaf, 0x5a, 0x98, 0xb2, 0x8d, 0x9e, 0xcc, 0xb6, 0x3a, 0x4b, 0x4b, 0xa8, 0x52,
	0x7f, 0x09, 0x19, 0xa6, 0xcb, 0xe9, 0xd2, 0x8e, 0xd3, 0xa0, 0xf7, 0x62, 0x26, 0x68, 0x1e, 0xd9,
	0x74, 0x42, 0x76, 0x60, 0xcd, 0x11, 0x72, 0x7c, 0xdd, 0xe1, 0xe0, 0x3f, 0x80, 0xb2, 0x1b, 0x76,
	0x33, 0xf7, 0x2c, 0x40, 0xf2, 0x0b, 0x3c, 0x58, 0x70, 0x28, 0xf2, 0x2c, 0xa7, 0xb3, 0x05, 0x36,
	0x56, 0xaf, 0xb6, 0x9c, 0x03, 0xb6, 0x66, 0x0e, 0xd8, 0xea, 0x1a, 0x07, 0xf4, 0xee, 0x90, 0x3e,
	0x54, 0x2e, 0x6f, 0x33, 0x79, 0xb2, 0x88, 0x9b, 0xbb, 0xef, 0x4b, 0x40, 0x7b, 0xb0, 0x7b, 0x38,
	0xc6, 0xe0, 0xcc, 0x91, 0xe8, 0xf0, 0xf0, 0x15, 0x3d, 0xc3, 0xa3, 0x1f, 0xfb, 0xa4, 0xa0, 0x64,
	0x09, 0xd4, 0xf7, 0xb0, 0xd3, 0xd7, 0x22, 0xb9, 0x05, 0x24, 0x1f, 0xca, 0x97, 0x0c, 0xb1, 0x10,
	0x22, 0x47, 0x80, 0x5c, 0x27, 0xf5, 0xee, 0x90, 0x9f, 0xa1, 0x7c, 0xc9, 0x37, 0xc9, 0xe3, 0xc5,
	0xda, 0x3c, 0x63, 0x5d, 0x42, 0xf3, 0x0d, 0xec, 0xf5, 0x35, 0x95, 0xda, 0x6c, 0xa9, 0xe4, 0x34,
	0x32, 0x86, 0x67, 0xfd, 0x4f, 0x7e, 0xc4, 0x9b, 0xc7, 0x70, 0xff, 0x8a, 0x77, 0x92, 0xe6, 0x22,
	0xc3, 0x7c, 0x53, 0xae, 0x3f, 0xbd, 0x41, 0x66, 0xa6, 0xc4, 0x6b, 0xa8, 0x9a, 0x3e, 0xdd, 0x0a,
	0xeb, 0xdf, 0xa1, 0x66, 0xec, 0xa3, 0xaf, 0xa9, 0xc6, 0x18, 0xb9, 0x9e, 0x33, 0xd7, 0x3c, 0xfa,
	0xf9, 0xe6, 0xbe, 0x5c, 0x95, 0x2b, 0x35, 0x1f, 0x00, 0xfb, 0xf4, 0x06, 0x99, 0x99, 0x2a, 0x0c,
	0x1e, 0x16, 0xba, 0x2a, 0x39, 0x58, 0x44, 0xba, 0xce, 0x82, 0x97, 0x3c, 0x8a, 0xc1, 0xc3, 0x02,
	0xcf, 0xf5, 0x7f, 0xc8, 0xbb, 0xea, 0x3a, 0x83, 0x5e, 0x72, 0x55, 0x17, 0x1e, 0xb8, 0x85, 0xe8,
	0xc8, 0xa0, 0xc7, 0x95, 0xa6, 0x3c, 0xc0, 0x8f, 0x68, 0xf3, 0xdf, 0x25, 0xa8, 0x15, 0x59, 0x24,
	0x79, 0x5e, 0x24, 0x4e, 0xa1, 0xf7, 0xd7, 0x0f, 0x3e, 0xa4, 0x64, 0xd6, 0xa2, 0xef, 0x1e, 0xff,
	0xfa, 0x79, 0x60, 0x9e, 0xce, 0x26, 0xb1, 0x50, 0x6d, 0x83, 0xd0, 0x56, 0xce, 0x76, 0x55, 0xdb,
	0x40, 0xb5, 0x1d, 0xd4, 0xe9, 0x3d, 0xcb, 0xff, 0xab, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xc7,
	0x87, 0xab, 0xd9, 0x6c, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PolicyServiceClient is the client API for PolicyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PolicyServiceClient interface {
	EnrollUsingChrome(ctx context.Context, in *EnrollUsingChromeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdatePolicies(ctx context.Context, in *UpdatePoliciesRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CheckChromeAndFakeDMS(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	StopChromeAndFakeDMS(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateTempDir(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CreateTempDirResponse, error)
	RemoveTempDir(ctx context.Context, in *RemoveTempDirRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	StartExternalDataServer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	ServePolicyData(ctx context.Context, in *ServePolicyDataRequest, opts ...grpc.CallOption) (*ServePolicyDataResponse, error)
	StopExternalDataServer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	EvalStatementInExtension(ctx context.Context, in *EvalInExtensionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	EvalInExtension(ctx context.Context, in *EvalInExtensionRequest, opts ...grpc.CallOption) (*EvalInExtensionResponse, error)
	// Verifies that the notification corresponding to the id in the request is visible.
	VerifyVisibleNotification(ctx context.Context, in *VerifyVisibleNotificationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Creates a new connection to the Chrome URL in the request and evaluates the expression in the request on it.
	EvalExpressionInChromeURL(ctx context.Context, in *EvalExpressionInChromeUrlRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateArcInstance(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Installs an ARC++ test app and uses it to verify network connectivity.
	VerifyArcAppConnectivity(ctx context.Context, in *VerifyArcAppConnectivityRequest, opts ...grpc.CallOption) (*VerifyArcAppConnectivityResponse, error)
}

type policyServiceClient struct {
	cc *grpc.ClientConn
}

func NewPolicyServiceClient(cc *grpc.ClientConn) PolicyServiceClient {
	return &policyServiceClient{cc}
}

func (c *policyServiceClient) EnrollUsingChrome(ctx context.Context, in *EnrollUsingChromeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/EnrollUsingChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) UpdatePolicies(ctx context.Context, in *UpdatePoliciesRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/UpdatePolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) CheckChromeAndFakeDMS(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/CheckChromeAndFakeDMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) StopChromeAndFakeDMS(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/StopChromeAndFakeDMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) CreateTempDir(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CreateTempDirResponse, error) {
	out := new(CreateTempDirResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/CreateTempDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) RemoveTempDir(ctx context.Context, in *RemoveTempDirRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/RemoveTempDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) StartExternalDataServer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/StartExternalDataServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) ServePolicyData(ctx context.Context, in *ServePolicyDataRequest, opts ...grpc.CallOption) (*ServePolicyDataResponse, error) {
	out := new(ServePolicyDataResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/ServePolicyData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) StopExternalDataServer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/StopExternalDataServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) EvalStatementInExtension(ctx context.Context, in *EvalInExtensionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/EvalStatementInExtension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) EvalInExtension(ctx context.Context, in *EvalInExtensionRequest, opts ...grpc.CallOption) (*EvalInExtensionResponse, error) {
	out := new(EvalInExtensionResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/EvalInExtension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) VerifyVisibleNotification(ctx context.Context, in *VerifyVisibleNotificationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/VerifyVisibleNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) EvalExpressionInChromeURL(ctx context.Context, in *EvalExpressionInChromeUrlRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/EvalExpressionInChromeURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) CreateArcInstance(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/CreateArcInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) VerifyArcAppConnectivity(ctx context.Context, in *VerifyArcAppConnectivityRequest, opts ...grpc.CallOption) (*VerifyArcAppConnectivityResponse, error) {
	out := new(VerifyArcAppConnectivityResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/VerifyArcAppConnectivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicyServiceServer is the server API for PolicyService service.
type PolicyServiceServer interface {
	EnrollUsingChrome(context.Context, *EnrollUsingChromeRequest) (*empty.Empty, error)
	UpdatePolicies(context.Context, *UpdatePoliciesRequest) (*empty.Empty, error)
	CheckChromeAndFakeDMS(context.Context, *empty.Empty) (*empty.Empty, error)
	StopChromeAndFakeDMS(context.Context, *empty.Empty) (*empty.Empty, error)
	CreateTempDir(context.Context, *empty.Empty) (*CreateTempDirResponse, error)
	RemoveTempDir(context.Context, *RemoveTempDirRequest) (*empty.Empty, error)
	StartExternalDataServer(context.Context, *empty.Empty) (*empty.Empty, error)
	ServePolicyData(context.Context, *ServePolicyDataRequest) (*ServePolicyDataResponse, error)
	StopExternalDataServer(context.Context, *empty.Empty) (*empty.Empty, error)
	EvalStatementInExtension(context.Context, *EvalInExtensionRequest) (*empty.Empty, error)
	EvalInExtension(context.Context, *EvalInExtensionRequest) (*EvalInExtensionResponse, error)
	// Verifies that the notification corresponding to the id in the request is visible.
	VerifyVisibleNotification(context.Context, *VerifyVisibleNotificationRequest) (*empty.Empty, error)
	// Creates a new connection to the Chrome URL in the request and evaluates the expression in the request on it.
	EvalExpressionInChromeURL(context.Context, *EvalExpressionInChromeUrlRequest) (*empty.Empty, error)
	CreateArcInstance(context.Context, *empty.Empty) (*empty.Empty, error)
	// Installs an ARC++ test app and uses it to verify network connectivity.
	VerifyArcAppConnectivity(context.Context, *VerifyArcAppConnectivityRequest) (*VerifyArcAppConnectivityResponse, error)
}

// UnimplementedPolicyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPolicyServiceServer struct {
}

func (*UnimplementedPolicyServiceServer) EnrollUsingChrome(ctx context.Context, req *EnrollUsingChromeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollUsingChrome not implemented")
}
func (*UnimplementedPolicyServiceServer) UpdatePolicies(ctx context.Context, req *UpdatePoliciesRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicies not implemented")
}
func (*UnimplementedPolicyServiceServer) CheckChromeAndFakeDMS(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckChromeAndFakeDMS not implemented")
}
func (*UnimplementedPolicyServiceServer) StopChromeAndFakeDMS(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopChromeAndFakeDMS not implemented")
}
func (*UnimplementedPolicyServiceServer) CreateTempDir(ctx context.Context, req *empty.Empty) (*CreateTempDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTempDir not implemented")
}
func (*UnimplementedPolicyServiceServer) RemoveTempDir(ctx context.Context, req *RemoveTempDirRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTempDir not implemented")
}
func (*UnimplementedPolicyServiceServer) StartExternalDataServer(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartExternalDataServer not implemented")
}
func (*UnimplementedPolicyServiceServer) ServePolicyData(ctx context.Context, req *ServePolicyDataRequest) (*ServePolicyDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServePolicyData not implemented")
}
func (*UnimplementedPolicyServiceServer) StopExternalDataServer(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopExternalDataServer not implemented")
}
func (*UnimplementedPolicyServiceServer) EvalStatementInExtension(ctx context.Context, req *EvalInExtensionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvalStatementInExtension not implemented")
}
func (*UnimplementedPolicyServiceServer) EvalInExtension(ctx context.Context, req *EvalInExtensionRequest) (*EvalInExtensionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvalInExtension not implemented")
}
func (*UnimplementedPolicyServiceServer) VerifyVisibleNotification(ctx context.Context, req *VerifyVisibleNotificationRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyVisibleNotification not implemented")
}
func (*UnimplementedPolicyServiceServer) EvalExpressionInChromeURL(ctx context.Context, req *EvalExpressionInChromeUrlRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvalExpressionInChromeURL not implemented")
}
func (*UnimplementedPolicyServiceServer) CreateArcInstance(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArcInstance not implemented")
}
func (*UnimplementedPolicyServiceServer) VerifyArcAppConnectivity(ctx context.Context, req *VerifyArcAppConnectivityRequest) (*VerifyArcAppConnectivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyArcAppConnectivity not implemented")
}

func RegisterPolicyServiceServer(s *grpc.Server, srv PolicyServiceServer) {
	s.RegisterService(&_PolicyService_serviceDesc, srv)
}

func _PolicyService_EnrollUsingChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollUsingChromeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).EnrollUsingChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/EnrollUsingChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).EnrollUsingChrome(ctx, req.(*EnrollUsingChromeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_UpdatePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).UpdatePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/UpdatePolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).UpdatePolicies(ctx, req.(*UpdatePoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_CheckChromeAndFakeDMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).CheckChromeAndFakeDMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/CheckChromeAndFakeDMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).CheckChromeAndFakeDMS(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_StopChromeAndFakeDMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).StopChromeAndFakeDMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/StopChromeAndFakeDMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).StopChromeAndFakeDMS(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_CreateTempDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).CreateTempDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/CreateTempDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).CreateTempDir(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_RemoveTempDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTempDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).RemoveTempDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/RemoveTempDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).RemoveTempDir(ctx, req.(*RemoveTempDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_StartExternalDataServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).StartExternalDataServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/StartExternalDataServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).StartExternalDataServer(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_ServePolicyData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServePolicyDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).ServePolicyData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/ServePolicyData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).ServePolicyData(ctx, req.(*ServePolicyDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_StopExternalDataServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).StopExternalDataServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/StopExternalDataServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).StopExternalDataServer(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_EvalStatementInExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvalInExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).EvalStatementInExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/EvalStatementInExtension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).EvalStatementInExtension(ctx, req.(*EvalInExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_EvalInExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvalInExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).EvalInExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/EvalInExtension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).EvalInExtension(ctx, req.(*EvalInExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_VerifyVisibleNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyVisibleNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).VerifyVisibleNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/VerifyVisibleNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).VerifyVisibleNotification(ctx, req.(*VerifyVisibleNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_EvalExpressionInChromeURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvalExpressionInChromeUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).EvalExpressionInChromeURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/EvalExpressionInChromeURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).EvalExpressionInChromeURL(ctx, req.(*EvalExpressionInChromeUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_CreateArcInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).CreateArcInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/CreateArcInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).CreateArcInstance(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_VerifyArcAppConnectivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyArcAppConnectivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).VerifyArcAppConnectivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/VerifyArcAppConnectivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).VerifyArcAppConnectivity(ctx, req.(*VerifyArcAppConnectivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PolicyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.policy.PolicyService",
	HandlerType: (*PolicyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnrollUsingChrome",
			Handler:    _PolicyService_EnrollUsingChrome_Handler,
		},
		{
			MethodName: "UpdatePolicies",
			Handler:    _PolicyService_UpdatePolicies_Handler,
		},
		{
			MethodName: "CheckChromeAndFakeDMS",
			Handler:    _PolicyService_CheckChromeAndFakeDMS_Handler,
		},
		{
			MethodName: "StopChromeAndFakeDMS",
			Handler:    _PolicyService_StopChromeAndFakeDMS_Handler,
		},
		{
			MethodName: "CreateTempDir",
			Handler:    _PolicyService_CreateTempDir_Handler,
		},
		{
			MethodName: "RemoveTempDir",
			Handler:    _PolicyService_RemoveTempDir_Handler,
		},
		{
			MethodName: "StartExternalDataServer",
			Handler:    _PolicyService_StartExternalDataServer_Handler,
		},
		{
			MethodName: "ServePolicyData",
			Handler:    _PolicyService_ServePolicyData_Handler,
		},
		{
			MethodName: "StopExternalDataServer",
			Handler:    _PolicyService_StopExternalDataServer_Handler,
		},
		{
			MethodName: "EvalStatementInExtension",
			Handler:    _PolicyService_EvalStatementInExtension_Handler,
		},
		{
			MethodName: "EvalInExtension",
			Handler:    _PolicyService_EvalInExtension_Handler,
		},
		{
			MethodName: "VerifyVisibleNotification",
			Handler:    _PolicyService_VerifyVisibleNotification_Handler,
		},
		{
			MethodName: "EvalExpressionInChromeURL",
			Handler:    _PolicyService_EvalExpressionInChromeURL_Handler,
		},
		{
			MethodName: "CreateArcInstance",
			Handler:    _PolicyService_CreateArcInstance_Handler,
		},
		{
			MethodName: "VerifyArcAppConnectivity",
			Handler:    _PolicyService_VerifyArcAppConnectivity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "policy.proto",
}
