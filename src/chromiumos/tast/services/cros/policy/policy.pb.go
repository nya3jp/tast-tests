// Code generated by protoc-gen-go. DO NOT EDIT.
// source: policy.proto

package policy

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EnrollUsingChromeRequest struct {
	PolicyJson           []byte   `protobuf:"bytes,1,opt,name=policy_json,json=policyJson,proto3" json:"policy_json,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnrollUsingChromeRequest) Reset()         { *m = EnrollUsingChromeRequest{} }
func (m *EnrollUsingChromeRequest) String() string { return proto.CompactTextString(m) }
func (*EnrollUsingChromeRequest) ProtoMessage()    {}
func (*EnrollUsingChromeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{0}
}

func (m *EnrollUsingChromeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnrollUsingChromeRequest.Unmarshal(m, b)
}
func (m *EnrollUsingChromeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnrollUsingChromeRequest.Marshal(b, m, deterministic)
}
func (m *EnrollUsingChromeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnrollUsingChromeRequest.Merge(m, src)
}
func (m *EnrollUsingChromeRequest) XXX_Size() int {
	return xxx_messageInfo_EnrollUsingChromeRequest.Size(m)
}
func (m *EnrollUsingChromeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnrollUsingChromeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnrollUsingChromeRequest proto.InternalMessageInfo

func (m *EnrollUsingChromeRequest) GetPolicyJson() []byte {
	if m != nil {
		return m.PolicyJson
	}
	return nil
}

func (m *EnrollUsingChromeRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type UpdatePoliciesRequest struct {
	PolicyJson           []byte   `protobuf:"bytes,1,opt,name=policy_json,json=policyJson,proto3" json:"policy_json,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatePoliciesRequest) Reset()         { *m = UpdatePoliciesRequest{} }
func (m *UpdatePoliciesRequest) String() string { return proto.CompactTextString(m) }
func (*UpdatePoliciesRequest) ProtoMessage()    {}
func (*UpdatePoliciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{1}
}

func (m *UpdatePoliciesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdatePoliciesRequest.Unmarshal(m, b)
}
func (m *UpdatePoliciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdatePoliciesRequest.Marshal(b, m, deterministic)
}
func (m *UpdatePoliciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePoliciesRequest.Merge(m, src)
}
func (m *UpdatePoliciesRequest) XXX_Size() int {
	return xxx_messageInfo_UpdatePoliciesRequest.Size(m)
}
func (m *UpdatePoliciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePoliciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePoliciesRequest proto.InternalMessageInfo

func (m *UpdatePoliciesRequest) GetPolicyJson() []byte {
	if m != nil {
		return m.PolicyJson
	}
	return nil
}

type ServePolicyDataRequest struct {
	Contents             []byte   `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServePolicyDataRequest) Reset()         { *m = ServePolicyDataRequest{} }
func (m *ServePolicyDataRequest) String() string { return proto.CompactTextString(m) }
func (*ServePolicyDataRequest) ProtoMessage()    {}
func (*ServePolicyDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{2}
}

func (m *ServePolicyDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServePolicyDataRequest.Unmarshal(m, b)
}
func (m *ServePolicyDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServePolicyDataRequest.Marshal(b, m, deterministic)
}
func (m *ServePolicyDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServePolicyDataRequest.Merge(m, src)
}
func (m *ServePolicyDataRequest) XXX_Size() int {
	return xxx_messageInfo_ServePolicyDataRequest.Size(m)
}
func (m *ServePolicyDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ServePolicyDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ServePolicyDataRequest proto.InternalMessageInfo

func (m *ServePolicyDataRequest) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

type ServePolicyDataResponse struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Hash                 string   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServePolicyDataResponse) Reset()         { *m = ServePolicyDataResponse{} }
func (m *ServePolicyDataResponse) String() string { return proto.CompactTextString(m) }
func (*ServePolicyDataResponse) ProtoMessage()    {}
func (*ServePolicyDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{3}
}

func (m *ServePolicyDataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServePolicyDataResponse.Unmarshal(m, b)
}
func (m *ServePolicyDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServePolicyDataResponse.Marshal(b, m, deterministic)
}
func (m *ServePolicyDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServePolicyDataResponse.Merge(m, src)
}
func (m *ServePolicyDataResponse) XXX_Size() int {
	return xxx_messageInfo_ServePolicyDataResponse.Size(m)
}
func (m *ServePolicyDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServePolicyDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServePolicyDataResponse proto.InternalMessageInfo

func (m *ServePolicyDataResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ServePolicyDataResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type EvalOnTestAPIConnRequest struct {
	Expression           string   `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EvalOnTestAPIConnRequest) Reset()         { *m = EvalOnTestAPIConnRequest{} }
func (m *EvalOnTestAPIConnRequest) String() string { return proto.CompactTextString(m) }
func (*EvalOnTestAPIConnRequest) ProtoMessage()    {}
func (*EvalOnTestAPIConnRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{4}
}

func (m *EvalOnTestAPIConnRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvalOnTestAPIConnRequest.Unmarshal(m, b)
}
func (m *EvalOnTestAPIConnRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvalOnTestAPIConnRequest.Marshal(b, m, deterministic)
}
func (m *EvalOnTestAPIConnRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvalOnTestAPIConnRequest.Merge(m, src)
}
func (m *EvalOnTestAPIConnRequest) XXX_Size() int {
	return xxx_messageInfo_EvalOnTestAPIConnRequest.Size(m)
}
func (m *EvalOnTestAPIConnRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EvalOnTestAPIConnRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EvalOnTestAPIConnRequest proto.InternalMessageInfo

func (m *EvalOnTestAPIConnRequest) GetExpression() string {
	if m != nil {
		return m.Expression
	}
	return ""
}

type EvalOnTestAPIConnResponse struct {
	Result               []byte   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EvalOnTestAPIConnResponse) Reset()         { *m = EvalOnTestAPIConnResponse{} }
func (m *EvalOnTestAPIConnResponse) String() string { return proto.CompactTextString(m) }
func (*EvalOnTestAPIConnResponse) ProtoMessage()    {}
func (*EvalOnTestAPIConnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3b897852294d6a, []int{5}
}

func (m *EvalOnTestAPIConnResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvalOnTestAPIConnResponse.Unmarshal(m, b)
}
func (m *EvalOnTestAPIConnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvalOnTestAPIConnResponse.Marshal(b, m, deterministic)
}
func (m *EvalOnTestAPIConnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvalOnTestAPIConnResponse.Merge(m, src)
}
func (m *EvalOnTestAPIConnResponse) XXX_Size() int {
	return xxx_messageInfo_EvalOnTestAPIConnResponse.Size(m)
}
func (m *EvalOnTestAPIConnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EvalOnTestAPIConnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EvalOnTestAPIConnResponse proto.InternalMessageInfo

func (m *EvalOnTestAPIConnResponse) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*EnrollUsingChromeRequest)(nil), "tast.cros.policy.EnrollUsingChromeRequest")
	proto.RegisterType((*UpdatePoliciesRequest)(nil), "tast.cros.policy.UpdatePoliciesRequest")
	proto.RegisterType((*ServePolicyDataRequest)(nil), "tast.cros.policy.ServePolicyDataRequest")
	proto.RegisterType((*ServePolicyDataResponse)(nil), "tast.cros.policy.ServePolicyDataResponse")
	proto.RegisterType((*EvalOnTestAPIConnRequest)(nil), "tast.cros.policy.EvalOnTestAPIConnRequest")
	proto.RegisterType((*EvalOnTestAPIConnResponse)(nil), "tast.cros.policy.EvalOnTestAPIConnResponse")
}

func init() { proto.RegisterFile("policy.proto", fileDescriptor_ac3b897852294d6a) }

var fileDescriptor_ac3b897852294d6a = []byte{
	// 474 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x53, 0x61, 0x6b, 0xd4, 0x40,
	0x10, 0xed, 0xa9, 0x1c, 0xbd, 0xb1, 0x6a, 0xbb, 0xd8, 0xeb, 0x19, 0x41, 0x4b, 0x10, 0x3d, 0x15,
	0x12, 0xb0, 0x7e, 0x10, 0xbf, 0x48, 0xbd, 0x9e, 0xd8, 0x8a, 0x78, 0x24, 0x16, 0xd1, 0x2f, 0xb2,
	0x4d, 0xc7, 0x4b, 0xec, 0x66, 0x37, 0xee, 0x6c, 0x4a, 0xfb, 0xe7, 0xfc, 0x6d, 0xb2, 0xd9, 0xdc,
	0xa1, 0xcd, 0x5d, 0x39, 0xe4, 0xe8, 0xb7, 0xcc, 0x64, 0xde, 0x9b, 0xc7, 0xbc, 0xb7, 0xb0, 0x56,
	0x28, 0x91, 0x25, 0xe7, 0x41, 0xa1, 0x95, 0x51, 0x6c, 0xdd, 0x70, 0x32, 0x41, 0xa2, 0x15, 0x05,
	0xae, 0xef, 0xdd, 0x1f, 0x2b, 0x35, 0x16, 0x18, 0x56, 0xff, 0x8f, 0xca, 0x1f, 0x21, 0xe6, 0x85,
	0xa9, 0xc7, 0xfd, 0x2f, 0xd0, 0x1b, 0x4a, 0xad, 0x84, 0x38, 0xa4, 0x4c, 0x8e, 0x07, 0xa9, 0x56,
	0x39, 0x46, 0xf8, 0xab, 0x44, 0x32, 0xec, 0x21, 0xdc, 0x74, 0x14, 0xdf, 0x7f, 0x92, 0x92, 0xbd,
	0xd6, 0x76, 0xab, 0xbf, 0x16, 0x81, 0x6b, 0x1d, 0x90, 0x92, 0xcc, 0x83, 0xd5, 0x92, 0x50, 0x4b,
	0x9e, 0x63, 0xef, 0xda, 0x76, 0xab, 0xdf, 0x89, 0xa6, 0xb5, 0xff, 0x0a, 0x36, 0x0f, 0x8b, 0x63,
	0x6e, 0x70, 0x64, 0xe7, 0x33, 0xa4, 0x45, 0x59, 0xfd, 0x97, 0xd0, 0x8d, 0x51, 0x9f, 0x3a, 0xe0,
	0xf9, 0x1e, 0x37, 0x7c, 0x02, 0xf5, 0x60, 0x35, 0x51, 0xd2, 0xa0, 0x34, 0x54, 0xe3, 0xa6, 0xb5,
	0xff, 0x06, 0xb6, 0x1a, 0x28, 0x2a, 0x94, 0x24, 0x64, 0xeb, 0x70, 0xbd, 0xd4, 0xa2, 0x42, 0x74,
	0x22, 0xfb, 0xc9, 0x18, 0xdc, 0x48, 0x39, 0xa5, 0xb5, 0xe8, 0xea, 0xdb, 0x7f, 0x0d, 0xbd, 0xe1,
	0x29, 0x17, 0x9f, 0xe4, 0x67, 0x24, 0xb3, 0x3b, 0xda, 0x1f, 0x28, 0x29, 0x27, 0x8b, 0x1f, 0x00,
	0xe0, 0x59, 0xa1, 0x91, 0x28, 0xab, 0x25, 0x77, 0xa2, 0xbf, 0x3a, 0xfe, 0x0e, 0xdc, 0x9b, 0x81,
	0xad, 0xd7, 0x77, 0xa1, 0xad, 0x91, 0x4a, 0x61, 0x6a, 0xcd, 0x75, 0xf5, 0xe2, 0x77, 0x1b, 0x6e,
	0x39, 0xb5, 0x56, 0x78, 0x96, 0x20, 0xfb, 0x0a, 0x1b, 0x0d, 0x33, 0xd8, 0xb3, 0xe0, 0xa2, 0xa3,
	0xc1, 0x3c, 0xc7, 0xbc, 0x6e, 0xe0, 0xbc, 0x0e, 0x26, 0x5e, 0x07, 0x43, 0xeb, 0xb5, 0xbf, 0xc2,
	0x62, 0xb8, 0xfd, 0xaf, 0x1d, 0xec, 0x49, 0x93, 0x77, 0xa6, 0x61, 0x97, 0x90, 0xee, 0xc3, 0xe6,
	0x20, 0xc5, 0xe4, 0xc4, 0x89, 0xd8, 0x95, 0xc7, 0xef, 0xf8, 0x09, 0xee, 0x7d, 0x8c, 0xd9, 0x1c,
	0xc8, 0x25, 0x54, 0xef, 0xe1, 0x6e, 0x6c, 0x54, 0xb1, 0x04, 0xa6, 0x0f, 0xb0, 0x15, 0x1b, 0xae,
	0xcd, 0xf0, 0xcc, 0xd8, 0x28, 0x0a, 0x1b, 0x85, 0x2a, 0x19, 0xfa, 0x3f, 0xc8, 0x52, 0xb8, 0x73,
	0x21, 0x55, 0xac, 0xdf, 0xbc, 0xdb, 0xec, 0xb8, 0x7a, 0x4f, 0x17, 0x98, 0x74, 0x19, 0xf1, 0x57,
	0xd8, 0x01, 0x74, 0xed, 0x01, 0x96, 0xa2, 0x5a, 0xc2, 0x46, 0x23, 0x8e, 0x33, 0x73, 0x34, 0x27,
	0xef, 0xde, 0xf3, 0x85, 0x66, 0xa7, 0xda, 0x4b, 0xf7, 0x74, 0x46, 0x5a, 0xe5, 0x19, 0xe1, 0x55,
	0xad, 0x7d, 0xfb, 0xf8, 0xdb, 0xa3, 0xc4, 0xe6, 0x25, 0x2b, 0x73, 0x45, 0xa1, 0x85, 0x86, 0xe4,
	0x5e, 0x12, 0x85, 0x96, 0x23, 0x74, 0x1c, 0x47, 0xed, 0xea, 0x40, 0x3b, 0x7f, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xce, 0xae, 0x19, 0x39, 0x29, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PolicyServiceClient is the client API for PolicyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PolicyServiceClient interface {
	EnrollUsingChrome(ctx context.Context, in *EnrollUsingChromeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdatePolicies(ctx context.Context, in *UpdatePoliciesRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CheckChromeAndFakeDMS(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	StopChromeAndFakeDMS(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	StartExternalDataServer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	ServePolicyData(ctx context.Context, in *ServePolicyDataRequest, opts ...grpc.CallOption) (*ServePolicyDataResponse, error)
	StopExternalDataServer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	EvalOnTestAPIConn(ctx context.Context, in *EvalOnTestAPIConnRequest, opts ...grpc.CallOption) (*EvalOnTestAPIConnResponse, error)
	EvalPromiseOnTestAPIConn(ctx context.Context, in *EvalOnTestAPIConnRequest, opts ...grpc.CallOption) (*EvalOnTestAPIConnResponse, error)
}

type policyServiceClient struct {
	cc *grpc.ClientConn
}

func NewPolicyServiceClient(cc *grpc.ClientConn) PolicyServiceClient {
	return &policyServiceClient{cc}
}

func (c *policyServiceClient) EnrollUsingChrome(ctx context.Context, in *EnrollUsingChromeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/EnrollUsingChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) UpdatePolicies(ctx context.Context, in *UpdatePoliciesRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/UpdatePolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) CheckChromeAndFakeDMS(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/CheckChromeAndFakeDMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) StopChromeAndFakeDMS(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/StopChromeAndFakeDMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) StartExternalDataServer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/StartExternalDataServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) ServePolicyData(ctx context.Context, in *ServePolicyDataRequest, opts ...grpc.CallOption) (*ServePolicyDataResponse, error) {
	out := new(ServePolicyDataResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/ServePolicyData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) StopExternalDataServer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/StopExternalDataServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) EvalOnTestAPIConn(ctx context.Context, in *EvalOnTestAPIConnRequest, opts ...grpc.CallOption) (*EvalOnTestAPIConnResponse, error) {
	out := new(EvalOnTestAPIConnResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/EvalOnTestAPIConn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) EvalPromiseOnTestAPIConn(ctx context.Context, in *EvalOnTestAPIConnRequest, opts ...grpc.CallOption) (*EvalOnTestAPIConnResponse, error) {
	out := new(EvalOnTestAPIConnResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.PolicyService/EvalPromiseOnTestAPIConn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicyServiceServer is the server API for PolicyService service.
type PolicyServiceServer interface {
	EnrollUsingChrome(context.Context, *EnrollUsingChromeRequest) (*empty.Empty, error)
	UpdatePolicies(context.Context, *UpdatePoliciesRequest) (*empty.Empty, error)
	CheckChromeAndFakeDMS(context.Context, *empty.Empty) (*empty.Empty, error)
	StopChromeAndFakeDMS(context.Context, *empty.Empty) (*empty.Empty, error)
	StartExternalDataServer(context.Context, *empty.Empty) (*empty.Empty, error)
	ServePolicyData(context.Context, *ServePolicyDataRequest) (*ServePolicyDataResponse, error)
	StopExternalDataServer(context.Context, *empty.Empty) (*empty.Empty, error)
	EvalOnTestAPIConn(context.Context, *EvalOnTestAPIConnRequest) (*EvalOnTestAPIConnResponse, error)
	EvalPromiseOnTestAPIConn(context.Context, *EvalOnTestAPIConnRequest) (*EvalOnTestAPIConnResponse, error)
}

// UnimplementedPolicyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPolicyServiceServer struct {
}

func (*UnimplementedPolicyServiceServer) EnrollUsingChrome(ctx context.Context, req *EnrollUsingChromeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollUsingChrome not implemented")
}
func (*UnimplementedPolicyServiceServer) UpdatePolicies(ctx context.Context, req *UpdatePoliciesRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicies not implemented")
}
func (*UnimplementedPolicyServiceServer) CheckChromeAndFakeDMS(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckChromeAndFakeDMS not implemented")
}
func (*UnimplementedPolicyServiceServer) StopChromeAndFakeDMS(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopChromeAndFakeDMS not implemented")
}
func (*UnimplementedPolicyServiceServer) StartExternalDataServer(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartExternalDataServer not implemented")
}
func (*UnimplementedPolicyServiceServer) ServePolicyData(ctx context.Context, req *ServePolicyDataRequest) (*ServePolicyDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServePolicyData not implemented")
}
func (*UnimplementedPolicyServiceServer) StopExternalDataServer(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopExternalDataServer not implemented")
}
func (*UnimplementedPolicyServiceServer) EvalOnTestAPIConn(ctx context.Context, req *EvalOnTestAPIConnRequest) (*EvalOnTestAPIConnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvalOnTestAPIConn not implemented")
}
func (*UnimplementedPolicyServiceServer) EvalPromiseOnTestAPIConn(ctx context.Context, req *EvalOnTestAPIConnRequest) (*EvalOnTestAPIConnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvalPromiseOnTestAPIConn not implemented")
}

func RegisterPolicyServiceServer(s *grpc.Server, srv PolicyServiceServer) {
	s.RegisterService(&_PolicyService_serviceDesc, srv)
}

func _PolicyService_EnrollUsingChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollUsingChromeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).EnrollUsingChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/EnrollUsingChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).EnrollUsingChrome(ctx, req.(*EnrollUsingChromeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_UpdatePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).UpdatePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/UpdatePolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).UpdatePolicies(ctx, req.(*UpdatePoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_CheckChromeAndFakeDMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).CheckChromeAndFakeDMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/CheckChromeAndFakeDMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).CheckChromeAndFakeDMS(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_StopChromeAndFakeDMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).StopChromeAndFakeDMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/StopChromeAndFakeDMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).StopChromeAndFakeDMS(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_StartExternalDataServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).StartExternalDataServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/StartExternalDataServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).StartExternalDataServer(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_ServePolicyData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServePolicyDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).ServePolicyData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/ServePolicyData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).ServePolicyData(ctx, req.(*ServePolicyDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_StopExternalDataServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).StopExternalDataServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/StopExternalDataServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).StopExternalDataServer(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_EvalOnTestAPIConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvalOnTestAPIConnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).EvalOnTestAPIConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/EvalOnTestAPIConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).EvalOnTestAPIConn(ctx, req.(*EvalOnTestAPIConnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_EvalPromiseOnTestAPIConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvalOnTestAPIConnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).EvalPromiseOnTestAPIConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.PolicyService/EvalPromiseOnTestAPIConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).EvalPromiseOnTestAPIConn(ctx, req.(*EvalOnTestAPIConnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PolicyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.policy.PolicyService",
	HandlerType: (*PolicyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnrollUsingChrome",
			Handler:    _PolicyService_EnrollUsingChrome_Handler,
		},
		{
			MethodName: "UpdatePolicies",
			Handler:    _PolicyService_UpdatePolicies_Handler,
		},
		{
			MethodName: "CheckChromeAndFakeDMS",
			Handler:    _PolicyService_CheckChromeAndFakeDMS_Handler,
		},
		{
			MethodName: "StopChromeAndFakeDMS",
			Handler:    _PolicyService_StopChromeAndFakeDMS_Handler,
		},
		{
			MethodName: "StartExternalDataServer",
			Handler:    _PolicyService_StartExternalDataServer_Handler,
		},
		{
			MethodName: "ServePolicyData",
			Handler:    _PolicyService_ServePolicyData_Handler,
		},
		{
			MethodName: "StopExternalDataServer",
			Handler:    _PolicyService_StopExternalDataServer_Handler,
		},
		{
			MethodName: "EvalOnTestAPIConn",
			Handler:    _PolicyService_EvalOnTestAPIConn_Handler,
		},
		{
			MethodName: "EvalPromiseOnTestAPIConn",
			Handler:    _PolicyService_EvalPromiseOnTestAPIConn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "policy.proto",
}
