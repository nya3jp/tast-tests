// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rollback_service.proto

package policy

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RollbackSuccessfulResponse struct {
	Successful           bool     `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RollbackSuccessfulResponse) Reset()         { *m = RollbackSuccessfulResponse{} }
func (m *RollbackSuccessfulResponse) String() string { return proto.CompactTextString(m) }
func (*RollbackSuccessfulResponse) ProtoMessage()    {}
func (*RollbackSuccessfulResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fd790d2ad5b21d2, []int{0}
}

func (m *RollbackSuccessfulResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RollbackSuccessfulResponse.Unmarshal(m, b)
}
func (m *RollbackSuccessfulResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RollbackSuccessfulResponse.Marshal(b, m, deterministic)
}
func (m *RollbackSuccessfulResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollbackSuccessfulResponse.Merge(m, src)
}
func (m *RollbackSuccessfulResponse) XXX_Size() int {
	return xxx_messageInfo_RollbackSuccessfulResponse.Size(m)
}
func (m *RollbackSuccessfulResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RollbackSuccessfulResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RollbackSuccessfulResponse proto.InternalMessageInfo

func (m *RollbackSuccessfulResponse) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

func init() {
	proto.RegisterType((*RollbackSuccessfulResponse)(nil), "tast.cros.policy.RollbackSuccessfulResponse")
}

func init() { proto.RegisterFile("rollback_service.proto", fileDescriptor_1fd790d2ad5b21d2) }

var fileDescriptor_1fd790d2ad5b21d2 = []byte{
	// 203 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0xca, 0xcf, 0xc9,
	0x49, 0x4a, 0x4c, 0xce, 0x8e, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x12, 0x28, 0x49, 0x2c, 0x2e, 0xd1, 0x4b, 0x2e, 0xca, 0x2f, 0xd6, 0x2b, 0xc8,
	0xcf, 0xc9, 0x4c, 0xae, 0x94, 0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0xcb, 0x27,
	0x95, 0xa6, 0xe9, 0xa7, 0xe6, 0x16, 0x94, 0x54, 0x42, 0x94, 0x2b, 0xd9, 0x70, 0x49, 0x05, 0x41,
	0x0d, 0x0a, 0x2e, 0x4d, 0x4e, 0x4e, 0x2d, 0x2e, 0x4e, 0x2b, 0xcd, 0x09, 0x4a, 0x2d, 0x2e, 0xc8,
	0xcf, 0x2b, 0x4e, 0x15, 0x92, 0xe3, 0xe2, 0x2a, 0x86, 0x8b, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70,
	0x04, 0x21, 0x89, 0x18, 0x65, 0x72, 0xf1, 0xc3, 0x75, 0x43, 0x5c, 0x21, 0x14, 0xc6, 0xc5, 0x17,
	0x96, 0x5a, 0x94, 0x99, 0x56, 0x09, 0x93, 0x10, 0x12, 0xd3, 0x83, 0x38, 0x40, 0x0f, 0xe6, 0x00,
	0x3d, 0x57, 0x90, 0x03, 0xa4, 0x74, 0xf4, 0xd0, 0x9d, 0xaa, 0x87, 0xdb, 0x29, 0x4e, 0x6a, 0x51,
	0x2a, 0xc9, 0x19, 0x45, 0xf9, 0xb9, 0x99, 0xa5, 0xb9, 0xf9, 0xc5, 0xfa, 0x20, 0x9d, 0xfa, 0x50,
	0x8f, 0x17, 0xeb, 0x83, 0x8c, 0xd0, 0x87, 0x18, 0x91, 0xc4, 0x06, 0xb6, 0xc5, 0x18, 0x10, 0x00,
	0x00, 0xff, 0xff, 0x06, 0x21, 0xff, 0x4e, 0x20, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RollbackServiceClient is the client API for RollbackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RollbackServiceClient interface {
	VerifyRollback(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*RollbackSuccessfulResponse, error)
}

type rollbackServiceClient struct {
	cc *grpc.ClientConn
}

func NewRollbackServiceClient(cc *grpc.ClientConn) RollbackServiceClient {
	return &rollbackServiceClient{cc}
}

func (c *rollbackServiceClient) VerifyRollback(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*RollbackSuccessfulResponse, error) {
	out := new(RollbackSuccessfulResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.RollbackService/VerifyRollback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RollbackServiceServer is the server API for RollbackService service.
type RollbackServiceServer interface {
	VerifyRollback(context.Context, *empty.Empty) (*RollbackSuccessfulResponse, error)
}

// UnimplementedRollbackServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRollbackServiceServer struct {
}

func (*UnimplementedRollbackServiceServer) VerifyRollback(ctx context.Context, req *empty.Empty) (*RollbackSuccessfulResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyRollback not implemented")
}

func RegisterRollbackServiceServer(s *grpc.Server, srv RollbackServiceServer) {
	s.RegisterService(&_RollbackService_serviceDesc, srv)
}

func _RollbackService_VerifyRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RollbackServiceServer).VerifyRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.RollbackService/VerifyRollback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RollbackServiceServer).VerifyRollback(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _RollbackService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.policy.RollbackService",
	HandlerType: (*RollbackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyRollback",
			Handler:    _RollbackService_VerifyRollback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rollback_service.proto",
}
