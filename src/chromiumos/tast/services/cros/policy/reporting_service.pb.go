// Code generated by protoc-gen-go. DO NOT EDIT.
// source: reporting_service.proto

package policy

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GAIAEnrollUsingChromeAndCollectReportingRequest struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	DmserverURL          string   `protobuf:"bytes,3,opt,name=dmserverURL,proto3" json:"dmserverURL,omitempty"`
	ReportingserverURL   string   `protobuf:"bytes,4,opt,name=reportingserverURL,proto3" json:"reportingserverURL,omitempty"`
	ObfuscatedCustomerID string   `protobuf:"bytes,5,opt,name=obfuscatedCustomerID,proto3" json:"obfuscatedCustomerID,omitempty"`
	DebugServiceAPIKey   string   `protobuf:"bytes,6,opt,name=debugServiceAPIKey,proto3" json:"debugServiceAPIKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GAIAEnrollUsingChromeAndCollectReportingRequest) Reset() {
	*m = GAIAEnrollUsingChromeAndCollectReportingRequest{}
}
func (m *GAIAEnrollUsingChromeAndCollectReportingRequest) String() string {
	return proto.CompactTextString(m)
}
func (*GAIAEnrollUsingChromeAndCollectReportingRequest) ProtoMessage() {}
func (*GAIAEnrollUsingChromeAndCollectReportingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_339600976e64d668, []int{0}
}

func (m *GAIAEnrollUsingChromeAndCollectReportingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GAIAEnrollUsingChromeAndCollectReportingRequest.Unmarshal(m, b)
}
func (m *GAIAEnrollUsingChromeAndCollectReportingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GAIAEnrollUsingChromeAndCollectReportingRequest.Marshal(b, m, deterministic)
}
func (m *GAIAEnrollUsingChromeAndCollectReportingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GAIAEnrollUsingChromeAndCollectReportingRequest.Merge(m, src)
}
func (m *GAIAEnrollUsingChromeAndCollectReportingRequest) XXX_Size() int {
	return xxx_messageInfo_GAIAEnrollUsingChromeAndCollectReportingRequest.Size(m)
}
func (m *GAIAEnrollUsingChromeAndCollectReportingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GAIAEnrollUsingChromeAndCollectReportingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GAIAEnrollUsingChromeAndCollectReportingRequest proto.InternalMessageInfo

func (m *GAIAEnrollUsingChromeAndCollectReportingRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *GAIAEnrollUsingChromeAndCollectReportingRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *GAIAEnrollUsingChromeAndCollectReportingRequest) GetDmserverURL() string {
	if m != nil {
		return m.DmserverURL
	}
	return ""
}

func (m *GAIAEnrollUsingChromeAndCollectReportingRequest) GetReportingserverURL() string {
	if m != nil {
		return m.ReportingserverURL
	}
	return ""
}

func (m *GAIAEnrollUsingChromeAndCollectReportingRequest) GetObfuscatedCustomerID() string {
	if m != nil {
		return m.ObfuscatedCustomerID
	}
	return ""
}

func (m *GAIAEnrollUsingChromeAndCollectReportingRequest) GetDebugServiceAPIKey() string {
	if m != nil {
		return m.DebugServiceAPIKey
	}
	return ""
}

func init() {
	proto.RegisterType((*GAIAEnrollUsingChromeAndCollectReportingRequest)(nil), "tast.cros.policy.GAIAEnrollUsingChromeAndCollectReportingRequest")
}

func init() { proto.RegisterFile("reporting_service.proto", fileDescriptor_339600976e64d668) }

var fileDescriptor_339600976e64d668 = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcf, 0x4a, 0x33, 0x31,
	0x14, 0xc5, 0xbf, 0xe9, 0xa7, 0x45, 0xe3, 0xa6, 0x04, 0xd1, 0xa1, 0x6e, 0x4a, 0x11, 0xe9, 0x2a,
	0x81, 0xfa, 0x04, 0x63, 0x2d, 0x52, 0x74, 0x21, 0x23, 0xdd, 0xb8, 0x91, 0xf9, 0x73, 0x3b, 0x0e,
	0x4c, 0xe6, 0x8e, 0xb9, 0x89, 0xd2, 0x27, 0xf0, 0x25, 0x04, 0x5f, 0x55, 0x32, 0x69, 0xab, 0x68,
	0x17, 0xba, 0xbc, 0xf9, 0xdd, 0xc3, 0x49, 0xce, 0x09, 0x3b, 0xd6, 0xd0, 0xa0, 0x36, 0x65, 0x5d,
	0x3c, 0x10, 0xe8, 0xe7, 0x32, 0x03, 0xd1, 0x68, 0x34, 0xc8, 0x7b, 0x26, 0x21, 0x23, 0x32, 0x8d,
	0x24, 0x1a, 0xac, 0xca, 0x6c, 0xd9, 0x3f, 0x29, 0x10, 0x8b, 0x0a, 0x64, 0xcb, 0x53, 0xbb, 0x90,
	0xa0, 0x1a, 0xb3, 0xf4, 0xeb, 0xc3, 0xf7, 0x0e, 0x93, 0x57, 0xd1, 0x2c, 0x9a, 0xd6, 0x1a, 0xab,
	0x6a, 0x4e, 0x65, 0x5d, 0x4c, 0x1e, 0x35, 0x2a, 0x88, 0xea, 0x7c, 0x82, 0x55, 0x05, 0x99, 0x89,
	0xd7, 0x4e, 0x31, 0x3c, 0x59, 0x20, 0xc3, 0xfb, 0x6c, 0xcf, 0x12, 0xe8, 0x3a, 0x51, 0x10, 0x06,
	0x83, 0x60, 0xb4, 0x1f, 0x6f, 0x66, 0xc7, 0x9a, 0x84, 0xe8, 0x05, 0x75, 0x1e, 0x76, 0x3c, 0x5b,
	0xcf, 0x7c, 0xc0, 0x0e, 0x72, 0xe5, 0x6e, 0x0b, 0x7a, 0x1e, 0xdf, 0x84, 0xff, 0x5b, 0xfc, 0xf5,
	0x88, 0x0b, 0xc6, 0x37, 0xef, 0xfa, 0x5c, 0xdc, 0x69, 0x17, 0xb7, 0x10, 0x3e, 0x66, 0x87, 0x98,
	0x2e, 0x2c, 0x65, 0x89, 0x81, 0x7c, 0x62, 0xc9, 0xa0, 0x02, 0x3d, 0xbb, 0x0c, 0x77, 0x5b, 0xc5,
	0x56, 0xe6, 0x3c, 0x72, 0x48, 0x6d, 0x71, 0xe7, 0x63, 0x8b, 0x6e, 0x67, 0xd7, 0xb0, 0x0c, 0xbb,
	0xde, 0xe3, 0x27, 0x19, 0xbf, 0x05, 0xac, 0xb7, 0x89, 0x60, 0x85, 0xf8, 0x6b, 0xc0, 0x46, 0xbf,
	0x8d, 0x8d, 0x47, 0xe2, 0x7b, 0x27, 0xe2, 0x8f, 0x91, 0xf7, 0x8f, 0x84, 0x2f, 0x51, 0xac, 0x4b,
	0x14, 0x53, 0x57, 0xe2, 0xf0, 0xdf, 0xc5, 0xd9, 0xfd, 0x69, 0xe6, 0xd4, 0xa5, 0x55, 0x48, 0xd2,
	0x19, 0xc9, 0xd5, 0x87, 0x20, 0xe9, 0x1c, 0xa5, 0x77, 0x4c, 0xbb, 0xad, 0xf2, 0xfc, 0x23, 0x00,
	0x00, 0xff, 0xff, 0x99, 0x5b, 0xe1, 0x4e, 0x39, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReportingServiceClient is the client API for ReportingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReportingServiceClient interface {
	GAIAEnrollUsingChromeAndCollectReporting(ctx context.Context, in *GAIAEnrollUsingChromeAndCollectReportingRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type reportingServiceClient struct {
	cc *grpc.ClientConn
}

func NewReportingServiceClient(cc *grpc.ClientConn) ReportingServiceClient {
	return &reportingServiceClient{cc}
}

func (c *reportingServiceClient) GAIAEnrollUsingChromeAndCollectReporting(ctx context.Context, in *GAIAEnrollUsingChromeAndCollectReportingRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.ReportingService/GAIAEnrollUsingChromeAndCollectReporting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportingServiceServer is the server API for ReportingService service.
type ReportingServiceServer interface {
	GAIAEnrollUsingChromeAndCollectReporting(context.Context, *GAIAEnrollUsingChromeAndCollectReportingRequest) (*empty.Empty, error)
}

// UnimplementedReportingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedReportingServiceServer struct {
}

func (*UnimplementedReportingServiceServer) GAIAEnrollUsingChromeAndCollectReporting(ctx context.Context, req *GAIAEnrollUsingChromeAndCollectReportingRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GAIAEnrollUsingChromeAndCollectReporting not implemented")
}

func RegisterReportingServiceServer(s *grpc.Server, srv ReportingServiceServer) {
	s.RegisterService(&_ReportingService_serviceDesc, srv)
}

func _ReportingService_GAIAEnrollUsingChromeAndCollectReporting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GAIAEnrollUsingChromeAndCollectReportingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).GAIAEnrollUsingChromeAndCollectReporting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.ReportingService/GAIAEnrollUsingChromeAndCollectReporting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).GAIAEnrollUsingChromeAndCollectReporting(ctx, req.(*GAIAEnrollUsingChromeAndCollectReportingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReportingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.policy.ReportingService",
	HandlerType: (*ReportingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GAIAEnrollUsingChromeAndCollectReporting",
			Handler:    _ReportingService_GAIAEnrollUsingChromeAndCollectReporting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reporting_service.proto",
}
