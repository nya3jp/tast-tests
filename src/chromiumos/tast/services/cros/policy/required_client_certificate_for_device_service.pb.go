// Code generated by protoc-gen-go. DO NOT EDIT.
// source: required_client_certificate_for_device_service.proto

package policy

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("required_client_certificate_for_device_service.proto", fileDescriptor_84e0f3c11059fcb5)
}

var fileDescriptor_84e0f3c11059fcb5 = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0xcf, 0x31, 0x4b, 0xc5, 0x30,
	0x10, 0x07, 0x70, 0x5d, 0x1c, 0x3a, 0x49, 0x07, 0x87, 0xba, 0x88, 0x88, 0xe0, 0x92, 0x80, 0xfa,
	0x09, 0xac, 0x0a, 0x5d, 0xb5, 0x93, 0x4b, 0x68, 0xd3, 0x6b, 0x0d, 0xa4, 0xbd, 0x7a, 0x77, 0x15,
	0x3a, 0xbe, 0x6f, 0xfe, 0x48, 0xd2, 0xc7, 0x1b, 0x1e, 0x6f, 0x0a, 0xe4, 0xfe, 0xc7, 0xef, 0xfe,
	0xd9, 0x2b, 0xc1, 0xdf, 0xe2, 0x08, 0x3a, 0x63, 0xbd, 0x83, 0x49, 0x8c, 0x05, 0x12, 0xd7, 0x3b,
	0xdb, 0x08, 0x98, 0x1e, 0xc9, 0x74, 0xf0, 0xef, 0x2c, 0x18, 0x06, 0x0a, 0xaf, 0x9a, 0x09, 0x05,
	0xf3, 0x6b, 0x69, 0x58, 0x94, 0x25, 0x64, 0x35, 0xa3, 0x77, 0x76, 0x2d, 0x6e, 0x07, 0xc4, 0xc1,
	0x83, 0x8e, 0xf3, 0x76, 0xe9, 0x35, 0x8c, 0xb3, 0xac, 0x29, 0xfe, 0xbc, 0xbb, 0xcc, 0x9e, 0xbe,
	0x36, 0xa7, 0x8c, 0x4c, 0x79, 0x54, 0x3e, 0x91, 0xde, 0xa3, 0xf1, 0x9d, 0x88, 0xbc, 0xce, 0xee,
	0x6a, 0x60, 0x39, 0x09, 0x56, 0x5c, 0x4d, 0x2c, 0x8d, 0xf7, 0xd0, 0xe5, 0x37, 0x2a, 0x79, 0xea,
	0xe0, 0xa9, 0x8f, 0xe0, 0x15, 0x67, 0xfe, 0xef, 0x2f, 0xde, 0x1e, 0x7f, 0x1e, 0xec, 0x2f, 0xe1,
	0xe8, 0x96, 0x11, 0x59, 0x87, 0xfb, 0xf5, 0xd6, 0x89, 0x75, 0x28, 0xa2, 0x53, 0x91, 0xf6, 0x2a,
	0x6e, 0xbe, 0xec, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf5, 0x48, 0xa5, 0x60, 0x19, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RequiredClientCertificateForDeviceServiceClient is the client API for RequiredClientCertificateForDeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RequiredClientCertificateForDeviceServiceClient interface {
	TestClientCertificateIsInstalled(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type requiredClientCertificateForDeviceServiceClient struct {
	cc *grpc.ClientConn
}

func NewRequiredClientCertificateForDeviceServiceClient(cc *grpc.ClientConn) RequiredClientCertificateForDeviceServiceClient {
	return &requiredClientCertificateForDeviceServiceClient{cc}
}

func (c *requiredClientCertificateForDeviceServiceClient) TestClientCertificateIsInstalled(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.RequiredClientCertificateForDeviceService/TestClientCertificateIsInstalled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RequiredClientCertificateForDeviceServiceServer is the server API for RequiredClientCertificateForDeviceService service.
type RequiredClientCertificateForDeviceServiceServer interface {
	TestClientCertificateIsInstalled(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedRequiredClientCertificateForDeviceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRequiredClientCertificateForDeviceServiceServer struct {
}

func (*UnimplementedRequiredClientCertificateForDeviceServiceServer) TestClientCertificateIsInstalled(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestClientCertificateIsInstalled not implemented")
}

func RegisterRequiredClientCertificateForDeviceServiceServer(s *grpc.Server, srv RequiredClientCertificateForDeviceServiceServer) {
	s.RegisterService(&_RequiredClientCertificateForDeviceService_serviceDesc, srv)
}

func _RequiredClientCertificateForDeviceService_TestClientCertificateIsInstalled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequiredClientCertificateForDeviceServiceServer).TestClientCertificateIsInstalled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.RequiredClientCertificateForDeviceService/TestClientCertificateIsInstalled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequiredClientCertificateForDeviceServiceServer).TestClientCertificateIsInstalled(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _RequiredClientCertificateForDeviceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.policy.RequiredClientCertificateForDeviceService",
	HandlerType: (*RequiredClientCertificateForDeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestClientCertificateIsInstalled",
			Handler:    _RequiredClientCertificateForDeviceService_TestClientCertificateIsInstalled_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "required_client_certificate_for_device_service.proto",
}
