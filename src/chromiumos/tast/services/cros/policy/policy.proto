// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package tast.cros.policy;

import "google/protobuf/empty.proto";

option go_package = "chromiumos/tast/services/cros/policy";

// Policy provides functions to perform enrollment.
service PolicyService {
  rpc EnrollUsingChrome(EnrollUsingChromeRequest) returns (google.protobuf.Empty) {}
  rpc UpdatePolicies(UpdatePoliciesRequest) returns (google.protobuf.Empty) {}
  rpc CheckChromeAndFakeDMS(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  rpc StopChromeAndFakeDMS(google.protobuf.Empty) returns (google.protobuf.Empty) {}

  rpc StartExternalDataServer(google.protobuf.Empty)
      returns (google.protobuf.Empty) {}
  rpc ServePolicyData(ServePolicyDataRequest)
      returns (ServePolicyDataResponse) {}
  rpc StopExternalDataServer(google.protobuf.Empty)
      returns (google.protobuf.Empty) {}

  rpc EvalStatementInExtension(EvalInExtensionRequest)
      returns (google.protobuf.Empty) {}
  rpc EvalInExtension(EvalInExtensionRequest)
      returns (EvalInExtensionResponse) {}

  // Verifies that the notification corresponding to the id in the request is visible.
  rpc VerifyVisibleNotification(VerifyVisibleNotificationRequest)
      returns (google.protobuf.Empty) {}
  // Creates a new connection to the Chrome URL in the request and evaluates the expression in the request on it.
  rpc EvalExpressionInChromeURL(EvalExpressionInChromeUrlRequest)
      returns (google.protobuf.Empty) {}

  rpc CreateArcInstance(google.protobuf.Empty)
      returns (google.protobuf.Empty) {}
  // Installs an ARC++ test app and uses it to verify network connectivity. 
  rpc VerifyArcAppConnectivity(VerifyArcAppConnectivityRequest)
      returns (VerifyArcAppConnectivityResponse) {}
}

message EnrollUsingChromeRequest {
  bytes policy_json = 1;
  string username = 2;
  repeated Extension extensions = 3;
  string extra_args = 4;
}

message UpdatePoliciesRequest {
  bytes policy_json = 1;
}

message ServePolicyDataRequest {
  bytes contents = 1;
}

message ServePolicyDataResponse {
  string url = 1;
  string hash = 2;
}

message EvalInExtensionRequest {
  string extension_id = 1;
  string expression = 2;
}

message EvalInExtensionResponse {
  bytes result = 1;
}

message ExtensionFile {
  string name = 1;
  bytes contents = 2;
}

message Extension {
  string id = 1;
  repeated ExtensionFile files = 2;
}

message VerifyVisibleNotificationRequest {
  string notification_id = 1;
}

message EvalExpressionInChromeUrlRequest {
  string url = 1;
  string expression = 2;
}

message VerifyArcAppConnectivityRequest {
  // URL for testing network connectivity. The ARC++ app will connect to this
  // URL and return the HTTP status code if the request was successful or an
  // error message, in case of failure.
  string url = 1;
  // Indicates if the system-proxy daemon should be used to authenticate the
  // network request originating from the app to a remote HTTP proxy. If true,
  // the `proxy_username` and `proxy_password` must be set.
  bool use_system_proxy = 2;
  // Username to authenticate to the HTTP proxy via the system-proxy dialog.
  // Only used if `use_system_proxy` is true.
  string proxy_username = 3;
  // Password to authenticate to the HTTP proxy via the system-proxy dialog.
  // Only used if `use_system_proxy` is true.
  string proxy_password = 4;
}

message VerifyArcAppConnectivityResponse {
  // The HTTP response code or an error.
  string response = 1;
  // The HTTP proxy used by the ARC app as host:port (should be the global
  // proxy).
  string proxy = 2;
}