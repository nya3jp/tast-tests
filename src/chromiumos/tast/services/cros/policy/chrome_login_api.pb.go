// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chrome_login_api.proto

package policy

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TestLaunchManagedGuestSessionRequest struct {
	ExtensionID          string   `protobuf:"bytes,1,opt,name=ExtensionID,proto3" json:"ExtensionID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestLaunchManagedGuestSessionRequest) Reset()         { *m = TestLaunchManagedGuestSessionRequest{} }
func (m *TestLaunchManagedGuestSessionRequest) String() string { return proto.CompactTextString(m) }
func (*TestLaunchManagedGuestSessionRequest) ProtoMessage()    {}
func (*TestLaunchManagedGuestSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_32c1fc5df970e08a, []int{0}
}

func (m *TestLaunchManagedGuestSessionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestLaunchManagedGuestSessionRequest.Unmarshal(m, b)
}
func (m *TestLaunchManagedGuestSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestLaunchManagedGuestSessionRequest.Marshal(b, m, deterministic)
}
func (m *TestLaunchManagedGuestSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestLaunchManagedGuestSessionRequest.Merge(m, src)
}
func (m *TestLaunchManagedGuestSessionRequest) XXX_Size() int {
	return xxx_messageInfo_TestLaunchManagedGuestSessionRequest.Size(m)
}
func (m *TestLaunchManagedGuestSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TestLaunchManagedGuestSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TestLaunchManagedGuestSessionRequest proto.InternalMessageInfo

func (m *TestLaunchManagedGuestSessionRequest) GetExtensionID() string {
	if m != nil {
		return m.ExtensionID
	}
	return ""
}

func init() {
	proto.RegisterType((*TestLaunchManagedGuestSessionRequest)(nil), "tast.cros.policy.TestLaunchManagedGuestSessionRequest")
}

func init() { proto.RegisterFile("chrome_login_api.proto", fileDescriptor_32c1fc5df970e08a) }

var fileDescriptor_32c1fc5df970e08a = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4b, 0xce, 0x28, 0xca,
	0xcf, 0x4d, 0x8d, 0xcf, 0xc9, 0x4f, 0xcf, 0xcc, 0x8b, 0x4f, 0x2c, 0xc8, 0xd4, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x12, 0x28, 0x49, 0x2c, 0x2e, 0xd1, 0x4b, 0x2e, 0xca, 0x2f, 0xd6, 0x2b, 0xc8,
	0xcf, 0xc9, 0x4c, 0xae, 0x94, 0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0xcb, 0x27,
	0x95, 0xa6, 0xe9, 0xa7, 0xe6, 0x16, 0x94, 0x54, 0x42, 0x94, 0x2b, 0x79, 0x70, 0xa9, 0x84, 0xa4,
	0x16, 0x97, 0xf8, 0x24, 0x96, 0xe6, 0x25, 0x67, 0xf8, 0x26, 0xe6, 0x25, 0xa6, 0xa7, 0xa6, 0xb8,
	0x97, 0xa6, 0x16, 0x97, 0x04, 0xa7, 0x16, 0x17, 0x67, 0xe6, 0xe7, 0x05, 0xa5, 0x16, 0x82, 0x78,
	0x42, 0x0a, 0x5c, 0xdc, 0xae, 0x15, 0x25, 0xa9, 0x79, 0x20, 0x31, 0x4f, 0x17, 0x09, 0x46, 0x05,
	0x46, 0x0d, 0xce, 0x20, 0x64, 0x21, 0xa3, 0x2e, 0x46, 0x2e, 0x51, 0x67, 0xb0, 0x9b, 0x7c, 0x40,
	0x4e, 0x72, 0x0c, 0xf0, 0x0c, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x15, 0x2a, 0xe4, 0x92, 0xc5,
	0x6b, 0x87, 0x90, 0x99, 0x1e, 0xba, 0xa3, 0xf5, 0x88, 0x71, 0x94, 0x94, 0x98, 0x1e, 0xc4, 0x6b,
	0x7a, 0x30, 0xaf, 0xe9, 0xb9, 0x82, 0xbc, 0xa6, 0xc4, 0xe0, 0xa4, 0x16, 0xa5, 0x02, 0x0e, 0x9f,
	0xcc, 0xd2, 0xdc, 0xfc, 0x62, 0x7d, 0x90, 0xe9, 0xfa, 0xc5, 0x10, 0xd7, 0x14, 0xeb, 0x83, 0xac,
	0xd1, 0x87, 0x58, 0x93, 0xc4, 0x06, 0xd6, 0x69, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x21, 0x91,
	0xa4, 0x27, 0x4e, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChromeLoginAPIServiceClient is the client API for ChromeLoginAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChromeLoginAPIServiceClient interface {
	TestLaunchManagedGuestSession(ctx context.Context, in *TestLaunchManagedGuestSessionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type chromeLoginAPIServiceClient struct {
	cc *grpc.ClientConn
}

func NewChromeLoginAPIServiceClient(cc *grpc.ClientConn) ChromeLoginAPIServiceClient {
	return &chromeLoginAPIServiceClient{cc}
}

func (c *chromeLoginAPIServiceClient) TestLaunchManagedGuestSession(ctx context.Context, in *TestLaunchManagedGuestSessionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.ChromeLoginAPIService/TestLaunchManagedGuestSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChromeLoginAPIServiceServer is the server API for ChromeLoginAPIService service.
type ChromeLoginAPIServiceServer interface {
	TestLaunchManagedGuestSession(context.Context, *TestLaunchManagedGuestSessionRequest) (*empty.Empty, error)
}

// UnimplementedChromeLoginAPIServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChromeLoginAPIServiceServer struct {
}

func (*UnimplementedChromeLoginAPIServiceServer) TestLaunchManagedGuestSession(ctx context.Context, req *TestLaunchManagedGuestSessionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestLaunchManagedGuestSession not implemented")
}

func RegisterChromeLoginAPIServiceServer(s *grpc.Server, srv ChromeLoginAPIServiceServer) {
	s.RegisterService(&_ChromeLoginAPIService_serviceDesc, srv)
}

func _ChromeLoginAPIService_TestLaunchManagedGuestSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestLaunchManagedGuestSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChromeLoginAPIServiceServer).TestLaunchManagedGuestSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.ChromeLoginAPIService/TestLaunchManagedGuestSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChromeLoginAPIServiceServer).TestLaunchManagedGuestSession(ctx, req.(*TestLaunchManagedGuestSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChromeLoginAPIService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.policy.ChromeLoginAPIService",
	HandlerType: (*ChromeLoginAPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestLaunchManagedGuestSession",
			Handler:    _ChromeLoginAPIService_TestLaunchManagedGuestSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chrome_login_api.proto",
}
