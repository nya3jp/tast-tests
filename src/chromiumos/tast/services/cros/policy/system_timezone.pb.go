// Code generated by protoc-gen-go. DO NOT EDIT.
// source: system_timezone.proto

package policy

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TestSystemTimezoneRequest struct {
	Timezone             string   `protobuf:"bytes,1,opt,name=Timezone,proto3" json:"Timezone,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestSystemTimezoneRequest) Reset()         { *m = TestSystemTimezoneRequest{} }
func (m *TestSystemTimezoneRequest) String() string { return proto.CompactTextString(m) }
func (*TestSystemTimezoneRequest) ProtoMessage()    {}
func (*TestSystemTimezoneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20af71a5945594e9, []int{0}
}

func (m *TestSystemTimezoneRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestSystemTimezoneRequest.Unmarshal(m, b)
}
func (m *TestSystemTimezoneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestSystemTimezoneRequest.Marshal(b, m, deterministic)
}
func (m *TestSystemTimezoneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestSystemTimezoneRequest.Merge(m, src)
}
func (m *TestSystemTimezoneRequest) XXX_Size() int {
	return xxx_messageInfo_TestSystemTimezoneRequest.Size(m)
}
func (m *TestSystemTimezoneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TestSystemTimezoneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TestSystemTimezoneRequest proto.InternalMessageInfo

func (m *TestSystemTimezoneRequest) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func init() {
	proto.RegisterType((*TestSystemTimezoneRequest)(nil), "tast.cros.policy.TestSystemTimezoneRequest")
}

func init() { proto.RegisterFile("system_timezone.proto", fileDescriptor_20af71a5945594e9) }

var fileDescriptor_20af71a5945594e9 = []byte{
	// 199 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0xae, 0x2c, 0x2e,
	0x49, 0xcd, 0x8d, 0x2f, 0xc9, 0xcc, 0x4d, 0xad, 0xca, 0xcf, 0x4b, 0xd5, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x12, 0x28, 0x49, 0x2c, 0x2e, 0xd1, 0x4b, 0x2e, 0xca, 0x2f, 0xd6, 0x2b, 0xc8, 0xcf,
	0xc9, 0x4c, 0xae, 0x94, 0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0xcb, 0x27, 0x95,
	0xa6, 0xe9, 0xa7, 0xe6, 0x16, 0x94, 0x54, 0x42, 0x94, 0x2b, 0x99, 0x73, 0x49, 0x86, 0xa4, 0x16,
	0x97, 0x04, 0x83, 0xcd, 0x0a, 0x81, 0x1a, 0x15, 0x94, 0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0x22, 0x24,
	0xc5, 0xc5, 0x01, 0x13, 0x92, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0xf3, 0x8d, 0x4a, 0xb8,
	0x44, 0x51, 0x35, 0x05, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x0a, 0x45, 0x73, 0x09, 0x61, 0x9a,
	0x28, 0xa4, 0xad, 0x87, 0xee, 0x2e, 0x3d, 0x9c, 0xf6, 0x4a, 0x89, 0xe9, 0x41, 0x9c, 0xac, 0x07,
	0x73, 0xb2, 0x9e, 0x2b, 0xc8, 0xc9, 0x4a, 0x0c, 0x4e, 0x6a, 0x51, 0x2a, 0xc9, 0x19, 0x45, 0xf9,
	0xb9, 0x99, 0xa5, 0xb9, 0xf9, 0xc5, 0xfa, 0x20, 0x23, 0xf5, 0x8b, 0x21, 0xf6, 0x16, 0xeb, 0x83,
	0xcc, 0xd6, 0x87, 0x98, 0x9d, 0xc4, 0x06, 0xd6, 0x69, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xc1,
	0x39, 0xd7, 0xc5, 0x25, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SystemTimezoneServiceClient is the client API for SystemTimezoneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SystemTimezoneServiceClient interface {
	TestSystemTimezone(ctx context.Context, in *TestSystemTimezoneRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type systemTimezoneServiceClient struct {
	cc *grpc.ClientConn
}

func NewSystemTimezoneServiceClient(cc *grpc.ClientConn) SystemTimezoneServiceClient {
	return &systemTimezoneServiceClient{cc}
}

func (c *systemTimezoneServiceClient) TestSystemTimezone(ctx context.Context, in *TestSystemTimezoneRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.policy.SystemTimezoneService/TestSystemTimezone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemTimezoneServiceServer is the server API for SystemTimezoneService service.
type SystemTimezoneServiceServer interface {
	TestSystemTimezone(context.Context, *TestSystemTimezoneRequest) (*empty.Empty, error)
}

// UnimplementedSystemTimezoneServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSystemTimezoneServiceServer struct {
}

func (*UnimplementedSystemTimezoneServiceServer) TestSystemTimezone(ctx context.Context, req *TestSystemTimezoneRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestSystemTimezone not implemented")
}

func RegisterSystemTimezoneServiceServer(s *grpc.Server, srv SystemTimezoneServiceServer) {
	s.RegisterService(&_SystemTimezoneService_serviceDesc, srv)
}

func _SystemTimezoneService_TestSystemTimezone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestSystemTimezoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemTimezoneServiceServer).TestSystemTimezone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.policy.SystemTimezoneService/TestSystemTimezone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemTimezoneServiceServer).TestSystemTimezone(ctx, req.(*TestSystemTimezoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SystemTimezoneService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.policy.SystemTimezoneService",
	HandlerType: (*SystemTimezoneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestSystemTimezone",
			Handler:    _SystemTimezoneService_TestSystemTimezone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system_timezone.proto",
}
