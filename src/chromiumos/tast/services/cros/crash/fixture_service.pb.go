// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: fixture_service.proto

package crash

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SetUpCrashTestRequest_ConsentType int32

const (
	SetUpCrashTestRequest_MOCK_CONSENT SetUpCrashTestRequest_ConsentType = 0
	SetUpCrashTestRequest_REAL_CONSENT SetUpCrashTestRequest_ConsentType = 1
)

// Enum value maps for SetUpCrashTestRequest_ConsentType.
var (
	SetUpCrashTestRequest_ConsentType_name = map[int32]string{
		0: "MOCK_CONSENT",
		1: "REAL_CONSENT",
	}
	SetUpCrashTestRequest_ConsentType_value = map[string]int32{
		"MOCK_CONSENT": 0,
		"REAL_CONSENT": 1,
	}
)

func (x SetUpCrashTestRequest_ConsentType) Enum() *SetUpCrashTestRequest_ConsentType {
	p := new(SetUpCrashTestRequest_ConsentType)
	*p = x
	return p
}

func (x SetUpCrashTestRequest_ConsentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetUpCrashTestRequest_ConsentType) Descriptor() protoreflect.EnumDescriptor {
	return file_fixture_service_proto_enumTypes[0].Descriptor()
}

func (SetUpCrashTestRequest_ConsentType) Type() protoreflect.EnumType {
	return &file_fixture_service_proto_enumTypes[0]
}

func (x SetUpCrashTestRequest_ConsentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetUpCrashTestRequest_ConsentType.Descriptor instead.
func (SetUpCrashTestRequest_ConsentType) EnumDescriptor() ([]byte, []int) {
	return file_fixture_service_proto_rawDescGZIP(), []int{0, 0}
}

type SetUpCrashTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consent SetUpCrashTestRequest_ConsentType `protobuf:"varint,1,opt,name=consent,proto3,enum=tast.cros.crash.SetUpCrashTestRequest_ConsentType" json:"consent,omitempty"`
}

func (x *SetUpCrashTestRequest) Reset() {
	*x = SetUpCrashTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fixture_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUpCrashTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUpCrashTestRequest) ProtoMessage() {}

func (x *SetUpCrashTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fixture_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUpCrashTestRequest.ProtoReflect.Descriptor instead.
func (*SetUpCrashTestRequest) Descriptor() ([]byte, []int) {
	return file_fixture_service_proto_rawDescGZIP(), []int{0}
}

func (x *SetUpCrashTestRequest) GetConsent() SetUpCrashTestRequest_ConsentType {
	if x != nil {
		return x.Consent
	}
	return SetUpCrashTestRequest_MOCK_CONSENT
}

type EnableCrashFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the program to be handled by crash_reporter.
	// There are two special cases:
	// An empty string means all crashes should be handled. Equivalent to DisableCrashFilter.
	// A string "none" means no crashes should be handled at all regardless of process name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *EnableCrashFilterRequest) Reset() {
	*x = EnableCrashFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fixture_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableCrashFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableCrashFilterRequest) ProtoMessage() {}

func (x *EnableCrashFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fixture_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableCrashFilterRequest.ProtoReflect.Descriptor instead.
func (*EnableCrashFilterRequest) Descriptor() ([]byte, []int) {
	return file_fixture_service_proto_rawDescGZIP(), []int{1}
}

func (x *EnableCrashFilterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// This deliberately does NOT use the "oldFiles" parameter in WaitForCrashFiles
// because that is redundant with SetUp's function of moving crashes to a
// temporary stash directory (and will eventually be removed).
type WaitForCrashFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dirs    []string `protobuf:"bytes,1,rep,name=dirs,proto3" json:"dirs,omitempty"`
	Regexes []string `protobuf:"bytes,2,rep,name=regexes,proto3" json:"regexes,omitempty"`
}

func (x *WaitForCrashFilesRequest) Reset() {
	*x = WaitForCrashFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fixture_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForCrashFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForCrashFilesRequest) ProtoMessage() {}

func (x *WaitForCrashFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fixture_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForCrashFilesRequest.ProtoReflect.Descriptor instead.
func (*WaitForCrashFilesRequest) Descriptor() ([]byte, []int) {
	return file_fixture_service_proto_rawDescGZIP(), []int{2}
}

func (x *WaitForCrashFilesRequest) GetDirs() []string {
	if x != nil {
		return x.Dirs
	}
	return nil
}

func (x *WaitForCrashFilesRequest) GetRegexes() []string {
	if x != nil {
		return x.Regexes
	}
	return nil
}

type WaitForCrashFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matches []*RegexMatch `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
}

func (x *WaitForCrashFilesResponse) Reset() {
	*x = WaitForCrashFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fixture_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForCrashFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForCrashFilesResponse) ProtoMessage() {}

func (x *WaitForCrashFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fixture_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForCrashFilesResponse.ProtoReflect.Descriptor instead.
func (*WaitForCrashFilesResponse) Descriptor() ([]byte, []int) {
	return file_fixture_service_proto_rawDescGZIP(), []int{3}
}

func (x *WaitForCrashFilesResponse) GetMatches() []*RegexMatch {
	if x != nil {
		return x.Matches
	}
	return nil
}

type RemoveAllFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matches []*RegexMatch `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
}

func (x *RemoveAllFilesRequest) Reset() {
	*x = RemoveAllFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fixture_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveAllFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAllFilesRequest) ProtoMessage() {}

func (x *RemoveAllFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fixture_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAllFilesRequest.ProtoReflect.Descriptor instead.
func (*RemoveAllFilesRequest) Descriptor() ([]byte, []int) {
	return file_fixture_service_proto_rawDescGZIP(), []int{4}
}

func (x *RemoveAllFilesRequest) GetMatches() []*RegexMatch {
	if x != nil {
		return x.Matches
	}
	return nil
}

type SetConsentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consent bool `protobuf:"varint,1,opt,name=consent,proto3" json:"consent,omitempty"`
}

func (x *SetConsentRequest) Reset() {
	*x = SetConsentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fixture_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConsentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConsentRequest) ProtoMessage() {}

func (x *SetConsentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fixture_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConsentRequest.ProtoReflect.Descriptor instead.
func (*SetConsentRequest) Descriptor() ([]byte, []int) {
	return file_fixture_service_proto_rawDescGZIP(), []int{5}
}

func (x *SetConsentRequest) GetConsent() bool {
	if x != nil {
		return x.Consent
	}
	return false
}

type RegexMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Regex string   `protobuf:"bytes,1,opt,name=regex,proto3" json:"regex,omitempty"`
	Files []string `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *RegexMatch) Reset() {
	*x = RegexMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fixture_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegexMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegexMatch) ProtoMessage() {}

func (x *RegexMatch) ProtoReflect() protoreflect.Message {
	mi := &file_fixture_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegexMatch.ProtoReflect.Descriptor instead.
func (*RegexMatch) Descriptor() ([]byte, []int) {
	return file_fixture_service_proto_rawDescGZIP(), []int{6}
}

func (x *RegexMatch) GetRegex() string {
	if x != nil {
		return x.Regex
	}
	return ""
}

func (x *RegexMatch) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

var File_fixture_service_proto protoreflect.FileDescriptor

var file_fixture_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72,
	0x6f, 0x73, 0x2e, 0x63, 0x72, 0x61, 0x73, 0x68, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x55, 0x70, 0x43,
	0x72, 0x61, 0x73, 0x68, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x32, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x63, 0x72, 0x61,
	0x73, 0x68, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x70, 0x43, 0x72, 0x61, 0x73, 0x68, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x22, 0x31, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c,
	0x4d, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x01,
	0x22, 0x2e, 0x0a, 0x18, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x61, 0x73, 0x68, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x48, 0x0a, 0x18, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x72, 0x61, 0x73, 0x68,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x69, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x69, 0x72, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x65, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x67, 0x65, 0x78, 0x65, 0x73, 0x22, 0x52, 0x0a, 0x19, 0x57, 0x61,
	0x69, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x72, 0x61, 0x73, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x2e, 0x63, 0x72, 0x61, 0x73, 0x68, 0x2e, 0x52, 0x65, 0x67, 0x65, 0x78,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0x4e,
	0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x2e, 0x63, 0x72, 0x61, 0x73, 0x68, 0x2e, 0x52, 0x65, 0x67, 0x65, 0x78,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0x2d,
	0x0a, 0x11, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x22, 0x38, 0x0a,
	0x0a, 0x52, 0x65, 0x67, 0x65, 0x78, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x65, 0x67, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x32, 0xc9, 0x04, 0x0a, 0x0e, 0x46, 0x69, 0x78, 0x74,
	0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x53, 0x65,
	0x74, 0x55, 0x70, 0x12, 0x26, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e,
	0x63, 0x72, 0x61, 0x73, 0x68, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x70, 0x43, 0x72, 0x61, 0x73, 0x68,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x72, 0x61, 0x73, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x74, 0x61, 0x73,
	0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x63, 0x72, 0x61, 0x73, 0x68, 0x2e, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x72, 0x61, 0x73, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x46, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x61, 0x73, 0x68, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x11, 0x57, 0x61, 0x69, 0x74, 0x46,
	0x6f, 0x72, 0x43, 0x72, 0x61, 0x73, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x74,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x63, 0x72, 0x61, 0x73, 0x68, 0x2e, 0x57,
	0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x72, 0x61, 0x73, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x2e, 0x63, 0x72, 0x61, 0x73, 0x68, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f,
	0x72, 0x43, 0x72, 0x61, 0x73, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41,
	0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x2e, 0x63, 0x72, 0x61, 0x73, 0x68, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x41, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0a, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x2e, 0x63, 0x72, 0x61, 0x73, 0x68, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x08, 0x54, 0x65, 0x61, 0x72, 0x44, 0x6f, 0x77,
	0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x42, 0x25, 0x5a, 0x23, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f,
	0x73, 0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x63, 0x72, 0x6f, 0x73, 0x2f, 0x63, 0x72, 0x61, 0x73, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_fixture_service_proto_rawDescOnce sync.Once
	file_fixture_service_proto_rawDescData = file_fixture_service_proto_rawDesc
)

func file_fixture_service_proto_rawDescGZIP() []byte {
	file_fixture_service_proto_rawDescOnce.Do(func() {
		file_fixture_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_fixture_service_proto_rawDescData)
	})
	return file_fixture_service_proto_rawDescData
}

var file_fixture_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_fixture_service_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_fixture_service_proto_goTypes = []interface{}{
	(SetUpCrashTestRequest_ConsentType)(0), // 0: tast.cros.crash.SetUpCrashTestRequest.ConsentType
	(*SetUpCrashTestRequest)(nil),          // 1: tast.cros.crash.SetUpCrashTestRequest
	(*EnableCrashFilterRequest)(nil),       // 2: tast.cros.crash.EnableCrashFilterRequest
	(*WaitForCrashFilesRequest)(nil),       // 3: tast.cros.crash.WaitForCrashFilesRequest
	(*WaitForCrashFilesResponse)(nil),      // 4: tast.cros.crash.WaitForCrashFilesResponse
	(*RemoveAllFilesRequest)(nil),          // 5: tast.cros.crash.RemoveAllFilesRequest
	(*SetConsentRequest)(nil),              // 6: tast.cros.crash.SetConsentRequest
	(*RegexMatch)(nil),                     // 7: tast.cros.crash.RegexMatch
	(*empty.Empty)(nil),                    // 8: google.protobuf.Empty
}
var file_fixture_service_proto_depIdxs = []int32{
	0,  // 0: tast.cros.crash.SetUpCrashTestRequest.consent:type_name -> tast.cros.crash.SetUpCrashTestRequest.ConsentType
	7,  // 1: tast.cros.crash.WaitForCrashFilesResponse.matches:type_name -> tast.cros.crash.RegexMatch
	7,  // 2: tast.cros.crash.RemoveAllFilesRequest.matches:type_name -> tast.cros.crash.RegexMatch
	1,  // 3: tast.cros.crash.FixtureService.SetUp:input_type -> tast.cros.crash.SetUpCrashTestRequest
	2,  // 4: tast.cros.crash.FixtureService.EnableCrashFilter:input_type -> tast.cros.crash.EnableCrashFilterRequest
	8,  // 5: tast.cros.crash.FixtureService.DisableCrashFilter:input_type -> google.protobuf.Empty
	3,  // 6: tast.cros.crash.FixtureService.WaitForCrashFiles:input_type -> tast.cros.crash.WaitForCrashFilesRequest
	5,  // 7: tast.cros.crash.FixtureService.RemoveAllFiles:input_type -> tast.cros.crash.RemoveAllFilesRequest
	6,  // 8: tast.cros.crash.FixtureService.SetConsent:input_type -> tast.cros.crash.SetConsentRequest
	8,  // 9: tast.cros.crash.FixtureService.TearDown:input_type -> google.protobuf.Empty
	8,  // 10: tast.cros.crash.FixtureService.SetUp:output_type -> google.protobuf.Empty
	8,  // 11: tast.cros.crash.FixtureService.EnableCrashFilter:output_type -> google.protobuf.Empty
	8,  // 12: tast.cros.crash.FixtureService.DisableCrashFilter:output_type -> google.protobuf.Empty
	4,  // 13: tast.cros.crash.FixtureService.WaitForCrashFiles:output_type -> tast.cros.crash.WaitForCrashFilesResponse
	8,  // 14: tast.cros.crash.FixtureService.RemoveAllFiles:output_type -> google.protobuf.Empty
	8,  // 15: tast.cros.crash.FixtureService.SetConsent:output_type -> google.protobuf.Empty
	8,  // 16: tast.cros.crash.FixtureService.TearDown:output_type -> google.protobuf.Empty
	10, // [10:17] is the sub-list for method output_type
	3,  // [3:10] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_fixture_service_proto_init() }
func file_fixture_service_proto_init() {
	if File_fixture_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fixture_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUpCrashTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fixture_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableCrashFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fixture_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForCrashFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fixture_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForCrashFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fixture_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveAllFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fixture_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConsentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fixture_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegexMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fixture_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fixture_service_proto_goTypes,
		DependencyIndexes: file_fixture_service_proto_depIdxs,
		EnumInfos:         file_fixture_service_proto_enumTypes,
		MessageInfos:      file_fixture_service_proto_msgTypes,
	}.Build()
	File_fixture_service_proto = out.File
	file_fixture_service_proto_rawDesc = nil
	file_fixture_service_proto_goTypes = nil
	file_fixture_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FixtureServiceClient is the client API for FixtureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FixtureServiceClient interface {
	// SetUp sets up the DUT for a crash test.
	// For more details on what, precisely, it does, see documentation for
	// "SetUpCrashTest" in the local/crash tast library.
	// After the test is complete, you must call TearDown to clean up the
	// associated resources.
	SetUp(ctx context.Context, in *SetUpCrashTestRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// EnableCrashFilter sets crash_reporter filter by process name.
	EnableCrashFilter(ctx context.Context, in *EnableCrashFilterRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// DisableCrashFilter disables crash_reporter filter.
	DisableCrashFilter(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// WaitForCrashFiles waits for the crash boot collector to finish, and then
	// for the specified crash files to be present.
	// See crash.go's WaitForCrashFiles for interface details.
	WaitForCrashFiles(ctx context.Context, in *WaitForCrashFilesRequest, opts ...grpc.CallOption) (*WaitForCrashFilesResponse, error)
	// RemoveAllFiles removes all files in the request.
	RemoveAllFiles(ctx context.Context, in *RemoveAllFilesRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// SetConsent sets consent as specified in the request.
	SetConsent(ctx context.Context, in *SetConsentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// TearDown undoes the actions SetUp does and resets the machine to normal
	// state.
	TearDown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type fixtureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFixtureServiceClient(cc grpc.ClientConnInterface) FixtureServiceClient {
	return &fixtureServiceClient{cc}
}

func (c *fixtureServiceClient) SetUp(ctx context.Context, in *SetUpCrashTestRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.crash.FixtureService/SetUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fixtureServiceClient) EnableCrashFilter(ctx context.Context, in *EnableCrashFilterRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.crash.FixtureService/EnableCrashFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fixtureServiceClient) DisableCrashFilter(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.crash.FixtureService/DisableCrashFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fixtureServiceClient) WaitForCrashFiles(ctx context.Context, in *WaitForCrashFilesRequest, opts ...grpc.CallOption) (*WaitForCrashFilesResponse, error) {
	out := new(WaitForCrashFilesResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.crash.FixtureService/WaitForCrashFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fixtureServiceClient) RemoveAllFiles(ctx context.Context, in *RemoveAllFilesRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.crash.FixtureService/RemoveAllFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fixtureServiceClient) SetConsent(ctx context.Context, in *SetConsentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.crash.FixtureService/SetConsent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fixtureServiceClient) TearDown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.crash.FixtureService/TearDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FixtureServiceServer is the server API for FixtureService service.
type FixtureServiceServer interface {
	// SetUp sets up the DUT for a crash test.
	// For more details on what, precisely, it does, see documentation for
	// "SetUpCrashTest" in the local/crash tast library.
	// After the test is complete, you must call TearDown to clean up the
	// associated resources.
	SetUp(context.Context, *SetUpCrashTestRequest) (*empty.Empty, error)
	// EnableCrashFilter sets crash_reporter filter by process name.
	EnableCrashFilter(context.Context, *EnableCrashFilterRequest) (*empty.Empty, error)
	// DisableCrashFilter disables crash_reporter filter.
	DisableCrashFilter(context.Context, *empty.Empty) (*empty.Empty, error)
	// WaitForCrashFiles waits for the crash boot collector to finish, and then
	// for the specified crash files to be present.
	// See crash.go's WaitForCrashFiles for interface details.
	WaitForCrashFiles(context.Context, *WaitForCrashFilesRequest) (*WaitForCrashFilesResponse, error)
	// RemoveAllFiles removes all files in the request.
	RemoveAllFiles(context.Context, *RemoveAllFilesRequest) (*empty.Empty, error)
	// SetConsent sets consent as specified in the request.
	SetConsent(context.Context, *SetConsentRequest) (*empty.Empty, error)
	// TearDown undoes the actions SetUp does and resets the machine to normal
	// state.
	TearDown(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedFixtureServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFixtureServiceServer struct {
}

func (*UnimplementedFixtureServiceServer) SetUp(context.Context, *SetUpCrashTestRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUp not implemented")
}
func (*UnimplementedFixtureServiceServer) EnableCrashFilter(context.Context, *EnableCrashFilterRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableCrashFilter not implemented")
}
func (*UnimplementedFixtureServiceServer) DisableCrashFilter(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableCrashFilter not implemented")
}
func (*UnimplementedFixtureServiceServer) WaitForCrashFiles(context.Context, *WaitForCrashFilesRequest) (*WaitForCrashFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForCrashFiles not implemented")
}
func (*UnimplementedFixtureServiceServer) RemoveAllFiles(context.Context, *RemoveAllFilesRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAllFiles not implemented")
}
func (*UnimplementedFixtureServiceServer) SetConsent(context.Context, *SetConsentRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConsent not implemented")
}
func (*UnimplementedFixtureServiceServer) TearDown(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TearDown not implemented")
}

func RegisterFixtureServiceServer(s *grpc.Server, srv FixtureServiceServer) {
	s.RegisterService(&_FixtureService_serviceDesc, srv)
}

func _FixtureService_SetUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUpCrashTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FixtureServiceServer).SetUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.crash.FixtureService/SetUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FixtureServiceServer).SetUp(ctx, req.(*SetUpCrashTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FixtureService_EnableCrashFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableCrashFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FixtureServiceServer).EnableCrashFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.crash.FixtureService/EnableCrashFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FixtureServiceServer).EnableCrashFilter(ctx, req.(*EnableCrashFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FixtureService_DisableCrashFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FixtureServiceServer).DisableCrashFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.crash.FixtureService/DisableCrashFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FixtureServiceServer).DisableCrashFilter(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FixtureService_WaitForCrashFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitForCrashFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FixtureServiceServer).WaitForCrashFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.crash.FixtureService/WaitForCrashFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FixtureServiceServer).WaitForCrashFiles(ctx, req.(*WaitForCrashFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FixtureService_RemoveAllFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAllFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FixtureServiceServer).RemoveAllFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.crash.FixtureService/RemoveAllFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FixtureServiceServer).RemoveAllFiles(ctx, req.(*RemoveAllFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FixtureService_SetConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConsentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FixtureServiceServer).SetConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.crash.FixtureService/SetConsent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FixtureServiceServer).SetConsent(ctx, req.(*SetConsentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FixtureService_TearDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FixtureServiceServer).TearDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.crash.FixtureService/TearDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FixtureServiceServer).TearDown(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _FixtureService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.crash.FixtureService",
	HandlerType: (*FixtureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetUp",
			Handler:    _FixtureService_SetUp_Handler,
		},
		{
			MethodName: "EnableCrashFilter",
			Handler:    _FixtureService_EnableCrashFilter_Handler,
		},
		{
			MethodName: "DisableCrashFilter",
			Handler:    _FixtureService_DisableCrashFilter_Handler,
		},
		{
			MethodName: "WaitForCrashFiles",
			Handler:    _FixtureService_WaitForCrashFiles_Handler,
		},
		{
			MethodName: "RemoveAllFiles",
			Handler:    _FixtureService_RemoveAllFiles_Handler,
		},
		{
			MethodName: "SetConsent",
			Handler:    _FixtureService_SetConsent_Handler,
		},
		{
			MethodName: "TearDown",
			Handler:    _FixtureService_TearDown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fixture_service.proto",
}
