// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package crash is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
*/
package crash

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CrashService service

type CrashServiceClient interface {
	// SetUp sets up the DUT for a crash test.
	// *NOTE*: If the DUT reboots during the test, it will clear
	// crash_test_in_progress state.
	// After the test is complete, you must call TearDown to clean up the
	// associated resources.
	SetUp(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// Close releases the resources obtained by New.
	TearDown(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type crashServiceClient struct {
	cc *grpc.ClientConn
}

func NewCrashServiceClient(cc *grpc.ClientConn) CrashServiceClient {
	return &crashServiceClient{cc}
}

func (c *crashServiceClient) SetUp(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/tast.cros.crash.CrashService/SetUp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crashServiceClient) TearDown(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/tast.cros.crash.CrashService/TearDown", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CrashService service

type CrashServiceServer interface {
	// SetUp sets up the DUT for a crash test.
	// *NOTE*: If the DUT reboots during the test, it will clear
	// crash_test_in_progress state.
	// After the test is complete, you must call TearDown to clean up the
	// associated resources.
	SetUp(context.Context, *google_protobuf.Empty) (*google_protobuf.Empty, error)
	// Close releases the resources obtained by New.
	TearDown(context.Context, *google_protobuf.Empty) (*google_protobuf.Empty, error)
}

func RegisterCrashServiceServer(s *grpc.Server, srv CrashServiceServer) {
	s.RegisterService(&_CrashService_serviceDesc, srv)
}

func _CrashService_SetUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrashServiceServer).SetUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.crash.CrashService/SetUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrashServiceServer).SetUp(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrashService_TearDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrashServiceServer).TearDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.crash.CrashService/TearDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrashServiceServer).TearDown(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _CrashService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.crash.CrashService",
	HandlerType: (*CrashServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetUp",
			Handler:    _CrashService_SetUp_Handler,
		},
		{
			MethodName: "TearDown",
			Handler:    _CrashService_TearDown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 163 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2f, 0x49, 0x2c, 0x2e, 0xd1,
	0x4b, 0x2e, 0xca, 0x2f, 0xd6, 0x4b, 0x2e, 0x4a, 0x2c, 0xce, 0x90, 0x92, 0x4e, 0xcf, 0xcf, 0x4f,
	0xcf, 0x49, 0xd5, 0x07, 0x4b, 0x27, 0x95, 0xa6, 0xe9, 0xa7, 0xe6, 0x16, 0x94, 0x54, 0x42, 0x54,
	0x1b, 0xb5, 0x33, 0x72, 0xf1, 0x38, 0x83, 0x94, 0x05, 0x43, 0x0c, 0x11, 0xb2, 0xe4, 0x62, 0x0d,
	0x4e, 0x2d, 0x09, 0x2d, 0x10, 0x12, 0xd3, 0x83, 0xe8, 0xd3, 0x83, 0xe9, 0xd3, 0x73, 0x05, 0xe9,
	0x93, 0xc2, 0x21, 0xae, 0xc4, 0x20, 0x64, 0xc3, 0xc5, 0x11, 0x92, 0x9a, 0x58, 0xe4, 0x92, 0x5f,
	0x9e, 0x47, 0xba, 0x6e, 0x27, 0xd5, 0x28, 0xe5, 0xe4, 0x8c, 0xa2, 0xfc, 0xdc, 0xcc, 0xd2, 0xdc,
	0xfc, 0x62, 0x7d, 0x90, 0x27, 0xf4, 0xa1, 0x1e, 0x2b, 0xd6, 0x07, 0xf9, 0x46, 0x1f, 0xec, 0x9b,
	0x24, 0x36, 0xb0, 0x46, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x09, 0x47, 0xbf, 0xe1, 0xf6,
	0x00, 0x00, 0x00,
}
