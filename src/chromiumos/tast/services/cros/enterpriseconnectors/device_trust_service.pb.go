// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: device_trust_service.proto

package enterpriseconnectors

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnrollRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Pass string `protobuf:"bytes,2,opt,name=pass,proto3" json:"pass,omitempty"`
}

func (x *EnrollRequest) Reset() {
	*x = EnrollRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_trust_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrollRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrollRequest) ProtoMessage() {}

func (x *EnrollRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_trust_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrollRequest.ProtoReflect.Descriptor instead.
func (*EnrollRequest) Descriptor() ([]byte, []int) {
	return file_device_trust_service_proto_rawDescGZIP(), []int{0}
}

func (x *EnrollRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *EnrollRequest) GetPass() string {
	if x != nil {
		return x.Pass
	}
	return ""
}

type LoginWithFakeIDPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SigninProfileTestExtensionManifestKey string `protobuf:"bytes,1,opt,name=signinProfileTestExtensionManifestKey,proto3" json:"signinProfileTestExtensionManifestKey,omitempty"`
}

func (x *LoginWithFakeIDPRequest) Reset() {
	*x = LoginWithFakeIDPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_trust_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginWithFakeIDPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginWithFakeIDPRequest) ProtoMessage() {}

func (x *LoginWithFakeIDPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_trust_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginWithFakeIDPRequest.ProtoReflect.Descriptor instead.
func (*LoginWithFakeIDPRequest) Descriptor() ([]byte, []int) {
	return file_device_trust_service_proto_rawDescGZIP(), []int{1}
}

func (x *LoginWithFakeIDPRequest) GetSigninProfileTestExtensionManifestKey() string {
	if x != nil {
		return x.SigninProfileTestExtensionManifestKey
	}
	return ""
}

type LoginWithFakeIDPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succesful bool `protobuf:"varint,1,opt,name=succesful,proto3" json:"succesful,omitempty"`
}

func (x *LoginWithFakeIDPResponse) Reset() {
	*x = LoginWithFakeIDPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_trust_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginWithFakeIDPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginWithFakeIDPResponse) ProtoMessage() {}

func (x *LoginWithFakeIDPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_trust_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginWithFakeIDPResponse.ProtoReflect.Descriptor instead.
func (*LoginWithFakeIDPResponse) Descriptor() ([]byte, []int) {
	return file_device_trust_service_proto_rawDescGZIP(), []int{2}
}

func (x *LoginWithFakeIDPResponse) GetSuccesful() bool {
	if x != nil {
		return x.Succesful
	}
	return false
}

var File_device_trust_service_proto protoreflect.FileDescriptor

var file_device_trust_service_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x74, 0x61,
	0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x37, 0x0a, 0x0d, 0x45, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x73, 0x73, 0x22, 0x6f, 0x0a, 0x17, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x46,
	0x61, 0x6b, 0x65, 0x49, 0x44, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a,
	0x25, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25, 0x73, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x4b, 0x65, 0x79, 0x22, 0x38, 0x0a, 0x18, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x46, 0x61, 0x6b, 0x65, 0x49, 0x44, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x66, 0x75, 0x6c, 0x32, 0xf1, 0x01,
	0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x2d,
	0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e,
	0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x57, 0x69, 0x74, 0x68, 0x46, 0x61, 0x6b, 0x65, 0x49, 0x44, 0x50, 0x12, 0x37, 0x2e, 0x74,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x46, 0x61, 0x6b, 0x65, 0x49, 0x44, 0x50, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f,
	0x73, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x46, 0x61, 0x6b, 0x65, 0x49, 0x44, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x34, 0x5a, 0x32, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f,
	0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72,
	0x6f, 0x73, 0x2f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_device_trust_service_proto_rawDescOnce sync.Once
	file_device_trust_service_proto_rawDescData = file_device_trust_service_proto_rawDesc
)

func file_device_trust_service_proto_rawDescGZIP() []byte {
	file_device_trust_service_proto_rawDescOnce.Do(func() {
		file_device_trust_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_device_trust_service_proto_rawDescData)
	})
	return file_device_trust_service_proto_rawDescData
}

var file_device_trust_service_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_device_trust_service_proto_goTypes = []interface{}{
	(*EnrollRequest)(nil),            // 0: tast.cros.enterpriseconnectors.EnrollRequest
	(*LoginWithFakeIDPRequest)(nil),  // 1: tast.cros.enterpriseconnectors.LoginWithFakeIDPRequest
	(*LoginWithFakeIDPResponse)(nil), // 2: tast.cros.enterpriseconnectors.LoginWithFakeIDPResponse
	(*emptypb.Empty)(nil),            // 3: google.protobuf.Empty
}
var file_device_trust_service_proto_depIdxs = []int32{
	0, // 0: tast.cros.enterpriseconnectors.DeviceTrustService.Enroll:input_type -> tast.cros.enterpriseconnectors.EnrollRequest
	1, // 1: tast.cros.enterpriseconnectors.DeviceTrustService.LoginWithFakeIDP:input_type -> tast.cros.enterpriseconnectors.LoginWithFakeIDPRequest
	3, // 2: tast.cros.enterpriseconnectors.DeviceTrustService.Enroll:output_type -> google.protobuf.Empty
	2, // 3: tast.cros.enterpriseconnectors.DeviceTrustService.LoginWithFakeIDP:output_type -> tast.cros.enterpriseconnectors.LoginWithFakeIDPResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_device_trust_service_proto_init() }
func file_device_trust_service_proto_init() {
	if File_device_trust_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_device_trust_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnrollRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_trust_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginWithFakeIDPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_trust_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginWithFakeIDPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_device_trust_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_device_trust_service_proto_goTypes,
		DependencyIndexes: file_device_trust_service_proto_depIdxs,
		MessageInfos:      file_device_trust_service_proto_msgTypes,
	}.Build()
	File_device_trust_service_proto = out.File
	file_device_trust_service_proto_rawDesc = nil
	file_device_trust_service_proto_goTypes = nil
	file_device_trust_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DeviceTrustServiceClient is the client API for DeviceTrustService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceTrustServiceClient interface {
	Enroll(ctx context.Context, in *EnrollRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LoginWithFakeIDP(ctx context.Context, in *LoginWithFakeIDPRequest, opts ...grpc.CallOption) (*LoginWithFakeIDPResponse, error)
}

type deviceTrustServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceTrustServiceClient(cc grpc.ClientConnInterface) DeviceTrustServiceClient {
	return &deviceTrustServiceClient{cc}
}

func (c *deviceTrustServiceClient) Enroll(ctx context.Context, in *EnrollRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.enterpriseconnectors.DeviceTrustService/Enroll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTrustServiceClient) LoginWithFakeIDP(ctx context.Context, in *LoginWithFakeIDPRequest, opts ...grpc.CallOption) (*LoginWithFakeIDPResponse, error) {
	out := new(LoginWithFakeIDPResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.enterpriseconnectors.DeviceTrustService/LoginWithFakeIDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceTrustServiceServer is the server API for DeviceTrustService service.
type DeviceTrustServiceServer interface {
	Enroll(context.Context, *EnrollRequest) (*emptypb.Empty, error)
	LoginWithFakeIDP(context.Context, *LoginWithFakeIDPRequest) (*LoginWithFakeIDPResponse, error)
}

// UnimplementedDeviceTrustServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceTrustServiceServer struct {
}

func (*UnimplementedDeviceTrustServiceServer) Enroll(context.Context, *EnrollRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enroll not implemented")
}
func (*UnimplementedDeviceTrustServiceServer) LoginWithFakeIDP(context.Context, *LoginWithFakeIDPRequest) (*LoginWithFakeIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithFakeIDP not implemented")
}

func RegisterDeviceTrustServiceServer(s *grpc.Server, srv DeviceTrustServiceServer) {
	s.RegisterService(&_DeviceTrustService_serviceDesc, srv)
}

func _DeviceTrustService_Enroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTrustServiceServer).Enroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.enterpriseconnectors.DeviceTrustService/Enroll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTrustServiceServer).Enroll(ctx, req.(*EnrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTrustService_LoginWithFakeIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWithFakeIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTrustServiceServer).LoginWithFakeIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.enterpriseconnectors.DeviceTrustService/LoginWithFakeIDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTrustServiceServer).LoginWithFakeIDP(ctx, req.(*LoginWithFakeIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceTrustService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.enterpriseconnectors.DeviceTrustService",
	HandlerType: (*DeviceTrustServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enroll",
			Handler:    _DeviceTrustService_Enroll_Handler,
		},
		{
			MethodName: "LoginWithFakeIDP",
			Handler:    _DeviceTrustService_LoginWithFakeIDP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "device_trust_service.proto",
}
