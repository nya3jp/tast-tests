// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: bios_service.proto

package firmware

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GBBFlag bit positions
type GBBFlag int32

const (
	GBBFlag_DEV_SCREEN_SHORT_DELAY           GBBFlag = 0
	GBBFlag_LOAD_OPTION_ROMS                 GBBFlag = 1
	GBBFlag_ENABLE_ALTERNATE_OS              GBBFlag = 2
	GBBFlag_FORCE_DEV_SWITCH_ON              GBBFlag = 3
	GBBFlag_FORCE_DEV_BOOT_USB               GBBFlag = 4
	GBBFlag_DISABLE_FW_ROLLBACK_CHECK        GBBFlag = 5
	GBBFlag_ENTER_TRIGGERS_TONORM            GBBFlag = 6
	GBBFlag_FORCE_DEV_BOOT_LEGACY            GBBFlag = 7
	GBBFlag_FAFT_KEY_OVERIDE                 GBBFlag = 8
	GBBFlag_DISABLE_EC_SOFTWARE_SYNC         GBBFlag = 9
	GBBFlag_DEFAULT_DEV_BOOT_LEGACY          GBBFlag = 10
	GBBFlag_DISABLE_PD_SOFTWARE_SYNC         GBBFlag = 11
	GBBFlag_DISABLE_LID_SHUTDOWN             GBBFlag = 12
	GBBFlag_FORCE_DEV_BOOT_FASTBOOT_FULL_CAP GBBFlag = 13
)

// Enum value maps for GBBFlag.
var (
	GBBFlag_name = map[int32]string{
		0:  "DEV_SCREEN_SHORT_DELAY",
		1:  "LOAD_OPTION_ROMS",
		2:  "ENABLE_ALTERNATE_OS",
		3:  "FORCE_DEV_SWITCH_ON",
		4:  "FORCE_DEV_BOOT_USB",
		5:  "DISABLE_FW_ROLLBACK_CHECK",
		6:  "ENTER_TRIGGERS_TONORM",
		7:  "FORCE_DEV_BOOT_LEGACY",
		8:  "FAFT_KEY_OVERIDE",
		9:  "DISABLE_EC_SOFTWARE_SYNC",
		10: "DEFAULT_DEV_BOOT_LEGACY",
		11: "DISABLE_PD_SOFTWARE_SYNC",
		12: "DISABLE_LID_SHUTDOWN",
		13: "FORCE_DEV_BOOT_FASTBOOT_FULL_CAP",
	}
	GBBFlag_value = map[string]int32{
		"DEV_SCREEN_SHORT_DELAY":           0,
		"LOAD_OPTION_ROMS":                 1,
		"ENABLE_ALTERNATE_OS":              2,
		"FORCE_DEV_SWITCH_ON":              3,
		"FORCE_DEV_BOOT_USB":               4,
		"DISABLE_FW_ROLLBACK_CHECK":        5,
		"ENTER_TRIGGERS_TONORM":            6,
		"FORCE_DEV_BOOT_LEGACY":            7,
		"FAFT_KEY_OVERIDE":                 8,
		"DISABLE_EC_SOFTWARE_SYNC":         9,
		"DEFAULT_DEV_BOOT_LEGACY":          10,
		"DISABLE_PD_SOFTWARE_SYNC":         11,
		"DISABLE_LID_SHUTDOWN":             12,
		"FORCE_DEV_BOOT_FASTBOOT_FULL_CAP": 13,
	}
)

func (x GBBFlag) Enum() *GBBFlag {
	p := new(GBBFlag)
	*p = x
	return p
}

func (x GBBFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GBBFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_bios_service_proto_enumTypes[0].Descriptor()
}

func (GBBFlag) Type() protoreflect.EnumType {
	return &file_bios_service_proto_enumTypes[0]
}

func (x GBBFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GBBFlag.Descriptor instead.
func (GBBFlag) EnumDescriptor() ([]byte, []int) {
	return file_bios_service_proto_rawDescGZIP(), []int{0}
}

// GBBFlagsState represents the a known state of GBB flags.  Set flags have precedence over cleared ones.
type GBBFlagsState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clear []GBBFlag `protobuf:"varint,1,rep,packed,name=Clear,proto3,enum=tast.cros.firmware.GBBFlag" json:"Clear,omitempty"`
	Set   []GBBFlag `protobuf:"varint,2,rep,packed,name=Set,proto3,enum=tast.cros.firmware.GBBFlag" json:"Set,omitempty"`
}

func (x *GBBFlagsState) Reset() {
	*x = GBBFlagsState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bios_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GBBFlagsState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GBBFlagsState) ProtoMessage() {}

func (x *GBBFlagsState) ProtoReflect() protoreflect.Message {
	mi := &file_bios_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GBBFlagsState.ProtoReflect.Descriptor instead.
func (*GBBFlagsState) Descriptor() ([]byte, []int) {
	return file_bios_service_proto_rawDescGZIP(), []int{0}
}

func (x *GBBFlagsState) GetClear() []GBBFlag {
	if x != nil {
		return x.Clear
	}
	return nil
}

func (x *GBBFlagsState) GetSet() []GBBFlag {
	if x != nil {
		return x.Set
	}
	return nil
}

// ECRWPath represents the path of EC_RW section backup.
type ECRWPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
}

func (x *ECRWPath) Reset() {
	*x = ECRWPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bios_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECRWPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECRWPath) ProtoMessage() {}

func (x *ECRWPath) ProtoReflect() protoreflect.Message {
	mi := &file_bios_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECRWPath.ProtoReflect.Descriptor instead.
func (*ECRWPath) Descriptor() ([]byte, []int) {
	return file_bios_service_proto_rawDescGZIP(), []int{1}
}

func (x *ECRWPath) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

var File_bios_service_proto protoreflect.FileDescriptor

var file_bios_service_proto_rawDesc = []byte{
	0x0a, 0x12, 0x62, 0x69, 0x6f, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x71, 0x0a, 0x0d, 0x47, 0x42, 0x42, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f,
	0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x47, 0x42, 0x42, 0x46, 0x6c,
	0x61, 0x67, 0x52, 0x05, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x2d, 0x0a, 0x03, 0x53, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72,
	0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x47, 0x42, 0x42, 0x46,
	0x6c, 0x61, 0x67, 0x52, 0x03, 0x53, 0x65, 0x74, 0x22, 0x1e, 0x0a, 0x08, 0x45, 0x43, 0x52, 0x57,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x2a, 0x89, 0x03, 0x0a, 0x07, 0x47, 0x42, 0x42,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x56, 0x5f, 0x53, 0x43, 0x52, 0x45,
	0x45, 0x4e, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x4f, 0x4d, 0x53, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x53, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x5f, 0x53, 0x57, 0x49,
	0x54, 0x43, 0x48, 0x5f, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x4f, 0x52, 0x43,
	0x45, 0x5f, 0x44, 0x45, 0x56, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x42, 0x10, 0x04,
	0x12, 0x1d, 0x0a, 0x19, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x57, 0x5f, 0x52,
	0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x05, 0x12,
	0x19, 0x0a, 0x15, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52,
	0x53, 0x5f, 0x54, 0x4f, 0x4e, 0x4f, 0x52, 0x4d, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x4f,
	0x52, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x4c, 0x45, 0x47,
	0x41, 0x43, 0x59, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x41, 0x46, 0x54, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x49, 0x44, 0x45, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x43, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41,
	0x52, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x5f, 0x44, 0x45, 0x56, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x4c, 0x45,
	0x47, 0x41, 0x43, 0x59, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x50, 0x44, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x53, 0x59,
	0x4e, 0x43, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x4c, 0x49, 0x44, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x0c, 0x12, 0x24,
	0x0a, 0x20, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x5f, 0x42, 0x4f, 0x4f, 0x54,
	0x5f, 0x46, 0x41, 0x53, 0x54, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x43,
	0x41, 0x50, 0x10, 0x0d, 0x32, 0xba, 0x02, 0x0a, 0x0b, 0x42, 0x69, 0x6f, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x47, 0x42, 0x42, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x21, 0x2e, 0x74, 0x61,
	0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x47, 0x42, 0x42, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x00,
	0x12, 0x52, 0x0a, 0x13, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x47,
	0x42, 0x42, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x21, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x47, 0x42, 0x42,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0a, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x45, 0x43,
	0x52, 0x57, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x74, 0x61, 0x73,
	0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x45, 0x43, 0x52, 0x57, 0x50, 0x61, 0x74, 0x68, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0b, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x43, 0x52, 0x57, 0x12, 0x1c, 0x2e, 0x74, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x45,
	0x43, 0x52, 0x57, 0x50, 0x61, 0x74, 0x68, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x42, 0x28, 0x5a, 0x26, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f,
	0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72,
	0x6f, 0x73, 0x2f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_bios_service_proto_rawDescOnce sync.Once
	file_bios_service_proto_rawDescData = file_bios_service_proto_rawDesc
)

func file_bios_service_proto_rawDescGZIP() []byte {
	file_bios_service_proto_rawDescOnce.Do(func() {
		file_bios_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_bios_service_proto_rawDescData)
	})
	return file_bios_service_proto_rawDescData
}

var file_bios_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_bios_service_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_bios_service_proto_goTypes = []interface{}{
	(GBBFlag)(0),          // 0: tast.cros.firmware.GBBFlag
	(*GBBFlagsState)(nil), // 1: tast.cros.firmware.GBBFlagsState
	(*ECRWPath)(nil),      // 2: tast.cros.firmware.ECRWPath
	(*empty.Empty)(nil),   // 3: google.protobuf.Empty
}
var file_bios_service_proto_depIdxs = []int32{
	0, // 0: tast.cros.firmware.GBBFlagsState.Clear:type_name -> tast.cros.firmware.GBBFlag
	0, // 1: tast.cros.firmware.GBBFlagsState.Set:type_name -> tast.cros.firmware.GBBFlag
	3, // 2: tast.cros.firmware.BiosService.GetGBBFlags:input_type -> google.protobuf.Empty
	1, // 3: tast.cros.firmware.BiosService.ClearAndSetGBBFlags:input_type -> tast.cros.firmware.GBBFlagsState
	3, // 4: tast.cros.firmware.BiosService.BackupECRW:input_type -> google.protobuf.Empty
	2, // 5: tast.cros.firmware.BiosService.RestoreECRW:input_type -> tast.cros.firmware.ECRWPath
	1, // 6: tast.cros.firmware.BiosService.GetGBBFlags:output_type -> tast.cros.firmware.GBBFlagsState
	3, // 7: tast.cros.firmware.BiosService.ClearAndSetGBBFlags:output_type -> google.protobuf.Empty
	2, // 8: tast.cros.firmware.BiosService.BackupECRW:output_type -> tast.cros.firmware.ECRWPath
	3, // 9: tast.cros.firmware.BiosService.RestoreECRW:output_type -> google.protobuf.Empty
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_bios_service_proto_init() }
func file_bios_service_proto_init() {
	if File_bios_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bios_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GBBFlagsState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bios_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECRWPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bios_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bios_service_proto_goTypes,
		DependencyIndexes: file_bios_service_proto_depIdxs,
		EnumInfos:         file_bios_service_proto_enumTypes,
		MessageInfos:      file_bios_service_proto_msgTypes,
	}.Build()
	File_bios_service_proto = out.File
	file_bios_service_proto_rawDesc = nil
	file_bios_service_proto_goTypes = nil
	file_bios_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BiosServiceClient is the client API for BiosService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BiosServiceClient interface {
	// GetGBBFlags gets the flags that are cleared and set.
	GetGBBFlags(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GBBFlagsState, error)
	// ClearAndSetGBBFlags modifies the specified flags, leaving the rest unchanged.
	ClearAndSetGBBFlags(ctx context.Context, in *GBBFlagsState, opts ...grpc.CallOption) (*empty.Empty, error)
	// BackupECRW backs up the current EC_RW region locally and returns its path.
	BackupECRW(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ECRWPath, error)
	// RestoreECRW restores the EC_RW region from path.
	RestoreECRW(ctx context.Context, in *ECRWPath, opts ...grpc.CallOption) (*empty.Empty, error)
}

type biosServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBiosServiceClient(cc grpc.ClientConnInterface) BiosServiceClient {
	return &biosServiceClient{cc}
}

func (c *biosServiceClient) GetGBBFlags(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GBBFlagsState, error) {
	out := new(GBBFlagsState)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.BiosService/GetGBBFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biosServiceClient) ClearAndSetGBBFlags(ctx context.Context, in *GBBFlagsState, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.BiosService/ClearAndSetGBBFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biosServiceClient) BackupECRW(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ECRWPath, error) {
	out := new(ECRWPath)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.BiosService/BackupECRW", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biosServiceClient) RestoreECRW(ctx context.Context, in *ECRWPath, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.BiosService/RestoreECRW", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BiosServiceServer is the server API for BiosService service.
type BiosServiceServer interface {
	// GetGBBFlags gets the flags that are cleared and set.
	GetGBBFlags(context.Context, *empty.Empty) (*GBBFlagsState, error)
	// ClearAndSetGBBFlags modifies the specified flags, leaving the rest unchanged.
	ClearAndSetGBBFlags(context.Context, *GBBFlagsState) (*empty.Empty, error)
	// BackupECRW backs up the current EC_RW region locally and returns its path.
	BackupECRW(context.Context, *empty.Empty) (*ECRWPath, error)
	// RestoreECRW restores the EC_RW region from path.
	RestoreECRW(context.Context, *ECRWPath) (*empty.Empty, error)
}

// UnimplementedBiosServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBiosServiceServer struct {
}

func (*UnimplementedBiosServiceServer) GetGBBFlags(context.Context, *empty.Empty) (*GBBFlagsState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGBBFlags not implemented")
}
func (*UnimplementedBiosServiceServer) ClearAndSetGBBFlags(context.Context, *GBBFlagsState) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearAndSetGBBFlags not implemented")
}
func (*UnimplementedBiosServiceServer) BackupECRW(context.Context, *empty.Empty) (*ECRWPath, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupECRW not implemented")
}
func (*UnimplementedBiosServiceServer) RestoreECRW(context.Context, *ECRWPath) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreECRW not implemented")
}

func RegisterBiosServiceServer(s *grpc.Server, srv BiosServiceServer) {
	s.RegisterService(&_BiosService_serviceDesc, srv)
}

func _BiosService_GetGBBFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiosServiceServer).GetGBBFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.BiosService/GetGBBFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiosServiceServer).GetGBBFlags(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiosService_ClearAndSetGBBFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GBBFlagsState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiosServiceServer).ClearAndSetGBBFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.BiosService/ClearAndSetGBBFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiosServiceServer).ClearAndSetGBBFlags(ctx, req.(*GBBFlagsState))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiosService_BackupECRW_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiosServiceServer).BackupECRW(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.BiosService/BackupECRW",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiosServiceServer).BackupECRW(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiosService_RestoreECRW_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ECRWPath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiosServiceServer).RestoreECRW(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.BiosService/RestoreECRW",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiosServiceServer).RestoreECRW(ctx, req.(*ECRWPath))
	}
	return interceptor(ctx, in, info, handler)
}

var _BiosService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.firmware.BiosService",
	HandlerType: (*BiosServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGBBFlags",
			Handler:    _BiosService_GetGBBFlags_Handler,
		},
		{
			MethodName: "ClearAndSetGBBFlags",
			Handler:    _BiosService_ClearAndSetGBBFlags_Handler,
		},
		{
			MethodName: "BackupECRW",
			Handler:    _BiosService_BackupECRW_Handler,
		},
		{
			MethodName: "RestoreECRW",
			Handler:    _BiosService_RestoreECRW_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bios_service.proto",
}
