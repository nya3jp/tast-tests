// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bios_service.proto

package firmware

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// GBBFlag bit positions
type GBBFlag int32

const (
	GBBFlag_DEV_SCREEN_SHORT_DELAY           GBBFlag = 0
	GBBFlag_LOAD_OPTION_ROMS                 GBBFlag = 1
	GBBFlag_ENABLE_ALTERNATE_OS              GBBFlag = 2
	GBBFlag_FORCE_DEV_SWITCH_ON              GBBFlag = 3
	GBBFlag_FORCE_DEV_BOOT_USB               GBBFlag = 4
	GBBFlag_DISABLE_FW_ROLLBACK_CHECK        GBBFlag = 5
	GBBFlag_ENTER_TRIGGERS_TONORM            GBBFlag = 6
	GBBFlag_FORCE_DEV_BOOT_LEGACY            GBBFlag = 7
	GBBFlag_FAFT_KEY_OVERIDE                 GBBFlag = 8
	GBBFlag_DISABLE_EC_SOFTWARE_SYNC         GBBFlag = 9
	GBBFlag_DEFAULT_DEV_BOOT_LEGACY          GBBFlag = 10
	GBBFlag_DISABLE_PD_SOFTWARE_SYNC         GBBFlag = 11
	GBBFlag_DISABLE_LID_SHUTDOWN             GBBFlag = 12
	GBBFlag_FORCE_DEV_BOOT_FASTBOOT_FULL_CAP GBBFlag = 13
)

var GBBFlag_name = map[int32]string{
	0:  "DEV_SCREEN_SHORT_DELAY",
	1:  "LOAD_OPTION_ROMS",
	2:  "ENABLE_ALTERNATE_OS",
	3:  "FORCE_DEV_SWITCH_ON",
	4:  "FORCE_DEV_BOOT_USB",
	5:  "DISABLE_FW_ROLLBACK_CHECK",
	6:  "ENTER_TRIGGERS_TONORM",
	7:  "FORCE_DEV_BOOT_LEGACY",
	8:  "FAFT_KEY_OVERIDE",
	9:  "DISABLE_EC_SOFTWARE_SYNC",
	10: "DEFAULT_DEV_BOOT_LEGACY",
	11: "DISABLE_PD_SOFTWARE_SYNC",
	12: "DISABLE_LID_SHUTDOWN",
	13: "FORCE_DEV_BOOT_FASTBOOT_FULL_CAP",
}

var GBBFlag_value = map[string]int32{
	"DEV_SCREEN_SHORT_DELAY":           0,
	"LOAD_OPTION_ROMS":                 1,
	"ENABLE_ALTERNATE_OS":              2,
	"FORCE_DEV_SWITCH_ON":              3,
	"FORCE_DEV_BOOT_USB":               4,
	"DISABLE_FW_ROLLBACK_CHECK":        5,
	"ENTER_TRIGGERS_TONORM":            6,
	"FORCE_DEV_BOOT_LEGACY":            7,
	"FAFT_KEY_OVERIDE":                 8,
	"DISABLE_EC_SOFTWARE_SYNC":         9,
	"DEFAULT_DEV_BOOT_LEGACY":          10,
	"DISABLE_PD_SOFTWARE_SYNC":         11,
	"DISABLE_LID_SHUTDOWN":             12,
	"FORCE_DEV_BOOT_FASTBOOT_FULL_CAP": 13,
}

func (x GBBFlag) String() string {
	return proto.EnumName(GBBFlag_name, int32(x))
}

func (GBBFlag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_faf33e0440459a6d, []int{0}
}

type GBBFlagsState struct {
	Clear                []GBBFlag `protobuf:"varint,1,rep,packed,name=Clear,proto3,enum=tast.cros.firmware.GBBFlag" json:"Clear,omitempty"`
	Set                  []GBBFlag `protobuf:"varint,2,rep,packed,name=Set,proto3,enum=tast.cros.firmware.GBBFlag" json:"Set,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GBBFlagsState) Reset()         { *m = GBBFlagsState{} }
func (m *GBBFlagsState) String() string { return proto.CompactTextString(m) }
func (*GBBFlagsState) ProtoMessage()    {}
func (*GBBFlagsState) Descriptor() ([]byte, []int) {
	return fileDescriptor_faf33e0440459a6d, []int{0}
}

func (m *GBBFlagsState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GBBFlagsState.Unmarshal(m, b)
}
func (m *GBBFlagsState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GBBFlagsState.Marshal(b, m, deterministic)
}
func (m *GBBFlagsState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GBBFlagsState.Merge(m, src)
}
func (m *GBBFlagsState) XXX_Size() int {
	return xxx_messageInfo_GBBFlagsState.Size(m)
}
func (m *GBBFlagsState) XXX_DiscardUnknown() {
	xxx_messageInfo_GBBFlagsState.DiscardUnknown(m)
}

var xxx_messageInfo_GBBFlagsState proto.InternalMessageInfo

func (m *GBBFlagsState) GetClear() []GBBFlag {
	if m != nil {
		return m.Clear
	}
	return nil
}

func (m *GBBFlagsState) GetSet() []GBBFlag {
	if m != nil {
		return m.Set
	}
	return nil
}

func init() {
	proto.RegisterEnum("tast.cros.firmware.GBBFlag", GBBFlag_name, GBBFlag_value)
	proto.RegisterType((*GBBFlagsState)(nil), "tast.cros.firmware.GBBFlagsState")
}

func init() { proto.RegisterFile("bios_service.proto", fileDescriptor_faf33e0440459a6d) }

var fileDescriptor_faf33e0440459a6d = []byte{
	// 484 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0x61, 0x6f, 0xd2, 0x40,
	0x18, 0xc7, 0xc7, 0x70, 0x9b, 0x1e, 0xce, 0x5c, 0x6e, 0x93, 0x31, 0xd0, 0x64, 0x12, 0x63, 0x16,
	0x13, 0xdb, 0x38, 0x3f, 0xc1, 0xf5, 0xfa, 0x14, 0x2a, 0xb7, 0x1e, 0xb9, 0x3b, 0x46, 0xf0, 0xcd,
	0x13, 0xc0, 0x0e, 0x49, 0xc0, 0xce, 0xb6, 0xd3, 0xf8, 0x11, 0xfc, 0x30, 0x7e, 0x47, 0x53, 0x0a,
	0x71, 0x61, 0xd1, 0xbd, 0x6b, 0xfa, 0x7f, 0xfe, 0xbf, 0xe7, 0x49, 0xfa, 0x2b, 0x61, 0x93, 0x79,
	0x92, 0x61, 0x16, 0xa7, 0xdf, 0xe7, 0xd3, 0xd8, 0xb9, 0x49, 0x93, 0x3c, 0x61, 0x2c, 0x1f, 0x67,
	0xb9, 0x33, 0x4d, 0x93, 0xcc, 0xb9, 0x9e, 0xa7, 0xcb, 0x1f, 0xe3, 0x34, 0x6e, 0xb6, 0x66, 0x49,
	0x32, 0x5b, 0xc4, 0xee, 0x6a, 0x62, 0x72, 0x7b, 0xed, 0xc6, 0xcb, 0x9b, 0xfc, 0x67, 0x59, 0x68,
	0x7f, 0x23, 0x87, 0x1d, 0xcf, 0x0b, 0x16, 0xe3, 0x59, 0x66, 0xf2, 0x71, 0x1e, 0xb3, 0xf7, 0x64,
	0x4f, 0x2c, 0xe2, 0x71, 0xda, 0xa8, 0x9c, 0x55, 0xcf, 0x9f, 0x5d, 0xb4, 0x9c, 0xfb, 0x44, 0x67,
	0xdd, 0xd0, 0xe5, 0x24, 0x7b, 0x47, 0xaa, 0x26, 0xce, 0x1b, 0xbb, 0x0f, 0x17, 0x8a, 0xb9, 0xb7,
	0xbf, 0xaa, 0xe4, 0x60, 0xfd, 0x82, 0x35, 0x49, 0xdd, 0x87, 0x2b, 0x34, 0x42, 0x03, 0x44, 0x68,
	0xba, 0x4a, 0x5b, 0xf4, 0x41, 0xf2, 0x11, 0xdd, 0x61, 0xc7, 0x84, 0x4a, 0xc5, 0x7d, 0x54, 0x7d,
	0x1b, 0xaa, 0x08, 0xb5, 0xba, 0x34, 0xb4, 0xc2, 0x4e, 0xc8, 0x11, 0x44, 0xdc, 0x93, 0x80, 0x5c,
	0x5a, 0xd0, 0x11, 0xb7, 0x80, 0xca, 0xd0, 0xdd, 0x22, 0x08, 0x94, 0x16, 0x80, 0x2b, 0xe0, 0x30,
	0xb4, 0xa2, 0x8b, 0x2a, 0xa2, 0x55, 0x56, 0x27, 0xec, 0x6f, 0xe0, 0x29, 0x65, 0x71, 0x60, 0x3c,
	0xfa, 0x88, 0xbd, 0x24, 0xa7, 0x7e, 0x68, 0x56, 0xa8, 0x60, 0x88, 0x5a, 0x49, 0xe9, 0x71, 0xd1,
	0x43, 0xd1, 0x05, 0xd1, 0xa3, 0x7b, 0xec, 0x94, 0x3c, 0x87, 0xc8, 0x82, 0x46, 0xab, 0xc3, 0x4e,
	0x07, 0xb4, 0x41, 0xab, 0x22, 0xa5, 0x2f, 0xe9, 0x7e, 0x11, 0x6d, 0x11, 0x25, 0x74, 0xb8, 0x18,
	0xd1, 0x83, 0xe2, 0xe8, 0x80, 0x07, 0x16, 0x7b, 0x30, 0x42, 0x75, 0x05, 0x3a, 0xf4, 0x81, 0x3e,
	0x66, 0x2f, 0x48, 0x63, 0xb3, 0x0a, 0x04, 0x1a, 0x15, 0xd8, 0x21, 0xd7, 0x80, 0x66, 0x14, 0x09,
	0xfa, 0x84, 0xb5, 0xc8, 0x89, 0x0f, 0x01, 0x1f, 0x48, 0x7b, 0x0f, 0x48, 0xee, 0x56, 0xfb, 0xfe,
	0x56, 0xb5, 0xc6, 0x1a, 0xe4, 0x78, 0x93, 0xca, 0xd0, 0x47, 0xd3, 0x1d, 0x58, 0x5f, 0x0d, 0x23,
	0xfa, 0x94, 0xbd, 0x26, 0x67, 0x5b, 0x37, 0x06, 0xdc, 0xd8, 0xf2, 0x61, 0x20, 0x25, 0x0a, 0xde,
	0xa7, 0x87, 0x17, 0xbf, 0x2b, 0xa4, 0xe6, 0xcd, 0x93, 0xcc, 0x94, 0x16, 0xb1, 0x8f, 0xa4, 0xd6,
	0x89, 0xf3, 0x8d, 0x11, 0xac, 0xee, 0x94, 0xee, 0x38, 0x1b, 0x77, 0x1c, 0x28, 0xdc, 0x69, 0xbe,
	0xfa, 0xcf, 0x47, 0x2e, 0x3d, 0x6a, 0xef, 0x30, 0x4d, 0x8e, 0x56, 0x7e, 0xf0, 0xaf, 0x9f, 0xcd,
	0x1d, 0xe6, 0xc3, 0xdd, 0xe6, 0x3f, 0xd6, 0xb6, 0x77, 0xbc, 0xf3, 0x4f, 0x6f, 0xa6, 0x5f, 0xd2,
	0x64, 0x39, 0xbf, 0x5d, 0x26, 0x99, 0x5b, 0x80, 0xdc, 0xf5, 0x0f, 0x90, 0xb9, 0x05, 0xd1, 0xdd,
	0x10, 0x27, 0xfb, 0xab, 0xee, 0x87, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x52, 0x67, 0xdc, 0xc5,
	0x26, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BiosServiceClient is the client API for BiosService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BiosServiceClient interface {
	// GetGBBFlags gets the flags that are cleared and set.
	GetGBBFlags(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GBBFlagsState, error)
	// ClearAndSetGBBFlags modifies the specified flags, leaving the rest unchanged.
	ClearAndSetGBBFlags(ctx context.Context, in *GBBFlagsState, opts ...grpc.CallOption) (*empty.Empty, error)
}

type biosServiceClient struct {
	cc *grpc.ClientConn
}

func NewBiosServiceClient(cc *grpc.ClientConn) BiosServiceClient {
	return &biosServiceClient{cc}
}

func (c *biosServiceClient) GetGBBFlags(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GBBFlagsState, error) {
	out := new(GBBFlagsState)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.BiosService/GetGBBFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biosServiceClient) ClearAndSetGBBFlags(ctx context.Context, in *GBBFlagsState, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.BiosService/ClearAndSetGBBFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BiosServiceServer is the server API for BiosService service.
type BiosServiceServer interface {
	// GetGBBFlags gets the flags that are cleared and set.
	GetGBBFlags(context.Context, *empty.Empty) (*GBBFlagsState, error)
	// ClearAndSetGBBFlags modifies the specified flags, leaving the rest unchanged.
	ClearAndSetGBBFlags(context.Context, *GBBFlagsState) (*empty.Empty, error)
}

// UnimplementedBiosServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBiosServiceServer struct {
}

func (*UnimplementedBiosServiceServer) GetGBBFlags(ctx context.Context, req *empty.Empty) (*GBBFlagsState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGBBFlags not implemented")
}
func (*UnimplementedBiosServiceServer) ClearAndSetGBBFlags(ctx context.Context, req *GBBFlagsState) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearAndSetGBBFlags not implemented")
}

func RegisterBiosServiceServer(s *grpc.Server, srv BiosServiceServer) {
	s.RegisterService(&_BiosService_serviceDesc, srv)
}

func _BiosService_GetGBBFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiosServiceServer).GetGBBFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.BiosService/GetGBBFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiosServiceServer).GetGBBFlags(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiosService_ClearAndSetGBBFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GBBFlagsState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiosServiceServer).ClearAndSetGBBFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.BiosService/ClearAndSetGBBFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiosServiceServer).ClearAndSetGBBFlags(ctx, req.(*GBBFlagsState))
	}
	return interceptor(ctx, in, info, handler)
}

var _BiosService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.firmware.BiosService",
	HandlerType: (*BiosServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGBBFlags",
			Handler:    _BiosService_GetGBBFlags_Handler,
		},
		{
			MethodName: "ClearAndSetGBBFlags",
			Handler:    _BiosService_ClearAndSetGBBFlags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bios_service.proto",
}
