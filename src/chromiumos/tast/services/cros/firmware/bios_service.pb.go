// Copyright 2020 The ChromiumOS Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: bios_service.proto

package firmware

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GBBFlag bit positions. These must match what is in src/platform/vboot_reference/firmware/2lib/include/2gbb_flags.h.
type GBBFlag int32

const (
	// Reduce the dev screen delay to 2 sec from 30 sec to speed up factory.
	GBBFlag_DEV_SCREEN_SHORT_DELAY GBBFlag = 0
	// Deprecated: Do not use.
	GBBFlag_LOAD_OPTION_ROMS GBBFlag = 1
	// Deprecated: Do not use.
	GBBFlag_ENABLE_ALTERNATE_OS GBBFlag = 2
	// Force dev switch on, regardless of physical/keyboard dev switch position.
	GBBFlag_FORCE_DEV_SWITCH_ON GBBFlag = 3
	// Allow booting from external disk in dev mode even if dev_boot_usb=0.
	GBBFlag_FORCE_DEV_BOOT_USB GBBFlag = 4
	// Disable firmware rollback protection.
	GBBFlag_DISABLE_FW_ROLLBACK_CHECK GBBFlag = 5
	// Allow Enter key to trigger dev->tonorm screen transition.
	GBBFlag_ENTER_TRIGGERS_TONORM GBBFlag = 6
	// Allow booting Legacy OSes in dev mode even if dev_boot_altfw=0.
	GBBFlag_FORCE_DEV_BOOT_LEGACY GBBFlag = 7
	// Currently running FAFT tests.
	GBBFlag_RUNNING_FAFT GBBFlag = 8
	// Disable EC software sync
	GBBFlag_DISABLE_EC_SOFTWARE_SYNC GBBFlag = 9
	// Default to booting legacy OS when dev screen times out
	GBBFlag_DEFAULT_DEV_BOOT_ALTFW GBBFlag = 10
	// Disable auxiliary firmware (auxfw) software sync
	GBBFlag_DISABLE_AUXFW_SOFTWARE_SYNC GBBFlag = 11
	// Disable shutdown on lid closed
	GBBFlag_DISABLE_LID_SHUTDOWN GBBFlag = 12
	// Deprecated: Do not use.
	GBBFlag_FORCE_DEV_BOOT_FASTBOOT_FULL_CAP GBBFlag = 13
	// Recovery mode always assumes manual recovery, even if EC_IN_RW=1
	GBBFlag_FORCE_MANUAL_RECOVERY GBBFlag = 14
	// Disable FWMP
	GBBFlag_DISABLE_FWMP GBBFlag = 15
	// Enable USB Device Controller
	GBBFlag_ENABLE_UDC GBBFlag = 16
)

// Enum value maps for GBBFlag.
var (
	GBBFlag_name = map[int32]string{
		0:  "DEV_SCREEN_SHORT_DELAY",
		1:  "LOAD_OPTION_ROMS",
		2:  "ENABLE_ALTERNATE_OS",
		3:  "FORCE_DEV_SWITCH_ON",
		4:  "FORCE_DEV_BOOT_USB",
		5:  "DISABLE_FW_ROLLBACK_CHECK",
		6:  "ENTER_TRIGGERS_TONORM",
		7:  "FORCE_DEV_BOOT_LEGACY",
		8:  "RUNNING_FAFT",
		9:  "DISABLE_EC_SOFTWARE_SYNC",
		10: "DEFAULT_DEV_BOOT_ALTFW",
		11: "DISABLE_AUXFW_SOFTWARE_SYNC",
		12: "DISABLE_LID_SHUTDOWN",
		13: "FORCE_DEV_BOOT_FASTBOOT_FULL_CAP",
		14: "FORCE_MANUAL_RECOVERY",
		15: "DISABLE_FWMP",
		16: "ENABLE_UDC",
	}
	GBBFlag_value = map[string]int32{
		"DEV_SCREEN_SHORT_DELAY":           0,
		"LOAD_OPTION_ROMS":                 1,
		"ENABLE_ALTERNATE_OS":              2,
		"FORCE_DEV_SWITCH_ON":              3,
		"FORCE_DEV_BOOT_USB":               4,
		"DISABLE_FW_ROLLBACK_CHECK":        5,
		"ENTER_TRIGGERS_TONORM":            6,
		"FORCE_DEV_BOOT_LEGACY":            7,
		"RUNNING_FAFT":                     8,
		"DISABLE_EC_SOFTWARE_SYNC":         9,
		"DEFAULT_DEV_BOOT_ALTFW":           10,
		"DISABLE_AUXFW_SOFTWARE_SYNC":      11,
		"DISABLE_LID_SHUTDOWN":             12,
		"FORCE_DEV_BOOT_FASTBOOT_FULL_CAP": 13,
		"FORCE_MANUAL_RECOVERY":            14,
		"DISABLE_FWMP":                     15,
		"ENABLE_UDC":                       16,
	}
)

func (x GBBFlag) Enum() *GBBFlag {
	p := new(GBBFlag)
	*p = x
	return p
}

func (x GBBFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GBBFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_bios_service_proto_enumTypes[0].Descriptor()
}

func (GBBFlag) Type() protoreflect.EnumType {
	return &file_bios_service_proto_enumTypes[0]
}

func (x GBBFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GBBFlag.Descriptor instead.
func (GBBFlag) EnumDescriptor() ([]byte, []int) {
	return file_bios_service_proto_rawDescGZIP(), []int{0}
}

// Programmers enum for flashrom programmers
type Programmer int32

const (
	Programmer_PROGRAMMER_UNDEFINED Programmer = 0
	Programmer_ECProgrammer         Programmer = 1
	Programmer_BIOSProgrammer       Programmer = 2
)

// Enum value maps for Programmer.
var (
	Programmer_name = map[int32]string{
		0: "PROGRAMMER_UNDEFINED",
		1: "ECProgrammer",
		2: "BIOSProgrammer",
	}
	Programmer_value = map[string]int32{
		"PROGRAMMER_UNDEFINED": 0,
		"ECProgrammer":         1,
		"BIOSProgrammer":       2,
	}
)

func (x Programmer) Enum() *Programmer {
	p := new(Programmer)
	*p = x
	return p
}

func (x Programmer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Programmer) Descriptor() protoreflect.EnumDescriptor {
	return file_bios_service_proto_enumTypes[1].Descriptor()
}

func (Programmer) Type() protoreflect.EnumType {
	return &file_bios_service_proto_enumTypes[1]
}

func (x Programmer) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Programmer.Descriptor instead.
func (Programmer) EnumDescriptor() ([]byte, []int) {
	return file_bios_service_proto_rawDescGZIP(), []int{1}
}

// ImageSections enum for fw ImageSections
type ImageSection int32

const (
	ImageSection_EmptyImageSection            ImageSection = 0
	ImageSection_COREBOOTImageSection         ImageSection = 1
	ImageSection_GBBImageSection              ImageSection = 2
	ImageSection_ECRWImageSection             ImageSection = 3
	ImageSection_ECRWBImageSection            ImageSection = 4
	ImageSection_ROVPDImageSection            ImageSection = 6
	ImageSection_RWVPDImageSection            ImageSection = 7
	ImageSection_RECOVERYMRCCACHEImageSection ImageSection = 8
	ImageSection_APROImageSection             ImageSection = 9
	ImageSection_FWSignAImageSection          ImageSection = 10
	ImageSection_FWSignBImageSection          ImageSection = 11
	ImageSection_FWBodyAImageSection          ImageSection = 12
	ImageSection_FWBodyBImageSection          ImageSection = 13
	ImageSection_APRWAImageSection            ImageSection = 14
	ImageSection_APRWBImageSection            ImageSection = 15
	ImageSection_APWPROImageSection           ImageSection = 16
	ImageSection_BOOTSTUBImageSection         ImageSection = 17
	ImageSection_FMAPImageSection             ImageSection = 18
	ImageSection_ECROImageSection             ImageSection = 19
	ImageSection_FRMAINImageSection           ImageSection = 20
	ImageSection_ROFRIDImageSection           ImageSection = 21
	ImageSection_RWFWIDImageSection           ImageSection = 22
	ImageSection_RWFWIDAImageSection          ImageSection = 23
	ImageSection_RWFWIDBImageSection          ImageSection = 24
	ImageSection_IntelCSERWAImageSection      ImageSection = 25
	ImageSection_IntelCSERWBImageSection      ImageSection = 26
	ImageSection_SIALLImageSection            ImageSection = 27
	ImageSection_SIDESCImageSection           ImageSection = 28
	ImageSection_SIMEImageSection             ImageSection = 29
	ImageSection_SIBIOSImageSection           ImageSection = 30
	ImageSection_RWLEGACYImageSection         ImageSection = 31
	ImageSection_RWMISCImageSection           ImageSection = 32
	ImageSection_RWMRCCACHEImageSection       ImageSection = 33
	ImageSection_RWELOGImageSection           ImageSection = 34
	ImageSection_RWSHAREDImageSection         ImageSection = 35
	ImageSection_RWNVRAMImageSection          ImageSection = 36
	ImageSection_ROFRIDPADImageSection        ImageSection = 37
	ImageSection_SHAREDDATAImageSection       ImageSection = 38
	ImageSection_UNIFIEDMRCCACHEImageSection  ImageSection = 39
	ImageSection_SMMSTOREImageSection         ImageSection = 40
	ImageSection_MISCRWImageSection           ImageSection = 41
	ImageSection_RWVARMRCCACHEImageSection    ImageSection = 42
	ImageSection_FPFSTATUSImageSection        ImageSection = 43
	ImageSection_BIOSUNUSABLEImageSection     ImageSection = 44
	ImageSection_RWPRESERVEImageSection       ImageSection = 45
	ImageSection_VBLOCKDEVImageSection        ImageSection = 46
	ImageSection_DEVICEEXTENSIONImageSection  ImageSection = 47
	ImageSection_UNUSEDHOLEImageSection       ImageSection = 48
	ImageSection_IFWIImageSection             ImageSection = 49
)

// Enum value maps for ImageSection.
var (
	ImageSection_name = map[int32]string{
		0:  "EmptyImageSection",
		1:  "COREBOOTImageSection",
		2:  "GBBImageSection",
		3:  "ECRWImageSection",
		4:  "ECRWBImageSection",
		6:  "ROVPDImageSection",
		7:  "RWVPDImageSection",
		8:  "RECOVERYMRCCACHEImageSection",
		9:  "APROImageSection",
		10: "FWSignAImageSection",
		11: "FWSignBImageSection",
		12: "FWBodyAImageSection",
		13: "FWBodyBImageSection",
		14: "APRWAImageSection",
		15: "APRWBImageSection",
		16: "APWPROImageSection",
		17: "BOOTSTUBImageSection",
		18: "FMAPImageSection",
		19: "ECROImageSection",
		20: "FRMAINImageSection",
		21: "ROFRIDImageSection",
		22: "RWFWIDImageSection",
		23: "RWFWIDAImageSection",
		24: "RWFWIDBImageSection",
		25: "IntelCSERWAImageSection",
		26: "IntelCSERWBImageSection",
		27: "SIALLImageSection",
		28: "SIDESCImageSection",
		29: "SIMEImageSection",
		30: "SIBIOSImageSection",
		31: "RWLEGACYImageSection",
		32: "RWMISCImageSection",
		33: "RWMRCCACHEImageSection",
		34: "RWELOGImageSection",
		35: "RWSHAREDImageSection",
		36: "RWNVRAMImageSection",
		37: "ROFRIDPADImageSection",
		38: "SHAREDDATAImageSection",
		39: "UNIFIEDMRCCACHEImageSection",
		40: "SMMSTOREImageSection",
		41: "MISCRWImageSection",
		42: "RWVARMRCCACHEImageSection",
		43: "FPFSTATUSImageSection",
		44: "BIOSUNUSABLEImageSection",
		45: "RWPRESERVEImageSection",
		46: "VBLOCKDEVImageSection",
		47: "DEVICEEXTENSIONImageSection",
		48: "UNUSEDHOLEImageSection",
		49: "IFWIImageSection",
	}
	ImageSection_value = map[string]int32{
		"EmptyImageSection":            0,
		"COREBOOTImageSection":         1,
		"GBBImageSection":              2,
		"ECRWImageSection":             3,
		"ECRWBImageSection":            4,
		"ROVPDImageSection":            6,
		"RWVPDImageSection":            7,
		"RECOVERYMRCCACHEImageSection": 8,
		"APROImageSection":             9,
		"FWSignAImageSection":          10,
		"FWSignBImageSection":          11,
		"FWBodyAImageSection":          12,
		"FWBodyBImageSection":          13,
		"APRWAImageSection":            14,
		"APRWBImageSection":            15,
		"APWPROImageSection":           16,
		"BOOTSTUBImageSection":         17,
		"FMAPImageSection":             18,
		"ECROImageSection":             19,
		"FRMAINImageSection":           20,
		"ROFRIDImageSection":           21,
		"RWFWIDImageSection":           22,
		"RWFWIDAImageSection":          23,
		"RWFWIDBImageSection":          24,
		"IntelCSERWAImageSection":      25,
		"IntelCSERWBImageSection":      26,
		"SIALLImageSection":            27,
		"SIDESCImageSection":           28,
		"SIMEImageSection":             29,
		"SIBIOSImageSection":           30,
		"RWLEGACYImageSection":         31,
		"RWMISCImageSection":           32,
		"RWMRCCACHEImageSection":       33,
		"RWELOGImageSection":           34,
		"RWSHAREDImageSection":         35,
		"RWNVRAMImageSection":          36,
		"ROFRIDPADImageSection":        37,
		"SHAREDDATAImageSection":       38,
		"UNIFIEDMRCCACHEImageSection":  39,
		"SMMSTOREImageSection":         40,
		"MISCRWImageSection":           41,
		"RWVARMRCCACHEImageSection":    42,
		"FPFSTATUSImageSection":        43,
		"BIOSUNUSABLEImageSection":     44,
		"RWPRESERVEImageSection":       45,
		"VBLOCKDEVImageSection":        46,
		"DEVICEEXTENSIONImageSection":  47,
		"UNUSEDHOLEImageSection":       48,
		"IFWIImageSection":             49,
	}
)

func (x ImageSection) Enum() *ImageSection {
	p := new(ImageSection)
	*p = x
	return p
}

func (x ImageSection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageSection) Descriptor() protoreflect.EnumDescriptor {
	return file_bios_service_proto_enumTypes[2].Descriptor()
}

func (ImageSection) Type() protoreflect.EnumType {
	return &file_bios_service_proto_enumTypes[2]
}

func (x ImageSection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageSection.Descriptor instead.
func (ImageSection) EnumDescriptor() ([]byte, []int) {
	return file_bios_service_proto_rawDescGZIP(), []int{2}
}

type UpdateMode int32

const (
	UpdateMode_RecoveryMode UpdateMode = 0
)

// Enum value maps for UpdateMode.
var (
	UpdateMode_name = map[int32]string{
		0: "RecoveryMode",
	}
	UpdateMode_value = map[string]int32{
		"RecoveryMode": 0,
	}
)

func (x UpdateMode) Enum() *UpdateMode {
	p := new(UpdateMode)
	*p = x
	return p
}

func (x UpdateMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateMode) Descriptor() protoreflect.EnumDescriptor {
	return file_bios_service_proto_enumTypes[3].Descriptor()
}

func (UpdateMode) Type() protoreflect.EnumType {
	return &file_bios_service_proto_enumTypes[3]
}

func (x UpdateMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateMode.Descriptor instead.
func (UpdateMode) EnumDescriptor() ([]byte, []int) {
	return file_bios_service_proto_rawDescGZIP(), []int{3}
}

// GBBFlagsState represents the a known state of GBB flags.  Set flags have precedence over cleared ones.
type GBBFlagsState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clear []GBBFlag `protobuf:"varint,1,rep,packed,name=Clear,proto3,enum=tast.cros.firmware.GBBFlag" json:"Clear,omitempty"`
	Set   []GBBFlag `protobuf:"varint,2,rep,packed,name=Set,proto3,enum=tast.cros.firmware.GBBFlag" json:"Set,omitempty"`
}

func (x *GBBFlagsState) Reset() {
	*x = GBBFlagsState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bios_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GBBFlagsState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GBBFlagsState) ProtoMessage() {}

func (x *GBBFlagsState) ProtoReflect() protoreflect.Message {
	mi := &file_bios_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GBBFlagsState.ProtoReflect.Descriptor instead.
func (*GBBFlagsState) Descriptor() ([]byte, []int) {
	return file_bios_service_proto_rawDescGZIP(), []int{0}
}

func (x *GBBFlagsState) GetClear() []GBBFlag {
	if x != nil {
		return x.Clear
	}
	return nil
}

func (x *GBBFlagsState) GetSet() []GBBFlag {
	if x != nil {
		return x.Set
	}
	return nil
}

// FWSectionInfo represents the programmer, and section of a firmware section.
// The Path in a request refers to an optional temp dir to save an image to.
// The Path in a response refers to the exact location of the image file.
type FWSectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path       string       `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	Section    ImageSection `protobuf:"varint,2,opt,name=Section,proto3,enum=tast.cros.firmware.ImageSection" json:"Section,omitempty"`
	Programmer Programmer   `protobuf:"varint,3,opt,name=Programmer,proto3,enum=tast.cros.firmware.Programmer" json:"Programmer,omitempty"`
}

func (x *FWSectionInfo) Reset() {
	*x = FWSectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bios_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FWSectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FWSectionInfo) ProtoMessage() {}

func (x *FWSectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bios_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FWSectionInfo.ProtoReflect.Descriptor instead.
func (*FWSectionInfo) Descriptor() ([]byte, []int) {
	return file_bios_service_proto_rawDescGZIP(), []int{1}
}

func (x *FWSectionInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FWSectionInfo) GetSection() ImageSection {
	if x != nil {
		return x.Section
	}
	return ImageSection_EmptyImageSection
}

func (x *FWSectionInfo) GetProgrammer() Programmer {
	if x != nil {
		return x.Programmer
	}
	return Programmer_PROGRAMMER_UNDEFINED
}

// FirmwareUpdateModeRequest represents the string containing the mode and options to perform the update.
type FirmwareUpdateModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode    UpdateMode `protobuf:"varint,1,opt,name=Mode,proto3,enum=tast.cros.firmware.UpdateMode" json:"Mode,omitempty"`
	Options string     `protobuf:"bytes,2,opt,name=Options,proto3" json:"Options,omitempty"`
}

func (x *FirmwareUpdateModeRequest) Reset() {
	*x = FirmwareUpdateModeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bios_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareUpdateModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareUpdateModeRequest) ProtoMessage() {}

func (x *FirmwareUpdateModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bios_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareUpdateModeRequest.ProtoReflect.Descriptor instead.
func (*FirmwareUpdateModeRequest) Descriptor() ([]byte, []int) {
	return file_bios_service_proto_rawDescGZIP(), []int{2}
}

func (x *FirmwareUpdateModeRequest) GetMode() UpdateMode {
	if x != nil {
		return x.Mode
	}
	return UpdateMode_RecoveryMode
}

func (x *FirmwareUpdateModeRequest) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

// Range holds the start (offset) and length (size) of a section in fw.
type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start  int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	Length int64 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bios_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_bios_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_bios_service_proto_rawDescGZIP(), []int{3}
}

func (x *Range) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Range) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

// WPRequest provides args for enabling/disabling software write protect.
type WPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable  bool         `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	Range   *Range       `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`                                           // Skip instantiating this message to use default values.
	Section ImageSection `protobuf:"varint,3,opt,name=section,proto3,enum=tast.cros.firmware.ImageSection" json:"section,omitempty"` // Don't set to use default value.
}

func (x *WPRequest) Reset() {
	*x = WPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bios_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WPRequest) ProtoMessage() {}

func (x *WPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bios_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WPRequest.ProtoReflect.Descriptor instead.
func (*WPRequest) Descriptor() ([]byte, []int) {
	return file_bios_service_proto_rawDescGZIP(), []int{4}
}

func (x *WPRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *WPRequest) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *WPRequest) GetSection() ImageSection {
	if x != nil {
		return x.Section
	}
	return ImageSection_EmptyImageSection
}

// FMAP parses flash map to a map of image section to range (start, length).
type FMAP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Programmer Programmer        `protobuf:"varint,1,opt,name=programmer,proto3,enum=tast.cros.firmware.Programmer" json:"programmer,omitempty"`
	Fmap       []*FMAP_FMAPEntry `protobuf:"bytes,2,rep,name=fmap,proto3" json:"fmap,omitempty"`
}

func (x *FMAP) Reset() {
	*x = FMAP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bios_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FMAP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FMAP) ProtoMessage() {}

func (x *FMAP) ProtoReflect() protoreflect.Message {
	mi := &file_bios_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FMAP.ProtoReflect.Descriptor instead.
func (*FMAP) Descriptor() ([]byte, []int) {
	return file_bios_service_proto_rawDescGZIP(), []int{5}
}

func (x *FMAP) GetProgrammer() Programmer {
	if x != nil {
		return x.Programmer
	}
	return Programmer_PROGRAMMER_UNDEFINED
}

func (x *FMAP) GetFmap() []*FMAP_FMAPEntry {
	if x != nil {
		return x.Fmap
	}
	return nil
}

// FMAPEntry holds each value for each section in fmap.
type FMAP_FMAPEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Section ImageSection `protobuf:"varint,1,opt,name=section,proto3,enum=tast.cros.firmware.ImageSection" json:"section,omitempty"`
	Range   *Range       `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *FMAP_FMAPEntry) Reset() {
	*x = FMAP_FMAPEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bios_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FMAP_FMAPEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FMAP_FMAPEntry) ProtoMessage() {}

func (x *FMAP_FMAPEntry) ProtoReflect() protoreflect.Message {
	mi := &file_bios_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FMAP_FMAPEntry.ProtoReflect.Descriptor instead.
func (*FMAP_FMAPEntry) Descriptor() ([]byte, []int) {
	return file_bios_service_proto_rawDescGZIP(), []int{5, 0}
}

func (x *FMAP_FMAPEntry) GetSection() ImageSection {
	if x != nil {
		return x.Section
	}
	return ImageSection_EmptyImageSection
}

func (x *FMAP_FMAPEntry) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

var File_bios_service_proto protoreflect.FileDescriptor

var file_bios_service_proto_rawDesc = []byte{
	0x0a, 0x12, 0x62, 0x69, 0x6f, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x71, 0x0a, 0x0d, 0x47, 0x42, 0x42, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f,
	0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x47, 0x42, 0x42, 0x46, 0x6c,
	0x61, 0x67, 0x52, 0x05, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x2d, 0x0a, 0x03, 0x53, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72,
	0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x47, 0x42, 0x42, 0x46,
	0x6c, 0x61, 0x67, 0x52, 0x03, 0x53, 0x65, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x0d, 0x46, 0x57, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3a,
	0x0a, 0x07, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0a, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x72, 0x52, 0x0a,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x72, 0x22, 0x69, 0x0a, 0x19, 0x46, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f,
	0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x35, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x90, 0x01, 0x0a,
	0x09, 0x57, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xf8, 0x01, 0x0a, 0x04, 0x46, 0x4d, 0x41, 0x50, 0x12, 0x3e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x74,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x04, 0x66, 0x6d, 0x61, 0x70,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72,
	0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x46, 0x4d, 0x41, 0x50,
	0x2e, 0x46, 0x4d, 0x41, 0x50, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x66, 0x6d, 0x61, 0x70,
	0x1a, 0x78, 0x0a, 0x09, 0x46, 0x4d, 0x41, 0x50, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3a, 0x0a,
	0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2a, 0xd0, 0x03, 0x0a, 0x07, 0x47,
	0x42, 0x42, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x56, 0x5f, 0x53, 0x43,
	0x52, 0x45, 0x45, 0x4e, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x10, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x4f, 0x4d, 0x53, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x1b, 0x0a, 0x13,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x45,
	0x5f, 0x4f, 0x53, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x4f, 0x52,
	0x43, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x4f, 0x4e,
	0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x5f,
	0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x42, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x57, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43,
	0x4b, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x53, 0x5f, 0x54, 0x4f, 0x4e, 0x4f,
	0x52, 0x4d, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x45,
	0x56, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x10, 0x07, 0x12,
	0x10, 0x0a, 0x0c, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x46, 0x54, 0x10,
	0x08, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x43, 0x5f,
	0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x09, 0x12,
	0x1a, 0x0a, 0x16, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x44, 0x45, 0x56, 0x5f, 0x42,
	0x4f, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x54, 0x46, 0x57, 0x10, 0x0a, 0x12, 0x1f, 0x0a, 0x1b, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x55, 0x58, 0x46, 0x57, 0x5f, 0x53, 0x4f, 0x46,
	0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x48, 0x55, 0x54,
	0x44, 0x4f, 0x57, 0x4e, 0x10, 0x0c, 0x12, 0x28, 0x0a, 0x20, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f,
	0x44, 0x45, 0x56, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x42, 0x4f, 0x4f,
	0x54, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x43, 0x41, 0x50, 0x10, 0x0d, 0x1a, 0x02, 0x08, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x57, 0x4d, 0x50, 0x10, 0x0f, 0x12, 0x0e, 0x0a,
	0x0a, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x55, 0x44, 0x43, 0x10, 0x10, 0x2a, 0x4c, 0x0a,
	0x0a, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x14, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x4d, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x43, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x6d, 0x65, 0x72, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x49, 0x4f, 0x53, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x72, 0x10, 0x02, 0x2a, 0xf3, 0x09, 0x0a, 0x0c,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x47, 0x42, 0x42, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x43, 0x52, 0x57, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x43, 0x52, 0x57,
	0x42, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x12,
	0x15, 0x0a, 0x11, 0x52, 0x4f, 0x56, 0x50, 0x44, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x57, 0x56, 0x50, 0x44, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x12, 0x20, 0x0a,
	0x1c, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x4d, 0x52, 0x43, 0x43, 0x41, 0x43, 0x48,
	0x45, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x08, 0x12,
	0x14, 0x0a, 0x10, 0x41, 0x50, 0x52, 0x4f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x57, 0x53, 0x69, 0x67, 0x6e, 0x41,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0a, 0x12, 0x17,
	0x0a, 0x13, 0x46, 0x57, 0x53, 0x69, 0x67, 0x6e, 0x42, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x57, 0x42, 0x6f, 0x64,
	0x79, 0x41, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0c,
	0x12, 0x17, 0x0a, 0x13, 0x46, 0x57, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x50, 0x52,
	0x57, 0x41, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0e,
	0x12, 0x15, 0x0a, 0x11, 0x41, 0x50, 0x52, 0x57, 0x42, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x50, 0x57, 0x50, 0x52,
	0x4f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x10, 0x12,
	0x18, 0x0a, 0x14, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54, 0x55, 0x42, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x11, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x4d, 0x41,
	0x50, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x12, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x43, 0x52, 0x4f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x13, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x52, 0x4d, 0x41, 0x49, 0x4e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x14, 0x12, 0x16, 0x0a,
	0x12, 0x52, 0x4f, 0x46, 0x52, 0x49, 0x44, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x15, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x57, 0x46, 0x57, 0x49, 0x44, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x16, 0x12, 0x17, 0x0a,
	0x13, 0x52, 0x57, 0x46, 0x57, 0x49, 0x44, 0x41, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x17, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x57, 0x46, 0x57, 0x49, 0x44,
	0x42, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x18, 0x12,
	0x1b, 0x0a, 0x17, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x43, 0x53, 0x45, 0x52, 0x57, 0x41, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x19, 0x12, 0x1b, 0x0a, 0x17,
	0x49, 0x6e, 0x74, 0x65, 0x6c, 0x43, 0x53, 0x45, 0x52, 0x57, 0x42, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x1a, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x49, 0x41,
	0x4c, 0x4c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x1b,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x49, 0x44, 0x45, 0x53, 0x43, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x1c, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x49, 0x4d, 0x45,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x1d, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x49, 0x42, 0x49, 0x4f, 0x53, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x1e, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x57, 0x4c, 0x45, 0x47, 0x41,
	0x43, 0x59, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x1f,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x57, 0x4d, 0x49, 0x53, 0x43, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x20, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x57, 0x4d, 0x52,
	0x43, 0x43, 0x41, 0x43, 0x48, 0x45, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x21, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x57, 0x45, 0x4c, 0x4f, 0x47, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x22, 0x12, 0x18, 0x0a, 0x14,
	0x52, 0x57, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x23, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x57, 0x4e, 0x56, 0x52, 0x41,
	0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x24, 0x12,
	0x19, 0x0a, 0x15, 0x52, 0x4f, 0x46, 0x52, 0x49, 0x44, 0x50, 0x41, 0x44, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x25, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x48,
	0x41, 0x52, 0x45, 0x44, 0x44, 0x41, 0x54, 0x41, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x26, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x4e, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x4d, 0x52, 0x43, 0x43, 0x41, 0x43, 0x48, 0x45, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x27, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4d, 0x4d, 0x53, 0x54,
	0x4f, 0x52, 0x45, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x28, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x49, 0x53, 0x43, 0x52, 0x57, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x29, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x57, 0x56,
	0x41, 0x52, 0x4d, 0x52, 0x43, 0x43, 0x41, 0x43, 0x48, 0x45, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x2a, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x50, 0x46, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x2b, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x49, 0x4f, 0x53, 0x55, 0x4e, 0x55, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x2c, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x57, 0x50, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x2d, 0x12, 0x19, 0x0a,
	0x15, 0x56, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x44, 0x45, 0x56, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x2e, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x2f, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e, 0x55,
	0x53, 0x45, 0x44, 0x48, 0x4f, 0x4c, 0x45, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x30, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x46, 0x57, 0x49, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x31, 0x22, 0x04, 0x08, 0x05, 0x10,
	0x05, 0x2a, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x10,
	0x00, 0x32, 0x96, 0x06, 0x0a, 0x0b, 0x42, 0x69, 0x6f, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x47, 0x42, 0x42, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x21, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x47, 0x42,
	0x42, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a,
	0x13, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x47, 0x42, 0x42, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x21, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x47, 0x42, 0x42, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x54, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x41, 0x50, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61,
	0x72, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x12, 0x1d,
	0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x57, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x10, 0x43, 0x6f, 0x72, 0x72, 0x75,
	0x70, 0x74, 0x46, 0x57, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x74, 0x61,
	0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x46, 0x57, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x21,
	0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x46, 0x57, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x12, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x74, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x46,
	0x57, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x21, 0x2e, 0x74,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x46, 0x57, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x00, 0x12, 0x52, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x46, 0x57,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x1e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x46, 0x57, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x16, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73,
	0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2d,
	0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x46, 0x4d, 0x41, 0x50, 0x12, 0x18, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x46, 0x4d, 0x41, 0x50, 0x1a, 0x18,
	0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x46, 0x4d, 0x41, 0x50, 0x22, 0x00, 0x42, 0x28, 0x5a, 0x26, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bios_service_proto_rawDescOnce sync.Once
	file_bios_service_proto_rawDescData = file_bios_service_proto_rawDesc
)

func file_bios_service_proto_rawDescGZIP() []byte {
	file_bios_service_proto_rawDescOnce.Do(func() {
		file_bios_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_bios_service_proto_rawDescData)
	})
	return file_bios_service_proto_rawDescData
}

var file_bios_service_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_bios_service_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_bios_service_proto_goTypes = []interface{}{
	(GBBFlag)(0),                      // 0: tast.cros.firmware.GBBFlag
	(Programmer)(0),                   // 1: tast.cros.firmware.Programmer
	(ImageSection)(0),                 // 2: tast.cros.firmware.ImageSection
	(UpdateMode)(0),                   // 3: tast.cros.firmware.UpdateMode
	(*GBBFlagsState)(nil),             // 4: tast.cros.firmware.GBBFlagsState
	(*FWSectionInfo)(nil),             // 5: tast.cros.firmware.FWSectionInfo
	(*FirmwareUpdateModeRequest)(nil), // 6: tast.cros.firmware.FirmwareUpdateModeRequest
	(*Range)(nil),                     // 7: tast.cros.firmware.Range
	(*WPRequest)(nil),                 // 8: tast.cros.firmware.WPRequest
	(*FMAP)(nil),                      // 9: tast.cros.firmware.FMAP
	(*FMAP_FMAPEntry)(nil),            // 10: tast.cros.firmware.FMAP.FMAPEntry
	(*emptypb.Empty)(nil),             // 11: google.protobuf.Empty
}
var file_bios_service_proto_depIdxs = []int32{
	0,  // 0: tast.cros.firmware.GBBFlagsState.Clear:type_name -> tast.cros.firmware.GBBFlag
	0,  // 1: tast.cros.firmware.GBBFlagsState.Set:type_name -> tast.cros.firmware.GBBFlag
	2,  // 2: tast.cros.firmware.FWSectionInfo.Section:type_name -> tast.cros.firmware.ImageSection
	1,  // 3: tast.cros.firmware.FWSectionInfo.Programmer:type_name -> tast.cros.firmware.Programmer
	3,  // 4: tast.cros.firmware.FirmwareUpdateModeRequest.Mode:type_name -> tast.cros.firmware.UpdateMode
	7,  // 5: tast.cros.firmware.WPRequest.range:type_name -> tast.cros.firmware.Range
	2,  // 6: tast.cros.firmware.WPRequest.section:type_name -> tast.cros.firmware.ImageSection
	1,  // 7: tast.cros.firmware.FMAP.programmer:type_name -> tast.cros.firmware.Programmer
	10, // 8: tast.cros.firmware.FMAP.fmap:type_name -> tast.cros.firmware.FMAP.FMAPEntry
	2,  // 9: tast.cros.firmware.FMAP.FMAPEntry.section:type_name -> tast.cros.firmware.ImageSection
	7,  // 10: tast.cros.firmware.FMAP.FMAPEntry.range:type_name -> tast.cros.firmware.Range
	11, // 11: tast.cros.firmware.BiosService.GetGBBFlags:input_type -> google.protobuf.Empty
	4,  // 12: tast.cros.firmware.BiosService.ClearAndSetGBBFlags:input_type -> tast.cros.firmware.GBBFlagsState
	8,  // 13: tast.cros.firmware.BiosService.SetAPSoftwareWriteProtect:input_type -> tast.cros.firmware.WPRequest
	5,  // 14: tast.cros.firmware.BiosService.CorruptFWSection:input_type -> tast.cros.firmware.FWSectionInfo
	5,  // 15: tast.cros.firmware.BiosService.BackupImageSection:input_type -> tast.cros.firmware.FWSectionInfo
	5,  // 16: tast.cros.firmware.BiosService.RestoreImageSection:input_type -> tast.cros.firmware.FWSectionInfo
	5,  // 17: tast.cros.firmware.BiosService.WriteImageFromMultiSectionFile:input_type -> tast.cros.firmware.FWSectionInfo
	6,  // 18: tast.cros.firmware.BiosService.ChromeosFirmwareUpdate:input_type -> tast.cros.firmware.FirmwareUpdateModeRequest
	9,  // 19: tast.cros.firmware.BiosService.ParseFMAP:input_type -> tast.cros.firmware.FMAP
	4,  // 20: tast.cros.firmware.BiosService.GetGBBFlags:output_type -> tast.cros.firmware.GBBFlagsState
	11, // 21: tast.cros.firmware.BiosService.ClearAndSetGBBFlags:output_type -> google.protobuf.Empty
	11, // 22: tast.cros.firmware.BiosService.SetAPSoftwareWriteProtect:output_type -> google.protobuf.Empty
	5,  // 23: tast.cros.firmware.BiosService.CorruptFWSection:output_type -> tast.cros.firmware.FWSectionInfo
	5,  // 24: tast.cros.firmware.BiosService.BackupImageSection:output_type -> tast.cros.firmware.FWSectionInfo
	11, // 25: tast.cros.firmware.BiosService.RestoreImageSection:output_type -> google.protobuf.Empty
	11, // 26: tast.cros.firmware.BiosService.WriteImageFromMultiSectionFile:output_type -> google.protobuf.Empty
	11, // 27: tast.cros.firmware.BiosService.ChromeosFirmwareUpdate:output_type -> google.protobuf.Empty
	9,  // 28: tast.cros.firmware.BiosService.ParseFMAP:output_type -> tast.cros.firmware.FMAP
	20, // [20:29] is the sub-list for method output_type
	11, // [11:20] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_bios_service_proto_init() }
func file_bios_service_proto_init() {
	if File_bios_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bios_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GBBFlagsState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bios_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FWSectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bios_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirmwareUpdateModeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bios_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bios_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bios_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FMAP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bios_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FMAP_FMAPEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bios_service_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bios_service_proto_goTypes,
		DependencyIndexes: file_bios_service_proto_depIdxs,
		EnumInfos:         file_bios_service_proto_enumTypes,
		MessageInfos:      file_bios_service_proto_msgTypes,
	}.Build()
	File_bios_service_proto = out.File
	file_bios_service_proto_rawDesc = nil
	file_bios_service_proto_goTypes = nil
	file_bios_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BiosServiceClient is the client API for BiosService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BiosServiceClient interface {
	// GetGBBFlags gets the flags that are cleared and set.
	GetGBBFlags(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GBBFlagsState, error)
	// ClearAndSetGBBFlags modifies the specified flags, leaving the rest unchanged.
	ClearAndSetGBBFlags(ctx context.Context, in *GBBFlagsState, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SetAPSoftwareWriteProtect sets the software AP write protect.
	SetAPSoftwareWriteProtect(ctx context.Context, in *WPRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CorruptFWSection writes garbage bytes to the entire section specified.
	CorruptFWSection(ctx context.Context, in *FWSectionInfo, opts ...grpc.CallOption) (*FWSectionInfo, error)
	// BackupImageSection backs up the current fw region locally and returns its path.
	BackupImageSection(ctx context.Context, in *FWSectionInfo, opts ...grpc.CallOption) (*FWSectionInfo, error)
	// RestoreImageSection restores the fw region from path.
	RestoreImageSection(ctx context.Context, in *FWSectionInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WriteImageFromMultiSectionFile writes the provided multi section file in the specified section.
	WriteImageFromMultiSectionFile(ctx context.Context, in *FWSectionInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ChromeosFirmwareUpdate will perform the firmware update in the desired mode.
	ChromeosFirmwareUpdate(ctx context.Context, in *FirmwareUpdateModeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ParseFMAP reads and parses FMAP section for given programmer.
	ParseFMAP(ctx context.Context, in *FMAP, opts ...grpc.CallOption) (*FMAP, error)
}

type biosServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBiosServiceClient(cc grpc.ClientConnInterface) BiosServiceClient {
	return &biosServiceClient{cc}
}

func (c *biosServiceClient) GetGBBFlags(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GBBFlagsState, error) {
	out := new(GBBFlagsState)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.BiosService/GetGBBFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biosServiceClient) ClearAndSetGBBFlags(ctx context.Context, in *GBBFlagsState, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.BiosService/ClearAndSetGBBFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biosServiceClient) SetAPSoftwareWriteProtect(ctx context.Context, in *WPRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.BiosService/SetAPSoftwareWriteProtect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biosServiceClient) CorruptFWSection(ctx context.Context, in *FWSectionInfo, opts ...grpc.CallOption) (*FWSectionInfo, error) {
	out := new(FWSectionInfo)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.BiosService/CorruptFWSection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biosServiceClient) BackupImageSection(ctx context.Context, in *FWSectionInfo, opts ...grpc.CallOption) (*FWSectionInfo, error) {
	out := new(FWSectionInfo)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.BiosService/BackupImageSection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biosServiceClient) RestoreImageSection(ctx context.Context, in *FWSectionInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.BiosService/RestoreImageSection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biosServiceClient) WriteImageFromMultiSectionFile(ctx context.Context, in *FWSectionInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.BiosService/WriteImageFromMultiSectionFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biosServiceClient) ChromeosFirmwareUpdate(ctx context.Context, in *FirmwareUpdateModeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.BiosService/ChromeosFirmwareUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biosServiceClient) ParseFMAP(ctx context.Context, in *FMAP, opts ...grpc.CallOption) (*FMAP, error) {
	out := new(FMAP)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.BiosService/ParseFMAP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BiosServiceServer is the server API for BiosService service.
type BiosServiceServer interface {
	// GetGBBFlags gets the flags that are cleared and set.
	GetGBBFlags(context.Context, *emptypb.Empty) (*GBBFlagsState, error)
	// ClearAndSetGBBFlags modifies the specified flags, leaving the rest unchanged.
	ClearAndSetGBBFlags(context.Context, *GBBFlagsState) (*emptypb.Empty, error)
	// SetAPSoftwareWriteProtect sets the software AP write protect.
	SetAPSoftwareWriteProtect(context.Context, *WPRequest) (*emptypb.Empty, error)
	// CorruptFWSection writes garbage bytes to the entire section specified.
	CorruptFWSection(context.Context, *FWSectionInfo) (*FWSectionInfo, error)
	// BackupImageSection backs up the current fw region locally and returns its path.
	BackupImageSection(context.Context, *FWSectionInfo) (*FWSectionInfo, error)
	// RestoreImageSection restores the fw region from path.
	RestoreImageSection(context.Context, *FWSectionInfo) (*emptypb.Empty, error)
	// WriteImageFromMultiSectionFile writes the provided multi section file in the specified section.
	WriteImageFromMultiSectionFile(context.Context, *FWSectionInfo) (*emptypb.Empty, error)
	// ChromeosFirmwareUpdate will perform the firmware update in the desired mode.
	ChromeosFirmwareUpdate(context.Context, *FirmwareUpdateModeRequest) (*emptypb.Empty, error)
	// ParseFMAP reads and parses FMAP section for given programmer.
	ParseFMAP(context.Context, *FMAP) (*FMAP, error)
}

// UnimplementedBiosServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBiosServiceServer struct {
}

func (*UnimplementedBiosServiceServer) GetGBBFlags(context.Context, *emptypb.Empty) (*GBBFlagsState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGBBFlags not implemented")
}
func (*UnimplementedBiosServiceServer) ClearAndSetGBBFlags(context.Context, *GBBFlagsState) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearAndSetGBBFlags not implemented")
}
func (*UnimplementedBiosServiceServer) SetAPSoftwareWriteProtect(context.Context, *WPRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAPSoftwareWriteProtect not implemented")
}
func (*UnimplementedBiosServiceServer) CorruptFWSection(context.Context, *FWSectionInfo) (*FWSectionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CorruptFWSection not implemented")
}
func (*UnimplementedBiosServiceServer) BackupImageSection(context.Context, *FWSectionInfo) (*FWSectionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupImageSection not implemented")
}
func (*UnimplementedBiosServiceServer) RestoreImageSection(context.Context, *FWSectionInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreImageSection not implemented")
}
func (*UnimplementedBiosServiceServer) WriteImageFromMultiSectionFile(context.Context, *FWSectionInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteImageFromMultiSectionFile not implemented")
}
func (*UnimplementedBiosServiceServer) ChromeosFirmwareUpdate(context.Context, *FirmwareUpdateModeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChromeosFirmwareUpdate not implemented")
}
func (*UnimplementedBiosServiceServer) ParseFMAP(context.Context, *FMAP) (*FMAP, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseFMAP not implemented")
}

func RegisterBiosServiceServer(s *grpc.Server, srv BiosServiceServer) {
	s.RegisterService(&_BiosService_serviceDesc, srv)
}

func _BiosService_GetGBBFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiosServiceServer).GetGBBFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.BiosService/GetGBBFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiosServiceServer).GetGBBFlags(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiosService_ClearAndSetGBBFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GBBFlagsState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiosServiceServer).ClearAndSetGBBFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.BiosService/ClearAndSetGBBFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiosServiceServer).ClearAndSetGBBFlags(ctx, req.(*GBBFlagsState))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiosService_SetAPSoftwareWriteProtect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiosServiceServer).SetAPSoftwareWriteProtect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.BiosService/SetAPSoftwareWriteProtect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiosServiceServer).SetAPSoftwareWriteProtect(ctx, req.(*WPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiosService_CorruptFWSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FWSectionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiosServiceServer).CorruptFWSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.BiosService/CorruptFWSection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiosServiceServer).CorruptFWSection(ctx, req.(*FWSectionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiosService_BackupImageSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FWSectionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiosServiceServer).BackupImageSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.BiosService/BackupImageSection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiosServiceServer).BackupImageSection(ctx, req.(*FWSectionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiosService_RestoreImageSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FWSectionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiosServiceServer).RestoreImageSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.BiosService/RestoreImageSection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiosServiceServer).RestoreImageSection(ctx, req.(*FWSectionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiosService_WriteImageFromMultiSectionFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FWSectionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiosServiceServer).WriteImageFromMultiSectionFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.BiosService/WriteImageFromMultiSectionFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiosServiceServer).WriteImageFromMultiSectionFile(ctx, req.(*FWSectionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiosService_ChromeosFirmwareUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FirmwareUpdateModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiosServiceServer).ChromeosFirmwareUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.BiosService/ChromeosFirmwareUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiosServiceServer).ChromeosFirmwareUpdate(ctx, req.(*FirmwareUpdateModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiosService_ParseFMAP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FMAP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiosServiceServer).ParseFMAP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.BiosService/ParseFMAP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiosServiceServer).ParseFMAP(ctx, req.(*FMAP))
	}
	return interceptor(ctx, in, info, handler)
}

var _BiosService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.firmware.BiosService",
	HandlerType: (*BiosServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGBBFlags",
			Handler:    _BiosService_GetGBBFlags_Handler,
		},
		{
			MethodName: "ClearAndSetGBBFlags",
			Handler:    _BiosService_ClearAndSetGBBFlags_Handler,
		},
		{
			MethodName: "SetAPSoftwareWriteProtect",
			Handler:    _BiosService_SetAPSoftwareWriteProtect_Handler,
		},
		{
			MethodName: "CorruptFWSection",
			Handler:    _BiosService_CorruptFWSection_Handler,
		},
		{
			MethodName: "BackupImageSection",
			Handler:    _BiosService_BackupImageSection_Handler,
		},
		{
			MethodName: "RestoreImageSection",
			Handler:    _BiosService_RestoreImageSection_Handler,
		},
		{
			MethodName: "WriteImageFromMultiSectionFile",
			Handler:    _BiosService_WriteImageFromMultiSectionFile_Handler,
		},
		{
			MethodName: "ChromeosFirmwareUpdate",
			Handler:    _BiosService_ChromeosFirmwareUpdate_Handler,
		},
		{
			MethodName: "ParseFMAP",
			Handler:    _BiosService_ParseFMAP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bios_service.proto",
}
