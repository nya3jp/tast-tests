// Copyright 2022 The ChromiumOS Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: cgpt_service.proto

package firmware

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CgptKernel int32

const (
	CgptKernel_KERNEL_A CgptKernel = 0
	CgptKernel_KERNEL_B CgptKernel = 1
)

// Enum value maps for CgptKernel.
var (
	CgptKernel_name = map[int32]string{
		0: "KERNEL_A",
		1: "KERNEL_B",
	}
	CgptKernel_value = map[string]int32{
		"KERNEL_A": 0,
		"KERNEL_B": 1,
	}
)

func (x CgptKernel) Enum() *CgptKernel {
	p := new(CgptKernel)
	*p = x
	return p
}

func (x CgptKernel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CgptKernel) Descriptor() protoreflect.EnumDescriptor {
	return file_cgpt_service_proto_enumTypes[0].Descriptor()
}

func (CgptKernel) Type() protoreflect.EnumType {
	return &file_cgpt_service_proto_enumTypes[0]
}

func (x CgptKernel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CgptKernel.Descriptor instead.
func (CgptKernel) EnumDescriptor() ([]byte, []int) {
	return file_cgpt_service_proto_rawDescGZIP(), []int{0}
}

type CgptPartitionAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Value int32  `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *CgptPartitionAttribute) Reset() {
	*x = CgptPartitionAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgpt_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CgptPartitionAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CgptPartitionAttribute) ProtoMessage() {}

func (x *CgptPartitionAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_cgpt_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CgptPartitionAttribute.ProtoReflect.Descriptor instead.
func (*CgptPartitionAttribute) Descriptor() ([]byte, []int) {
	return file_cgpt_service_proto_rawDescGZIP(), []int{0}
}

func (x *CgptPartitionAttribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CgptPartitionAttribute) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type CgptPartition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionPath   string                    `protobuf:"bytes,1,opt,name=PartitionPath,proto3" json:"PartitionPath,omitempty"`
	PartitionNumber int32                     `protobuf:"varint,2,opt,name=PartitionNumber,proto3" json:"PartitionNumber,omitempty"`
	Start           int32                     `protobuf:"varint,3,opt,name=Start,proto3" json:"Start,omitempty"`
	Size            int32                     `protobuf:"varint,4,opt,name=Size,proto3" json:"Size,omitempty"`
	Label           string                    `protobuf:"bytes,5,opt,name=Label,proto3" json:"Label,omitempty"`
	Type            string                    `protobuf:"bytes,6,opt,name=Type,proto3" json:"Type,omitempty"`
	UUID            string                    `protobuf:"bytes,7,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Attrs           []*CgptPartitionAttribute `protobuf:"bytes,8,rep,name=Attrs,proto3" json:"Attrs,omitempty"`
}

func (x *CgptPartition) Reset() {
	*x = CgptPartition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgpt_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CgptPartition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CgptPartition) ProtoMessage() {}

func (x *CgptPartition) ProtoReflect() protoreflect.Message {
	mi := &file_cgpt_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CgptPartition.ProtoReflect.Descriptor instead.
func (*CgptPartition) Descriptor() ([]byte, []int) {
	return file_cgpt_service_proto_rawDescGZIP(), []int{1}
}

func (x *CgptPartition) GetPartitionPath() string {
	if x != nil {
		return x.PartitionPath
	}
	return ""
}

func (x *CgptPartition) GetPartitionNumber() int32 {
	if x != nil {
		return x.PartitionNumber
	}
	return 0
}

func (x *CgptPartition) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *CgptPartition) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CgptPartition) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *CgptPartition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CgptPartition) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *CgptPartition) GetAttrs() []*CgptPartitionAttribute {
	if x != nil {
		return x.Attrs
	}
	return nil
}

type GetCgptTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockDevice string `protobuf:"bytes,1,opt,name=BlockDevice,proto3" json:"BlockDevice,omitempty"`
}

func (x *GetCgptTableRequest) Reset() {
	*x = GetCgptTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgpt_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCgptTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCgptTableRequest) ProtoMessage() {}

func (x *GetCgptTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cgpt_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCgptTableRequest.ProtoReflect.Descriptor instead.
func (*GetCgptTableRequest) Descriptor() ([]byte, []int) {
	return file_cgpt_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetCgptTableRequest) GetBlockDevice() string {
	if x != nil {
		return x.BlockDevice
	}
	return ""
}

type GetCgptTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CgptTable []*CgptPartition `protobuf:"bytes,1,rep,name=CgptTable,proto3" json:"CgptTable,omitempty"`
}

func (x *GetCgptTableResponse) Reset() {
	*x = GetCgptTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgpt_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCgptTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCgptTableResponse) ProtoMessage() {}

func (x *GetCgptTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cgpt_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCgptTableResponse.ProtoReflect.Descriptor instead.
func (*GetCgptTableResponse) Descriptor() ([]byte, []int) {
	return file_cgpt_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetCgptTableResponse) GetCgptTable() []*CgptPartition {
	if x != nil {
		return x.CgptTable
	}
	return nil
}

// GetRawHeaderRequest specifies the partition to return its raw header
type GetRawHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionPath string `protobuf:"bytes,1,opt,name=PartitionPath,proto3" json:"PartitionPath,omitempty"`
}

func (x *GetRawHeaderRequest) Reset() {
	*x = GetRawHeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgpt_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRawHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawHeaderRequest) ProtoMessage() {}

func (x *GetRawHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cgpt_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawHeaderRequest.ProtoReflect.Descriptor instead.
func (*GetRawHeaderRequest) Descriptor() ([]byte, []int) {
	return file_cgpt_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetRawHeaderRequest) GetPartitionPath() string {
	if x != nil {
		return x.PartitionPath
	}
	return ""
}

// GetRawHeaderResponse provides the actual raw header of specified partition
type GetRawHeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawHeader []byte `protobuf:"bytes,1,opt,name=RawHeader,proto3" json:"RawHeader,omitempty"`
}

func (x *GetRawHeaderResponse) Reset() {
	*x = GetRawHeaderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgpt_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRawHeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawHeaderResponse) ProtoMessage() {}

func (x *GetRawHeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cgpt_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawHeaderResponse.ProtoReflect.Descriptor instead.
func (*GetRawHeaderResponse) Descriptor() ([]byte, []int) {
	return file_cgpt_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetRawHeaderResponse) GetRawHeader() []byte {
	if x != nil {
		return x.RawHeader
	}
	return nil
}

// WriteHeaderRequest provides the partition and raw header being written to it
type WriteRawHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionPath string `protobuf:"bytes,1,opt,name=PartitionPath,proto3" json:"PartitionPath,omitempty"`
	RawHeader     []byte `protobuf:"bytes,2,opt,name=RawHeader,proto3" json:"RawHeader,omitempty"`
}

func (x *WriteRawHeaderRequest) Reset() {
	*x = WriteRawHeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgpt_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteRawHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRawHeaderRequest) ProtoMessage() {}

func (x *WriteRawHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cgpt_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteRawHeaderRequest.ProtoReflect.Descriptor instead.
func (*WriteRawHeaderRequest) Descriptor() ([]byte, []int) {
	return file_cgpt_service_proto_rawDescGZIP(), []int{6}
}

func (x *WriteRawHeaderRequest) GetPartitionPath() string {
	if x != nil {
		return x.PartitionPath
	}
	return ""
}

func (x *WriteRawHeaderRequest) GetRawHeader() []byte {
	if x != nil {
		return x.RawHeader
	}
	return nil
}

type RestoreCgptAttributesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockDevice string           `protobuf:"bytes,1,opt,name=BlockDevice,proto3" json:"BlockDevice,omitempty"`
	CgptTable   []*CgptPartition `protobuf:"bytes,2,rep,name=CgptTable,proto3" json:"CgptTable,omitempty"`
}

func (x *RestoreCgptAttributesRequest) Reset() {
	*x = RestoreCgptAttributesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgpt_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreCgptAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreCgptAttributesRequest) ProtoMessage() {}

func (x *RestoreCgptAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cgpt_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreCgptAttributesRequest.ProtoReflect.Descriptor instead.
func (*RestoreCgptAttributesRequest) Descriptor() ([]byte, []int) {
	return file_cgpt_service_proto_rawDescGZIP(), []int{7}
}

func (x *RestoreCgptAttributesRequest) GetBlockDevice() string {
	if x != nil {
		return x.BlockDevice
	}
	return ""
}

func (x *RestoreCgptAttributesRequest) GetCgptTable() []*CgptPartition {
	if x != nil {
		return x.CgptTable
	}
	return nil
}

var File_cgpt_service_proto protoreflect.FileDescriptor

var file_cgpt_service_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x67, 0x70, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x42, 0x0a, 0x16, 0x43, 0x67, 0x70, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x89, 0x02, 0x0a, 0x0d, 0x43, 0x67,
	0x70, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x05, 0x41, 0x74, 0x74, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x43, 0x67, 0x70, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x05,
	0x41, 0x74, 0x74, 0x72, 0x73, 0x22, 0x37, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x67, 0x70, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x57,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x67, 0x70, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x43, 0x67, 0x70, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x43,
	0x67, 0x70, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x43, 0x67,
	0x70, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x3b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x77, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x22, 0x34, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x52, 0x61, 0x77, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x52, 0x61, 0x77, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x5b, 0x0a, 0x15, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x52, 0x61, 0x77, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x61, 0x77,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x52, 0x61,
	0x77, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x81, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x43, 0x67, 0x70, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x43, 0x67,
	0x70, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x43, 0x67, 0x70, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x43, 0x67, 0x70, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2a, 0x28, 0x0a, 0x0a, 0x43,
	0x67, 0x70, 0x74, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x45, 0x52,
	0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x45, 0x52, 0x4e, 0x45,
	0x4c, 0x5f, 0x42, 0x10, 0x01, 0x32, 0x93, 0x03, 0x0a, 0x0b, 0x43, 0x67, 0x70, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x67, 0x70, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f,
	0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x67,
	0x70, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x67, 0x70, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x52, 0x61, 0x77, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x74, 0x61, 0x73,
	0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x55, 0x0a, 0x0e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x61, 0x77, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x29, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x61, 0x77, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x43, 0x67, 0x70, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x30, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x67, 0x70, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x28, 0x5a, 0x26, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x66, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cgpt_service_proto_rawDescOnce sync.Once
	file_cgpt_service_proto_rawDescData = file_cgpt_service_proto_rawDesc
)

func file_cgpt_service_proto_rawDescGZIP() []byte {
	file_cgpt_service_proto_rawDescOnce.Do(func() {
		file_cgpt_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_cgpt_service_proto_rawDescData)
	})
	return file_cgpt_service_proto_rawDescData
}

var file_cgpt_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cgpt_service_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_cgpt_service_proto_goTypes = []interface{}{
	(CgptKernel)(0),                      // 0: tast.cros.firmware.CgptKernel
	(*CgptPartitionAttribute)(nil),       // 1: tast.cros.firmware.CgptPartitionAttribute
	(*CgptPartition)(nil),                // 2: tast.cros.firmware.CgptPartition
	(*GetCgptTableRequest)(nil),          // 3: tast.cros.firmware.GetCgptTableRequest
	(*GetCgptTableResponse)(nil),         // 4: tast.cros.firmware.GetCgptTableResponse
	(*GetRawHeaderRequest)(nil),          // 5: tast.cros.firmware.GetRawHeaderRequest
	(*GetRawHeaderResponse)(nil),         // 6: tast.cros.firmware.GetRawHeaderResponse
	(*WriteRawHeaderRequest)(nil),        // 7: tast.cros.firmware.WriteRawHeaderRequest
	(*RestoreCgptAttributesRequest)(nil), // 8: tast.cros.firmware.RestoreCgptAttributesRequest
	(*emptypb.Empty)(nil),                // 9: google.protobuf.Empty
}
var file_cgpt_service_proto_depIdxs = []int32{
	1, // 0: tast.cros.firmware.CgptPartition.Attrs:type_name -> tast.cros.firmware.CgptPartitionAttribute
	2, // 1: tast.cros.firmware.GetCgptTableResponse.CgptTable:type_name -> tast.cros.firmware.CgptPartition
	2, // 2: tast.cros.firmware.RestoreCgptAttributesRequest.CgptTable:type_name -> tast.cros.firmware.CgptPartition
	3, // 3: tast.cros.firmware.CgptService.GetCgptTable:input_type -> tast.cros.firmware.GetCgptTableRequest
	5, // 4: tast.cros.firmware.CgptService.GetRawHeader:input_type -> tast.cros.firmware.GetRawHeaderRequest
	7, // 5: tast.cros.firmware.CgptService.WriteRawHeader:input_type -> tast.cros.firmware.WriteRawHeaderRequest
	8, // 6: tast.cros.firmware.CgptService.RestoreCgptAttributes:input_type -> tast.cros.firmware.RestoreCgptAttributesRequest
	4, // 7: tast.cros.firmware.CgptService.GetCgptTable:output_type -> tast.cros.firmware.GetCgptTableResponse
	6, // 8: tast.cros.firmware.CgptService.GetRawHeader:output_type -> tast.cros.firmware.GetRawHeaderResponse
	9, // 9: tast.cros.firmware.CgptService.WriteRawHeader:output_type -> google.protobuf.Empty
	9, // 10: tast.cros.firmware.CgptService.RestoreCgptAttributes:output_type -> google.protobuf.Empty
	7, // [7:11] is the sub-list for method output_type
	3, // [3:7] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_cgpt_service_proto_init() }
func file_cgpt_service_proto_init() {
	if File_cgpt_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cgpt_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CgptPartitionAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgpt_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CgptPartition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgpt_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCgptTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgpt_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCgptTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgpt_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRawHeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgpt_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRawHeaderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgpt_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteRawHeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgpt_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreCgptAttributesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cgpt_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cgpt_service_proto_goTypes,
		DependencyIndexes: file_cgpt_service_proto_depIdxs,
		EnumInfos:         file_cgpt_service_proto_enumTypes,
		MessageInfos:      file_cgpt_service_proto_msgTypes,
	}.Build()
	File_cgpt_service_proto = out.File
	file_cgpt_service_proto_rawDesc = nil
	file_cgpt_service_proto_goTypes = nil
	file_cgpt_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CgptServiceClient is the client API for CgptService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CgptServiceClient interface {
	// GetCgptTable returns structure containing metadata with CGPT partitions
	GetCgptTable(ctx context.Context, in *GetCgptTableRequest, opts ...grpc.CallOption) (*GetCgptTableResponse, error)
	// GetRawHeader returns the raw header of CGPT partition (first 4096 bytes)
	GetRawHeader(ctx context.Context, in *GetRawHeaderRequest, opts ...grpc.CallOption) (*GetRawHeaderResponse, error)
	// WriteRawHeader writes the raw CGPT header into chosen partitionpartition
	WriteRawHeader(ctx context.Context, in *WriteRawHeaderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// RestoreCgptAttributes restores CGPT partition attributes directly dumped from GetCgptTable
	RestoreCgptAttributes(ctx context.Context, in *RestoreCgptAttributesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type cgptServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCgptServiceClient(cc grpc.ClientConnInterface) CgptServiceClient {
	return &cgptServiceClient{cc}
}

func (c *cgptServiceClient) GetCgptTable(ctx context.Context, in *GetCgptTableRequest, opts ...grpc.CallOption) (*GetCgptTableResponse, error) {
	out := new(GetCgptTableResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.CgptService/GetCgptTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cgptServiceClient) GetRawHeader(ctx context.Context, in *GetRawHeaderRequest, opts ...grpc.CallOption) (*GetRawHeaderResponse, error) {
	out := new(GetRawHeaderResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.CgptService/GetRawHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cgptServiceClient) WriteRawHeader(ctx context.Context, in *WriteRawHeaderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.CgptService/WriteRawHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cgptServiceClient) RestoreCgptAttributes(ctx context.Context, in *RestoreCgptAttributesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.CgptService/RestoreCgptAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CgptServiceServer is the server API for CgptService service.
type CgptServiceServer interface {
	// GetCgptTable returns structure containing metadata with CGPT partitions
	GetCgptTable(context.Context, *GetCgptTableRequest) (*GetCgptTableResponse, error)
	// GetRawHeader returns the raw header of CGPT partition (first 4096 bytes)
	GetRawHeader(context.Context, *GetRawHeaderRequest) (*GetRawHeaderResponse, error)
	// WriteRawHeader writes the raw CGPT header into chosen partitionpartition
	WriteRawHeader(context.Context, *WriteRawHeaderRequest) (*emptypb.Empty, error)
	// RestoreCgptAttributes restores CGPT partition attributes directly dumped from GetCgptTable
	RestoreCgptAttributes(context.Context, *RestoreCgptAttributesRequest) (*emptypb.Empty, error)
}

// UnimplementedCgptServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCgptServiceServer struct {
}

func (*UnimplementedCgptServiceServer) GetCgptTable(context.Context, *GetCgptTableRequest) (*GetCgptTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCgptTable not implemented")
}
func (*UnimplementedCgptServiceServer) GetRawHeader(context.Context, *GetRawHeaderRequest) (*GetRawHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawHeader not implemented")
}
func (*UnimplementedCgptServiceServer) WriteRawHeader(context.Context, *WriteRawHeaderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteRawHeader not implemented")
}
func (*UnimplementedCgptServiceServer) RestoreCgptAttributes(context.Context, *RestoreCgptAttributesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreCgptAttributes not implemented")
}

func RegisterCgptServiceServer(s *grpc.Server, srv CgptServiceServer) {
	s.RegisterService(&_CgptService_serviceDesc, srv)
}

func _CgptService_GetCgptTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCgptTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CgptServiceServer).GetCgptTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.CgptService/GetCgptTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CgptServiceServer).GetCgptTable(ctx, req.(*GetCgptTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CgptService_GetRawHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRawHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CgptServiceServer).GetRawHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.CgptService/GetRawHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CgptServiceServer).GetRawHeader(ctx, req.(*GetRawHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CgptService_WriteRawHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRawHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CgptServiceServer).WriteRawHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.CgptService/WriteRawHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CgptServiceServer).WriteRawHeader(ctx, req.(*WriteRawHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CgptService_RestoreCgptAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreCgptAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CgptServiceServer).RestoreCgptAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.CgptService/RestoreCgptAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CgptServiceServer).RestoreCgptAttributes(ctx, req.(*RestoreCgptAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CgptService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.firmware.CgptService",
	HandlerType: (*CgptServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCgptTable",
			Handler:    _CgptService_GetCgptTable_Handler,
		},
		{
			MethodName: "GetRawHeader",
			Handler:    _CgptService_GetRawHeader_Handler,
		},
		{
			MethodName: "WriteRawHeader",
			Handler:    _CgptService_WriteRawHeader_Handler,
		},
		{
			MethodName: "RestoreCgptAttributes",
			Handler:    _CgptService_RestoreCgptAttributes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cgpt_service.proto",
}
