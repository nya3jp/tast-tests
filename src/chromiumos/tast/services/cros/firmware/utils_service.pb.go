// Copyright 2019 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: utils_service.proto

package firmware

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ReadServoKeyboardRequest listens the servo's keyboard emulator for a specified duration in seconds.
type ReadServoKeyboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration uint32 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *ReadServoKeyboardRequest) Reset() {
	*x = ReadServoKeyboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utils_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadServoKeyboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadServoKeyboardRequest) ProtoMessage() {}

func (x *ReadServoKeyboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_utils_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadServoKeyboardRequest.ProtoReflect.Descriptor instead.
func (*ReadServoKeyboardRequest) Descriptor() ([]byte, []int) {
	return file_utils_service_proto_rawDescGZIP(), []int{0}
}

func (x *ReadServoKeyboardRequest) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// ReadServoKeyboardResponse provides what keys were pressed.
type ReadServoKeyboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *ReadServoKeyboardResponse) Reset() {
	*x = ReadServoKeyboardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utils_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadServoKeyboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadServoKeyboardResponse) ProtoMessage() {}

func (x *ReadServoKeyboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_utils_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadServoKeyboardResponse.ProtoReflect.Descriptor instead.
func (*ReadServoKeyboardResponse) Descriptor() ([]byte, []int) {
	return file_utils_service_proto_rawDescGZIP(), []int{1}
}

func (x *ReadServoKeyboardResponse) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

// FindPhysicalKeyboardResponse provides the path to /dev/input/event* for physical keyboard.
type FindPhysicalKeyboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *FindPhysicalKeyboardResponse) Reset() {
	*x = FindPhysicalKeyboardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utils_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPhysicalKeyboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPhysicalKeyboardResponse) ProtoMessage() {}

func (x *FindPhysicalKeyboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_utils_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPhysicalKeyboardResponse.ProtoReflect.Descriptor instead.
func (*FindPhysicalKeyboardResponse) Descriptor() ([]byte, []int) {
	return file_utils_service_proto_rawDescGZIP(), []int{2}
}

func (x *FindPhysicalKeyboardResponse) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// EvalTabletModeResponse provides the tablet mode enabled status.
type EvalTabletModeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabletModeEnabled bool `protobuf:"varint,1,opt,name=tablet_mode_enabled,json=tabletModeEnabled,proto3" json:"tablet_mode_enabled,omitempty"`
}

func (x *EvalTabletModeResponse) Reset() {
	*x = EvalTabletModeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utils_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvalTabletModeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvalTabletModeResponse) ProtoMessage() {}

func (x *EvalTabletModeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_utils_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvalTabletModeResponse.ProtoReflect.Descriptor instead.
func (*EvalTabletModeResponse) Descriptor() ([]byte, []int) {
	return file_utils_service_proto_rawDescGZIP(), []int{3}
}

func (x *EvalTabletModeResponse) GetTabletModeEnabled() bool {
	if x != nil {
		return x.TabletModeEnabled
	}
	return false
}

// NodeElement stores the element of UI node.
type NodeElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *NodeElement) Reset() {
	*x = NodeElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utils_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeElement) ProtoMessage() {}

func (x *NodeElement) ProtoReflect() protoreflect.Message {
	mi := &file_utils_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeElement.ProtoReflect.Descriptor instead.
func (*NodeElement) Descriptor() ([]byte, []int) {
	return file_utils_service_proto_rawDescGZIP(), []int{4}
}

func (x *NodeElement) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// CrosConfigResponse provides relevant crosconfig values.
type CrosConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *CrosConfigResponse) Reset() {
	*x = CrosConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utils_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrosConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrosConfigResponse) ProtoMessage() {}

func (x *CrosConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_utils_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrosConfigResponse.ProtoReflect.Descriptor instead.
func (*CrosConfigResponse) Descriptor() ([]byte, []int) {
	return file_utils_service_proto_rawDescGZIP(), []int{5}
}

func (x *CrosConfigResponse) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// SpeedometerResponse provides the result from running a speedometer test.
type SpeedometerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SpeedometerResponse) Reset() {
	*x = SpeedometerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utils_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedometerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedometerResponse) ProtoMessage() {}

func (x *SpeedometerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_utils_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedometerResponse.ProtoReflect.Descriptor instead.
func (*SpeedometerResponse) Descriptor() ([]byte, []int) {
	return file_utils_service_proto_rawDescGZIP(), []int{6}
}

func (x *SpeedometerResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

var File_utils_service_proto protoreflect.FileDescriptor

var file_utils_service_proto_rawDesc = []byte{
	0x0a, 0x13, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x36, 0x0a, 0x18, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x6f, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2f,
	0x0a, 0x19, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x6f, 0x4b, 0x65, 0x79, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22,
	0x32, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4b,
	0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x22, 0x48, 0x0a, 0x16, 0x45, 0x76, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x21, 0x0a,
	0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x2c, 0x0a, 0x12, 0x43, 0x72, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x2d,
	0x0a, 0x13, 0x53, 0x70, 0x65, 0x65, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xc7, 0x06,
	0x0a, 0x0c, 0x55, 0x74, 0x69, 0x6c, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40,
	0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x72, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x6f, 0x4b, 0x65, 0x79,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x2c, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f,
	0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x6f, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x6f, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x30, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x09, 0x4e, 0x65, 0x77, 0x43,
	0x68, 0x72, 0x6f, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x52, 0x65, 0x75, 0x73,
	0x65, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0e, 0x45, 0x76, 0x61,
	0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x2a, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4b, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x1f, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5a,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x26, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x16, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x70, 0x65, 0x65, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x54, 0x65, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x27, 0x2e, 0x74,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x28, 0x5a, 0x26, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_utils_service_proto_rawDescOnce sync.Once
	file_utils_service_proto_rawDescData = file_utils_service_proto_rawDesc
)

func file_utils_service_proto_rawDescGZIP() []byte {
	file_utils_service_proto_rawDescOnce.Do(func() {
		file_utils_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_utils_service_proto_rawDescData)
	})
	return file_utils_service_proto_rawDescData
}

var file_utils_service_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_utils_service_proto_goTypes = []interface{}{
	(*ReadServoKeyboardRequest)(nil),     // 0: tast.cros.firmware.ReadServoKeyboardRequest
	(*ReadServoKeyboardResponse)(nil),    // 1: tast.cros.firmware.ReadServoKeyboardResponse
	(*FindPhysicalKeyboardResponse)(nil), // 2: tast.cros.firmware.FindPhysicalKeyboardResponse
	(*EvalTabletModeResponse)(nil),       // 3: tast.cros.firmware.EvalTabletModeResponse
	(*NodeElement)(nil),                  // 4: tast.cros.firmware.NodeElement
	(*CrosConfigResponse)(nil),           // 5: tast.cros.firmware.CrosConfigResponse
	(*SpeedometerResponse)(nil),          // 6: tast.cros.firmware.SpeedometerResponse
	(*empty.Empty)(nil),                  // 7: google.protobuf.Empty
}
var file_utils_service_proto_depIdxs = []int32{
	7,  // 0: tast.cros.firmware.UtilsService.BlockingSync:input_type -> google.protobuf.Empty
	0,  // 1: tast.cros.firmware.UtilsService.ReadServoKeyboard:input_type -> tast.cros.firmware.ReadServoKeyboardRequest
	7,  // 2: tast.cros.firmware.UtilsService.FindPhysicalKeyboard:input_type -> google.protobuf.Empty
	7,  // 3: tast.cros.firmware.UtilsService.NewChrome:input_type -> google.protobuf.Empty
	7,  // 4: tast.cros.firmware.UtilsService.CloseChrome:input_type -> google.protobuf.Empty
	7,  // 5: tast.cros.firmware.UtilsService.ReuseChrome:input_type -> google.protobuf.Empty
	7,  // 6: tast.cros.firmware.UtilsService.EvalTabletMode:input_type -> google.protobuf.Empty
	4,  // 7: tast.cros.firmware.UtilsService.FindSingleNode:input_type -> tast.cros.firmware.NodeElement
	7,  // 8: tast.cros.firmware.UtilsService.GetDetachableBaseValue:input_type -> google.protobuf.Empty
	7,  // 9: tast.cros.firmware.UtilsService.PerformSpeedometerTest:input_type -> google.protobuf.Empty
	7,  // 10: tast.cros.firmware.UtilsService.BlockingSync:output_type -> google.protobuf.Empty
	1,  // 11: tast.cros.firmware.UtilsService.ReadServoKeyboard:output_type -> tast.cros.firmware.ReadServoKeyboardResponse
	2,  // 12: tast.cros.firmware.UtilsService.FindPhysicalKeyboard:output_type -> tast.cros.firmware.FindPhysicalKeyboardResponse
	7,  // 13: tast.cros.firmware.UtilsService.NewChrome:output_type -> google.protobuf.Empty
	7,  // 14: tast.cros.firmware.UtilsService.CloseChrome:output_type -> google.protobuf.Empty
	7,  // 15: tast.cros.firmware.UtilsService.ReuseChrome:output_type -> google.protobuf.Empty
	3,  // 16: tast.cros.firmware.UtilsService.EvalTabletMode:output_type -> tast.cros.firmware.EvalTabletModeResponse
	7,  // 17: tast.cros.firmware.UtilsService.FindSingleNode:output_type -> google.protobuf.Empty
	5,  // 18: tast.cros.firmware.UtilsService.GetDetachableBaseValue:output_type -> tast.cros.firmware.CrosConfigResponse
	6,  // 19: tast.cros.firmware.UtilsService.PerformSpeedometerTest:output_type -> tast.cros.firmware.SpeedometerResponse
	10, // [10:20] is the sub-list for method output_type
	0,  // [0:10] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_utils_service_proto_init() }
func file_utils_service_proto_init() {
	if File_utils_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_utils_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadServoKeyboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utils_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadServoKeyboardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utils_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindPhysicalKeyboardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utils_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvalTabletModeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utils_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utils_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrosConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utils_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedometerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_utils_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_utils_service_proto_goTypes,
		DependencyIndexes: file_utils_service_proto_depIdxs,
		MessageInfos:      file_utils_service_proto_msgTypes,
	}.Build()
	File_utils_service_proto = out.File
	file_utils_service_proto_rawDesc = nil
	file_utils_service_proto_goTypes = nil
	file_utils_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UtilsServiceClient is the client API for UtilsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UtilsServiceClient interface {
	// BlockingSync syncs the root device and internal device.
	BlockingSync(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// ReadServoKeyboard reads from the servo's keyboard emulator and decodes the key presses.
	ReadServoKeyboard(ctx context.Context, in *ReadServoKeyboardRequest, opts ...grpc.CallOption) (*ReadServoKeyboardResponse, error)
	// FindPhysicalKeyboard finds /dev/input/event* file for physical a keyboard.
	FindPhysicalKeyboard(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FindPhysicalKeyboardResponse, error)
	// NewChrome creates a new instance of Chrome
	NewChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// CloseChrome closes an existing instance of Chrome
	CloseChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// ReuseChrome passes an Option to New to make Chrome reuse an exisiting Chrome session.
	ReuseChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// EvalTabletMode evaluates if DUT is in tablet mode.
	EvalTabletMode(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*EvalTabletModeResponse, error)
	// FindSingleNode finds the specific UI node based on the passed in element.
	FindSingleNode(ctx context.Context, in *NodeElement, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetDetachableBaseValue retrieves the values of relevant detachable-base properties.
	GetDetachableBaseValue(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CrosConfigResponse, error)
	// PerformSpeedometerTest opens a speedometer test website, runs it and returns the result value.
	PerformSpeedometerTest(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SpeedometerResponse, error)
}

type utilsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUtilsServiceClient(cc grpc.ClientConnInterface) UtilsServiceClient {
	return &utilsServiceClient{cc}
}

func (c *utilsServiceClient) BlockingSync(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.UtilsService/BlockingSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilsServiceClient) ReadServoKeyboard(ctx context.Context, in *ReadServoKeyboardRequest, opts ...grpc.CallOption) (*ReadServoKeyboardResponse, error) {
	out := new(ReadServoKeyboardResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.UtilsService/ReadServoKeyboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilsServiceClient) FindPhysicalKeyboard(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FindPhysicalKeyboardResponse, error) {
	out := new(FindPhysicalKeyboardResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.UtilsService/FindPhysicalKeyboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilsServiceClient) NewChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.UtilsService/NewChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilsServiceClient) CloseChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.UtilsService/CloseChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilsServiceClient) ReuseChrome(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.UtilsService/ReuseChrome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilsServiceClient) EvalTabletMode(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*EvalTabletModeResponse, error) {
	out := new(EvalTabletModeResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.UtilsService/EvalTabletMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilsServiceClient) FindSingleNode(ctx context.Context, in *NodeElement, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.UtilsService/FindSingleNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilsServiceClient) GetDetachableBaseValue(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CrosConfigResponse, error) {
	out := new(CrosConfigResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.UtilsService/GetDetachableBaseValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilsServiceClient) PerformSpeedometerTest(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SpeedometerResponse, error) {
	out := new(SpeedometerResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.UtilsService/PerformSpeedometerTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UtilsServiceServer is the server API for UtilsService service.
type UtilsServiceServer interface {
	// BlockingSync syncs the root device and internal device.
	BlockingSync(context.Context, *empty.Empty) (*empty.Empty, error)
	// ReadServoKeyboard reads from the servo's keyboard emulator and decodes the key presses.
	ReadServoKeyboard(context.Context, *ReadServoKeyboardRequest) (*ReadServoKeyboardResponse, error)
	// FindPhysicalKeyboard finds /dev/input/event* file for physical a keyboard.
	FindPhysicalKeyboard(context.Context, *empty.Empty) (*FindPhysicalKeyboardResponse, error)
	// NewChrome creates a new instance of Chrome
	NewChrome(context.Context, *empty.Empty) (*empty.Empty, error)
	// CloseChrome closes an existing instance of Chrome
	CloseChrome(context.Context, *empty.Empty) (*empty.Empty, error)
	// ReuseChrome passes an Option to New to make Chrome reuse an exisiting Chrome session.
	ReuseChrome(context.Context, *empty.Empty) (*empty.Empty, error)
	// EvalTabletMode evaluates if DUT is in tablet mode.
	EvalTabletMode(context.Context, *empty.Empty) (*EvalTabletModeResponse, error)
	// FindSingleNode finds the specific UI node based on the passed in element.
	FindSingleNode(context.Context, *NodeElement) (*empty.Empty, error)
	// GetDetachableBaseValue retrieves the values of relevant detachable-base properties.
	GetDetachableBaseValue(context.Context, *empty.Empty) (*CrosConfigResponse, error)
	// PerformSpeedometerTest opens a speedometer test website, runs it and returns the result value.
	PerformSpeedometerTest(context.Context, *empty.Empty) (*SpeedometerResponse, error)
}

// UnimplementedUtilsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUtilsServiceServer struct {
}

func (*UnimplementedUtilsServiceServer) BlockingSync(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockingSync not implemented")
}
func (*UnimplementedUtilsServiceServer) ReadServoKeyboard(context.Context, *ReadServoKeyboardRequest) (*ReadServoKeyboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadServoKeyboard not implemented")
}
func (*UnimplementedUtilsServiceServer) FindPhysicalKeyboard(context.Context, *empty.Empty) (*FindPhysicalKeyboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPhysicalKeyboard not implemented")
}
func (*UnimplementedUtilsServiceServer) NewChrome(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewChrome not implemented")
}
func (*UnimplementedUtilsServiceServer) CloseChrome(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseChrome not implemented")
}
func (*UnimplementedUtilsServiceServer) ReuseChrome(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReuseChrome not implemented")
}
func (*UnimplementedUtilsServiceServer) EvalTabletMode(context.Context, *empty.Empty) (*EvalTabletModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvalTabletMode not implemented")
}
func (*UnimplementedUtilsServiceServer) FindSingleNode(context.Context, *NodeElement) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSingleNode not implemented")
}
func (*UnimplementedUtilsServiceServer) GetDetachableBaseValue(context.Context, *empty.Empty) (*CrosConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetachableBaseValue not implemented")
}
func (*UnimplementedUtilsServiceServer) PerformSpeedometerTest(context.Context, *empty.Empty) (*SpeedometerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformSpeedometerTest not implemented")
}

func RegisterUtilsServiceServer(s *grpc.Server, srv UtilsServiceServer) {
	s.RegisterService(&_UtilsService_serviceDesc, srv)
}

func _UtilsService_BlockingSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServiceServer).BlockingSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.UtilsService/BlockingSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServiceServer).BlockingSync(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilsService_ReadServoKeyboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadServoKeyboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServiceServer).ReadServoKeyboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.UtilsService/ReadServoKeyboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServiceServer).ReadServoKeyboard(ctx, req.(*ReadServoKeyboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilsService_FindPhysicalKeyboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServiceServer).FindPhysicalKeyboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.UtilsService/FindPhysicalKeyboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServiceServer).FindPhysicalKeyboard(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilsService_NewChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServiceServer).NewChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.UtilsService/NewChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServiceServer).NewChrome(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilsService_CloseChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServiceServer).CloseChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.UtilsService/CloseChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServiceServer).CloseChrome(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilsService_ReuseChrome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServiceServer).ReuseChrome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.UtilsService/ReuseChrome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServiceServer).ReuseChrome(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilsService_EvalTabletMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServiceServer).EvalTabletMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.UtilsService/EvalTabletMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServiceServer).EvalTabletMode(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilsService_FindSingleNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeElement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServiceServer).FindSingleNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.UtilsService/FindSingleNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServiceServer).FindSingleNode(ctx, req.(*NodeElement))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilsService_GetDetachableBaseValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServiceServer).GetDetachableBaseValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.UtilsService/GetDetachableBaseValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServiceServer).GetDetachableBaseValue(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilsService_PerformSpeedometerTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServiceServer).PerformSpeedometerTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.UtilsService/PerformSpeedometerTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServiceServer).PerformSpeedometerTest(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _UtilsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.firmware.UtilsService",
	HandlerType: (*UtilsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BlockingSync",
			Handler:    _UtilsService_BlockingSync_Handler,
		},
		{
			MethodName: "ReadServoKeyboard",
			Handler:    _UtilsService_ReadServoKeyboard_Handler,
		},
		{
			MethodName: "FindPhysicalKeyboard",
			Handler:    _UtilsService_FindPhysicalKeyboard_Handler,
		},
		{
			MethodName: "NewChrome",
			Handler:    _UtilsService_NewChrome_Handler,
		},
		{
			MethodName: "CloseChrome",
			Handler:    _UtilsService_CloseChrome_Handler,
		},
		{
			MethodName: "ReuseChrome",
			Handler:    _UtilsService_ReuseChrome_Handler,
		},
		{
			MethodName: "EvalTabletMode",
			Handler:    _UtilsService_EvalTabletMode_Handler,
		},
		{
			MethodName: "FindSingleNode",
			Handler:    _UtilsService_FindSingleNode_Handler,
		},
		{
			MethodName: "GetDetachableBaseValue",
			Handler:    _UtilsService_GetDetachableBaseValue_Handler,
		},
		{
			MethodName: "PerformSpeedometerTest",
			Handler:    _UtilsService_PerformSpeedometerTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "utils_service.proto",
}
