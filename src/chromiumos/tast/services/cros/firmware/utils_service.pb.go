// Code generated by protoc-gen-go. DO NOT EDIT.
// source: utils_service.proto

/*
Package firmware is a generated protocol buffer package.

It is generated from these files:
	utils_service.proto

It has these top-level messages:
	CheckBootModeRequest
	CheckBootModeResponse
*/
package firmware

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BootMode int32

const (
	BootMode_BOOT_MODE_UNSPECIFIED BootMode = 0
	BootMode_BOOT_MODE_NORMAL      BootMode = 1
	BootMode_BOOT_MODE_DEV         BootMode = 2
	BootMode_BOOT_MODE_RECOVERY    BootMode = 3
)

var BootMode_name = map[int32]string{
	0: "BOOT_MODE_UNSPECIFIED",
	1: "BOOT_MODE_NORMAL",
	2: "BOOT_MODE_DEV",
	3: "BOOT_MODE_RECOVERY",
}
var BootMode_value = map[string]int32{
	"BOOT_MODE_UNSPECIFIED": 0,
	"BOOT_MODE_NORMAL":      1,
	"BOOT_MODE_DEV":         2,
	"BOOT_MODE_RECOVERY":    3,
}

func (x BootMode) String() string {
	return proto.EnumName(BootMode_name, int32(x))
}
func (BootMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CheckBootModeRequest struct {
	BootMode BootMode `protobuf:"varint,1,opt,name=boot_mode,json=bootMode,enum=tast.cros.firmware.BootMode" json:"boot_mode,omitempty"`
}

func (m *CheckBootModeRequest) Reset()                    { *m = CheckBootModeRequest{} }
func (m *CheckBootModeRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckBootModeRequest) ProtoMessage()               {}
func (*CheckBootModeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CheckBootModeRequest) GetBootMode() BootMode {
	if m != nil {
		return m.BootMode
	}
	return BootMode_BOOT_MODE_UNSPECIFIED
}

type CheckBootModeResponse struct {
	Verified bool `protobuf:"varint,1,opt,name=verified" json:"verified,omitempty"`
}

func (m *CheckBootModeResponse) Reset()                    { *m = CheckBootModeResponse{} }
func (m *CheckBootModeResponse) String() string            { return proto.CompactTextString(m) }
func (*CheckBootModeResponse) ProtoMessage()               {}
func (*CheckBootModeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CheckBootModeResponse) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func init() {
	proto.RegisterType((*CheckBootModeRequest)(nil), "tast.cros.firmware.CheckBootModeRequest")
	proto.RegisterType((*CheckBootModeResponse)(nil), "tast.cros.firmware.CheckBootModeResponse")
	proto.RegisterEnum("tast.cros.firmware.BootMode", BootMode_name, BootMode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UtilsService service

type UtilsServiceClient interface {
	// CheckBootMode verifies whether the DUT is in a certain boot mode.
	CheckBootMode(ctx context.Context, in *CheckBootModeRequest, opts ...grpc.CallOption) (*CheckBootModeResponse, error)
}

type utilsServiceClient struct {
	cc *grpc.ClientConn
}

func NewUtilsServiceClient(cc *grpc.ClientConn) UtilsServiceClient {
	return &utilsServiceClient{cc}
}

func (c *utilsServiceClient) CheckBootMode(ctx context.Context, in *CheckBootModeRequest, opts ...grpc.CallOption) (*CheckBootModeResponse, error) {
	out := new(CheckBootModeResponse)
	err := grpc.Invoke(ctx, "/tast.cros.firmware.UtilsService/CheckBootMode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UtilsService service

type UtilsServiceServer interface {
	// CheckBootMode verifies whether the DUT is in a certain boot mode.
	CheckBootMode(context.Context, *CheckBootModeRequest) (*CheckBootModeResponse, error)
}

func RegisterUtilsServiceServer(s *grpc.Server, srv UtilsServiceServer) {
	s.RegisterService(&_UtilsService_serviceDesc, srv)
}

func _UtilsService_CheckBootMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckBootModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServiceServer).CheckBootMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.UtilsService/CheckBootMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServiceServer).CheckBootMode(ctx, req.(*CheckBootModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UtilsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.firmware.UtilsService",
	HandlerType: (*UtilsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckBootMode",
			Handler:    _UtilsService_CheckBootMode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "utils_service.proto",
}

func init() { proto.RegisterFile("utils_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x4f, 0x4f, 0xab, 0x40,
	0x14, 0xc5, 0xcb, 0x7b, 0x89, 0xc1, 0x1b, 0x6b, 0x70, 0x6c, 0x8d, 0x36, 0x2e, 0x0c, 0x0b, 0x83,
	0x2e, 0x20, 0x69, 0x57, 0x2e, 0x05, 0xc6, 0xa4, 0x89, 0x14, 0xa5, 0xb6, 0x89, 0x6e, 0x48, 0x81,
	0x21, 0x9d, 0x28, 0xde, 0x3a, 0x33, 0xe0, 0xd7, 0x37, 0xf4, 0x1f, 0x51, 0xbb, 0x70, 0x37, 0x73,
	0xe7, 0x9e, 0x5f, 0xe6, 0x9c, 0x03, 0xc7, 0xa5, 0xe2, 0x6f, 0x32, 0x96, 0x4c, 0x54, 0x3c, 0x65,
	0xf6, 0x42, 0xa0, 0x42, 0x42, 0xd4, 0x4c, 0x2a, 0x3b, 0x15, 0x28, 0xed, 0x9c, 0x8b, 0xe2, 0x73,
	0x26, 0x98, 0xf9, 0x08, 0x1d, 0x6f, 0xce, 0xd2, 0x57, 0x17, 0x51, 0x05, 0x98, 0xb1, 0x88, 0x7d,
	0x94, 0x4c, 0x2a, 0x72, 0x03, 0xfb, 0x09, 0xa2, 0x8a, 0x0b, 0xcc, 0xd8, 0xa9, 0x76, 0xa1, 0x59,
	0x87, 0xfd, 0x73, 0xfb, 0xb7, 0xde, 0xde, 0xea, 0xf4, 0x64, 0x7d, 0x32, 0x07, 0xd0, 0xfd, 0x81,
	0x94, 0x0b, 0x7c, 0x97, 0x8c, 0xf4, 0x40, 0xaf, 0x98, 0xe0, 0x39, 0x67, 0xd9, 0x12, 0xa9, 0x47,
	0xdb, 0xfb, 0x75, 0x0e, 0xfa, 0x66, 0x9f, 0x9c, 0x41, 0xd7, 0x0d, 0xc3, 0xa7, 0x38, 0x08, 0x7d,
	0x1a, 0x4f, 0x46, 0xe3, 0x07, 0xea, 0x0d, 0xef, 0x86, 0xd4, 0x37, 0x5a, 0xa4, 0x03, 0x46, 0xf3,
	0x34, 0x0a, 0xa3, 0xe0, 0xf6, 0xde, 0xd0, 0xc8, 0x11, 0xb4, 0x9b, 0xa9, 0x4f, 0xa7, 0xc6, 0x3f,
	0x72, 0x02, 0xa4, 0x19, 0x45, 0xd4, 0x0b, 0xa7, 0x34, 0x7a, 0x36, 0xfe, 0xf7, 0x2b, 0x38, 0x98,
	0xd4, 0xd1, 0x8c, 0x57, 0xc9, 0x90, 0x1c, 0xda, 0xdf, 0x3e, 0x4b, 0xac, 0x5d, 0x2e, 0x77, 0x45,
	0xd4, 0xbb, 0xfa, 0xc3, 0xe6, 0xca, 0xb9, 0xd9, 0x72, 0xad, 0x97, 0xcb, 0x74, 0x2e, 0xb0, 0xe0,
	0x65, 0x81, 0xd2, 0xa9, 0x85, 0xce, 0xba, 0x1c, 0xe9, 0xd4, 0x04, 0x67, 0x43, 0x48, 0xf6, 0x96,
	0x65, 0x0d, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x14, 0x48, 0x75, 0xc3, 0x01, 0x00, 0x00,
}
