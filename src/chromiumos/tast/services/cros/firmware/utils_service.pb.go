// Code generated by protoc-gen-go. DO NOT EDIT.
// source: utils_service.proto

package firmware

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// BootMode contains values for the three possible modes of a powered-on DUT.
type BootMode int32

const (
	BootMode_BOOT_MODE_UNSPECIFIED BootMode = 0
	BootMode_BOOT_MODE_NORMAL      BootMode = 1
	BootMode_BOOT_MODE_DEV         BootMode = 2
	BootMode_BOOT_MODE_RECOVERY    BootMode = 3
)

var BootMode_name = map[int32]string{
	0: "BOOT_MODE_UNSPECIFIED",
	1: "BOOT_MODE_NORMAL",
	2: "BOOT_MODE_DEV",
	3: "BOOT_MODE_RECOVERY",
}

var BootMode_value = map[string]int32{
	"BOOT_MODE_UNSPECIFIED": 0,
	"BOOT_MODE_NORMAL":      1,
	"BOOT_MODE_DEV":         2,
	"BOOT_MODE_RECOVERY":    3,
}

func (x BootMode) String() string {
	return proto.EnumName(BootMode_name, int32(x))
}

func (BootMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_187881f7b6ec64e6, []int{0}
}

type CurrentBootModeResponse struct {
	BootMode             BootMode `protobuf:"varint,1,opt,name=boot_mode,json=bootMode,proto3,enum=tast.cros.firmware.BootMode" json:"boot_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CurrentBootModeResponse) Reset()         { *m = CurrentBootModeResponse{} }
func (m *CurrentBootModeResponse) String() string { return proto.CompactTextString(m) }
func (*CurrentBootModeResponse) ProtoMessage()    {}
func (*CurrentBootModeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_187881f7b6ec64e6, []int{0}
}

func (m *CurrentBootModeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CurrentBootModeResponse.Unmarshal(m, b)
}
func (m *CurrentBootModeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CurrentBootModeResponse.Marshal(b, m, deterministic)
}
func (m *CurrentBootModeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentBootModeResponse.Merge(m, src)
}
func (m *CurrentBootModeResponse) XXX_Size() int {
	return xxx_messageInfo_CurrentBootModeResponse.Size(m)
}
func (m *CurrentBootModeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentBootModeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentBootModeResponse proto.InternalMessageInfo

func (m *CurrentBootModeResponse) GetBootMode() BootMode {
	if m != nil {
		return m.BootMode
	}
	return BootMode_BOOT_MODE_UNSPECIFIED
}

type ReadServoKeyboardResponse struct {
	Keys                 []byte   `protobuf:"bytes,1,opt,name=keys,proto3" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadServoKeyboardResponse) Reset()         { *m = ReadServoKeyboardResponse{} }
func (m *ReadServoKeyboardResponse) String() string { return proto.CompactTextString(m) }
func (*ReadServoKeyboardResponse) ProtoMessage()    {}
func (*ReadServoKeyboardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_187881f7b6ec64e6, []int{1}
}

func (m *ReadServoKeyboardResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadServoKeyboardResponse.Unmarshal(m, b)
}
func (m *ReadServoKeyboardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadServoKeyboardResponse.Marshal(b, m, deterministic)
}
func (m *ReadServoKeyboardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadServoKeyboardResponse.Merge(m, src)
}
func (m *ReadServoKeyboardResponse) XXX_Size() int {
	return xxx_messageInfo_ReadServoKeyboardResponse.Size(m)
}
func (m *ReadServoKeyboardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadServoKeyboardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReadServoKeyboardResponse proto.InternalMessageInfo

func (m *ReadServoKeyboardResponse) GetKeys() []byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

func init() {
	proto.RegisterEnum("tast.cros.firmware.BootMode", BootMode_name, BootMode_value)
	proto.RegisterType((*CurrentBootModeResponse)(nil), "tast.cros.firmware.CurrentBootModeResponse")
	proto.RegisterType((*ReadServoKeyboardResponse)(nil), "tast.cros.firmware.ReadServoKeyboardResponse")
}

func init() { proto.RegisterFile("utils_service.proto", fileDescriptor_187881f7b6ec64e6) }

var fileDescriptor_187881f7b6ec64e6 = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xdf, 0x4f, 0xea, 0x30,
	0x14, 0xc7, 0x07, 0xf7, 0xe6, 0x86, 0xdb, 0xa0, 0x8e, 0xaa, 0x28, 0xe8, 0x83, 0xd9, 0x83, 0x21,
	0x1a, 0xbb, 0x04, 0x9f, 0x7c, 0xd3, 0xc1, 0x4c, 0x88, 0xc2, 0xcc, 0x06, 0x44, 0x8d, 0xc9, 0xb2,
	0x1f, 0x05, 0x17, 0xd8, 0x0e, 0x69, 0x3b, 0xcc, 0xfe, 0x03, 0xff, 0x6c, 0xb3, 0xf1, 0x2b, 0x11,
	0xf6, 0x76, 0x72, 0xda, 0xef, 0xa7, 0x3d, 0x9f, 0x16, 0x1d, 0xc6, 0x22, 0x98, 0x72, 0x9b, 0x53,
	0x36, 0x0f, 0x3c, 0x4a, 0x66, 0x0c, 0x04, 0x60, 0x2c, 0x1c, 0x2e, 0x88, 0xc7, 0x80, 0x93, 0x51,
	0xc0, 0xc2, 0x2f, 0x87, 0xd1, 0xfa, 0xd9, 0x18, 0x60, 0x3c, 0xa5, 0x6a, 0xb6, 0xc3, 0x8d, 0x47,
	0x2a, 0x0d, 0x67, 0x22, 0x59, 0x04, 0x94, 0x3e, 0x3a, 0x69, 0xc5, 0x8c, 0xd1, 0x48, 0x68, 0x00,
	0xa2, 0x0b, 0x3e, 0x35, 0x29, 0x9f, 0x41, 0xc4, 0x29, 0xbe, 0x43, 0xff, 0x5d, 0x00, 0x61, 0x87,
	0xe0, 0xd3, 0xd3, 0xc2, 0x45, 0xa1, 0xb1, 0xdf, 0x3c, 0x27, 0xdb, 0x7c, 0xb2, 0x0e, 0x96, 0xdc,
	0x65, 0xa5, 0xa8, 0xa8, 0x66, 0x52, 0xc7, 0xb7, 0x28, 0x9b, 0xc3, 0x13, 0x4d, 0x5c, 0x70, 0x98,
	0xbf, 0xe6, 0x62, 0xf4, 0x77, 0x42, 0x13, 0x9e, 0x21, 0xcb, 0x66, 0x56, 0x5f, 0x8d, 0x50, 0x69,
	0x85, 0xc1, 0x35, 0x74, 0xac, 0x19, 0x46, 0xdf, 0xee, 0x1a, 0x6d, 0xdd, 0x1e, 0xf4, 0xac, 0x17,
	0xbd, 0xd5, 0x79, 0xec, 0xe8, 0x6d, 0x59, 0xc2, 0x47, 0x48, 0xde, 0x2c, 0xf5, 0x0c, 0xb3, 0xfb,
	0xf0, 0x2c, 0x17, 0x70, 0x05, 0xed, 0x6d, 0xba, 0x6d, 0x7d, 0x28, 0x17, 0x71, 0x15, 0xe1, 0x4d,
	0xcb, 0xd4, 0x5b, 0xc6, 0x50, 0x37, 0xdf, 0xe4, 0x3f, 0xcd, 0xef, 0x22, 0x2a, 0x0f, 0x52, 0x6f,
	0xd6, 0x42, 0x1b, 0x7e, 0x45, 0x07, 0xbf, 0xe6, 0xc7, 0x55, 0xb2, 0x10, 0x46, 0x56, 0xc2, 0x88,
	0x9e, 0x0a, 0xab, 0x5f, 0xef, 0x1a, 0x3e, 0x47, 0x9e, 0x22, 0xe1, 0x7b, 0x54, 0xd6, 0xa6, 0xe0,
	0x4d, 0x82, 0x68, 0x6c, 0x25, 0x91, 0x97, 0x8b, 0xcd, 0xe9, 0x2b, 0x12, 0xfe, 0x40, 0x95, 0x2d,
	0x8b, 0xb9, 0x98, 0x9b, 0x5d, 0xb7, 0xcb, 0x7d, 0x04, 0x45, 0xd2, 0x1a, 0xef, 0x97, 0xde, 0x27,
	0x83, 0x30, 0x88, 0x43, 0xe0, 0x6a, 0x1a, 0x56, 0x97, 0x7f, 0x89, 0xab, 0x29, 0x45, 0x5d, 0x51,
	0xdc, 0x7f, 0xd9, 0x51, 0xb7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xaa, 0xf4, 0x34, 0x82, 0x72,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UtilsServiceClient is the client API for UtilsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UtilsServiceClient interface {
	// CurrentBootMode determines which boot mode the DUT is in.
	CurrentBootMode(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CurrentBootModeResponse, error)
	// BlockingSync syncs the root device and internal device.
	BlockingSync(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// ReadServoKeyboard reads from the servo's keyboard emulator.
	ReadServoKeyboard(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ReadServoKeyboardResponse, error)
}

type utilsServiceClient struct {
	cc *grpc.ClientConn
}

func NewUtilsServiceClient(cc *grpc.ClientConn) UtilsServiceClient {
	return &utilsServiceClient{cc}
}

func (c *utilsServiceClient) CurrentBootMode(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CurrentBootModeResponse, error) {
	out := new(CurrentBootModeResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.UtilsService/CurrentBootMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilsServiceClient) BlockingSync(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.UtilsService/BlockingSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilsServiceClient) ReadServoKeyboard(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ReadServoKeyboardResponse, error) {
	out := new(ReadServoKeyboardResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.UtilsService/ReadServoKeyboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UtilsServiceServer is the server API for UtilsService service.
type UtilsServiceServer interface {
	// CurrentBootMode determines which boot mode the DUT is in.
	CurrentBootMode(context.Context, *empty.Empty) (*CurrentBootModeResponse, error)
	// BlockingSync syncs the root device and internal device.
	BlockingSync(context.Context, *empty.Empty) (*empty.Empty, error)
	// ReadServoKeyboard reads from the servo's keyboard emulator.
	ReadServoKeyboard(context.Context, *empty.Empty) (*ReadServoKeyboardResponse, error)
}

// UnimplementedUtilsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUtilsServiceServer struct {
}

func (*UnimplementedUtilsServiceServer) CurrentBootMode(ctx context.Context, req *empty.Empty) (*CurrentBootModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentBootMode not implemented")
}
func (*UnimplementedUtilsServiceServer) BlockingSync(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockingSync not implemented")
}
func (*UnimplementedUtilsServiceServer) ReadServoKeyboard(ctx context.Context, req *empty.Empty) (*ReadServoKeyboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadServoKeyboard not implemented")
}

func RegisterUtilsServiceServer(s *grpc.Server, srv UtilsServiceServer) {
	s.RegisterService(&_UtilsService_serviceDesc, srv)
}

func _UtilsService_CurrentBootMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServiceServer).CurrentBootMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.UtilsService/CurrentBootMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServiceServer).CurrentBootMode(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilsService_BlockingSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServiceServer).BlockingSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.UtilsService/BlockingSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServiceServer).BlockingSync(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilsService_ReadServoKeyboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServiceServer).ReadServoKeyboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.UtilsService/ReadServoKeyboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServiceServer).ReadServoKeyboard(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _UtilsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.firmware.UtilsService",
	HandlerType: (*UtilsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CurrentBootMode",
			Handler:    _UtilsService_CurrentBootMode_Handler,
		},
		{
			MethodName: "BlockingSync",
			Handler:    _UtilsService_BlockingSync_Handler,
		},
		{
			MethodName: "ReadServoKeyboard",
			Handler:    _UtilsService_ReadServoKeyboard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "utils_service.proto",
}
