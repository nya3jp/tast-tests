// Code generated by protoc-gen-go. DO NOT EDIT.
// source: utils_service.proto

package firmware

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ReadServoKeyboardRequest listens the servo's keyboard emulator for a specified duration in seconds.
type ReadServoKeyboardRequest struct {
	Duration             uint32   `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadServoKeyboardRequest) Reset()         { *m = ReadServoKeyboardRequest{} }
func (m *ReadServoKeyboardRequest) String() string { return proto.CompactTextString(m) }
func (*ReadServoKeyboardRequest) ProtoMessage()    {}
func (*ReadServoKeyboardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_187881f7b6ec64e6, []int{0}
}

func (m *ReadServoKeyboardRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadServoKeyboardRequest.Unmarshal(m, b)
}
func (m *ReadServoKeyboardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadServoKeyboardRequest.Marshal(b, m, deterministic)
}
func (m *ReadServoKeyboardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadServoKeyboardRequest.Merge(m, src)
}
func (m *ReadServoKeyboardRequest) XXX_Size() int {
	return xxx_messageInfo_ReadServoKeyboardRequest.Size(m)
}
func (m *ReadServoKeyboardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadServoKeyboardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadServoKeyboardRequest proto.InternalMessageInfo

func (m *ReadServoKeyboardRequest) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

// ReadServoKeyboardResponse provides what keys were pressed.
type ReadServoKeyboardResponse struct {
	Keys                 []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadServoKeyboardResponse) Reset()         { *m = ReadServoKeyboardResponse{} }
func (m *ReadServoKeyboardResponse) String() string { return proto.CompactTextString(m) }
func (*ReadServoKeyboardResponse) ProtoMessage()    {}
func (*ReadServoKeyboardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_187881f7b6ec64e6, []int{1}
}

func (m *ReadServoKeyboardResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadServoKeyboardResponse.Unmarshal(m, b)
}
func (m *ReadServoKeyboardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadServoKeyboardResponse.Marshal(b, m, deterministic)
}
func (m *ReadServoKeyboardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadServoKeyboardResponse.Merge(m, src)
}
func (m *ReadServoKeyboardResponse) XXX_Size() int {
	return xxx_messageInfo_ReadServoKeyboardResponse.Size(m)
}
func (m *ReadServoKeyboardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadServoKeyboardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReadServoKeyboardResponse proto.InternalMessageInfo

func (m *ReadServoKeyboardResponse) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

// FindPhysicalKeyboardResponse provides the path to /dev/input/event* for physical keyboard.
type FindPhysicalKeyboardResponse struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindPhysicalKeyboardResponse) Reset()         { *m = FindPhysicalKeyboardResponse{} }
func (m *FindPhysicalKeyboardResponse) String() string { return proto.CompactTextString(m) }
func (*FindPhysicalKeyboardResponse) ProtoMessage()    {}
func (*FindPhysicalKeyboardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_187881f7b6ec64e6, []int{2}
}

func (m *FindPhysicalKeyboardResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindPhysicalKeyboardResponse.Unmarshal(m, b)
}
func (m *FindPhysicalKeyboardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindPhysicalKeyboardResponse.Marshal(b, m, deterministic)
}
func (m *FindPhysicalKeyboardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindPhysicalKeyboardResponse.Merge(m, src)
}
func (m *FindPhysicalKeyboardResponse) XXX_Size() int {
	return xxx_messageInfo_FindPhysicalKeyboardResponse.Size(m)
}
func (m *FindPhysicalKeyboardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindPhysicalKeyboardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindPhysicalKeyboardResponse proto.InternalMessageInfo

func (m *FindPhysicalKeyboardResponse) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func init() {
	proto.RegisterType((*ReadServoKeyboardRequest)(nil), "tast.cros.firmware.ReadServoKeyboardRequest")
	proto.RegisterType((*ReadServoKeyboardResponse)(nil), "tast.cros.firmware.ReadServoKeyboardResponse")
	proto.RegisterType((*FindPhysicalKeyboardResponse)(nil), "tast.cros.firmware.FindPhysicalKeyboardResponse")
}

func init() { proto.RegisterFile("utils_service.proto", fileDescriptor_187881f7b6ec64e6) }

var fileDescriptor_187881f7b6ec64e6 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x31, 0x4f, 0xfb, 0x30,
	0x10, 0xc5, 0xdb, 0xff, 0x1f, 0x21, 0x6a, 0x95, 0x01, 0x83, 0x50, 0x09, 0x0c, 0x95, 0x07, 0x94,
	0x01, 0x6c, 0x54, 0x24, 0x66, 0x54, 0x09, 0x16, 0x16, 0x94, 0x88, 0x85, 0x05, 0x39, 0xce, 0x35,
	0xb1, 0x9a, 0xe4, 0x82, 0xed, 0x14, 0xe5, 0x1b, 0xf1, 0x31, 0x51, 0x12, 0xca, 0xd2, 0x04, 0xb1,
	0x9d, 0xad, 0x7b, 0xf7, 0xee, 0xf7, 0x74, 0xe4, 0xb8, 0x72, 0x3a, 0xb3, 0x6f, 0x16, 0xcc, 0x46,
	0x2b, 0xe0, 0xa5, 0x41, 0x87, 0x94, 0x3a, 0x69, 0x1d, 0x57, 0x06, 0x2d, 0x5f, 0x69, 0x93, 0x7f,
	0x48, 0x03, 0xde, 0x79, 0x82, 0x98, 0x64, 0x20, 0xda, 0x8e, 0xa8, 0x5a, 0x09, 0xc8, 0x4b, 0x57,
	0x77, 0x02, 0x76, 0x47, 0x66, 0x01, 0xc8, 0x38, 0x04, 0xb3, 0xc1, 0x27, 0xa8, 0x23, 0x94, 0x26,
	0x0e, 0xe0, 0xbd, 0x02, 0xeb, 0xa8, 0x47, 0x0e, 0xe2, 0xca, 0x48, 0xa7, 0xb1, 0x98, 0x8d, 0xe7,
	0x63, 0xff, 0x30, 0xf8, 0x79, 0x33, 0x41, 0xce, 0x7a, 0x74, 0xb6, 0xc4, 0xc2, 0x02, 0xa5, 0x64,
	0x6f, 0x0d, 0xb5, 0x9d, 0x8d, 0xe7, 0xff, 0xfd, 0x49, 0xd0, 0xd6, 0x6c, 0x41, 0x2e, 0x1e, 0x75,
	0x11, 0x3f, 0xa7, 0xb5, 0xd5, 0x4a, 0x66, 0x7d, 0x9a, 0x52, 0xba, 0xb4, 0x35, 0x9a, 0x04, 0x6d,
	0xbd, 0xf8, 0xfc, 0x47, 0xa6, 0x2f, 0x0d, 0x65, 0xd8, 0x41, 0xd2, 0x7b, 0x32, 0x5d, 0x66, 0xa8,
	0xd6, 0xba, 0x48, 0xc2, 0xba, 0x50, 0xf4, 0x94, 0x77, 0x6c, 0x7c, 0xcb, 0xc6, 0x1f, 0x1a, 0x36,
	0x6f, 0xe0, 0x9f, 0x8d, 0xa8, 0x21, 0x47, 0x3b, 0x7b, 0xd3, 0x2b, 0xbe, 0x1b, 0x1b, 0x1f, 0x8a,
	0xc5, 0xbb, 0xfe, 0x63, 0x77, 0x07, 0xc6, 0x46, 0x34, 0x22, 0x27, 0x7d, 0xe8, 0x83, 0xdb, 0xdf,
	0xf4, 0x19, 0xfc, 0x16, 0x1e, 0x1b, 0x2d, 0xfd, 0xd7, 0x4b, 0x95, 0x1a, 0xcc, 0x75, 0x95, 0xa3,
	0x15, 0x8d, 0x5e, 0x7c, 0x5f, 0x86, 0x15, 0xcd, 0x20, 0xb1, 0x1d, 0x14, 0xed, 0xb7, 0x6e, 0xb7,
	0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x08, 0xf9, 0xb5, 0xd9, 0x40, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UtilsServiceClient is the client API for UtilsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UtilsServiceClient interface {
	// BlockingSync syncs the root device and internal device.
	BlockingSync(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// ReadServoKeyboard reads from the servo's keyboard emulator and decodes the key presses.
	ReadServoKeyboard(ctx context.Context, in *ReadServoKeyboardRequest, opts ...grpc.CallOption) (*ReadServoKeyboardResponse, error)
	// FindPhysicalKeyboard finds /dev/input/event* file for physical a keyboard.
	FindPhysicalKeyboard(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FindPhysicalKeyboardResponse, error)
}

type utilsServiceClient struct {
	cc *grpc.ClientConn
}

func NewUtilsServiceClient(cc *grpc.ClientConn) UtilsServiceClient {
	return &utilsServiceClient{cc}
}

func (c *utilsServiceClient) BlockingSync(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.UtilsService/BlockingSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilsServiceClient) ReadServoKeyboard(ctx context.Context, in *ReadServoKeyboardRequest, opts ...grpc.CallOption) (*ReadServoKeyboardResponse, error) {
	out := new(ReadServoKeyboardResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.UtilsService/ReadServoKeyboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilsServiceClient) FindPhysicalKeyboard(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FindPhysicalKeyboardResponse, error) {
	out := new(FindPhysicalKeyboardResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.UtilsService/FindPhysicalKeyboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UtilsServiceServer is the server API for UtilsService service.
type UtilsServiceServer interface {
	// BlockingSync syncs the root device and internal device.
	BlockingSync(context.Context, *empty.Empty) (*empty.Empty, error)
	// ReadServoKeyboard reads from the servo's keyboard emulator and decodes the key presses.
	ReadServoKeyboard(context.Context, *ReadServoKeyboardRequest) (*ReadServoKeyboardResponse, error)
	// FindPhysicalKeyboard finds /dev/input/event* file for physical a keyboard.
	FindPhysicalKeyboard(context.Context, *empty.Empty) (*FindPhysicalKeyboardResponse, error)
}

// UnimplementedUtilsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUtilsServiceServer struct {
}

func (*UnimplementedUtilsServiceServer) BlockingSync(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockingSync not implemented")
}
func (*UnimplementedUtilsServiceServer) ReadServoKeyboard(ctx context.Context, req *ReadServoKeyboardRequest) (*ReadServoKeyboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadServoKeyboard not implemented")
}
func (*UnimplementedUtilsServiceServer) FindPhysicalKeyboard(ctx context.Context, req *empty.Empty) (*FindPhysicalKeyboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPhysicalKeyboard not implemented")
}

func RegisterUtilsServiceServer(s *grpc.Server, srv UtilsServiceServer) {
	s.RegisterService(&_UtilsService_serviceDesc, srv)
}

func _UtilsService_BlockingSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServiceServer).BlockingSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.UtilsService/BlockingSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServiceServer).BlockingSync(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilsService_ReadServoKeyboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadServoKeyboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServiceServer).ReadServoKeyboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.UtilsService/ReadServoKeyboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServiceServer).ReadServoKeyboard(ctx, req.(*ReadServoKeyboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilsService_FindPhysicalKeyboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServiceServer).FindPhysicalKeyboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.UtilsService/FindPhysicalKeyboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServiceServer).FindPhysicalKeyboard(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _UtilsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.firmware.UtilsService",
	HandlerType: (*UtilsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BlockingSync",
			Handler:    _UtilsService_BlockingSync_Handler,
		},
		{
			MethodName: "ReadServoKeyboard",
			Handler:    _UtilsService_ReadServoKeyboard_Handler,
		},
		{
			MethodName: "FindPhysicalKeyboard",
			Handler:    _UtilsService_FindPhysicalKeyboard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "utils_service.proto",
}
