// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package tast.cros.firmware;

import "google/protobuf/empty.proto";

option go_package = "chromiumos/tast/services/cros/firmware";

// BiosService provides ability to manipulate bios settings on DUT
service BiosService {
  // GetGBBFlags gets the flags that are cleared and set.
  rpc GetGBBFlags (google.protobuf.Empty) returns (GBBFlagsState) {}
  // ClearAndSetGBBFlags modifies the specified flags, leaving the rest unchanged.
  rpc ClearAndSetGBBFlags (GBBFlagsState) returns (google.protobuf.Empty) {}
  // SetAPSoftwareWriteProtect sets the software AP write protect.
  rpc SetAPSoftwareWriteProtect (WPRequest) returns (google.protobuf.Empty) {}
  // CorruptFWSection writes garbage bytes to the entire section specified.
  rpc CorruptFWSection (CorruptSection) returns (FWBackUpInfo) {}
  // BackupImageSection backs up the current fw region locally and returns its path.
  rpc BackupImageSection (FWBackUpSection) returns (FWBackUpInfo) {}
  // RestoreImageSection restores the fw region from path.
  rpc RestoreImageSection (FWBackUpInfo) returns (google.protobuf.Empty) {}
  // WriteImageFromMultiSectionFile writes the provided multi section file in the specified section.
  rpc WriteImageFromMultiSectionFile (FWBackUpInfo) returns (google.protobuf.Empty) {}
  // ChromeosFirmwareUpdate will perform the firmware update in the desired mode.
  rpc ChromeosFirmwareUpdate (FirmwareUpdateModeRequest) returns (google.protobuf.Empty) {}
}

// GBBFlag bit positions. These must match what is in src/platform/vboot_reference/firmware/2lib/include/2gbb_flags.h.
enum GBBFlag {
  // Reduce the dev screen delay to 2 sec from 30 sec to speed up factory.
  DEV_SCREEN_SHORT_DELAY = 0;
  LOAD_OPTION_ROMS = 1 [deprecated = true];
  ENABLE_ALTERNATE_OS = 2 [deprecated = true];
  // Force dev switch on, regardless of physical/keyboard dev switch position.
  FORCE_DEV_SWITCH_ON = 3;
  // Allow booting from external disk in dev mode even if dev_boot_usb=0.
  FORCE_DEV_BOOT_USB = 4;
  // Disable firmware rollback protection.
  DISABLE_FW_ROLLBACK_CHECK = 5;
  // Allow Enter key to trigger dev->tonorm screen transition.
  ENTER_TRIGGERS_TONORM = 6;
  // Allow booting Legacy OSes in dev mode even if dev_boot_altfw=0.
  FORCE_DEV_BOOT_LEGACY = 7;
  // Currently running FAFT tests.
  RUNNING_FAFT = 8;
  // Disable EC software sync
  DISABLE_EC_SOFTWARE_SYNC = 9;
  // Default to booting legacy OS when dev screen times out
  DEFAULT_DEV_BOOT_ALTFW = 10;
  // Disable auxiliary firmware (auxfw) software sync
  DISABLE_AUXFW_SOFTWARE_SYNC = 11;
  // Disable shutdown on lid closed
  DISABLE_LID_SHUTDOWN = 12;
  FORCE_DEV_BOOT_FASTBOOT_FULL_CAP = 13 [deprecated = true];
  // Recovery mode always assumes manual recovery, even if EC_IN_RW=1 
  FORCE_MANUAL_RECOVERY = 14;
  // Disable FWMP
  DISABLE_FWMP = 15;
  // Enable USB Device Controller
  ENABLE_UDC = 16;
}

// Programmers enum for flashrom programmers
enum Programmer {
  BIOSProgrammer = 0;
  ECProgrammer = 1;
}

// ImageSections enum for fw ImageSections
enum ImageSection {
  BOOTSTUBImageSection = 0;
  COREBOOTImageSection = 1;
  GBBImageSection = 2;
  ECRWImageSection = 3;
  ECRWBImageSection = 4;
  EmptyImageSection = 5;
  ROVPDImageSection = 6;
  RWVPDImageSection = 7;
  RECOVERYMRCCACHEImageSection = 8;
  APROImageSection = 9;
  FWSignAImageSection = 10;
  FWSignBImageSection = 11;
  FWBodyAImageSection = 12;
  FWBodyBImageSection = 13;
  APWPROImageSection = 14;
}

enum UpdateMode {
  RecoveryMode = 0;
}

// GBBFlagsState represents the a known state of GBB flags.  Set flags have precedence over cleared ones.
message GBBFlagsState {
  repeated GBBFlag Clear = 1;
  repeated GBBFlag Set = 2;
}

// FWBackUpInfo represents the path, programmer, and section of image backup.
message FWBackUpInfo {
  string Path = 1;
  ImageSection Section = 2;
  Programmer Programmer = 3;
}

// FWBackUpSection represents the string containing the image section to back up and the programmer to use.
message FWBackUpSection {
  ImageSection Section = 1;
  Programmer Programmer = 2;
}

// CorruptSection selects the section to corrupt.
message CorruptSection {
  ImageSection Section = 1;
  Programmer Programmer = 2;
}

// FirmwareUpdateModeRequest represents the string containing the mode and options to performe the update.
message FirmwareUpdateModeRequest {
  UpdateMode Mode = 1;
  string Options = 2;
}

// WPRequest provides args for enabling/disabling software write protect.
// You must provide WPsection range start and range length if enable is true,
// either default values listed below or custom values if desired. 
message WPRequest {
  bool Enable = 1;
  sint64 WPRangeStart = 2;     // Pass -1 for WPRangeStart to skip setting this value. 
  sint64 WPRangeLength = 3;    // Pass -1 for WPRangeLength to skip setting this value.
  ImageSection WPSection = 4;  // Pass EmptyImageSection to skip setting this value.
}