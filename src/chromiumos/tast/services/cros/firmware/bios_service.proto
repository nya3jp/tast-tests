// Copyright 2020 The ChromiumOS Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package tast.cros.firmware;

import "google/protobuf/empty.proto";

option go_package = "chromiumos/tast/services/cros/firmware";

// BiosService provides ability to manipulate bios settings on DUT
service BiosService {
  // GetGBBFlags gets the flags that are cleared and set.
  rpc GetGBBFlags (google.protobuf.Empty) returns (GBBFlagsState) {}
  // ClearAndSetGBBFlags modifies the specified flags, leaving the rest unchanged.
  rpc ClearAndSetGBBFlags (GBBFlagsState) returns (google.protobuf.Empty) {}
  // SetAPSoftwareWriteProtect sets the software AP write protect.
  rpc SetAPSoftwareWriteProtect (WPRequest) returns (google.protobuf.Empty) {}
  // CorruptFWSection writes garbage bytes to the entire section specified.
  rpc CorruptFWSection (FWSectionInfo) returns (FWSectionInfo) {}
  // BackupImageSection backs up the current fw region locally and returns its path.
  rpc BackupImageSection (FWSectionInfo) returns (FWSectionInfo) {}
  // RestoreImageSection restores the fw region from path.
  rpc RestoreImageSection (FWSectionInfo) returns (google.protobuf.Empty) {}
  // WriteImageFromMultiSectionFile writes the provided multi section file in the specified section.
  rpc WriteImageFromMultiSectionFile (FWSectionInfo) returns (google.protobuf.Empty) {}
  // ChromeosFirmwareUpdate will perform the firmware update in the desired mode.
  rpc ChromeosFirmwareUpdate (FirmwareUpdateModeRequest) returns (google.protobuf.Empty) {}
  // ParseFMAP reads and parses FMAP section for given programmer.
  rpc ParseFMAP (FMAP) returns (FMAP) {}
}

// GBBFlag bit positions. These must match what is in src/platform/vboot_reference/firmware/2lib/include/2gbb_flags.h.
enum GBBFlag {
  // Reduce the dev screen delay to 2 sec from 30 sec to speed up factory.
  DEV_SCREEN_SHORT_DELAY = 0;
  LOAD_OPTION_ROMS = 1 [deprecated = true];
  ENABLE_ALTERNATE_OS = 2 [deprecated = true];
  // Force dev switch on, regardless of physical/keyboard dev switch position.
  FORCE_DEV_SWITCH_ON = 3;
  // Allow booting from external disk in dev mode even if dev_boot_usb=0.
  FORCE_DEV_BOOT_USB = 4;
  // Disable firmware rollback protection.
  DISABLE_FW_ROLLBACK_CHECK = 5;
  // Allow Enter key to trigger dev->tonorm screen transition.
  ENTER_TRIGGERS_TONORM = 6;
  // Allow booting Legacy OSes in dev mode even if dev_boot_altfw=0.
  FORCE_DEV_BOOT_LEGACY = 7;
  // Currently running FAFT tests.
  RUNNING_FAFT = 8;
  // Disable EC software sync
  DISABLE_EC_SOFTWARE_SYNC = 9;
  // Default to booting legacy OS when dev screen times out
  DEFAULT_DEV_BOOT_ALTFW = 10;
  // Disable auxiliary firmware (auxfw) software sync
  DISABLE_AUXFW_SOFTWARE_SYNC = 11;
  // Disable shutdown on lid closed
  DISABLE_LID_SHUTDOWN = 12;
  FORCE_DEV_BOOT_FASTBOOT_FULL_CAP = 13 [deprecated = true];
  // Recovery mode always assumes manual recovery, even if EC_IN_RW=1
  FORCE_MANUAL_RECOVERY = 14;
  // Disable FWMP
  DISABLE_FWMP = 15;
  // Enable USB Device Controller
  ENABLE_UDC = 16;
}

// Programmers enum for flashrom programmers
enum Programmer {
  PROGRAMMER_UNDEFINED = 0;
  ECProgrammer = 1;
  BIOSProgrammer = 2;
}

// ImageSections enum for fw ImageSections
enum ImageSection {
  EmptyImageSection = 0;
  COREBOOTImageSection = 1;
  GBBImageSection = 2;
  ECRWImageSection = 3;
  ECRWBImageSection = 4;
  reserved 5;
  ROVPDImageSection = 6;
  RWVPDImageSection = 7;
  RECOVERYMRCCACHEImageSection = 8;
  APROImageSection = 9;
  FWSignAImageSection = 10;
  FWSignBImageSection = 11;
  FWBodyAImageSection = 12;
  FWBodyBImageSection = 13;
  APRWAImageSection = 14;
  APRWBImageSection = 15;
  APWPROImageSection = 16;
  BOOTSTUBImageSection = 17;
  FMAPImageSection = 18;
  ECROImageSection = 19;
  FRMAINImageSection = 20;
  ROFRIDImageSection = 21;
  RWFWIDImageSection = 22;
  RWFWIDAImageSection = 23;
  RWFWIDBImageSection = 24;
  IntelCSERWAImageSection = 25;
  IntelCSERWBImageSection = 26;
  SIALLImageSection = 27;
  SIDESCImageSection = 28;
  SIMEImageSection = 29;
  SIBIOSImageSection = 30;
  RWLEGACYImageSection = 31;
  RWMISCImageSection = 32;
  RWMRCCACHEImageSection = 33;
  RWELOGImageSection = 34;
  RWSHAREDImageSection = 35;
  RWNVRAMImageSection = 36;
  ROFRIDPADImageSection = 37;
  SHAREDDATAImageSection = 38;
  UNIFIEDMRCCACHEImageSection = 39;
  SMMSTOREImageSection = 40;
  MISCRWImageSection = 41;
  RWVARMRCCACHEImageSection = 42;
  FPFSTATUSImageSection = 43;
  BIOSUNUSABLEImageSection = 44;
  RWPRESERVEImageSection = 45;
  VBLOCKDEVImageSection = 46;
  DEVICEEXTENSIONImageSection = 47;
  UNUSEDHOLEImageSection = 48;
  IFWIImageSection = 49;
}

enum UpdateMode {
  RecoveryMode = 0;
}

// GBBFlagsState represents the a known state of GBB flags.  Set flags have precedence over cleared ones.
message GBBFlagsState {
  repeated GBBFlag Clear = 1;
  repeated GBBFlag Set = 2;
}

// FWSectionInfo represents the programmer, and section of a firmware section.
// The Path in a request refers to an optional temp dir to save an image to.
// The Path in a response refers to the exact location of the image file.
message FWSectionInfo {
  string Path = 1;
  ImageSection Section = 2;
  Programmer Programmer = 3;
}

// FirmwareUpdateModeRequest represents the string containing the mode and options to perform the update.
message FirmwareUpdateModeRequest {
  UpdateMode Mode = 1;
  string Options = 2;
}

// Range holds the start (offset) and length (size) of a section in fw.
message Range {
  int64 start = 1;
  int64 length = 2;
}

// WPRequest provides args for enabling/disabling software write protect.
message WPRequest {
  bool enable = 1;
  Range range = 2;   // Skip instantiating this message to use default values.
  ImageSection section = 3;  // Don't set to use default value.
}

// FMAP parses flash map to a map of image section to range (start, length).
message FMAP {
  // FMAPEntry holds each value for each section in fmap.
  message FMAPEntry {
    ImageSection section = 1;
    Range range = 2;
  }
  Programmer programmer = 1;
  repeated FMAPEntry fmap = 2;
}