// Code generated by protoc-gen-go. DO NOT EDIT.
// source: serial_port_service.proto

package firmware

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SerialReadRequest struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	MaxLen               uint32   `protobuf:"varint,2,opt,name=MaxLen,proto3" json:"MaxLen,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SerialReadRequest) Reset()         { *m = SerialReadRequest{} }
func (m *SerialReadRequest) String() string { return proto.CompactTextString(m) }
func (*SerialReadRequest) ProtoMessage()    {}
func (*SerialReadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c93d18dee411c11, []int{0}
}

func (m *SerialReadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SerialReadRequest.Unmarshal(m, b)
}
func (m *SerialReadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SerialReadRequest.Marshal(b, m, deterministic)
}
func (m *SerialReadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerialReadRequest.Merge(m, src)
}
func (m *SerialReadRequest) XXX_Size() int {
	return xxx_messageInfo_SerialReadRequest.Size(m)
}
func (m *SerialReadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SerialReadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SerialReadRequest proto.InternalMessageInfo

func (m *SerialReadRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SerialReadRequest) GetMaxLen() uint32 {
	if m != nil {
		return m.MaxLen
	}
	return 0
}

type SerialWriteRequest struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Buffer               []byte   `protobuf:"bytes,2,opt,name=Buffer,proto3" json:"Buffer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SerialWriteRequest) Reset()         { *m = SerialWriteRequest{} }
func (m *SerialWriteRequest) String() string { return proto.CompactTextString(m) }
func (*SerialWriteRequest) ProtoMessage()    {}
func (*SerialWriteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c93d18dee411c11, []int{1}
}

func (m *SerialWriteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SerialWriteRequest.Unmarshal(m, b)
}
func (m *SerialWriteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SerialWriteRequest.Marshal(b, m, deterministic)
}
func (m *SerialWriteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerialWriteRequest.Merge(m, src)
}
func (m *SerialWriteRequest) XXX_Size() int {
	return xxx_messageInfo_SerialWriteRequest.Size(m)
}
func (m *SerialWriteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SerialWriteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SerialWriteRequest proto.InternalMessageInfo

func (m *SerialWriteRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SerialWriteRequest) GetBuffer() []byte {
	if m != nil {
		return m.Buffer
	}
	return nil
}

type SerialPortConfig struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Baud                 int64    `protobuf:"varint,2,opt,name=Baud,proto3" json:"Baud,omitempty"`
	ReadTimeout          int64    `protobuf:"varint,3,opt,name=ReadTimeout,proto3" json:"ReadTimeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SerialPortConfig) Reset()         { *m = SerialPortConfig{} }
func (m *SerialPortConfig) String() string { return proto.CompactTextString(m) }
func (*SerialPortConfig) ProtoMessage()    {}
func (*SerialPortConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c93d18dee411c11, []int{2}
}

func (m *SerialPortConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SerialPortConfig.Unmarshal(m, b)
}
func (m *SerialPortConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SerialPortConfig.Marshal(b, m, deterministic)
}
func (m *SerialPortConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerialPortConfig.Merge(m, src)
}
func (m *SerialPortConfig) XXX_Size() int {
	return xxx_messageInfo_SerialPortConfig.Size(m)
}
func (m *SerialPortConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SerialPortConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SerialPortConfig proto.InternalMessageInfo

func (m *SerialPortConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SerialPortConfig) GetBaud() int64 {
	if m != nil {
		return m.Baud
	}
	return 0
}

func (m *SerialPortConfig) GetReadTimeout() int64 {
	if m != nil {
		return m.ReadTimeout
	}
	return 0
}

func init() {
	proto.RegisterType((*SerialReadRequest)(nil), "tast.cros.firmware.SerialReadRequest")
	proto.RegisterType((*SerialWriteRequest)(nil), "tast.cros.firmware.SerialWriteRequest")
	proto.RegisterType((*SerialPortConfig)(nil), "tast.cros.firmware.SerialPortConfig")
}

func init() { proto.RegisterFile("serial_port_service.proto", fileDescriptor_1c93d18dee411c11) }

var fileDescriptor_1c93d18dee411c11 = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xdb, 0x6b, 0xe2, 0x40,
	0x18, 0xc5, 0xd7, 0x2b, 0xec, 0xec, 0x85, 0xdd, 0x79, 0x10, 0x37, 0x2e, 0x8b, 0x84, 0xad, 0xf8,
	0x34, 0x01, 0x2d, 0x7d, 0x69, 0xa1, 0x10, 0x69, 0x21, 0x60, 0x6d, 0x89, 0xbd, 0x40, 0x29, 0xc8,
	0x68, 0xbe, 0x68, 0x20, 0xc9, 0xa4, 0x73, 0xa9, 0xf5, 0xb1, 0xff, 0x79, 0x99, 0x89, 0x01, 0xd1,
	0xea, 0x43, 0xdf, 0x66, 0xbe, 0x33, 0xe7, 0x37, 0x73, 0x0e, 0x83, 0xfe, 0x08, 0xe0, 0x11, 0x8d,
	0x27, 0x19, 0xe3, 0x72, 0x22, 0x80, 0xbf, 0x44, 0x33, 0x20, 0x19, 0x67, 0x92, 0x61, 0x2c, 0xa9,
	0x90, 0x64, 0xc6, 0x99, 0x20, 0x61, 0xc4, 0x93, 0x25, 0xe5, 0x60, 0xb5, 0xe6, 0x8c, 0xcd, 0x63,
	0x70, 0xcc, 0x89, 0xa9, 0x0a, 0x1d, 0x48, 0x32, 0xb9, 0xca, 0x0d, 0xd6, 0xbf, 0x6d, 0x71, 0xc9,
	0x69, 0x96, 0x01, 0x17, 0xb9, 0x6e, 0x9f, 0xa2, 0xdf, 0x63, 0x73, 0x9b, 0x0f, 0x34, 0xf0, 0xe1,
	0x59, 0x81, 0x90, 0xf8, 0x27, 0x2a, 0x7b, 0x41, 0xb3, 0xd4, 0x2e, 0x75, 0x7f, 0xf8, 0x65, 0x2f,
	0xc0, 0x0d, 0x54, 0xbf, 0xa2, 0xaf, 0x43, 0x48, 0x9b, 0x65, 0x33, 0x5b, 0xef, 0xec, 0x33, 0x84,
	0x73, 0xf3, 0x03, 0x8f, 0x24, 0x1c, 0x70, 0xbb, 0x2a, 0x0c, 0x81, 0x1b, 0xf7, 0x77, 0x7f, 0xbd,
	0xb3, 0x9f, 0xd0, 0xaf, 0xdc, 0x7d, 0xc3, 0xb8, 0x1c, 0xb0, 0x34, 0x8c, 0xe6, 0x18, 0xa3, 0xea,
	0x88, 0x26, 0x60, 0xdc, 0x5f, 0x7d, 0xb3, 0xd6, 0x33, 0x97, 0xaa, 0xc0, 0xb8, 0x2b, 0xbe, 0x59,
	0xe3, 0x36, 0xfa, 0xa6, 0x1f, 0x7c, 0x1b, 0x25, 0xc0, 0x94, 0x6c, 0x56, 0x8c, 0xb4, 0x39, 0xea,
	0xbd, 0x55, 0x8a, 0x64, 0x1a, 0x3f, 0xce, 0x5b, 0xc4, 0x43, 0x54, 0xbd, 0xce, 0x20, 0xc5, 0xff,
	0xc9, 0x6e, 0x91, 0x64, 0xfb, 0x35, 0xd6, 0x5f, 0x92, 0xb7, 0x47, 0x8a, 0xf6, 0xc8, 0x9d, 0x97,
	0xca, 0x7e, 0xef, 0x9e, 0xc6, 0x0a, 0xec, 0x2f, 0x9a, 0xa6, 0xaf, 0xc4, 0x47, 0xfb, 0x69, 0x1b,
	0xb5, 0x5a, 0xad, 0x1d, 0x9c, 0xbb, 0x92, 0x20, 0x0a, 0xda, 0x08, 0xd5, 0x4c, 0x8f, 0xb8, 0xb3,
	0x1f, 0xb7, 0x59, 0xf4, 0x07, 0x3c, 0x2f, 0x95, 0x27, 0xc7, 0x05, 0xef, 0x1c, 0xd5, 0x2e, 0x63,
	0x25, 0x16, 0xf8, 0x60, 0x0c, 0xab, 0xb1, 0xa3, 0x5e, 0xe8, 0xff, 0x93, 0x03, 0x06, 0x31, 0x13,
	0xf0, 0x59, 0x80, 0xdb, 0x7d, 0xec, 0xcc, 0x16, 0x9c, 0x25, 0x91, 0x4a, 0x98, 0x70, 0x74, 0x28,
	0x67, 0xfd, 0x9d, 0x85, 0xa3, 0xd3, 0x39, 0x45, 0xba, 0x69, 0xdd, 0x78, 0xfb, 0xef, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x89, 0x05, 0xc4, 0x68, 0xfb, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SerialPortServiceClient is the client API for SerialPortService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SerialPortServiceClient interface {
	Open(ctx context.Context, in *SerialPortConfig, opts ...grpc.CallOption) (*wrappers.UInt32Value, error)
	Read(ctx context.Context, in *SerialReadRequest, opts ...grpc.CallOption) (*wrappers.BytesValue, error)
	Write(ctx context.Context, in *SerialWriteRequest, opts ...grpc.CallOption) (*wrappers.Int64Value, error)
	Flush(ctx context.Context, in *wrappers.UInt32Value, opts ...grpc.CallOption) (*empty.Empty, error)
	Close(ctx context.Context, in *wrappers.UInt32Value, opts ...grpc.CallOption) (*empty.Empty, error)
}

type serialPortServiceClient struct {
	cc *grpc.ClientConn
}

func NewSerialPortServiceClient(cc *grpc.ClientConn) SerialPortServiceClient {
	return &serialPortServiceClient{cc}
}

func (c *serialPortServiceClient) Open(ctx context.Context, in *SerialPortConfig, opts ...grpc.CallOption) (*wrappers.UInt32Value, error) {
	out := new(wrappers.UInt32Value)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.SerialPortService/Open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serialPortServiceClient) Read(ctx context.Context, in *SerialReadRequest, opts ...grpc.CallOption) (*wrappers.BytesValue, error) {
	out := new(wrappers.BytesValue)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.SerialPortService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serialPortServiceClient) Write(ctx context.Context, in *SerialWriteRequest, opts ...grpc.CallOption) (*wrappers.Int64Value, error) {
	out := new(wrappers.Int64Value)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.SerialPortService/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serialPortServiceClient) Flush(ctx context.Context, in *wrappers.UInt32Value, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.SerialPortService/Flush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serialPortServiceClient) Close(ctx context.Context, in *wrappers.UInt32Value, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.SerialPortService/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SerialPortServiceServer is the server API for SerialPortService service.
type SerialPortServiceServer interface {
	Open(context.Context, *SerialPortConfig) (*wrappers.UInt32Value, error)
	Read(context.Context, *SerialReadRequest) (*wrappers.BytesValue, error)
	Write(context.Context, *SerialWriteRequest) (*wrappers.Int64Value, error)
	Flush(context.Context, *wrappers.UInt32Value) (*empty.Empty, error)
	Close(context.Context, *wrappers.UInt32Value) (*empty.Empty, error)
}

// UnimplementedSerialPortServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSerialPortServiceServer struct {
}

func (*UnimplementedSerialPortServiceServer) Open(ctx context.Context, req *SerialPortConfig) (*wrappers.UInt32Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (*UnimplementedSerialPortServiceServer) Read(ctx context.Context, req *SerialReadRequest) (*wrappers.BytesValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedSerialPortServiceServer) Write(ctx context.Context, req *SerialWriteRequest) (*wrappers.Int64Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (*UnimplementedSerialPortServiceServer) Flush(ctx context.Context, req *wrappers.UInt32Value) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flush not implemented")
}
func (*UnimplementedSerialPortServiceServer) Close(ctx context.Context, req *wrappers.UInt32Value) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}

func RegisterSerialPortServiceServer(s *grpc.Server, srv SerialPortServiceServer) {
	s.RegisterService(&_SerialPortService_serviceDesc, srv)
}

func _SerialPortService_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SerialPortConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SerialPortServiceServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.SerialPortService/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SerialPortServiceServer).Open(ctx, req.(*SerialPortConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _SerialPortService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SerialReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SerialPortServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.SerialPortService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SerialPortServiceServer).Read(ctx, req.(*SerialReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SerialPortService_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SerialWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SerialPortServiceServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.SerialPortService/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SerialPortServiceServer).Write(ctx, req.(*SerialWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SerialPortService_Flush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.UInt32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SerialPortServiceServer).Flush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.SerialPortService/Flush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SerialPortServiceServer).Flush(ctx, req.(*wrappers.UInt32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _SerialPortService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.UInt32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SerialPortServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.SerialPortService/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SerialPortServiceServer).Close(ctx, req.(*wrappers.UInt32Value))
	}
	return interceptor(ctx, in, info, handler)
}

var _SerialPortService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.firmware.SerialPortService",
	HandlerType: (*SerialPortServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Open",
			Handler:    _SerialPortService_Open_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _SerialPortService_Read_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _SerialPortService_Write_Handler,
		},
		{
			MethodName: "Flush",
			Handler:    _SerialPortService_Flush_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _SerialPortService_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serial_port_service.proto",
}
