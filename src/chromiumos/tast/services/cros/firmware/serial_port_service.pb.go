// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: serial_port_service.proto

package firmware

import (
	context "context"
	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PortId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PortId) Reset() {
	*x = PortId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serial_port_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortId) ProtoMessage() {}

func (x *PortId) ProtoReflect() protoreflect.Message {
	mi := &file_serial_port_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortId.ProtoReflect.Descriptor instead.
func (*PortId) Descriptor() ([]byte, []int) {
	return file_serial_port_service_proto_rawDescGZIP(), []int{0}
}

func (x *PortId) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type SerialReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *PortId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MaxLen uint32  `protobuf:"varint,2,opt,name=max_len,json=maxLen,proto3" json:"max_len,omitempty"`
}

func (x *SerialReadRequest) Reset() {
	*x = SerialReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serial_port_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SerialReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerialReadRequest) ProtoMessage() {}

func (x *SerialReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_serial_port_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerialReadRequest.ProtoReflect.Descriptor instead.
func (*SerialReadRequest) Descriptor() ([]byte, []int) {
	return file_serial_port_service_proto_rawDescGZIP(), []int{1}
}

func (x *SerialReadRequest) GetId() *PortId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SerialReadRequest) GetMaxLen() uint32 {
	if x != nil {
		return x.MaxLen
	}
	return 0
}

type SerialWriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *PortId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Buffer []byte  `protobuf:"bytes,2,opt,name=buffer,proto3" json:"buffer,omitempty"`
}

func (x *SerialWriteRequest) Reset() {
	*x = SerialWriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serial_port_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SerialWriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerialWriteRequest) ProtoMessage() {}

func (x *SerialWriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_serial_port_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerialWriteRequest.ProtoReflect.Descriptor instead.
func (*SerialWriteRequest) Descriptor() ([]byte, []int) {
	return file_serial_port_service_proto_rawDescGZIP(), []int{2}
}

func (x *SerialWriteRequest) GetId() *PortId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SerialWriteRequest) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

type SerialPortConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Baud        int64              `protobuf:"varint,2,opt,name=baud,proto3" json:"baud,omitempty"`
	ReadTimeout *duration.Duration `protobuf:"bytes,3,opt,name=read_timeout,json=readTimeout,proto3" json:"read_timeout,omitempty"`
}

func (x *SerialPortConfig) Reset() {
	*x = SerialPortConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serial_port_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SerialPortConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerialPortConfig) ProtoMessage() {}

func (x *SerialPortConfig) ProtoReflect() protoreflect.Message {
	mi := &file_serial_port_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerialPortConfig.ProtoReflect.Descriptor instead.
func (*SerialPortConfig) Descriptor() ([]byte, []int) {
	return file_serial_port_service_proto_rawDescGZIP(), []int{3}
}

func (x *SerialPortConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SerialPortConfig) GetBaud() int64 {
	if x != nil {
		return x.Baud
	}
	return 0
}

func (x *SerialPortConfig) GetReadTimeout() *duration.Duration {
	if x != nil {
		return x.ReadTimeout
	}
	return nil
}

var File_serial_port_service_proto protoreflect.FileDescriptor

var file_serial_port_service_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x74, 0x61, 0x73,
	0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1e, 0x0a, 0x06,
	0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x58, 0x0a, 0x11,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x22, 0x58, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x22, 0x78, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x75, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x62, 0x61, 0x75, 0x64, 0x12, 0x3c, 0x0a, 0x0c,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72,
	0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x32, 0xfb, 0x02, 0x0a, 0x11, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x4a, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x24, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x1a,
	0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x04,
	0x52, 0x65, 0x61, 0x64, 0x12, 0x25, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x05, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x05, 0x46, 0x6c,
	0x75, 0x73, 0x68, 0x12, 0x1a, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x05, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x12, 0x1a, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x28, 0x5a, 0x26, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_serial_port_service_proto_rawDescOnce sync.Once
	file_serial_port_service_proto_rawDescData = file_serial_port_service_proto_rawDesc
)

func file_serial_port_service_proto_rawDescGZIP() []byte {
	file_serial_port_service_proto_rawDescOnce.Do(func() {
		file_serial_port_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_serial_port_service_proto_rawDescData)
	})
	return file_serial_port_service_proto_rawDescData
}

var file_serial_port_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_serial_port_service_proto_goTypes = []interface{}{
	(*PortId)(nil),              // 0: tast.cros.firmware.PortId
	(*SerialReadRequest)(nil),   // 1: tast.cros.firmware.SerialReadRequest
	(*SerialWriteRequest)(nil),  // 2: tast.cros.firmware.SerialWriteRequest
	(*SerialPortConfig)(nil),    // 3: tast.cros.firmware.SerialPortConfig
	(*duration.Duration)(nil),   // 4: google.protobuf.Duration
	(*wrappers.BytesValue)(nil), // 5: google.protobuf.BytesValue
	(*wrappers.Int64Value)(nil), // 6: google.protobuf.Int64Value
	(*empty.Empty)(nil),         // 7: google.protobuf.Empty
}
var file_serial_port_service_proto_depIdxs = []int32{
	0, // 0: tast.cros.firmware.SerialReadRequest.id:type_name -> tast.cros.firmware.PortId
	0, // 1: tast.cros.firmware.SerialWriteRequest.id:type_name -> tast.cros.firmware.PortId
	4, // 2: tast.cros.firmware.SerialPortConfig.read_timeout:type_name -> google.protobuf.Duration
	3, // 3: tast.cros.firmware.SerialPortService.Open:input_type -> tast.cros.firmware.SerialPortConfig
	1, // 4: tast.cros.firmware.SerialPortService.Read:input_type -> tast.cros.firmware.SerialReadRequest
	2, // 5: tast.cros.firmware.SerialPortService.Write:input_type -> tast.cros.firmware.SerialWriteRequest
	0, // 6: tast.cros.firmware.SerialPortService.Flush:input_type -> tast.cros.firmware.PortId
	0, // 7: tast.cros.firmware.SerialPortService.Close:input_type -> tast.cros.firmware.PortId
	0, // 8: tast.cros.firmware.SerialPortService.Open:output_type -> tast.cros.firmware.PortId
	5, // 9: tast.cros.firmware.SerialPortService.Read:output_type -> google.protobuf.BytesValue
	6, // 10: tast.cros.firmware.SerialPortService.Write:output_type -> google.protobuf.Int64Value
	7, // 11: tast.cros.firmware.SerialPortService.Flush:output_type -> google.protobuf.Empty
	7, // 12: tast.cros.firmware.SerialPortService.Close:output_type -> google.protobuf.Empty
	8, // [8:13] is the sub-list for method output_type
	3, // [3:8] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_serial_port_service_proto_init() }
func file_serial_port_service_proto_init() {
	if File_serial_port_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_serial_port_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serial_port_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SerialReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serial_port_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SerialWriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serial_port_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SerialPortConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_serial_port_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_serial_port_service_proto_goTypes,
		DependencyIndexes: file_serial_port_service_proto_depIdxs,
		MessageInfos:      file_serial_port_service_proto_msgTypes,
	}.Build()
	File_serial_port_service_proto = out.File
	file_serial_port_service_proto_rawDesc = nil
	file_serial_port_service_proto_goTypes = nil
	file_serial_port_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SerialPortServiceClient is the client API for SerialPortService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SerialPortServiceClient interface {
	// Open opens a port and returns its id.
	Open(ctx context.Context, in *SerialPortConfig, opts ...grpc.CallOption) (*PortId, error)
	// Read reads bytes into provided buffer, returns the bytes read.
	Read(ctx context.Context, in *SerialReadRequest, opts ...grpc.CallOption) (*wrappers.BytesValue, error)
	// Write writes bytes from provided buffer, returns number of bytes written.
	Write(ctx context.Context, in *SerialWriteRequest, opts ...grpc.CallOption) (*wrappers.Int64Value, error)
	// Flush flushes un-read/written content from the port.
	Flush(ctx context.Context, in *PortId, opts ...grpc.CallOption) (*empty.Empty, error)
	// Close closes the port.
	Close(ctx context.Context, in *PortId, opts ...grpc.CallOption) (*empty.Empty, error)
}

type serialPortServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSerialPortServiceClient(cc grpc.ClientConnInterface) SerialPortServiceClient {
	return &serialPortServiceClient{cc}
}

func (c *serialPortServiceClient) Open(ctx context.Context, in *SerialPortConfig, opts ...grpc.CallOption) (*PortId, error) {
	out := new(PortId)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.SerialPortService/Open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serialPortServiceClient) Read(ctx context.Context, in *SerialReadRequest, opts ...grpc.CallOption) (*wrappers.BytesValue, error) {
	out := new(wrappers.BytesValue)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.SerialPortService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serialPortServiceClient) Write(ctx context.Context, in *SerialWriteRequest, opts ...grpc.CallOption) (*wrappers.Int64Value, error) {
	out := new(wrappers.Int64Value)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.SerialPortService/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serialPortServiceClient) Flush(ctx context.Context, in *PortId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.SerialPortService/Flush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serialPortServiceClient) Close(ctx context.Context, in *PortId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.firmware.SerialPortService/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SerialPortServiceServer is the server API for SerialPortService service.
type SerialPortServiceServer interface {
	// Open opens a port and returns its id.
	Open(context.Context, *SerialPortConfig) (*PortId, error)
	// Read reads bytes into provided buffer, returns the bytes read.
	Read(context.Context, *SerialReadRequest) (*wrappers.BytesValue, error)
	// Write writes bytes from provided buffer, returns number of bytes written.
	Write(context.Context, *SerialWriteRequest) (*wrappers.Int64Value, error)
	// Flush flushes un-read/written content from the port.
	Flush(context.Context, *PortId) (*empty.Empty, error)
	// Close closes the port.
	Close(context.Context, *PortId) (*empty.Empty, error)
}

// UnimplementedSerialPortServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSerialPortServiceServer struct {
}

func (*UnimplementedSerialPortServiceServer) Open(context.Context, *SerialPortConfig) (*PortId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (*UnimplementedSerialPortServiceServer) Read(context.Context, *SerialReadRequest) (*wrappers.BytesValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedSerialPortServiceServer) Write(context.Context, *SerialWriteRequest) (*wrappers.Int64Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (*UnimplementedSerialPortServiceServer) Flush(context.Context, *PortId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flush not implemented")
}
func (*UnimplementedSerialPortServiceServer) Close(context.Context, *PortId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}

func RegisterSerialPortServiceServer(s *grpc.Server, srv SerialPortServiceServer) {
	s.RegisterService(&_SerialPortService_serviceDesc, srv)
}

func _SerialPortService_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SerialPortConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SerialPortServiceServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.SerialPortService/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SerialPortServiceServer).Open(ctx, req.(*SerialPortConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _SerialPortService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SerialReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SerialPortServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.SerialPortService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SerialPortServiceServer).Read(ctx, req.(*SerialReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SerialPortService_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SerialWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SerialPortServiceServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.SerialPortService/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SerialPortServiceServer).Write(ctx, req.(*SerialWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SerialPortService_Flush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SerialPortServiceServer).Flush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.SerialPortService/Flush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SerialPortServiceServer).Flush(ctx, req.(*PortId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SerialPortService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SerialPortServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.firmware.SerialPortService/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SerialPortServiceServer).Close(ctx, req.(*PortId))
	}
	return interceptor(ctx, in, info, handler)
}

var _SerialPortService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.firmware.SerialPortService",
	HandlerType: (*SerialPortServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Open",
			Handler:    _SerialPortService_Open_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _SerialPortService_Read_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _SerialPortService_Write_Handler,
		},
		{
			MethodName: "Flush",
			Handler:    _SerialPortService_Flush_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _SerialPortService_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serial_port_service.proto",
}
