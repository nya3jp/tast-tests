// Copyright 2019 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package tast.cros.firmware;

import "google/protobuf/empty.proto";

option go_package = "chromiumos/tast/services/cros/firmware";

// UtilsService provides some basic operations used by firmware tests.
service UtilsService {
  // BlockingSync syncs the root device and internal device.
  rpc BlockingSync (google.protobuf.Empty) returns (google.protobuf.Empty) {}

  // ReadServoKeyboard reads from the servo's keyboard emulator and decodes the key presses.
  rpc ReadServoKeyboard (ReadServoKeyboardRequest) returns (ReadServoKeyboardResponse) {}

  // FindPhysicalKeyboard finds /dev/input/event* file for physical a keyboard.
  rpc FindPhysicalKeyboard (google.protobuf.Empty) returns (FindPhysicalKeyboardResponse) {}

  // NewChrome creates a new instance of Chrome
  rpc NewChrome (google.protobuf.Empty) returns (google.protobuf.Empty) {}

  // CloseChrome closes an existing instance of Chrome
  rpc CloseChrome (google.protobuf.Empty) returns (google.protobuf.Empty) {}

  // ReuseChrome passes an Option to New to make Chrome reuse an exisiting Chrome session.
  rpc ReuseChrome (google.protobuf.Empty) returns (google.protobuf.Empty) {}

  // EvalTabletMode evaluates if DUT is in tablet mode.
  rpc EvalTabletMode (google.protobuf.Empty) returns (EvalTabletModeResponse) {}

  // FindSingleNode finds the specific UI node based on the passed in element.
  rpc FindSingleNode (NodeElement) returns (google.protobuf.Empty) {}

  // GetDetachableBaseValue retrieves the values of relevant detachable-base properties.
  rpc GetDetachableBaseValue (google.protobuf.Empty) returns (CrosConfigResponse) {}

  // PerformSpeedometerTest opens a speedometer test website, runs it and returns the result value.
  rpc PerformSpeedometerTest (google.protobuf.Empty) returns (SpeedometerResponse) {}
}

// ReadServoKeyboardRequest listens the servo's keyboard emulator for a specified duration in seconds.
message ReadServoKeyboardRequest {
  uint32 duration = 1;
}

// ReadServoKeyboardResponse provides what keys were pressed.
message ReadServoKeyboardResponse {
  repeated string keys = 1;
}

// FindPhysicalKeyboardResponse provides the path to /dev/input/event* for physical keyboard.
message FindPhysicalKeyboardResponse {
  string path = 1;
}

// EvalTabletModeResponse provides the tablet mode enabled status.
message EvalTabletModeResponse {
  bool tablet_mode_enabled = 1;
}

// NodeElement stores the element of UI node.
message NodeElement {
  string name = 1;
}

// CrosConfigResponse provides relevant crosconfig values.
message CrosConfigResponse {
  repeated string values = 1;
}

// SpeedometerResponse provides the result from running a speedometer test.
message SpeedometerResponse {
    string result = 1;
}