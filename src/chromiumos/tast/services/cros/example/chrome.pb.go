// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chrome.proto

/*
Package example is a generated protocol buffer package.

It is generated from these files:
	chrome.proto

It has these top-level messages:
	ChromeNewRequest
	ChromeNewResponse
	ChromeCloseRequest
	ChromeCloseResponse
	ChromeEvalOnTestAPIConnRequest
	ChromeEvalOnTestAPIConnResponse
*/
package example

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ChromeNewRequest struct {
}

func (m *ChromeNewRequest) Reset()                    { *m = ChromeNewRequest{} }
func (m *ChromeNewRequest) String() string            { return proto.CompactTextString(m) }
func (*ChromeNewRequest) ProtoMessage()               {}
func (*ChromeNewRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ChromeNewResponse struct {
}

func (m *ChromeNewResponse) Reset()                    { *m = ChromeNewResponse{} }
func (m *ChromeNewResponse) String() string            { return proto.CompactTextString(m) }
func (*ChromeNewResponse) ProtoMessage()               {}
func (*ChromeNewResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ChromeCloseRequest struct {
}

func (m *ChromeCloseRequest) Reset()                    { *m = ChromeCloseRequest{} }
func (m *ChromeCloseRequest) String() string            { return proto.CompactTextString(m) }
func (*ChromeCloseRequest) ProtoMessage()               {}
func (*ChromeCloseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ChromeCloseResponse struct {
}

func (m *ChromeCloseResponse) Reset()                    { *m = ChromeCloseResponse{} }
func (m *ChromeCloseResponse) String() string            { return proto.CompactTextString(m) }
func (*ChromeCloseResponse) ProtoMessage()               {}
func (*ChromeCloseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ChromeEvalOnTestAPIConnRequest struct {
	Expr string `protobuf:"bytes,1,opt,name=expr" json:"expr,omitempty"`
}

func (m *ChromeEvalOnTestAPIConnRequest) Reset()                    { *m = ChromeEvalOnTestAPIConnRequest{} }
func (m *ChromeEvalOnTestAPIConnRequest) String() string            { return proto.CompactTextString(m) }
func (*ChromeEvalOnTestAPIConnRequest) ProtoMessage()               {}
func (*ChromeEvalOnTestAPIConnRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ChromeEvalOnTestAPIConnRequest) GetExpr() string {
	if m != nil {
		return m.Expr
	}
	return ""
}

type ChromeEvalOnTestAPIConnResponse struct {
	ValueJson string `protobuf:"bytes,1,opt,name=value_json,json=valueJson" json:"value_json,omitempty"`
}

func (m *ChromeEvalOnTestAPIConnResponse) Reset()                    { *m = ChromeEvalOnTestAPIConnResponse{} }
func (m *ChromeEvalOnTestAPIConnResponse) String() string            { return proto.CompactTextString(m) }
func (*ChromeEvalOnTestAPIConnResponse) ProtoMessage()               {}
func (*ChromeEvalOnTestAPIConnResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ChromeEvalOnTestAPIConnResponse) GetValueJson() string {
	if m != nil {
		return m.ValueJson
	}
	return ""
}

func init() {
	proto.RegisterType((*ChromeNewRequest)(nil), "tast.cros.example.ChromeNewRequest")
	proto.RegisterType((*ChromeNewResponse)(nil), "tast.cros.example.ChromeNewResponse")
	proto.RegisterType((*ChromeCloseRequest)(nil), "tast.cros.example.ChromeCloseRequest")
	proto.RegisterType((*ChromeCloseResponse)(nil), "tast.cros.example.ChromeCloseResponse")
	proto.RegisterType((*ChromeEvalOnTestAPIConnRequest)(nil), "tast.cros.example.ChromeEvalOnTestAPIConnRequest")
	proto.RegisterType((*ChromeEvalOnTestAPIConnResponse)(nil), "tast.cros.example.ChromeEvalOnTestAPIConnResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Chrome service

type ChromeClient interface {
	New(ctx context.Context, in *ChromeNewRequest, opts ...grpc.CallOption) (*ChromeNewResponse, error)
	Close(ctx context.Context, in *ChromeCloseRequest, opts ...grpc.CallOption) (*ChromeCloseResponse, error)
	EvalOnTestAPIConn(ctx context.Context, in *ChromeEvalOnTestAPIConnRequest, opts ...grpc.CallOption) (*ChromeEvalOnTestAPIConnResponse, error)
}

type chromeClient struct {
	cc *grpc.ClientConn
}

func NewChromeClient(cc *grpc.ClientConn) ChromeClient {
	return &chromeClient{cc}
}

func (c *chromeClient) New(ctx context.Context, in *ChromeNewRequest, opts ...grpc.CallOption) (*ChromeNewResponse, error) {
	out := new(ChromeNewResponse)
	err := grpc.Invoke(ctx, "/tast.cros.example.Chrome/New", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chromeClient) Close(ctx context.Context, in *ChromeCloseRequest, opts ...grpc.CallOption) (*ChromeCloseResponse, error) {
	out := new(ChromeCloseResponse)
	err := grpc.Invoke(ctx, "/tast.cros.example.Chrome/Close", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chromeClient) EvalOnTestAPIConn(ctx context.Context, in *ChromeEvalOnTestAPIConnRequest, opts ...grpc.CallOption) (*ChromeEvalOnTestAPIConnResponse, error) {
	out := new(ChromeEvalOnTestAPIConnResponse)
	err := grpc.Invoke(ctx, "/tast.cros.example.Chrome/EvalOnTestAPIConn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chrome service

type ChromeServer interface {
	New(context.Context, *ChromeNewRequest) (*ChromeNewResponse, error)
	Close(context.Context, *ChromeCloseRequest) (*ChromeCloseResponse, error)
	EvalOnTestAPIConn(context.Context, *ChromeEvalOnTestAPIConnRequest) (*ChromeEvalOnTestAPIConnResponse, error)
}

func RegisterChromeServer(s *grpc.Server, srv ChromeServer) {
	s.RegisterService(&_Chrome_serviceDesc, srv)
}

func _Chrome_New_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChromeNewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChromeServer).New(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.example.Chrome/New",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChromeServer).New(ctx, req.(*ChromeNewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chrome_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChromeCloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChromeServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.example.Chrome/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChromeServer).Close(ctx, req.(*ChromeCloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chrome_EvalOnTestAPIConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChromeEvalOnTestAPIConnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChromeServer).EvalOnTestAPIConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.example.Chrome/EvalOnTestAPIConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChromeServer).EvalOnTestAPIConn(ctx, req.(*ChromeEvalOnTestAPIConnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chrome_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.example.Chrome",
	HandlerType: (*ChromeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "New",
			Handler:    _Chrome_New_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Chrome_Close_Handler,
		},
		{
			MethodName: "EvalOnTestAPIConn",
			Handler:    _Chrome_EvalOnTestAPIConn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chrome.proto",
}

func init() { proto.RegisterFile("chrome.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcd, 0x4a, 0xc3, 0x50,
	0x10, 0x85, 0xad, 0x3f, 0x85, 0x0e, 0x2e, 0xcc, 0x54, 0x41, 0x02, 0xfe, 0x10, 0xad, 0xba, 0x4a,
	0xb0, 0xfa, 0x00, 0x6a, 0x70, 0xa1, 0x8b, 0x2a, 0xc1, 0x85, 0xb8, 0x91, 0x18, 0x06, 0xac, 0x24,
	0x77, 0x62, 0xe6, 0x26, 0xed, 0xc2, 0xc7, 0xf2, 0x01, 0xa5, 0x37, 0xb7, 0x52, 0x2d, 0x51, 0xba,
	0x0b, 0x87, 0xf3, 0x7d, 0xe1, 0x5c, 0x06, 0xd6, 0x93, 0xd7, 0x82, 0x33, 0xf2, 0xf3, 0x82, 0x35,
	0xa3, 0xa3, 0x63, 0xd1, 0x7e, 0x52, 0xb0, 0xf8, 0x34, 0x8e, 0xb3, 0x3c, 0x25, 0x0f, 0x61, 0x23,
	0x34, 0x95, 0x01, 0x8d, 0x22, 0x7a, 0x2f, 0x49, 0xb4, 0xd7, 0x05, 0x67, 0x26, 0x93, 0x9c, 0x95,
	0x90, 0xb7, 0x09, 0x58, 0x87, 0x61, 0xca, 0x42, 0xd3, 0xea, 0x16, 0x74, 0x7f, 0xa4, 0xb6, 0x7c,
	0x0e, 0xbb, 0x75, 0x7c, 0x5d, 0xc5, 0xe9, 0x9d, 0x7a, 0x20, 0xd1, 0x97, 0xf7, 0x37, 0x21, 0x2b,
	0x65, 0x41, 0x44, 0x58, 0xa5, 0x71, 0x5e, 0x6c, 0xb7, 0xf6, 0x5b, 0x27, 0x9d, 0xc8, 0x7c, 0x7b,
	0x17, 0xb0, 0xd7, 0x48, 0xd5, 0x62, 0xdc, 0x01, 0xa8, 0xe2, 0xb4, 0xa4, 0xe7, 0x37, 0x61, 0x65,
	0xe1, 0x8e, 0x49, 0x6e, 0x85, 0x55, 0xff, 0x73, 0x19, 0xda, 0xb5, 0x02, 0x23, 0x58, 0x19, 0xd0,
	0x08, 0x0f, 0xfc, 0xb9, 0xcd, 0xfe, 0xef, 0xc1, 0xee, 0xe1, 0xdf, 0x25, 0x3b, 0x6a, 0x09, 0x1f,
	0x61, 0xcd, 0xec, 0xc4, 0x5e, 0x23, 0x30, 0xfb, 0x3a, 0xee, 0xd1, 0x7f, 0xb5, 0x6f, 0xf3, 0x07,
	0x38, 0x73, 0xa3, 0xf1, 0xb4, 0x11, 0x6f, 0x7a, 0x56, 0xb7, 0xbf, 0x08, 0x32, 0xfd, 0xfb, 0xd5,
	0xf1, 0x53, 0xcf, 0xdc, 0xc9, 0xb0, 0xcc, 0x58, 0x82, 0x89, 0x21, 0x10, 0x2a, 0xaa, 0x61, 0x42,
	0x12, 0x4c, 0x54, 0x81, 0x55, 0xbd, 0xb4, 0xcd, 0x1d, 0x9d, 0x7d, 0x05, 0x00, 0x00, 0xff, 0xff,
	0xfb, 0x38, 0xa4, 0xe0, 0x57, 0x02, 0x00, 0x00,
}
