// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chrome_service.proto

package example

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EvalOnTestAPIConnRequest struct {
	Expr                 string   `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EvalOnTestAPIConnRequest) Reset()         { *m = EvalOnTestAPIConnRequest{} }
func (m *EvalOnTestAPIConnRequest) String() string { return proto.CompactTextString(m) }
func (*EvalOnTestAPIConnRequest) ProtoMessage()    {}
func (*EvalOnTestAPIConnRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8249f672ed27190d, []int{0}
}

func (m *EvalOnTestAPIConnRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvalOnTestAPIConnRequest.Unmarshal(m, b)
}
func (m *EvalOnTestAPIConnRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvalOnTestAPIConnRequest.Marshal(b, m, deterministic)
}
func (m *EvalOnTestAPIConnRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvalOnTestAPIConnRequest.Merge(m, src)
}
func (m *EvalOnTestAPIConnRequest) XXX_Size() int {
	return xxx_messageInfo_EvalOnTestAPIConnRequest.Size(m)
}
func (m *EvalOnTestAPIConnRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EvalOnTestAPIConnRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EvalOnTestAPIConnRequest proto.InternalMessageInfo

func (m *EvalOnTestAPIConnRequest) GetExpr() string {
	if m != nil {
		return m.Expr
	}
	return ""
}

type EvalOnTestAPIConnResponse struct {
	ValueJson            string   `protobuf:"bytes,1,opt,name=value_json,json=valueJson,proto3" json:"value_json,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EvalOnTestAPIConnResponse) Reset()         { *m = EvalOnTestAPIConnResponse{} }
func (m *EvalOnTestAPIConnResponse) String() string { return proto.CompactTextString(m) }
func (*EvalOnTestAPIConnResponse) ProtoMessage()    {}
func (*EvalOnTestAPIConnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8249f672ed27190d, []int{1}
}

func (m *EvalOnTestAPIConnResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvalOnTestAPIConnResponse.Unmarshal(m, b)
}
func (m *EvalOnTestAPIConnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvalOnTestAPIConnResponse.Marshal(b, m, deterministic)
}
func (m *EvalOnTestAPIConnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvalOnTestAPIConnResponse.Merge(m, src)
}
func (m *EvalOnTestAPIConnResponse) XXX_Size() int {
	return xxx_messageInfo_EvalOnTestAPIConnResponse.Size(m)
}
func (m *EvalOnTestAPIConnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EvalOnTestAPIConnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EvalOnTestAPIConnResponse proto.InternalMessageInfo

func (m *EvalOnTestAPIConnResponse) GetValueJson() string {
	if m != nil {
		return m.ValueJson
	}
	return ""
}

func init() {
	proto.RegisterType((*EvalOnTestAPIConnRequest)(nil), "tast.cros.example.EvalOnTestAPIConnRequest")
	proto.RegisterType((*EvalOnTestAPIConnResponse)(nil), "tast.cros.example.EvalOnTestAPIConnResponse")
}

func init() { proto.RegisterFile("chrome_service.proto", fileDescriptor_8249f672ed27190d) }

var fileDescriptor_8249f672ed27190d = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xcf, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x1b, 0xfc, 0x01, 0x1d, 0xf0, 0xd0, 0x45, 0xa4, 0x46, 0x04, 0x09, 0x88, 0x82, 0xb2,
	0x0b, 0x7a, 0x10, 0xbd, 0x69, 0xe8, 0x41, 0x0f, 0x2a, 0xd5, 0x93, 0x97, 0x92, 0x86, 0xb1, 0x56,
	0x36, 0x3b, 0xeb, 0xce, 0x26, 0xd6, 0x3f, 0xdc, 0xbb, 0x64, 0x13, 0x4f, 0x35, 0x20, 0xbd, 0x2d,
	0xc3, 0xf7, 0x86, 0x6f, 0xdf, 0xc0, 0x76, 0xfe, 0xe6, 0xa8, 0xc0, 0x09, 0xa3, 0xab, 0xe6, 0x39,
	0x4a, 0xeb, 0xc8, 0x93, 0x18, 0xf8, 0x8c, 0xbd, 0xcc, 0x1d, 0xb1, 0xc4, 0x45, 0x56, 0x58, 0x8d,
	0xf1, 0xde, 0x8c, 0x68, 0xa6, 0x51, 0x05, 0x60, 0x5a, 0xbe, 0x2a, 0x2c, 0xac, 0xff, 0x6a, 0xf8,
	0x44, 0xc2, 0x70, 0x54, 0x65, 0xfa, 0xc1, 0x3c, 0x23, 0xfb, 0xeb, 0xc7, 0xdb, 0x94, 0x8c, 0x19,
	0xe3, 0x47, 0x89, 0xec, 0x85, 0x80, 0x75, 0x5c, 0x58, 0x37, 0x8c, 0x0e, 0xa2, 0xe3, 0xfe, 0x38,
	0xbc, 0x93, 0x2b, 0xd8, 0xfd, 0x83, 0x67, 0x4b, 0x86, 0x51, 0xec, 0x03, 0x54, 0x99, 0x2e, 0x71,
	0xf2, 0xce, 0x64, 0xda, 0x58, 0x3f, 0x4c, 0xee, 0x98, 0xcc, 0xd9, 0x77, 0x04, 0x5b, 0x69, 0x90,
	0x7e, 0x6a, 0x9c, 0xc5, 0x05, 0xac, 0xdd, 0xe3, 0xa7, 0xd8, 0x91, 0x8d, 0xa2, 0xfc, 0x55, 0x94,
	0xa3, 0x5a, 0x31, 0xee, 0x98, 0x27, 0x3d, 0x71, 0x09, 0x1b, 0xa9, 0x26, 0xc6, 0x15, 0xa2, 0x16,
	0x06, 0x4b, 0x3f, 0x10, 0x27, 0x72, 0xa9, 0x37, 0xd9, 0xd5, 0x4b, 0x7c, 0xfa, 0x3f, 0xb8, 0x29,
	0x25, 0xe9, 0xdd, 0x1c, 0xbd, 0x1c, 0x86, 0x5b, 0xcd, 0xcb, 0x82, 0x58, 0xd5, 0x59, 0xd5, 0x1e,
	0x8d, 0x55, 0xbd, 0x44, 0xb5, 0x4b, 0xa6, 0x9b, 0x41, 0xf6, 0xfc, 0x27, 0x00, 0x00, 0xff, 0xff,
	0x94, 0x1c, 0x4c, 0xe8, 0xdb, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChromeServiceClient is the client API for ChromeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChromeServiceClient interface {
	// New logs into a Chrome session as a fake user. Close must be called later
	// to clean up the associated resources.
	New(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Close releases the resources obtained by New.
	Close(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// EvalOnTestAPIConn evaluates a JavaScript expression in the test extension
	// background page.
	EvalOnTestAPIConn(ctx context.Context, in *EvalOnTestAPIConnRequest, opts ...grpc.CallOption) (*EvalOnTestAPIConnResponse, error)
}

type chromeServiceClient struct {
	cc *grpc.ClientConn
}

func NewChromeServiceClient(cc *grpc.ClientConn) ChromeServiceClient {
	return &chromeServiceClient{cc}
}

func (c *chromeServiceClient) New(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.example.ChromeService/New", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chromeServiceClient) Close(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.example.ChromeService/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chromeServiceClient) EvalOnTestAPIConn(ctx context.Context, in *EvalOnTestAPIConnRequest, opts ...grpc.CallOption) (*EvalOnTestAPIConnResponse, error) {
	out := new(EvalOnTestAPIConnResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.example.ChromeService/EvalOnTestAPIConn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChromeServiceServer is the server API for ChromeService service.
type ChromeServiceServer interface {
	// New logs into a Chrome session as a fake user. Close must be called later
	// to clean up the associated resources.
	New(context.Context, *empty.Empty) (*empty.Empty, error)
	// Close releases the resources obtained by New.
	Close(context.Context, *empty.Empty) (*empty.Empty, error)
	// EvalOnTestAPIConn evaluates a JavaScript expression in the test extension
	// background page.
	EvalOnTestAPIConn(context.Context, *EvalOnTestAPIConnRequest) (*EvalOnTestAPIConnResponse, error)
}

// UnimplementedChromeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChromeServiceServer struct {
}

func (*UnimplementedChromeServiceServer) New(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method New not implemented")
}
func (*UnimplementedChromeServiceServer) Close(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedChromeServiceServer) EvalOnTestAPIConn(ctx context.Context, req *EvalOnTestAPIConnRequest) (*EvalOnTestAPIConnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvalOnTestAPIConn not implemented")
}

func RegisterChromeServiceServer(s *grpc.Server, srv ChromeServiceServer) {
	s.RegisterService(&_ChromeService_serviceDesc, srv)
}

func _ChromeService_New_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChromeServiceServer).New(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.example.ChromeService/New",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChromeServiceServer).New(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChromeService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChromeServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.example.ChromeService/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChromeServiceServer).Close(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChromeService_EvalOnTestAPIConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvalOnTestAPIConnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChromeServiceServer).EvalOnTestAPIConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.example.ChromeService/EvalOnTestAPIConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChromeServiceServer).EvalOnTestAPIConn(ctx, req.(*EvalOnTestAPIConnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChromeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.example.ChromeService",
	HandlerType: (*ChromeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "New",
			Handler:    _ChromeService_New_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _ChromeService_Close_Handler,
		},
		{
			MethodName: "EvalOnTestAPIConn",
			Handler:    _ChromeService_EvalOnTestAPIConn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chrome_service.proto",
}
