// Copyright 2021 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: update_service.proto

package autoupdate

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OmahaUrl   string `protobuf:"bytes,1,opt,name=omaha_url,json=omahaUrl,proto3" json:"omaha_url,omitempty"`
	AppVersion string `protobuf:"bytes,2,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_update_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_update_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_update_service_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateRequest) GetOmahaUrl() string {
	if x != nil {
		return x.OmahaUrl
	}
	return ""
}

func (x *UpdateRequest) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

type LSBRelease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentJson []byte `protobuf:"bytes,1,opt,name=content_json,json=contentJson,proto3" json:"content_json,omitempty"`
}

func (x *LSBRelease) Reset() {
	*x = LSBRelease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_update_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LSBRelease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LSBRelease) ProtoMessage() {}

func (x *LSBRelease) ProtoReflect() protoreflect.Message {
	mi := &file_update_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LSBRelease.ProtoReflect.Descriptor instead.
func (*LSBRelease) Descriptor() ([]byte, []int) {
	return file_update_service_proto_rawDescGZIP(), []int{1}
}

func (x *LSBRelease) GetContentJson() []byte {
	if x != nil {
		return x.ContentJson
	}
	return nil
}

var File_update_service_proto protoreflect.FileDescriptor

var file_update_service_proto_rawDesc = []byte{
	0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f,
	0x73, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4d, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6d,
	0x61, 0x68, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f,
	0x6d, 0x61, 0x68, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2f, 0x0a, 0x0a, 0x4c, 0x53, 0x42, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x32, 0xe5, 0x02, 0x0a, 0x0d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e,
	0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x11,
	0x4c, 0x53, 0x42, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x74, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x4c, 0x53, 0x42, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a,
	0x19, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x4c, 0x53, 0x42, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x20, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x53, 0x42, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x1b, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x4c, 0x53, 0x42, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x20, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f,
	0x73, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x53, 0x42,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x42, 0x2a, 0x5a, 0x28, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f,
	0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72,
	0x6f, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_update_service_proto_rawDescOnce sync.Once
	file_update_service_proto_rawDescData = file_update_service_proto_rawDesc
)

func file_update_service_proto_rawDescGZIP() []byte {
	file_update_service_proto_rawDescOnce.Do(func() {
		file_update_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_update_service_proto_rawDescData)
	})
	return file_update_service_proto_rawDescData
}

var file_update_service_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_update_service_proto_goTypes = []interface{}{
	(*UpdateRequest)(nil), // 0: tast.cros.autoupdate.UpdateRequest
	(*LSBRelease)(nil),    // 1: tast.cros.autoupdate.LSBRelease
	(*empty.Empty)(nil),   // 2: google.protobuf.Empty
}
var file_update_service_proto_depIdxs = []int32{
	0, // 0: tast.cros.autoupdate.UpdateService.CheckForUpdate:input_type -> tast.cros.autoupdate.UpdateRequest
	2, // 1: tast.cros.autoupdate.UpdateService.LSBReleaseContent:input_type -> google.protobuf.Empty
	2, // 2: tast.cros.autoupdate.UpdateService.StatefulLSBReleaseContent:input_type -> google.protobuf.Empty
	1, // 3: tast.cros.autoupdate.UpdateService.OverwriteStatefulLSBRelease:input_type -> tast.cros.autoupdate.LSBRelease
	2, // 4: tast.cros.autoupdate.UpdateService.CheckForUpdate:output_type -> google.protobuf.Empty
	1, // 5: tast.cros.autoupdate.UpdateService.LSBReleaseContent:output_type -> tast.cros.autoupdate.LSBRelease
	1, // 6: tast.cros.autoupdate.UpdateService.StatefulLSBReleaseContent:output_type -> tast.cros.autoupdate.LSBRelease
	2, // 7: tast.cros.autoupdate.UpdateService.OverwriteStatefulLSBRelease:output_type -> google.protobuf.Empty
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_update_service_proto_init() }
func file_update_service_proto_init() {
	if File_update_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_update_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_update_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LSBRelease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_update_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_update_service_proto_goTypes,
		DependencyIndexes: file_update_service_proto_depIdxs,
		MessageInfos:      file_update_service_proto_msgTypes,
	}.Build()
	File_update_service_proto = out.File
	file_update_service_proto_rawDesc = nil
	file_update_service_proto_goTypes = nil
	file_update_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UpdateServiceClient is the client API for UpdateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UpdateServiceClient interface {
	CheckForUpdate(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	LSBReleaseContent(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LSBRelease, error)
	StatefulLSBReleaseContent(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LSBRelease, error)
	OverwriteStatefulLSBRelease(ctx context.Context, in *LSBRelease, opts ...grpc.CallOption) (*empty.Empty, error)
}

type updateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdateServiceClient(cc grpc.ClientConnInterface) UpdateServiceClient {
	return &updateServiceClient{cc}
}

func (c *updateServiceClient) CheckForUpdate(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.autoupdate.UpdateService/CheckForUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServiceClient) LSBReleaseContent(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LSBRelease, error) {
	out := new(LSBRelease)
	err := c.cc.Invoke(ctx, "/tast.cros.autoupdate.UpdateService/LSBReleaseContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServiceClient) StatefulLSBReleaseContent(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LSBRelease, error) {
	out := new(LSBRelease)
	err := c.cc.Invoke(ctx, "/tast.cros.autoupdate.UpdateService/StatefulLSBReleaseContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServiceClient) OverwriteStatefulLSBRelease(ctx context.Context, in *LSBRelease, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.autoupdate.UpdateService/OverwriteStatefulLSBRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdateServiceServer is the server API for UpdateService service.
type UpdateServiceServer interface {
	CheckForUpdate(context.Context, *UpdateRequest) (*empty.Empty, error)
	LSBReleaseContent(context.Context, *empty.Empty) (*LSBRelease, error)
	StatefulLSBReleaseContent(context.Context, *empty.Empty) (*LSBRelease, error)
	OverwriteStatefulLSBRelease(context.Context, *LSBRelease) (*empty.Empty, error)
}

// UnimplementedUpdateServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUpdateServiceServer struct {
}

func (*UnimplementedUpdateServiceServer) CheckForUpdate(context.Context, *UpdateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckForUpdate not implemented")
}
func (*UnimplementedUpdateServiceServer) LSBReleaseContent(context.Context, *empty.Empty) (*LSBRelease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LSBReleaseContent not implemented")
}
func (*UnimplementedUpdateServiceServer) StatefulLSBReleaseContent(context.Context, *empty.Empty) (*LSBRelease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatefulLSBReleaseContent not implemented")
}
func (*UnimplementedUpdateServiceServer) OverwriteStatefulLSBRelease(context.Context, *LSBRelease) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverwriteStatefulLSBRelease not implemented")
}

func RegisterUpdateServiceServer(s *grpc.Server, srv UpdateServiceServer) {
	s.RegisterService(&_UpdateService_serviceDesc, srv)
}

func _UpdateService_CheckForUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).CheckForUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.autoupdate.UpdateService/CheckForUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).CheckForUpdate(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateService_LSBReleaseContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).LSBReleaseContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.autoupdate.UpdateService/LSBReleaseContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).LSBReleaseContent(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateService_StatefulLSBReleaseContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).StatefulLSBReleaseContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.autoupdate.UpdateService/StatefulLSBReleaseContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).StatefulLSBReleaseContent(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateService_OverwriteStatefulLSBRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LSBRelease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).OverwriteStatefulLSBRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.autoupdate.UpdateService/OverwriteStatefulLSBRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).OverwriteStatefulLSBRelease(ctx, req.(*LSBRelease))
	}
	return interceptor(ctx, in, info, handler)
}

var _UpdateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.autoupdate.UpdateService",
	HandlerType: (*UpdateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckForUpdate",
			Handler:    _UpdateService_CheckForUpdate_Handler,
		},
		{
			MethodName: "LSBReleaseContent",
			Handler:    _UpdateService_LSBReleaseContent_Handler,
		},
		{
			MethodName: "StatefulLSBReleaseContent",
			Handler:    _UpdateService_StatefulLSBReleaseContent_Handler,
		},
		{
			MethodName: "OverwriteStatefulLSBRelease",
			Handler:    _UpdateService_OverwriteStatefulLSBRelease_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "update_service.proto",
}
