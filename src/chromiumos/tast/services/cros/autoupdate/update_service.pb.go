// Code generated by protoc-gen-go. DO NOT EDIT.
// source: update_service.proto

package autoupdate

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UpdateRequest struct {
	OmahaUrl             string   `protobuf:"bytes,1,opt,name=omaha_url,json=omahaUrl,proto3" json:"omaha_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateRequest) Reset()         { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()    {}
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d799ab2bedaf462b, []int{0}
}

func (m *UpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRequest.Unmarshal(m, b)
}
func (m *UpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRequest.Marshal(b, m, deterministic)
}
func (m *UpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRequest.Merge(m, src)
}
func (m *UpdateRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateRequest.Size(m)
}
func (m *UpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRequest proto.InternalMessageInfo

func (m *UpdateRequest) GetOmahaUrl() string {
	if m != nil {
		return m.OmahaUrl
	}
	return ""
}

type LSBRelease struct {
	ContentJson          []byte   `protobuf:"bytes,1,opt,name=content_json,json=contentJson,proto3" json:"content_json,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LSBRelease) Reset()         { *m = LSBRelease{} }
func (m *LSBRelease) String() string { return proto.CompactTextString(m) }
func (*LSBRelease) ProtoMessage()    {}
func (*LSBRelease) Descriptor() ([]byte, []int) {
	return fileDescriptor_d799ab2bedaf462b, []int{1}
}

func (m *LSBRelease) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LSBRelease.Unmarshal(m, b)
}
func (m *LSBRelease) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LSBRelease.Marshal(b, m, deterministic)
}
func (m *LSBRelease) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LSBRelease.Merge(m, src)
}
func (m *LSBRelease) XXX_Size() int {
	return xxx_messageInfo_LSBRelease.Size(m)
}
func (m *LSBRelease) XXX_DiscardUnknown() {
	xxx_messageInfo_LSBRelease.DiscardUnknown(m)
}

var xxx_messageInfo_LSBRelease proto.InternalMessageInfo

func (m *LSBRelease) GetContentJson() []byte {
	if m != nil {
		return m.ContentJson
	}
	return nil
}

func init() {
	proto.RegisterType((*UpdateRequest)(nil), "tast.cros.autoupdate.UpdateRequest")
	proto.RegisterType((*LSBRelease)(nil), "tast.cros.autoupdate.LSBRelease")
}

func init() { proto.RegisterFile("update_service.proto", fileDescriptor_d799ab2bedaf462b) }

var fileDescriptor_d799ab2bedaf462b = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0x41, 0x4b, 0xfb, 0x40,
	0x10, 0xc5, 0xdb, 0xff, 0xe1, 0x8f, 0x5d, 0xab, 0xe0, 0x52, 0x44, 0x9b, 0x4b, 0x8d, 0x97, 0x22,
	0xb2, 0x0b, 0xfa, 0x0d, 0x5a, 0xf4, 0x20, 0x42, 0x20, 0xa1, 0x88, 0x5e, 0xc2, 0x36, 0x4e, 0x9b,
	0x68, 0x92, 0x89, 0xbb, 0xb3, 0x15, 0x3f, 0xb0, 0xdf, 0x43, 0x92, 0x6d, 0x09, 0x62, 0x8b, 0x17,
	0xaf, 0xb3, 0x6f, 0x7e, 0xef, 0xbd, 0x65, 0xd8, 0xc0, 0x56, 0xcf, 0x8a, 0x20, 0x36, 0xa0, 0x57,
	0x59, 0x02, 0xa2, 0xd2, 0x48, 0xc8, 0x07, 0xa4, 0x0c, 0x89, 0x44, 0xa3, 0x11, 0xca, 0x12, 0x3a,
	0xcd, 0xd0, 0x5b, 0x22, 0x2e, 0x73, 0x90, 0x8d, 0x66, 0x6e, 0x17, 0x12, 0x8a, 0x8a, 0x3e, 0xdc,
	0x8a, 0x7f, 0xc9, 0x0e, 0x66, 0x8d, 0x2c, 0x84, 0x37, 0x0b, 0x86, 0xb8, 0xc7, 0x7a, 0x58, 0xa8,
	0x54, 0xc5, 0x56, 0xe7, 0x27, 0xdd, 0x51, 0x77, 0xdc, 0x0b, 0xf7, 0x9a, 0xc1, 0x4c, 0xe7, 0xbe,
	0x64, 0xec, 0x3e, 0x9a, 0x84, 0x90, 0x83, 0x32, 0xc0, 0xcf, 0x58, 0x3f, 0xc1, 0x92, 0xa0, 0xa4,
	0xf8, 0xc5, 0x60, 0xd9, 0xa8, 0xfb, 0xe1, 0xfe, 0x7a, 0x76, 0x67, 0xb0, 0xbc, 0xfa, 0xfc, 0xb7,
	0xe1, 0x47, 0x2e, 0x29, 0x0f, 0xd8, 0xe1, 0x34, 0x85, 0xe4, 0xf5, 0x16, 0xb5, 0x7b, 0xe0, 0xe7,
	0x62, 0x5b, 0x6c, 0xf1, 0x2d, 0xd6, 0xf0, 0x58, 0xb8, 0x16, 0x62, 0xd3, 0x42, 0xdc, 0xd4, 0x2d,
	0xfc, 0x0e, 0x0f, 0xd8, 0x51, 0x9b, 0x69, 0xea, 0xbc, 0xf9, 0x0e, 0xf9, 0x70, 0xb4, 0xdd, 0xab,
	0x05, 0xf8, 0x1d, 0xfe, 0xc0, 0x4e, 0x23, 0x52, 0x04, 0x0b, 0x9b, 0xff, 0x2d, 0xf8, 0x91, 0x79,
	0xc1, 0x0a, 0xf4, 0xbb, 0xce, 0x08, 0x7e, 0x3a, 0xf0, 0x5f, 0x11, 0xbb, 0x3f, 0x61, 0x72, 0xf1,
	0x34, 0x4e, 0x52, 0x8d, 0x45, 0x66, 0x0b, 0x34, 0xb2, 0xe6, 0xc8, 0xf5, 0x69, 0x18, 0x59, 0x03,
	0x65, 0x0b, 0x9c, 0xff, 0x6f, 0xb6, 0xaf, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x54, 0xbf, 0x90,
	0x54, 0x44, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UpdateServiceClient is the client API for UpdateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UpdateServiceClient interface {
	CheckForUpdate(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	LSBReleaseContent(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LSBRelease, error)
	StatefulLSBReleaseContent(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LSBRelease, error)
	OverwriteStatefulLSBRelease(ctx context.Context, in *LSBRelease, opts ...grpc.CallOption) (*empty.Empty, error)
}

type updateServiceClient struct {
	cc *grpc.ClientConn
}

func NewUpdateServiceClient(cc *grpc.ClientConn) UpdateServiceClient {
	return &updateServiceClient{cc}
}

func (c *updateServiceClient) CheckForUpdate(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.autoupdate.UpdateService/CheckForUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServiceClient) LSBReleaseContent(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LSBRelease, error) {
	out := new(LSBRelease)
	err := c.cc.Invoke(ctx, "/tast.cros.autoupdate.UpdateService/LSBReleaseContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServiceClient) StatefulLSBReleaseContent(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LSBRelease, error) {
	out := new(LSBRelease)
	err := c.cc.Invoke(ctx, "/tast.cros.autoupdate.UpdateService/StatefulLSBReleaseContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServiceClient) OverwriteStatefulLSBRelease(ctx context.Context, in *LSBRelease, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.autoupdate.UpdateService/OverwriteStatefulLSBRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdateServiceServer is the server API for UpdateService service.
type UpdateServiceServer interface {
	CheckForUpdate(context.Context, *UpdateRequest) (*empty.Empty, error)
	LSBReleaseContent(context.Context, *empty.Empty) (*LSBRelease, error)
	StatefulLSBReleaseContent(context.Context, *empty.Empty) (*LSBRelease, error)
	OverwriteStatefulLSBRelease(context.Context, *LSBRelease) (*empty.Empty, error)
}

// UnimplementedUpdateServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUpdateServiceServer struct {
}

func (*UnimplementedUpdateServiceServer) CheckForUpdate(ctx context.Context, req *UpdateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckForUpdate not implemented")
}
func (*UnimplementedUpdateServiceServer) LSBReleaseContent(ctx context.Context, req *empty.Empty) (*LSBRelease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LSBReleaseContent not implemented")
}
func (*UnimplementedUpdateServiceServer) StatefulLSBReleaseContent(ctx context.Context, req *empty.Empty) (*LSBRelease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatefulLSBReleaseContent not implemented")
}
func (*UnimplementedUpdateServiceServer) OverwriteStatefulLSBRelease(ctx context.Context, req *LSBRelease) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverwriteStatefulLSBRelease not implemented")
}

func RegisterUpdateServiceServer(s *grpc.Server, srv UpdateServiceServer) {
	s.RegisterService(&_UpdateService_serviceDesc, srv)
}

func _UpdateService_CheckForUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).CheckForUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.autoupdate.UpdateService/CheckForUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).CheckForUpdate(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateService_LSBReleaseContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).LSBReleaseContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.autoupdate.UpdateService/LSBReleaseContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).LSBReleaseContent(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateService_StatefulLSBReleaseContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).StatefulLSBReleaseContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.autoupdate.UpdateService/StatefulLSBReleaseContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).StatefulLSBReleaseContent(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateService_OverwriteStatefulLSBRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LSBRelease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).OverwriteStatefulLSBRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.autoupdate.UpdateService/OverwriteStatefulLSBRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).OverwriteStatefulLSBRelease(ctx, req.(*LSBRelease))
	}
	return interceptor(ctx, in, info, handler)
}

var _UpdateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.autoupdate.UpdateService",
	HandlerType: (*UpdateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckForUpdate",
			Handler:    _UpdateService_CheckForUpdate_Handler,
		},
		{
			MethodName: "LSBReleaseContent",
			Handler:    _UpdateService_LSBReleaseContent_Handler,
		},
		{
			MethodName: "StatefulLSBReleaseContent",
			Handler:    _UpdateService_StatefulLSBReleaseContent_Handler,
		},
		{
			MethodName: "OverwriteStatefulLSBRelease",
			Handler:    _UpdateService_OverwriteStatefulLSBRelease_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "update_service.proto",
}
