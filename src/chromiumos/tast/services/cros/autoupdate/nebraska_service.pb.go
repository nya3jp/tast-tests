// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nebraska_service.proto

package autoupdate

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StartRequest struct {
	Port                 string   `protobuf:"bytes,1,opt,name=port,proto3" json:"port,omitempty"`
	HostLogPath          string   `protobuf:"bytes,2,opt,name=host_log_path,json=hostLogPath,proto3" json:"host_log_path,omitempty"`
	Install              *Payload `protobuf:"bytes,3,opt,name=install,proto3" json:"install,omitempty"`
	Update               *Payload `protobuf:"bytes,4,opt,name=update,proto3" json:"update,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartRequest) Reset()         { *m = StartRequest{} }
func (m *StartRequest) String() string { return proto.CompactTextString(m) }
func (*StartRequest) ProtoMessage()    {}
func (*StartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2df1c249e748dda, []int{0}
}

func (m *StartRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartRequest.Unmarshal(m, b)
}
func (m *StartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartRequest.Marshal(b, m, deterministic)
}
func (m *StartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartRequest.Merge(m, src)
}
func (m *StartRequest) XXX_Size() int {
	return xxx_messageInfo_StartRequest.Size(m)
}
func (m *StartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartRequest proto.InternalMessageInfo

func (m *StartRequest) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *StartRequest) GetHostLogPath() string {
	if m != nil {
		return m.HostLogPath
	}
	return ""
}

func (m *StartRequest) GetInstall() *Payload {
	if m != nil {
		return m.Install
	}
	return nil
}

func (m *StartRequest) GetUpdate() *Payload {
	if m != nil {
		return m.Update
	}
	return nil
}

type Payload struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	MetadataFolder       string   `protobuf:"bytes,2,opt,name=metadata_folder,json=metadataFolder,proto3" json:"metadata_folder,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Payload) Reset()         { *m = Payload{} }
func (m *Payload) String() string { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()    {}
func (*Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2df1c249e748dda, []int{1}
}

func (m *Payload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Payload.Unmarshal(m, b)
}
func (m *Payload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Payload.Marshal(b, m, deterministic)
}
func (m *Payload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payload.Merge(m, src)
}
func (m *Payload) XXX_Size() int {
	return xxx_messageInfo_Payload.Size(m)
}
func (m *Payload) XXX_DiscardUnknown() {
	xxx_messageInfo_Payload.DiscardUnknown(m)
}

var xxx_messageInfo_Payload proto.InternalMessageInfo

func (m *Payload) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Payload) GetMetadataFolder() string {
	if m != nil {
		return m.MetadataFolder
	}
	return ""
}

type StartResponse struct {
	Port                 string   `protobuf:"bytes,1,opt,name=port,proto3" json:"port,omitempty"`
	LogPath              string   `protobuf:"bytes,2,opt,name=log_path,json=logPath,proto3" json:"log_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartResponse) Reset()         { *m = StartResponse{} }
func (m *StartResponse) String() string { return proto.CompactTextString(m) }
func (*StartResponse) ProtoMessage()    {}
func (*StartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2df1c249e748dda, []int{2}
}

func (m *StartResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartResponse.Unmarshal(m, b)
}
func (m *StartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartResponse.Marshal(b, m, deterministic)
}
func (m *StartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartResponse.Merge(m, src)
}
func (m *StartResponse) XXX_Size() int {
	return xxx_messageInfo_StartResponse.Size(m)
}
func (m *StartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartResponse proto.InternalMessageInfo

func (m *StartResponse) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *StartResponse) GetLogPath() string {
	if m != nil {
		return m.LogPath
	}
	return ""
}

type CreateTempDirResponse struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTempDirResponse) Reset()         { *m = CreateTempDirResponse{} }
func (m *CreateTempDirResponse) String() string { return proto.CompactTextString(m) }
func (*CreateTempDirResponse) ProtoMessage()    {}
func (*CreateTempDirResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2df1c249e748dda, []int{3}
}

func (m *CreateTempDirResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateTempDirResponse.Unmarshal(m, b)
}
func (m *CreateTempDirResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateTempDirResponse.Marshal(b, m, deterministic)
}
func (m *CreateTempDirResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTempDirResponse.Merge(m, src)
}
func (m *CreateTempDirResponse) XXX_Size() int {
	return xxx_messageInfo_CreateTempDirResponse.Size(m)
}
func (m *CreateTempDirResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTempDirResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTempDirResponse proto.InternalMessageInfo

func (m *CreateTempDirResponse) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func init() {
	proto.RegisterType((*StartRequest)(nil), "tast.cros.autoupdate.StartRequest")
	proto.RegisterType((*Payload)(nil), "tast.cros.autoupdate.Payload")
	proto.RegisterType((*StartResponse)(nil), "tast.cros.autoupdate.StartResponse")
	proto.RegisterType((*CreateTempDirResponse)(nil), "tast.cros.autoupdate.CreateTempDirResponse")
}

func init() { proto.RegisterFile("nebraska_service.proto", fileDescriptor_c2df1c249e748dda) }

var fileDescriptor_c2df1c249e748dda = []byte{
	// 399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x4b, 0x8b, 0xd4, 0x40,
	0x10, 0xc7, 0x67, 0xd6, 0x71, 0x47, 0x6b, 0x8d, 0x0b, 0x8d, 0x2e, 0x71, 0x44, 0x58, 0xda, 0x83,
	0x83, 0x0b, 0x1d, 0x58, 0x11, 0x3d, 0x09, 0x3e, 0x4f, 0x8b, 0x2c, 0x19, 0xf1, 0xe0, 0x25, 0xd4,
	0x4c, 0x6a, 0x93, 0x60, 0x32, 0xd5, 0x76, 0x57, 0x16, 0xf6, 0x8b, 0x79, 0xf0, 0xd3, 0x49, 0x5e,
	0xe8, 0x4a, 0x46, 0xbd, 0x25, 0xff, 0xfe, 0x57, 0xf5, 0xaf, 0x1e, 0x0d, 0x47, 0x5b, 0x5a, 0x3b,
	0xf4, 0x5f, 0x31, 0xf1, 0xe4, 0x2e, 0x8b, 0x0d, 0x19, 0xeb, 0x58, 0x58, 0xdd, 0x13, 0xf4, 0x62,
	0x36, 0x8e, 0xbd, 0xc1, 0x5a, 0xb8, 0xb6, 0x29, 0x0a, 0x2d, 0x1e, 0x66, 0xcc, 0x59, 0x49, 0x51,
	0xeb, 0x59, 0xd7, 0x17, 0x11, 0x55, 0x56, 0xae, 0xba, 0x10, 0xfd, 0x7d, 0x0a, 0x77, 0x56, 0x82,
	0x4e, 0x62, 0xfa, 0x56, 0x93, 0x17, 0xa5, 0x60, 0x66, 0xd9, 0x49, 0x38, 0x3d, 0x9e, 0x2e, 0x6f,
	0xc7, 0xed, 0xb7, 0xd2, 0x10, 0xe4, 0xec, 0x25, 0x29, 0x39, 0x4b, 0x2c, 0x4a, 0x1e, 0xee, 0xb5,
	0x87, 0x07, 0x8d, 0x78, 0xc6, 0xd9, 0x39, 0x4a, 0xae, 0x5e, 0xc0, 0xbc, 0xd8, 0x7a, 0xc1, 0xb2,
	0x0c, 0x6f, 0x1c, 0x4f, 0x97, 0x07, 0xa7, 0x8f, 0xcc, 0x18, 0x8d, 0x39, 0xc7, 0xab, 0x92, 0x31,
	0x8d, 0x07, 0xb7, 0x7a, 0x0e, 0xfb, 0xdd, 0x51, 0x38, 0xfb, 0x9f, 0xb8, 0xde, 0xac, 0xcf, 0x60,
	0xde, 0x4b, 0x2a, 0x84, 0x39, 0xa6, 0xa9, 0x23, 0xef, 0x7b, 0xea, 0xe1, 0x57, 0x3d, 0x81, 0xc3,
	0x8a, 0x04, 0x53, 0x14, 0x4c, 0x2e, 0xb8, 0x4c, 0xc9, 0xf5, 0xe8, 0x77, 0x07, 0xf9, 0x43, 0xab,
	0xea, 0x57, 0x10, 0xf4, 0x5d, 0xf0, 0x96, 0xb7, 0x9e, 0x46, 0xdb, 0xf0, 0x00, 0x6e, 0xfd, 0xd1,
	0x81, 0x79, 0xd9, 0x55, 0xaf, 0x4f, 0xe0, 0xfe, 0x5b, 0x47, 0x28, 0xf4, 0x89, 0x2a, 0xfb, 0xae,
	0x70, 0xd7, 0xf2, 0x34, 0xfe, 0x21, 0x0f, 0x4a, 0x7e, 0xfa, 0x63, 0x0f, 0x0e, 0x3f, 0xf6, 0x13,
	0x5c, 0x75, 0x03, 0x54, 0x31, 0xdc, 0x6c, 0x01, 0x94, 0x1e, 0x2f, 0xff, 0xf7, 0x19, 0x2d, 0x1e,
	0xff, 0xd5, 0xd3, 0xdd, 0xac, 0x27, 0xea, 0x25, 0xcc, 0x56, 0xc2, 0x56, 0x1d, 0x99, 0x6e, 0x03,
	0xcc, 0xb0, 0x01, 0xe6, 0x7d, 0xb3, 0x01, 0x8b, 0x1d, 0xba, 0x9e, 0xa8, 0xcf, 0x10, 0x5c, 0x2b,
	0x67, 0x67, 0x8a, 0x93, 0x71, 0x92, 0xd1, 0x5e, 0xe8, 0x89, 0x7a, 0x0d, 0x41, 0x4c, 0x15, 0x5f,
	0xfe, 0x33, 0xef, 0x4e, 0xb4, 0x37, 0x4f, 0xbf, 0x2c, 0x37, 0xb9, 0xe3, 0xaa, 0xa8, 0x2b, 0xf6,
	0x51, 0x73, 0x7b, 0xd4, 0x3f, 0x02, 0x1f, 0x35, 0x18, 0xd1, 0x2f, 0x8c, 0xf5, 0x7e, 0x1b, 0xfd,
	0xec, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x0c, 0xf1, 0xf3, 0x30, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NebraskaServiceClient is the client API for NebraskaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NebraskaServiceClient interface {
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	Stop(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateTempDir(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CreateTempDirResponse, error)
	RemoveTempDir(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type nebraskaServiceClient struct {
	cc *grpc.ClientConn
}

func NewNebraskaServiceClient(cc *grpc.ClientConn) NebraskaServiceClient {
	return &nebraskaServiceClient{cc}
}

func (c *nebraskaServiceClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.autoupdate.NebraskaService/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nebraskaServiceClient) Stop(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.autoupdate.NebraskaService/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nebraskaServiceClient) CreateTempDir(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CreateTempDirResponse, error) {
	out := new(CreateTempDirResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.autoupdate.NebraskaService/CreateTempDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nebraskaServiceClient) RemoveTempDir(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.autoupdate.NebraskaService/RemoveTempDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NebraskaServiceServer is the server API for NebraskaService service.
type NebraskaServiceServer interface {
	Start(context.Context, *StartRequest) (*StartResponse, error)
	Stop(context.Context, *empty.Empty) (*empty.Empty, error)
	CreateTempDir(context.Context, *empty.Empty) (*CreateTempDirResponse, error)
	RemoveTempDir(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedNebraskaServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNebraskaServiceServer struct {
}

func (*UnimplementedNebraskaServiceServer) Start(ctx context.Context, req *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedNebraskaServiceServer) Stop(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedNebraskaServiceServer) CreateTempDir(ctx context.Context, req *empty.Empty) (*CreateTempDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTempDir not implemented")
}
func (*UnimplementedNebraskaServiceServer) RemoveTempDir(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTempDir not implemented")
}

func RegisterNebraskaServiceServer(s *grpc.Server, srv NebraskaServiceServer) {
	s.RegisterService(&_NebraskaService_serviceDesc, srv)
}

func _NebraskaService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NebraskaServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.autoupdate.NebraskaService/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NebraskaServiceServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NebraskaService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NebraskaServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.autoupdate.NebraskaService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NebraskaServiceServer).Stop(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NebraskaService_CreateTempDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NebraskaServiceServer).CreateTempDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.autoupdate.NebraskaService/CreateTempDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NebraskaServiceServer).CreateTempDir(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NebraskaService_RemoveTempDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NebraskaServiceServer).RemoveTempDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.autoupdate.NebraskaService/RemoveTempDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NebraskaServiceServer).RemoveTempDir(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _NebraskaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.autoupdate.NebraskaService",
	HandlerType: (*NebraskaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _NebraskaService_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _NebraskaService_Stop_Handler,
		},
		{
			MethodName: "CreateTempDir",
			Handler:    _NebraskaService_CreateTempDir_Handler,
		},
		{
			MethodName: "RemoveTempDir",
			Handler:    _NebraskaService_RemoveTempDir_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nebraska_service.proto",
}
