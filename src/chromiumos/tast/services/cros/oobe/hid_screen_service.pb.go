// Copyright 2022 The ChromiumOS Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: hid_screen_service.proto

package oobe

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_hid_screen_service_proto protoreflect.FileDescriptor

var file_hid_screen_service_proto_rawDesc = []byte{
	0x0a, 0x18, 0x68, 0x69, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x74, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x6f, 0x6f, 0x62, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xca, 0x02, 0x0a, 0x10, 0x48, 0x69, 0x64, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x15,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x4d, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x18, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x6f,
	0x75, 0x73, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x41, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x1b, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x41, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x42, 0x24, 0x5a, 0x22, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d,
	0x6f, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x6f, 0x6f, 0x62, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var file_hid_screen_service_proto_goTypes = []interface{}{
	(*emptypb.Empty)(nil), // 0: google.protobuf.Empty
}
var file_hid_screen_service_proto_depIdxs = []int32{
	0, // 0: tast.cros.oobe.HidScreenService.ConnectAndVerifyMouse:input_type -> google.protobuf.Empty
	0, // 1: tast.cros.oobe.HidScreenService.DisconnectAndVerifyMouse:input_type -> google.protobuf.Empty
	0, // 2: tast.cros.oobe.HidScreenService.ConnectAndVerifyKeyboard:input_type -> google.protobuf.Empty
	0, // 3: tast.cros.oobe.HidScreenService.DisconnectAndVerifyKeyboard:input_type -> google.protobuf.Empty
	0, // 4: tast.cros.oobe.HidScreenService.ConnectAndVerifyMouse:output_type -> google.protobuf.Empty
	0, // 5: tast.cros.oobe.HidScreenService.DisconnectAndVerifyMouse:output_type -> google.protobuf.Empty
	0, // 6: tast.cros.oobe.HidScreenService.ConnectAndVerifyKeyboard:output_type -> google.protobuf.Empty
	0, // 7: tast.cros.oobe.HidScreenService.DisconnectAndVerifyKeyboard:output_type -> google.protobuf.Empty
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_hid_screen_service_proto_init() }
func file_hid_screen_service_proto_init() {
	if File_hid_screen_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hid_screen_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hid_screen_service_proto_goTypes,
		DependencyIndexes: file_hid_screen_service_proto_depIdxs,
	}.Build()
	File_hid_screen_service_proto = out.File
	file_hid_screen_service_proto_rawDesc = nil
	file_hid_screen_service_proto_goTypes = nil
	file_hid_screen_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HidScreenServiceClient is the client API for HidScreenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HidScreenServiceClient interface {
	// ConnectAndVerifyMouse creates an instance of a USB mouse device and verifies that
	// the mouse is connected to in HID Detection screen and continue button is in the right
	// state.
	ConnectAndVerifyMouse(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DisconnectAndVerifyMouse creates an instance of a USB mouse device and verifies that
	// the mouse can be disconnected in HID Detection screen and continue button in the right
	// state.
	DisconnectAndVerifyMouse(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ConnectAndVerifyKeyboard creates an instance of a USB keyboard device and verifies that
	// the keyboard is connected to in HID Detection screen and continue button in the right
	// state.
	ConnectAndVerifyKeyboard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DisconnectAndVerifyKeyboard creates an instance of a USB keyboard device and verifies that
	// the keyboard can be disconnected in HID Detection screen and continue button is in the right
	// state.
	DisconnectAndVerifyKeyboard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type hidScreenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHidScreenServiceClient(cc grpc.ClientConnInterface) HidScreenServiceClient {
	return &hidScreenServiceClient{cc}
}

func (c *hidScreenServiceClient) ConnectAndVerifyMouse(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.oobe.HidScreenService/ConnectAndVerifyMouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hidScreenServiceClient) DisconnectAndVerifyMouse(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.oobe.HidScreenService/DisconnectAndVerifyMouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hidScreenServiceClient) ConnectAndVerifyKeyboard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.oobe.HidScreenService/ConnectAndVerifyKeyboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hidScreenServiceClient) DisconnectAndVerifyKeyboard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.oobe.HidScreenService/DisconnectAndVerifyKeyboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HidScreenServiceServer is the server API for HidScreenService service.
type HidScreenServiceServer interface {
	// ConnectAndVerifyMouse creates an instance of a USB mouse device and verifies that
	// the mouse is connected to in HID Detection screen and continue button is in the right
	// state.
	ConnectAndVerifyMouse(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// DisconnectAndVerifyMouse creates an instance of a USB mouse device and verifies that
	// the mouse can be disconnected in HID Detection screen and continue button in the right
	// state.
	DisconnectAndVerifyMouse(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// ConnectAndVerifyKeyboard creates an instance of a USB keyboard device and verifies that
	// the keyboard is connected to in HID Detection screen and continue button in the right
	// state.
	ConnectAndVerifyKeyboard(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// DisconnectAndVerifyKeyboard creates an instance of a USB keyboard device and verifies that
	// the keyboard can be disconnected in HID Detection screen and continue button is in the right
	// state.
	DisconnectAndVerifyKeyboard(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
}

// UnimplementedHidScreenServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHidScreenServiceServer struct {
}

func (*UnimplementedHidScreenServiceServer) ConnectAndVerifyMouse(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectAndVerifyMouse not implemented")
}
func (*UnimplementedHidScreenServiceServer) DisconnectAndVerifyMouse(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectAndVerifyMouse not implemented")
}
func (*UnimplementedHidScreenServiceServer) ConnectAndVerifyKeyboard(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectAndVerifyKeyboard not implemented")
}
func (*UnimplementedHidScreenServiceServer) DisconnectAndVerifyKeyboard(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectAndVerifyKeyboard not implemented")
}

func RegisterHidScreenServiceServer(s *grpc.Server, srv HidScreenServiceServer) {
	s.RegisterService(&_HidScreenService_serviceDesc, srv)
}

func _HidScreenService_ConnectAndVerifyMouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HidScreenServiceServer).ConnectAndVerifyMouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.oobe.HidScreenService/ConnectAndVerifyMouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HidScreenServiceServer).ConnectAndVerifyMouse(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HidScreenService_DisconnectAndVerifyMouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HidScreenServiceServer).DisconnectAndVerifyMouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.oobe.HidScreenService/DisconnectAndVerifyMouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HidScreenServiceServer).DisconnectAndVerifyMouse(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HidScreenService_ConnectAndVerifyKeyboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HidScreenServiceServer).ConnectAndVerifyKeyboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.oobe.HidScreenService/ConnectAndVerifyKeyboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HidScreenServiceServer).ConnectAndVerifyKeyboard(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HidScreenService_DisconnectAndVerifyKeyboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HidScreenServiceServer).DisconnectAndVerifyKeyboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.oobe.HidScreenService/DisconnectAndVerifyKeyboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HidScreenServiceServer).DisconnectAndVerifyKeyboard(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _HidScreenService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.oobe.HidScreenService",
	HandlerType: (*HidScreenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConnectAndVerifyMouse",
			Handler:    _HidScreenService_ConnectAndVerifyMouse_Handler,
		},
		{
			MethodName: "DisconnectAndVerifyMouse",
			Handler:    _HidScreenService_DisconnectAndVerifyMouse_Handler,
		},
		{
			MethodName: "ConnectAndVerifyKeyboard",
			Handler:    _HidScreenService_ConnectAndVerifyKeyboard_Handler,
		},
		{
			MethodName: "DisconnectAndVerifyKeyboard",
			Handler:    _HidScreenService_DisconnectAndVerifyKeyboard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hid_screen_service.proto",
}
