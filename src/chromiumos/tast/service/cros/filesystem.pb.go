// Code generated by protoc-gen-go. DO NOT EDIT.
// source: filesystem.proto

/*
Package cros is a generated protocol buffer package.

It is generated from these files:
	filesystem.proto

It has these top-level messages:
	ReadDirRequest
	ReadDirReply
	FileInfo
*/
package cros

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReadDirRequest struct {
	Dir string `protobuf:"bytes,1,opt,name=dir" json:"dir,omitempty"`
}

func (m *ReadDirRequest) Reset()                    { *m = ReadDirRequest{} }
func (m *ReadDirRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadDirRequest) ProtoMessage()               {}
func (*ReadDirRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ReadDirRequest) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

type ReadDirReply struct {
	Files []*FileInfo `protobuf:"bytes,1,rep,name=files" json:"files,omitempty"`
}

func (m *ReadDirReply) Reset()                    { *m = ReadDirReply{} }
func (m *ReadDirReply) String() string            { return proto.CompactTextString(m) }
func (*ReadDirReply) ProtoMessage()               {}
func (*ReadDirReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ReadDirReply) GetFiles() []*FileInfo {
	if m != nil {
		return m.Files
	}
	return nil
}

type FileInfo struct {
	Name     string                     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Size     uint64                     `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Mode     uint64                     `protobuf:"varint,3,opt,name=mode" json:"mode,omitempty"`
	Modified *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=modified" json:"modified,omitempty"`
}

func (m *FileInfo) Reset()                    { *m = FileInfo{} }
func (m *FileInfo) String() string            { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()               {}
func (*FileInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FileInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileInfo) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *FileInfo) GetMode() uint64 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *FileInfo) GetModified() *google_protobuf.Timestamp {
	if m != nil {
		return m.Modified
	}
	return nil
}

func init() {
	proto.RegisterType((*ReadDirRequest)(nil), "cros.ReadDirRequest")
	proto.RegisterType((*ReadDirReply)(nil), "cros.ReadDirReply")
	proto.RegisterType((*FileInfo)(nil), "cros.FileInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FileSystem service

type FileSystemClient interface {
	ReadDir(ctx context.Context, in *ReadDirRequest, opts ...grpc.CallOption) (*ReadDirReply, error)
}

type fileSystemClient struct {
	cc *grpc.ClientConn
}

func NewFileSystemClient(cc *grpc.ClientConn) FileSystemClient {
	return &fileSystemClient{cc}
}

func (c *fileSystemClient) ReadDir(ctx context.Context, in *ReadDirRequest, opts ...grpc.CallOption) (*ReadDirReply, error) {
	out := new(ReadDirReply)
	err := grpc.Invoke(ctx, "/cros.FileSystem/ReadDir", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FileSystem service

type FileSystemServer interface {
	ReadDir(context.Context, *ReadDirRequest) (*ReadDirReply, error)
}

func RegisterFileSystemServer(s *grpc.Server, srv FileSystemServer) {
	s.RegisterService(&_FileSystem_serviceDesc, srv)
}

func _FileSystem_ReadDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServer).ReadDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cros.FileSystem/ReadDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServer).ReadDir(ctx, req.(*ReadDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FileSystem_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cros.FileSystem",
	HandlerType: (*FileSystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadDir",
			Handler:    _FileSystem_ReadDir_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "filesystem.proto",
}

func init() { proto.RegisterFile("filesystem.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xcd, 0x4e, 0xf4, 0x20,
	0x18, 0x85, 0x3f, 0xbe, 0x56, 0x1d, 0xdf, 0x31, 0x93, 0x09, 0x71, 0x41, 0xba, 0xb1, 0x21, 0x2e,
	0xba, 0x62, 0x92, 0xfa, 0x73, 0x03, 0x1a, 0x13, 0xb7, 0xe8, 0x0d, 0x74, 0xe4, 0xed, 0x84, 0x04,
	0x86, 0x5a, 0x98, 0x45, 0x5d, 0x78, 0xed, 0x06, 0x98, 0x4e, 0xa2, 0xbb, 0x93, 0x87, 0x13, 0x0e,
	0x0f, 0xb0, 0xee, 0xb5, 0x41, 0x3f, 0xf9, 0x80, 0x56, 0x0c, 0xa3, 0x0b, 0x8e, 0x96, 0x1f, 0xa3,
	0xf3, 0xd5, 0xcd, 0xce, 0xb9, 0x9d, 0xc1, 0x4d, 0x62, 0xdb, 0x43, 0xbf, 0x09, 0xda, 0xa2, 0x0f,
	0x9d, 0x1d, 0x72, 0x8d, 0x73, 0x58, 0x49, 0xec, 0xd4, 0xb3, 0x1e, 0x25, 0x7e, 0x1e, 0xd0, 0x07,
	0xba, 0x86, 0x42, 0xe9, 0x91, 0x91, 0x9a, 0x34, 0x97, 0x32, 0x46, 0x7e, 0x0f, 0x57, 0xa7, 0xce,
	0x60, 0x26, 0x7a, 0x0b, 0x67, 0x69, 0x8e, 0x91, 0xba, 0x68, 0x96, 0xed, 0x4a, 0xc4, 0x29, 0xf1,
	0xa2, 0x0d, 0xbe, 0xee, 0x7b, 0x27, 0xf3, 0x21, 0xff, 0x86, 0xc5, 0x8c, 0x28, 0x85, 0x72, 0xdf,
	0x59, 0x3c, 0x5e, 0x9a, 0x72, 0x64, 0x5e, 0x7f, 0x21, 0xfb, 0x5f, 0x93, 0xa6, 0x94, 0x29, 0x47,
	0x66, 0x9d, 0x42, 0x56, 0x64, 0x16, 0x33, 0x7d, 0x84, 0x85, 0x75, 0x4a, 0xf7, 0x1a, 0x15, 0x2b,
	0x6b, 0xd2, 0x2c, 0xdb, 0x4a, 0x64, 0x2b, 0x31, 0x5b, 0x89, 0xf7, 0xd9, 0x4a, 0x9e, 0xba, 0xed,
	0x13, 0x40, 0xdc, 0x7f, 0x4b, 0x9f, 0x42, 0x1f, 0xe0, 0xe2, 0xe8, 0x40, 0xaf, 0xf3, 0x7b, 0x7f,
	0x6b, 0x57, 0xf4, 0x0f, 0x1d, 0xcc, 0xc4, 0xff, 0x6d, 0xcf, 0xd3, 0xc4, 0xdd, 0x4f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xb6, 0xdb, 0x7e, 0x52, 0x60, 0x01, 0x00, 0x00,
}
