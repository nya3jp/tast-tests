// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: shill_service.proto

package wifi

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Criterion checking methods.
type ExpectShillPropertyRequest_CheckMethod int32

const (
	// Check if the property value is expected; if not, wait until it is expected.
	ExpectShillPropertyRequest_CHECK_WAIT ExpectShillPropertyRequest_CheckMethod = 0
	// Check on property change.
	ExpectShillPropertyRequest_ON_CHANGE ExpectShillPropertyRequest_CheckMethod = 1
	// Check if the property value is expected.
	ExpectShillPropertyRequest_CHECK_ONLY ExpectShillPropertyRequest_CheckMethod = 2
)

// Enum value maps for ExpectShillPropertyRequest_CheckMethod.
var (
	ExpectShillPropertyRequest_CheckMethod_name = map[int32]string{
		0: "CHECK_WAIT",
		1: "ON_CHANGE",
		2: "CHECK_ONLY",
	}
	ExpectShillPropertyRequest_CheckMethod_value = map[string]int32{
		"CHECK_WAIT": 0,
		"ON_CHANGE":  1,
		"CHECK_ONLY": 2,
	}
)

func (x ExpectShillPropertyRequest_CheckMethod) Enum() *ExpectShillPropertyRequest_CheckMethod {
	p := new(ExpectShillPropertyRequest_CheckMethod)
	*p = x
	return p
}

func (x ExpectShillPropertyRequest_CheckMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpectShillPropertyRequest_CheckMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_shill_service_proto_enumTypes[0].Descriptor()
}

func (ExpectShillPropertyRequest_CheckMethod) Type() protoreflect.EnumType {
	return &file_shill_service_proto_enumTypes[0]
}

func (x ExpectShillPropertyRequest_CheckMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExpectShillPropertyRequest_CheckMethod.Descriptor instead.
func (ExpectShillPropertyRequest_CheckMethod) EnumDescriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{29, 0}
}

type ConnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ssid []byte `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
	// hidden denotes that if the SSID is hidden.
	Hidden bool `protobuf:"varint,2,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// security is the SecurityClass (defined in shill/service.go) of the WiFi
	// service to Connect.
	Security string `protobuf:"bytes,3,opt,name=security,proto3" json:"security,omitempty"`
	// shillprops is the shill properties the DUT should set to Connect to the
	// WiFi service.
	Shillprops map[string]*ShillVal `protobuf:"bytes,4,rep,name=shillprops,proto3" json:"shillprops,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ConnectRequest) Reset() {
	*x = ConnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRequest) ProtoMessage() {}

func (x *ConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRequest.ProtoReflect.Descriptor instead.
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{0}
}

func (x *ConnectRequest) GetSsid() []byte {
	if x != nil {
		return x.Ssid
	}
	return nil
}

func (x *ConnectRequest) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *ConnectRequest) GetSecurity() string {
	if x != nil {
		return x.Security
	}
	return ""
}

func (x *ConnectRequest) GetShillprops() map[string]*ShillVal {
	if x != nil {
		return x.Shillprops
	}
	return nil
}

type ShillVal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Val:
	//	*ShillVal_Str
	//	*ShillVal_Bool
	//	*ShillVal_Uint32
	//	*ShillVal_StrArray
	//	*ShillVal_Uint32Array
	Val isShillVal_Val `protobuf_oneof:"val"`
}

func (x *ShillVal) Reset() {
	*x = ShillVal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShillVal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShillVal) ProtoMessage() {}

func (x *ShillVal) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShillVal.ProtoReflect.Descriptor instead.
func (*ShillVal) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{1}
}

func (m *ShillVal) GetVal() isShillVal_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *ShillVal) GetStr() string {
	if x, ok := x.GetVal().(*ShillVal_Str); ok {
		return x.Str
	}
	return ""
}

func (x *ShillVal) GetBool() bool {
	if x, ok := x.GetVal().(*ShillVal_Bool); ok {
		return x.Bool
	}
	return false
}

func (x *ShillVal) GetUint32() uint32 {
	if x, ok := x.GetVal().(*ShillVal_Uint32); ok {
		return x.Uint32
	}
	return 0
}

func (x *ShillVal) GetStrArray() *StrArray {
	if x, ok := x.GetVal().(*ShillVal_StrArray); ok {
		return x.StrArray
	}
	return nil
}

func (x *ShillVal) GetUint32Array() *Uint32Array {
	if x, ok := x.GetVal().(*ShillVal_Uint32Array); ok {
		return x.Uint32Array
	}
	return nil
}

type isShillVal_Val interface {
	isShillVal_Val()
}

type ShillVal_Str struct {
	Str string `protobuf:"bytes,1,opt,name=str,proto3,oneof"`
}

type ShillVal_Bool struct {
	Bool bool `protobuf:"varint,2,opt,name=bool,proto3,oneof"`
}

type ShillVal_Uint32 struct {
	Uint32 uint32 `protobuf:"varint,3,opt,name=uint32,proto3,oneof"`
}

type ShillVal_StrArray struct {
	// Because 'repeated' label is not allowed in oneof type, we define StrArray
	// for repeated string field.
	StrArray *StrArray `protobuf:"bytes,4,opt,name=str_array,json=strArray,proto3,oneof"`
}

type ShillVal_Uint32Array struct {
	Uint32Array *Uint32Array `protobuf:"bytes,5,opt,name=uint32_array,json=uint32Array,proto3,oneof"`
}

func (*ShillVal_Str) isShillVal_Val() {}

func (*ShillVal_Bool) isShillVal_Val() {}

func (*ShillVal_Uint32) isShillVal_Val() {}

func (*ShillVal_StrArray) isShillVal_Val() {}

func (*ShillVal_Uint32Array) isShillVal_Val() {}

type StrArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vals []string `protobuf:"bytes,1,rep,name=vals,proto3" json:"vals,omitempty"`
}

func (x *StrArray) Reset() {
	*x = StrArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrArray) ProtoMessage() {}

func (x *StrArray) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrArray.ProtoReflect.Descriptor instead.
func (*StrArray) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{2}
}

func (x *StrArray) GetVals() []string {
	if x != nil {
		return x.Vals
	}
	return nil
}

type Uint32Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vals []uint32 `protobuf:"varint,1,rep,packed,name=vals,proto3" json:"vals,omitempty"`
}

func (x *Uint32Array) Reset() {
	*x = Uint32Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uint32Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint32Array) ProtoMessage() {}

func (x *Uint32Array) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint32Array.ProtoReflect.Descriptor instead.
func (*Uint32Array) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{3}
}

func (x *Uint32Array) GetVals() []uint32 {
	if x != nil {
		return x.Vals
	}
	return nil
}

// ConnectResponse is the response of Connect call which includes the
// object path of connected service and timing data of the connection
// (all time in nanosecond unit).
type ConnectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServicePath       string `protobuf:"bytes,1,opt,name=service_path,json=servicePath,proto3" json:"service_path,omitempty"`
	DiscoveryTime     int64  `protobuf:"varint,2,opt,name=discovery_time,json=discoveryTime,proto3" json:"discovery_time,omitempty"`
	AssociationTime   int64  `protobuf:"varint,3,opt,name=association_time,json=associationTime,proto3" json:"association_time,omitempty"`
	ConfigurationTime int64  `protobuf:"varint,4,opt,name=configuration_time,json=configurationTime,proto3" json:"configuration_time,omitempty"`
}

func (x *ConnectResponse) Reset() {
	*x = ConnectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectResponse) ProtoMessage() {}

func (x *ConnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectResponse.ProtoReflect.Descriptor instead.
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{4}
}

func (x *ConnectResponse) GetServicePath() string {
	if x != nil {
		return x.ServicePath
	}
	return ""
}

func (x *ConnectResponse) GetDiscoveryTime() int64 {
	if x != nil {
		return x.DiscoveryTime
	}
	return 0
}

func (x *ConnectResponse) GetAssociationTime() int64 {
	if x != nil {
		return x.AssociationTime
	}
	return 0
}

func (x *ConnectResponse) GetConfigurationTime() int64 {
	if x != nil {
		return x.ConfigurationTime
	}
	return 0
}

type DiscoverBSSIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bssid     string `protobuf:"bytes,1,opt,name=bssid,proto3" json:"bssid,omitempty"`
	Interface string `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
	Ssid      []byte `protobuf:"bytes,3,opt,name=ssid,proto3" json:"ssid,omitempty"`
}

func (x *DiscoverBSSIDRequest) Reset() {
	*x = DiscoverBSSIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverBSSIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverBSSIDRequest) ProtoMessage() {}

func (x *DiscoverBSSIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverBSSIDRequest.ProtoReflect.Descriptor instead.
func (*DiscoverBSSIDRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{5}
}

func (x *DiscoverBSSIDRequest) GetBssid() string {
	if x != nil {
		return x.Bssid
	}
	return ""
}

func (x *DiscoverBSSIDRequest) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

func (x *DiscoverBSSIDRequest) GetSsid() []byte {
	if x != nil {
		return x.Ssid
	}
	return nil
}

type DiscoverBSSIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiscoveryTime int64 `protobuf:"varint,1,opt,name=discovery_time,json=discoveryTime,proto3" json:"discovery_time,omitempty"`
}

func (x *DiscoverBSSIDResponse) Reset() {
	*x = DiscoverBSSIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverBSSIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverBSSIDResponse) ProtoMessage() {}

func (x *DiscoverBSSIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverBSSIDResponse.ProtoReflect.Descriptor instead.
func (*DiscoverBSSIDResponse) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{6}
}

func (x *DiscoverBSSIDResponse) GetDiscoveryTime() int64 {
	if x != nil {
		return x.DiscoveryTime
	}
	return 0
}

type DisconnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServicePath   string `protobuf:"bytes,1,opt,name=service_path,json=servicePath,proto3" json:"service_path,omitempty"`
	RemoveProfile bool   `protobuf:"varint,2,opt,name=remove_profile,json=removeProfile,proto3" json:"remove_profile,omitempty"`
}

func (x *DisconnectRequest) Reset() {
	*x = DisconnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectRequest) ProtoMessage() {}

func (x *DisconnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectRequest.ProtoReflect.Descriptor instead.
func (*DisconnectRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{7}
}

func (x *DisconnectRequest) GetServicePath() string {
	if x != nil {
		return x.ServicePath
	}
	return ""
}

func (x *DisconnectRequest) GetRemoveProfile() bool {
	if x != nil {
		return x.RemoveProfile
	}
	return false
}

type DeleteEntriesForSSIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ssid []byte `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
}

func (x *DeleteEntriesForSSIDRequest) Reset() {
	*x = DeleteEntriesForSSIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEntriesForSSIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEntriesForSSIDRequest) ProtoMessage() {}

func (x *DeleteEntriesForSSIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEntriesForSSIDRequest.ProtoReflect.Descriptor instead.
func (*DeleteEntriesForSSIDRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteEntriesForSSIDRequest) GetSsid() []byte {
	if x != nil {
		return x.Ssid
	}
	return nil
}

type QueryServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *QueryServiceRequest) Reset() {
	*x = QueryServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryServiceRequest) ProtoMessage() {}

func (x *QueryServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryServiceRequest.ProtoReflect.Descriptor instead.
func (*QueryServiceRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{9}
}

func (x *QueryServiceRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type QueryServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Device      string                     `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	Type        string                     `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Mode        string                     `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	State       string                     `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	Visible     bool                       `protobuf:"varint,6,opt,name=visible,proto3" json:"visible,omitempty"`
	IsConnected bool                       `protobuf:"varint,7,opt,name=is_connected,json=isConnected,proto3" json:"is_connected,omitempty"`
	Wifi        *QueryServiceResponse_Wifi `protobuf:"bytes,8,opt,name=wifi,proto3" json:"wifi,omitempty"`
	Guid        string                     `protobuf:"bytes,9,opt,name=guid,proto3" json:"guid,omitempty"`
}

func (x *QueryServiceResponse) Reset() {
	*x = QueryServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryServiceResponse) ProtoMessage() {}

func (x *QueryServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryServiceResponse.ProtoReflect.Descriptor instead.
func (*QueryServiceResponse) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{10}
}

func (x *QueryServiceResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryServiceResponse) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *QueryServiceResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *QueryServiceResponse) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *QueryServiceResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *QueryServiceResponse) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *QueryServiceResponse) GetIsConnected() bool {
	if x != nil {
		return x.IsConnected
	}
	return false
}

func (x *QueryServiceResponse) GetWifi() *QueryServiceResponse_Wifi {
	if x != nil {
		return x.Wifi
	}
	return nil
}

func (x *QueryServiceResponse) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

type GetInterfaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetInterfaceResponse) Reset() {
	*x = GetInterfaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInterfaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInterfaceResponse) ProtoMessage() {}

func (x *GetInterfaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInterfaceResponse.ProtoReflect.Descriptor instead.
func (*GetInterfaceResponse) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetInterfaceResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetIPv4AddrsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
}

func (x *GetIPv4AddrsRequest) Reset() {
	*x = GetIPv4AddrsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIPv4AddrsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIPv4AddrsRequest) ProtoMessage() {}

func (x *GetIPv4AddrsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIPv4AddrsRequest.ProtoReflect.Descriptor instead.
func (*GetIPv4AddrsRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetIPv4AddrsRequest) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

type GetIPv4AddrsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4 []string `protobuf:"bytes,1,rep,name=ipv4,proto3" json:"ipv4,omitempty"`
}

func (x *GetIPv4AddrsResponse) Reset() {
	*x = GetIPv4AddrsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIPv4AddrsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIPv4AddrsResponse) ProtoMessage() {}

func (x *GetIPv4AddrsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIPv4AddrsResponse.ProtoReflect.Descriptor instead.
func (*GetIPv4AddrsResponse) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetIPv4AddrsResponse) GetIpv4() []string {
	if x != nil {
		return x.Ipv4
	}
	return nil
}

type GetHardwareAddrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string `protobuf:"bytes,1,opt,name=interfaceName,proto3" json:"interfaceName,omitempty"`
}

func (x *GetHardwareAddrRequest) Reset() {
	*x = GetHardwareAddrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHardwareAddrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHardwareAddrRequest) ProtoMessage() {}

func (x *GetHardwareAddrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHardwareAddrRequest.ProtoReflect.Descriptor instead.
func (*GetHardwareAddrRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetHardwareAddrRequest) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

type GetHardwareAddrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HwAddr string `protobuf:"bytes,1,opt,name=hw_addr,json=hwAddr,proto3" json:"hw_addr,omitempty"`
}

func (x *GetHardwareAddrResponse) Reset() {
	*x = GetHardwareAddrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHardwareAddrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHardwareAddrResponse) ProtoMessage() {}

func (x *GetHardwareAddrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHardwareAddrResponse.ProtoReflect.Descriptor instead.
func (*GetHardwareAddrResponse) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetHardwareAddrResponse) GetHwAddr() string {
	if x != nil {
		return x.HwAddr
	}
	return ""
}

type ExpectWifiFrequenciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SSID to look up. Required.
	Ssid []byte `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
	// Expected list of frequencies for the SSID.
	Frequencies []uint32 `protobuf:"varint,2,rep,packed,name=frequencies,proto3" json:"frequencies,omitempty"`
}

func (x *ExpectWifiFrequenciesRequest) Reset() {
	*x = ExpectWifiFrequenciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpectWifiFrequenciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpectWifiFrequenciesRequest) ProtoMessage() {}

func (x *ExpectWifiFrequenciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpectWifiFrequenciesRequest.ProtoReflect.Descriptor instead.
func (*ExpectWifiFrequenciesRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{16}
}

func (x *ExpectWifiFrequenciesRequest) GetSsid() []byte {
	if x != nil {
		return x.Ssid
	}
	return nil
}

func (x *ExpectWifiFrequenciesRequest) GetFrequencies() []uint32 {
	if x != nil {
		return x.Frequencies
	}
	return nil
}

type BgscanConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// ShortInterval time in seconds, only value in uint16 range is valid as dbus property type is uint16.
	ShortInterval uint32 `protobuf:"varint,2,opt,name=short_interval,json=shortInterval,proto3" json:"short_interval,omitempty"`
	// LongInterval time in seconds, only value in uint16 range is valid as dbus property type is uint16.
	LongInterval uint32 `protobuf:"varint,3,opt,name=long_interval,json=longInterval,proto3" json:"long_interval,omitempty"`
}

func (x *BgscanConfig) Reset() {
	*x = BgscanConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgscanConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgscanConfig) ProtoMessage() {}

func (x *BgscanConfig) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgscanConfig.ProtoReflect.Descriptor instead.
func (*BgscanConfig) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{17}
}

func (x *BgscanConfig) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *BgscanConfig) GetShortInterval() uint32 {
	if x != nil {
		return x.ShortInterval
	}
	return 0
}

func (x *BgscanConfig) GetLongInterval() uint32 {
	if x != nil {
		return x.LongInterval
	}
	return 0
}

type GetBgscanConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *BgscanConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *GetBgscanConfigResponse) Reset() {
	*x = GetBgscanConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBgscanConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBgscanConfigResponse) ProtoMessage() {}

func (x *GetBgscanConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBgscanConfigResponse.ProtoReflect.Descriptor instead.
func (*GetBgscanConfigResponse) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{18}
}

func (x *GetBgscanConfigResponse) GetConfig() *BgscanConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type SetBgscanConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *BgscanConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *SetBgscanConfigRequest) Reset() {
	*x = SetBgscanConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBgscanConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBgscanConfigRequest) ProtoMessage() {}

func (x *SetBgscanConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBgscanConfigRequest.ProtoReflect.Descriptor instead.
func (*SetBgscanConfigRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{19}
}

func (x *SetBgscanConfigRequest) GetConfig() *BgscanConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type AssureDisconnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServicePath string `protobuf:"bytes,1,opt,name=service_path,json=servicePath,proto3" json:"service_path,omitempty"`
	Timeout     int64  `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *AssureDisconnectRequest) Reset() {
	*x = AssureDisconnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssureDisconnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssureDisconnectRequest) ProtoMessage() {}

func (x *AssureDisconnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssureDisconnectRequest.ProtoReflect.Descriptor instead.
func (*AssureDisconnectRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{20}
}

func (x *AssureDisconnectRequest) GetServicePath() string {
	if x != nil {
		return x.ServicePath
	}
	return ""
}

func (x *AssureDisconnectRequest) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type DisableEnableTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	ServicePath   string `protobuf:"bytes,2,opt,name=service_path,json=servicePath,proto3" json:"service_path,omitempty"`
}

func (x *DisableEnableTestRequest) Reset() {
	*x = DisableEnableTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableEnableTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableEnableTestRequest) ProtoMessage() {}

func (x *DisableEnableTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableEnableTestRequest.ProtoReflect.Descriptor instead.
func (*DisableEnableTestRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{21}
}

func (x *DisableEnableTestRequest) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *DisableEnableTestRequest) GetServicePath() string {
	if x != nil {
		return x.ServicePath
	}
	return ""
}

type RequestScansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RequestScansRequest) Reset() {
	*x = RequestScansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestScansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestScansRequest) ProtoMessage() {}

func (x *RequestScansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestScansRequest.ProtoReflect.Descriptor instead.
func (*RequestScansRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{22}
}

func (x *RequestScansRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type SetMACRandomizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *SetMACRandomizeRequest) Reset() {
	*x = SetMACRandomizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMACRandomizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMACRandomizeRequest) ProtoMessage() {}

func (x *SetMACRandomizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMACRandomizeRequest.ProtoReflect.Descriptor instead.
func (*SetMACRandomizeRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{23}
}

func (x *SetMACRandomizeRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type SetMACRandomizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldSetting bool `protobuf:"varint,1,opt,name=old_setting,json=oldSetting,proto3" json:"old_setting,omitempty"`
}

func (x *SetMACRandomizeResponse) Reset() {
	*x = SetMACRandomizeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMACRandomizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMACRandomizeResponse) ProtoMessage() {}

func (x *SetMACRandomizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMACRandomizeResponse.ProtoReflect.Descriptor instead.
func (*SetMACRandomizeResponse) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{24}
}

func (x *SetMACRandomizeResponse) GetOldSetting() bool {
	if x != nil {
		return x.OldSetting
	}
	return false
}

type ConfigureAndAssertAutoConnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Props map[string]*ShillVal `protobuf:"bytes,1,rep,name=props,proto3" json:"props,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ConfigureAndAssertAutoConnectRequest) Reset() {
	*x = ConfigureAndAssertAutoConnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureAndAssertAutoConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureAndAssertAutoConnectRequest) ProtoMessage() {}

func (x *ConfigureAndAssertAutoConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureAndAssertAutoConnectRequest.ProtoReflect.Descriptor instead.
func (*ConfigureAndAssertAutoConnectRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{25}
}

func (x *ConfigureAndAssertAutoConnectRequest) GetProps() map[string]*ShillVal {
	if x != nil {
		return x.Props
	}
	return nil
}

type ConfigureAndAssertAutoConnectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *ConfigureAndAssertAutoConnectResponse) Reset() {
	*x = ConfigureAndAssertAutoConnectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureAndAssertAutoConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureAndAssertAutoConnectResponse) ProtoMessage() {}

func (x *ConfigureAndAssertAutoConnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureAndAssertAutoConnectResponse.ProtoReflect.Descriptor instead.
func (*ConfigureAndAssertAutoConnectResponse) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{26}
}

func (x *ConfigureAndAssertAutoConnectResponse) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type GetCurrentTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NowSecond     int64 `protobuf:"varint,1,opt,name=now_second,json=nowSecond,proto3" json:"now_second,omitempty"`
	NowNanosecond int64 `protobuf:"varint,2,opt,name=now_nanosecond,json=nowNanosecond,proto3" json:"now_nanosecond,omitempty"`
}

func (x *GetCurrentTimeResponse) Reset() {
	*x = GetCurrentTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentTimeResponse) ProtoMessage() {}

func (x *GetCurrentTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentTimeResponse.ProtoReflect.Descriptor instead.
func (*GetCurrentTimeResponse) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{27}
}

func (x *GetCurrentTimeResponse) GetNowSecond() int64 {
	if x != nil {
		return x.NowSecond
	}
	return 0
}

func (x *GetCurrentTimeResponse) GetNowNanosecond() int64 {
	if x != nil {
		return x.NowNanosecond
	}
	return 0
}

type SelectedServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServicePath string `protobuf:"bytes,1,opt,name=service_path,json=servicePath,proto3" json:"service_path,omitempty"`
}

func (x *SelectedServiceResponse) Reset() {
	*x = SelectedServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectedServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectedServiceResponse) ProtoMessage() {}

func (x *SelectedServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectedServiceResponse.ProtoReflect.Descriptor instead.
func (*SelectedServiceResponse) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{28}
}

func (x *SelectedServiceResponse) GetServicePath() string {
	if x != nil {
		return x.ServicePath
	}
	return ""
}

type ExpectShillPropertyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Shill object path (e.g. Service or Device).
	ObjectPath   string                                  `protobuf:"bytes,1,opt,name=object_path,json=objectPath,proto3" json:"object_path,omitempty"`
	Props        []*ExpectShillPropertyRequest_Criterion `protobuf:"bytes,2,rep,name=props,proto3" json:"props,omitempty"`
	MonitorProps []string                                `protobuf:"bytes,3,rep,name=monitor_props,json=monitorProps,proto3" json:"monitor_props,omitempty"`
}

func (x *ExpectShillPropertyRequest) Reset() {
	*x = ExpectShillPropertyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpectShillPropertyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpectShillPropertyRequest) ProtoMessage() {}

func (x *ExpectShillPropertyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpectShillPropertyRequest.ProtoReflect.Descriptor instead.
func (*ExpectShillPropertyRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{29}
}

func (x *ExpectShillPropertyRequest) GetObjectPath() string {
	if x != nil {
		return x.ObjectPath
	}
	return ""
}

func (x *ExpectShillPropertyRequest) GetProps() []*ExpectShillPropertyRequest_Criterion {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *ExpectShillPropertyRequest) GetMonitorProps() []string {
	if x != nil {
		return x.MonitorProps
	}
	return nil
}

type ShillPropertyChangedSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prop string    `protobuf:"bytes,1,opt,name=prop,proto3" json:"prop,omitempty"`
	Val  *ShillVal `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *ShillPropertyChangedSignal) Reset() {
	*x = ShillPropertyChangedSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShillPropertyChangedSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShillPropertyChangedSignal) ProtoMessage() {}

func (x *ShillPropertyChangedSignal) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShillPropertyChangedSignal.ProtoReflect.Descriptor instead.
func (*ShillPropertyChangedSignal) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{30}
}

func (x *ShillPropertyChangedSignal) GetProp() string {
	if x != nil {
		return x.Prop
	}
	return ""
}

func (x *ShillPropertyChangedSignal) GetVal() *ShillVal {
	if x != nil {
		return x.Val
	}
	return nil
}

type ExpectShillPropertyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string                        `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Val         *ShillVal                     `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
	Props       []*ShillPropertyChangedSignal `protobuf:"bytes,3,rep,name=props,proto3" json:"props,omitempty"`
	MonitorDone bool                          `protobuf:"varint,4,opt,name=monitor_done,json=monitorDone,proto3" json:"monitor_done,omitempty"`
}

func (x *ExpectShillPropertyResponse) Reset() {
	*x = ExpectShillPropertyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpectShillPropertyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpectShillPropertyResponse) ProtoMessage() {}

func (x *ExpectShillPropertyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpectShillPropertyResponse.ProtoReflect.Descriptor instead.
func (*ExpectShillPropertyResponse) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{31}
}

func (x *ExpectShillPropertyResponse) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ExpectShillPropertyResponse) GetVal() *ShillVal {
	if x != nil {
		return x.Val
	}
	return nil
}

func (x *ExpectShillPropertyResponse) GetProps() []*ShillPropertyChangedSignal {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *ExpectShillPropertyResponse) GetMonitorDone() bool {
	if x != nil {
		return x.MonitorDone
	}
	return false
}

type ProfileBasicTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ap0 *ProfileBasicTestRequest_Config `protobuf:"bytes,1,opt,name=ap0,proto3" json:"ap0,omitempty"`
	Ap1 *ProfileBasicTestRequest_Config `protobuf:"bytes,2,opt,name=ap1,proto3" json:"ap1,omitempty"`
}

func (x *ProfileBasicTestRequest) Reset() {
	*x = ProfileBasicTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileBasicTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileBasicTestRequest) ProtoMessage() {}

func (x *ProfileBasicTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileBasicTestRequest.ProtoReflect.Descriptor instead.
func (*ProfileBasicTestRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{32}
}

func (x *ProfileBasicTestRequest) GetAp0() *ProfileBasicTestRequest_Config {
	if x != nil {
		return x.Ap0
	}
	return nil
}

func (x *ProfileBasicTestRequest) GetAp1() *ProfileBasicTestRequest_Config {
	if x != nil {
		return x.Ap1
	}
	return nil
}

type RequestRoamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	Bssid         string `protobuf:"bytes,2,opt,name=bssid,proto3" json:"bssid,omitempty"`
	Timeout       int64  `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *RequestRoamRequest) Reset() {
	*x = RequestRoamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestRoamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestRoamRequest) ProtoMessage() {}

func (x *RequestRoamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestRoamRequest.ProtoReflect.Descriptor instead.
func (*RequestRoamRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{33}
}

func (x *RequestRoamRequest) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *RequestRoamRequest) GetBssid() string {
	if x != nil {
		return x.Bssid
	}
	return ""
}

func (x *RequestRoamRequest) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type DHCPProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *DHCPProperties) Reset() {
	*x = DHCPProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHCPProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHCPProperties) ProtoMessage() {}

func (x *DHCPProperties) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHCPProperties.ProtoReflect.Descriptor instead.
func (*DHCPProperties) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{34}
}

func (x *DHCPProperties) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

type SetDHCPPropertiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Props *DHCPProperties `protobuf:"bytes,1,opt,name=props,proto3" json:"props,omitempty"`
}

func (x *SetDHCPPropertiesRequest) Reset() {
	*x = SetDHCPPropertiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDHCPPropertiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDHCPPropertiesRequest) ProtoMessage() {}

func (x *SetDHCPPropertiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDHCPPropertiesRequest.ProtoReflect.Descriptor instead.
func (*SetDHCPPropertiesRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{35}
}

func (x *SetDHCPPropertiesRequest) GetProps() *DHCPProperties {
	if x != nil {
		return x.Props
	}
	return nil
}

type SetDHCPPropertiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Props *DHCPProperties `protobuf:"bytes,1,opt,name=props,proto3" json:"props,omitempty"`
}

func (x *SetDHCPPropertiesResponse) Reset() {
	*x = SetDHCPPropertiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDHCPPropertiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDHCPPropertiesResponse) ProtoMessage() {}

func (x *SetDHCPPropertiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDHCPPropertiesResponse.ProtoReflect.Descriptor instead.
func (*SetDHCPPropertiesResponse) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{36}
}

func (x *SetDHCPPropertiesResponse) GetProps() *DHCPProperties {
	if x != nil {
		return x.Props
	}
	return nil
}

type ReassociateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	Timeout       int64  `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *ReassociateRequest) Reset() {
	*x = ReassociateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReassociateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReassociateRequest) ProtoMessage() {}

func (x *ReassociateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReassociateRequest.ProtoReflect.Descriptor instead.
func (*ReassociateRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{37}
}

func (x *ReassociateRequest) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *ReassociateRequest) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type GetWifiEnabledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *GetWifiEnabledResponse) Reset() {
	*x = GetWifiEnabledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWifiEnabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWifiEnabledResponse) ProtoMessage() {}

func (x *GetWifiEnabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWifiEnabledResponse.ProtoReflect.Descriptor instead.
func (*GetWifiEnabledResponse) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{38}
}

func (x *GetWifiEnabledResponse) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type SetWifiEnabledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *SetWifiEnabledRequest) Reset() {
	*x = SetWifiEnabledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetWifiEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWifiEnabledRequest) ProtoMessage() {}

func (x *SetWifiEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWifiEnabledRequest.ProtoReflect.Descriptor instead.
func (*SetWifiEnabledRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{39}
}

func (x *SetWifiEnabledRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type WaitForBSSIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ssid  []byte `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
	Bssid string `protobuf:"bytes,2,opt,name=bssid,proto3" json:"bssid,omitempty"`
}

func (x *WaitForBSSIDRequest) Reset() {
	*x = WaitForBSSIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForBSSIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForBSSIDRequest) ProtoMessage() {}

func (x *WaitForBSSIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForBSSIDRequest.ProtoReflect.Descriptor instead.
func (*WaitForBSSIDRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{40}
}

func (x *WaitForBSSIDRequest) GetSsid() []byte {
	if x != nil {
		return x.Ssid
	}
	return nil
}

func (x *WaitForBSSIDRequest) GetBssid() string {
	if x != nil {
		return x.Bssid
	}
	return ""
}

type MACRandomizeSupportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Supported bool `protobuf:"varint,1,opt,name=supported,proto3" json:"supported,omitempty"`
}

func (x *MACRandomizeSupportResponse) Reset() {
	*x = MACRandomizeSupportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MACRandomizeSupportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MACRandomizeSupportResponse) ProtoMessage() {}

func (x *MACRandomizeSupportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MACRandomizeSupportResponse.ProtoReflect.Descriptor instead.
func (*MACRandomizeSupportResponse) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{41}
}

func (x *MACRandomizeSupportResponse) GetSupported() bool {
	if x != nil {
		return x.Supported
	}
	return false
}

type GetMACRandomizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *GetMACRandomizeResponse) Reset() {
	*x = GetMACRandomizeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMACRandomizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMACRandomizeResponse) ProtoMessage() {}

func (x *GetMACRandomizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMACRandomizeResponse.ProtoReflect.Descriptor instead.
func (*GetMACRandomizeResponse) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{42}
}

func (x *GetMACRandomizeResponse) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type EAPAuthSkippedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Skipped bool `protobuf:"varint,1,opt,name=skipped,proto3" json:"skipped,omitempty"`
}

func (x *EAPAuthSkippedResponse) Reset() {
	*x = EAPAuthSkippedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EAPAuthSkippedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EAPAuthSkippedResponse) ProtoMessage() {}

func (x *EAPAuthSkippedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EAPAuthSkippedResponse.ProtoReflect.Descriptor instead.
func (*EAPAuthSkippedResponse) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{43}
}

func (x *EAPAuthSkippedResponse) GetSkipped() bool {
	if x != nil {
		return x.Skipped
	}
	return false
}

type DisconnectReasonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason int32 `protobuf:"varint,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *DisconnectReasonResponse) Reset() {
	*x = DisconnectReasonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectReasonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectReasonResponse) ProtoMessage() {}

func (x *DisconnectReasonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectReasonResponse.ProtoReflect.Descriptor instead.
func (*DisconnectReasonResponse) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{44}
}

func (x *DisconnectReasonResponse) GetReason() int32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

type SuspendAssertConnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WakeUpTimeout int64  `protobuf:"varint,1,opt,name=wake_up_timeout,json=wakeUpTimeout,proto3" json:"wake_up_timeout,omitempty"`
	ServicePath   string `protobuf:"bytes,2,opt,name=service_path,json=servicePath,proto3" json:"service_path,omitempty"`
}

func (x *SuspendAssertConnectRequest) Reset() {
	*x = SuspendAssertConnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuspendAssertConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendAssertConnectRequest) ProtoMessage() {}

func (x *SuspendAssertConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendAssertConnectRequest.ProtoReflect.Descriptor instead.
func (*SuspendAssertConnectRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{45}
}

func (x *SuspendAssertConnectRequest) GetWakeUpTimeout() int64 {
	if x != nil {
		return x.WakeUpTimeout
	}
	return 0
}

func (x *SuspendAssertConnectRequest) GetServicePath() string {
	if x != nil {
		return x.ServicePath
	}
	return ""
}

type SuspendAssertConnectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReconnectTime int64 `protobuf:"varint,1,opt,name=reconnect_time,json=reconnectTime,proto3" json:"reconnect_time,omitempty"`
}

func (x *SuspendAssertConnectResponse) Reset() {
	*x = SuspendAssertConnectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuspendAssertConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendAssertConnectResponse) ProtoMessage() {}

func (x *SuspendAssertConnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendAssertConnectResponse.ProtoReflect.Descriptor instead.
func (*SuspendAssertConnectResponse) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{46}
}

func (x *SuspendAssertConnectResponse) GetReconnectTime() int64 {
	if x != nil {
		return x.ReconnectTime
	}
	return 0
}

type SuspendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WakeUpTimeout  int64 `protobuf:"varint,1,opt,name=wake_up_timeout,json=wakeUpTimeout,proto3" json:"wake_up_timeout,omitempty"`
	CheckEarlyWake bool  `protobuf:"varint,2,opt,name=check_early_wake,json=checkEarlyWake,proto3" json:"check_early_wake,omitempty"`
}

func (x *SuspendRequest) Reset() {
	*x = SuspendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuspendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendRequest) ProtoMessage() {}

func (x *SuspendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendRequest.ProtoReflect.Descriptor instead.
func (*SuspendRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{47}
}

func (x *SuspendRequest) GetWakeUpTimeout() int64 {
	if x != nil {
		return x.WakeUpTimeout
	}
	return 0
}

func (x *SuspendRequest) GetCheckEarlyWake() bool {
	if x != nil {
		return x.CheckEarlyWake
	}
	return false
}

type SuspendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuspendTime int64 `protobuf:"varint,1,opt,name=suspend_time,json=suspendTime,proto3" json:"suspend_time,omitempty"`
}

func (x *SuspendResponse) Reset() {
	*x = SuspendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuspendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendResponse) ProtoMessage() {}

func (x *SuspendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendResponse.ProtoReflect.Descriptor instead.
func (*SuspendResponse) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{48}
}

func (x *SuspendResponse) GetSuspendTime() int64 {
	if x != nil {
		return x.SuspendTime
	}
	return 0
}

type GetGlobalFTPropertyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *GetGlobalFTPropertyResponse) Reset() {
	*x = GetGlobalFTPropertyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGlobalFTPropertyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGlobalFTPropertyResponse) ProtoMessage() {}

func (x *GetGlobalFTPropertyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGlobalFTPropertyResponse.ProtoReflect.Descriptor instead.
func (*GetGlobalFTPropertyResponse) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{49}
}

func (x *GetGlobalFTPropertyResponse) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type SetGlobalFTPropertyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *SetGlobalFTPropertyRequest) Reset() {
	*x = SetGlobalFTPropertyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGlobalFTPropertyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGlobalFTPropertyRequest) ProtoMessage() {}

func (x *SetGlobalFTPropertyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGlobalFTPropertyRequest.ProtoReflect.Descriptor instead.
func (*SetGlobalFTPropertyRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{50}
}

func (x *SetGlobalFTPropertyRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type GetScanAllowRoamPropertyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allow bool `protobuf:"varint,1,opt,name=allow,proto3" json:"allow,omitempty"`
}

func (x *GetScanAllowRoamPropertyResponse) Reset() {
	*x = GetScanAllowRoamPropertyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScanAllowRoamPropertyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScanAllowRoamPropertyResponse) ProtoMessage() {}

func (x *GetScanAllowRoamPropertyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScanAllowRoamPropertyResponse.ProtoReflect.Descriptor instead.
func (*GetScanAllowRoamPropertyResponse) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{51}
}

func (x *GetScanAllowRoamPropertyResponse) GetAllow() bool {
	if x != nil {
		return x.Allow
	}
	return false
}

type SetScanAllowRoamPropertyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allow bool `protobuf:"varint,1,opt,name=allow,proto3" json:"allow,omitempty"`
}

func (x *SetScanAllowRoamPropertyRequest) Reset() {
	*x = SetScanAllowRoamPropertyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetScanAllowRoamPropertyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetScanAllowRoamPropertyRequest) ProtoMessage() {}

func (x *SetScanAllowRoamPropertyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetScanAllowRoamPropertyRequest.ProtoReflect.Descriptor instead.
func (*SetScanAllowRoamPropertyRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{52}
}

func (x *SetScanAllowRoamPropertyRequest) GetAllow() bool {
	if x != nil {
		return x.Allow
	}
	return false
}

type InitDUTRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WithUi bool `protobuf:"varint,1,opt,name=with_ui,json=withUi,proto3" json:"with_ui,omitempty"`
}

func (x *InitDUTRequest) Reset() {
	*x = InitDUTRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitDUTRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitDUTRequest) ProtoMessage() {}

func (x *InitDUTRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitDUTRequest.ProtoReflect.Descriptor instead.
func (*InitDUTRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{53}
}

func (x *InitDUTRequest) GetWithUi() bool {
	if x != nil {
		return x.WithUi
	}
	return false
}

type FlushBSSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	Age           int64  `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"`
}

func (x *FlushBSSRequest) Reset() {
	*x = FlushBSSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushBSSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushBSSRequest) ProtoMessage() {}

func (x *FlushBSSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushBSSRequest.ProtoReflect.Descriptor instead.
func (*FlushBSSRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{54}
}

func (x *FlushBSSRequest) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *FlushBSSRequest) GetAge() int64 {
	if x != nil {
		return x.Age
	}
	return 0
}

type ResetTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServicePath string `protobuf:"bytes,1,opt,name=service_path,json=servicePath,proto3" json:"service_path,omitempty"`
	ServerIp    string `protobuf:"bytes,2,opt,name=server_ip,json=serverIp,proto3" json:"server_ip,omitempty"`
}

func (x *ResetTestRequest) Reset() {
	*x = ResetTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetTestRequest) ProtoMessage() {}

func (x *ResetTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetTestRequest.ProtoReflect.Descriptor instead.
func (*ResetTestRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{55}
}

func (x *ResetTestRequest) GetServicePath() string {
	if x != nil {
		return x.ServicePath
	}
	return ""
}

func (x *ResetTestRequest) GetServerIp() string {
	if x != nil {
		return x.ServerIp
	}
	return ""
}

type SetLoggingConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebugLevel int32    `protobuf:"varint,1,opt,name=debug_level,json=debugLevel,proto3" json:"debug_level,omitempty"`
	DebugTags  []string `protobuf:"bytes,2,rep,name=debug_tags,json=debugTags,proto3" json:"debug_tags,omitempty"`
}

func (x *SetLoggingConfigRequest) Reset() {
	*x = SetLoggingConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLoggingConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLoggingConfigRequest) ProtoMessage() {}

func (x *SetLoggingConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLoggingConfigRequest.ProtoReflect.Descriptor instead.
func (*SetLoggingConfigRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{56}
}

func (x *SetLoggingConfigRequest) GetDebugLevel() int32 {
	if x != nil {
		return x.DebugLevel
	}
	return 0
}

func (x *SetLoggingConfigRequest) GetDebugTags() []string {
	if x != nil {
		return x.DebugTags
	}
	return nil
}

type GetLoggingConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebugLevel int32    `protobuf:"varint,1,opt,name=debug_level,json=debugLevel,proto3" json:"debug_level,omitempty"`
	DebugTags  []string `protobuf:"bytes,2,rep,name=debug_tags,json=debugTags,proto3" json:"debug_tags,omitempty"`
}

func (x *GetLoggingConfigResponse) Reset() {
	*x = GetLoggingConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoggingConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoggingConfigResponse) ProtoMessage() {}

func (x *GetLoggingConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoggingConfigResponse.ProtoReflect.Descriptor instead.
func (*GetLoggingConfigResponse) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{57}
}

func (x *GetLoggingConfigResponse) GetDebugLevel() int32 {
	if x != nil {
		return x.DebugLevel
	}
	return 0
}

func (x *GetLoggingConfigResponse) GetDebugTags() []string {
	if x != nil {
		return x.DebugTags
	}
	return nil
}

type WakeOnWifiConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allowed             bool   `protobuf:"varint,1,opt,name=allowed,proto3" json:"allowed,omitempty"`
	Features            string `protobuf:"bytes,2,opt,name=features,proto3" json:"features,omitempty"`
	NetDetectScanPeriod uint32 `protobuf:"varint,3,opt,name=net_detect_scan_period,json=netDetectScanPeriod,proto3" json:"net_detect_scan_period,omitempty"`
}

func (x *WakeOnWifiConfig) Reset() {
	*x = WakeOnWifiConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WakeOnWifiConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WakeOnWifiConfig) ProtoMessage() {}

func (x *WakeOnWifiConfig) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WakeOnWifiConfig.ProtoReflect.Descriptor instead.
func (*WakeOnWifiConfig) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{58}
}

func (x *WakeOnWifiConfig) GetAllowed() bool {
	if x != nil {
		return x.Allowed
	}
	return false
}

func (x *WakeOnWifiConfig) GetFeatures() string {
	if x != nil {
		return x.Features
	}
	return ""
}

func (x *WakeOnWifiConfig) GetNetDetectScanPeriod() uint32 {
	if x != nil {
		return x.NetDetectScanPeriod
	}
	return 0
}

type SetWakeOnWifiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *WakeOnWifiConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *SetWakeOnWifiRequest) Reset() {
	*x = SetWakeOnWifiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetWakeOnWifiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWakeOnWifiRequest) ProtoMessage() {}

func (x *SetWakeOnWifiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWakeOnWifiRequest.ProtoReflect.Descriptor instead.
func (*SetWakeOnWifiRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{59}
}

func (x *SetWakeOnWifiRequest) GetConfig() *WakeOnWifiConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type GetWakeOnWifiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *WakeOnWifiConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *GetWakeOnWifiResponse) Reset() {
	*x = GetWakeOnWifiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWakeOnWifiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWakeOnWifiResponse) ProtoMessage() {}

func (x *GetWakeOnWifiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWakeOnWifiResponse.ProtoReflect.Descriptor instead.
func (*GetWakeOnWifiResponse) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{60}
}

func (x *GetWakeOnWifiResponse) GetConfig() *WakeOnWifiConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type CheckLastWakeReasonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *CheckLastWakeReasonRequest) Reset() {
	*x = CheckLastWakeReasonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckLastWakeReasonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckLastWakeReasonRequest) ProtoMessage() {}

func (x *CheckLastWakeReasonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckLastWakeReasonRequest.ProtoReflect.Descriptor instead.
func (*CheckLastWakeReasonRequest) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{61}
}

func (x *CheckLastWakeReasonRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type WatchDarkResumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *WatchDarkResumeResponse) Reset() {
	*x = WatchDarkResumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchDarkResumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchDarkResumeResponse) ProtoMessage() {}

func (x *WatchDarkResumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchDarkResumeResponse.ProtoReflect.Descriptor instead.
func (*WatchDarkResumeResponse) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{62}
}

func (x *WatchDarkResumeResponse) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type QueryServiceResponse_Wifi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bssid         string   `protobuf:"bytes,1,opt,name=bssid,proto3" json:"bssid,omitempty"`
	Frequency     uint32   `protobuf:"varint,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
	FrequencyList []uint32 `protobuf:"varint,3,rep,packed,name=frequency_list,json=frequencyList,proto3" json:"frequency_list,omitempty"`
	HexSsid       string   `protobuf:"bytes,4,opt,name=hex_ssid,json=hexSsid,proto3" json:"hex_ssid,omitempty"`
	HiddenSsid    bool     `protobuf:"varint,5,opt,name=hidden_ssid,json=hiddenSsid,proto3" json:"hidden_ssid,omitempty"`
	PhyMode       uint32   `protobuf:"varint,6,opt,name=phy_mode,json=phyMode,proto3" json:"phy_mode,omitempty"`
}

func (x *QueryServiceResponse_Wifi) Reset() {
	*x = QueryServiceResponse_Wifi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryServiceResponse_Wifi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryServiceResponse_Wifi) ProtoMessage() {}

func (x *QueryServiceResponse_Wifi) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryServiceResponse_Wifi.ProtoReflect.Descriptor instead.
func (*QueryServiceResponse_Wifi) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{10, 0}
}

func (x *QueryServiceResponse_Wifi) GetBssid() string {
	if x != nil {
		return x.Bssid
	}
	return ""
}

func (x *QueryServiceResponse_Wifi) GetFrequency() uint32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *QueryServiceResponse_Wifi) GetFrequencyList() []uint32 {
	if x != nil {
		return x.FrequencyList
	}
	return nil
}

func (x *QueryServiceResponse_Wifi) GetHexSsid() string {
	if x != nil {
		return x.HexSsid
	}
	return ""
}

func (x *QueryServiceResponse_Wifi) GetHiddenSsid() bool {
	if x != nil {
		return x.HiddenSsid
	}
	return false
}

func (x *QueryServiceResponse_Wifi) GetPhyMode() uint32 {
	if x != nil {
		return x.PhyMode
	}
	return 0
}

type ExpectShillPropertyRequest_Criterion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The shill property name.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The expected property values.
	AnyOf []*ShillVal `protobuf:"bytes,2,rep,name=any_of,json=anyOf,proto3" json:"any_of,omitempty"`
	// The unexpected property values.
	NoneOf []*ShillVal                            `protobuf:"bytes,3,rep,name=none_of,json=noneOf,proto3" json:"none_of,omitempty"`
	Method ExpectShillPropertyRequest_CheckMethod `protobuf:"varint,4,opt,name=method,proto3,enum=tast.cros.wifi.ExpectShillPropertyRequest_CheckMethod" json:"method,omitempty"`
}

func (x *ExpectShillPropertyRequest_Criterion) Reset() {
	*x = ExpectShillPropertyRequest_Criterion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpectShillPropertyRequest_Criterion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpectShillPropertyRequest_Criterion) ProtoMessage() {}

func (x *ExpectShillPropertyRequest_Criterion) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpectShillPropertyRequest_Criterion.ProtoReflect.Descriptor instead.
func (*ExpectShillPropertyRequest_Criterion) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{29, 0}
}

func (x *ExpectShillPropertyRequest_Criterion) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ExpectShillPropertyRequest_Criterion) GetAnyOf() []*ShillVal {
	if x != nil {
		return x.AnyOf
	}
	return nil
}

func (x *ExpectShillPropertyRequest_Criterion) GetNoneOf() []*ShillVal {
	if x != nil {
		return x.NoneOf
	}
	return nil
}

func (x *ExpectShillPropertyRequest_Criterion) GetMethod() ExpectShillPropertyRequest_CheckMethod {
	if x != nil {
		return x.Method
	}
	return ExpectShillPropertyRequest_CHECK_WAIT
}

// The configuration for connecting to a certain AP, as like ConnectRequest.
type ProfileBasicTestRequest_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ssid       []byte               `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
	Security   string               `protobuf:"bytes,2,opt,name=security,proto3" json:"security,omitempty"`
	Ip         string               `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	ShillProps map[string]*ShillVal `protobuf:"bytes,4,rep,name=shill_props,json=shillProps,proto3" json:"shill_props,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ProfileBasicTestRequest_Config) Reset() {
	*x = ProfileBasicTestRequest_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shill_service_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileBasicTestRequest_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileBasicTestRequest_Config) ProtoMessage() {}

func (x *ProfileBasicTestRequest_Config) ProtoReflect() protoreflect.Message {
	mi := &file_shill_service_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileBasicTestRequest_Config.ProtoReflect.Descriptor instead.
func (*ProfileBasicTestRequest_Config) Descriptor() ([]byte, []int) {
	return file_shill_service_proto_rawDescGZIP(), []int{32, 0}
}

func (x *ProfileBasicTestRequest_Config) GetSsid() []byte {
	if x != nil {
		return x.Ssid
	}
	return nil
}

func (x *ProfileBasicTestRequest_Config) GetSecurity() string {
	if x != nil {
		return x.Security
	}
	return ""
}

func (x *ProfileBasicTestRequest_Config) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *ProfileBasicTestRequest_Config) GetShillProps() map[string]*ShillVal {
	if x != nil {
		return x.ShillProps
	}
	return nil
}

var File_shill_service_proto protoreflect.FileDescriptor

var file_shill_service_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x68, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x2e, 0x77, 0x69, 0x66, 0x69, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x81, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x73, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x4e, 0x0a,
	0x0a, 0x73, 0x68, 0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69,
	0x66, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x68, 0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x1a, 0x57, 0x0a,
	0x0f, 0x53, 0x68, 0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69,
	0x66, 0x69, 0x2e, 0x53, 0x68, 0x69, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd0, 0x01, 0x0a, 0x08, 0x53, 0x68, 0x69, 0x6c, 0x6c,
	0x56, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x18, 0x0a,
	0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x5f, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x73,
	0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x53, 0x74, 0x72, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x40, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72,
	0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x42, 0x05, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x1e, 0x0a, 0x08, 0x53, 0x74, 0x72,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x22, 0x21, 0x0a, 0x0b, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x61, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x22, 0xb5, 0x01, 0x0a,
	0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x42, 0x53, 0x53, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x73, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x73, 0x73, 0x69, 0x64, 0x22, 0x3e, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x42, 0x53, 0x53, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x22, 0x31, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x53, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x73, 0x73, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x22, 0xcb, 0x03, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x3d, 0x0a, 0x04, 0x77, 0x69, 0x66, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x52, 0x04, 0x77, 0x69, 0x66, 0x69,
	0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x67, 0x75, 0x69, 0x64, 0x1a, 0xb8, 0x01, 0x0a, 0x04, 0x57, 0x69, 0x66, 0x69, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x73,
	0x73, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x65, 0x78, 0x5f,
	0x73, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x65, 0x78, 0x53,
	0x73, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x73, 0x73,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x53, 0x73, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x68, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x22,
	0x2a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x49, 0x50, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2a, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x49, 0x50, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x70, 0x76, 0x34, 0x22, 0x3e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x22, 0x54, 0x0a, 0x1c, 0x45, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x57, 0x69, 0x66, 0x69, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x73, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x22,
	0x72, 0x0a, 0x0c, 0x42, 0x67, 0x73, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x23,
	0x0a, 0x0d, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x6f, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x22, 0x4f, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x67, 0x73, 0x63, 0x61, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e,
	0x42, 0x67, 0x73, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x4e, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x42, 0x67, 0x73, 0x63, 0x61,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e,
	0x42, 0x67, 0x73, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x56, 0x0a, 0x17, 0x41, 0x73, 0x73, 0x75, 0x72, 0x65, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x64, 0x0a, 0x18,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x22, 0x2b, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x63, 0x61,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x30, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x4d, 0x41, 0x43, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69,
	0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0x3a, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x4d, 0x41, 0x43, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xd1, 0x01,
	0x0a, 0x24, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x41, 0x73,
	0x73, 0x65, 0x72, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f,
	0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x41, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x1a, 0x52, 0x0a,
	0x0a, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x53, 0x68,
	0x69, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x3b, 0x0a, 0x25, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x41, 0x6e,
	0x64, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x5e,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x77, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x6f,
	0x77, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x6f, 0x77, 0x5f, 0x6e,
	0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x6e, 0x6f, 0x77, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0x3c,
	0x0a, 0x17, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0xc0, 0x03, 0x0a,
	0x1a, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x53, 0x68, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4a, 0x0a, 0x05,
	0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x61,
	0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x45, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x53, 0x68, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x1a, 0xd1, 0x01,
	0x0a, 0x09, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a,
	0x06, 0x61, 0x6e, 0x79, 0x5f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x53,
	0x68, 0x69, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x52, 0x05, 0x61, 0x6e, 0x79, 0x4f, 0x66, 0x12, 0x31,
	0x0a, 0x07, 0x6e, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69,
	0x2e, 0x53, 0x68, 0x69, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x52, 0x06, 0x6e, 0x6f, 0x6e, 0x65, 0x4f,
	0x66, 0x12, 0x4e, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x36, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69,
	0x66, 0x69, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x53, 0x68, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x22, 0x3c, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x22,
	0x5c, 0x0a, 0x1a, 0x53, 0x68, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x72, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x72, 0x6f,
	0x70, 0x12, 0x2a, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e,
	0x53, 0x68, 0x69, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0xc0, 0x01,
	0x0a, 0x1b, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x53, 0x68, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2a, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x53, 0x68,
	0x69, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x05, 0x70,
	0x72, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x61, 0x73,
	0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x53, 0x68, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x44, 0x6f, 0x6e, 0x65,
	0x22, 0xa2, 0x03, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x03,
	0x61, 0x70, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x61, 0x70, 0x30, 0x12, 0x40,
	0x0a, 0x03, 0x61, 0x70, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x61,
	0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x61, 0x70, 0x31,
	0x1a, 0x82, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x73, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x5f, 0x0a, 0x0b, 0x73,
	0x68, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66,
	0x69, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x68, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x73, 0x68, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x1a, 0x57, 0x0a, 0x0f,
	0x53, 0x68, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66,
	0x69, 0x2e, 0x53, 0x68, 0x69, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6b, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x6f, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x22, 0x2c, 0x0a, 0x0e, 0x44, 0x48, 0x43, 0x50, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x50, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x44, 0x48, 0x43, 0x50, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x05,
	0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x61,
	0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x44, 0x48, 0x43,
	0x50, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x05, 0x70, 0x72, 0x6f,
	0x70, 0x73, 0x22, 0x51, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x44, 0x48, 0x43, 0x50, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e,
	0x44, 0x48, 0x43, 0x50, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x05,
	0x70, 0x72, 0x6f, 0x70, 0x73, 0x22, 0x55, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x32, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x57, 0x69, 0x66, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x22, 0x31, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x57, 0x69, 0x66, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x22, 0x3f, 0x0a, 0x13, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x42, 0x53,
	0x53, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x73, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62,
	0x73, 0x73, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x1b, 0x4d, 0x41, 0x43, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x69, 0x7a, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x22, 0x33, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x41, 0x43, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x32, 0x0a, 0x16, 0x45, 0x41, 0x50, 0x41, 0x75, 0x74,
	0x68, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x22, 0x32, 0x0a, 0x18, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x68,
	0x0a, 0x1b, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x77, 0x61, 0x6b, 0x65, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x77, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x45, 0x0a, 0x1c, 0x53, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x62, 0x0a, 0x0e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x61, 0x6b, 0x65, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x77, 0x61, 0x6b, 0x65,
	0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x77, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x57,
	0x61, 0x6b, 0x65, 0x22, 0x34, 0x0a, 0x0f, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x75,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x46, 0x54, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0x36, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x46,
	0x54, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x38, 0x0a, 0x20, 0x47, 0x65,
	0x74, 0x53, 0x63, 0x61, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x6f, 0x61, 0x6d, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x22, 0x37, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x6f, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x22, 0x29, 0x0a,
	0x0e, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x55, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x77, 0x69, 0x74, 0x68, 0x55, 0x69, 0x22, 0x4a, 0x0a, 0x0f, 0x46, 0x6c, 0x75, 0x73,
	0x68, 0x42, 0x53, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x61, 0x67, 0x65, 0x22, 0x52, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x22, 0x59, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x4c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x54,
	0x61, 0x67, 0x73, 0x22, 0x5a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x54, 0x61, 0x67, 0x73, 0x22,
	0x7d, 0x0a, 0x10, 0x57, 0x61, 0x6b, 0x65, 0x4f, 0x6e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6e, 0x65, 0x74,
	0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6e, 0x65, 0x74, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x50,
	0x0a, 0x14, 0x53, 0x65, 0x74, 0x57, 0x61, 0x6b, 0x65, 0x4f, 0x6e, 0x57, 0x69, 0x66, 0x69, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72,
	0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x57, 0x61, 0x6b, 0x65, 0x4f, 0x6e, 0x57, 0x69,
	0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x51, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6b, 0x65, 0x4f, 0x6e, 0x57, 0x69, 0x66,
	0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x57, 0x61, 0x6b, 0x65, 0x4f,
	0x6e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x34, 0x0a, 0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x61, 0x73, 0x74,
	0x57, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x2f, 0x0a, 0x17, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0xdc, 0x21, 0x0a, 0x0c, 0x53,
	0x68, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x49,
	0x6e, 0x69, 0x74, 0x44, 0x55, 0x54, 0x12, 0x1e, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72,
	0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x55, 0x54, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x43, 0x0a, 0x0f, 0x52, 0x65, 0x69, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x08, 0x54, 0x65, 0x61, 0x72, 0x44, 0x6f, 0x77,
	0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x1e,
	0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x49, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12,
	0x21, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69,
	0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x14,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x53, 0x53, 0x49, 0x44, 0x12, 0x2b, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x53, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x2e, 0x74, 0x61,
	0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66,
	0x69, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x24, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49,
	0x50, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x23, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x50, 0x76,
	0x34, 0x41, 0x64, 0x64, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x50, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x26, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x15, 0x45,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x57, 0x69, 0x66, 0x69, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x57, 0x69, 0x66, 0x69,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x42, 0x67, 0x73, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x27, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x67, 0x73, 0x63,
	0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x53, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x42, 0x67, 0x73, 0x63, 0x61, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f,
	0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x67, 0x73, 0x63, 0x61, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x75, 0x72,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x27, 0x2e, 0x74, 0x61,
	0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x41, 0x73, 0x73,
	0x75, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x57,
	0x0a, 0x11, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e,
	0x77, 0x69, 0x66, 0x69, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x63, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x4d, 0x41, 0x43,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x2e, 0x74, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x41,
	0x43, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69,
	0x66, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x41, 0x43, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69,
	0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0c,
	0x57, 0x61, 0x69, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x64, 0x6c, 0x65, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x8e,
	0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x41,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x12, 0x34, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66,
	0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x41, 0x73,
	0x73, 0x65, 0x72, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72,
	0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x41, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x52, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e, 0x74, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x27,
	0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x13, 0x45, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x53, 0x68, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x12, 0x2a, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66,
	0x69, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x53, 0x68, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x74,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x45, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x53, 0x68, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x55, 0x0a,
	0x10, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69,
	0x66, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x42, 0x53, 0x53, 0x49, 0x44, 0x12, 0x24, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f,
	0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x42,
	0x53, 0x53, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x61,
	0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x53, 0x53, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x6f, 0x61, 0x6d, 0x12, 0x22, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e,
	0x77, 0x69, 0x66, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x6a, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x44, 0x48, 0x43, 0x50, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72,
	0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x48, 0x43, 0x50, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66,
	0x69, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x48, 0x43, 0x50, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a,
	0x0b, 0x52, 0x65, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x74,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x52, 0x65,
	0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x57, 0x69, 0x66, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x69, 0x66, 0x69, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51,
	0x0a, 0x0e, 0x53, 0x65, 0x74, 0x57, 0x69, 0x66, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x25, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66,
	0x69, 0x2e, 0x53, 0x65, 0x74, 0x57, 0x69, 0x66, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x42, 0x53, 0x53, 0x49,
	0x44, 0x12, 0x23, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69,
	0x66, 0x69, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x42, 0x53, 0x53, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x5c, 0x0a, 0x13, 0x4d, 0x41, 0x43, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x2b, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69,
	0x2e, 0x4d, 0x41, 0x43, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x41, 0x43, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a,
	0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x27, 0x2e, 0x74, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x41,
	0x43, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0e, 0x45, 0x41, 0x50, 0x41, 0x75, 0x74, 0x68, 0x53,
	0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26,
	0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e,
	0x45, 0x41, 0x50, 0x41, 0x75, 0x74, 0x68, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x73, 0x0a, 0x14, 0x53, 0x75,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x12, 0x2b, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77,
	0x69, 0x66, 0x69, 0x2e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69,
	0x2e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4c, 0x0a, 0x07, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x1e, 0x2e, 0x74, 0x61, 0x73,
	0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x53, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x61, 0x73,
	0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x53, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x46, 0x54, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2b, 0x2e, 0x74,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x46, 0x54, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x13, 0x53,
	0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x46, 0x54, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x12, 0x2a, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77,
	0x69, 0x66, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x46, 0x54, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53,
	0x63, 0x61, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x6f, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x30, 0x2e, 0x74,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x63, 0x61, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x6f, 0x61, 0x6d, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x65, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x52, 0x6f, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x2f, 0x2e, 0x74,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x53, 0x65,
	0x74, 0x53, 0x63, 0x61, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x6f, 0x61, 0x6d, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x28, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e,
	0x77, 0x69, 0x66, 0x69, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x45, 0x0a, 0x08, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x42, 0x53, 0x53, 0x12, 0x1f, 0x2e,
	0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x46,
	0x6c, 0x75, 0x73, 0x68, 0x42, 0x53, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f,
	0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x28,
	0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x10, 0x53, 0x65,
	0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27,
	0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e,
	0x53, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x50, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6b, 0x65, 0x4f, 0x6e, 0x57, 0x69,
	0x66, 0x69, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x25, 0x2e, 0x74, 0x61, 0x73,
	0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x57,
	0x61, 0x6b, 0x65, 0x4f, 0x6e, 0x57, 0x69, 0x66, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x57, 0x61, 0x6b, 0x65, 0x4f, 0x6e,
	0x57, 0x69, 0x66, 0x69, 0x12, 0x24, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x57, 0x61, 0x6b, 0x65, 0x4f, 0x6e, 0x57,
	0x69, 0x66, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x61, 0x73,
	0x74, 0x57, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x74, 0x61,
	0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x56, 0x0a, 0x0f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x72, 0x6b, 0x52, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x27, 0x2e, 0x74,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x24, 0x5a, 0x22, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x77, 0x69, 0x66, 0x69, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_shill_service_proto_rawDescOnce sync.Once
	file_shill_service_proto_rawDescData = file_shill_service_proto_rawDesc
)

func file_shill_service_proto_rawDescGZIP() []byte {
	file_shill_service_proto_rawDescOnce.Do(func() {
		file_shill_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_shill_service_proto_rawDescData)
	})
	return file_shill_service_proto_rawDescData
}

var file_shill_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_shill_service_proto_msgTypes = make([]protoimpl.MessageInfo, 69)
var file_shill_service_proto_goTypes = []interface{}{
	(ExpectShillPropertyRequest_CheckMethod)(0),   // 0: tast.cros.wifi.ExpectShillPropertyRequest.CheckMethod
	(*ConnectRequest)(nil),                        // 1: tast.cros.wifi.ConnectRequest
	(*ShillVal)(nil),                              // 2: tast.cros.wifi.ShillVal
	(*StrArray)(nil),                              // 3: tast.cros.wifi.StrArray
	(*Uint32Array)(nil),                           // 4: tast.cros.wifi.Uint32Array
	(*ConnectResponse)(nil),                       // 5: tast.cros.wifi.ConnectResponse
	(*DiscoverBSSIDRequest)(nil),                  // 6: tast.cros.wifi.DiscoverBSSIDRequest
	(*DiscoverBSSIDResponse)(nil),                 // 7: tast.cros.wifi.DiscoverBSSIDResponse
	(*DisconnectRequest)(nil),                     // 8: tast.cros.wifi.DisconnectRequest
	(*DeleteEntriesForSSIDRequest)(nil),           // 9: tast.cros.wifi.DeleteEntriesForSSIDRequest
	(*QueryServiceRequest)(nil),                   // 10: tast.cros.wifi.QueryServiceRequest
	(*QueryServiceResponse)(nil),                  // 11: tast.cros.wifi.QueryServiceResponse
	(*GetInterfaceResponse)(nil),                  // 12: tast.cros.wifi.GetInterfaceResponse
	(*GetIPv4AddrsRequest)(nil),                   // 13: tast.cros.wifi.GetIPv4AddrsRequest
	(*GetIPv4AddrsResponse)(nil),                  // 14: tast.cros.wifi.GetIPv4AddrsResponse
	(*GetHardwareAddrRequest)(nil),                // 15: tast.cros.wifi.GetHardwareAddrRequest
	(*GetHardwareAddrResponse)(nil),               // 16: tast.cros.wifi.GetHardwareAddrResponse
	(*ExpectWifiFrequenciesRequest)(nil),          // 17: tast.cros.wifi.ExpectWifiFrequenciesRequest
	(*BgscanConfig)(nil),                          // 18: tast.cros.wifi.BgscanConfig
	(*GetBgscanConfigResponse)(nil),               // 19: tast.cros.wifi.GetBgscanConfigResponse
	(*SetBgscanConfigRequest)(nil),                // 20: tast.cros.wifi.SetBgscanConfigRequest
	(*AssureDisconnectRequest)(nil),               // 21: tast.cros.wifi.AssureDisconnectRequest
	(*DisableEnableTestRequest)(nil),              // 22: tast.cros.wifi.DisableEnableTestRequest
	(*RequestScansRequest)(nil),                   // 23: tast.cros.wifi.RequestScansRequest
	(*SetMACRandomizeRequest)(nil),                // 24: tast.cros.wifi.SetMACRandomizeRequest
	(*SetMACRandomizeResponse)(nil),               // 25: tast.cros.wifi.SetMACRandomizeResponse
	(*ConfigureAndAssertAutoConnectRequest)(nil),  // 26: tast.cros.wifi.ConfigureAndAssertAutoConnectRequest
	(*ConfigureAndAssertAutoConnectResponse)(nil), // 27: tast.cros.wifi.ConfigureAndAssertAutoConnectResponse
	(*GetCurrentTimeResponse)(nil),                // 28: tast.cros.wifi.GetCurrentTimeResponse
	(*SelectedServiceResponse)(nil),               // 29: tast.cros.wifi.SelectedServiceResponse
	(*ExpectShillPropertyRequest)(nil),            // 30: tast.cros.wifi.ExpectShillPropertyRequest
	(*ShillPropertyChangedSignal)(nil),            // 31: tast.cros.wifi.ShillPropertyChangedSignal
	(*ExpectShillPropertyResponse)(nil),           // 32: tast.cros.wifi.ExpectShillPropertyResponse
	(*ProfileBasicTestRequest)(nil),               // 33: tast.cros.wifi.ProfileBasicTestRequest
	(*RequestRoamRequest)(nil),                    // 34: tast.cros.wifi.RequestRoamRequest
	(*DHCPProperties)(nil),                        // 35: tast.cros.wifi.DHCPProperties
	(*SetDHCPPropertiesRequest)(nil),              // 36: tast.cros.wifi.SetDHCPPropertiesRequest
	(*SetDHCPPropertiesResponse)(nil),             // 37: tast.cros.wifi.SetDHCPPropertiesResponse
	(*ReassociateRequest)(nil),                    // 38: tast.cros.wifi.ReassociateRequest
	(*GetWifiEnabledResponse)(nil),                // 39: tast.cros.wifi.GetWifiEnabledResponse
	(*SetWifiEnabledRequest)(nil),                 // 40: tast.cros.wifi.SetWifiEnabledRequest
	(*WaitForBSSIDRequest)(nil),                   // 41: tast.cros.wifi.WaitForBSSIDRequest
	(*MACRandomizeSupportResponse)(nil),           // 42: tast.cros.wifi.MACRandomizeSupportResponse
	(*GetMACRandomizeResponse)(nil),               // 43: tast.cros.wifi.GetMACRandomizeResponse
	(*EAPAuthSkippedResponse)(nil),                // 44: tast.cros.wifi.EAPAuthSkippedResponse
	(*DisconnectReasonResponse)(nil),              // 45: tast.cros.wifi.DisconnectReasonResponse
	(*SuspendAssertConnectRequest)(nil),           // 46: tast.cros.wifi.SuspendAssertConnectRequest
	(*SuspendAssertConnectResponse)(nil),          // 47: tast.cros.wifi.SuspendAssertConnectResponse
	(*SuspendRequest)(nil),                        // 48: tast.cros.wifi.SuspendRequest
	(*SuspendResponse)(nil),                       // 49: tast.cros.wifi.SuspendResponse
	(*GetGlobalFTPropertyResponse)(nil),           // 50: tast.cros.wifi.GetGlobalFTPropertyResponse
	(*SetGlobalFTPropertyRequest)(nil),            // 51: tast.cros.wifi.SetGlobalFTPropertyRequest
	(*GetScanAllowRoamPropertyResponse)(nil),      // 52: tast.cros.wifi.GetScanAllowRoamPropertyResponse
	(*SetScanAllowRoamPropertyRequest)(nil),       // 53: tast.cros.wifi.SetScanAllowRoamPropertyRequest
	(*InitDUTRequest)(nil),                        // 54: tast.cros.wifi.InitDUTRequest
	(*FlushBSSRequest)(nil),                       // 55: tast.cros.wifi.FlushBSSRequest
	(*ResetTestRequest)(nil),                      // 56: tast.cros.wifi.ResetTestRequest
	(*SetLoggingConfigRequest)(nil),               // 57: tast.cros.wifi.SetLoggingConfigRequest
	(*GetLoggingConfigResponse)(nil),              // 58: tast.cros.wifi.GetLoggingConfigResponse
	(*WakeOnWifiConfig)(nil),                      // 59: tast.cros.wifi.WakeOnWifiConfig
	(*SetWakeOnWifiRequest)(nil),                  // 60: tast.cros.wifi.SetWakeOnWifiRequest
	(*GetWakeOnWifiResponse)(nil),                 // 61: tast.cros.wifi.GetWakeOnWifiResponse
	(*CheckLastWakeReasonRequest)(nil),            // 62: tast.cros.wifi.CheckLastWakeReasonRequest
	(*WatchDarkResumeResponse)(nil),               // 63: tast.cros.wifi.WatchDarkResumeResponse
	nil,                                           // 64: tast.cros.wifi.ConnectRequest.ShillpropsEntry
	(*QueryServiceResponse_Wifi)(nil),             // 65: tast.cros.wifi.QueryServiceResponse.Wifi
	nil,                                           // 66: tast.cros.wifi.ConfigureAndAssertAutoConnectRequest.PropsEntry
	(*ExpectShillPropertyRequest_Criterion)(nil),  // 67: tast.cros.wifi.ExpectShillPropertyRequest.Criterion
	(*ProfileBasicTestRequest_Config)(nil),        // 68: tast.cros.wifi.ProfileBasicTestRequest.Config
	nil,                                           // 69: tast.cros.wifi.ProfileBasicTestRequest.Config.ShillPropsEntry
	(*empty.Empty)(nil),                           // 70: google.protobuf.Empty
}
var file_shill_service_proto_depIdxs = []int32{
	64, // 0: tast.cros.wifi.ConnectRequest.shillprops:type_name -> tast.cros.wifi.ConnectRequest.ShillpropsEntry
	3,  // 1: tast.cros.wifi.ShillVal.str_array:type_name -> tast.cros.wifi.StrArray
	4,  // 2: tast.cros.wifi.ShillVal.uint32_array:type_name -> tast.cros.wifi.Uint32Array
	65, // 3: tast.cros.wifi.QueryServiceResponse.wifi:type_name -> tast.cros.wifi.QueryServiceResponse.Wifi
	18, // 4: tast.cros.wifi.GetBgscanConfigResponse.config:type_name -> tast.cros.wifi.BgscanConfig
	18, // 5: tast.cros.wifi.SetBgscanConfigRequest.config:type_name -> tast.cros.wifi.BgscanConfig
	66, // 6: tast.cros.wifi.ConfigureAndAssertAutoConnectRequest.props:type_name -> tast.cros.wifi.ConfigureAndAssertAutoConnectRequest.PropsEntry
	67, // 7: tast.cros.wifi.ExpectShillPropertyRequest.props:type_name -> tast.cros.wifi.ExpectShillPropertyRequest.Criterion
	2,  // 8: tast.cros.wifi.ShillPropertyChangedSignal.val:type_name -> tast.cros.wifi.ShillVal
	2,  // 9: tast.cros.wifi.ExpectShillPropertyResponse.val:type_name -> tast.cros.wifi.ShillVal
	31, // 10: tast.cros.wifi.ExpectShillPropertyResponse.props:type_name -> tast.cros.wifi.ShillPropertyChangedSignal
	68, // 11: tast.cros.wifi.ProfileBasicTestRequest.ap0:type_name -> tast.cros.wifi.ProfileBasicTestRequest.Config
	68, // 12: tast.cros.wifi.ProfileBasicTestRequest.ap1:type_name -> tast.cros.wifi.ProfileBasicTestRequest.Config
	35, // 13: tast.cros.wifi.SetDHCPPropertiesRequest.props:type_name -> tast.cros.wifi.DHCPProperties
	35, // 14: tast.cros.wifi.SetDHCPPropertiesResponse.props:type_name -> tast.cros.wifi.DHCPProperties
	59, // 15: tast.cros.wifi.SetWakeOnWifiRequest.config:type_name -> tast.cros.wifi.WakeOnWifiConfig
	59, // 16: tast.cros.wifi.GetWakeOnWifiResponse.config:type_name -> tast.cros.wifi.WakeOnWifiConfig
	2,  // 17: tast.cros.wifi.ConnectRequest.ShillpropsEntry.value:type_name -> tast.cros.wifi.ShillVal
	2,  // 18: tast.cros.wifi.ConfigureAndAssertAutoConnectRequest.PropsEntry.value:type_name -> tast.cros.wifi.ShillVal
	2,  // 19: tast.cros.wifi.ExpectShillPropertyRequest.Criterion.any_of:type_name -> tast.cros.wifi.ShillVal
	2,  // 20: tast.cros.wifi.ExpectShillPropertyRequest.Criterion.none_of:type_name -> tast.cros.wifi.ShillVal
	0,  // 21: tast.cros.wifi.ExpectShillPropertyRequest.Criterion.method:type_name -> tast.cros.wifi.ExpectShillPropertyRequest.CheckMethod
	69, // 22: tast.cros.wifi.ProfileBasicTestRequest.Config.shill_props:type_name -> tast.cros.wifi.ProfileBasicTestRequest.Config.ShillPropsEntry
	2,  // 23: tast.cros.wifi.ProfileBasicTestRequest.Config.ShillPropsEntry.value:type_name -> tast.cros.wifi.ShillVal
	54, // 24: tast.cros.wifi.ShillService.InitDUT:input_type -> tast.cros.wifi.InitDUTRequest
	70, // 25: tast.cros.wifi.ShillService.ReinitTestState:input_type -> google.protobuf.Empty
	70, // 26: tast.cros.wifi.ShillService.TearDown:input_type -> google.protobuf.Empty
	1,  // 27: tast.cros.wifi.ShillService.Connect:input_type -> tast.cros.wifi.ConnectRequest
	8,  // 28: tast.cros.wifi.ShillService.Disconnect:input_type -> tast.cros.wifi.DisconnectRequest
	9,  // 29: tast.cros.wifi.ShillService.DeleteEntriesForSSID:input_type -> tast.cros.wifi.DeleteEntriesForSSIDRequest
	10, // 30: tast.cros.wifi.ShillService.QueryService:input_type -> tast.cros.wifi.QueryServiceRequest
	70, // 31: tast.cros.wifi.ShillService.GetInterface:input_type -> google.protobuf.Empty
	13, // 32: tast.cros.wifi.ShillService.GetIPv4Addrs:input_type -> tast.cros.wifi.GetIPv4AddrsRequest
	15, // 33: tast.cros.wifi.ShillService.GetHardwareAddr:input_type -> tast.cros.wifi.GetHardwareAddrRequest
	17, // 34: tast.cros.wifi.ShillService.ExpectWifiFrequencies:input_type -> tast.cros.wifi.ExpectWifiFrequenciesRequest
	70, // 35: tast.cros.wifi.ShillService.GetBgscanConfig:input_type -> google.protobuf.Empty
	20, // 36: tast.cros.wifi.ShillService.SetBgscanConfig:input_type -> tast.cros.wifi.SetBgscanConfigRequest
	21, // 37: tast.cros.wifi.ShillService.AssureDisconnect:input_type -> tast.cros.wifi.AssureDisconnectRequest
	22, // 38: tast.cros.wifi.ShillService.DisableEnableTest:input_type -> tast.cros.wifi.DisableEnableTestRequest
	23, // 39: tast.cros.wifi.ShillService.RequestScans:input_type -> tast.cros.wifi.RequestScansRequest
	24, // 40: tast.cros.wifi.ShillService.SetMACRandomize:input_type -> tast.cros.wifi.SetMACRandomizeRequest
	70, // 41: tast.cros.wifi.ShillService.WaitScanIdle:input_type -> google.protobuf.Empty
	26, // 42: tast.cros.wifi.ShillService.ConfigureAndAssertAutoConnect:input_type -> tast.cros.wifi.ConfigureAndAssertAutoConnectRequest
	70, // 43: tast.cros.wifi.ShillService.GetCurrentTime:input_type -> google.protobuf.Empty
	70, // 44: tast.cros.wifi.ShillService.SelectedService:input_type -> google.protobuf.Empty
	30, // 45: tast.cros.wifi.ShillService.ExpectShillProperty:input_type -> tast.cros.wifi.ExpectShillPropertyRequest
	33, // 46: tast.cros.wifi.ShillService.ProfileBasicTest:input_type -> tast.cros.wifi.ProfileBasicTestRequest
	6,  // 47: tast.cros.wifi.ShillService.DiscoverBSSID:input_type -> tast.cros.wifi.DiscoverBSSIDRequest
	34, // 48: tast.cros.wifi.ShillService.RequestRoam:input_type -> tast.cros.wifi.RequestRoamRequest
	36, // 49: tast.cros.wifi.ShillService.SetDHCPProperties:input_type -> tast.cros.wifi.SetDHCPPropertiesRequest
	38, // 50: tast.cros.wifi.ShillService.Reassociate:input_type -> tast.cros.wifi.ReassociateRequest
	70, // 51: tast.cros.wifi.ShillService.GetWifiEnabled:input_type -> google.protobuf.Empty
	40, // 52: tast.cros.wifi.ShillService.SetWifiEnabled:input_type -> tast.cros.wifi.SetWifiEnabledRequest
	41, // 53: tast.cros.wifi.ShillService.WaitForBSSID:input_type -> tast.cros.wifi.WaitForBSSIDRequest
	70, // 54: tast.cros.wifi.ShillService.MACRandomizeSupport:input_type -> google.protobuf.Empty
	70, // 55: tast.cros.wifi.ShillService.GetMACRandomize:input_type -> google.protobuf.Empty
	70, // 56: tast.cros.wifi.ShillService.EAPAuthSkipped:input_type -> google.protobuf.Empty
	46, // 57: tast.cros.wifi.ShillService.SuspendAssertConnect:input_type -> tast.cros.wifi.SuspendAssertConnectRequest
	48, // 58: tast.cros.wifi.ShillService.Suspend:input_type -> tast.cros.wifi.SuspendRequest
	70, // 59: tast.cros.wifi.ShillService.GetGlobalFTProperty:input_type -> google.protobuf.Empty
	51, // 60: tast.cros.wifi.ShillService.SetGlobalFTProperty:input_type -> tast.cros.wifi.SetGlobalFTPropertyRequest
	70, // 61: tast.cros.wifi.ShillService.GetScanAllowRoamProperty:input_type -> google.protobuf.Empty
	53, // 62: tast.cros.wifi.ShillService.SetScanAllowRoamProperty:input_type -> tast.cros.wifi.SetScanAllowRoamPropertyRequest
	70, // 63: tast.cros.wifi.ShillService.DisconnectReason:input_type -> google.protobuf.Empty
	55, // 64: tast.cros.wifi.ShillService.FlushBSS:input_type -> tast.cros.wifi.FlushBSSRequest
	56, // 65: tast.cros.wifi.ShillService.ResetTest:input_type -> tast.cros.wifi.ResetTestRequest
	70, // 66: tast.cros.wifi.ShillService.HealthCheck:input_type -> google.protobuf.Empty
	70, // 67: tast.cros.wifi.ShillService.GetLoggingConfig:input_type -> google.protobuf.Empty
	57, // 68: tast.cros.wifi.ShillService.SetLoggingConfig:input_type -> tast.cros.wifi.SetLoggingConfigRequest
	70, // 69: tast.cros.wifi.ShillService.GetWakeOnWifi:input_type -> google.protobuf.Empty
	60, // 70: tast.cros.wifi.ShillService.SetWakeOnWifi:input_type -> tast.cros.wifi.SetWakeOnWifiRequest
	62, // 71: tast.cros.wifi.ShillService.CheckLastWakeReason:input_type -> tast.cros.wifi.CheckLastWakeReasonRequest
	70, // 72: tast.cros.wifi.ShillService.WatchDarkResume:input_type -> google.protobuf.Empty
	70, // 73: tast.cros.wifi.ShillService.InitDUT:output_type -> google.protobuf.Empty
	70, // 74: tast.cros.wifi.ShillService.ReinitTestState:output_type -> google.protobuf.Empty
	70, // 75: tast.cros.wifi.ShillService.TearDown:output_type -> google.protobuf.Empty
	5,  // 76: tast.cros.wifi.ShillService.Connect:output_type -> tast.cros.wifi.ConnectResponse
	70, // 77: tast.cros.wifi.ShillService.Disconnect:output_type -> google.protobuf.Empty
	70, // 78: tast.cros.wifi.ShillService.DeleteEntriesForSSID:output_type -> google.protobuf.Empty
	11, // 79: tast.cros.wifi.ShillService.QueryService:output_type -> tast.cros.wifi.QueryServiceResponse
	12, // 80: tast.cros.wifi.ShillService.GetInterface:output_type -> tast.cros.wifi.GetInterfaceResponse
	14, // 81: tast.cros.wifi.ShillService.GetIPv4Addrs:output_type -> tast.cros.wifi.GetIPv4AddrsResponse
	16, // 82: tast.cros.wifi.ShillService.GetHardwareAddr:output_type -> tast.cros.wifi.GetHardwareAddrResponse
	70, // 83: tast.cros.wifi.ShillService.ExpectWifiFrequencies:output_type -> google.protobuf.Empty
	19, // 84: tast.cros.wifi.ShillService.GetBgscanConfig:output_type -> tast.cros.wifi.GetBgscanConfigResponse
	70, // 85: tast.cros.wifi.ShillService.SetBgscanConfig:output_type -> google.protobuf.Empty
	70, // 86: tast.cros.wifi.ShillService.AssureDisconnect:output_type -> google.protobuf.Empty
	70, // 87: tast.cros.wifi.ShillService.DisableEnableTest:output_type -> google.protobuf.Empty
	70, // 88: tast.cros.wifi.ShillService.RequestScans:output_type -> google.protobuf.Empty
	25, // 89: tast.cros.wifi.ShillService.SetMACRandomize:output_type -> tast.cros.wifi.SetMACRandomizeResponse
	70, // 90: tast.cros.wifi.ShillService.WaitScanIdle:output_type -> google.protobuf.Empty
	27, // 91: tast.cros.wifi.ShillService.ConfigureAndAssertAutoConnect:output_type -> tast.cros.wifi.ConfigureAndAssertAutoConnectResponse
	28, // 92: tast.cros.wifi.ShillService.GetCurrentTime:output_type -> tast.cros.wifi.GetCurrentTimeResponse
	29, // 93: tast.cros.wifi.ShillService.SelectedService:output_type -> tast.cros.wifi.SelectedServiceResponse
	32, // 94: tast.cros.wifi.ShillService.ExpectShillProperty:output_type -> tast.cros.wifi.ExpectShillPropertyResponse
	70, // 95: tast.cros.wifi.ShillService.ProfileBasicTest:output_type -> google.protobuf.Empty
	7,  // 96: tast.cros.wifi.ShillService.DiscoverBSSID:output_type -> tast.cros.wifi.DiscoverBSSIDResponse
	70, // 97: tast.cros.wifi.ShillService.RequestRoam:output_type -> google.protobuf.Empty
	37, // 98: tast.cros.wifi.ShillService.SetDHCPProperties:output_type -> tast.cros.wifi.SetDHCPPropertiesResponse
	70, // 99: tast.cros.wifi.ShillService.Reassociate:output_type -> google.protobuf.Empty
	39, // 100: tast.cros.wifi.ShillService.GetWifiEnabled:output_type -> tast.cros.wifi.GetWifiEnabledResponse
	70, // 101: tast.cros.wifi.ShillService.SetWifiEnabled:output_type -> google.protobuf.Empty
	70, // 102: tast.cros.wifi.ShillService.WaitForBSSID:output_type -> google.protobuf.Empty
	42, // 103: tast.cros.wifi.ShillService.MACRandomizeSupport:output_type -> tast.cros.wifi.MACRandomizeSupportResponse
	43, // 104: tast.cros.wifi.ShillService.GetMACRandomize:output_type -> tast.cros.wifi.GetMACRandomizeResponse
	44, // 105: tast.cros.wifi.ShillService.EAPAuthSkipped:output_type -> tast.cros.wifi.EAPAuthSkippedResponse
	47, // 106: tast.cros.wifi.ShillService.SuspendAssertConnect:output_type -> tast.cros.wifi.SuspendAssertConnectResponse
	49, // 107: tast.cros.wifi.ShillService.Suspend:output_type -> tast.cros.wifi.SuspendResponse
	50, // 108: tast.cros.wifi.ShillService.GetGlobalFTProperty:output_type -> tast.cros.wifi.GetGlobalFTPropertyResponse
	70, // 109: tast.cros.wifi.ShillService.SetGlobalFTProperty:output_type -> google.protobuf.Empty
	52, // 110: tast.cros.wifi.ShillService.GetScanAllowRoamProperty:output_type -> tast.cros.wifi.GetScanAllowRoamPropertyResponse
	70, // 111: tast.cros.wifi.ShillService.SetScanAllowRoamProperty:output_type -> google.protobuf.Empty
	45, // 112: tast.cros.wifi.ShillService.DisconnectReason:output_type -> tast.cros.wifi.DisconnectReasonResponse
	70, // 113: tast.cros.wifi.ShillService.FlushBSS:output_type -> google.protobuf.Empty
	70, // 114: tast.cros.wifi.ShillService.ResetTest:output_type -> google.protobuf.Empty
	70, // 115: tast.cros.wifi.ShillService.HealthCheck:output_type -> google.protobuf.Empty
	58, // 116: tast.cros.wifi.ShillService.GetLoggingConfig:output_type -> tast.cros.wifi.GetLoggingConfigResponse
	70, // 117: tast.cros.wifi.ShillService.SetLoggingConfig:output_type -> google.protobuf.Empty
	61, // 118: tast.cros.wifi.ShillService.GetWakeOnWifi:output_type -> tast.cros.wifi.GetWakeOnWifiResponse
	70, // 119: tast.cros.wifi.ShillService.SetWakeOnWifi:output_type -> google.protobuf.Empty
	70, // 120: tast.cros.wifi.ShillService.CheckLastWakeReason:output_type -> google.protobuf.Empty
	63, // 121: tast.cros.wifi.ShillService.WatchDarkResume:output_type -> tast.cros.wifi.WatchDarkResumeResponse
	73, // [73:122] is the sub-list for method output_type
	24, // [24:73] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_shill_service_proto_init() }
func file_shill_service_proto_init() {
	if File_shill_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_shill_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShillVal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uint32Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoverBSSIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoverBSSIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEntriesForSSIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInterfaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIPv4AddrsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIPv4AddrsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHardwareAddrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHardwareAddrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpectWifiFrequenciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgscanConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBgscanConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBgscanConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssureDisconnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableEnableTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestScansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMACRandomizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMACRandomizeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureAndAssertAutoConnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureAndAssertAutoConnectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectedServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpectShillPropertyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShillPropertyChangedSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpectShillPropertyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileBasicTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestRoamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHCPProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDHCPPropertiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDHCPPropertiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReassociateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWifiEnabledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetWifiEnabledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForBSSIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MACRandomizeSupportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMACRandomizeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EAPAuthSkippedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectReasonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuspendAssertConnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuspendAssertConnectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuspendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuspendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGlobalFTPropertyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGlobalFTPropertyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScanAllowRoamPropertyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetScanAllowRoamPropertyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitDUTRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushBSSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLoggingConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoggingConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WakeOnWifiConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetWakeOnWifiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWakeOnWifiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckLastWakeReasonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchDarkResumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryServiceResponse_Wifi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpectShillPropertyRequest_Criterion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shill_service_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileBasicTestRequest_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_shill_service_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ShillVal_Str)(nil),
		(*ShillVal_Bool)(nil),
		(*ShillVal_Uint32)(nil),
		(*ShillVal_StrArray)(nil),
		(*ShillVal_Uint32Array)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_shill_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   69,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_shill_service_proto_goTypes,
		DependencyIndexes: file_shill_service_proto_depIdxs,
		EnumInfos:         file_shill_service_proto_enumTypes,
		MessageInfos:      file_shill_service_proto_msgTypes,
	}.Build()
	File_shill_service_proto = out.File
	file_shill_service_proto_rawDesc = nil
	file_shill_service_proto_goTypes = nil
	file_shill_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ShillServiceClient is the client API for ShillService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ShillServiceClient interface {
	// InitDUT initialize the DUT for WiFi testing.
	InitDUT(ctx context.Context, in *InitDUTRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// ReinitTestState cleans and sets up the environment for a single WiFi testcase.
	ReinitTestState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// TearDown reverts the settings made in InitDUT (and also ReinitTestState).
	TearDown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Connect attempts to connect WiFi network.
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
	// Disconnect attempts to disconnect from a service.
	Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// DeleteEntriesForSSID deletes all WiFi profile entries for a given ssid.
	DeleteEntriesForSSID(ctx context.Context, in *DeleteEntriesForSSIDRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// QueryService queries shill service information.
	QueryService(ctx context.Context, in *QueryServiceRequest, opts ...grpc.CallOption) (*QueryServiceResponse, error)
	// GetInterface returns the WiFi device interface name (e.g., wlan0).
	GetInterface(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetInterfaceResponse, error)
	// GetIPv4Addrs returns the IPv4 addresses for the network interface.
	GetIPv4Addrs(ctx context.Context, in *GetIPv4AddrsRequest, opts ...grpc.CallOption) (*GetIPv4AddrsResponse, error)
	// GetHardwareAddr returns the HardwareAddr for the network interface.
	GetHardwareAddr(ctx context.Context, in *GetHardwareAddrRequest, opts ...grpc.CallOption) (*GetHardwareAddrResponse, error)
	// ExpectWifiFrequencies checks if the device discovers the given SSID on the specific frequencies.
	ExpectWifiFrequencies(ctx context.Context, in *ExpectWifiFrequenciesRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetBgscanConfig returns the bgscan configuration the device's WiFi module currently uses.
	GetBgscanConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetBgscanConfigResponse, error)
	// SetBgscanConfig sets the device's WiFi module's bgscan configuration.
	SetBgscanConfig(ctx context.Context, in *SetBgscanConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// AssureDisconnect assures that the WiFi service has disconnected within timeout (nanoseconds).
	AssureDisconnect(ctx context.Context, in *AssureDisconnectRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// DisableEnableTest disables and then enables the WiFi interface.
	// This is the main body of the DisableEnable test.
	DisableEnableTest(ctx context.Context, in *DisableEnableTestRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// RequestScans requests shill to trigger active scans on WiFi devices.
	RequestScans(ctx context.Context, in *RequestScansRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// SetMACRandomize sets the MAC randomization setting on the WiFi device.
	// The original setting is returned for ease of restoring.
	SetMACRandomize(ctx context.Context, in *SetMACRandomizeRequest, opts ...grpc.CallOption) (*SetMACRandomizeResponse, error)
	// WaitScanIdle waits for not scanning state. If there's a running scan, it can
	// wait for it to be done with timeout 10 seconds.
	// This is useful when the test sets some parameters regarding scans and wants
	// to avoid noices due to not yet ended scans.
	WaitScanIdle(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// ConfigureAndAssertAutoConnect configures the matched shill service and then
	// waits for the IsConnected property becomes true.
	// Note that this function does not attempt to connect; it waits for auto
	// connect instead.
	ConfigureAndAssertAutoConnect(ctx context.Context, in *ConfigureAndAssertAutoConnectRequest, opts ...grpc.CallOption) (*ConfigureAndAssertAutoConnectResponse, error)
	// GetCurrentTime returns the current local time in the given format.
	GetCurrentTime(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetCurrentTimeResponse, error)
	// SelectedService returns the object path of selected service of WiFi service.
	SelectedService(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SelectedServiceResponse, error)
	// ExpectShillProperty is a streaming gRPC, takes a shill service path, expects a list of property
	// criteria in order, and takes a list of shill properties to monitor. When a property's value is
	// expected, it responds the property's (key, value) pair. The method sends an empty response as the
	// property watcher is set. A property matching criterion consists of a property name, a list of
	// expected values, a list of excluded values, and a "CheckType". We say a criterion is met iff the
	// property value is in one of the expected values and not in any of the excluded values. If the
	// property value is one of the excluded values, the method fails immediately. The call monitors the
	// specified shill properties and returns the monitor results as a chronological list of pairs
	// (changed property, changed value) at the end.
	// For CheckMethod, it has three methods:
	// 1. CHECK_ONLY: checks if the criterion is met.
	// 2. ON_CHANGE: waits for the property changes to the expected values.
	// 3. CHECK_WAIT: checks if the criterion is met; if not, waits until the property's value is met.
	ExpectShillProperty(ctx context.Context, in *ExpectShillPropertyRequest, opts ...grpc.CallOption) (ShillService_ExpectShillPropertyClient, error)
	// ProfileBasicTest is the main body of the ProfileBasic test, which creates,
	// pushes, and pops the profiles and asserts the connection states between
	// those operations.
	ProfileBasicTest(ctx context.Context, in *ProfileBasicTestRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// DiscoverBSSID discovers the specified BSSID by running a scan.
	DiscoverBSSID(ctx context.Context, in *DiscoverBSSIDRequest, opts ...grpc.CallOption) (*DiscoverBSSIDResponse, error)
	// RequestRoam requests DUT to roam to the specified BSSID and waits until
	// the DUT has roamed.
	RequestRoam(ctx context.Context, in *RequestRoamRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// SetDHCPProperties sets the DHCP properties in shill and returns the original
	// values.
	SetDHCPProperties(ctx context.Context, in *SetDHCPPropertiesRequest, opts ...grpc.CallOption) (*SetDHCPPropertiesResponse, error)
	// Reassociate triggers reassociation with the current AP and waits until it
	// has reconnected or the timeout (in nanoseconds) expires.
	Reassociate(ctx context.Context, in *ReassociateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetWifiEnabled checks to see if Wifi is an enabled technology on shill.
	// This call will wait for WiFi to appear in available technologies so we
	// can get correct enabled setting.
	GetWifiEnabled(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetWifiEnabledResponse, error)
	// SetWifiEnabled persistently enables/disables Wifi via shill.
	SetWifiEnabled(ctx context.Context, in *SetWifiEnabledRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// WaitForBSSID waits for a specific BSSID to be found.
	WaitForBSSID(ctx context.Context, in *WaitForBSSIDRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// MACRandomizeSupport tells if MAC randomization is supported for the WiFi device.
	MACRandomizeSupport(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MACRandomizeSupportResponse, error)
	// GetMACRandomize tells if MAC randomization is enabled for the WiFi device.
	GetMACRandomize(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetMACRandomizeResponse, error)
	// EAPAuthSkipped is a streaming gRPC, who watches wpa_supplicant's D-Bus signals until the next connection
	// completes, and tells that the EAP authentication is skipped (i.e., PMKSA is cached and used) or not.
	// Note that the method sends an empty response as the signal watcher is set.
	EAPAuthSkipped(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ShillService_EAPAuthSkippedClient, error)
	// SuspendAssertConnect suspends the DUT and waits for connection after resuming.
	SuspendAssertConnect(ctx context.Context, in *SuspendAssertConnectRequest, opts ...grpc.CallOption) (*SuspendAssertConnectResponse, error)
	// Suspend suspends the DUT.
	Suspend(ctx context.Context, in *SuspendRequest, opts ...grpc.CallOption) (*SuspendResponse, error)
	// GetGlobalFTProperty returns the WiFi.GlobalFTEnabled manager property value.
	GetGlobalFTProperty(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetGlobalFTPropertyResponse, error)
	// SetGlobalFTProperty set the WiFi.GlobalFTEnabled manager property value.
	SetGlobalFTProperty(ctx context.Context, in *SetGlobalFTPropertyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetScanAllowRoamProperty returns the WiFi.ScanAllowRoam manager property value.
	GetScanAllowRoamProperty(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetScanAllowRoamPropertyResponse, error)
	// SetScanAllowRoamProperty set the WiFi.ScanAllowRoam manager property value.
	SetScanAllowRoamProperty(ctx context.Context, in *SetScanAllowRoamPropertyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// DisconnectReason is a streaming gRPC, who waits for the wpa_supplicant's
	// DisconnectReason property change, and returns the code to the client.
	// To notify the caller that it is ready, it sends an empty response after
	// the signal watcher is initialized.
	DisconnectReason(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ShillService_DisconnectReasonClient, error)
	// FlushBSS flushes BSS entries over the specified age from wpa_supplicant's cache.
	FlushBSS(ctx context.Context, in *FlushBSSRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// ResetTest is the main body of the Reset test, which resets/suspends and verifies the connection for several times.
	ResetTest(ctx context.Context, in *ResetTestRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// HealthCheck examines if the DUT is healthy. If some tests fail to bring
	// the WiFi device back, it treats the DUT as unhealthy. Testing host needs
	// to reboot the DUT to refrain it from affecting the following tests.
	HealthCheck(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetLoggingConfig returns the logging configuration the device currently uses.
	GetLoggingConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetLoggingConfigResponse, error)
	// SetLoggingConfig sets the device logging configuration.
	SetLoggingConfig(ctx context.Context, in *SetLoggingConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetWakeOnWifi gets WakeOnWiFi related properties of WiFi device.
	GetWakeOnWifi(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetWakeOnWifiResponse, error)
	// SetWakeOnWifi sets WakeOnWiFi related properties of WiFi device.
	SetWakeOnWifi(ctx context.Context, in *SetWakeOnWifiRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CheckLastWakeReason checks if the last wake reason of WiFi device is as expected.
	CheckLastWakeReason(ctx context.Context, in *CheckLastWakeReasonRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// WatchDarkResume is a streaming gRPC which watchers power manager's D-Bus
	// signals until next resume (SuspendDone), and returns the count of dark
	// resumes.
	// Note that it sends back an empty response first to notify the caller that
	// the D-Bus watcher is ready.
	WatchDarkResume(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ShillService_WatchDarkResumeClient, error)
}

type shillServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShillServiceClient(cc grpc.ClientConnInterface) ShillServiceClient {
	return &shillServiceClient{cc}
}

func (c *shillServiceClient) InitDUT(ctx context.Context, in *InitDUTRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/InitDUT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) ReinitTestState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/ReinitTestState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) TearDown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/TearDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) DeleteEntriesForSSID(ctx context.Context, in *DeleteEntriesForSSIDRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/DeleteEntriesForSSID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) QueryService(ctx context.Context, in *QueryServiceRequest, opts ...grpc.CallOption) (*QueryServiceResponse, error) {
	out := new(QueryServiceResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/QueryService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) GetInterface(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetInterfaceResponse, error) {
	out := new(GetInterfaceResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/GetInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) GetIPv4Addrs(ctx context.Context, in *GetIPv4AddrsRequest, opts ...grpc.CallOption) (*GetIPv4AddrsResponse, error) {
	out := new(GetIPv4AddrsResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/GetIPv4Addrs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) GetHardwareAddr(ctx context.Context, in *GetHardwareAddrRequest, opts ...grpc.CallOption) (*GetHardwareAddrResponse, error) {
	out := new(GetHardwareAddrResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/GetHardwareAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) ExpectWifiFrequencies(ctx context.Context, in *ExpectWifiFrequenciesRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/ExpectWifiFrequencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) GetBgscanConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetBgscanConfigResponse, error) {
	out := new(GetBgscanConfigResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/GetBgscanConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) SetBgscanConfig(ctx context.Context, in *SetBgscanConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/SetBgscanConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) AssureDisconnect(ctx context.Context, in *AssureDisconnectRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/AssureDisconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) DisableEnableTest(ctx context.Context, in *DisableEnableTestRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/DisableEnableTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) RequestScans(ctx context.Context, in *RequestScansRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/RequestScans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) SetMACRandomize(ctx context.Context, in *SetMACRandomizeRequest, opts ...grpc.CallOption) (*SetMACRandomizeResponse, error) {
	out := new(SetMACRandomizeResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/SetMACRandomize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) WaitScanIdle(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/WaitScanIdle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) ConfigureAndAssertAutoConnect(ctx context.Context, in *ConfigureAndAssertAutoConnectRequest, opts ...grpc.CallOption) (*ConfigureAndAssertAutoConnectResponse, error) {
	out := new(ConfigureAndAssertAutoConnectResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/ConfigureAndAssertAutoConnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) GetCurrentTime(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetCurrentTimeResponse, error) {
	out := new(GetCurrentTimeResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/GetCurrentTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) SelectedService(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SelectedServiceResponse, error) {
	out := new(SelectedServiceResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/SelectedService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) ExpectShillProperty(ctx context.Context, in *ExpectShillPropertyRequest, opts ...grpc.CallOption) (ShillService_ExpectShillPropertyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ShillService_serviceDesc.Streams[0], "/tast.cros.wifi.ShillService/ExpectShillProperty", opts...)
	if err != nil {
		return nil, err
	}
	x := &shillServiceExpectShillPropertyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ShillService_ExpectShillPropertyClient interface {
	Recv() (*ExpectShillPropertyResponse, error)
	grpc.ClientStream
}

type shillServiceExpectShillPropertyClient struct {
	grpc.ClientStream
}

func (x *shillServiceExpectShillPropertyClient) Recv() (*ExpectShillPropertyResponse, error) {
	m := new(ExpectShillPropertyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *shillServiceClient) ProfileBasicTest(ctx context.Context, in *ProfileBasicTestRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/ProfileBasicTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) DiscoverBSSID(ctx context.Context, in *DiscoverBSSIDRequest, opts ...grpc.CallOption) (*DiscoverBSSIDResponse, error) {
	out := new(DiscoverBSSIDResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/DiscoverBSSID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) RequestRoam(ctx context.Context, in *RequestRoamRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/RequestRoam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) SetDHCPProperties(ctx context.Context, in *SetDHCPPropertiesRequest, opts ...grpc.CallOption) (*SetDHCPPropertiesResponse, error) {
	out := new(SetDHCPPropertiesResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/SetDHCPProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) Reassociate(ctx context.Context, in *ReassociateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/Reassociate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) GetWifiEnabled(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetWifiEnabledResponse, error) {
	out := new(GetWifiEnabledResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/GetWifiEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) SetWifiEnabled(ctx context.Context, in *SetWifiEnabledRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/SetWifiEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) WaitForBSSID(ctx context.Context, in *WaitForBSSIDRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/WaitForBSSID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) MACRandomizeSupport(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MACRandomizeSupportResponse, error) {
	out := new(MACRandomizeSupportResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/MACRandomizeSupport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) GetMACRandomize(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetMACRandomizeResponse, error) {
	out := new(GetMACRandomizeResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/GetMACRandomize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) EAPAuthSkipped(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ShillService_EAPAuthSkippedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ShillService_serviceDesc.Streams[1], "/tast.cros.wifi.ShillService/EAPAuthSkipped", opts...)
	if err != nil {
		return nil, err
	}
	x := &shillServiceEAPAuthSkippedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ShillService_EAPAuthSkippedClient interface {
	Recv() (*EAPAuthSkippedResponse, error)
	grpc.ClientStream
}

type shillServiceEAPAuthSkippedClient struct {
	grpc.ClientStream
}

func (x *shillServiceEAPAuthSkippedClient) Recv() (*EAPAuthSkippedResponse, error) {
	m := new(EAPAuthSkippedResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *shillServiceClient) SuspendAssertConnect(ctx context.Context, in *SuspendAssertConnectRequest, opts ...grpc.CallOption) (*SuspendAssertConnectResponse, error) {
	out := new(SuspendAssertConnectResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/SuspendAssertConnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) Suspend(ctx context.Context, in *SuspendRequest, opts ...grpc.CallOption) (*SuspendResponse, error) {
	out := new(SuspendResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/Suspend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) GetGlobalFTProperty(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetGlobalFTPropertyResponse, error) {
	out := new(GetGlobalFTPropertyResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/GetGlobalFTProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) SetGlobalFTProperty(ctx context.Context, in *SetGlobalFTPropertyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/SetGlobalFTProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) GetScanAllowRoamProperty(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetScanAllowRoamPropertyResponse, error) {
	out := new(GetScanAllowRoamPropertyResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/GetScanAllowRoamProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) SetScanAllowRoamProperty(ctx context.Context, in *SetScanAllowRoamPropertyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/SetScanAllowRoamProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) DisconnectReason(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ShillService_DisconnectReasonClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ShillService_serviceDesc.Streams[2], "/tast.cros.wifi.ShillService/DisconnectReason", opts...)
	if err != nil {
		return nil, err
	}
	x := &shillServiceDisconnectReasonClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ShillService_DisconnectReasonClient interface {
	Recv() (*DisconnectReasonResponse, error)
	grpc.ClientStream
}

type shillServiceDisconnectReasonClient struct {
	grpc.ClientStream
}

func (x *shillServiceDisconnectReasonClient) Recv() (*DisconnectReasonResponse, error) {
	m := new(DisconnectReasonResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *shillServiceClient) FlushBSS(ctx context.Context, in *FlushBSSRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/FlushBSS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) ResetTest(ctx context.Context, in *ResetTestRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/ResetTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) HealthCheck(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) GetLoggingConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetLoggingConfigResponse, error) {
	out := new(GetLoggingConfigResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/GetLoggingConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) SetLoggingConfig(ctx context.Context, in *SetLoggingConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/SetLoggingConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) GetWakeOnWifi(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetWakeOnWifiResponse, error) {
	out := new(GetWakeOnWifiResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/GetWakeOnWifi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) SetWakeOnWifi(ctx context.Context, in *SetWakeOnWifiRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/SetWakeOnWifi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) CheckLastWakeReason(ctx context.Context, in *CheckLastWakeReasonRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.wifi.ShillService/CheckLastWakeReason", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shillServiceClient) WatchDarkResume(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ShillService_WatchDarkResumeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ShillService_serviceDesc.Streams[3], "/tast.cros.wifi.ShillService/WatchDarkResume", opts...)
	if err != nil {
		return nil, err
	}
	x := &shillServiceWatchDarkResumeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ShillService_WatchDarkResumeClient interface {
	Recv() (*WatchDarkResumeResponse, error)
	grpc.ClientStream
}

type shillServiceWatchDarkResumeClient struct {
	grpc.ClientStream
}

func (x *shillServiceWatchDarkResumeClient) Recv() (*WatchDarkResumeResponse, error) {
	m := new(WatchDarkResumeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ShillServiceServer is the server API for ShillService service.
type ShillServiceServer interface {
	// InitDUT initialize the DUT for WiFi testing.
	InitDUT(context.Context, *InitDUTRequest) (*empty.Empty, error)
	// ReinitTestState cleans and sets up the environment for a single WiFi testcase.
	ReinitTestState(context.Context, *empty.Empty) (*empty.Empty, error)
	// TearDown reverts the settings made in InitDUT (and also ReinitTestState).
	TearDown(context.Context, *empty.Empty) (*empty.Empty, error)
	// Connect attempts to connect WiFi network.
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	// Disconnect attempts to disconnect from a service.
	Disconnect(context.Context, *DisconnectRequest) (*empty.Empty, error)
	// DeleteEntriesForSSID deletes all WiFi profile entries for a given ssid.
	DeleteEntriesForSSID(context.Context, *DeleteEntriesForSSIDRequest) (*empty.Empty, error)
	// QueryService queries shill service information.
	QueryService(context.Context, *QueryServiceRequest) (*QueryServiceResponse, error)
	// GetInterface returns the WiFi device interface name (e.g., wlan0).
	GetInterface(context.Context, *empty.Empty) (*GetInterfaceResponse, error)
	// GetIPv4Addrs returns the IPv4 addresses for the network interface.
	GetIPv4Addrs(context.Context, *GetIPv4AddrsRequest) (*GetIPv4AddrsResponse, error)
	// GetHardwareAddr returns the HardwareAddr for the network interface.
	GetHardwareAddr(context.Context, *GetHardwareAddrRequest) (*GetHardwareAddrResponse, error)
	// ExpectWifiFrequencies checks if the device discovers the given SSID on the specific frequencies.
	ExpectWifiFrequencies(context.Context, *ExpectWifiFrequenciesRequest) (*empty.Empty, error)
	// GetBgscanConfig returns the bgscan configuration the device's WiFi module currently uses.
	GetBgscanConfig(context.Context, *empty.Empty) (*GetBgscanConfigResponse, error)
	// SetBgscanConfig sets the device's WiFi module's bgscan configuration.
	SetBgscanConfig(context.Context, *SetBgscanConfigRequest) (*empty.Empty, error)
	// AssureDisconnect assures that the WiFi service has disconnected within timeout (nanoseconds).
	AssureDisconnect(context.Context, *AssureDisconnectRequest) (*empty.Empty, error)
	// DisableEnableTest disables and then enables the WiFi interface.
	// This is the main body of the DisableEnable test.
	DisableEnableTest(context.Context, *DisableEnableTestRequest) (*empty.Empty, error)
	// RequestScans requests shill to trigger active scans on WiFi devices.
	RequestScans(context.Context, *RequestScansRequest) (*empty.Empty, error)
	// SetMACRandomize sets the MAC randomization setting on the WiFi device.
	// The original setting is returned for ease of restoring.
	SetMACRandomize(context.Context, *SetMACRandomizeRequest) (*SetMACRandomizeResponse, error)
	// WaitScanIdle waits for not scanning state. If there's a running scan, it can
	// wait for it to be done with timeout 10 seconds.
	// This is useful when the test sets some parameters regarding scans and wants
	// to avoid noices due to not yet ended scans.
	WaitScanIdle(context.Context, *empty.Empty) (*empty.Empty, error)
	// ConfigureAndAssertAutoConnect configures the matched shill service and then
	// waits for the IsConnected property becomes true.
	// Note that this function does not attempt to connect; it waits for auto
	// connect instead.
	ConfigureAndAssertAutoConnect(context.Context, *ConfigureAndAssertAutoConnectRequest) (*ConfigureAndAssertAutoConnectResponse, error)
	// GetCurrentTime returns the current local time in the given format.
	GetCurrentTime(context.Context, *empty.Empty) (*GetCurrentTimeResponse, error)
	// SelectedService returns the object path of selected service of WiFi service.
	SelectedService(context.Context, *empty.Empty) (*SelectedServiceResponse, error)
	// ExpectShillProperty is a streaming gRPC, takes a shill service path, expects a list of property
	// criteria in order, and takes a list of shill properties to monitor. When a property's value is
	// expected, it responds the property's (key, value) pair. The method sends an empty response as the
	// property watcher is set. A property matching criterion consists of a property name, a list of
	// expected values, a list of excluded values, and a "CheckType". We say a criterion is met iff the
	// property value is in one of the expected values and not in any of the excluded values. If the
	// property value is one of the excluded values, the method fails immediately. The call monitors the
	// specified shill properties and returns the monitor results as a chronological list of pairs
	// (changed property, changed value) at the end.
	// For CheckMethod, it has three methods:
	// 1. CHECK_ONLY: checks if the criterion is met.
	// 2. ON_CHANGE: waits for the property changes to the expected values.
	// 3. CHECK_WAIT: checks if the criterion is met; if not, waits until the property's value is met.
	ExpectShillProperty(*ExpectShillPropertyRequest, ShillService_ExpectShillPropertyServer) error
	// ProfileBasicTest is the main body of the ProfileBasic test, which creates,
	// pushes, and pops the profiles and asserts the connection states between
	// those operations.
	ProfileBasicTest(context.Context, *ProfileBasicTestRequest) (*empty.Empty, error)
	// DiscoverBSSID discovers the specified BSSID by running a scan.
	DiscoverBSSID(context.Context, *DiscoverBSSIDRequest) (*DiscoverBSSIDResponse, error)
	// RequestRoam requests DUT to roam to the specified BSSID and waits until
	// the DUT has roamed.
	RequestRoam(context.Context, *RequestRoamRequest) (*empty.Empty, error)
	// SetDHCPProperties sets the DHCP properties in shill and returns the original
	// values.
	SetDHCPProperties(context.Context, *SetDHCPPropertiesRequest) (*SetDHCPPropertiesResponse, error)
	// Reassociate triggers reassociation with the current AP and waits until it
	// has reconnected or the timeout (in nanoseconds) expires.
	Reassociate(context.Context, *ReassociateRequest) (*empty.Empty, error)
	// GetWifiEnabled checks to see if Wifi is an enabled technology on shill.
	// This call will wait for WiFi to appear in available technologies so we
	// can get correct enabled setting.
	GetWifiEnabled(context.Context, *empty.Empty) (*GetWifiEnabledResponse, error)
	// SetWifiEnabled persistently enables/disables Wifi via shill.
	SetWifiEnabled(context.Context, *SetWifiEnabledRequest) (*empty.Empty, error)
	// WaitForBSSID waits for a specific BSSID to be found.
	WaitForBSSID(context.Context, *WaitForBSSIDRequest) (*empty.Empty, error)
	// MACRandomizeSupport tells if MAC randomization is supported for the WiFi device.
	MACRandomizeSupport(context.Context, *empty.Empty) (*MACRandomizeSupportResponse, error)
	// GetMACRandomize tells if MAC randomization is enabled for the WiFi device.
	GetMACRandomize(context.Context, *empty.Empty) (*GetMACRandomizeResponse, error)
	// EAPAuthSkipped is a streaming gRPC, who watches wpa_supplicant's D-Bus signals until the next connection
	// completes, and tells that the EAP authentication is skipped (i.e., PMKSA is cached and used) or not.
	// Note that the method sends an empty response as the signal watcher is set.
	EAPAuthSkipped(*empty.Empty, ShillService_EAPAuthSkippedServer) error
	// SuspendAssertConnect suspends the DUT and waits for connection after resuming.
	SuspendAssertConnect(context.Context, *SuspendAssertConnectRequest) (*SuspendAssertConnectResponse, error)
	// Suspend suspends the DUT.
	Suspend(context.Context, *SuspendRequest) (*SuspendResponse, error)
	// GetGlobalFTProperty returns the WiFi.GlobalFTEnabled manager property value.
	GetGlobalFTProperty(context.Context, *empty.Empty) (*GetGlobalFTPropertyResponse, error)
	// SetGlobalFTProperty set the WiFi.GlobalFTEnabled manager property value.
	SetGlobalFTProperty(context.Context, *SetGlobalFTPropertyRequest) (*empty.Empty, error)
	// GetScanAllowRoamProperty returns the WiFi.ScanAllowRoam manager property value.
	GetScanAllowRoamProperty(context.Context, *empty.Empty) (*GetScanAllowRoamPropertyResponse, error)
	// SetScanAllowRoamProperty set the WiFi.ScanAllowRoam manager property value.
	SetScanAllowRoamProperty(context.Context, *SetScanAllowRoamPropertyRequest) (*empty.Empty, error)
	// DisconnectReason is a streaming gRPC, who waits for the wpa_supplicant's
	// DisconnectReason property change, and returns the code to the client.
	// To notify the caller that it is ready, it sends an empty response after
	// the signal watcher is initialized.
	DisconnectReason(*empty.Empty, ShillService_DisconnectReasonServer) error
	// FlushBSS flushes BSS entries over the specified age from wpa_supplicant's cache.
	FlushBSS(context.Context, *FlushBSSRequest) (*empty.Empty, error)
	// ResetTest is the main body of the Reset test, which resets/suspends and verifies the connection for several times.
	ResetTest(context.Context, *ResetTestRequest) (*empty.Empty, error)
	// HealthCheck examines if the DUT is healthy. If some tests fail to bring
	// the WiFi device back, it treats the DUT as unhealthy. Testing host needs
	// to reboot the DUT to refrain it from affecting the following tests.
	HealthCheck(context.Context, *empty.Empty) (*empty.Empty, error)
	// GetLoggingConfig returns the logging configuration the device currently uses.
	GetLoggingConfig(context.Context, *empty.Empty) (*GetLoggingConfigResponse, error)
	// SetLoggingConfig sets the device logging configuration.
	SetLoggingConfig(context.Context, *SetLoggingConfigRequest) (*empty.Empty, error)
	// GetWakeOnWifi gets WakeOnWiFi related properties of WiFi device.
	GetWakeOnWifi(context.Context, *empty.Empty) (*GetWakeOnWifiResponse, error)
	// SetWakeOnWifi sets WakeOnWiFi related properties of WiFi device.
	SetWakeOnWifi(context.Context, *SetWakeOnWifiRequest) (*empty.Empty, error)
	// CheckLastWakeReason checks if the last wake reason of WiFi device is as expected.
	CheckLastWakeReason(context.Context, *CheckLastWakeReasonRequest) (*empty.Empty, error)
	// WatchDarkResume is a streaming gRPC which watchers power manager's D-Bus
	// signals until next resume (SuspendDone), and returns the count of dark
	// resumes.
	// Note that it sends back an empty response first to notify the caller that
	// the D-Bus watcher is ready.
	WatchDarkResume(*empty.Empty, ShillService_WatchDarkResumeServer) error
}

// UnimplementedShillServiceServer can be embedded to have forward compatible implementations.
type UnimplementedShillServiceServer struct {
}

func (*UnimplementedShillServiceServer) InitDUT(context.Context, *InitDUTRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDUT not implemented")
}
func (*UnimplementedShillServiceServer) ReinitTestState(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReinitTestState not implemented")
}
func (*UnimplementedShillServiceServer) TearDown(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TearDown not implemented")
}
func (*UnimplementedShillServiceServer) Connect(context.Context, *ConnectRequest) (*ConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedShillServiceServer) Disconnect(context.Context, *DisconnectRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (*UnimplementedShillServiceServer) DeleteEntriesForSSID(context.Context, *DeleteEntriesForSSIDRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntriesForSSID not implemented")
}
func (*UnimplementedShillServiceServer) QueryService(context.Context, *QueryServiceRequest) (*QueryServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryService not implemented")
}
func (*UnimplementedShillServiceServer) GetInterface(context.Context, *empty.Empty) (*GetInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterface not implemented")
}
func (*UnimplementedShillServiceServer) GetIPv4Addrs(context.Context, *GetIPv4AddrsRequest) (*GetIPv4AddrsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIPv4Addrs not implemented")
}
func (*UnimplementedShillServiceServer) GetHardwareAddr(context.Context, *GetHardwareAddrRequest) (*GetHardwareAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHardwareAddr not implemented")
}
func (*UnimplementedShillServiceServer) ExpectWifiFrequencies(context.Context, *ExpectWifiFrequenciesRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpectWifiFrequencies not implemented")
}
func (*UnimplementedShillServiceServer) GetBgscanConfig(context.Context, *empty.Empty) (*GetBgscanConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBgscanConfig not implemented")
}
func (*UnimplementedShillServiceServer) SetBgscanConfig(context.Context, *SetBgscanConfigRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBgscanConfig not implemented")
}
func (*UnimplementedShillServiceServer) AssureDisconnect(context.Context, *AssureDisconnectRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssureDisconnect not implemented")
}
func (*UnimplementedShillServiceServer) DisableEnableTest(context.Context, *DisableEnableTestRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableEnableTest not implemented")
}
func (*UnimplementedShillServiceServer) RequestScans(context.Context, *RequestScansRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestScans not implemented")
}
func (*UnimplementedShillServiceServer) SetMACRandomize(context.Context, *SetMACRandomizeRequest) (*SetMACRandomizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMACRandomize not implemented")
}
func (*UnimplementedShillServiceServer) WaitScanIdle(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitScanIdle not implemented")
}
func (*UnimplementedShillServiceServer) ConfigureAndAssertAutoConnect(context.Context, *ConfigureAndAssertAutoConnectRequest) (*ConfigureAndAssertAutoConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureAndAssertAutoConnect not implemented")
}
func (*UnimplementedShillServiceServer) GetCurrentTime(context.Context, *empty.Empty) (*GetCurrentTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentTime not implemented")
}
func (*UnimplementedShillServiceServer) SelectedService(context.Context, *empty.Empty) (*SelectedServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectedService not implemented")
}
func (*UnimplementedShillServiceServer) ExpectShillProperty(*ExpectShillPropertyRequest, ShillService_ExpectShillPropertyServer) error {
	return status.Errorf(codes.Unimplemented, "method ExpectShillProperty not implemented")
}
func (*UnimplementedShillServiceServer) ProfileBasicTest(context.Context, *ProfileBasicTestRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileBasicTest not implemented")
}
func (*UnimplementedShillServiceServer) DiscoverBSSID(context.Context, *DiscoverBSSIDRequest) (*DiscoverBSSIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverBSSID not implemented")
}
func (*UnimplementedShillServiceServer) RequestRoam(context.Context, *RequestRoamRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestRoam not implemented")
}
func (*UnimplementedShillServiceServer) SetDHCPProperties(context.Context, *SetDHCPPropertiesRequest) (*SetDHCPPropertiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDHCPProperties not implemented")
}
func (*UnimplementedShillServiceServer) Reassociate(context.Context, *ReassociateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reassociate not implemented")
}
func (*UnimplementedShillServiceServer) GetWifiEnabled(context.Context, *empty.Empty) (*GetWifiEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWifiEnabled not implemented")
}
func (*UnimplementedShillServiceServer) SetWifiEnabled(context.Context, *SetWifiEnabledRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWifiEnabled not implemented")
}
func (*UnimplementedShillServiceServer) WaitForBSSID(context.Context, *WaitForBSSIDRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForBSSID not implemented")
}
func (*UnimplementedShillServiceServer) MACRandomizeSupport(context.Context, *empty.Empty) (*MACRandomizeSupportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MACRandomizeSupport not implemented")
}
func (*UnimplementedShillServiceServer) GetMACRandomize(context.Context, *empty.Empty) (*GetMACRandomizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMACRandomize not implemented")
}
func (*UnimplementedShillServiceServer) EAPAuthSkipped(*empty.Empty, ShillService_EAPAuthSkippedServer) error {
	return status.Errorf(codes.Unimplemented, "method EAPAuthSkipped not implemented")
}
func (*UnimplementedShillServiceServer) SuspendAssertConnect(context.Context, *SuspendAssertConnectRequest) (*SuspendAssertConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendAssertConnect not implemented")
}
func (*UnimplementedShillServiceServer) Suspend(context.Context, *SuspendRequest) (*SuspendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Suspend not implemented")
}
func (*UnimplementedShillServiceServer) GetGlobalFTProperty(context.Context, *empty.Empty) (*GetGlobalFTPropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGlobalFTProperty not implemented")
}
func (*UnimplementedShillServiceServer) SetGlobalFTProperty(context.Context, *SetGlobalFTPropertyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGlobalFTProperty not implemented")
}
func (*UnimplementedShillServiceServer) GetScanAllowRoamProperty(context.Context, *empty.Empty) (*GetScanAllowRoamPropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScanAllowRoamProperty not implemented")
}
func (*UnimplementedShillServiceServer) SetScanAllowRoamProperty(context.Context, *SetScanAllowRoamPropertyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetScanAllowRoamProperty not implemented")
}
func (*UnimplementedShillServiceServer) DisconnectReason(*empty.Empty, ShillService_DisconnectReasonServer) error {
	return status.Errorf(codes.Unimplemented, "method DisconnectReason not implemented")
}
func (*UnimplementedShillServiceServer) FlushBSS(context.Context, *FlushBSSRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushBSS not implemented")
}
func (*UnimplementedShillServiceServer) ResetTest(context.Context, *ResetTestRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetTest not implemented")
}
func (*UnimplementedShillServiceServer) HealthCheck(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (*UnimplementedShillServiceServer) GetLoggingConfig(context.Context, *empty.Empty) (*GetLoggingConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoggingConfig not implemented")
}
func (*UnimplementedShillServiceServer) SetLoggingConfig(context.Context, *SetLoggingConfigRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLoggingConfig not implemented")
}
func (*UnimplementedShillServiceServer) GetWakeOnWifi(context.Context, *empty.Empty) (*GetWakeOnWifiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWakeOnWifi not implemented")
}
func (*UnimplementedShillServiceServer) SetWakeOnWifi(context.Context, *SetWakeOnWifiRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWakeOnWifi not implemented")
}
func (*UnimplementedShillServiceServer) CheckLastWakeReason(context.Context, *CheckLastWakeReasonRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLastWakeReason not implemented")
}
func (*UnimplementedShillServiceServer) WatchDarkResume(*empty.Empty, ShillService_WatchDarkResumeServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchDarkResume not implemented")
}

func RegisterShillServiceServer(s *grpc.Server, srv ShillServiceServer) {
	s.RegisterService(&_ShillService_serviceDesc, srv)
}

func _ShillService_InitDUT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitDUTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).InitDUT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/InitDUT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).InitDUT(ctx, req.(*InitDUTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_ReinitTestState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).ReinitTestState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/ReinitTestState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).ReinitTestState(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_TearDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).TearDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/TearDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).TearDown(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).Disconnect(ctx, req.(*DisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_DeleteEntriesForSSID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntriesForSSIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).DeleteEntriesForSSID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/DeleteEntriesForSSID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).DeleteEntriesForSSID(ctx, req.(*DeleteEntriesForSSIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_QueryService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).QueryService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/QueryService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).QueryService(ctx, req.(*QueryServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_GetInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).GetInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/GetInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).GetInterface(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_GetIPv4Addrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIPv4AddrsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).GetIPv4Addrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/GetIPv4Addrs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).GetIPv4Addrs(ctx, req.(*GetIPv4AddrsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_GetHardwareAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHardwareAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).GetHardwareAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/GetHardwareAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).GetHardwareAddr(ctx, req.(*GetHardwareAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_ExpectWifiFrequencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpectWifiFrequenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).ExpectWifiFrequencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/ExpectWifiFrequencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).ExpectWifiFrequencies(ctx, req.(*ExpectWifiFrequenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_GetBgscanConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).GetBgscanConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/GetBgscanConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).GetBgscanConfig(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_SetBgscanConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBgscanConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).SetBgscanConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/SetBgscanConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).SetBgscanConfig(ctx, req.(*SetBgscanConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_AssureDisconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssureDisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).AssureDisconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/AssureDisconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).AssureDisconnect(ctx, req.(*AssureDisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_DisableEnableTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableEnableTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).DisableEnableTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/DisableEnableTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).DisableEnableTest(ctx, req.(*DisableEnableTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_RequestScans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestScansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).RequestScans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/RequestScans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).RequestScans(ctx, req.(*RequestScansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_SetMACRandomize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMACRandomizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).SetMACRandomize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/SetMACRandomize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).SetMACRandomize(ctx, req.(*SetMACRandomizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_WaitScanIdle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).WaitScanIdle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/WaitScanIdle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).WaitScanIdle(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_ConfigureAndAssertAutoConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureAndAssertAutoConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).ConfigureAndAssertAutoConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/ConfigureAndAssertAutoConnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).ConfigureAndAssertAutoConnect(ctx, req.(*ConfigureAndAssertAutoConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_GetCurrentTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).GetCurrentTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/GetCurrentTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).GetCurrentTime(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_SelectedService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).SelectedService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/SelectedService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).SelectedService(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_ExpectShillProperty_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExpectShillPropertyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShillServiceServer).ExpectShillProperty(m, &shillServiceExpectShillPropertyServer{stream})
}

type ShillService_ExpectShillPropertyServer interface {
	Send(*ExpectShillPropertyResponse) error
	grpc.ServerStream
}

type shillServiceExpectShillPropertyServer struct {
	grpc.ServerStream
}

func (x *shillServiceExpectShillPropertyServer) Send(m *ExpectShillPropertyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ShillService_ProfileBasicTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileBasicTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).ProfileBasicTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/ProfileBasicTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).ProfileBasicTest(ctx, req.(*ProfileBasicTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_DiscoverBSSID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverBSSIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).DiscoverBSSID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/DiscoverBSSID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).DiscoverBSSID(ctx, req.(*DiscoverBSSIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_RequestRoam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRoamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).RequestRoam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/RequestRoam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).RequestRoam(ctx, req.(*RequestRoamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_SetDHCPProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDHCPPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).SetDHCPProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/SetDHCPProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).SetDHCPProperties(ctx, req.(*SetDHCPPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_Reassociate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReassociateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).Reassociate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/Reassociate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).Reassociate(ctx, req.(*ReassociateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_GetWifiEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).GetWifiEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/GetWifiEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).GetWifiEnabled(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_SetWifiEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetWifiEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).SetWifiEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/SetWifiEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).SetWifiEnabled(ctx, req.(*SetWifiEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_WaitForBSSID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitForBSSIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).WaitForBSSID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/WaitForBSSID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).WaitForBSSID(ctx, req.(*WaitForBSSIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_MACRandomizeSupport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).MACRandomizeSupport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/MACRandomizeSupport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).MACRandomizeSupport(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_GetMACRandomize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).GetMACRandomize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/GetMACRandomize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).GetMACRandomize(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_EAPAuthSkipped_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShillServiceServer).EAPAuthSkipped(m, &shillServiceEAPAuthSkippedServer{stream})
}

type ShillService_EAPAuthSkippedServer interface {
	Send(*EAPAuthSkippedResponse) error
	grpc.ServerStream
}

type shillServiceEAPAuthSkippedServer struct {
	grpc.ServerStream
}

func (x *shillServiceEAPAuthSkippedServer) Send(m *EAPAuthSkippedResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ShillService_SuspendAssertConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendAssertConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).SuspendAssertConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/SuspendAssertConnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).SuspendAssertConnect(ctx, req.(*SuspendAssertConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_Suspend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).Suspend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/Suspend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).Suspend(ctx, req.(*SuspendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_GetGlobalFTProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).GetGlobalFTProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/GetGlobalFTProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).GetGlobalFTProperty(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_SetGlobalFTProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGlobalFTPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).SetGlobalFTProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/SetGlobalFTProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).SetGlobalFTProperty(ctx, req.(*SetGlobalFTPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_GetScanAllowRoamProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).GetScanAllowRoamProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/GetScanAllowRoamProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).GetScanAllowRoamProperty(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_SetScanAllowRoamProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetScanAllowRoamPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).SetScanAllowRoamProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/SetScanAllowRoamProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).SetScanAllowRoamProperty(ctx, req.(*SetScanAllowRoamPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_DisconnectReason_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShillServiceServer).DisconnectReason(m, &shillServiceDisconnectReasonServer{stream})
}

type ShillService_DisconnectReasonServer interface {
	Send(*DisconnectReasonResponse) error
	grpc.ServerStream
}

type shillServiceDisconnectReasonServer struct {
	grpc.ServerStream
}

func (x *shillServiceDisconnectReasonServer) Send(m *DisconnectReasonResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ShillService_FlushBSS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushBSSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).FlushBSS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/FlushBSS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).FlushBSS(ctx, req.(*FlushBSSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_ResetTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).ResetTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/ResetTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).ResetTest(ctx, req.(*ResetTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).HealthCheck(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_GetLoggingConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).GetLoggingConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/GetLoggingConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).GetLoggingConfig(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_SetLoggingConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLoggingConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).SetLoggingConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/SetLoggingConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).SetLoggingConfig(ctx, req.(*SetLoggingConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_GetWakeOnWifi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).GetWakeOnWifi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/GetWakeOnWifi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).GetWakeOnWifi(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_SetWakeOnWifi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetWakeOnWifiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).SetWakeOnWifi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/SetWakeOnWifi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).SetWakeOnWifi(ctx, req.(*SetWakeOnWifiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_CheckLastWakeReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckLastWakeReasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShillServiceServer).CheckLastWakeReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.wifi.ShillService/CheckLastWakeReason",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShillServiceServer).CheckLastWakeReason(ctx, req.(*CheckLastWakeReasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShillService_WatchDarkResume_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShillServiceServer).WatchDarkResume(m, &shillServiceWatchDarkResumeServer{stream})
}

type ShillService_WatchDarkResumeServer interface {
	Send(*WatchDarkResumeResponse) error
	grpc.ServerStream
}

type shillServiceWatchDarkResumeServer struct {
	grpc.ServerStream
}

func (x *shillServiceWatchDarkResumeServer) Send(m *WatchDarkResumeResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ShillService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.wifi.ShillService",
	HandlerType: (*ShillServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitDUT",
			Handler:    _ShillService_InitDUT_Handler,
		},
		{
			MethodName: "ReinitTestState",
			Handler:    _ShillService_ReinitTestState_Handler,
		},
		{
			MethodName: "TearDown",
			Handler:    _ShillService_TearDown_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _ShillService_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _ShillService_Disconnect_Handler,
		},
		{
			MethodName: "DeleteEntriesForSSID",
			Handler:    _ShillService_DeleteEntriesForSSID_Handler,
		},
		{
			MethodName: "QueryService",
			Handler:    _ShillService_QueryService_Handler,
		},
		{
			MethodName: "GetInterface",
			Handler:    _ShillService_GetInterface_Handler,
		},
		{
			MethodName: "GetIPv4Addrs",
			Handler:    _ShillService_GetIPv4Addrs_Handler,
		},
		{
			MethodName: "GetHardwareAddr",
			Handler:    _ShillService_GetHardwareAddr_Handler,
		},
		{
			MethodName: "ExpectWifiFrequencies",
			Handler:    _ShillService_ExpectWifiFrequencies_Handler,
		},
		{
			MethodName: "GetBgscanConfig",
			Handler:    _ShillService_GetBgscanConfig_Handler,
		},
		{
			MethodName: "SetBgscanConfig",
			Handler:    _ShillService_SetBgscanConfig_Handler,
		},
		{
			MethodName: "AssureDisconnect",
			Handler:    _ShillService_AssureDisconnect_Handler,
		},
		{
			MethodName: "DisableEnableTest",
			Handler:    _ShillService_DisableEnableTest_Handler,
		},
		{
			MethodName: "RequestScans",
			Handler:    _ShillService_RequestScans_Handler,
		},
		{
			MethodName: "SetMACRandomize",
			Handler:    _ShillService_SetMACRandomize_Handler,
		},
		{
			MethodName: "WaitScanIdle",
			Handler:    _ShillService_WaitScanIdle_Handler,
		},
		{
			MethodName: "ConfigureAndAssertAutoConnect",
			Handler:    _ShillService_ConfigureAndAssertAutoConnect_Handler,
		},
		{
			MethodName: "GetCurrentTime",
			Handler:    _ShillService_GetCurrentTime_Handler,
		},
		{
			MethodName: "SelectedService",
			Handler:    _ShillService_SelectedService_Handler,
		},
		{
			MethodName: "ProfileBasicTest",
			Handler:    _ShillService_ProfileBasicTest_Handler,
		},
		{
			MethodName: "DiscoverBSSID",
			Handler:    _ShillService_DiscoverBSSID_Handler,
		},
		{
			MethodName: "RequestRoam",
			Handler:    _ShillService_RequestRoam_Handler,
		},
		{
			MethodName: "SetDHCPProperties",
			Handler:    _ShillService_SetDHCPProperties_Handler,
		},
		{
			MethodName: "Reassociate",
			Handler:    _ShillService_Reassociate_Handler,
		},
		{
			MethodName: "GetWifiEnabled",
			Handler:    _ShillService_GetWifiEnabled_Handler,
		},
		{
			MethodName: "SetWifiEnabled",
			Handler:    _ShillService_SetWifiEnabled_Handler,
		},
		{
			MethodName: "WaitForBSSID",
			Handler:    _ShillService_WaitForBSSID_Handler,
		},
		{
			MethodName: "MACRandomizeSupport",
			Handler:    _ShillService_MACRandomizeSupport_Handler,
		},
		{
			MethodName: "GetMACRandomize",
			Handler:    _ShillService_GetMACRandomize_Handler,
		},
		{
			MethodName: "SuspendAssertConnect",
			Handler:    _ShillService_SuspendAssertConnect_Handler,
		},
		{
			MethodName: "Suspend",
			Handler:    _ShillService_Suspend_Handler,
		},
		{
			MethodName: "GetGlobalFTProperty",
			Handler:    _ShillService_GetGlobalFTProperty_Handler,
		},
		{
			MethodName: "SetGlobalFTProperty",
			Handler:    _ShillService_SetGlobalFTProperty_Handler,
		},
		{
			MethodName: "GetScanAllowRoamProperty",
			Handler:    _ShillService_GetScanAllowRoamProperty_Handler,
		},
		{
			MethodName: "SetScanAllowRoamProperty",
			Handler:    _ShillService_SetScanAllowRoamProperty_Handler,
		},
		{
			MethodName: "FlushBSS",
			Handler:    _ShillService_FlushBSS_Handler,
		},
		{
			MethodName: "ResetTest",
			Handler:    _ShillService_ResetTest_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _ShillService_HealthCheck_Handler,
		},
		{
			MethodName: "GetLoggingConfig",
			Handler:    _ShillService_GetLoggingConfig_Handler,
		},
		{
			MethodName: "SetLoggingConfig",
			Handler:    _ShillService_SetLoggingConfig_Handler,
		},
		{
			MethodName: "GetWakeOnWifi",
			Handler:    _ShillService_GetWakeOnWifi_Handler,
		},
		{
			MethodName: "SetWakeOnWifi",
			Handler:    _ShillService_SetWakeOnWifi_Handler,
		},
		{
			MethodName: "CheckLastWakeReason",
			Handler:    _ShillService_CheckLastWakeReason_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExpectShillProperty",
			Handler:       _ShillService_ExpectShillProperty_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EAPAuthSkipped",
			Handler:       _ShillService_EAPAuthSkipped_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DisconnectReason",
			Handler:       _ShillService_DisconnectReason_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchDarkResume",
			Handler:       _ShillService_WatchDarkResume_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "shill_service.proto",
}
