// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: bluetooth_service.proto

package network

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SetBluetoothPoweredRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Powered     bool   `protobuf:"varint,1,opt,name=powered,proto3" json:"powered,omitempty"`
	Credentials string `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *SetBluetoothPoweredRequest) Reset() {
	*x = SetBluetoothPoweredRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bluetooth_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBluetoothPoweredRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBluetoothPoweredRequest) ProtoMessage() {}

func (x *SetBluetoothPoweredRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bluetooth_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBluetoothPoweredRequest.ProtoReflect.Descriptor instead.
func (*SetBluetoothPoweredRequest) Descriptor() ([]byte, []int) {
	return file_bluetooth_service_proto_rawDescGZIP(), []int{0}
}

func (x *SetBluetoothPoweredRequest) GetPowered() bool {
	if x != nil {
		return x.Powered
	}
	return false
}

func (x *SetBluetoothPoweredRequest) GetCredentials() string {
	if x != nil {
		return x.Credentials
	}
	return ""
}

type SetBluetoothPoweredFastRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Powered bool `protobuf:"varint,1,opt,name=powered,proto3" json:"powered,omitempty"`
}

func (x *SetBluetoothPoweredFastRequest) Reset() {
	*x = SetBluetoothPoweredFastRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bluetooth_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBluetoothPoweredFastRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBluetoothPoweredFastRequest) ProtoMessage() {}

func (x *SetBluetoothPoweredFastRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bluetooth_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBluetoothPoweredFastRequest.ProtoReflect.Descriptor instead.
func (*SetBluetoothPoweredFastRequest) Descriptor() ([]byte, []int) {
	return file_bluetooth_service_proto_rawDescGZIP(), []int{1}
}

func (x *SetBluetoothPoweredFastRequest) GetPowered() bool {
	if x != nil {
		return x.Powered
	}
	return false
}

type GetBluetoothBootPrefRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credentials string `protobuf:"bytes,1,opt,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *GetBluetoothBootPrefRequest) Reset() {
	*x = GetBluetoothBootPrefRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bluetooth_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBluetoothBootPrefRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBluetoothBootPrefRequest) ProtoMessage() {}

func (x *GetBluetoothBootPrefRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bluetooth_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBluetoothBootPrefRequest.ProtoReflect.Descriptor instead.
func (*GetBluetoothBootPrefRequest) Descriptor() ([]byte, []int) {
	return file_bluetooth_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetBluetoothBootPrefRequest) GetCredentials() string {
	if x != nil {
		return x.Credentials
	}
	return ""
}

type GetBluetoothBootPrefResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Persistent bool `protobuf:"varint,1,opt,name=persistent,proto3" json:"persistent,omitempty"`
}

func (x *GetBluetoothBootPrefResponse) Reset() {
	*x = GetBluetoothBootPrefResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bluetooth_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBluetoothBootPrefResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBluetoothBootPrefResponse) ProtoMessage() {}

func (x *GetBluetoothBootPrefResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bluetooth_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBluetoothBootPrefResponse.ProtoReflect.Descriptor instead.
func (*GetBluetoothBootPrefResponse) Descriptor() ([]byte, []int) {
	return file_bluetooth_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetBluetoothBootPrefResponse) GetPersistent() bool {
	if x != nil {
		return x.Persistent
	}
	return false
}

type GetBluetoothPoweredFastResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Powered bool `protobuf:"varint,1,opt,name=powered,proto3" json:"powered,omitempty"`
}

func (x *GetBluetoothPoweredFastResponse) Reset() {
	*x = GetBluetoothPoweredFastResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bluetooth_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBluetoothPoweredFastResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBluetoothPoweredFastResponse) ProtoMessage() {}

func (x *GetBluetoothPoweredFastResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bluetooth_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBluetoothPoweredFastResponse.ProtoReflect.Descriptor instead.
func (*GetBluetoothPoweredFastResponse) Descriptor() ([]byte, []int) {
	return file_bluetooth_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetBluetoothPoweredFastResponse) GetPowered() bool {
	if x != nil {
		return x.Powered
	}
	return false
}

var File_bluetooth_service_proto protoreflect.FileDescriptor

var file_bluetooth_service_proto_rawDesc = []byte{
	0x0a, 0x17, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x74, 0x61, 0x73, 0x74, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x58, 0x0a, 0x1a, 0x53, 0x65, 0x74,
	0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x65,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x22, 0x3a, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f,
	0x6f, 0x74, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64, 0x22,
	0x3f, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x42,
	0x6f, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x22, 0x3e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68,
	0x42, 0x6f, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0x3b, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64, 0x32, 0x8f, 0x04,
	0x0a, 0x10, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x5e, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f,
	0x74, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64, 0x12, 0x2d, 0x2e, 0x74, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x53, 0x65,
	0x74, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x66, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f,
	0x74, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64, 0x46, 0x61, 0x73, 0x74, 0x12, 0x31, 0x2e,
	0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x65, 0x64, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x42, 0x6f, 0x6f, 0x74, 0x50, 0x72,
	0x65, 0x66, 0x12, 0x2e, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f,
	0x6f, 0x74, 0x68, 0x42, 0x6f, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f,
	0x6f, 0x74, 0x68, 0x42, 0x6f, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x75, 0x65,
	0x74, 0x6f, 0x6f, 0x74, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64, 0x46, 0x61, 0x73, 0x74,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x32, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64,
	0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f,
	0x0a, 0x1b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f,
	0x6f, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42,
	0x27, 0x5a, 0x25, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x61,
	0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x73,
	0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bluetooth_service_proto_rawDescOnce sync.Once
	file_bluetooth_service_proto_rawDescData = file_bluetooth_service_proto_rawDesc
)

func file_bluetooth_service_proto_rawDescGZIP() []byte {
	file_bluetooth_service_proto_rawDescOnce.Do(func() {
		file_bluetooth_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_bluetooth_service_proto_rawDescData)
	})
	return file_bluetooth_service_proto_rawDescData
}

var file_bluetooth_service_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_bluetooth_service_proto_goTypes = []interface{}{
	(*SetBluetoothPoweredRequest)(nil),      // 0: tast.cros.network.SetBluetoothPoweredRequest
	(*SetBluetoothPoweredFastRequest)(nil),  // 1: tast.cros.network.SetBluetoothPoweredFastRequest
	(*GetBluetoothBootPrefRequest)(nil),     // 2: tast.cros.network.GetBluetoothBootPrefRequest
	(*GetBluetoothBootPrefResponse)(nil),    // 3: tast.cros.network.GetBluetoothBootPrefResponse
	(*GetBluetoothPoweredFastResponse)(nil), // 4: tast.cros.network.GetBluetoothPoweredFastResponse
	(*empty.Empty)(nil),                     // 5: google.protobuf.Empty
}
var file_bluetooth_service_proto_depIdxs = []int32{
	0, // 0: tast.cros.network.BluetoothService.SetBluetoothPowered:input_type -> tast.cros.network.SetBluetoothPoweredRequest
	1, // 1: tast.cros.network.BluetoothService.SetBluetoothPoweredFast:input_type -> tast.cros.network.SetBluetoothPoweredFastRequest
	2, // 2: tast.cros.network.BluetoothService.GetBluetoothBootPref:input_type -> tast.cros.network.GetBluetoothBootPrefRequest
	5, // 3: tast.cros.network.BluetoothService.GetBluetoothPoweredFast:input_type -> google.protobuf.Empty
	5, // 4: tast.cros.network.BluetoothService.ValidateBluetoothFunctional:input_type -> google.protobuf.Empty
	5, // 5: tast.cros.network.BluetoothService.SetBluetoothPowered:output_type -> google.protobuf.Empty
	5, // 6: tast.cros.network.BluetoothService.SetBluetoothPoweredFast:output_type -> google.protobuf.Empty
	3, // 7: tast.cros.network.BluetoothService.GetBluetoothBootPref:output_type -> tast.cros.network.GetBluetoothBootPrefResponse
	4, // 8: tast.cros.network.BluetoothService.GetBluetoothPoweredFast:output_type -> tast.cros.network.GetBluetoothPoweredFastResponse
	5, // 9: tast.cros.network.BluetoothService.ValidateBluetoothFunctional:output_type -> google.protobuf.Empty
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_bluetooth_service_proto_init() }
func file_bluetooth_service_proto_init() {
	if File_bluetooth_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bluetooth_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBluetoothPoweredRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bluetooth_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBluetoothPoweredFastRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bluetooth_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBluetoothBootPrefRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bluetooth_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBluetoothBootPrefResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bluetooth_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBluetoothPoweredFastResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bluetooth_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bluetooth_service_proto_goTypes,
		DependencyIndexes: file_bluetooth_service_proto_depIdxs,
		MessageInfos:      file_bluetooth_service_proto_msgTypes,
	}.Build()
	File_bluetooth_service_proto = out.File
	file_bluetooth_service_proto_rawDesc = nil
	file_bluetooth_service_proto_goTypes = nil
	file_bluetooth_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BluetoothServiceClient is the client API for BluetoothService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BluetoothServiceClient interface {
	// SetBluetoothPowered sets the Bluetooth adapter power status via settingsPrivate. This setting persists across reboots.
	SetBluetoothPowered(ctx context.Context, in *SetBluetoothPoweredRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// SetBluetoothPoweredFast sets the Bluetooth adapter power status via D-Bus. This setting does not persist across boots.
	SetBluetoothPoweredFast(ctx context.Context, in *SetBluetoothPoweredFastRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetBluetoothBootPref gets the Bluetooth boot preference.
	GetBluetoothBootPref(ctx context.Context, in *GetBluetoothBootPrefRequest, opts ...grpc.CallOption) (*GetBluetoothBootPrefResponse, error)
	// GetBluetoothPoweredFast checks whether the Bluetooth adapter is enabled.
	GetBluetoothPoweredFast(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetBluetoothPoweredFastResponse, error)
	// ValidateBluetoothFunctional checks to see whether the Bluetooth device is usable.
	ValidateBluetoothFunctional(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type bluetoothServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBluetoothServiceClient(cc grpc.ClientConnInterface) BluetoothServiceClient {
	return &bluetoothServiceClient{cc}
}

func (c *bluetoothServiceClient) SetBluetoothPowered(ctx context.Context, in *SetBluetoothPoweredRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.BluetoothService/SetBluetoothPowered", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothServiceClient) SetBluetoothPoweredFast(ctx context.Context, in *SetBluetoothPoweredFastRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.BluetoothService/SetBluetoothPoweredFast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothServiceClient) GetBluetoothBootPref(ctx context.Context, in *GetBluetoothBootPrefRequest, opts ...grpc.CallOption) (*GetBluetoothBootPrefResponse, error) {
	out := new(GetBluetoothBootPrefResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.BluetoothService/GetBluetoothBootPref", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothServiceClient) GetBluetoothPoweredFast(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetBluetoothPoweredFastResponse, error) {
	out := new(GetBluetoothPoweredFastResponse)
	err := c.cc.Invoke(ctx, "/tast.cros.network.BluetoothService/GetBluetoothPoweredFast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothServiceClient) ValidateBluetoothFunctional(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.cros.network.BluetoothService/ValidateBluetoothFunctional", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BluetoothServiceServer is the server API for BluetoothService service.
type BluetoothServiceServer interface {
	// SetBluetoothPowered sets the Bluetooth adapter power status via settingsPrivate. This setting persists across reboots.
	SetBluetoothPowered(context.Context, *SetBluetoothPoweredRequest) (*empty.Empty, error)
	// SetBluetoothPoweredFast sets the Bluetooth adapter power status via D-Bus. This setting does not persist across boots.
	SetBluetoothPoweredFast(context.Context, *SetBluetoothPoweredFastRequest) (*empty.Empty, error)
	// GetBluetoothBootPref gets the Bluetooth boot preference.
	GetBluetoothBootPref(context.Context, *GetBluetoothBootPrefRequest) (*GetBluetoothBootPrefResponse, error)
	// GetBluetoothPoweredFast checks whether the Bluetooth adapter is enabled.
	GetBluetoothPoweredFast(context.Context, *empty.Empty) (*GetBluetoothPoweredFastResponse, error)
	// ValidateBluetoothFunctional checks to see whether the Bluetooth device is usable.
	ValidateBluetoothFunctional(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedBluetoothServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBluetoothServiceServer struct {
}

func (*UnimplementedBluetoothServiceServer) SetBluetoothPowered(context.Context, *SetBluetoothPoweredRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBluetoothPowered not implemented")
}
func (*UnimplementedBluetoothServiceServer) SetBluetoothPoweredFast(context.Context, *SetBluetoothPoweredFastRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBluetoothPoweredFast not implemented")
}
func (*UnimplementedBluetoothServiceServer) GetBluetoothBootPref(context.Context, *GetBluetoothBootPrefRequest) (*GetBluetoothBootPrefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBluetoothBootPref not implemented")
}
func (*UnimplementedBluetoothServiceServer) GetBluetoothPoweredFast(context.Context, *empty.Empty) (*GetBluetoothPoweredFastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBluetoothPoweredFast not implemented")
}
func (*UnimplementedBluetoothServiceServer) ValidateBluetoothFunctional(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateBluetoothFunctional not implemented")
}

func RegisterBluetoothServiceServer(s *grpc.Server, srv BluetoothServiceServer) {
	s.RegisterService(&_BluetoothService_serviceDesc, srv)
}

func _BluetoothService_SetBluetoothPowered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBluetoothPoweredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothServiceServer).SetBluetoothPowered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.BluetoothService/SetBluetoothPowered",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothServiceServer).SetBluetoothPowered(ctx, req.(*SetBluetoothPoweredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluetoothService_SetBluetoothPoweredFast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBluetoothPoweredFastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothServiceServer).SetBluetoothPoweredFast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.BluetoothService/SetBluetoothPoweredFast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothServiceServer).SetBluetoothPoweredFast(ctx, req.(*SetBluetoothPoweredFastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluetoothService_GetBluetoothBootPref_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBluetoothBootPrefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothServiceServer).GetBluetoothBootPref(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.BluetoothService/GetBluetoothBootPref",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothServiceServer).GetBluetoothBootPref(ctx, req.(*GetBluetoothBootPrefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluetoothService_GetBluetoothPoweredFast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothServiceServer).GetBluetoothPoweredFast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.BluetoothService/GetBluetoothPoweredFast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothServiceServer).GetBluetoothPoweredFast(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluetoothService_ValidateBluetoothFunctional_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothServiceServer).ValidateBluetoothFunctional(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.cros.network.BluetoothService/ValidateBluetoothFunctional",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothServiceServer).ValidateBluetoothFunctional(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _BluetoothService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.cros.network.BluetoothService",
	HandlerType: (*BluetoothServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetBluetoothPowered",
			Handler:    _BluetoothService_SetBluetoothPowered_Handler,
		},
		{
			MethodName: "SetBluetoothPoweredFast",
			Handler:    _BluetoothService_SetBluetoothPoweredFast_Handler,
		},
		{
			MethodName: "GetBluetoothBootPref",
			Handler:    _BluetoothService_GetBluetoothBootPref_Handler,
		},
		{
			MethodName: "GetBluetoothPoweredFast",
			Handler:    _BluetoothService_GetBluetoothPoweredFast_Handler,
		},
		{
			MethodName: "ValidateBluetoothFunctional",
			Handler:    _BluetoothService_ValidateBluetoothFunctional_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bluetooth_service.proto",
}
