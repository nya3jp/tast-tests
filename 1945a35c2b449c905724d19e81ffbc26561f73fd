{
  "comments": [
    {
      "key": {
        "uuid": "51f7e1cf_00ac258f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1148900
      },
      "writtenOn": "2020-07-09T18:55:29Z",
      "side": 1,
      "message": "Gentle ping to the reviewers - we\u0027re expecting to land this patch as soon as possible. Could you take a look?",
      "revId": "1945a35c2b449c905724d19e81ffbc26561f73fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b698b50e_c97061e8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000221
      },
      "writtenOn": "2020-07-10T11:41:44Z",
      "side": 1,
      "message": "Thank you, looking great! A few hopefully minor issues.",
      "revId": "1945a35c2b449c905724d19e81ffbc26561f73fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "afd0cff6_8936d5c3",
        "filename": "src/chromiumos/tast/local/bundles/cros/graphics/data/windowmanagertest.html",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 1000221
      },
      "writtenOn": "2020-07-10T11:41:44Z",
      "side": 1,
      "message": "Failure to obtain WebGL context.",
      "range": {
        "startLine": 115,
        "startChar": 9,
        "endLine": 115,
        "endChar": 29
      },
      "revId": "1945a35c2b449c905724d19e81ffbc26561f73fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ca68602_e75b9191",
        "filename": "src/chromiumos/tast/local/bundles/cros/graphics/data/windowmanagertest.html",
        "patchSetId": 2
      },
      "lineNbr": 124,
      "author": {
        "id": 1000221
      },
      "writtenOn": "2020-07-10T11:41:44Z",
      "side": 1,
      "message": "As long as we get an ellipse. Just delete the comment.",
      "range": {
        "startLine": 124,
        "startChar": 0,
        "endLine": 124,
        "endChar": 57
      },
      "revId": "1945a35c2b449c905724d19e81ffbc26561f73fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1282ce37_40f6c6d2",
        "filename": "src/chromiumos/tast/local/bundles/cros/graphics/sanity.go",
        "patchSetId": 2
      },
      "lineNbr": 157,
      "author": {
        "id": 1000221
      },
      "writtenOn": "2020-07-10T11:41:44Z",
      "side": 1,
      "message": "How about:\nWe are using Chrome GPU to draw and verify two ellipses. But we do not care about using brittle features like hardware overlays in conjunction with screenshots during sanity, so we disable them for this subtest.",
      "range": {
        "startLine": 157,
        "startChar": 4,
        "endLine": 157,
        "endChar": 67
      },
      "revId": "1945a35c2b449c905724d19e81ffbc26561f73fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f0b383c_48be744e",
        "filename": "src/chromiumos/tast/local/bundles/cros/graphics/sanity.go",
        "patchSetId": 2
      },
      "lineNbr": 163,
      "author": {
        "id": 1000221
      },
      "writtenOn": "2020-07-10T11:41:44Z",
      "side": 1,
      "message": "I am confused. I thought this would make Chrome logout/close at the end, but this is not happening. Especially that we changed the arguments and are drawing in fullscreen it would be good to clean up after ourselves here.",
      "range": {
        "startLine": 163,
        "startChar": 0,
        "endLine": 163,
        "endChar": 20
      },
      "revId": "1945a35c2b449c905724d19e81ffbc26561f73fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "245c867b_c2b4a05d",
        "filename": "src/chromiumos/tast/local/bundles/cros/graphics/sanity.go",
        "patchSetId": 2
      },
      "lineNbr": 163,
      "author": {
        "id": 1363554
      },
      "writtenOn": "2020-07-10T15:52:10Z",
      "side": 1,
      "message": "Hmm, that appears intentional:\n\n// Close disconnects from Chrome and cleans up standard extensions.\n// To avoid delays between tests, the ui job (and by extension, Chrome) is not restarted,\n// so the current user (if any) remains logged in.\n\nI guess I can:\n\n   defer upstart.RestartJob(ctx, \"ui\")",
      "parentUuid": "5f0b383c_48be744e",
      "range": {
        "startLine": 163,
        "startChar": 0,
        "endLine": 163,
        "endChar": 20
      },
      "revId": "1945a35c2b449c905724d19e81ffbc26561f73fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "423f1099_87dba3a6",
        "filename": "src/chromiumos/tast/local/bundles/cros/graphics/sanity.go",
        "patchSetId": 2
      },
      "lineNbr": 210,
      "author": {
        "id": 1000221
      },
      "writtenOn": "2020-07-10T11:41:44Z",
      "side": 1,
      "message": "I have the same concern as Andres about the sleep and would prefer polling. Would it make sense to reorder the code that you draw, then poll between screenshot and resize/perceptualdiff below? Maybe refactor the code below in a utility function. So basically try to screenshot 10 times (with a sleep inbetween) and if the resize/pdiff matches assume pass and keep going.\n\nThis needs to run in the CQ and sometimes slowdowns happen there. So doing a simple sleep is not going to work well here I am afraid.",
      "range": {
        "startLine": 205,
        "startChar": 0,
        "endLine": 210,
        "endChar": 0
      },
      "revId": "1945a35c2b449c905724d19e81ffbc26561f73fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0e92dc5_b62cdcb3",
        "filename": "src/chromiumos/tast/local/bundles/cros/graphics/sanity.go",
        "patchSetId": 2
      },
      "lineNbr": 210,
      "author": {
        "id": 1273510
      },
      "writtenOn": "2020-07-10T15:37:36Z",
      "side": 1,
      "message": "Another alternative is to use requestAnimationFrame() in JS in order to get to a point where we know a frame has been presented (taking into account that Chrome can be double or tripled buffered):\n\n1) Do a requestAnimationFrame()\n2) When the callback is called, draw the ellipse.\n3) Do another requestAnimationFrame().\n4) When the callback is called, if Chrome is double buffered, the first ellipse should be on the screen; however, since we don\u0027t know if Chrome is double or tripled buffer, draw the ellipse again to be safe.\n5) Do another requestAnimationFrame().\n6) When the callback is called, there should now be an ellipse on the screen regardless of double or triple buffering in Chrome.\n\nTo make it simpler and avoid assumptions, you could have a loop that calls requestAnimationFrame() say 10 times. For the first 9 callbacks, you do WebGL. On the 10th callback, fulfill a promise so that Tast can keep going.\n\nIn the typical case, this condition should be reached in less than a second.",
      "parentUuid": "423f1099_87dba3a6",
      "range": {
        "startLine": 205,
        "startChar": 0,
        "endLine": 210,
        "endChar": 0
      },
      "revId": "1945a35c2b449c905724d19e81ffbc26561f73fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}