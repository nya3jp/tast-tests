{
  "comments": [
    {
      "key": {
        "uuid": "e1812875_e8604ec8",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_files.go",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-11-29T19:36:23Z",
      "side": 1,
      "message": "is \"owner ID\" defined somewhere? the old \"hash\" name seems more in line with cryptohome.UserHash\u0027s documentation.",
      "range": {
        "startLine": 38,
        "startChar": 1,
        "endLine": 38,
        "endChar": 8
      },
      "revId": "0a48b66af5900d10d7cb0241d4c31c56da528b03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0078adc9_7021fb16",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_files.go",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-11-29T19:36:23Z",
      "side": 1,
      "message": "testSSHFSMount: https://github.com/golang/go/wiki/CodeReviewComments#initialisms\n\nalso \"ownerID, sshfsMountDir string\"",
      "range": {
        "startLine": 87,
        "startChar": 9,
        "endLine": 87,
        "endChar": 14
      },
      "revId": "0a48b66af5900d10d7cb0241d4c31c56da528b03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c8b962a_5bc12a08",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_files.go",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-11-29T19:36:23Z",
      "side": 1,
      "message": "please include the directory in this line to aid in debugging:\n\n  s.Fatalf(\"Didn\u0027t find SSHFS mount %v: %v\", sshfsMountDir, err)",
      "revId": "0a48b66af5900d10d7cb0241d4c31c56da528b03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19f3ac6f_1c3e91bc",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_files.go",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-11-29T19:36:23Z",
      "side": 1,
      "message": "nit: no colon here: https://chromium.googlesource.com/chromiumos/platform/tast/+/HEAD/docs/writing_tests.md#Formatting",
      "revId": "0a48b66af5900d10d7cb0241d4c31c56da528b03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32a47642_951cab1a",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_files.go",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-11-29T19:36:23Z",
      "side": 1,
      "message": "please use \u0027const\u0027 for constants",
      "revId": "0a48b66af5900d10d7cb0241d4c31c56da528b03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "468a6854_4f9d4dff",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_files.go",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-11-29T19:36:23Z",
      "side": 1,
      "message": "where do these hardcoded strings come from?",
      "range": {
        "startLine": 100,
        "startChar": 33,
        "endLine": 100,
        "endChar": 53
      },
      "revId": "0a48b66af5900d10d7cb0241d4c31c56da528b03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cc1c1fb_b1ccbe54",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_files.go",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-11-29T19:36:23Z",
      "side": 1,
      "message": "s.Errorf(\"Failed to cat %v: %v\", fileName, err)",
      "revId": "0a48b66af5900d10d7cb0241d4c31c56da528b03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "827f0a8c_5103e090",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_files.go",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-11-29T19:36:23Z",
      "side": 1,
      "message": "s.Errorf(\"%v contains %q; want %q\", fileName, out, fileContent)\n\n(you shouldn\u0027t need to cast []byte to string when using %s or %q)",
      "revId": "0a48b66af5900d10d7cb0241d4c31c56da528b03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d147ab6c_f4f9efc5",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_files.go",
        "patchSetId": 1
      },
      "lineNbr": 112,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-11-29T19:36:23Z",
      "side": 1,
      "message": "please get rid of this function and call ioutil.WriteFile directly from test funcs and handle errors appropriately there. right now, this reports a non-fatal error on failure, which doesn\u0027t seem appropriate -- all of the later assertions in testShareFiles are going to fail with meaningless errors if L128 or L132 fail.",
      "revId": "0a48b66af5900d10d7cb0241d4c31c56da528b03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "acac8f3c_86afa532",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_files.go",
        "patchSetId": 1
      },
      "lineNbr": 119,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-11-29T19:36:23Z",
      "side": 1,
      "message": "please use \u0027const\u0027 here when possible too",
      "revId": "0a48b66af5900d10d7cb0241d4c31c56da528b03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0a99986_c52da20b",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_files.go",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-11-29T19:36:23Z",
      "side": 1,
      "message": "you should likely either return here or use s.Fatalf instead. the later code, e.g. L129, doesn\u0027t make sense if this fails.",
      "revId": "0a48b66af5900d10d7cb0241d4c31c56da528b03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55bb0a1a_6b96521e",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_files.go",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-11-29T19:36:23Z",
      "side": 1,
      "message": "instead of repeating \"hello.txt\", please put it in a constant",
      "revId": "0a48b66af5900d10d7cb0241d4c31c56da528b03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0f2f590_9e0919b7",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_files.go",
        "patchSetId": 1
      },
      "lineNbr": 127,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-11-29T19:36:23Z",
      "side": 1,
      "message": "const",
      "revId": "0a48b66af5900d10d7cb0241d4c31c56da528b03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c5cc07e_3c31caad",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_files.go",
        "patchSetId": 1
      },
      "lineNbr": 140,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-11-29T19:36:23Z",
      "side": 1,
      "message": "iiuc fconn isn\u0027t actual shared, so you need \"defer fconn.Close(ctx)\" to avoid leaking it",
      "revId": "0a48b66af5900d10d7cb0241d4c31c56da528b03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f2040ba_124f55b3",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_files.go",
        "patchSetId": 1
      },
      "lineNbr": 142,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-11-29T19:36:23Z",
      "side": 1,
      "message": "it seems like you should make sharePath return an error and handle it here too -- presumably the following assertions are useless if sharing failed.",
      "revId": "0a48b66af5900d10d7cb0241d4c31c56da528b03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f07e1c53_218befd3",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_files.go",
        "patchSetId": 1
      },
      "lineNbr": 155,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-11-29T19:36:23Z",
      "side": 1,
      "message": "please document what this function does, also \"volume, path string\"",
      "revId": "0a48b66af5900d10d7cb0241d4c31c56da528b03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a11be84_06902ce9",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_files.go",
        "patchSetId": 1
      },
      "lineNbr": 172,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-11-29T19:36:23Z",
      "side": 1,
      "message": "same comment as L155",
      "revId": "0a48b66af5900d10d7cb0241d4c31c56da528b03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d216e59b_04ad0c82",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_files.go",
        "patchSetId": 1
      },
      "lineNbr": 189,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-11-29T19:36:23Z",
      "side": 1,
      "message": "ownerID, path, content string",
      "revId": "0a48b66af5900d10d7cb0241d4c31c56da528b03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6739fa9c_91deafdc",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_files.go",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-11-29T19:36:23Z",
      "side": 1,
      "message": "as above, please don\u0027t hardcode and repeat these strings. if they\u0027re hardcoded in the crostini implementation, please add them as exported constants from the \u0027vm\u0027 package.",
      "range": {
        "startLine": 190,
        "startChar": 33,
        "endLine": 190,
        "endChar": 53
      },
      "revId": "0a48b66af5900d10d7cb0241d4c31c56da528b03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42b2d624_0923b12e",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_files.go",
        "patchSetId": 1
      },
      "lineNbr": 195,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-11-29T19:36:23Z",
      "side": 1,
      "message": "same comment as L91",
      "revId": "0a48b66af5900d10d7cb0241d4c31c56da528b03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0602251f_c5d3de55",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_files.go",
        "patchSetId": 1
      },
      "lineNbr": 199,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-11-29T19:36:23Z",
      "side": 1,
      "message": "verifyFileNotInContainer? the current name could be interpreted as verifying that there are zero files in the container.",
      "revId": "0a48b66af5900d10d7cb0241d4c31c56da528b03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af11e710_d9ae82d7",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_files.go",
        "patchSetId": 1
      },
      "lineNbr": 201,
      "author": {
        "id": 1298800
      },
      "writtenOn": "2018-11-29T19:09:38Z",
      "side": 1,
      "message": "Since this is only verifying you get an error from the command, you should actually check that the file wasn\u0027t present. And \u0027cat\u0027 will return an exit code of 1 in that case. We did something similar in code here:\n\nhttps://cs.corp.google.com/chromeos_public/src/platform/tast-tests/src/chromiumos/tast/local/bundles/cros/vm/subtest/uninstall_application.go?g\u003d0\u0026l\u003d30",
      "range": {
        "startLine": 201,
        "startChar": 30,
        "endLine": 201,
        "endChar": 40
      },
      "revId": "0a48b66af5900d10d7cb0241d4c31c56da528b03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53f78ab8_a720085d",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_files.go",
        "patchSetId": 1
      },
      "lineNbr": 203,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-11-29T19:36:23Z",
      "side": 1,
      "message": "nit: s.Errorf(\"%v unexpectedly exists with content %q\", path, out), maybe",
      "revId": "0a48b66af5900d10d7cb0241d4c31c56da528b03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c119e128_f515ccf1",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 1
      },
      "lineNbr": 447,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-11-29T19:36:23Z",
      "side": 1,
      "message": "i don\u0027t think that the shared behavior is necessary in the general case (as tests likely aren\u0027t going to be creating multiple connections to the same extension), and i also don\u0027t think it\u0027s implemented here -- it looks like a new connection is always created. :-)\n\ni feel like the only novel part of this function is the background page URL. how about adding a function for that?\n\n  // ExtensionBackgroundPageURL returns the URL to the background page for\n  // the extension with the supplied ID.\n  func ExtensionBackgroundPageURL(id string) string {\n      return \"chrome-extension://\" + extID + \"/_generated_background_page.html\"\n  }\n\nthen TestAPIConn can call that function.",
      "range": {
        "startLine": 447,
        "startChar": 21,
        "endLine": 447,
        "endChar": 27
      },
      "revId": "0a48b66af5900d10d7cb0241d4c31c56da528b03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80bb94d7_0e9542b2",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 1
      },
      "lineNbr": 451,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-11-29T19:36:23Z",
      "side": 1,
      "message": "i prefer to avoid adding additional API surfaces like ExtConn, or this testForReady function, until there are enough potential callers to make the need clear and to guide the design. (i believe that i\u0027ve heard that chrome\u0027s //base directory has the same policy.)\n\nat least until there are more callers, i\u0027d recommend only adding ExtensionBackgroundPageURL as suggested above and doing something similar to this in your test:\n\n  bgURL \u003d chrome.ExtensionBackgroundPageURL(\"1234\")\n  conn, err :\u003d chrome.NewConnForTarget(ctx,\n      func(t *chrome.Target) bool { return t.URL \u003d bgURL })\n  if err !\u003d nil {\n      s.Fatalf(\"Failed to find %v: %v\", bgURL, err)\n  }\n  const readyExpr \u003d \"\u0027fileManagerPrivate\u0027 in chrome \u0026\u0026 \u0027background\u0027 in window\"\n  if err :\u003d conn.WaitForExpr(ctx, readyExpr); err !\u003d nil {\n      s.Fatalf(\"Failed waiting for %q: %v\", readyExpr, err)\n  }",
      "range": {
        "startLine": 451,
        "startChar": 60,
        "endLine": 451,
        "endChar": 72
      },
      "revId": "0a48b66af5900d10d7cb0241d4c31c56da528b03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8bc577e_691b5548",
        "filename": "src/chromiumos/tast/local/vm/container.go",
        "patchSetId": 1
      },
      "lineNbr": 423,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-11-29T19:36:23Z",
      "side": 1,
      "message": "nit: \"vmName, containerName, ownerID string, \"",
      "range": {
        "startLine": 423,
        "startChar": 43,
        "endLine": 423,
        "endChar": 94
      },
      "revId": "0a48b66af5900d10d7cb0241d4c31c56da528b03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f74b3d12_6ea93b72",
        "filename": "src/chromiumos/tast/local/vm/container.go",
        "patchSetId": 1
      },
      "lineNbr": 423,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-11-29T19:38:44Z",
      "side": 1,
      "message": "also, this signature is getting a bit unwieldy since it has three strings followed by however many strings are in the command itself -- it\u0027s very easy to accidentally swap the order of these.\n\nif this is only going to be used for \"penguin\" etc., how about exporting a function that returns a command specifically for that (default?) VM and container without making the caller need to pass those over and over?",
      "parentUuid": "e8bc577e_691b5548",
      "range": {
        "startLine": 423,
        "startChar": 43,
        "endLine": 423,
        "endChar": 94
      },
      "revId": "0a48b66af5900d10d7cb0241d4c31c56da528b03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}