{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f0fa6101_552d5ec5",
        "filename": "src/chromiumos/tast/local/ui/cujrecorder/recorder.go",
        "patchSetId": 7
      },
      "lineNbr": 274,
      "author": {
        "id": 1003168
      },
      "writtenOn": "2022-05-11T22:32:19Z",
      "side": 1,
      "message": "I wonder whether we can generate Ash test connection from the ash.ConnSource ?",
      "range": {
        "startLine": 274,
        "startChar": 38,
        "endLine": 274,
        "endChar": 74
      },
      "revId": "f80659f42b593ebdb2dbc42c7b657065dbf69de1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57a22263_0a458f57",
        "filename": "src/chromiumos/tast/local/ui/cujrecorder/recorder.go",
        "patchSetId": 7
      },
      "lineNbr": 274,
      "author": {
        "id": 1412245
      },
      "writtenOn": "2022-05-11T22:33:59Z",
      "side": 1,
      "message": "if we pass lacros instance as ConnSource then we probably can\u0027t get ash tconn i think",
      "parentUuid": "f0fa6101_552d5ec5",
      "range": {
        "startLine": 274,
        "startChar": 38,
        "endLine": 274,
        "endChar": 74
      },
      "revId": "f80659f42b593ebdb2dbc42c7b657065dbf69de1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bd7959d_cc214d62",
        "filename": "src/chromiumos/tast/local/ui/cujrecorder/recorder.go",
        "patchSetId": 7
      },
      "lineNbr": 274,
      "author": {
        "id": 1003168
      },
      "writtenOn": "2022-05-12T00:40:14Z",
      "side": 1,
      "message": "I would avoid passing browser/lacros handles to the constructor because it would imply that we have them at that moment. Which is not necessary true because we may be trying to run the lacros login test.\n\nCould we do something like:\n1) We always expect to get Ash conn handles when we construct the Recorder.\n2) We can add lacros tracing separately if we need.\n\nI think that we should get ash trace and lacros trace separately and probably at the same time, so that we could enable tracing of Ash for all the tests by default, and add lacros tracing for all lacrossified tests.\n\nWDYT?",
      "parentUuid": "57a22263_0a458f57",
      "range": {
        "startLine": 274,
        "startChar": 38,
        "endLine": 274,
        "endChar": 74
      },
      "revId": "f80659f42b593ebdb2dbc42c7b657065dbf69de1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75536efc_4d27b26a",
        "filename": "src/chromiumos/tast/local/ui/cujrecorder/recorder.go",
        "patchSetId": 7
      },
      "lineNbr": 274,
      "author": {
        "id": 1412245
      },
      "writtenOn": "2022-05-17T11:21:07Z",
      "side": 1,
      "message": "Hi alex, if we want to get ash/lacros trace at the same time, we can also do it while collecting system trace. Please see https://chromium-review.googlesource.com/c/chromiumos/platform/tast-tests/+/3651662, thanks!\n\nI will abandon this cl if we are fine with the system tracing.",
      "parentUuid": "4bd7959d_cc214d62",
      "range": {
        "startLine": 274,
        "startChar": 38,
        "endLine": 274,
        "endChar": 74
      },
      "revId": "f80659f42b593ebdb2dbc42c7b657065dbf69de1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:approval_code-owners"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "f80659f42b593ebdb2dbc42c7b657065dbf69de1",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "f80659f42b593ebdb2dbc42c7b657065dbf69de1",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f80659f42b593ebdb2dbc42c7b657065dbf69de1",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Verified=MAX","label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "f80659f42b593ebdb2dbc42c7b657065dbf69de1",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}