{
  "comments": [
    {
      "key": {
        "uuid": "3d369d1e_bf1faa47",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1294890
      },
      "writtenOn": "2020-08-13T10:20:27Z",
      "side": 1,
      "message": "LGTM with one nit. Thanks for making the change.",
      "revId": "4704e24c56cf11a7d01843544c811f8fc5ca0f80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30677200_8a4a329f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1386944
      },
      "writtenOn": "2020-08-13T23:49:37Z",
      "side": 1,
      "message": "Tast Shadow Review: Looks like lots of eyeballs have looked at this code already. Only a few additional things I think are worth mentioning. LGTM % nits.",
      "revId": "4704e24c56cf11a7d01843544c811f8fc5ca0f80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a3edd84_9efe772e",
        "filename": "src/chromiumos/tast/local/bundles/cros/example/profiler.go",
        "patchSetId": 6
      },
      "lineNbr": 52,
      "author": {
        "id": 1386944
      },
      "writtenOn": "2020-08-13T23:49:37Z",
      "side": 1,
      "message": "s.Fatal() does not return, so please drop the else case.\nSee: go/gocomments#indent-error-flow",
      "revId": "4704e24c56cf11a7d01843544c811f8fc5ca0f80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ce75cae_9ec5cbb0",
        "filename": "src/chromiumos/tast/local/bundles/cros/example/profiler.go",
        "patchSetId": 6
      },
      "lineNbr": 52,
      "author": {
        "id": 1001485
      },
      "writtenOn": "2020-08-20T06:28:06Z",
      "side": 1,
      "message": "I am a bit confused.\ns.Fatal(modified to s.Error) does not return.\nSo if I got that error, I don\u0027t want to log CPU cycle count per second.\nI think I need to use else to achieve that. Does this make sense to you ?\nThanks!",
      "parentUuid": "0a3edd84_9efe772e",
      "revId": "4704e24c56cf11a7d01843544c811f8fc5ca0f80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12f742b2_9ab886ce",
        "filename": "src/chromiumos/tast/local/bundles/cros/example/profiler.go",
        "patchSetId": 6
      },
      "lineNbr": 52,
      "author": {
        "id": 1294890
      },
      "writtenOn": "2020-08-20T07:40:56Z",
      "side": 1,
      "message": "You may use Fatal if you want, but Fatal() is terminates the execution and should be treated like a return. When you use Fatal(), you don\u0027t need to wrap the normal condition in an else block because the error condition won\u0027t go beyond Fatal().",
      "parentUuid": "5ce75cae_9ec5cbb0",
      "revId": "4704e24c56cf11a7d01843544c811f8fc5ca0f80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46e0e794_08944d9e",
        "filename": "src/chromiumos/tast/local/bundles/cros/example/profiler.go",
        "patchSetId": 6
      },
      "lineNbr": 52,
      "author": {
        "id": 1001485
      },
      "writtenOn": "2020-08-20T09:26:09Z",
      "side": 1,
      "message": "I see. Now that I am using Error, I should put the else block.",
      "parentUuid": "12f742b2_9ab886ce",
      "revId": "4704e24c56cf11a7d01843544c811f8fc5ca0f80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "325dc45c_11418573",
        "filename": "src/chromiumos/tast/local/profiler/perf.go",
        "patchSetId": 6
      },
      "lineNbr": 57,
      "author": {
        "id": 1386944
      },
      "writtenOn": "2020-08-13T23:49:37Z",
      "side": 1,
      "message": "Now that methods are defined below to create PerfOpts objects, perhaps its fields no longer have to be public? (may require updating other dependencies of this code). The PerfType enumation might also be made private.",
      "revId": "4704e24c56cf11a7d01843544c811f8fc5ca0f80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b5508f4_684559b3",
        "filename": "src/chromiumos/tast/local/profiler/perf.go",
        "patchSetId": 6
      },
      "lineNbr": 57,
      "author": {
        "id": 1001485
      },
      "writtenOn": "2020-08-20T06:28:06Z",
      "side": 1,
      "message": "Good point! Thanks!",
      "parentUuid": "325dc45c_11418573",
      "revId": "4704e24c56cf11a7d01843544c811f8fc5ca0f80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a63a109_f8c08ccc",
        "filename": "src/chromiumos/tast/local/profiler/perf.go",
        "patchSetId": 6
      },
      "lineNbr": 67,
      "author": {
        "id": 1386944
      },
      "writtenOn": "2020-08-13T23:49:37Z",
      "side": 1,
      "message": "optional: If someone is using this method to generate a PerfOpts, they might not have seen what PerfStat means from the comment above. Perhaps inline the description from PerfStat above, \"PerfStatOpts creates a PerfOpts for running \"perf stat -a\" on the DUT.\n\nDitto for comments on other Perf....Opts methods below.",
      "range": {
        "startLine": 67,
        "startChar": 39,
        "endLine": 67,
        "endChar": 47
      },
      "revId": "4704e24c56cf11a7d01843544c811f8fc5ca0f80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b499b00c_e57e0706",
        "filename": "src/chromiumos/tast/local/profiler/perf.go",
        "patchSetId": 6
      },
      "lineNbr": 67,
      "author": {
        "id": 1001485
      },
      "writtenOn": "2020-08-20T06:28:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2a63a109_f8c08ccc",
      "range": {
        "startLine": 67,
        "startChar": 39,
        "endLine": 67,
        "endChar": 47
      },
      "revId": "4704e24c56cf11a7d01843544c811f8fc5ca0f80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ed9553e_e91477ae",
        "filename": "src/chromiumos/tast/local/profiler/perf.go",
        "patchSetId": 6
      },
      "lineNbr": 74,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-08-13T12:13:40Z",
      "side": 1,
      "message": "It might be a bit tedious to handle errors from PerfStatOpts (while we don\u0027t have to do so for PerfRecordOpts/PerfStatRecordOpts). We can avoid this by checking pid in newPerf later. Actually, since callers can construct PerfOpts by themselves, I suppose we still need to check the validity of pid in newPerf.",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 74,
        "endChar": 1
      },
      "revId": "4704e24c56cf11a7d01843544c811f8fc5ca0f80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7cd58d0_3089455c",
        "filename": "src/chromiumos/tast/local/profiler/perf.go",
        "patchSetId": 6
      },
      "lineNbr": 74,
      "author": {
        "id": 1001485
      },
      "writtenOn": "2020-08-20T06:28:06Z",
      "side": 1,
      "message": "Got it.\nNow that pid is not public, should I still heed to check validity of pid in newPerf ?",
      "parentUuid": "0ed9553e_e91477ae",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 74,
        "endChar": 1
      },
      "revId": "4704e24c56cf11a7d01843544c811f8fc5ca0f80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "527aaaa5_5b9d425b",
        "filename": "src/chromiumos/tast/local/profiler/perf.go",
        "patchSetId": 6
      },
      "lineNbr": 227,
      "author": {
        "id": 1294890
      },
      "writtenOn": "2020-08-13T10:20:27Z",
      "side": 1,
      "message": "nit: please wrap this part in a function to denote that this is for processing the output.",
      "range": {
        "startLine": 220,
        "startChar": 0,
        "endLine": 227,
        "endChar": 25
      },
      "revId": "4704e24c56cf11a7d01843544c811f8fc5ca0f80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43cc4fc5_888c5860",
        "filename": "src/chromiumos/tast/local/profiler/perf.go",
        "patchSetId": 6
      },
      "lineNbr": 227,
      "author": {
        "id": 1001485
      },
      "writtenOn": "2020-08-20T06:28:06Z",
      "side": 1,
      "message": "Great, I moved the suggestion Oleh made into a function handleOutput.",
      "parentUuid": "527aaaa5_5b9d425b",
      "range": {
        "startLine": 220,
        "startChar": 0,
        "endLine": 227,
        "endChar": 25
      },
      "revId": "4704e24c56cf11a7d01843544c811f8fc5ca0f80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb0adc00_4cfe6bba",
        "filename": "src/chromiumos/tast/local/profiler/profiler.go",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-08-13T12:13:40Z",
      "side": 1,
      "message": "Profilers of different types may have different structured outputs. I guess you tried to cover them by using map[string]interface{}, but then we lose type safety.\n\nTo be type-safe, you can add a pointer to an output variable in the constructor options, and fill it at the end of profiling, just like:\n\n type PerfStatOutput struct {\n   CyclesPerSecond float64\n }\n\n func PerfStatOpts(out *PerfStatOutput, pid int) *PerfOpts // out is filled in RunningProf.End",
      "range": {
        "startLine": 28,
        "startChar": 5,
        "endLine": 28,
        "endChar": 11
      },
      "revId": "4704e24c56cf11a7d01843544c811f8fc5ca0f80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e265c48_912a161b",
        "filename": "src/chromiumos/tast/local/profiler/profiler.go",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1001485
      },
      "writtenOn": "2020-08-20T06:28:06Z",
      "side": 1,
      "message": "Thank you for the suggestion, but this is what I would like to avoid. The reason is that test writer would need to know that they can only read the value after RunningProf.End. This seems to add extra burden to test writer. I guess this is a trade-off between type safety and the simplicity for test.",
      "parentUuid": "bb0adc00_4cfe6bba",
      "range": {
        "startLine": 28,
        "startChar": 5,
        "endLine": 28,
        "endChar": 11
      },
      "revId": "4704e24c56cf11a7d01843544c811f8fc5ca0f80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6250cdfb_74c98e9b",
        "filename": "src/chromiumos/tast/local/profiler/profiler.go",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-08-21T02:39:14Z",
      "side": 1,
      "message": "It\u0027s true that we always have to consider trade-offs, but I strongly recommend against the obscure map[string]interface{} type because type safety is the most powerful feature of Go\u0027s static analysis that prevents bugs. I also don\u0027t think the interface is simple --- users have to know which entry has which type, otherwise reading values will panic.\n\nPlease note that using options to specify output variables is a known technique in Go. An example from gRPC-Go:\nhttps://pkg.go.dev/google.golang.org/grpc?tab\u003ddoc#Header\nhttps://pkg.go.dev/google.golang.org/grpc?tab\u003ddoc#Peer\nhttps://pkg.go.dev/google.golang.org/grpc?tab\u003ddoc#Trailer\n\nIf you want to prevent users from reading the output value before it\u0027s ready, the simplest way seems to be to fill the output value only after End is called (i.e. to avoid filling the output value incrementally). Then even when users try to read the output value before calling End, the error is obvious because the value is always empty. Alternatively you can specify a callback in the option that is called in End, but in general callbacks are unpopular in Go because they make the code execution flow harder to read.",
      "parentUuid": "9e265c48_912a161b",
      "range": {
        "startLine": 28,
        "startChar": 5,
        "endLine": 28,
        "endChar": 11
      },
      "revId": "4704e24c56cf11a7d01843544c811f8fc5ca0f80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "260a6c27_e4371739",
        "filename": "src/chromiumos/tast/local/profiler/profiler.go",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1001485
      },
      "writtenOn": "2020-08-21T05:51:05Z",
      "side": 1,
      "message": "I see. Thank you for the explanation. I will change my patch series to pass a pointer to PerfStatOutput to create the PerfOpts.",
      "parentUuid": "6250cdfb_74c98e9b",
      "range": {
        "startLine": 28,
        "startChar": 5,
        "endLine": 28,
        "endChar": 11
      },
      "revId": "4704e24c56cf11a7d01843544c811f8fc5ca0f80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}