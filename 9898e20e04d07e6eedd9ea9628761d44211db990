{
  "comments": [
    {
      "key": {
        "uuid": "4ae4d1a4_894c7f3a",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_start_time.go",
        "patchSetId": 9
      },
      "lineNbr": 64,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2018-10-12T02:18:53Z",
      "side": 1,
      "message": "Deferred function is not run until the end of the enclosing function, so it\u0027s not desirable for this long function.\n\nI also think many code can be shared between the first warming trial and subsequent trials.\n\nWould you mind defining a local function to do one measurement?\n\n func CrostiniStartTime(ctx context.Context, s *testing.State) {\n\n   type timing struct {\n     vmStart, containerStart, vmShutdown, total time.Duration\n   }\n\n   measure :\u003d func() *timing {\n     // Do measurement (concierge.StartTerminaVM to vmInstance.Close)\n   }\n\n   // Do setup (chrome.New to vm.NewConcierge)\n\n   measure() // discard the first result\n\n   var timings []*timing\n   for i :\u003d 0; i \u003c sampleNum; i++ {\n     timings \u003d append(timings, measure())\n   }\n\n   // Report perf with timings\n }",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 64,
        "endChar": 4
      },
      "revId": "9898e20e04d07e6eedd9ea9628761d44211db990",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "325c46da_6b8bfe49",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_start_time.go",
        "patchSetId": 9
      },
      "lineNbr": 64,
      "author": {
        "id": 1002188
      },
      "writtenOn": "2018-10-12T03:44:43Z",
      "side": 1,
      "message": "I know defer() not called until the end of the function, but I thought Dan just want to make sure the VM is closed when the test is ended. Could you explain what do you mean by not desirable? (Though I think CrostiniStartEverything doesn\u0027t close it by the end, and I\u0027m not sure what\u0027s your policy here).\n\nReuse most of the code sounds good to me. But the first warming setup has an additional \"NewContainer()\" call. I managed to insert that part on the first call. Here\u0027s the slightly modified code from your suggestion.",
      "parentUuid": "4ae4d1a4_894c7f3a",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 64,
        "endChar": 4
      },
      "revId": "9898e20e04d07e6eedd9ea9628761d44211db990",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "516a8753_9e551697",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_start_time.go",
        "patchSetId": 9
      },
      "lineNbr": 64,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2018-10-12T06:32:50Z",
      "side": 1,
      "message": "\u003e I know defer() not called until the end of the function, but I thought Dan just want to make sure the VM is closed when the test is ended. Could you explain what do you mean by not desirable?\n\nIn this case you call defer four times, and they are called at once at the end of the function. This means that, if vmInstance is not nil, Close() is called four times actually. You can set vmInstance \u003d nil in deferred functions, but the fundamental problem is that we fail to run deferred close just when vmInstance is discarded.\n\n\n\u003e (Though I think CrostiniStartEverything doesn\u0027t close it by the end, and I\u0027m not sure what\u0027s your policy here).\n\nWell, I\u0027m actually not very sure here. In the general policy of Tast, we should avoid performing unnecessary deinitialization:\nhttps://chromium.googlesource.com/chromiumos/platform/tast/+/HEAD/docs/writing_tests.md#Startup-and-shutdown\n\nVM will be turned down when restarting ui, so IMO we don\u0027t need to call Close actually; we may want to name the function Stop instead of Close to make it clear. But I\u0027m not very familiar with VM tests so I might be wrong.",
      "parentUuid": "325c46da_6b8bfe49",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 64,
        "endChar": 4
      },
      "revId": "9898e20e04d07e6eedd9ea9628761d44211db990",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9a34e42_72262827",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_start_time.go",
        "patchSetId": 9
      },
      "lineNbr": 64,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-10-12T22:20:42Z",
      "side": 1,
      "message": "sorry, i missed that this was all within a single function. :-(\n\ni just wanted to make sure that we avoid the pattern of:\n\n  foo, err :\u003d NewFoo()\n  ...\n  bar, err :\u003d NewBar()\n  if err !\u003d nil {\n      s.Fatal(\"Failed to create bar: \", err)\n      // foo is leaked here\n  }\n  ...\n  if someOtherFailure {\n      s.Fatal(\"Got some other failure\")\n      // foo is leaked here too\n  }\n  ...\n  foo.Close()",
      "parentUuid": "516a8753_9e551697",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 64,
        "endChar": 4
      },
      "revId": "9898e20e04d07e6eedd9ea9628761d44211db990",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c414b50e_e18a1bdd",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_start_time.go",
        "patchSetId": 9
      },
      "lineNbr": 64,
      "author": {
        "id": 1002188
      },
      "writtenOn": "2018-10-15T00:12:21Z",
      "side": 1,
      "message": "Thanks for the clarification. You want to ensure resource is released before the instance is discarded, not to de-initialization. Current code suggested by nya@ should work.",
      "parentUuid": "b9a34e42_72262827",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 64,
        "endChar": 4
      },
      "revId": "9898e20e04d07e6eedd9ea9628761d44211db990",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23e84002_a1805154",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_start_time.go",
        "patchSetId": 9
      },
      "lineNbr": 80,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-10-12T01:45:17Z",
      "side": 1,
      "message": "nit: remove the else block and set vmInstance to nil unconditionally on L81; s.Fatal will already make the test exit\n\n(hopefully calling Close twice on vmInstance won\u0027t cause problems)",
      "revId": "9898e20e04d07e6eedd9ea9628761d44211db990",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2924e4eb_e0f402ae",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_start_time.go",
        "patchSetId": 9
      },
      "lineNbr": 80,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2018-10-12T02:18:53Z",
      "side": 1,
      "message": "I think we should not call Close twice generally, so how about:\n\n err \u003d vmInstance.Close(ctx)\n vmInstance \u003d nil\n if err !\u003d nil {\n   s.Fatal(...)\n }",
      "parentUuid": "23e84002_a1805154",
      "revId": "9898e20e04d07e6eedd9ea9628761d44211db990",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "edcee6d8_8024f2b7",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_start_time.go",
        "patchSetId": 9
      },
      "lineNbr": 80,
      "author": {
        "id": 1002188
      },
      "writtenOn": "2018-10-12T03:44:43Z",
      "side": 1,
      "message": "Good catch.",
      "parentUuid": "2924e4eb_e0f402ae",
      "revId": "9898e20e04d07e6eedd9ea9628761d44211db990",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61bc1739_7b0ff4fd",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_start_time.go",
        "patchSetId": 9
      },
      "lineNbr": 88,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2018-10-12T02:18:53Z",
      "side": 1,
      "message": "Please keep timing as time.Duration as far as possible, and convert to numbers just before needed.",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 88,
        "endChar": 94
      },
      "revId": "9898e20e04d07e6eedd9ea9628761d44211db990",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79d5e0f8_683ff702",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_start_time.go",
        "patchSetId": 9
      },
      "lineNbr": 88,
      "author": {
        "id": 1002188
      },
      "writtenOn": "2018-10-12T03:44:43Z",
      "side": 1,
      "message": "I get rid of the slices at all and use Append instead.",
      "parentUuid": "61bc1739_7b0ff4fd",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 88,
        "endChar": 94
      },
      "revId": "9898e20e04d07e6eedd9ea9628761d44211db990",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0dfe450c_bb07702e",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_start_time.go",
        "patchSetId": 9
      },
      "lineNbr": 125,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-10-12T01:45:17Z",
      "side": 1,
      "message": "nit: same comment about removing else",
      "revId": "9898e20e04d07e6eedd9ea9628761d44211db990",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "deece4c3_e028402a",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_start_time.go",
        "patchSetId": 9
      },
      "lineNbr": 125,
      "author": {
        "id": 1002188
      },
      "writtenOn": "2018-10-12T03:44:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0dfe450c_bb07702e",
      "revId": "9898e20e04d07e6eedd9ea9628761d44211db990",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "06313d5d_f2f1e766",
        "filename": "src/chromiumos/tast/local/vm/container.go",
        "patchSetId": 9
      },
      "lineNbr": 35,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2018-10-12T02:18:53Z",
      "side": 1,
      "message": "If this is called only from StartAndWait, could you unexport it, i.e. rename it to \"start\"? We can export it again whenever we need to.",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 35,
        "endChar": 54
      },
      "revId": "9898e20e04d07e6eedd9ea9628761d44211db990",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1785b5ba_bd860936",
        "filename": "src/chromiumos/tast/local/vm/container.go",
        "patchSetId": 9
      },
      "lineNbr": 35,
      "author": {
        "id": 1002188
      },
      "writtenOn": "2018-10-12T03:44:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "06313d5d_f2f1e766",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 35,
        "endChar": 54
      },
      "revId": "9898e20e04d07e6eedd9ea9628761d44211db990",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}