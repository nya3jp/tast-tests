{
  "comments": [
    {
      "key": {
        "uuid": "0985010c_0fa4b579",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/native_bridge.go",
        "patchSetId": 6
      },
      "lineNbr": 24,
      "author": {
        "id": 1125664
      },
      "writtenOn": "2020-03-31T20:07:28Z",
      "side": 1,
      "message": "Not related to this CL, asking for my own understanding. I cannot quickly find where is this implemented. What exactly does it mean as a dependency? Some USE flag or something else?",
      "range": {
        "startLine": 24,
        "startChar": 52,
        "endLine": 24,
        "endChar": 65
      },
      "revId": "638de8fb8d01b3bac3bf6b614af7b6473dcd1e26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34eddc4f_ce9e50af",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/native_bridge.go",
        "patchSetId": 6
      },
      "lineNbr": 24,
      "author": {
        "id": 1394308
      },
      "writtenOn": "2020-03-31T20:23:02Z",
      "side": 1,
      "message": "Features for SoftwareDeps can be defined using USE flags: https://chromium.googlesource.com/chromiumos/platform/tast/+/refs/heads/master/docs/test_dependencies.md#new-features\nThe feature \"native_bridge\" is defined as \"houdini || ndk_translation\" in https://chromium-review.googlesource.com/c/chromiumos/platform/tast/+/2128170, which appears in the Cq-Depend field of this CL.\nSo adding this feature to SoftwareDeps enables DUTs lacking these USE flags to skip the test.",
      "parentUuid": "0985010c_0fa4b579",
      "range": {
        "startLine": 24,
        "startChar": 52,
        "endLine": 24,
        "endChar": 65
      },
      "revId": "638de8fb8d01b3bac3bf6b614af7b6473dcd1e26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ae8bb35_84d88ea1",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/native_bridge.go",
        "patchSetId": 6
      },
      "lineNbr": 24,
      "author": {
        "id": 1394308
      },
      "writtenOn": "2020-04-01T11:15:15Z",
      "side": 1,
      "message": "Marked as resolved.",
      "parentUuid": "34eddc4f_ce9e50af",
      "range": {
        "startLine": 24,
        "startChar": 52,
        "endLine": 24,
        "endChar": 65
      },
      "revId": "638de8fb8d01b3bac3bf6b614af7b6473dcd1e26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b8cda0c_fc28cfb7",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/native_bridge.go",
        "patchSetId": 6
      },
      "lineNbr": 61,
      "author": {
        "id": 1394308
      },
      "writtenOn": "2020-03-31T07:23:20Z",
      "side": 1,
      "message": "Question: Is it acceptable to check a feature via testing.ContextSoftwareDeps() within the body of a test?\n\nIf it\u0027s acceptable, then defining a feature \"native_bridge64\" as (houdini64 || ndk_translation64), and checking whether the feature is in the result of testing.ContextSoftwareDeps() instead of checking the property \"ro.product.cpu.abilist64\" would be better than the current implementation, I think.\n# The property \"ro.product.cpu.abilist64\" is set to \"x86_64,arm64-v8a\" iff either of the flags houdini64/ndk_translation64 is enabled. So proceeding as (1) check the USE flags via the feature -\u003e (2) check the property (throw an error if not properly set) -\u003e (3) check whether \"hello_world_arm64\" can be executed, would be more natural and informative as a test.\n\nIf is\u0027s not acceptable, then it\u0027s also possible to split the test into arc.NativeBridge and arc.NativeBridge64, but it seems a little redundant.",
      "range": {
        "startLine": 61,
        "startChar": 1,
        "endLine": 61,
        "endChar": 52
      },
      "revId": "638de8fb8d01b3bac3bf6b614af7b6473dcd1e26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1e0da3d_c7d6b7b5",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/native_bridge.go",
        "patchSetId": 6
      },
      "lineNbr": 61,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-04-01T02:37:10Z",
      "side": 1,
      "message": "I recommend defining separate tests for arm and arm64. It is in general confusing to debug if a test checks different scenarios depending on environment. Also in this case IIUC we use very different NDK translation implementation for arm and arm64, so it might be useful to report those results separately.\n\nYou can define parameterized tests to avoid too redundant tests:\nhttps://chromium.googlesource.com/chromiumos/platform/tast/+/HEAD/docs/writing_tests.md#Parameterized-tests",
      "parentUuid": "2b8cda0c_fc28cfb7",
      "range": {
        "startLine": 61,
        "startChar": 1,
        "endLine": 61,
        "endChar": 52
      },
      "revId": "638de8fb8d01b3bac3bf6b614af7b6473dcd1e26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d41fa9ca_131bc34d",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/native_bridge.go",
        "patchSetId": 6
      },
      "lineNbr": 61,
      "author": {
        "id": 1394308
      },
      "writtenOn": "2020-04-01T11:15:15Z",
      "side": 1,
      "message": "Thanks!\n\nI have splitted the test to two parameterized tests: arc.NativeBridge.arm and arc.NativeBridge.arm64.\nAlthough it\u0027s possible to make these tests mutually exclusive (.arm test for 32-bit only and .arm64 test for both 32-bit and 64-bit), I made .arm64 test specific to 64-bit executables with some duplication with .arm test.",
      "parentUuid": "e1e0da3d_c7d6b7b5",
      "range": {
        "startLine": 61,
        "startChar": 1,
        "endLine": 61,
        "endChar": 52
      },
      "revId": "638de8fb8d01b3bac3bf6b614af7b6473dcd1e26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}