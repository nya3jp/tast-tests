{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "dab1f954_9a941607",
        "filename": "src/chromiumos/tast/common/action/action.go",
        "patchSetId": 4
      },
      "lineNbr": 67,
      "author": {
        "id": 1319142
      },
      "writtenOn": "2022-04-25T21:25:10Z",
      "side": 1,
      "message": "This should say `silently logged` because you are passing `true` for `verboseLog` here.",
      "range": {
        "startLine": 67,
        "startChar": 62,
        "endLine": 67,
        "endChar": 69
      },
      "revId": "22771009fb1e2d1b3d85f74f1b10c1a3a7096666",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb4f3714_f4d3f53a",
        "filename": "src/chromiumos/tast/common/action/action.go",
        "patchSetId": 4
      },
      "lineNbr": 69,
      "author": {
        "id": 1319142
      },
      "writtenOn": "2022-04-25T21:25:10Z",
      "side": 1,
      "message": "There is no reason to wrap `base` in parentheses by itself. If anything you might wrap `base ^ i` in parentheses, although personally I would not even do that, because I would hope it will be understood that ^ has higher precedence than *.",
      "range": {
        "startLine": 69,
        "startChar": 24,
        "endLine": 69,
        "endChar": 30
      },
      "revId": "22771009fb1e2d1b3d85f74f1b10c1a3a7096666",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "072aff73_b8e4982b",
        "filename": "src/chromiumos/tast/common/action/action.go",
        "patchSetId": 4
      },
      "lineNbr": 69,
      "author": {
        "id": 1319142
      },
      "writtenOn": "2022-04-25T21:25:10Z",
      "side": 1,
      "message": "You can write `\u003c n` or `\u003c\u003d n-1`, but not `\u003c n-1` which implies that the largest value of `i` is `n-2`.",
      "range": {
        "startLine": 69,
        "startChar": 48,
        "endLine": 69,
        "endChar": 53
      },
      "revId": "22771009fb1e2d1b3d85f74f1b10c1a3a7096666",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e97fbd77_93d8d6f8",
        "filename": "src/chromiumos/tast/common/action/action.go",
        "patchSetId": 4
      },
      "lineNbr": 69,
      "author": {
        "id": 1319142
      },
      "writtenOn": "2022-04-25T21:25:10Z",
      "side": 1,
      "message": "nit: I think you might as well spell this out instead of using such a cryptic abbreviation.",
      "range": {
        "startLine": 69,
        "startChar": 8,
        "endLine": 69,
        "endChar": 10
      },
      "revId": "22771009fb1e2d1b3d85f74f1b10c1a3a7096666",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6898bc94_7648fe6d",
        "filename": "src/chromiumos/tast/common/action/action.go",
        "patchSetId": 4
      },
      "lineNbr": 74,
      "author": {
        "id": 1319142
      },
      "writtenOn": "2022-04-25T21:25:10Z",
      "side": 1,
      "message": "I think it will be significantly cleaner to update lines 54 and 62 so that they call the below `retryWithExponentialBackoff` function directly.",
      "range": {
        "startLine": 74,
        "startChar": 5,
        "endLine": 74,
        "endChar": 21
      },
      "revId": "22771009fb1e2d1b3d85f74f1b10c1a3a7096666",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "373d7331_013d26df",
        "filename": "src/chromiumos/tast/common/action/action.go",
        "patchSetId": 4
      },
      "lineNbr": 78,
      "author": {
        "id": 1319142
      },
      "writtenOn": "2022-04-25T21:25:10Z",
      "side": 1,
      "message": "optional nit: You might consider `int64` because `base` is typecast to `time.Duration` which is `int64` under the hood according to [1].\n\n[1] https://pkg.go.dev/time#Duration",
      "range": {
        "startLine": 78,
        "startChar": 84,
        "endLine": 78,
        "endChar": 87
      },
      "revId": "22771009fb1e2d1b3d85f74f1b10c1a3a7096666",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb89d794_8313df9a",
        "filename": "src/chromiumos/tast/common/action/action.go",
        "patchSetId": 4
      },
      "lineNbr": 78,
      "author": {
        "id": 1319142
      },
      "writtenOn": "2022-04-25T21:25:10Z",
      "side": 1,
      "message": "nit: How about just `retry`?",
      "range": {
        "startLine": 78,
        "startChar": 5,
        "endLine": 78,
        "endChar": 32
      },
      "revId": "22771009fb1e2d1b3d85f74f1b10c1a3a7096666",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d0c6322_1439da23",
        "filename": "src/chromiumos/tast/common/action/action.go",
        "patchSetId": 4
      },
      "lineNbr": 98,
      "author": {
        "id": 1319142
      },
      "writtenOn": "2022-04-25T21:25:10Z",
      "side": 1,
      "message": "`interval` will persist across invocations of this anonymous function, so that only the first invocation will work properly (see [1]). You need to make a variable inside the anonymous function, initialize it to `interval` and then you can modify it but keep the original value of `interval` for use by further invocations of the whole anonymous function.\n[1] https://go.dev/play/p/lQ3vNoJHf__I",
      "range": {
        "startLine": 98,
        "startChar": 4,
        "endLine": 98,
        "endChar": 35
      },
      "revId": "22771009fb1e2d1b3d85f74f1b10c1a3a7096666",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7781dead_12fa23e5",
        "filename": "src/chromiumos/tast/common/bond/bond.go",
        "patchSetId": 4
      },
      "lineNbr": 112,
      "author": {
        "id": 1319142
      },
      "writtenOn": "2022-04-25T21:25:10Z",
      "side": 1,
      "message": "Why `3` and not `10`?",
      "range": {
        "startLine": 112,
        "startChar": 20,
        "endLine": 112,
        "endChar": 21
      },
      "revId": "22771009fb1e2d1b3d85f74f1b10c1a3a7096666",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}