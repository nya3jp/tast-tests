{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c93e14e9_676487b5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000169
      },
      "writtenOn": "2021-02-16T11:49:13Z",
      "side": 1,
      "message": "kansho@, could you review this?\nAlso, please let me know if this doesn\u0027t work well with your rtcpu work.",
      "revId": "e7c3dc387321578c53ea1aafb6dac063cd3a9ebe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4b5c6ce_5f6fa51e",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/vm_config.go",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1326157
      },
      "writtenOn": "2021-02-17T17:00:56Z",
      "side": 1,
      "message": "I don\u0027t see cr used anywhere. Is it needed for this test?",
      "revId": "e7c3dc387321578c53ea1aafb6dac063cd3a9ebe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5b7d976_ce5d4d4a",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/vm_config.go",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1326157
      },
      "writtenOn": "2021-02-17T17:00:56Z",
      "side": 1,
      "message": "nit/style: Define `a` as close to where it is used as possible. So, move L45-53 to after L59.",
      "revId": "e7c3dc387321578c53ea1aafb6dac063cd3a9ebe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b319b1dc_d9031da1",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/vm_config.go",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1326157
      },
      "writtenOn": "2021-02-17T17:00:56Z",
      "side": 1,
      "message": "nit/style: It is simpler to operate directly on the bytes, rather than casting to strings.\n\n    // L59\n    hostResult :\u003d bytes.TrimSpace(output)\n\n    // L65\n    guestResult :\u003d bytes.TrimSpace(output)\n\n    // L67-68: No change required.\n\nhttp://go/go-style/guide#simplicity",
      "revId": "e7c3dc387321578c53ea1aafb6dac063cd3a9ebe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c8a0f61_7c961d81",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/vm_config.go",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1340192
      },
      "writtenOn": "2021-02-16T12:28:07Z",
      "side": 1,
      "message": "Actually, it will work with the current rt-vcpu implementation because --cpus \u003d\u003d the number of the guest vcpu \u003d\u003d the number of host cpus at the moment. Our current plan is to add a rt-vcpu and to reduce non rt-vcpu by 1.\n\nHowever, we may choose overcommitment for 2 core board like akemi. In this case, it\u0027s not enough to check the guest and the host cpu num.\nIs it difficult to check --cpus passed to crosvm and the guest vcpu num, which is originally mentioned by yusukes@?",
      "revId": "e7c3dc387321578c53ea1aafb6dac063cd3a9ebe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fcabe53_3cff4bab",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/vm_config.go",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1000169
      },
      "writtenOn": "2021-02-17T05:31:14Z",
      "side": 1,
      "message": "Chrome unit tests verify that chrome passes the correct number to concierge.\nConcierge setting up the VM correctly with the specified number of processors should be tested within concierge or crosvm tests.\n\nThis test is to verify that the guest is utilizing the host processors correctly in a end-to-end manner.\n\nIf we are to implement overcommitment logic in future, we can change this test to:\n 1. Replicate the overcommitment logic and calculate the number of expected guest processors in the test if it\u0027s simple.\n 2. Expect that hostResult \u003c\u003d guestResult, instead of \u003d\u003d to make sure that we don\u0027t leave host processors idle.\n\nWDYT?",
      "parentUuid": "4c8a0f61_7c961d81",
      "revId": "e7c3dc387321578c53ea1aafb6dac063cd3a9ebe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "451d2c70_113e3012",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/vm_config.go",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1340192
      },
      "writtenOn": "2021-02-17T09:07:51Z",
      "side": 1,
      "message": "Sounds good.\n\nIn any case, the logic should be changed when we choose overcommitment.",
      "parentUuid": "8fcabe53_3cff4bab",
      "revId": "e7c3dc387321578c53ea1aafb6dac063cd3a9ebe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}