{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "07832fe6_05c8c106",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1496803
      },
      "writtenOn": "2021-12-31T01:52:01Z",
      "side": 1,
      "message": "Hi Seewai, Kyle, David,\nCan I please get your help in reviewing this?\nThanks,\nJonathan\n",
      "revId": "68699c90790da4e7dbc4b41e53d4251a72547b3a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a43ab40f_0cd9be3f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1431492
      },
      "writtenOn": "2022-01-04T21:54:04Z",
      "side": 1,
      "message": "I am not familiar with how keyboad works. I do have some concern with this GRPC interface will work in keyboard related tests.\n\nHere is one example, I found\n\n```\n\t\tif err :\u003d kb.AccelPress(ctx, \"Alt\"); err !\u003d nil {\n\t\t\treturn errors.Wrap(err, \"failed to press alt\")\n\t\t}\n\t\tdefer kb.AccelRelease(ctx, \"Alt\")\n\t\tif err :\u003d testing.Sleep(ctx, 500*time.Millisecond); err !\u003d nil {\n\t\t\treturn errors.Wrap(err, \"failed to wait\")\n\t\t}\n\t\tif err :\u003d kb.Accel(ctx, \"Tab\"); err !\u003d nil {\n\t\t\treturn errors.Wrap(err, \"failed to type tab\")\n\t\t}\n\t\tif err :\u003d testing.Sleep(ctx, time.Second); err !\u003d nil {\n\t\t\treturn errors.Wrap(err, \"failed to wait\")\n\t\t}\n```\nIn this example, we use one single kb for the sequence of operations. With the GRPC interface, we close the kb after each single operation. Will it work?\n\nI am not familiar with how keyboard so I cannot say. I just want a confirmation that this GRPC will work. Thanks.",
      "revId": "68699c90790da4e7dbc4b41e53d4251a72547b3a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af7078b4_fa5aa490",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1496803
      },
      "writtenOn": "2022-01-11T18:05:39Z",
      "side": 1,
      "message": "Thanks Seewai, in fact, I was also debating about that. I was experimenting with the level statefulness with keyboard service (my initial service out of the 4) and my initial version had a keyboard pointer in the svc, ultimately I decided against that in favor of a more stateless approach, hoping that the end users will not have to be responsible with the state management (like calling New() and Close()) method. However down the road though, with the SharedObject, ChromeService, UIAutoService implementation, services are become more stateful, so statefulness of Keyboard service is becoming a moot point.\n\nBased on my tests, functionally both approaches work. I looked at the keyboard code, and under the hood it is writing the keystrokes as events to a file (I am assuming the system pickups the events from there). The stateless approach does have some overhead of opening/closing that file handle.\n\nAnyhow I will revisit this and probably do a little profiling on this.",
      "parentUuid": "a43ab40f_0cd9be3f",
      "revId": "68699c90790da4e7dbc4b41e53d4251a72547b3a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c8f8856_c070c324",
        "filename": "src/chromiumos/tast/local/bundles/cros/inputs/keyboard_service.go",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1118689
      },
      "writtenOn": "2022-01-05T16:11:02Z",
      "side": 1,
      "message": "2022 everywhere",
      "range": {
        "startLine": 1,
        "startChar": 16,
        "endLine": 1,
        "endChar": 17
      },
      "revId": "68699c90790da4e7dbc4b41e53d4251a72547b3a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cf38b99_e919996b",
        "filename": "src/chromiumos/tast/local/bundles/cros/inputs/keyboard_service.go",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 1118689
      },
      "writtenOn": "2022-01-05T16:11:02Z",
      "side": 1,
      "message": "this is the name already :)",
      "range": {
        "startLine": 14,
        "startChar": 1,
        "endLine": 14,
        "endChar": 7
      },
      "revId": "68699c90790da4e7dbc4b41e53d4251a72547b3a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "360122ae_406a30e6",
        "filename": "src/chromiumos/tast/local/bundles/cros/inputs/keyboard_service.go",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 1496803
      },
      "writtenOn": "2022-01-07T00:24:56Z",
      "side": 1,
      "message": "Thanks, this was its 3rd location after tastlist shot down the first 2 and 3rd one is indeed called common :)",
      "parentUuid": "3cf38b99_e919996b",
      "range": {
        "startLine": 14,
        "startChar": 1,
        "endLine": 14,
        "endChar": 7
      },
      "revId": "68699c90790da4e7dbc4b41e53d4251a72547b3a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18a2d4d2_4f2a9c69",
        "filename": "src/chromiumos/tast/local/bundles/cros/inputs/keyboard_service.go",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1431492
      },
      "writtenOn": "2022-01-04T21:54:04Z",
      "side": 1,
      "message": "remove blank line.",
      "revId": "68699c90790da4e7dbc4b41e53d4251a72547b3a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "144d6b88_0e6ad06c",
        "filename": "src/chromiumos/tast/local/bundles/cros/inputs/keyboard_service.go",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1118689
      },
      "writtenOn": "2022-01-05T16:11:02Z",
      "side": 1,
      "message": "what do these map to on ChromeOS? My keyboard doesn\u0027t list them. Is F1\u003dBack, F2\u003dRefresh?",
      "range": {
        "startLine": 60,
        "startChar": 3,
        "endLine": 60,
        "endChar": 40
      },
      "revId": "68699c90790da4e7dbc4b41e53d4251a72547b3a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "719f379f_7d276314",
        "filename": "src/chromiumos/tast/local/bundles/cros/inputs/keyboard_service.go",
        "patchSetId": 2
      },
      "lineNbr": 75,
      "author": {
        "id": 1118689
      },
      "writtenOn": "2022-01-05T16:11:02Z",
      "side": 1,
      "message": "Not sure what the difference between Accel and AccelPress is...",
      "range": {
        "startLine": 75,
        "startChar": 28,
        "endLine": 75,
        "endChar": 38
      },
      "revId": "68699c90790da4e7dbc4b41e53d4251a72547b3a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}