{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c438372b_d99339ed",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1368712
      },
      "writtenOn": "2020-11-18T04:19:10Z",
      "side": 1,
      "message": "Did you talk to Todd or anyone else on the power team about this?\n\nEverything makes sense, but there\u0027s a lot of details I don\u0027t understand yet.",
      "revId": "fb49c447f54511e716f05ea79c270e78a4f02a1d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ca162aac_4b9a188a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1363051
      },
      "writtenOn": "2020-11-18T04:25:21Z",
      "side": 1,
      "message": "I hadn\u0027t talked to anyone on the power team about it. I just put these together to try to get more information when looking at video performance and figured I should clean it up/send it out.",
      "parentUuid": "c438372b_d99339ed",
      "revId": "fb49c447f54511e716f05ea79c270e78a4f02a1d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "32b3e90f_04ef7664",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1368712
      },
      "writtenOn": "2020-11-19T09:56:59Z",
      "side": 1,
      "message": "lgtm.\n\nCould you attach some example output?",
      "revId": "fb49c447f54511e716f05ea79c270e78a4f02a1d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5d8805f1_8fa31f6f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1363051
      },
      "writtenOn": "2020-11-19T23:58:31Z",
      "side": 1,
      "message": "Here\u0027s tast output that includes these metrics: https://paste.googleplex.com/6579291874656256?raw",
      "parentUuid": "32b3e90f_04ef7664",
      "revId": "fb49c447f54511e716f05ea79c270e78a4f02a1d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5cdff8f3_3f7705f2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-11-20T07:06:16Z",
      "side": 1,
      "message": "LGTM for tast style % nits.",
      "revId": "fb49c447f54511e716f05ea79c270e78a4f02a1d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e08d9180_63fbfba5",
        "filename": "src/chromiumos/tast/local/power/package_cstates_metrics.go",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-11-20T07:06:16Z",
      "side": 1,
      "message": "nit: golang doesn\u0027t suggest get prefix. As this is not a trivial getter, maybe fetch? go/go-style/decisions#getters",
      "range": {
        "startLine": 29,
        "startChar": 5,
        "endLine": 29,
        "endChar": 8
      },
      "revId": "fb49c447f54511e716f05ea79c270e78a4f02a1d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c168e453_6cae34e4",
        "filename": "src/chromiumos/tast/local/power/package_cstates_metrics.go",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1368712
      },
      "writtenOn": "2020-11-18T04:19:10Z",
      "side": 1,
      "message": "Possible alternative,\n\nYou can put these regexp into multi-line mode mode by putting `(?m)` at the beginning of the pattern. https://golang.org/pkg/regexp/syntax/\n\nI think that simplifies the loop below?\n\nUp to you though.",
      "revId": "fb49c447f54511e716f05ea79c270e78a4f02a1d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08dd0d6a_2536162d",
        "filename": "src/chromiumos/tast/local/power/package_cstates_metrics.go",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-11-20T07:06:16Z",
      "side": 1,
      "message": "+1 for the suggestion.",
      "parentUuid": "c168e453_6cae34e4",
      "revId": "fb49c447f54511e716f05ea79c270e78a4f02a1d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "403729af_422ede61",
        "filename": "src/chromiumos/tast/local/power/package_cstates_metrics.go",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-11-20T07:06:16Z",
      "side": 1,
      "message": "nit: similar as getIntelCPUUarch, maybe fetch?",
      "range": {
        "startLine": 120,
        "startChar": 5,
        "endLine": 120,
        "endChar": 8
      },
      "revId": "fb49c447f54511e716f05ea79c270e78a4f02a1d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "019aef2f_949aacd1",
        "filename": "src/chromiumos/tast/local/power/package_cstates_metrics.go",
        "patchSetId": 1
      },
      "lineNbr": 185,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-11-20T07:06:16Z",
      "side": 1,
      "message": "nit: \"CPU\" according to https://github.com/golang/go/wiki/CodeReviewComments#initialisms\n\nand similar in a few other places.",
      "range": {
        "startLine": 185,
        "startChar": 11,
        "endLine": 185,
        "endChar": 14
      },
      "revId": "fb49c447f54511e716f05ea79c270e78a4f02a1d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "894e3aa5_5a9cd03b",
        "filename": "src/chromiumos/tast/local/power/package_cstates_metrics.go",
        "patchSetId": 1
      },
      "lineNbr": 192,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-11-20T07:06:16Z",
      "side": 1,
      "message": "nit: I think this is abbrev of Model-specific register, so maybe \"MSR\" instead?\n\nref: https://github.com/golang/go/wiki/CodeReviewComments#initialisms",
      "range": {
        "startLine": 192,
        "startChar": 9,
        "endLine": 192,
        "endChar": 12
      },
      "revId": "fb49c447f54511e716f05ea79c270e78a4f02a1d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "256c0cbf_3874eef1",
        "filename": "src/chromiumos/tast/local/power/package_cstates_metrics.go",
        "patchSetId": 1
      },
      "lineNbr": 277,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-11-20T07:06:16Z",
      "side": 1,
      "message": "nit: So, on non-Intel devices, this will just collect nothing without error. Might be nice to mention the behavior in docstring of PackageCStatesMetrics?",
      "revId": "fb49c447f54511e716f05ea79c270e78a4f02a1d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}