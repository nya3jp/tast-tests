{
  "comments": [
    {
      "key": {
        "uuid": "7035c5ff_4dc59cc3",
        "filename": "src/chromiumos/tast/local/bundles/cros/video/playback/playback.go",
        "patchSetId": 8
      },
      "lineNbr": 52,
      "author": {
        "id": 1273510
      },
      "writtenOn": "2020-05-29T19:20:03Z",
      "side": 1,
      "message": "This is obsolete. See my comment on ln. 66.",
      "range": {
        "startLine": 50,
        "startChar": 52,
        "endLine": 52,
        "endChar": 19
      },
      "revId": "af58ac781995856747c5d94d19b080401242e301",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c91da8bb_f9946bde",
        "filename": "src/chromiumos/tast/local/bundles/cros/video/playback/playback.go",
        "patchSetId": 8
      },
      "lineNbr": 52,
      "author": {
        "id": 1113991
      },
      "writtenOn": "2020-06-01T23:02:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7035c5ff_4dc59cc3",
      "range": {
        "startLine": 50,
        "startChar": 52,
        "endLine": 52,
        "endChar": 19
      },
      "revId": "af58ac781995856747c5d94d19b080401242e301",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "605ec05b_4fe15b69",
        "filename": "src/chromiumos/tast/local/bundles/cros/video/playback/playback.go",
        "patchSetId": 8
      },
      "lineNbr": 53,
      "author": {
        "id": 1273510
      },
      "writtenOn": "2020-05-29T19:20:03Z",
      "side": 1,
      "message": "nit: Since this is no longer enabling/disabling acceleration, I would call this something like \"expectHWAccel\".",
      "range": {
        "startLine": 53,
        "startChar": 114,
        "endLine": 53,
        "endChar": 127
      },
      "revId": "af58ac781995856747c5d94d19b080401242e301",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11fc179d_6f85fc5d",
        "filename": "src/chromiumos/tast/local/bundles/cros/video/playback/playback.go",
        "patchSetId": 8
      },
      "lineNbr": 53,
      "author": {
        "id": 1113991
      },
      "writtenOn": "2020-06-01T23:02:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "605ec05b_4fe15b69",
      "range": {
        "startLine": 53,
        "startChar": 114,
        "endLine": 53,
        "endChar": 127
      },
      "revId": "af58ac781995856747c5d94d19b080401242e301",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02d9d157_64ecc14f",
        "filename": "src/chromiumos/tast/local/bundles/cros/video/playback/playback.go",
        "patchSetId": 8
      },
      "lineNbr": 66,
      "author": {
        "id": 1273510
      },
      "writtenOn": "2020-05-29T19:20:03Z",
      "side": 1,
      "message": "nit: Similar for this. This is now only being used to determine if LibGAV1 was used, so maybe this should be called \"expectLibGAV1\"",
      "range": {
        "startLine": 66,
        "startChar": 116,
        "endLine": 66,
        "endChar": 127
      },
      "revId": "af58ac781995856747c5d94d19b080401242e301",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31be6926_1e739fee",
        "filename": "src/chromiumos/tast/local/bundles/cros/video/playback/playback.go",
        "patchSetId": 8
      },
      "lineNbr": 66,
      "author": {
        "id": 1113991
      },
      "writtenOn": "2020-06-01T23:02:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "02d9d157_64ecc14f",
      "range": {
        "startLine": 66,
        "startChar": 116,
        "endLine": 66,
        "endChar": 127
      },
      "revId": "af58ac781995856747c5d94d19b080401242e301",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3f0b44d_1976e91f",
        "filename": "src/chromiumos/tast/local/bundles/cros/video/playback_perf.go",
        "patchSetId": 8
      },
      "lineNbr": 41,
      "author": {
        "id": 1273510
      },
      "writtenOn": "2020-05-29T19:20:03Z",
      "side": 1,
      "message": "This is potentially inconsistent with pre.ChromeVideo(): the precondition expresses that we want a Chrome with the default implementation (which will change with https://chromium-review.googlesource.com/c/chromium/src/+/2214764). I don\u0027t think that the decoderType parameter is needed anymore: see my comment on playback.go:66.",
      "range": {
        "startLine": 41,
        "startChar": 4,
        "endLine": 41,
        "endChar": 32
      },
      "revId": "af58ac781995856747c5d94d19b080401242e301",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11eeddfc_60afa7b2",
        "filename": "src/chromiumos/tast/local/bundles/cros/video/playback_perf.go",
        "patchSetId": 8
      },
      "lineNbr": 41,
      "author": {
        "id": 1113991
      },
      "writtenOn": "2020-06-01T23:02:40Z",
      "side": 1,
      "message": "Hmm they\u0027re indeed redundant: VDA and VD represent hardware, whereas\n\"Software\" and LibGAV1 are both non-hardware; in principle we could use\njust a boolean... except for LibGAV1, which is a software flavour. Will\nsimplify here and leave a TODO.",
      "parentUuid": "c3f0b44d_1976e91f",
      "range": {
        "startLine": 41,
        "startChar": 4,
        "endLine": 41,
        "endChar": 32
      },
      "revId": "af58ac781995856747c5d94d19b080401242e301",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c6dfb989_07197ea2",
        "filename": "src/chromiumos/tast/local/bundles/cros/video/playback_perf.go",
        "patchSetId": 8
      },
      "lineNbr": 544,
      "author": {
        "id": 1273510
      },
      "writtenOn": "2020-05-29T19:20:03Z",
      "side": 1,
      "message": "I\u0027m wondering about the correctness of this. Right now this precondition is implemented as:\n\nfunc ChromeAlternateVideoDecoder() testing.Precondition {\n\talternateVideoDecoderOnce.Do(func() {\n\t\tif graphics.IsNewVideoDecoderDisabled() {\n\t\t\talternateVideoDecoderPre \u003d chrome.NewPrecondition(\"alternateVideo\", chromeVModuleArgs, chrome.ExtraArgs(\"--enable-features\u003dChromeosVideoDecoder\"))\n\t\t} else {\n\t\t\talternateVideoDecoderPre \u003d chrome.NewPrecondition(\"alternateVideo\", chromeVModuleArgs, chrome.ExtraArgs(\"--disable-features\u003dChromeosVideoDecoder\"))\n\t\t}\n\t})\n\treturn alternateVideoDecoderPre\n}\n\ngraphics.IsNewVideoDecoderDisabled() is based on the USE flag, and we have the following cases:\n\n1) The USE flag is disabled: in this case, there\u0027s no \"alt\" implementation of accelerated decoding, because a disabled USE flag forces the VD to be disabled by way of --force-disable-new-accelerated-video-decoder. So, it would seem that in this case, the right thing to do would be to not run the *_alt tests because they\u0027re redundant.\n\n2) The USE flag is enabled: in this case, the \"alt\" implementation depends on the default value of the ChromeosVideoDecoder and I can\u0027t think of a way to automatically figure out from Tast what that default value is. We might have to maintain this precondition manually, i.e., for now  make it --enable-features\u003dChromeosVideoDecoder. Then, when https://chromium-review.googlesource.com/c/chromium/src/+/2214764 lands, change it to --disable-features\u003dChromeosVideoDecoder.",
      "range": {
        "startLine": 544,
        "startChar": 22,
        "endLine": 544,
        "endChar": 55
      },
      "revId": "af58ac781995856747c5d94d19b080401242e301",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70b00c14_72c04557",
        "filename": "src/chromiumos/tast/local/bundles/cros/video/playback_perf.go",
        "patchSetId": 8
      },
      "lineNbr": 544,
      "author": {
        "id": 1113991
      },
      "writtenOn": "2020-06-01T23:02:40Z",
      "side": 1,
      "message": "The idea was to invert the --enable/disable-features once \nhttps://crrev.com/c/2214764  lands indeed. This flagging business \nis supposed to happen very seldom, but otherwise 1) is correct and\nthe _alt is redundant where there\u0027s no \"alt\". This is less bad than\nit seems becaue the _alt are supposed to ran only every now and then\nto act as canaries in a goldmine and to support bisecting.",
      "parentUuid": "c6dfb989_07197ea2",
      "range": {
        "startLine": 544,
        "startChar": 22,
        "endLine": 544,
        "endChar": 55
      },
      "revId": "af58ac781995856747c5d94d19b080401242e301",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2563eb0a_63ee403e",
        "filename": "src/chromiumos/tast/local/bundles/cros/video/playback_perf.go",
        "patchSetId": 8
      },
      "lineNbr": 544,
      "author": {
        "id": 1273510
      },
      "writtenOn": "2020-06-02T21:15:23Z",
      "side": 1,
      "message": "Then you might want to fix this either in this CL or in a follow-up because that CL has landed and is in Chrome OS. Basically, I would expect the ChromeAlternateVideoDecoder() precondition to look like this:\n\nfunc ChromeAlternateVideoDecoder() testing.Precondition { return chromeAlternateVideoDecoderPre }\n\nvar chromeAlternateVideoDecoderPre \u003d chrome.NewPrecondition(\"alternateVideo\", chromeVModuleArgs, chrome.ExtraArgs(\"--disable-features\u003dChromeosVideoDecoder\"))\n\nThen, I would know that after that CL:\n\n1) The *_hw tests use the default implementation: either VD or VDA depending on the board.\n2) The *_hw_alt tests use the VDA implementation always.",
      "parentUuid": "70b00c14_72c04557",
      "range": {
        "startLine": 544,
        "startChar": 22,
        "endLine": 544,
        "endChar": 55
      },
      "revId": "af58ac781995856747c5d94d19b080401242e301",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3c101a7_1fc90a4d",
        "filename": "src/chromiumos/tast/local/bundles/cros/video/playback_perf.go",
        "patchSetId": 8
      },
      "lineNbr": 544,
      "author": {
        "id": 1113991
      },
      "writtenOn": "2020-06-03T01:05:06Z",
      "side": 1,
      "message": "Makes sense. Let\u0027s do it in another CL since it\u0027s independent of this CL.",
      "parentUuid": "2563eb0a_63ee403e",
      "range": {
        "startLine": 544,
        "startChar": 22,
        "endLine": 544,
        "endChar": 55
      },
      "revId": "af58ac781995856747c5d94d19b080401242e301",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba310fdb_157b7619",
        "filename": "src/chromiumos/tast/local/media/pre/pre.go",
        "patchSetId": 8
      },
      "lineNbr": 121,
      "author": {
        "id": 1273510
      },
      "writtenOn": "2020-05-29T19:20:03Z",
      "side": 1,
      "message": "s/w/W/",
      "range": {
        "startLine": 121,
        "startChar": 19,
        "endLine": 121,
        "endChar": 20
      },
      "revId": "af58ac781995856747c5d94d19b080401242e301",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6cc21911_22b5de92",
        "filename": "src/chromiumos/tast/local/media/pre/pre.go",
        "patchSetId": 8
      },
      "lineNbr": 121,
      "author": {
        "id": 1113991
      },
      "writtenOn": "2020-06-01T23:02:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ba310fdb_157b7619",
      "range": {
        "startLine": 121,
        "startChar": 19,
        "endLine": 121,
        "endChar": 20
      },
      "revId": "af58ac781995856747c5d94d19b080401242e301",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}