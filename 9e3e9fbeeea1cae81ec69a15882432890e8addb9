{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0b7ba31f_7b36e306",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000221
      },
      "writtenOn": "2022-10-19T23:15:38Z",
      "side": 1,
      "message": "I think it is probably not ok to demote this. Because then it will go from model to board and then chipset and load an inconsistent file from run to run. This will cause flakes. Whatever we use to identify, it needs to be able to do so rock solidly. At least in a lab setting, where we get random devices. For bringup on a desk it might be ok. I don\u0027t have a good answer, so if you want to land go ahead, but maybe with a TODO and an open issue for tracking?\n\nNot urgent: it seems we are loading the expectations on every parameterized test? Mabye that can\u0027t be avoided. But could they be cached? Slightly worried about slowing down Romaric\u0027s 1500 tests.",
      "revId": "9e3e9fbeeea1cae81ec69a15882432890e8addb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "56b99c8f_0b0e5714",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1498402
      },
      "writtenOn": "2022-10-19T23:40:47Z",
      "side": 1,
      "message": "Thanks for the feedback.\n\nThe fallthrough could certainly be surprising. Maybe the current behavior is best - fail the test and push the test triager to file a ticket to make sure the device is able to identify itself.\n\nThere is an intersection of two state dimensions:\n\nA. Whether the fileType identifier can be determined for a given type.\nB. Whether there is an expectation file for that particular type.\n\nWe cannot determine B if A is false.\n\nIf the model cannot be found using `cros_config` or the hardware probe cannot find the chipset, then the device is probably in early bringup. These requirements should probably be met before putting the devices into the lab.\n\nTo help with early bringup manual testing, your request to disable expectations via a runtime variable will help. I\u0027ll wait to move the graphics package (crrev.com/c/3961146) before adding the \"disable expectations\" runtime variable.\n\nAs for this CL, I think it is right to abandon it in favor of fixing the model finding code as needed. This means either by fixing `cros_config` on affected devices as they come up, or finding a more reliable means of determining the model.",
      "parentUuid": "0b7ba31f_7b36e306",
      "revId": "9e3e9fbeeea1cae81ec69a15882432890e8addb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab24f996_68ca1697",
        "filename": "src/chromiumos/tast/local/bundles/cros/video/expectations/expectations.go",
        "patchSetId": 2
      },
      "lineNbr": 231,
      "author": {
        "id": 1000221
      },
      "writtenOn": "2022-10-19T23:15:38Z",
      "side": 1,
      "message": "%s maybe for consistency? But why print theFileType twice?",
      "range": {
        "startLine": 231,
        "startChar": 44,
        "endLine": 231,
        "endChar": 46
      },
      "revId": "9e3e9fbeeea1cae81ec69a15882432890e8addb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5530cfee_18892356",
        "filename": "src/chromiumos/tast/local/bundles/cros/video/expectations/expectations.go",
        "patchSetId": 2
      },
      "lineNbr": 231,
      "author": {
        "id": 1498402
      },
      "writtenOn": "2022-10-19T23:40:47Z",
      "side": 1,
      "message": "Agreed about %s.\n\nI was printing the file type twice since the `continue` would allow for the code to fall through to another expectations file. From your other comment, I am also thinking that the fall through behavior would be confusing and surprising for users.",
      "parentUuid": "ab24f996_68ca1697",
      "range": {
        "startLine": 231,
        "startChar": 44,
        "endLine": 231,
        "endChar": 46
      },
      "revId": "9e3e9fbeeea1cae81ec69a15882432890e8addb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:approval_code-owners"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "9e3e9fbeeea1cae81ec69a15882432890e8addb9",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "9e3e9fbeeea1cae81ec69a15882432890e8addb9",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "9e3e9fbeeea1cae81ec69a15882432890e8addb9",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Verified=MAX","label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "9e3e9fbeeea1cae81ec69a15882432890e8addb9",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}