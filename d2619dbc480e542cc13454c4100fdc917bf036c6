{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c5126b64_77e9dbd6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1314845
      },
      "writtenOn": "2021-04-23T23:23:56Z",
      "side": 1,
      "message": "Note: there is no one available on my team for reviews, so we have to rely on Tast owner reviews for now. Thanks.",
      "revId": "d2619dbc480e542cc13454c4100fdc917bf036c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfa53d04_af35d02d",
        "filename": "src/chromiumos/tast/remote/bundles/cros/firmware/data/gen_test_images.sh",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2021-04-26T09:02:38Z",
      "side": 1,
      "message": "Before entering into the details, I have a question:\n\n- Is this tool run offline? (i.e. run locally during the development to generate data)? Or, is it expected to run on DUT?\n\nIf the former\n- could you avoid put under data, because it will be uploaded to DUT unnecessarily.\nIf the latter\n- could you make usual go function(s) under some subpackage of cros/firmware?\n\nIn either case:\n- Could you get rid of shell script (i.e. port to golang)? I know it is the autotest way, but shell script is not statically typed and less error prone. We do not want to follow autotest in that characteristic. This script looks enough long and complicate.",
      "revId": "d2619dbc480e542cc13454c4100fdc917bf036c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ceb7535d_e309f389",
        "filename": "src/chromiumos/tast/remote/bundles/cros/firmware/data/gen_test_images.sh",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1314845
      },
      "writtenOn": "2021-04-28T22:58:56Z",
      "side": 1,
      "message": "The tool is run on the on the host. Unfortunately, it\u0027s not data we can easily precompute, because it changes whenever the firmware changes.\n\nI would like to get rid of the shell script, but porting immediately porting it to golang is risky, since it\u0027s unfortunately complicated. I would like to use it as-is first so that I can make sure the test is working correctly and then port the script over in a second pass. I can add a TODO for that so that it\u0027s not lost.",
      "parentUuid": "bfa53d04_af35d02d",
      "revId": "d2619dbc480e542cc13454c4100fdc917bf036c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "769dbb11_d0fb0654",
        "filename": "src/chromiumos/tast/remote/bundles/cros/firmware/data/gen_test_images.sh",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2021-04-30T03:38:59Z",
      "side": 1,
      "message": "\u003e I would like to get rid of the shell script, but porting immediately porting it to golang is risky\n\nHow much? You\u0027re porting the code from autotest to Tast. I think this should be considered as a part of porting, so in terms of risk level, it looks not that much different from other places.\n\nI found the actual usage of this script in the stack of your CLs.\nSo, it actually runs during the test, so considered as a part of the test.\nI think porting this to go should be a part of \"porting test\", and needs to be done at the same time. Actually, we ported much code into Go native, and, hmm..., at this moment, I couldn\u0027t find unique reasons that this is exceptional.\nIf you\u0027re trying to make sure \"other parts\" of your test work with this script, then could you upload the CL to replace this with go on top of your CL stack now? Then, I\u0027m ok to move forward, too.\n\nBTW, walking through the code, I couldn\u0027t find a blocker to port to Go, so am encouraging you to do it now. However, if there is, then please let me know, since the story should be different.\nAlso, if there\u0027s missing pieces I didn\u0027t capture, please let me know, too.",
      "parentUuid": "ceb7535d_e309f389",
      "revId": "d2619dbc480e542cc13454c4100fdc917bf036c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecad0476_1d603a12",
        "filename": "src/chromiumos/tast/remote/bundles/cros/firmware/data/gen_test_images.sh",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1314845
      },
      "writtenOn": "2021-04-30T14:56:37Z",
      "side": 1,
      "message": "There\u0027s no direct blocker per-se. However, any time we port something we risk introducing bugs. The logic in this script is much more obtuse than the other parts of the test being ported, so there\u0027s a greater chance of making a mistake. Since it\u0027s test code, we don\u0027t have tests for the tests, so I\u0027m going to have to be more careful when doing the porting and try to make some basic tests to make sure that I don\u0027t inadvertently introduce a subtle bug.\n\nSince switching from the script to Go can be a drop-in replacement I\u0027d like to be able to land the followup CLs (https://crrev.com/c/2847138 and https://crrev.com/c/2849055) to make sure that the tests behaves as expected with the existing script and then port the script.\n\nThis is along the lines of the code review philosophy: \"In general, reviewers should favor approving a CL once it is in a state where it definitely improves the overall code health of the system being worked on, even if the CL isnâ€™t perfect.\"\n\nhttps://google.github.io/eng-practices/review/reviewer/standard.html",
      "parentUuid": "769dbb11_d0fb0654",
      "revId": "d2619dbc480e542cc13454c4100fdc917bf036c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}