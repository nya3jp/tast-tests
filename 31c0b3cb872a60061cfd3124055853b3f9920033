{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2af2aa2b_c8f4afac",
        "filename": "src/chromiumos/tast/local/chrome/option.go",
        "patchSetId": 3
      },
      "lineNbr": 515,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2022-07-04T05:04:34Z",
      "side": 1,
      "message": "could you return Options that are different, instead?",
      "range": {
        "startLine": 515,
        "startChar": 38,
        "endLine": 515,
        "endChar": 44
      },
      "revId": "31c0b3cb872a60061cfd3124055853b3f9920033",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e44b16bd_f14bf6a7",
        "filename": "src/chromiumos/tast/local/chrome/option.go",
        "patchSetId": 3
      },
      "lineNbr": 515,
      "author": {
        "id": 1450817
      },
      "writtenOn": "2022-07-04T05:13:22Z",
      "side": 1,
      "message": "No - it\u0027s impossible to compare options (and also impossible to convert them to a human-readable format), as the type of option is a function type (specifically, it\u0027s defined as \"type Option func(cfg *MutableConfig) error\" here:\nhttps://source.chromium.org/chromiumos/chromiumos/codesearch/+/main:src/platform/tast-tests/src/chromiumos/tast/local/chrome/internal/config/config.go;l\u003d340?q\u003d%22type%20Option%22\u0026ss\u003dchromiumos%2Fchromiumos%2Fcodesearch:src%2Fplatform%2Ftast-tests%2Fsrc%2Fchromiumos%2Ftast%2Flocal%2F",
      "parentUuid": "2af2aa2b_c8f4afac",
      "range": {
        "startLine": 515,
        "startChar": 38,
        "endLine": 515,
        "endChar": 44
      },
      "revId": "31c0b3cb872a60061cfd3124055853b3f9920033",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dddfe8d7_ac56d60b",
        "filename": "src/chromiumos/tast/local/chrome/option.go",
        "patchSetId": 3
      },
      "lineNbr": 515,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2022-07-07T13:36:54Z",
      "side": 1,
      "message": "ok, that\u0027s yet another why I recommended to convert them to struct...",
      "parentUuid": "e44b16bd_f14bf6a7",
      "range": {
        "startLine": 515,
        "startChar": 38,
        "endLine": 515,
        "endChar": 44
      },
      "revId": "31c0b3cb872a60061cfd3124055853b3f9920033",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ac25ad9e_8f73f253",
        "filename": "src/chromiumos/tast/local/chrome/option.go",
        "patchSetId": 3
      },
      "lineNbr": 515,
      "author": {
        "id": 1450817
      },
      "writtenOn": "2022-07-08T00:50:06Z",
      "side": 1,
      "message": "But there\u0027s already a struct for this. It\u0027s called MutableConfig. It\u0027d be very redundant to have Config, MutableConfig, and Options, which is esesntially MutableConfigBuilder, and I don\u0027t think it provides any actual benefits turning it into a struct. This current solution doesn\u0027t break encapsulation, and I think it\u0027s perfectly reasonable to print out a diff of the config, given that they still can\u0027t access the config implementation.",
      "parentUuid": "dddfe8d7_ac56d60b",
      "range": {
        "startLine": 515,
        "startChar": 38,
        "endLine": 515,
        "endChar": 44
      },
      "revId": "31c0b3cb872a60061cfd3124055853b3f9920033",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a79e5cd_19add6b2",
        "filename": "src/chromiumos/tast/local/chrome/option.go",
        "patchSetId": 3
      },
      "lineNbr": 515,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2022-07-11T15:12:47Z",
      "side": 1,
      "message": "\u003e I don\u0027t think it provides any actual benefits turning it into a struct.\n\nIt will help us in the future to merge lacros options and chrome options.\nIndeed, it\u0027s not your scope, and it\u0027s fine for you not working on it, and instead you\u0027d like to be blocked, then it\u0027s up to you.\nI do not want to make changes that conflict with it, though.\n\n\u003e This current solution doesn\u0027t break encapsulation\n\nyou are exposing the config internals via OptionsDiff\u0027s return value, ...right...?\nThat\u0027s why I recommended not to depend on such.",
      "parentUuid": "ac25ad9e_8f73f253",
      "range": {
        "startLine": 515,
        "startChar": 38,
        "endLine": 515,
        "endChar": 44
      },
      "revId": "31c0b3cb872a60061cfd3124055853b3f9920033",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15224567_18bf6051",
        "filename": "src/chromiumos/tast/local/chrome/option.go",
        "patchSetId": 3
      },
      "lineNbr": 515,
      "author": {
        "id": 1450817
      },
      "writtenOn": "2022-07-12T05:49:50Z",
      "side": 1,
      "message": "\u003e I do not want to make changes that conflict with it, though.\nThis can\u0027t possibly conflict with other code, as since the return type is a string, the only thing the user can do with it is to print the diff out to the user, or confirm whether the diff is empty. They can\u0027t do something like check if two specific members are equal, or anything that involves caring about the actual underlying struct.\n\n\u003e you are exposing the config internals via OptionsDiff\u0027s return value, ...right...?\nI\u0027d say no. It is \"exposed\" in the sense of you can see a string corresponding to the diff between two configs, but I think that\u0027s perfectly reasonable. Consider how this function will be used, and also consider that the config members pretty clearly map to options:\n\ndiff, _ :\u003d OptionsDiff(codeUnderTest(), []Option{options.ExtraArg(\"--my-flag\")})\nif diff !\u003d \u0027\u0027 {\n t.Errorf(\"Options mismatch (-got +want):\\n%s\", diff)\n}\n\nIf this fails, you would get an error message along the lines of\nOptions mismatch (-got +want):\n+ ExtraArgs: --my-flag\n\nIMO, this is extremely clear what failed, is unable to break code when it changes, as it doesn\u0027t provide access to the underlying config for a program (only in a way that can be read by a human), and the MutableConfig usually has a pretty simple 1-1 mapping with options.\n\nIf you still don\u0027t want this, I can replace the string diff with a bool indicating whether they\u0027re the same object, but IMO, this is pretty stupid as it\u0027s the same thing, just with less debugging information available to the test writer.",
      "parentUuid": "4a79e5cd_19add6b2",
      "range": {
        "startLine": 515,
        "startChar": 38,
        "endLine": 515,
        "endChar": 44
      },
      "revId": "31c0b3cb872a60061cfd3124055853b3f9920033",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17f536ef_40040f17",
        "filename": "src/chromiumos/tast/local/chrome/option.go",
        "patchSetId": 3
      },
      "lineNbr": 515,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2022-07-19T13:00:23Z",
      "side": 1,
      "message": "\u003e \u003e I do not want to make changes that conflict with it, though.\n\u003e This can\u0027t possibly conflict with other code, as since the return type is a string, the only thing the user can do with it is to print the diff out to the user, or confirm whether the diff is empty. They can\u0027t do something like check if two specific members are equal, or anything that involves caring about the actual underlying struct.\n\u003e \n\nThe key here is what\u0027re exposed conceptually. Not just a type.\nThis is the point you and I haven\u0027t made agreement, IIUC.\n\n\u003e \u003e you are exposing the config internals via OptionsDiff\u0027s return value, ...right...?\n\u003e I\u0027d say no. It is \"exposed\" in the sense of you can see a string corresponding to the diff between two configs, but I think that\u0027s perfectly reasonable. \n\nSorry, I couldn\u0027t come up with your thoughts. Actually, this is what I requested to remove, so just saying \"perfectly resonable\" does not work. Clarification?\n\n\u003e Consider how this function will be used, and also consider that the config members pretty clearly map to options:\n\u003e \n\u003e diff, _ :\u003d OptionsDiff(codeUnderTest(), []Option{options.ExtraArg(\"--my-flag\")})\n\u003e if diff !\u003d \u0027\u0027 {\n\u003e  t.Errorf(\"Options mismatch (-got +want):\\n%s\", diff)\n\u003e }\n\u003e \n\u003e If this fails, you would get an error message along the lines of\n\u003e Options mismatch (-got +want):\n\u003e + ExtraArgs: --my-flag\n\u003e \n\nYes, this exposes the internal struct.\n\n\u003e IMO, this is extremely clear what failed, is unable to break code when it changes, as it doesn\u0027t provide access to the underlying config for a program (only in a way that can be read by a human), and the MutableConfig usually has a pretty simple 1-1 mapping with options.\n\u003e \n\u003e If you still don\u0027t want this, I can replace the string diff with a bool indicating whether they\u0027re the same object, but IMO, this is pretty stupid as it\u0027s the same thing, just with less debugging information available to the test writer.\n\nbefore making the decision, could you clarify what is the semantics of equality without mentioning internal details, incl commandline flags?\nSome of the values are actually overwritten, so \"the diff between two sets of options\" is misleading.\n\nFurther discussing over gerrit may be inefficient. Feel free to schedule a VC if you\u0027d like.",
      "parentUuid": "15224567_18bf6051",
      "range": {
        "startLine": 515,
        "startChar": 38,
        "endLine": 515,
        "endChar": 44
      },
      "revId": "31c0b3cb872a60061cfd3124055853b3f9920033",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "067aeca4_cfebe772",
        "filename": "src/chromiumos/tast/local/chrome/option.go",
        "patchSetId": 3
      },
      "lineNbr": 515,
      "author": {
        "id": 1496803
      },
      "writtenOn": "2022-08-29T21:54:33Z",
      "side": 1,
      "message": "Hi Hidehiko, Matt, how about if we live with the status quo and move forward without the change in the option.go?  \nThe grpc tests would provide some test coverage for those options.\n\nIt would be great to enable Lacros through this interface.",
      "parentUuid": "17f536ef_40040f17",
      "range": {
        "startLine": 515,
        "startChar": 38,
        "endLine": 515,
        "endChar": 44
      },
      "revId": "31c0b3cb872a60061cfd3124055853b3f9920033",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17d43caa_c4efa411",
        "filename": "src/chromiumos/tast/local/chrome/option.go",
        "patchSetId": 3
      },
      "lineNbr": 515,
      "author": {
        "id": 1450817
      },
      "writtenOn": "2022-08-30T01:37:54Z",
      "side": 1,
      "message": "Fine by me, I can just remove the tests for now and add them when it\u0027s properly supported.",
      "parentUuid": "067aeca4_cfebe772",
      "range": {
        "startLine": 515,
        "startChar": 38,
        "endLine": 515,
        "endChar": 44
      },
      "revId": "31c0b3cb872a60061cfd3124055853b3f9920033",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c9ff40c_1a3ed0c5",
        "filename": "src/chromiumos/tast/local/chrome/option.go",
        "patchSetId": 3
      },
      "lineNbr": 515,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2022-08-30T09:53:25Z",
      "side": 1,
      "message": "SG to remove the unneeded change from chrome package.",
      "parentUuid": "17d43caa_c4efa411",
      "range": {
        "startLine": 515,
        "startChar": 38,
        "endLine": 515,
        "endChar": 44
      },
      "revId": "31c0b3cb872a60061cfd3124055853b3f9920033",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}