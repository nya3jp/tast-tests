{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2578c817_6ed635de",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1117055
      },
      "writtenOn": "2022-06-08T19:39:08Z",
      "side": 1,
      "message": "It almost feels like we should just be using dynamic dispatch instead of a flag... though that might be complicated if the arguments are very different between the version that uses USS and the one that doesn\u0027t use USS.",
      "revId": "79338d930d4fe1514966356f825e14982a7e6e21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5011c663_176bea3b",
        "filename": "src/chromiumos/tast/remote/bundles/cros/hwsec/pin_weaver_with_auth_api.go",
        "patchSetId": 5
      },
      "lineNbr": 25,
      "author": {
        "id": 1126309
      },
      "writtenOn": "2022-06-07T19:32:02Z",
      "side": 1,
      "message": "nit: \"use UserSecretStash\" (so that folks can have background on what this abbreviation means)",
      "range": {
        "startLine": 25,
        "startChar": 28,
        "endLine": 25,
        "endChar": 31
      },
      "revId": "79338d930d4fe1514966356f825e14982a7e6e21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8944c783_0db3d7b2",
        "filename": "src/chromiumos/tast/remote/bundles/cros/hwsec/pin_weaver_with_auth_api.go",
        "patchSetId": 5
      },
      "lineNbr": 25,
      "author": {
        "id": 1117055
      },
      "writtenOn": "2022-06-08T19:39:08Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "5011c663_176bea3b",
      "range": {
        "startLine": 25,
        "startChar": 28,
        "endLine": 25,
        "endChar": 31
      },
      "revId": "79338d930d4fe1514966356f825e14982a7e6e21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ebfa20d_8e0d5a2a",
        "filename": "src/chromiumos/tast/remote/bundles/cros/hwsec/pin_weaver_with_auth_api.go",
        "patchSetId": 5
      },
      "lineNbr": 130,
      "author": {
        "id": 1126309
      },
      "writtenOn": "2022-06-07T19:32:02Z",
      "side": 1,
      "message": "Based on the feedback I got in CL:3684274, every such helper function should return an error, and none should use |s|.",
      "range": {
        "startLine": 130,
        "startChar": 1,
        "endLine": 130,
        "endChar": 17
      },
      "revId": "79338d930d4fe1514966356f825e14982a7e6e21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fbcd0cb_48ad2ac5",
        "filename": "src/chromiumos/tast/remote/bundles/cros/hwsec/pin_weaver_with_auth_api.go",
        "patchSetId": 5
      },
      "lineNbr": 130,
      "author": {
        "id": 1117055
      },
      "writtenOn": "2022-06-08T19:39:08Z",
      "side": 1,
      "message": "+1. I\u0027m actually surprised the linter didn\u0027t catch this, though I guess it\u0027s because the functions are still defined in this file.\n\nPassing the testing state object around means you\u0027re deferring whether errors are fatal or not to the helper function, which might lead you to issues e.g. if it should be a fatal in one circumstance but not in another. It also means that if a function calls s.Fatal, then the test will stop even though it doesn\u0027t look like there is any reason for that to happen just from reading this code.",
      "parentUuid": "7ebfa20d_8e0d5a2a",
      "range": {
        "startLine": 130,
        "startChar": 1,
        "endLine": 130,
        "endChar": 17
      },
      "revId": "79338d930d4fe1514966356f825e14982a7e6e21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9267e61a_5985b8fd",
        "filename": "src/chromiumos/tast/remote/bundles/cros/hwsec/pin_weaver_with_auth_api.go",
        "patchSetId": 5
      },
      "lineNbr": 132,
      "author": {
        "id": 1117055
      },
      "writtenOn": "2022-06-08T19:39:08Z",
      "side": 1,
      "message": "nit: if you\u0027re going to label boolean/integer arguments like this, please put the comment in the same \"expression\" as the argument it is labeling",
      "range": {
        "startLine": 132,
        "startChar": 80,
        "endLine": 132,
        "endChar": 103
      },
      "revId": "79338d930d4fe1514966356f825e14982a7e6e21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3fee5b4_bb9ed103",
        "filename": "src/chromiumos/tast/remote/bundles/cros/hwsec/pin_weaver_with_auth_api.go",
        "patchSetId": 5
      },
      "lineNbr": 167,
      "author": {
        "id": 1117055
      },
      "writtenOn": "2022-06-08T19:39:08Z",
      "side": 1,
      "message": "remove commented out lines, please",
      "revId": "79338d930d4fe1514966356f825e14982a7e6e21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2d01898_f2d1cc84",
        "filename": "src/chromiumos/tast/remote/bundles/cros/hwsec/pin_weaver_with_auth_api.go",
        "patchSetId": 5
      },
      "lineNbr": 230,
      "author": {
        "id": 1117055
      },
      "writtenOn": "2022-06-08T19:39:08Z",
      "side": 1,
      "message": "might be easier to read if the `err` check is factored out to the bottom",
      "range": {
        "startLine": 224,
        "startChar": 0,
        "endLine": 230,
        "endChar": 3
      },
      "revId": "79338d930d4fe1514966356f825e14982a7e6e21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26cbb578_2d574cda",
        "filename": "src/chromiumos/tast/remote/bundles/cros/hwsec/pin_weaver_with_auth_api.go",
        "patchSetId": 5
      },
      "lineNbr": 253,
      "author": {
        "id": 1117055
      },
      "writtenOn": "2022-06-08T19:39:08Z",
      "side": 1,
      "message": "ditto re: might be easier to read if the `err` check is factored out to the bottom",
      "range": {
        "startLine": 245,
        "startChar": 0,
        "endLine": 253,
        "endChar": 3
      },
      "revId": "79338d930d4fe1514966356f825e14982a7e6e21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c3edb49_37141a50",
        "filename": "src/chromiumos/tast/remote/bundles/cros/hwsec/pin_weaver_with_auth_api.go",
        "patchSetId": 5
      },
      "lineNbr": 288,
      "author": {
        "id": 1117055
      },
      "writtenOn": "2022-06-08T19:39:08Z",
      "side": 1,
      "message": "ditto re: might be easier to read if the `err` check is factored out to the bottom",
      "range": {
        "startLine": 280,
        "startChar": 0,
        "endLine": 288,
        "endChar": 3
      },
      "revId": "79338d930d4fe1514966356f825e14982a7e6e21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7abb298_851dbe8d",
        "filename": "src/chromiumos/tast/remote/bundles/cros/hwsec/pin_weaver_with_auth_api.go",
        "patchSetId": 5
      },
      "lineNbr": 318,
      "author": {
        "id": 1117055
      },
      "writtenOn": "2022-06-08T19:39:08Z",
      "side": 1,
      "message": "why not just define `var err error` up front, set `err \u003d ...` in each branch and then check afterwards for whether or not it matches the expected value? Then you probably don\u0027t need the truth table explaining what this logic is encoding either.",
      "range": {
        "startLine": 310,
        "startChar": 0,
        "endLine": 318,
        "endChar": 2
      },
      "revId": "79338d930d4fe1514966356f825e14982a7e6e21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}