{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2b82ca4e_558c147f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2022-03-21T19:40:27Z",
      "side": 1,
      "message": "lgtm",
      "revId": "f41ef190d83a63d779653f326a6425a8962b06cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3787248f_36ad1871",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1508900
      },
      "writtenOn": "2022-03-21T21:26:16Z",
      "side": 1,
      "message": "You should not pass `cleanupCtx` to cuj.NewRecorder (which is not a cleanup task). Because if cuj.NewRecorder reaches the timeout with cleanupCtx, all deferred functions in the test will not be executed.\n\nIn the case that cuj.NewRecorder has some cleanup task, you should reserve time inside cuj.NewRecorder (create a cleanupCtx in cuj.NewRecorder and use it for cleanup, see the other CL).",
      "revId": "f41ef190d83a63d779653f326a6425a8962b06cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "748554b0_f61ee48f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2022-03-21T22:03:39Z",
      "side": 1,
      "message": "There is only one `deferred` call to clean up in case `cuj.NewRecorder` fails. Well, firstly it should not normally fail. Secondly, `cuj.NewRecorder` is called early in test so that it collects metrics generated during test. `ctx` should not reach timeout during `cuj.NewRecorder`. If it does, we have bigger problems to solve.\n\nIMHO, it does not really matter which Context we pass in. Either way it should work.",
      "parentUuid": "3787248f_36ad1871",
      "revId": "f41ef190d83a63d779653f326a6425a8962b06cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b24311be_d00e9762",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1508900
      },
      "writtenOn": "2022-03-21T22:19:46Z",
      "side": 1,
      "message": "Passing `cleanupCtx` to a non-cleanup function poses a risk to other deferred functions. Normally, a test should not assume that a function never times out, as the helper functions are subject to changes without modifying the tests.\n\nPlease just pass `ctx` to `cuj.NewRecorder` no matter if it has cleanups.",
      "parentUuid": "748554b0_f61ee48f",
      "revId": "f41ef190d83a63d779653f326a6425a8962b06cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e076a7e3_3ae89098",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/recorder.go",
        "patchSetId": 1
      },
      "lineNbr": 271,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2022-03-21T19:40:27Z",
      "side": 1,
      "message": "Do we want to pass `ctx` as an arg like suggested in\n\nhttps://chromium-review.googlesource.com/c/chromiumos/platform/tast-tests/+/3530156/3..7/src/chromiumos/tast/local/bundles/cros/ui/cuj/recorder.go#b231\n\n, except that we don\u0027t need to reserve time?",
      "revId": "f41ef190d83a63d779653f326a6425a8962b06cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3508bfd0_d5deea8d",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/recorder.go",
        "patchSetId": 1
      },
      "lineNbr": 271,
      "author": {
        "id": 1319142
      },
      "writtenOn": "2022-03-21T19:47:50Z",
      "side": 1,
      "message": "https://chromium-review.googlesource.com/c/chromiumos/platform/tast-tests/+/3539318",
      "parentUuid": "e076a7e3_3ae89098",
      "revId": "f41ef190d83a63d779653f326a6425a8962b06cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}