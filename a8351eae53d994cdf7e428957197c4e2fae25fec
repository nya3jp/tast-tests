{
  "comments": [
    {
      "key": {
        "uuid": "dbd18d5e_12df041b",
        "filename": "src/chromiumos/tast/remote/servo/methods.go",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1266306
      },
      "writtenOn": "2020-03-30T18:47:53Z",
      "side": 1,
      "message": "Should check control and value for validity before calling run.\nAlso, can delegate rest of this function to SetString.",
      "revId": "a8351eae53d994cdf7e428957197c4e2fae25fec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cda66197_715d45cf",
        "filename": "src/chromiumos/tast/remote/servo/methods.go",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1326157
      },
      "writtenOn": "2020-03-30T20:40:58Z",
      "side": 1,
      "message": "\u003e Should check control and value for validity before calling run.\n\nHow would you check this? If an invalid control or value is passed in, servo will still accept it with no error, so we would need some way of determining what is a valid control/value. That\u0027s why this function takes a KeypressControl and KeypressDuration, with constants defined above: to mitigate the risk of typos and errors. If tests use these constants, I expect there would be no issue.\n\n\u003e Also, can delegate rest of this function to SetString.\n\nDone.",
      "parentUuid": "dbd18d5e_12df041b",
      "revId": "a8351eae53d994cdf7e428957197c4e2fae25fec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f73965f_3b4f945a",
        "filename": "src/chromiumos/tast/remote/servo/methods.go",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1326157
      },
      "writtenOn": "2020-03-30T21:00:01Z",
      "side": 1,
      "message": "\u003e If an invalid control or value is passed in, servo will still accept it with no error\n\nUpon further testing, this appears to be wrong. I get the following error when I pass an invalid KeypressControl, or a valid KeypressControl with an invalid KeypressDuration:\n\n    response contains 0 arg(s); want 1\n\nSo, if someone is sending incorrect controls/values, then they will get an error. In my opinion, that is sufficient.",
      "parentUuid": "cda66197_715d45cf",
      "revId": "a8351eae53d994cdf7e428957197c4e2fae25fec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff1044df_a75b1780",
        "filename": "src/chromiumos/tast/remote/servo/methods.go",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1266306
      },
      "writtenOn": "2020-03-30T22:01:17Z",
      "side": 1,
      "message": "Oh I need one thing clarified, does control and value only take values in the declared constants, or can they take other values?",
      "parentUuid": "0f73965f_3b4f945a",
      "revId": "a8351eae53d994cdf7e428957197c4e2fae25fec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7aec635_f8aa74a0",
        "filename": "src/chromiumos/tast/remote/servo/methods.go",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1326157
      },
      "writtenOn": "2020-03-30T22:18:41Z",
      "side": 1,
      "message": "The keypress values can take the declared constants, or optionally an int or a float. That\u0027s why I named the function KeypressWithDuration: so that we can also add KeypressWithInt or KeypressWithFloat if needed.\n\nThis is documented in the comment at line 26.",
      "parentUuid": "ff1044df_a75b1780",
      "revId": "a8351eae53d994cdf7e428957197c4e2fae25fec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ee50d87_0afa80cd",
        "filename": "src/chromiumos/tast/remote/servo/methods.go",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1266306
      },
      "writtenOn": "2020-03-30T22:56:02Z",
      "side": 1,
      "message": "But the control names themselves are in the set CtrlD to PwrButton?  In that case, for control name, you can check that it is one of those.  And for value, check that it is one of the special string values, or an int.  Doing these checks are for reasons of enforcing the interface.  Otherwise code could use it incorrectly and cause hard to spot bugs, or misuse it.",
      "parentUuid": "b7aec635_f8aa74a0",
      "revId": "a8351eae53d994cdf7e428957197c4e2fae25fec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77a6df4c_2d4506ed",
        "filename": "src/chromiumos/tast/remote/servo/methods.go",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1326157
      },
      "writtenOn": "2020-03-30T23:29:28Z",
      "side": 1,
      "message": "Because there is no `value in list` syntax in Go like there is for Python, here is the most succinct way I have found to express that:\n\n    // KeypressWithDuration sets a KeypressControl to a KeypressDuration value.\n    func (s *Servo) KeypressWithDuration(ctx context.Context, control KeypressControl, value KeypressDuration) error {\n        controlIsValid :\u003d false\n            for _, c :\u003d range []KeypressControl{CtrlD, CtrlU, CtrlEnter, Ctrl, Enter, Refresh, CtrlRefresh, ImaginaryKey, SysRQX, PowerKey, PwrButton} {\n                    if control \u003d\u003d c {\n                            controlIsValid \u003d true\n                            break\n                    }\n            }\n            if !controlIsValid {\n                    return errors.Errorf(\"control %s is invalid\", control)\n            }\n            valueIsValid :\u003d false\n            for _, v :\u003d range []KeypressDuration{DurTab, DurPress, DurLongPress} {\n                    if value \u003d\u003d v {\n                            valueIsValid \u003d true\n                            break\n                    }\n            }\n            if !valueIsValid {\n                    return errors.Errorf(\"value %s is invalid\", value)\n            }\n            return s.SetString(ctx, StringControl(control), string(value))\n    }\n\n(It would be nontrivial to write a reusable `value in list` function, because Go doesn\u0027t support polymorphic functions: we would need to write keypressControlInArray, and keypressDurationInArray. Or a clever way to map an array of KeypressControls/KeypressDurations to an array of strings.)\n\nAs an alternative, based on my earlier comment (@2:00PT) that passing an invalid control or value yields an error, I think the following would suffice:\n\n    // KeypressWithDuration sets a KeypressControl to a KeypressDuration value.\n    func (s *Servo) KeypressWithDuration(ctx context.Context, control KeypressControl, value KeypressDuration) error {\n            if err :\u003d s.SetString(ctx, StringControl(control), string(value)); err !\u003d nil {\n                    return errors.Wrap(err, \"supplied control or value may not be valid\")\n            }\n            return nil\n    }\n\nWhat would you think of that solution?",
      "parentUuid": "3ee50d87_0afa80cd",
      "revId": "a8351eae53d994cdf7e428957197c4e2fae25fec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}