{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "dfd71fec_2ee2d96d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1355245
      },
      "writtenOn": "2021-05-27T08:12:59Z",
      "side": 1,
      "message": "Mukai-san, Can you take a look?\n\nI understand ui package is deprecated and we want to migrate to uiauto. But uiauto.NewRootWatcher directly uses ui package internally.\n\nAlternatively, we can migrate entire EventWatcher to uiauto, it needs some amount of work though.\n\nWhat do you think?\nThank you.",
      "revId": "f79fd7a01132ab97bfa435ede48c71404669d6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a3f1cc13_2acb4e1e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1355245
      },
      "writtenOn": "2021-05-31T01:57:53Z",
      "side": 1,
      "message": "Thanks for the reply.",
      "revId": "f79fd7a01132ab97bfa435ede48c71404669d6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "22ee75b1_8411a7c9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2021-06-02T16:46:07Z",
      "side": 1,
      "message": "Sorry for the delay.  I changed the uiauto-side and ui/launcher_page_switch_perf.go -- they are not using chrome/ui.EventWatcher anymore. Please rebase, I guess you don\u0027t need to change those files.",
      "revId": "f79fd7a01132ab97bfa435ede48c71404669d6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f9496ab_2f71b1ae",
        "filename": "src/chromiumos/tast/local/chrome/ui/watcher.go",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2021-05-27T17:41:50Z",
      "side": 1,
      "message": "Thanks for making a change, but it\u0027s not clear to me why we want to keep the target node.  Isn\u0027t it good enough to simply drop the \u0027Target\u0027 field?  Or do you have a new case where Target property is crucial?",
      "revId": "f79fd7a01132ab97bfa435ede48c71404669d6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dca8b5e8_34829747",
        "filename": "src/chromiumos/tast/local/chrome/ui/watcher.go",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1355245
      },
      "writtenOn": "2021-05-31T01:57:53Z",
      "side": 1,
      "message": "This change is intended as a preparation of https://chromium-review.googlesource.com/c/chromiumos/platform/tast-tests/+/2921793/1, which is still WIP though.\n\nFrom my perspective, I\u0027d like to migrate that test from using ChroemVox internal classes to public automation API.\nEventually, in that test, I would like to make it listen all events under the Android root and verify the event sequence.\n\nDo you have any suggestions? It\u0027s fine to me to implement by myself using chrome.automation APIs directly instead of using ui or uiauto packages.",
      "parentUuid": "5f9496ab_2f71b1ae",
      "revId": "f79fd7a01132ab97bfa435ede48c71404669d6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2579eb7_f418feeb",
        "filename": "src/chromiumos/tast/local/chrome/ui/watcher.go",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2021-06-02T16:46:07Z",
      "side": 1,
      "message": "Thanks for the reply.  However, the CL looks like doing:\n* create a root event watcher\n* check if the event target is the wanted node or not through \"match\"\n\nI guess you could do that by creating an event watcher for the target node instead of root one. Isn\u0027t it working well?",
      "parentUuid": "dca8b5e8_34829747",
      "revId": "f79fd7a01132ab97bfa435ede48c71404669d6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f45e92c_61d6c12f",
        "filename": "src/chromiumos/tast/local/chrome/ui/watcher.go",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1355245
      },
      "writtenOn": "2021-06-03T04:57:42Z",
      "side": 1,
      "message": "Thank you,\n\nCurrently, your suggestion works. That CL just migrates to use EventWatcher.\nOn the other hand, we\u0027re also planning to capture all events from Android (b/170692165) and verify that sequence. Not only checking the sequence contains the expected events, but also checking some events should be dispatched only once and unexpected event type is not being dispatched.\nI was thinking that in order to make this happen, Event.Target is necessary.\n\nI started to wonder if the purpose of our test is slightly different from what ui/uiauto package provides. arc.Accessibility* tests want to verify the behavior of automation API in ARC tre, and the ui / uiauto is the package to control UI using automation API.\nBecause the purposes are slightly different, I\u0027ve started to think that we should implement our own event monitoring logic, even though many parts of implementation are similar.\n\nWhat do you think?",
      "parentUuid": "a2579eb7_f418feeb",
      "revId": "f79fd7a01132ab97bfa435ede48c71404669d6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55874328_2bae78c8",
        "filename": "src/chromiumos/tast/local/chrome/ui/watcher.go",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2021-06-03T21:54:15Z",
      "side": 1,
      "message": "ui and uiauto are indeed for controlling the UI. It\u0027s using accessibility API but the a11y itself isn\u0027t the primary goal.\n\nThat said, if that\u0027s what you want to do, I\u0027m actually fine with modifying ui (or uiauto) for your purpose. What you said is reasonable, and actually uiauto / ui are fairly complex library. It\u0027s not a great idea to re-invent something similar.",
      "parentUuid": "7f45e92c_61d6c12f",
      "revId": "f79fd7a01132ab97bfa435ede48c71404669d6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a3c98ba_597caf7d",
        "filename": "src/chromiumos/tast/local/chrome/uiauto/automation.go",
        "patchSetId": 2
      },
      "lineNbr": 526,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2021-05-27T17:41:50Z",
      "side": 1,
      "message": "Sorry but I have another CL to refactor the use of event watcher in uiauto (https://chromium-review.googlesource.com/c/chromiumos/platform/tast-tests/+/2802697).  Please wait for that.",
      "revId": "f79fd7a01132ab97bfa435ede48c71404669d6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}