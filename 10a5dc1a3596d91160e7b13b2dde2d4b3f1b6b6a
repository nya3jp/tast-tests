{
  "comments": [
    {
      "key": {
        "uuid": "1b380aff_492d751f",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/perf_boot_service.go",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-12-26T06:59:39Z",
      "side": 1,
      "message": "huge nit: This package is typically referred as just \"arc\", so I\u0027d import chromiumos/tast/services/cros/arc with an alias instead. How about importing the other one as \"arcpb\"?",
      "range": {
        "startLine": 18,
        "startChar": 1,
        "endLine": 18,
        "endChar": 9
      },
      "revId": "10a5dc1a3596d91160e7b13b2dde2d4b3f1b6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "058979ad_9b107b2b",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/perf_boot_service.go",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-12-26T06:59:39Z",
      "side": 1,
      "message": "\": \" is not needed; it\u0027s appended by errors.Wrap. Ditto below.",
      "range": {
        "startLine": 41,
        "startChar": 71,
        "endLine": 41,
        "endChar": 75
      },
      "revId": "10a5dc1a3596d91160e7b13b2dde2d4b3f1b6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ceca93b5_b244404b",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/perf_boot_service.go",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-12-26T06:59:39Z",
      "side": 1,
      "message": "huge nit: logcatEventEntryRegexp :\u003d ...",
      "range": {
        "startLine": 61,
        "startChar": 1,
        "endLine": 61,
        "endChar": 30
      },
      "revId": "10a5dc1a3596d91160e7b13b2dde2d4b3f1b6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "acd5c634_9fd8b4da",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/perf_boot_service.go",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-12-26T06:59:39Z",
      "side": 1,
      "message": "Why do we need KeepState option? I\u0027m rather afraid that it might make the perf results unstable because the previous test run on this DUT can affect the behavior of this test.",
      "range": {
        "startLine": 64,
        "startChar": 15,
        "endLine": 64,
        "endChar": 24
      },
      "revId": "10a5dc1a3596d91160e7b13b2dde2d4b3f1b6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf271947_012534fb",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/perf_boot_service.go",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-12-26T06:59:39Z",
      "side": 1,
      "message": "Passing an empty path to arc.New does not prevent it from saving files, so this would just save files in the current directory.\n\nInstead how about creating a temporary directory?\n\n td, err :\u003d ioutil.TempDir(\"\", \"\")\n if err !\u003d nil { ... }\n defer os.RemoveAll(td)\n\n a, err :\u003d arc.New(ctx, td)",
      "range": {
        "startLine": 72,
        "startChar": 29,
        "endLine": 72,
        "endChar": 32
      },
      "revId": "10a5dc1a3596d91160e7b13b2dde2d4b3f1b6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5dae5a86_dbefc219",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/perf_boot_service.go",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-12-26T06:59:39Z",
      "side": 1,
      "message": "style: arcStartTimeMS\nhttps://github.com/golang/go/wiki/CodeReviewComments#initialisms",
      "range": {
        "startLine": 84,
        "startChar": 5,
        "endLine": 84,
        "endChar": 19
      },
      "revId": "10a5dc1a3596d91160e7b13b2dde2d4b3f1b6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e0a3b9f_b0d6df23",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/perf_boot_service.go",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-12-26T06:59:39Z",
      "side": 1,
      "message": "I think this check behaves a bit confusing depending on how long time left in ctx timeout.\n\n- If ctx timeout is shorter than logcatTimeout: logcat process is killed on ctx timeout, scanner reads EOF and scanner.Scan returns false, so this RPC call suceeds\n- If ctx timeout is longer than logcatTimeout: an error is returned here\n\nMy recommendation is to set the context timeout with logcatTimeout and check if the last event is seen.\n\n ctx, cancel :\u003d context.WithTimeout(ctx, logcatTimeout)\n defer cancel()\n\n cmd :\u003d a.Command(ctx, ...) // cmd is killed on ctx timeout\n ...\n\n lastEventSeen :\u003d false\n for scanner.Scan() { // since the process is killed on ctx timeout, we\u0027ll exit from this loop by around that time\n   ...\n }\n if !lastEventSeen {\n   return nil, errors.New(...)\n }\n return res, nil",
      "range": {
        "startLine": 139,
        "startChar": 0,
        "endLine": 142,
        "endChar": 3
      },
      "revId": "10a5dc1a3596d91160e7b13b2dde2d4b3f1b6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e569aa1e_216e10d4",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/perf_boot_service.go",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-12-26T06:59:39Z",
      "side": 1,
      "message": "Also we have to check scanner.Err() to see if it encountered any error.",
      "range": {
        "startLine": 143,
        "startChar": 0,
        "endLine": 143,
        "endChar": 2
      },
      "revId": "10a5dc1a3596d91160e7b13b2dde2d4b3f1b6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8784871_75e99343",
        "filename": "src/chromiumos/tast/remote/bundles/cros/arc/perf_boot.go",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-12-26T06:59:39Z",
      "side": 1,
      "message": "We can reuse the same \"cl\" variable for the two rpc.Client. (Reusing variables is common in Go unless very confusing)\n\nIn fact we already reuse \"service\"...",
      "range": {
        "startLine": 57,
        "startChar": 1,
        "endLine": 57,
        "endChar": 50
      },
      "revId": "10a5dc1a3596d91160e7b13b2dde2d4b3f1b6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99c4688d_d089551a",
        "filename": "src/chromiumos/tast/services/cros/arc/perf_boot_service.proto",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-12-26T06:59:39Z",
      "side": 1,
      "message": "Can we use google.protobuf.Duration instead?\nhttps://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Duration\nhttps://godoc.org/github.com/golang/protobuf/ptypes#Duration\nhttps://godoc.org/github.com/golang/protobuf/ptypes#DurationProto",
      "range": {
        "startLine": 28,
        "startChar": 4,
        "endLine": 28,
        "endChar": 9
      },
      "revId": "10a5dc1a3596d91160e7b13b2dde2d4b3f1b6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}