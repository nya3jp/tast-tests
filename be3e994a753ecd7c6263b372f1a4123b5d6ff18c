{
  "comments": [
    {
      "key": {
        "uuid": "b59d778d_abbd0b02",
        "filename": "src/chromiumos/tast/local/vm/crosvm.go",
        "patchSetId": 6
      },
      "lineNbr": 73,
      "author": {
        "id": 1304442
      },
      "writtenOn": "2019-06-28T22:11:36Z",
      "side": 1,
      "message": "After tons of digging, I found that we can set a read deadline, if the underlying structure is a *os.File from a pipe. This is what is is created internally from the vm.cmd.StdoutPipe() call, but that only gives us an interface to a io.ReadCloser. Doing this manually gives us access to the lower level structure to set the deadline.",
      "revId": "be3e994a753ecd7c6263b372f1a4123b5d6ff18c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c681d162_221922da",
        "filename": "src/chromiumos/tast/local/vm/crosvm.go",
        "patchSetId": 6
      },
      "lineNbr": 136,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2019-07-02T15:59:15Z",
      "side": 1,
      "message": "For simplicity of the flow, how about introducing a simple struct to return line and error, and unify the channels?\n\ntype result struct {\n  line string\n  err error\n}\nch :\u003d make(chan result, 1)",
      "revId": "be3e994a753ecd7c6263b372f1a4123b5d6ff18c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de1591e2_8b47aa95",
        "filename": "src/chromiumos/tast/local/vm/crosvm.go",
        "patchSetId": 6
      },
      "lineNbr": 141,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2019-07-02T15:59:15Z",
      "side": 1,
      "message": "Could you avoid ignoring error?",
      "revId": "be3e994a753ecd7c6263b372f1a4123b5d6ff18c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b51cc3cf_bce0deb5",
        "filename": "src/chromiumos/tast/local/vm/crosvm.go",
        "patchSetId": 6
      },
      "lineNbr": 144,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2019-07-02T15:59:15Z",
      "side": 1,
      "message": "Do make an returned error more predictable by caller, I\u0027d recommend to return ctx.Err() for timeout case.\nThough, it\u0027d slightly tricky.\n\ntype result struct {\n  line string\n  err error\n}\n\nch :\u003d make(chan result, 1)\n\n...set deadline as you did...\ngo func() {\n  defer close(ch)\n  var line strings.Builder\n  var b [1]byte\n  for {\n    n, err :\u003d vm.stdout.Read(b[:])\n    if err !\u003d nil {\n      ch \u003c- result { \"\", err }\n      return\n    }\n    if b[0] \u003d\u003d \u0027\\n\u0027 {\n      line.Reset()\n    } else {\n      line.WriteByte(b[0])\n      s :\u003d line.String()\n      if re.MatchString(s) {\n        ch \u003c- result { s, nil }\n        return\n      }\n    }\n  }\n}()\n\nselect {\ncase r :\u003d \u003c- ch:\n  if os.IsTimeout(r.err) {\n    select {\n    case \u003c-ctx.Done()\n      return \"\", errors.Wrap(ctx.Err(), \"... good message ...\")\n    }\n  }\n  return r.line, r.err\ncase \u003c- ctx.Done()\n  return \"\", errors.Wrap(ctx.Err(), \"... good message ...\")\n}\n\nWDYT?",
      "revId": "be3e994a753ecd7c6263b372f1a4123b5d6ff18c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a13dc687_b651b872",
        "filename": "src/chromiumos/tast/local/vm/crosvm.go",
        "patchSetId": 6
      },
      "lineNbr": 153,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2019-07-02T15:59:15Z",
      "side": 1,
      "message": "Because you\u0027re setting read dead line, this looks redundant.\nIt\u0027s better to do some handling for timeout outside of the goroutine, though, IMO.",
      "range": {
        "startLine": 149,
        "startChar": 3,
        "endLine": 153,
        "endChar": 11
      },
      "revId": "be3e994a753ecd7c6263b372f1a4123b5d6ff18c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e13fd61_78332b4d",
        "filename": "src/chromiumos/tast/local/vm/crosvm.go",
        "patchSetId": 6
      },
      "lineNbr": 154,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2019-07-02T15:59:15Z",
      "side": 1,
      "message": "Nice to avoid creating buffer for each iteration.",
      "revId": "be3e994a753ecd7c6263b372f1a4123b5d6ff18c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "245d4ce6_ca30e49f",
        "filename": "src/chromiumos/tast/local/vm/crosvm.go",
        "patchSetId": 6
      },
      "lineNbr": 155,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2019-07-02T15:59:15Z",
      "side": 1,
      "message": "Clar: is it ok to call Read() for each byte, which could be slow.\nAs long as the test is fast enough, I\u0027m ok, but it\u0027s nice to be commented, IMO.",
      "revId": "be3e994a753ecd7c6263b372f1a4123b5d6ff18c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10fe9db5_06b3daba",
        "filename": "src/chromiumos/tast/local/vm/crosvm.go",
        "patchSetId": 6
      },
      "lineNbr": 159,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2019-07-02T15:59:15Z",
      "side": 1,
      "message": "According to man, if n is 0, EOF error is returned, so this won\u0027t happen.",
      "range": {
        "startLine": 159,
        "startChar": 14,
        "endLine": 159,
        "endChar": 21
      },
      "revId": "be3e994a753ecd7c6263b372f1a4123b5d6ff18c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2dee490_d2cebe20",
        "filename": "src/chromiumos/tast/local/vm/crosvm.go",
        "patchSetId": 6
      },
      "lineNbr": 167,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2019-07-02T15:59:15Z",
      "side": 1,
      "message": "clar: this creates copy of a line for each byte.\nIs it acceptable for you?",
      "range": {
        "startLine": 167,
        "startChar": 22,
        "endLine": 167,
        "endChar": 35
      },
      "revId": "be3e994a753ecd7c6263b372f1a4123b5d6ff18c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "241b7d53_18104ed0",
        "filename": "src/chromiumos/tast/local/vm/crosvm.go",
        "patchSetId": 6
      },
      "lineNbr": 175,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2019-07-02T15:59:15Z",
      "side": 1,
      "message": "for looks unnecessary.",
      "revId": "be3e994a753ecd7c6263b372f1a4123b5d6ff18c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}