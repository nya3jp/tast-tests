{
  "comments": [
    {
      "key": {
        "uuid": "bb21b63b_c89e72a8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1387481
      },
      "writtenOn": "2020-07-23T09:50:37Z",
      "side": 1,
      "message": "Thanks a lot!",
      "revId": "3c816e6d40d91ca3196dbcfbf87fa7da1237fcac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05e11565_53c7a7c0",
        "filename": "src/chromiumos/tast/remote/bundles/cros/wifi/prefer_5ghz.go",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 1387481
      },
      "writtenOn": "2020-07-23T09:50:37Z",
      "side": 1,
      "message": "IIUC, If we take no parameter here, then the following DeconfigAP would use the ctx at line 50, which is passed at line 77 and 84, right? So we don\u0027t ever need sCtx :D",
      "range": {
        "startLine": 62,
        "startChar": 20,
        "endLine": 62,
        "endChar": 39
      },
      "revId": "3c816e6d40d91ca3196dbcfbf87fa7da1237fcac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c40677a_61693407",
        "filename": "src/chromiumos/tast/remote/bundles/cros/wifi/prefer_5ghz.go",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2020-07-23T10:10:37Z",
      "side": 1,
      "message": "That works in a more implicit manner (and that\u0027s one option Yenlin proposed). If we want to use this approach, please leave a note in configureAP function comment:\n// Also note that the returned callback function use the passing unshortened ctx to perform the cleanup. \n\nMmm... now I\u0027m convinced. With this, line 77-82 becomes:\n\tctx, freq2g, deconfig2g, err :\u003d configureAP(ctx, ssid, channel2g)\n\tif err !\u003d nil {\n\t\ts.Fatal(\"Failed to set up AP: \", err)\n\t}\n\tdefer deconfig2g()\n\nBTW, the cCTX in line 61 is still needed.",
      "parentUuid": "05e11565_53c7a7c0",
      "range": {
        "startLine": 62,
        "startChar": 20,
        "endLine": 62,
        "endChar": 39
      },
      "revId": "3c816e6d40d91ca3196dbcfbf87fa7da1237fcac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f55cfbc_91de19c2",
        "filename": "src/chromiumos/tast/remote/bundles/cros/wifi/prefer_5ghz.go",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 1373754
      },
      "writtenOn": "2020-07-23T21:22:50Z",
      "side": 1,
      "message": "IIUC, If we use this approach we don\u0027t need sCTX in line 61. We can do the following everytime we call configureAP():\n        ap, freq2g, deconfig2g, err :\u003d configureAP(ctx, ssid, channel2g)\n\tif err !\u003d nil {\n\t\ts.Fatal(\"Failed to set up AP: \", err)\n\t}\n\tdefer deconfig2g()\n        ctx, cancel \u003d tf.ReserveForDeconfigAP(ctx, ap)\n        defer ctx\n        \n       OR \n       \n       freq2g, deconfig2g, err :\u003d configureAP(ctx, ssid, channel2g)\n\tif err !\u003d nil {\n\t\ts.Fatal(\"Failed to set up AP: \", err)\n\t}\n\tdefer deconfig2g()\n        ctx, cancel \u003d ctxutil.Shorten(ctx, 5*time.Second)\n\tdefer cancel()",
      "parentUuid": "6c40677a_61693407",
      "range": {
        "startLine": 62,
        "startChar": 20,
        "endLine": 62,
        "endChar": 39
      },
      "revId": "3c816e6d40d91ca3196dbcfbf87fa7da1237fcac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c461d0e9_eb86046f",
        "filename": "src/chromiumos/tast/remote/bundles/cros/wifi/prefer_5ghz.go",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-07-24T02:51:41Z",
      "side": 1,
      "message": "I have both version uploaded. The one Dean/Hsin-chen proposed is in PS3, and the one Arowa proposed is in PS4 (slightly modified to have deconfig taking ctx so the usage is more explicit).\n\nPros of PS3:\n- simpler in the testbody\nPros of PS4:\n- the context behavior is all explicit in the main test flow.\n\nWDYT? I think both looks fine to me.",
      "parentUuid": "9f55cfbc_91de19c2",
      "range": {
        "startLine": 62,
        "startChar": 20,
        "endLine": 62,
        "endChar": 39
      },
      "revId": "3c816e6d40d91ca3196dbcfbf87fa7da1237fcac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3689099d_61ae359f",
        "filename": "src/chromiumos/tast/remote/bundles/cros/wifi/prefer_5ghz.go",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2020-07-24T03:15:28Z",
      "side": 1,
      "message": "For PS4, as it returns AP object, the caller shall deconfig the AP and it is redundant that configureAP() returns a cleanup function.\n\nFor PS3, it looks simpler however it implies the defer function configureAP() returns uses the original ctx. This should be addressed in the comment. I\u0027ve left an example in a comment before:\n// Also note that the returned callback function use the passing unshortened ctx to perform the cleanup. \n\n\nI would prefer PS3.",
      "parentUuid": "c461d0e9_eb86046f",
      "range": {
        "startLine": 62,
        "startChar": 20,
        "endLine": 62,
        "endChar": 39
      },
      "revId": "3c816e6d40d91ca3196dbcfbf87fa7da1237fcac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}