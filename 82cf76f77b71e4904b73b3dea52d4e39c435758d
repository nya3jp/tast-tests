{
  "comments": [
    {
      "key": {
        "uuid": "9185e877_4a38aeb9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1414348
      },
      "writtenOn": "2020-09-30T10:00:42Z",
      "side": 1,
      "message": "PTALA. Thanks!",
      "revId": "82cf76f77b71e4904b73b3dea52d4e39c435758d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "287a6485_5f56c973",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1414348
      },
      "writtenOn": "2020-10-02T10:50:13Z",
      "side": 1,
      "message": "Thanks for reviewing!  I added some comments.",
      "revId": "82cf76f77b71e4904b73b3dea52d4e39c435758d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2307e5d4_816bb4a3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1414348
      },
      "writtenOn": "2020-10-03T03:43:47Z",
      "side": 1,
      "message": "PTALA, thanks!",
      "revId": "82cf76f77b71e4904b73b3dea52d4e39c435758d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10f8144e_ba4bc694",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/nethelper/nethelper.go",
        "patchSetId": 5
      },
      "lineNbr": 188,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-10-01T06:39:32Z",
      "side": 1,
      "message": "bufio.Reader.ReadString may read data from conn beyond the first newline character. So once we start reading conn via a bufio.Reader, we must continue using it; otherwise we may lose some data.",
      "range": {
        "startLine": 188,
        "startChar": 18,
        "endLine": 188,
        "endChar": 56
      },
      "revId": "82cf76f77b71e4904b73b3dea52d4e39c435758d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "731bd342_6445e5ef",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/nethelper/nethelper.go",
        "patchSetId": 5
      },
      "lineNbr": 188,
      "author": {
        "id": 1414348
      },
      "writtenOn": "2020-10-02T10:50:13Z",
      "side": 1,
      "message": "Just to clarify for this command read, the client only sends \u003ccmd_string\u003e\\n and nothing after newline.  \n\n1) App client sends \"receive_payload\\n\" -\u003e nethelper.go handleClient() sends \"OK\\n\" or \"FAIL\\n\" response to app client.  Then later in a separate transaction, 2) app client sends 8 byte header containing payload size in integer format  (maybe changed to ascii format for request by khmel@) -\u003e client sends binary payload data, etc.  \n\nDoes the second set of transaction in 2) for the actual payload have to also use ReadString()? The connection is point-to-point between server and client and the single client on that connection will not put any other data in the socket after \"receive_payload\\n\" or \"drop_caches\\n\" until nethelper server responds.  So using ReadFull or other APIs for 2) should be ok?",
      "parentUuid": "10f8144e_ba4bc694",
      "range": {
        "startLine": 188,
        "startChar": 18,
        "endLine": 188,
        "endChar": 56
      },
      "revId": "82cf76f77b71e4904b73b3dea52d4e39c435758d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "456727a3_a63f639a",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/nethelper/nethelper.go",
        "patchSetId": 5
      },
      "lineNbr": 188,
      "author": {
        "id": 1414348
      },
      "writtenOn": "2020-10-03T03:43:47Z",
      "side": 1,
      "message": "Reading https://golang.org/pkg/bufio/#Reader.ReadString, it seems to only read up to and including the first delimiter char.  If it reads EOF before first newline or gets another non-EOF error before first newline, it will error and return.  Please help clarify which case can cause read beyond first newline if you still see issue with new patchset.  Thanks.",
      "parentUuid": "731bd342_6445e5ef",
      "range": {
        "startLine": 188,
        "startChar": 18,
        "endLine": 188,
        "endChar": 56
      },
      "revId": "82cf76f77b71e4904b73b3dea52d4e39c435758d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1008951b_b71a84bd",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/nethelper/nethelper.go",
        "patchSetId": 5
      },
      "lineNbr": 236,
      "author": {
        "id": 1136699
      },
      "writtenOn": "2020-09-30T17:28:43Z",
      "side": 1,
      "message": "I think to make it consistent, we should pass meta information in text form, similar we pass command name, for example header may look like\n\nreceive_payload\n102545\nRAW_BINARY_DATA_OF_SIZE_102545\n\nAlso I would suggest you to consider the use case when we send also information about data expected from server.\nfor example\n\ndata_request\n1234\n5676\nRAW_BINARY_DATA_OF_SIZE_1234\n\nthen server reads the data and response:\ndata_response\n5676\nRAW_BINARY_DATA_OF_SIZE_5676\n\nThat would probably ease you to control payload from your test.\n\nWDYT?",
      "range": {
        "startLine": 236,
        "startChar": 2,
        "endLine": 236,
        "endChar": 19
      },
      "revId": "82cf76f77b71e4904b73b3dea52d4e39c435758d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e50fc034_46b8c41b",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/nethelper/nethelper.go",
        "patchSetId": 5
      },
      "lineNbr": 236,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-10-01T06:39:32Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "1008951b_b71a84bd",
      "range": {
        "startLine": 236,
        "startChar": 2,
        "endLine": 236,
        "endChar": 19
      },
      "revId": "82cf76f77b71e4904b73b3dea52d4e39c435758d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "152a5aea_e521b49d",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/nethelper/nethelper.go",
        "patchSetId": 5
      },
      "lineNbr": 236,
      "author": {
        "id": 1414348
      },
      "writtenOn": "2020-10-02T10:50:13Z",
      "side": 1,
      "message": "Sure I can change the header to ascii based rather than binary format.  My original intention was to keep it simple and consistent for the APK side which doesn\u0027t do any string building/parsing of payload ATM.\n\nCurrently, the test is driven from the client side where the client updates the server with payload send and the server confirms payload has been received.  It\u0027s certainly conceivable that the server may request data from the client.  \n\nSince the purpose of this test is to check the performance of full-duplex tcp socket connection transfers.  It shouldn\u0027t matter profiling-wise  which direction initiates the data send considering that it\u0027s point-to-point per socket connection, and as long as both server and client does a send and a receive per transaction. (e.g. timer_start -\u003e client send -\u003e server recv -\u003e server send -\u003e client recv -\u003e timer_end vs. timer_start -\u003e server send -\u003e client recv -\u003e client send -\u003e server recv -\u003e timer_end).  And all the infrastructure is already done to do profiling in the APK for all tests so I prefer the payload flow control is initiated there in the client-side.\n\nI\u0027ll make a bug to explore whether server response packet should be larger than a simple Ack given your example (maybe the same size of client payload), and per your other comment in Android Gerrit CL to pseudo-randomize transfer block sizes? (currently NetworkTest transfer block sizes are tested from smallest to largest in order).   But this will be a separate change since the scope of this CL is just to integrate nethelper to NetworkTest in APK.",
      "parentUuid": "e50fc034_46b8c41b",
      "range": {
        "startLine": 236,
        "startChar": 2,
        "endLine": 236,
        "endChar": 19
      },
      "revId": "82cf76f77b71e4904b73b3dea52d4e39c435758d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb6640fe_8171ad4d",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/nethelper/nethelper.go",
        "patchSetId": 5
      },
      "lineNbr": 236,
      "author": {
        "id": 1414348
      },
      "writtenOn": "2020-10-03T03:43:47Z",
      "side": 1,
      "message": "Done and filed http://b/169947243.",
      "parentUuid": "152a5aea_e521b49d",
      "range": {
        "startLine": 236,
        "startChar": 2,
        "endLine": 236,
        "endChar": 19
      },
      "revId": "82cf76f77b71e4904b73b3dea52d4e39c435758d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b7287f1_0700b9d7",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/nethelper/nethelper.go",
        "patchSetId": 5
      },
      "lineNbr": 241,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-10-01T06:39:32Z",
      "side": 1,
      "message": "This is not specific to cmdReceivePayload but common to the overall protocol, so I recommend doing it generally (e.g. when reading the command). Or I think it\u0027s also fine to skip this unless it\u0027s definitely need to avoid errors.",
      "range": {
        "startLine": 240,
        "startChar": 0,
        "endLine": 241,
        "endChar": 55
      },
      "revId": "82cf76f77b71e4904b73b3dea52d4e39c435758d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "baec741f_339ca195",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/nethelper/nethelper.go",
        "patchSetId": 5
      },
      "lineNbr": 241,
      "author": {
        "id": 1414348
      },
      "writtenOn": "2020-10-02T10:50:13Z",
      "side": 1,
      "message": "Ack. I\u0027ll update to make the read timeout common to overall protocol.  I prefer not to skip this error case and potentially have the test hang on read if client connection is lost.  I\u0027m not sure if this will happen between guest and host connection during the test since we\u0027re integrating a new flow.  But adding a timeout should help with debug if error case does occur and fail quicker.",
      "parentUuid": "0b7287f1_0700b9d7",
      "range": {
        "startLine": 240,
        "startChar": 0,
        "endLine": 241,
        "endChar": 55
      },
      "revId": "82cf76f77b71e4904b73b3dea52d4e39c435758d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4254d2e0_391dbfcc",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/nethelper/nethelper.go",
        "patchSetId": 5
      },
      "lineNbr": 241,
      "author": {
        "id": 1414348
      },
      "writtenOn": "2020-10-03T03:43:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "baec741f_339ca195",
      "range": {
        "startLine": 240,
        "startChar": 0,
        "endLine": 241,
        "endChar": 55
      },
      "revId": "82cf76f77b71e4904b73b3dea52d4e39c435758d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4360a05c_388a8fe1",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/nethelper/nethelper.go",
        "patchSetId": 5
      },
      "lineNbr": 252,
      "author": {
        "id": 1136699
      },
      "writtenOn": "2020-09-30T17:28:43Z",
      "side": 1,
      "message": "Are we sure that we could allocate buffer represented by 64 bit uint?\nI think it is much easier to have buffer let say 4K,8K and read all data using this buffer. I doubt that in reality some app/server reads data directly into one huge buffer.",
      "range": {
        "startLine": 252,
        "startChar": 25,
        "endLine": 252,
        "endChar": 36
      },
      "revId": "82cf76f77b71e4904b73b3dea52d4e39c435758d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6c531d6_a6f58091",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/nethelper/nethelper.go",
        "patchSetId": 5
      },
      "lineNbr": 252,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-10-01T06:39:32Z",
      "side": 1,
      "message": "Currently payload data is never read. If you want to just discard data, you can do:\n\n io.CopyN(ioutil.Discard, r, payloadSize)",
      "range": {
        "startLine": 252,
        "startChar": 1,
        "endLine": 252,
        "endChar": 8
      },
      "revId": "82cf76f77b71e4904b73b3dea52d4e39c435758d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd278b67_6236f680",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/nethelper/nethelper.go",
        "patchSetId": 5
      },
      "lineNbr": 252,
      "author": {
        "id": 1414348
      },
      "writtenOn": "2020-10-03T03:43:47Z",
      "side": 1,
      "message": "Good idea, Done.",
      "parentUuid": "a6c531d6_a6f58091",
      "range": {
        "startLine": 252,
        "startChar": 1,
        "endLine": 252,
        "endChar": 8
      },
      "revId": "82cf76f77b71e4904b73b3dea52d4e39c435758d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b407d91_35a77e62",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/nethelper/nethelper.go",
        "patchSetId": 5
      },
      "lineNbr": 252,
      "author": {
        "id": 1414348
      },
      "writtenOn": "2020-10-03T03:43:47Z",
      "side": 1,
      "message": "This buffer goes away based on next comment from nya@ to just discard.\n\nI originally wanted to just read everything into single buffer without looping and refilling same buffer.  The reason is because timing involved in the many loop cycles isn\u0027t interesting for the purpose of what\u0027s being profiled which are only the network system / kernel calls.\n\nAgree in real world application, I would definitely read into small buffer and construct larger message while dealing with possible out-of-order receives.  But in this case with connection being point-to-point and strictly controlled for test purposes, the out-of-order aspect should never happen.",
      "parentUuid": "4360a05c_388a8fe1",
      "range": {
        "startLine": 252,
        "startChar": 25,
        "endLine": 252,
        "endChar": 36
      },
      "revId": "82cf76f77b71e4904b73b3dea52d4e39c435758d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e75efdb_6e87284b",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/nethelper/nethelper.go",
        "patchSetId": 5
      },
      "lineNbr": 259,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-10-01T06:39:32Z",
      "side": 1,
      "message": "Let\u0027s use fmt.Sprintf.",
      "range": {
        "startLine": 259,
        "startChar": 11,
        "endLine": 259,
        "endChar": 112
      },
      "revId": "82cf76f77b71e4904b73b3dea52d4e39c435758d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03d99e79_a0261b64",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/nethelper/nethelper.go",
        "patchSetId": 5
      },
      "lineNbr": 259,
      "author": {
        "id": 1414348
      },
      "writtenOn": "2020-10-03T03:43:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2e75efdb_6e87284b",
      "range": {
        "startLine": 259,
        "startChar": 11,
        "endLine": 259,
        "endChar": 112
      },
      "revId": "82cf76f77b71e4904b73b3dea52d4e39c435758d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}