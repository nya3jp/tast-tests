template("process_resources") {
  compile_dir = "${target_gen_dir}/compiled"

  action(target_name) {
    forward_variables_from(invoker, [
      "apk_path",
      "deps",
      "manifest",
      "min_sdk_version",
      "resource_files",
      "rjava_dir",
      "target_sdk_version",
    ])

    script = "//build/util/process_resources.py"
    inputs = resource_files
    sources = [
      manifest,
      "//build/util/find.py",
      android_platform,
      android_build_tools,
    ]
    outputs = [
      apk_path,
      "${rjava_dir}/R.java"
    ]
    args = [
      "--output",
      rebase_path(apk_path),
      "--android-sdk-platform",
      android_platform,
      "--manifest",
      rebase_path(manifest),
      "--Rjava-dir",
      rebase_path(rjava_dir),
      "--compile-dir",
      rebase_path(compile_dir),
      "--android-sdk-build-tools",
      android_build_tools,
    ]
    if (defined(target_sdk_version)) {
      args += ["--target-sdk-version", target_sdk_version]
    }
    if (defined(min_sdk_version)) {
      args += ["--min-sdk-version", min_sdk_version]
    }
    args += ["--"]
    args += rebase_path(inputs)
  }
}

template("compile_sources") {
  javac_output_dir = "${target_gen_dir}/bin"
  dex_dir = "${target_gen_dir}/dex"

  action(target_name) {
    forward_variables_from(invoker, [
      "apk_path",
      "classes_dex",
      "deps",
      "source_files",
      "unsigned_apk_path",
    ])

    script = "//build/util/javac.py"
    inputs = source_files
    sources = [
      "//build/util/find.py",
      android_platform,
      android_build_tools,
      apk_path,
    ]
    outputs = [
      unsigned_apk_path
    ]
    args = [
      "--dex-dir",
      rebase_path(dex_dir),
      "--class-dir",
      rebase_path(javac_output_dir),
      "--android-sdk-platform",
      android_platform,
      "--android-sdk-build-tools",
      android_build_tools,
      "--resource-apk",
      rebase_path(apk_path),
      "--output",
      rebase_path(unsigned_apk_path),
    ]
    args += ["--"]
    args += rebase_path(inputs)
  }
}

template("apk_sign") {
  action(target_name) {
    forward_variables_from(invoker, [
      "cert",
      "deps",
      "key",
      "signed_apk_path",
      "unsigned_apk_path",
    ])
    script = "//build/util/signer.py"
    sources = [
      unsigned_apk_path,
      key,
      cert,
      android_build_tools
    ]
    outputs = [
      signed_apk_path
    ]
    args = [
      "--unsigned-apk",
      rebase_path(unsigned_apk_path),
      "--output",
      rebase_path(signed_apk_path),
      "--key",
      rebase_path(key),
      "--cert",
      rebase_path(cert),
      "--build-tools-dir",
      android_build_tools,
    ]
  }
}

template("android_apk") {
  group(target_name) {
    deps = [
      ":${target_name}__apk_sign"
    ]
  }

  apk_name = target_name

  target_apk = apk_name + ".apk"
  unmerged_apk_path = "${target_gen_dir}/${target_apk}"
  rjava_dir = "${target_gen_dir}/rjava"
  unsigned_apk_path = "${target_gen_dir}/${target_apk}.unsigned"
  signed_apk_path = "${root_build_dir}/apk/${target_apk}"

  process_resources("${apk_name}__process_resources") {
    forward_variables_from(invoker, [
      "manifest",
      "resource_dirs",
      "target_sdk_version",
      "min_sdk_version",
    ])
    resources_rel = exec_script(
      "//build/util/find.py",
      rebase_path(resource_dirs),
      "list lines"
    )
    resource_files = rebase_path(resources_rel, ".", root_build_dir)
    apk_path = unmerged_apk_path
    rjava_dir = rjava_dir
  }

  compile_sources("${apk_name}__compile_sources") {
    forward_variables_from(invoker, [
      "source_dirs",
    ])
    sources_rel = exec_script(
      "//build/util/find.py",
      rebase_path(source_dirs),
      "list lines"
    )

    source_files = rebase_path(sources_rel, ".", root_build_dir)
    source_files += ["${rjava_dir}/R.java"]
    apk_path = unmerged_apk_path
    unsigned_apk_path = unsigned_apk_path
    deps = [
      ":${apk_name}__process_resources"
    ]
  }

  apk_sign("${apk_name}__apk_sign") {
    android_cert_path = "//certs/cheetskeys"
    key = "${android_cert_path}/${android_key_env}.pk8"
    cert = "${android_cert_path}/${android_key_env}.x509.pem"
    unsigned_apk_path = unsigned_apk_path
    signed_apk_path = signed_apk_path
    deps = [
      ":${apk_name}__compile_sources"
    ]
  }
}
