{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5fed5f99_e201ccb2",
        "filename": "src/chromiumos/tast/local/chrome/ime/input_method.go",
        "patchSetId": 1
      },
      "lineNbr": 334,
      "author": {
        "id": 1508900
      },
      "writtenOn": "2021-08-11T04:13:58Z",
      "side": 1,
      "message": "Would it be better to use a struct instead of map[string]interface{}? or even simply a string?",
      "range": {
        "startLine": 334,
        "startChar": 67,
        "endLine": 334,
        "endChar": 89
      },
      "revId": "1fc565867fa8adf728acc67b64ac399b324cf61c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "df732392_82d1f482",
        "filename": "src/chromiumos/tast/local/chrome/ime/input_method.go",
        "patchSetId": 1
      },
      "lineNbr": 334,
      "author": {
        "id": 1395692
      },
      "writtenOn": "2021-08-11T04:21:17Z",
      "side": 1,
      "message": "The value can be any format, boolean / string/ int.",
      "parentUuid": "5fed5f99_e201ccb2",
      "range": {
        "startLine": 334,
        "startChar": 67,
        "endLine": 334,
        "endChar": 89
      },
      "revId": "1fc565867fa8adf728acc67b64ac399b324cf61c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14305f5b_0598cf74",
        "filename": "src/chromiumos/tast/local/chrome/ime/input_method.go",
        "patchSetId": 1
      },
      "lineNbr": 334,
      "author": {
        "id": 1508900
      },
      "writtenOn": "2021-08-11T04:48:55Z",
      "side": 1,
      "message": "I assume it is different type for different attribute? Why not having a struct like:\ntype InputSetting struct{\n    PhysicalKeyboardAutoCorrectionLevel AutoCorrectionLevel\n    VirtualKeyboardAutoCorrectionLevel  AutoCorrectionLevel\n    VirtualKeyboardEnableCapitalization bool\n    ...\n}\n\nAlternatively, why not simply passing a string like `{\"physicalKeyboardAutoCorrectionLevel\": 1}` or `{\"virtualKeyboardAutoCorrectionLevel\":1,\"virtualKeyboardEnableCapitalization\": false}` if there aren\u0027t many complicated settings? IIUC, what you need from the `settings` param is exactly a string. \n\nusing map[string]interface{} seems to lose readability somehow.",
      "parentUuid": "df732392_82d1f482",
      "range": {
        "startLine": 334,
        "startChar": 67,
        "endLine": 334,
        "endChar": 89
      },
      "revId": "1fc565867fa8adf728acc67b64ac399b324cf61c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04d0375c_1776f9df",
        "filename": "src/chromiumos/tast/local/chrome/ime/input_method.go",
        "patchSetId": 1
      },
      "lineNbr": 334,
      "author": {
        "id": 1395692
      },
      "writtenOn": "2021-08-11T05:00:37Z",
      "side": 1,
      "message": "Got it your point now. \nFirstly Each input method has different configuration items. It is not a fixed struct., \n\nSecondly, If we use struct, each attribute will have a zero value. e.g. 0 for int, false for boolean. Some setting items they are default to enabled (Modest for VK AC). So just try to make this function much flexible to use.",
      "parentUuid": "14305f5b_0598cf74",
      "range": {
        "startLine": 334,
        "startChar": 67,
        "endLine": 334,
        "endChar": 89
      },
      "revId": "1fc565867fa8adf728acc67b64ac399b324cf61c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8cec75b_f1787648",
        "filename": "src/chromiumos/tast/local/chrome/ime/input_method.go",
        "patchSetId": 1
      },
      "lineNbr": 334,
      "author": {
        "id": 1508900
      },
      "writtenOn": "2021-08-11T05:52:01Z",
      "side": 1,
      "message": "1, I think it might also be good to list all the items when being used, to make it clear what is supposed to be passed.\n\n2, It is basically the same thing as what you are doing here, but with more readability and less error-prone. E.g, when you pass InputSetting{PhysicalKeyboardAutoCorrectionLevel: acLevel}, json.Marshal only serializes `PhysicalKeyboardAutoCorrectionLevel` if you add annotations `json:\"omitempty\"` to the fields.\n\nFor example:\ntype A struct {\n    Field string `json:\"field,omitempty\"`\n}\n\njson.Marshal ignores Field if it is not assigned any value and uses `field` as the key in json.\n\nI personally believe interface{} can\u0027t tell much about what\u0027s supposed to be passed. \n\n+Matt to review and see if he has a better idea on this.",
      "parentUuid": "04d0375c_1776f9df",
      "range": {
        "startLine": 334,
        "startChar": 67,
        "endLine": 334,
        "endChar": 89
      },
      "revId": "1fc565867fa8adf728acc67b64ac399b324cf61c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0fdbb84_274dafa7",
        "filename": "src/chromiumos/tast/local/chrome/ime/input_method.go",
        "patchSetId": 1
      },
      "lineNbr": 343,
      "author": {
        "id": 1508900
      },
      "writtenOn": "2021-08-11T04:48:55Z",
      "side": 1,
      "message": "nit: using %q instead?",
      "range": {
        "startLine": 343,
        "startChar": 5,
        "endLine": 343,
        "endChar": 10
      },
      "revId": "1fc565867fa8adf728acc67b64ac399b324cf61c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cfb7f275_124bd7d4",
        "filename": "src/chromiumos/tast/local/chrome/ime/input_method.go",
        "patchSetId": 1
      },
      "lineNbr": 343,
      "author": {
        "id": 1395692
      },
      "writtenOn": "2021-08-11T05:00:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a0fdbb84_274dafa7",
      "range": {
        "startLine": 343,
        "startChar": 5,
        "endLine": 343,
        "endChar": 10
      },
      "revId": "1fc565867fa8adf728acc67b64ac399b324cf61c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}