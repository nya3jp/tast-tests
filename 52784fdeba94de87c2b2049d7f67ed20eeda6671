{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a42bcc50_8f3beab7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1310429
      },
      "writtenOn": "2021-01-21T18:31:09Z",
      "side": 1,
      "message": "Thanks Hiroki, appreciate the review ðŸ˜Š",
      "revId": "52784fdeba94de87c2b2049d7f67ed20eeda6671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff53caec_b08abc28",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1310429
      },
      "writtenOn": "2021-01-21T18:43:27Z",
      "side": 1,
      "message": "Adding Shuhei, since you\u0027ve helped me with related changes in the past. Thank you for taking a look when you get the chance ðŸ˜Š",
      "revId": "52784fdeba94de87c2b2049d7f67ed20eeda6671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aaaf53ec_c3eb81b5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1274627
      },
      "writtenOn": "2021-01-21T21:30:12Z",
      "side": 1,
      "message": "looks good aki!!",
      "revId": "52784fdeba94de87c2b2049d7f67ed20eeda6671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "425fcc0d_d20ecd6a",
        "filename": "src/chromiumos/tast/local/a11y/a11y.go",
        "patchSetId": 4
      },
      "lineNbr": 128,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2021-01-22T02:03:30Z",
      "side": 1,
      "message": "style: GoogleTTSConn\nhttps://github.com/golang/go/wiki/CodeReviewComments#initialisms",
      "range": {
        "startLine": 128,
        "startChar": 5,
        "endLine": 128,
        "endChar": 18
      },
      "revId": "52784fdeba94de87c2b2049d7f67ed20eeda6671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "831f4ba5_30aafd76",
        "filename": "src/chromiumos/tast/local/a11y/a11y.go",
        "patchSetId": 4
      },
      "lineNbr": 128,
      "author": {
        "id": 1310429
      },
      "writtenOn": "2021-01-23T01:06:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "425fcc0d_d20ecd6a",
      "range": {
        "startLine": 128,
        "startChar": 5,
        "endLine": 128,
        "endChar": 18
      },
      "revId": "52784fdeba94de87c2b2049d7f67ed20eeda6671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ac83ab0_eba77f02",
        "filename": "src/chromiumos/tast/local/a11y/a11y.go",
        "patchSetId": 4
      },
      "lineNbr": 153,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2021-01-22T02:03:30Z",
      "side": 1,
      "message": "It\u0027s nice to avoid establishing another connection to Chrome while chrome.Chrome already has one. I guess you wanted to use FindTargets/CloseTargets? Actually I have in-flight CL to add target-related APIs to chrome.Chrome, does it help? crrev.com/c/2636712",
      "range": {
        "startLine": 136,
        "startChar": 0,
        "endLine": 153,
        "endChar": 2
      },
      "revId": "52784fdeba94de87c2b2049d7f67ed20eeda6671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a67180c_a0af92af",
        "filename": "src/chromiumos/tast/local/a11y/a11y.go",
        "patchSetId": 4
      },
      "lineNbr": 153,
      "author": {
        "id": 1310429
      },
      "writtenOn": "2021-01-23T01:06:32Z",
      "side": 1,
      "message": "Yes, I needed to use FindTargets() and CloseTargets(), so I needed to create a new devsess. But I think your CL would be really helpful, so I can wait for it to land!\n\nJust to confirm, after your CL lands, I can just do:\n\nNewGoogleTTSConn(ctx context.Context, c *chrome.Chrome) (*GoogleTTSConn, error) {\n    targets :\u003d c.FindTargets(...)\n    ....\n    for _, t :\u003d range targets[1:] {\n        c.CloseTarget(...)\n    }\n    ...\n}",
      "parentUuid": "1ac83ab0_eba77f02",
      "range": {
        "startLine": 136,
        "startChar": 0,
        "endLine": 153,
        "endChar": 2
      },
      "revId": "52784fdeba94de87c2b2049d7f67ed20eeda6671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c217eb3_5fad2a4a",
        "filename": "src/chromiumos/tast/local/a11y/a11y.go",
        "patchSetId": 4
      },
      "lineNbr": 153,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2021-01-25T09:44:27Z",
      "side": 1,
      "message": "This CL landed.\n\nYour snippet LGTM.",
      "parentUuid": "3a67180c_a0af92af",
      "range": {
        "startLine": 136,
        "startChar": 0,
        "endLine": 153,
        "endChar": 2
      },
      "revId": "52784fdeba94de87c2b2049d7f67ed20eeda6671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c58de9e_3a700c4e",
        "filename": "src/chromiumos/tast/local/a11y/a11y.go",
        "patchSetId": 4
      },
      "lineNbr": 159,
      "author": {
        "id": 1274627
      },
      "writtenOn": "2021-01-21T21:30:12Z",
      "side": 1,
      "message": "Could you change this to 10s?\n\n(My bad for showing a link that showed 20s). But I think the default is supposed to be 20s, unless we need it to be longer (as shown in the example).",
      "range": {
        "startLine": 159,
        "startChar": 34,
        "endLine": 159,
        "endChar": 36
      },
      "revId": "52784fdeba94de87c2b2049d7f67ed20eeda6671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da40c28c_fcc6bbb2",
        "filename": "src/chromiumos/tast/local/a11y/a11y.go",
        "patchSetId": 4
      },
      "lineNbr": 159,
      "author": {
        "id": 1310429
      },
      "writtenOn": "2021-01-23T01:06:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c58de9e_3a700c4e",
      "range": {
        "startLine": 159,
        "startChar": 34,
        "endLine": 159,
        "endChar": 36
      },
      "revId": "52784fdeba94de87c2b2049d7f67ed20eeda6671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "212c44a5_c198a15c",
        "filename": "src/chromiumos/tast/local/a11y/a11y.go",
        "patchSetId": 4
      },
      "lineNbr": 164,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2021-01-22T02:03:30Z",
      "side": 1,
      "message": "It\u0027s easy to forget calling Close on every error cases. I recommend using defer statements instead.\n\nThere are two typical ways.\n\n1. Use a named return value\n\n func NewGoogleTtsConn(ctx context.Context, c *chrome.Chrome) (ttsConn *GoogleTtsConn, retErr error) {\n   ...\n   defer func() {\n     if retErr !\u003d nil {\n       extConn.Close()\n     }\n   }()\n   ...\n   return nil\n }\n\n2. Use a `success` flag\n\n func NewGoogleTtsConn(ctx context.Context, c *chrome.Chrome) (*GoogleTtsConn, error) {\n   ...\n   success :\u003d false\n   defer func() {\n     if !success {\n       extConn.Close()\n     }\n   }()\n   ...\n   success \u003d true\n   return nil\n }",
      "range": {
        "startLine": 164,
        "startChar": 2,
        "endLine": 164,
        "endChar": 17
      },
      "revId": "52784fdeba94de87c2b2049d7f67ed20eeda6671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "11e1c13e_2ee4d198",
        "filename": "src/chromiumos/tast/local/a11y/a11y.go",
        "patchSetId": 4
      },
      "lineNbr": 164,
      "author": {
        "id": 1310429
      },
      "writtenOn": "2021-01-23T01:06:32Z",
      "side": 1,
      "message": "Ah yes, thank you for reminding me (you mentioned something similar in a previous CL). I decided to use the named return value, since it seems cleaner and is what you suggested in the previous CL:\n\nhttps://chromium-review.googlesource.com/c/chromiumos/platform/tast-tests/+/2593324/4/src/chromiumos/tast/local/accessibility/accessibility.go#43",
      "parentUuid": "212c44a5_c198a15c",
      "range": {
        "startLine": 164,
        "startChar": 2,
        "endLine": 164,
        "endChar": 17
      },
      "revId": "52784fdeba94de87c2b2049d7f67ed20eeda6671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f964539_847914a8",
        "filename": "src/chromiumos/tast/local/a11y/a11y.go",
        "patchSetId": 4
      },
      "lineNbr": 184,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2021-01-22T02:03:30Z",
      "side": 1,
      "message": "I\u0027m afraid that this approach is still flaky. It assumes that we can observe all utterances by repeated calls of WaitForExpr, but IIUC nothing guarantees that.\n\nI\u0027m not sure what\u0027s the best way, but for example do you think it\u0027s possible to update the TTS extension to accumulate utterances in an array, instead of providing only a latest utterance? Then we will not suffer from this race condition.",
      "range": {
        "startLine": 184,
        "startChar": 26,
        "endLine": 184,
        "endChar": 38
      },
      "revId": "52784fdeba94de87c2b2049d7f67ed20eeda6671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ab94d6f_3b66f630",
        "filename": "src/chromiumos/tast/local/a11y/a11y.go",
        "patchSetId": 4
      },
      "lineNbr": 184,
      "author": {
        "id": 1310429
      },
      "writtenOn": "2021-01-23T01:06:32Z",
      "side": 1,
      "message": "Hmm, that\u0027s unfortunate. I\u0027m not sure it would be good to modify the source code just for tests, but what about the following approach?\n\n1. Create a New TTS conn\n2. Inject JavaScript into the TTS background page, which will populate an array with all spoken utterances. This can be done by rapidly polling engine.utterance_ and pushing to an array if it changes.\n3. Perform commands.\n4. Retrieve all spoken utterances from TTS background page.\n5. Compare actual and expected utterances.\n\nAny thoughts on this approach?",
      "parentUuid": "7f964539_847914a8",
      "range": {
        "startLine": 184,
        "startChar": 26,
        "endLine": 184,
        "endChar": 38
      },
      "revId": "52784fdeba94de87c2b2049d7f67ed20eeda6671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3acb411e_ef33d444",
        "filename": "src/chromiumos/tast/local/a11y/a11y.go",
        "patchSetId": 4
      },
      "lineNbr": 184,
      "author": {
        "id": 1001986
      },
      "writtenOn": "2021-01-24T01:28:47Z",
      "side": 1,
      "message": "This wasn\u0027t what I was suggesting offline when I said define the property.\n\nDo something like...\nwindow.testUtteranceList \u003d [];\n...\nObject.defineProperty(engine, \u0027utterance_\u0027,\n  {\n    get: () \u003d\u003e window.testUtteranceList[window.testUtteranceList.length - 1],\n    set: utterance \u003d\u003e window.testUtteranceList.push(utterance)\n  }\n);\n\nin your injected js from the test.",
      "parentUuid": "8ab94d6f_3b66f630",
      "range": {
        "startLine": 184,
        "startChar": 26,
        "endLine": 184,
        "endChar": 38
      },
      "revId": "52784fdeba94de87c2b2049d7f67ed20eeda6671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f13be538_9ac375f5",
        "filename": "src/chromiumos/tast/local/a11y/a11y.go",
        "patchSetId": 4
      },
      "lineNbr": 184,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2021-01-25T09:44:27Z",
      "side": 1,
      "message": "Yes, defining a property may resolve the race condition, though it\u0027s a bit tricky.",
      "parentUuid": "3acb411e_ef33d444",
      "range": {
        "startLine": 184,
        "startChar": 26,
        "endLine": 184,
        "endChar": 38
      },
      "revId": "52784fdeba94de87c2b2049d7f67ed20eeda6671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a30b9be_d229b7b2",
        "filename": "src/chromiumos/tast/local/a11y/a11y.go",
        "patchSetId": 4
      },
      "lineNbr": 184,
      "author": {
        "id": 1001986
      },
      "writtenOn": "2021-01-25T14:57:06Z",
      "side": 1,
      "message": "How so?\n\nJs is not racey here in the sense that it has one message loop. As long as these tests schedule this snippet of js for execution prior to any other actions (i.e. it executes the js and is notified of completion of the execution), then all other actions thereafter resulting in speech would be captured.\n\nI haven\u0027t looked at these files any closer, but likely this property definition needs to happen separately from the waiting / expected speech calls here.",
      "parentUuid": "f13be538_9ac375f5",
      "range": {
        "startLine": 184,
        "startChar": 26,
        "endLine": 184,
        "endChar": 38
      },
      "revId": "52784fdeba94de87c2b2049d7f67ed20eeda6671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c10cf103_3a620ab4",
        "filename": "src/chromiumos/tast/local/a11y/a11y.go",
        "patchSetId": 4
      },
      "lineNbr": 184,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2021-01-26T08:06:42Z",
      "side": 1,
      "message": "I didn\u0027t mean that using properties has a race condition. I said it\u0027s tricky because we still depend on internal details of TTS engine. IIUC engine.utterance_ is a private field, so I\u0027m afraid that the test can be easily broken by renaming the variable for instance.\n\nFor better stability I recommend at least making it clear in the TTS extension source code that this private field is depended by integration tests and thus it can never be renamed or deleted. Even more better way is to define an API (likely private API only for testing) in the TTS extension to provide utterances in a reliable way.\n\nOne might feel hesitant to change the product code for testing, but depending on internal details that can change at any time is usually worse than that.",
      "parentUuid": "9a30b9be_d229b7b2",
      "range": {
        "startLine": 184,
        "startChar": 26,
        "endLine": 184,
        "endChar": 38
      },
      "revId": "52784fdeba94de87c2b2049d7f67ed20eeda6671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2fbef60_088c76a9",
        "filename": "src/chromiumos/tast/local/a11y/a11y.go",
        "patchSetId": 4
      },
      "lineNbr": 184,
      "author": {
        "id": 1001986
      },
      "writtenOn": "2021-01-26T13:43:03Z",
      "side": 1,
      "message": "Got it.\n\nAki can do:\nwindow.testUtteranceList \u003d [];\nchrome.ttsEngine.addListener(utterance -\u003e testUtteranceList.push(utterance));\n\n(this is a public extension api).\n\nThe issue with adding test code especially to js prod sources is really the same argument for not adding it. In this case, my concern is that someone adds test apis which accidentally get triggered and we\u0027re queueing up all tts utterances that ever get spoken without clearing them.\nTo your point, renaming engine.utterance_ would in deed break the test, but that\u0027s exactly why we have the test to begin with I think. Renaming it to be s/utterance_/utterance seems ok to me to clarify its public usage somewhere, but I probably prefer the above two line change.\nIn test runs, we won\u0027t likely generate enough utterances for the above |testUtteranceList| to negatively impact the specific test run. During test teardown, I assume the entire environment is reset (e.g. the tts extension is unloaded).\n\nThis is all assuming these are broad integration tests. For unit style tests, I would agree with you we should introduce a test api surface onto the tts extension, but that\u0027d likely not happen in the TAST framework.\n\nThanks for helping flesh things out.",
      "parentUuid": "c10cf103_3a620ab4",
      "range": {
        "startLine": 184,
        "startChar": 26,
        "endLine": 184,
        "endChar": 38
      },
      "revId": "52784fdeba94de87c2b2049d7f67ed20eeda6671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66041563_4535725d",
        "filename": "src/chromiumos/tast/local/a11y/a11y.go",
        "patchSetId": 4
      },
      "lineNbr": 211,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2021-01-22T02:03:30Z",
      "side": 1,
      "message": "nit: I recommend relocating this method between doCommand and GoogleTTSConn so that ChromeVoxConn\u0027s methods are grouped.",
      "range": {
        "startLine": 211,
        "startChar": 25,
        "endLine": 211,
        "endChar": 49
      },
      "revId": "52784fdeba94de87c2b2049d7f67ed20eeda6671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "32e8a285_d5467aae",
        "filename": "src/chromiumos/tast/local/a11y/a11y.go",
        "patchSetId": 4
      },
      "lineNbr": 211,
      "author": {
        "id": 1310429
      },
      "writtenOn": "2021-01-23T01:06:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "66041563_4535725d",
      "range": {
        "startLine": 211,
        "startChar": 25,
        "endLine": 211,
        "endChar": 49
      },
      "revId": "52784fdeba94de87c2b2049d7f67ed20eeda6671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}