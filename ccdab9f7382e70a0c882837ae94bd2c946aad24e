{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "084211a0_c140c8a7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 15
      },
      "lineNbr": 14,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2020-10-14T21:45:42Z",
      "side": 1,
      "message": "I guess I\u0027m added mostly for this question. I\u0027m not all that familiar with PMKSA caching, but based on a little reading, it seems like this approach is correct. +CC Matthew, since he actually managed to break this test recently [1], so maybe he\u0027d have thoughts -- I believe such breakage would also be caught by this test variant too.\n\nI also wanted to say: excellent refactor! Not only is log parsing generally kind of bad to do, but this variation is checking actual DUT behavior, instead of checking for what the AP thinks. Nice!\n\n[1] https://b.corp.google.com/issues/161229810",
      "range": {
        "startLine": 12,
        "startChar": 31,
        "endLine": 14,
        "endChar": 19
      },
      "revId": "ccdab9f7382e70a0c882837ae94bd2c946aad24e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f20ab5de_77c9e4eb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1387481
      },
      "writtenOn": "2020-10-12T19:03:37Z",
      "side": 1,
      "message": "Rebased to ToT.",
      "revId": "ccdab9f7382e70a0c882837ae94bd2c946aad24e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "076dd968_df4ad57b",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/wifi_service.go",
        "patchSetId": 15
      },
      "lineNbr": 1829,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2020-10-14T21:45:42Z",
      "side": 1,
      "message": "I think I\u0027m slightly over my head on how gRPC streaming works here: what happens to receivers in cases like this? Does this get translated into a Recv() error?",
      "range": {
        "startLine": 1829,
        "startChar": 0,
        "endLine": 1829,
        "endChar": 19
      },
      "revId": "ccdab9f7382e70a0c882837ae94bd2c946aad24e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "715e4bb2_ad218136",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/wifi_service.go",
        "patchSetId": 15
      },
      "lineNbr": 1829,
      "author": {
        "id": 1387481
      },
      "writtenOn": "2020-10-15T07:36:04Z",
      "side": 1,
      "message": "When the ctx is canceled, the recv.Recv() call returns with an rpc error like \"rpc error: code \u003d DeadlineExceeded desc \u003d context deadline exceeded\", no matter what we returned here.",
      "parentUuid": "076dd968_df4ad57b",
      "range": {
        "startLine": 1829,
        "startChar": 0,
        "endLine": 1829,
        "endChar": 19
      },
      "revId": "ccdab9f7382e70a0c882837ae94bd2c946aad24e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d61336ea_32c7ceb4",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/wifi_service.go",
        "patchSetId": 15
      },
      "lineNbr": 1829,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2020-10-16T03:08:50Z",
      "side": 1,
      "message": "Great! How about for non-timeout errors, if they ever occur? (Like, line 1844, except that *should* be impossible.) I\u0027m just wondering if (like with Golang channels) there\u0027s a chance of hang, if one side tries to receive more than the sender pushed. Well, I guess no hang, if the context deadlines will be honored, but still, a timeout would be opaque if the error doesn\u0027t propagate right.\n\nSorry if I\u0027m being dense; I should probably see if I can find gRPC/Golang docs for this.",
      "parentUuid": "715e4bb2_ad218136",
      "range": {
        "startLine": 1829,
        "startChar": 0,
        "endLine": 1829,
        "endChar": 19
      },
      "revId": "ccdab9f7382e70a0c882837ae94bd2c946aad24e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8303aa5_1ebb46b0",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/wifi_service.go",
        "patchSetId": 15
      },
      "lineNbr": 1829,
      "author": {
        "id": 1387481
      },
      "writtenOn": "2020-10-16T07:22:32Z",
      "side": 1,
      "message": "Oh, the ctx been canceled is a special case because the gRPC library code is also canceled. The error returned in this function can be properly received by Recv(), while possibly wrapped with a \"rpc error: code \u003d Unknown desc \u003d \" prefix.\n\nIIUC, there should not be a hang. Recv() repeats the final error (possibly io.EOF) if one keeps calling it.\n\nHowever, it\u0027s true that we are not able to send the wrapped time out errors back to receiver. I reserved some time for it in the latest patch set.",
      "parentUuid": "d61336ea_32c7ceb4",
      "range": {
        "startLine": 1829,
        "startChar": 0,
        "endLine": 1829,
        "endChar": 19
      },
      "revId": "ccdab9f7382e70a0c882837ae94bd2c946aad24e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff5c8ca2_7ba06051",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/wifi_service.go",
        "patchSetId": 15
      },
      "lineNbr": 1829,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-10-16T08:55:42Z",
      "side": 1,
      "message": "\u003e a timeout would be opaque if the error doesn\u0027t propagate right.\n\n(Not sure if Brian is asking this part, but) I tried a little bit on this and it seems only the error string is returned to the caller side so caller is unable to identify the error better than strings.Contain.\n\nI think this makes sense as it is very hard to marshal arbitrary error type, especially, the type might not even exist in the caller binary.\n\nWe don\u0027t have similar usage so far but it might be a potential problem. One mitigation might be marshaling the error by ourselves in a wrapper.\n\n\n\u003e the ctx been canceled is a special case because the gRPC library code is also canceled\n\nI also tried this and, to my surprise, cancel does propagate to the server(DUT). The deadline works better than I expect. :)",
      "parentUuid": "c8303aa5_1ebb46b0",
      "range": {
        "startLine": 1829,
        "startChar": 0,
        "endLine": 1829,
        "endChar": 19
      },
      "revId": "ccdab9f7382e70a0c882837ae94bd2c946aad24e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "63a687b7_c5d7a4fd",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/wifi_service.go",
        "patchSetId": 15
      },
      "lineNbr": 1829,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2020-10-19T18:15:35Z",
      "side": 1,
      "message": "(I think Hsin-chen answered my question, FWIW. I also found grpc.io has some useful docs that I hadn\u0027t really read through much.)\n\n\u003e \u003e a timeout would be opaque if the error doesn\u0027t propagate right.\n\u003e \n\u003e (Not sure if Brian is asking this part, but) I tried a little bit on this and it seems only the error string is returned to the caller side so caller is unable to identify the error better than strings.Contain.\n\u003e \n\u003e I think this makes sense as it is very hard to marshal arbitrary error type, especially, the type might not even exist in the caller binary.\n\u003e \n\u003e We don\u0027t have similar usage so far but it might be a potential problem. One mitigation might be marshaling the error by ourselves in a wrapper.\n\nI wasn\u0027t so much worried about marshaling things -- just that we get some meaningful diagnostic that doesn\u0027t just say \"deadline exceeded.\"",
      "parentUuid": "ff5c8ca2_7ba06051",
      "range": {
        "startLine": 1829,
        "startChar": 0,
        "endLine": 1829,
        "endChar": 19
      },
      "revId": "ccdab9f7382e70a0c882837ae94bd2c946aad24e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2f65cc2_9ecd16f6",
        "filename": "src/chromiumos/tast/remote/bundles/cros/wifi/pmksa_caching.go",
        "patchSetId": 15
      },
      "lineNbr": 36,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2020-10-14T21:45:42Z",
      "side": 1,
      "message": "In light of stuff like [1], I wonder if we can avoid writing in fixed BSSIDs, and instead just ask the hostapd config what its randomized MAC is. That might be a little tough to get the ordering right though, since you want to establish watchers (which use AP1\u0027s BSSID) before you create (or at least before you start) AP1.\n\nOr we can wait for that other CL to settle -- we already have this same pattern elsewhere, and if we want to stop using fixed BSSIDs entirely (except for the rare case where we intentionally use the *same* one), that could be a separate cleanup. Or even skip it altogether, if we decide that fixed BSSIDs are OK in a few cases.\n\n[1] https://chromium-review.googlesource.com/c/chromiumos/platform/tast-tests/+/2469350",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 36,
        "endChar": 35
      },
      "revId": "ccdab9f7382e70a0c882837ae94bd2c946aad24e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94487013_4dad8401",
        "filename": "src/chromiumos/tast/remote/bundles/cros/wifi/pmksa_caching.go",
        "patchSetId": 15
      },
      "lineNbr": 36,
      "author": {
        "id": 1387481
      },
      "writtenOn": "2020-10-15T07:36:04Z",
      "side": 1,
      "message": "The ordering is not a big problem -- after yenlin\u0027s random BSSID CL is merged, we can simply replace `ap0BSSID \u003d \"00:11:22:33:44:55\"` to `ap0BSSID \u003d hostapd.RandomMAC()`.\n\nI guess we can have a cleanup CL to fix all of them, or if yenlin\u0027s CL is merged before this one, I can rebase and fix it immediately then.",
      "parentUuid": "b2f65cc2_9ecd16f6",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 36,
        "endChar": 35
      },
      "revId": "ccdab9f7382e70a0c882837ae94bd2c946aad24e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe490b8e_316a61d2",
        "filename": "src/chromiumos/tast/remote/bundles/cros/wifi/pmksa_caching.go",
        "patchSetId": 15
      },
      "lineNbr": 36,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2020-10-16T03:08:50Z",
      "side": 1,
      "message": "\u003e The ordering is not a big problem -- after yenlin\u0027s random BSSID CL is merged, we can simply replace `ap0BSSID \u003d \"00:11:22:33:44:55\"` to `ap0BSSID \u003d hostapd.RandomMAC()`.\n\nAh, sure, we could do that. I was thinking we could rely on the default-random MAC generated by the hostapd config, but that\u0027s only created later.\n\n\u003e I guess we can have a cleanup CL to fix all of them, or if yenlin\u0027s CL is merged before this one, I can rebase and fix it immediately then.\n\nSure, no rush -- I don\u0027t *think* this will significantly disturb promoting other WPA tests, although there a few others tests using these same fixed BSSIDs.\n\nMarking resolved for now.",
      "parentUuid": "94487013_4dad8401",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 36,
        "endChar": 35
      },
      "revId": "ccdab9f7382e70a0c882837ae94bd2c946aad24e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdb7b6d8_cb2f005f",
        "filename": "src/chromiumos/tast/remote/bundles/cros/wifi/pmksa_caching.go",
        "patchSetId": 15
      },
      "lineNbr": 193,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2020-10-14T21:45:42Z",
      "side": 1,
      "message": "nit: has",
      "range": {
        "startLine": 193,
        "startChar": 118,
        "endLine": 193,
        "endChar": 122
      },
      "revId": "ccdab9f7382e70a0c882837ae94bd2c946aad24e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f2d6183d_debd4831",
        "filename": "src/chromiumos/tast/remote/bundles/cros/wifi/pmksa_caching.go",
        "patchSetId": 15
      },
      "lineNbr": 193,
      "author": {
        "id": 1387481
      },
      "writtenOn": "2020-10-15T07:36:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bdb7b6d8_cb2f005f",
      "range": {
        "startLine": 193,
        "startChar": 118,
        "endLine": 193,
        "endChar": 122
      },
      "revId": "ccdab9f7382e70a0c882837ae94bd2c946aad24e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f37751a6_b8439977",
        "filename": "src/chromiumos/tast/remote/bundles/cros/wifi/pmksa_caching.go",
        "patchSetId": 15
      },
      "lineNbr": 194,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2020-10-14T21:45:42Z",
      "side": 1,
      "message": "I had some questions about this on CL:2443586, but I see those were already asked, with not-very-satisfying answers; I guess this makes sense for now.",
      "range": {
        "startLine": 194,
        "startChar": 0,
        "endLine": 194,
        "endChar": 131
      },
      "revId": "ccdab9f7382e70a0c882837ae94bd2c946aad24e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}