{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1db0b25d_4c93b120",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1540282
      },
      "writtenOn": "2022-06-06T22:58:39Z",
      "side": 1,
      "message": "Please review! I wanted this CL to review my idea for how we can simulate mouse movements. Once I iron out the feedback on this CL, I can have further discussions on where else we want to add this function. A potential easy candidate would probably be ArcYoutubeCUJ, where we just passively sleep for a long time while we watch the video.",
      "revId": "36650d2a1025027cccb088180c36e384cc1f6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5a65ce5e_be8ff465",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1540282
      },
      "writtenOn": "2022-06-06T22:59:15Z",
      "side": 1,
      "message": "An example of what this looks like: https://photos.app.goo.gl/szf7DzBHMwHLUwsG9",
      "revId": "36650d2a1025027cccb088180c36e384cc1f6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4482a34f_38fe9754",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000623
      },
      "writtenOn": "2022-06-07T00:10:52Z",
      "side": 1,
      "message": "Xiyuan, PTAL if you think this is a good approach",
      "revId": "36650d2a1025027cccb088180c36e384cc1f6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f78e950d_fa9748de",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1412245
      },
      "writtenOn": "2022-06-07T04:40:48Z",
      "side": 1,
      "message": "lgtm in terms of the implementation",
      "revId": "36650d2a1025027cccb088180c36e384cc1f6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06d5e54c_490209e8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1319142
      },
      "writtenOn": "2022-06-07T17:05:16Z",
      "side": 1,
      "message": "I think there are several things you can do to make the mouse movement more predictable, consistent, and controllable, yielding more useful performance data. We may want to be able to look at performance data on a timeline and easily point out parts where we know the mouse is moving more slowly and parts where we know the mouse is moving faster.\n\n1. Do not assume that (for example) 100 calls to `mouse.Move`, each with duration 100 milliseconds, will take a total of 10 seconds. If there is any processing delay, it will add up. I would write code that keeps track of the expected total elapsed time and adjusts the `mouse.Move` duration to stay on schedule.\n2. Instead of checking when the destination point is outside the display bounds, I would end the spiral trajectory when the radius has reached half the small dimension of the display bounds. This is almost the same thing but will be more predictable.\n3. Instead of r \u003d theta, let\u0027s say the mouse takes one minute to traverse the spiral, and you just interpolate r and theta like\n\tmaxR :\u003d float64(min(info.Bounds.Width, info.Bounds.Height) / 2)\n\tconst revolutionsPerSpiral \u003d 100\n\tconst maxTheta \u003d revolutionsPerSpiral * 2 * math.Pi\n\n\ta :\u003d float64(timeSinceSpiralStart) / float64(time.Minute)\n\tr :\u003d a * maxR\n\ttheta :\u003d a * maxTheta\n\n\tpoint :\u003d coords.NewPoint(\n\t\tcenter.X+int(r*math.Cos(theta)),\n\t\tcenter.Y+int(r*math.Sin(theta)),\n\t)\nThis way, the display resolution will not affect how long it takes for the mouse to spiral out from the center of the display to the boundary. I think that is more realistic, because a real user workflow might involve moving the mouse (for example) one third of the way across the display regardless of resolution. More importantly, the trajectory will be described by intuitive parameters that are easy to read and adjust.",
      "revId": "36650d2a1025027cccb088180c36e384cc1f6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "81c82948_d2f327d8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2022-06-07T20:06:46Z",
      "side": 1,
      "message": "What do we want to get out of the added mouse events?\n\nInput latency is tricky. It is measured per compositor (i.e. per viz clients). Currently, we have input latency for blink (Event.* UMA) and some ash UI latency for certain interactions (e.g. window resize). IMHO, we need to be clear what latency we are targeting for since we don\u0027t have general input latency metrics.\n\nAlso IIRC, I don\u0027t think we track input latency for mouse moves [1]. So faking mouse move might not get us latency data.\n\n[1] https://source.chromium.org/chromium/chromium/src/+/main:cc/metrics/event_metrics.h;drc\u003d1946212ac0100668f14eb9e2843bdd846e510a1e;bpv\u003d0;bpt\u003d1;l\u003d32",
      "revId": "36650d2a1025027cccb088180c36e384cc1f6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d4f82b8_8ddf45b8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1540282
      },
      "writtenOn": "2022-06-07T21:41:59Z",
      "side": 1,
      "message": "I could be wrong, but I ran the test with and without my changes, and only the one with the mouse simulation had values for \"Event.Latency.EndToEnd.Mouse.average\".\n\nDoes this alone tell us that we do track latency for mouse moves? The value was around 38 milliseconds which sounds pretty reasonable.",
      "parentUuid": "81c82948_d2f327d8",
      "revId": "36650d2a1025027cccb088180c36e384cc1f6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2179c6d5_273d3dec",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1540282
      },
      "writtenOn": "2022-06-07T21:41:59Z",
      "side": 1,
      "message": "I like the idea -- spiraling around in a fixed amount of time. However, I thought to keep the math formula \"r \u003d theta\", and vary `r` between 0 and `maxR`. This makes the math and code much simpler -- since `r` between 0 and `maxR`, then `theta` will also vary between 0 and `maxR`. Based on visual testing, I think the math is right?\n\nOverall, my code is very similar. to what you have above, just without the maxTheta variable since with r \u003d theta, maxTheta \u003d maxR.",
      "parentUuid": "06d5e54c_490209e8",
      "revId": "36650d2a1025027cccb088180c36e384cc1f6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "207980c7_d05e4121",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2022-06-07T22:25:25Z",
      "side": 1,
      "message": "I assumed ui input latency tracking code and web input latency tracking code is similar. It seems they are not since you see `Event.Latency.EndToEnd.Mouse.average`. This means web input handling code is emitting it for mouse move. And I was wrong about it.\n\nSo we want to get `Event.Latency.EndToEnd.Mouse.average` and use it to catch input latency regressions?",
      "parentUuid": "3d4f82b8_8ddf45b8",
      "revId": "36650d2a1025027cccb088180c36e384cc1f6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e343573_fc507ac6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1540282
      },
      "writtenOn": "2022-06-08T01:07:18Z",
      "side": 1,
      "message": "(For future reference based on our conversation outside this cl): Yes, we will use Event.Latency.EndToEnd.Mouse.average as an easy way of measuring latency first.",
      "parentUuid": "207980c7_d05e4121",
      "revId": "36650d2a1025027cccb088180c36e384cc1f6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb6e6c18_fb23dc29",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/mouse_simulation.go",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1000623
      },
      "writtenOn": "2022-06-07T00:10:52Z",
      "side": 1,
      "message": "Interesting idea",
      "revId": "36650d2a1025027cccb088180c36e384cc1f6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62a69cf3_c307bc6c",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/mouse_simulation.go",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1319142
      },
      "writtenOn": "2022-06-07T17:05:16Z",
      "side": 1,
      "message": "`a spiral`",
      "range": {
        "startLine": 19,
        "startChar": 44,
        "endLine": 19,
        "endChar": 50
      },
      "revId": "36650d2a1025027cccb088180c36e384cc1f6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95368eac_58813ac2",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/mouse_simulation.go",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1540282
      },
      "writtenOn": "2022-06-07T21:41:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "62a69cf3_c307bc6c",
      "range": {
        "startLine": 19,
        "startChar": 44,
        "endLine": 19,
        "endChar": 50
      },
      "revId": "36650d2a1025027cccb088180c36e384cc1f6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b343faa_67e99741",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/mouse_simulation.go",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1319142
      },
      "writtenOn": "2022-06-07T17:05:16Z",
      "side": 1,
      "message": "`Bounds`",
      "range": {
        "startLine": 31,
        "startChar": 16,
        "endLine": 31,
        "endChar": 24
      },
      "revId": "36650d2a1025027cccb088180c36e384cc1f6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "735937dd_c7ef545d",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/mouse_simulation.go",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1540282
      },
      "writtenOn": "2022-06-07T21:41:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9b343faa_67e99741",
      "range": {
        "startLine": 31,
        "startChar": 16,
        "endLine": 31,
        "endChar": 24
      },
      "revId": "36650d2a1025027cccb088180c36e384cc1f6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06c9b866_6919f794",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/mouse_simulation.go",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1319142
      },
      "writtenOn": "2022-06-07T17:05:16Z",
      "side": 1,
      "message": "By itself, this code does nothing. It should be:\n\tif err :\u003d mouse.Move(tconn, center, 0)(ctx); err !\u003d nil {\n\t\treturn errors.Wrap(err, \"failed to move mouse\")\n\t}",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 32,
        "endChar": 50
      },
      "revId": "36650d2a1025027cccb088180c36e384cc1f6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5551fe8e_741e4a7e",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/mouse_simulation.go",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1540282
      },
      "writtenOn": "2022-06-07T21:41:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "06c9b866_6919f794",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 32,
        "endChar": 50
      },
      "revId": "36650d2a1025027cccb088180c36e384cc1f6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0567fd4a_2cd19103",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/mouse_simulation.go",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1319142
      },
      "writtenOn": "2022-06-07T17:05:16Z",
      "side": 1,
      "message": "`\tfor endTime :\u003d time.Now().Add(duration); time.Now().Before(endTime); {`",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 38,
        "endChar": 44
      },
      "revId": "36650d2a1025027cccb088180c36e384cc1f6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8124b5b3_33c33a3f",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/mouse_simulation.go",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1540282
      },
      "writtenOn": "2022-06-07T21:41:59Z",
      "side": 1,
      "message": "Maybe my Go knowledge is weak, but wouldn\u0027t this constantly update endTime to be \"now + duration\" away, causing an infinite loop? Since time.Now() will always be before time.Now() + duration?\n\nUnless, \"endTime :\u003d time.Now().Add(duration)\" is only run once because of the semi colon\n\nInstead, I did the following: \n```\nendTime :\u003d time.Now().Add(duration)\nfor time.Now().Before(endTime) { }\n```",
      "parentUuid": "0567fd4a_2cd19103",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 38,
        "endChar": 44
      },
      "revId": "36650d2a1025027cccb088180c36e384cc1f6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "974a102d_576e88e6",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/mouse_simulation.go",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1540282
      },
      "writtenOn": "2022-06-08T18:02:21Z",
      "side": 1,
      "message": "Oh. I see now, I fixed it.\n```\nfor \u003cinit\u003e; \u003ccondition\u003e; {\n\n}\n```",
      "parentUuid": "8124b5b3_33c33a3f",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 38,
        "endChar": 44
      },
      "revId": "36650d2a1025027cccb088180c36e384cc1f6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb9169ec_ab2e382d",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/mouse_simulation.go",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1319142
      },
      "writtenOn": "2022-06-07T17:05:16Z",
      "side": 1,
      "message": "`Bounds`",
      "range": {
        "startLine": 43,
        "startChar": 20,
        "endLine": 43,
        "endChar": 28
      },
      "revId": "36650d2a1025027cccb088180c36e384cc1f6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2011b8ee_b899baa2",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/mouse_simulation.go",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1540282
      },
      "writtenOn": "2022-06-07T21:41:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fb9169ec_ab2e382d",
      "range": {
        "startLine": 43,
        "startChar": 20,
        "endLine": 43,
        "endChar": 28
      },
      "revId": "36650d2a1025027cccb088180c36e384cc1f6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f170d53e_0e7a6482",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/mouse_simulation.go",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1319142
      },
      "writtenOn": "2022-06-07T17:05:16Z",
      "side": 1,
      "message": "This will cause the mouse to move to the center in `deltaTime`, but I think it would be more appropriate to move the mouse to the center instantaneously. To do that without code duplication, I suggest nested `for` loops, where the outer loop terminates after `duration`, and the inner loop terminates when the mouse reaches the boundary of the display. That way, you can put `mouse.Move(tconn, center, 0)(ctx)` inside the outer loop but outside the inner loop.",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 44,
        "endChar": 17
      },
      "revId": "36650d2a1025027cccb088180c36e384cc1f6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1712e9da_5564552c",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/mouse_simulation.go",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1540282
      },
      "writtenOn": "2022-06-07T21:41:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f170d53e_0e7a6482",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 44,
        "endChar": 17
      },
      "revId": "36650d2a1025027cccb088180c36e384cc1f6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "269cfb22_3074fafa",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/mouse_simulation.go",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 1000623
      },
      "writtenOn": "2022-06-07T00:10:52Z",
      "side": 1,
      "message": "Hmm, this is going to be a pretty constant activity throughout the test, right? So basically the mouse is moving in a straight line from one point to the next in a spiral?\n\nThis might be a lot of activity on the UI thread",
      "revId": "36650d2a1025027cccb088180c36e384cc1f6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "beffc201_51de1aa5",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/mouse_simulation.go",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 1540282
      },
      "writtenOn": "2022-06-07T00:23:44Z",
      "side": 1,
      "message": "I can easily simplify it to just moving back and forth between two points, just wasn\u0027t sure if that was what we wanted with regards to getting meaningful latency data. Of course, I don\u0027t want to hurt all the test performance numbers -- I guess I didn\u0027t think moving the mouse was that performance changing.Another idea is to just increase the delta time, so we move the mouse much slower?",
      "parentUuid": "269cfb22_3074fafa",
      "revId": "36650d2a1025027cccb088180c36e384cc1f6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81327fb8_16be85f7",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/mouse_simulation.go",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 1000623
      },
      "writtenOn": "2022-06-07T00:53:23Z",
      "side": 1,
      "message": "My concern isn\u0027t about where it moves, but that mouse.Move might be generating too many UI events. Moving it slower wouldn\u0027t help with that either I think? How many mouse events are you seeing during the test?",
      "parentUuid": "beffc201_51de1aa5",
      "revId": "36650d2a1025027cccb088180c36e384cc1f6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7cf4f51_b7a33e7b",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/mouse_simulation.go",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2022-06-07T20:06:46Z",
      "side": 1,
      "message": "+1\n\nWe might need to add some sleep in the loop to throttle mouse event generation. `mouse.Move` is async. It schedules `steps` mouse events based on duration arg and `steps \u003d duration/16ms`. `deltaTime` is 100ms and each call would essentially add 6 task to UI thread. And without sleep in the loop, we could add too many pending tasks to be posed to UI thread.\n\nhttps://source.chromium.org/chromium/chromium/src/+/main:chrome/browser/chromeos/extensions/autotest_private/autotest_private_api.cc;drc\u003df1049e6453ec207217f2edd728d0543ab590a31e;l\u003d4898",
      "parentUuid": "81327fb8_16be85f7",
      "revId": "36650d2a1025027cccb088180c36e384cc1f6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72612ad2_14590783",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/mouse_simulation.go",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 1540282
      },
      "writtenOn": "2022-06-07T21:41:59Z",
      "side": 1,
      "message": "Got it, I added in sleep for throttling mouse event generation. I\u0027m not sure what is a good value for sleep -- right now I have 1 second sleep, between mouse movements, but I am open to increasing that value to what you think is best.",
      "parentUuid": "d7cf4f51_b7a33e7b",
      "revId": "36650d2a1025027cccb088180c36e384cc1f6b6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}