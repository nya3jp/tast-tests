{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "66a90a28_04126fea",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1145774
      },
      "writtenOn": "2021-02-15T07:07:05Z",
      "side": 1,
      "message": "PTALA",
      "revId": "8a671a17a7a4a24a33a4ea00a370daf67bd685ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a1dbbdb_6461e9f5",
        "filename": "src/chromiumos/tast/local/graphics/kmsvnc.go",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2021-02-16T06:09:27Z",
      "side": 1,
      "message": "the race issue is still remained.\nthere\u0027s a timing that cmd.Wait() is called (so that the terminated subprocess is collected),\nbut exited is not yet called.\nThen, Kill at L87 will be called targeting a proacess which no longer exists.\n\nThe correct way will be using raw waitpid syscall with WEXITED | WNOWAIT.\nThen, exited will be signaled without collecting process.\nOn the main thread, it again needs to call cmd.Wait() to collect the subprocess, after Kill.",
      "revId": "8a671a17a7a4a24a33a4ea00a370daf67bd685ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a515e754_6df82b1b",
        "filename": "src/chromiumos/tast/local/graphics/kmsvnc.go",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1145774
      },
      "writtenOn": "2021-02-16T08:19:12Z",
      "side": 1,
      "message": "I see. But when I tried locally I realized that only `wait4` is supported by go (both \"syscall\" and \"golang.org/x/sys/unix\") and WNOWAIT requires the `waitid` syscall. We need something like [1] but it\u0027s unsafe code.\n\nIf we really want this I guess testexec.CommandContext is a better place for implementing.\n\n[1] https://go.googlesource.com/go/+/go1.15.8/src/os/wait_waitid.go#32",
      "parentUuid": "1a1dbbdb_6461e9f5",
      "revId": "8a671a17a7a4a24a33a4ea00a370daf67bd685ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "436e13e7_3b3e439d",
        "filename": "src/chromiumos/tast/local/graphics/kmsvnc.go",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1145774
      },
      "writtenOn": "2021-02-16T08:25:24Z",
      "side": 1,
      "message": "Alternatively, I guess we can ignore the race since `os/exec.Process.Signal` already guards against simultaneous `Wait`s [1]. We don\u0027t really care when Kill fails.\n\n[1] https://go.googlesource.com/go/+/go1.15.8/src/os/exec_unix.go#73",
      "parentUuid": "a515e754_6df82b1b",
      "revId": "8a671a17a7a4a24a33a4ea00a370daf67bd685ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c8d3dfd_d8c02a31",
        "filename": "src/chromiumos/tast/local/graphics/kmsvnc.go",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2021-02-16T14:37:47Z",
      "side": 1,
      "message": "Oh, good finding.\nThen, could you remove unnecessary |exited| checking at L84 and L106?",
      "parentUuid": "436e13e7_3b3e439d",
      "revId": "8a671a17a7a4a24a33a4ea00a370daf67bd685ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d28e93e_7a7596cc",
        "filename": "src/chromiumos/tast/local/graphics/kmsvnc.go",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1145774
      },
      "writtenOn": "2021-02-17T01:05:11Z",
      "side": 1,
      "message": "Hmm. testexec.Cmd.Signal uses syscall.Kill directly in order to kill the entire process group (kill(-pid)) but os.Process.Signal doesn\u0027t provide such functionality. I guess it\u0027s still fine for us to just ignore failures though.",
      "parentUuid": "3c8d3dfd_d8c02a31",
      "revId": "8a671a17a7a4a24a33a4ea00a370daf67bd685ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "430e5ad1_943110f3",
        "filename": "src/chromiumos/tast/local/graphics/kmsvnc.go",
        "patchSetId": 2
      },
      "lineNbr": 106,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2021-02-16T06:09:27Z",
      "side": 1,
      "message": "with waitpid, this can be removed, because it is ensured that the child process is not yet corrected here, so signal SIGTERM should be ok always.",
      "revId": "8a671a17a7a4a24a33a4ea00a370daf67bd685ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1e4e951_67fabfa5",
        "filename": "src/chromiumos/tast/local/graphics/kmsvnc.go",
        "patchSetId": 2
      },
      "lineNbr": 124,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2021-02-16T06:09:27Z",
      "side": 1,
      "message": "start a goroutine waiting exited followed by cmd.Wait() here (maybe with logging), so that the process may be collected later.",
      "revId": "8a671a17a7a4a24a33a4ea00a370daf67bd685ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ae5fc37_9ee350bd",
        "filename": "src/chromiumos/tast/local/graphics/kmsvnc.go",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2021-02-16T06:09:27Z",
      "side": 1,
      "message": "and then Wait() here.",
      "revId": "8a671a17a7a4a24a33a4ea00a370daf67bd685ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}