{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8b2182b3_61b23db2",
        "filename": "src/chromiumos/tast/common/network/ip/runner.go",
        "patchSetId": 2
      },
      "lineNbr": 265,
      "author": {
        "id": 1360284
      },
      "writtenOn": "2022-05-17T21:17:42Z",
      "side": 1,
      "message": "Obviously the unit test cases pass so I must be missing something, but why are we using two \"\\\" symbols here instead of one? AFAIK, \"\\\\\" represents the literal character \"\\\", while \"\\d\" represents a decimal character. \"\\\\d\" would be a literal \"\\\" followed by a literal \"d\". Is this a different regex version or regex settings than I\u0027m used to?",
      "range": {
        "startLine": 265,
        "startChar": 42,
        "endLine": 265,
        "endChar": 44
      },
      "revId": "b8f3ffa51fe165e14d079132533e69071c224298",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cedea76d_03bf0b03",
        "filename": "src/chromiumos/tast/common/network/ip/runner.go",
        "patchSetId": 2
      },
      "lineNbr": 265,
      "author": {
        "id": 1360284
      },
      "writtenOn": "2022-05-17T21:17:42Z",
      "side": 1,
      "message": "Is this segment actually doing anything for us? The \"?\" at the end means that it isn\u0027t useful for filtering out non-matches, and it\u0027s a non-capturing sub-group so we aren\u0027t using the contents for anything. Plugging this regex into an online calculator supports my assertion, since it gives the same submatches with or without this bit. I think that the regex just correctly ignores anything past the \"@\" symbol without this stuff.",
      "range": {
        "startLine": 265,
        "startChar": 59,
        "endLine": 265,
        "endChar": 71
      },
      "revId": "b8f3ffa51fe165e14d079132533e69071c224298",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "209bf917_21ab3a30",
        "filename": "src/chromiumos/tast/common/network/ip/runner.go",
        "patchSetId": 2
      },
      "lineNbr": 265,
      "author": {
        "id": 1530777
      },
      "writtenOn": "2022-05-17T21:31:13Z",
      "side": 1,
      "message": "It\u0027s the same regex, but the regex is represented in a string so you have to escape `\\` with another `\\` to include it in the regex string to get `\\d`.",
      "parentUuid": "8b2182b3_61b23db2",
      "range": {
        "startLine": 265,
        "startChar": 42,
        "endLine": 265,
        "endChar": 44
      },
      "revId": "b8f3ffa51fe165e14d079132533e69071c224298",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "70b3dc92_004edb57",
        "filename": "src/chromiumos/tast/common/network/ip/runner.go",
        "patchSetId": 2
      },
      "lineNbr": 265,
      "author": {
        "id": 1530777
      },
      "writtenOn": "2022-05-17T21:31:13Z",
      "side": 1,
      "message": "The key here is that last `:` character. It can either look like `2: iface:` or `2: iface@alias:` so this non-capturing optional group allows for `@alias` to exist between `iface` and `:`. While the final `:` is not captured, it is used to match against the line as if it was just looking for `\\d+:\\s+([^@:]+)[@:]` it\u0027s a little less specific and I want to make sure we get the correct line.",
      "parentUuid": "cedea76d_03bf0b03",
      "range": {
        "startLine": 265,
        "startChar": 59,
        "endLine": 265,
        "endChar": 71
      },
      "revId": "b8f3ffa51fe165e14d079132533e69071c224298",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "707b5190_85efaaf6",
        "filename": "src/chromiumos/tast/common/network/ip/runner.go",
        "patchSetId": 2
      },
      "lineNbr": 265,
      "author": {
        "id": 1360284
      },
      "writtenOn": "2022-05-18T20:20:45Z",
      "side": 1,
      "message": "I still think the non-capturing group is unnecessary complexity. The whole non-capturing group `(?:@[^:]*)?` just means \"find a bunch of characters that starts with `@` until you reach `:`\". Except the previous matching group terminates on `@` or `:`, so it\u0027s actually known that the first character of this group (if it exists) must be `@` or `:`. Then, the `:` at means that we can just use a pattern with a `*` symbol and it will always end when it reaches a `:`, so we don\u0027t actually need the `[^:]`. My assertion is that the non-capturing group can be simplified to `.*` and it remains functionally equivalent, with the full regex being `^\\d+:\\s+([^@:]+).*:`. You could even upgrade it to use `^\\d+:\\s+([^@:]+)\\S*:` so it doesn\u0027t allow white-space in the alias any more. IMO this ends up being easier to understand because it avoids redundancy and avoids some regex jargon with the non-capturing group.\n\nSorry if this feels super nit-picky, but I think that regex in particular can be very difficult to understand for future readers, and it\u0027s worthwhile to simplify it to the maximum extent possible.",
      "parentUuid": "70b3dc92_004edb57",
      "range": {
        "startLine": 265,
        "startChar": 59,
        "endLine": 265,
        "endChar": 71
      },
      "revId": "b8f3ffa51fe165e14d079132533e69071c224298",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eae260f7_606444cc",
        "filename": "src/chromiumos/tast/common/network/ip/runner.go",
        "patchSetId": 2
      },
      "lineNbr": 265,
      "author": {
        "id": 1360284
      },
      "writtenOn": "2022-05-18T20:20:45Z",
      "side": 1,
      "message": "Ah, simple enough.",
      "parentUuid": "209bf917_21ab3a30",
      "range": {
        "startLine": 265,
        "startChar": 42,
        "endLine": 265,
        "endChar": 44
      },
      "revId": "b8f3ffa51fe165e14d079132533e69071c224298",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dce3c279_f54681b5",
        "filename": "src/chromiumos/tast/common/network/ip/runner.go",
        "patchSetId": 2
      },
      "lineNbr": 265,
      "author": {
        "id": 1530777
      },
      "writtenOn": "2022-05-23T19:46:38Z",
      "side": 1,
      "message": "Thanks for the comments on this, I\u0027ve simplified it to `^\\d+:\\s+([^@:]+)@?[^:]*:` which does not use a non-capturing group but has the same effect.",
      "parentUuid": "707b5190_85efaaf6",
      "range": {
        "startLine": 265,
        "startChar": 59,
        "endLine": 265,
        "endChar": 71
      },
      "revId": "b8f3ffa51fe165e14d079132533e69071c224298",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}