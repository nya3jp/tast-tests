{
  "comments": [
    {
      "key": {
        "uuid": "009c8732_2c03f174",
        "filename": "src/chromiumos/tast/local/policyutil/verify.go",
        "patchSetId": 1
      },
      "lineNbr": 237,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-05-07T08:47:26Z",
      "side": 1,
      "message": "I recommend making this function a method of DUTPolicies. Then we can use this method to extract two or more policies without calling autotestPrivate APIs.",
      "range": {
        "startLine": 237,
        "startChar": 3,
        "endLine": 237,
        "endChar": 16
      },
      "revId": "5c45300d956c921cebd012e895cdcbaf4cfdc3ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c61f94e9_d27685ab",
        "filename": "src/chromiumos/tast/local/policyutil/verify.go",
        "patchSetId": 1
      },
      "lineNbr": 237,
      "author": {
        "id": 1124166
      },
      "writtenOn": "2020-05-08T15:45:40Z",
      "side": 1,
      "message": "Done, makes sense",
      "parentUuid": "009c8732_2c03f174",
      "range": {
        "startLine": 237,
        "startChar": 3,
        "endLine": 237,
        "endChar": 16
      },
      "revId": "5c45300d956c921cebd012e895cdcbaf4cfdc3ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d1e2430_e604bd70",
        "filename": "src/chromiumos/tast/local/policyutil/verify.go",
        "patchSetId": 1
      },
      "lineNbr": 240,
      "author": {
        "id": 1197299
      },
      "writtenOn": "2020-05-06T22:26:48Z",
      "side": 1,
      "message": "where\u0027s the caller of the function?",
      "range": {
        "startLine": 240,
        "startChar": 5,
        "endLine": 240,
        "endChar": 18
      },
      "revId": "5c45300d956c921cebd012e895cdcbaf4cfdc3ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c575f4ed_e6b9b3ae",
        "filename": "src/chromiumos/tast/local/policyutil/verify.go",
        "patchSetId": 1
      },
      "lineNbr": 240,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2020-05-07T10:24:48Z",
      "side": 1,
      "message": "From your CL (1) it looks like you want to have a bit different interface:\n\n\np :\u003d policy.ArcPolicy{}\nif err :\u003d policyutil.PolicyFromDUT(ctx, tconn, \u0026p); err !\u003d nil {\n  ...\n}\n\n// here p is not empty anymore.\n\n// here you verify value.\n\n\n(1) https://chrome-internal-review.googlesource.com/c/chromeos/platform/tast-tests-private/+/2970975",
      "range": {
        "startLine": 240,
        "startChar": 64,
        "endLine": 240,
        "endChar": 86
      },
      "revId": "5c45300d956c921cebd012e895cdcbaf4cfdc3ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8902e966_969545da",
        "filename": "src/chromiumos/tast/local/policyutil/verify.go",
        "patchSetId": 1
      },
      "lineNbr": 240,
      "author": {
        "id": 1124166
      },
      "writtenOn": "2020-05-08T15:45:40Z",
      "side": 1,
      "message": "Hm, \"expected\" is needed only to unmarshall a value. Oleh, could you please clarify what you mean?",
      "parentUuid": "c575f4ed_e6b9b3ae",
      "range": {
        "startLine": 240,
        "startChar": 64,
        "endLine": 240,
        "endChar": 86
      },
      "revId": "5c45300d956c921cebd012e895cdcbaf4cfdc3ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47956a84_383191c9",
        "filename": "src/chromiumos/tast/local/policyutil/verify.go",
        "patchSetId": 1
      },
      "lineNbr": 240,
      "author": {
        "id": 1124166
      },
      "writtenOn": "2020-05-08T15:45:40Z",
      "side": 1,
      "message": "Sorry for not mentioning it here:\nhttps://chrome-internal-review.googlesource.com/c/chromeos/platform/tast-tests-private/+/2970975",
      "parentUuid": "7d1e2430_e604bd70",
      "range": {
        "startLine": 240,
        "startChar": 5,
        "endLine": 240,
        "endChar": 18
      },
      "revId": "5c45300d956c921cebd012e895cdcbaf4cfdc3ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6c396143_0210aed9",
        "filename": "src/chromiumos/tast/local/policyutil/verify.go",
        "patchSetId": 1
      },
      "lineNbr": 240,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2020-05-08T16:45:48Z",
      "side": 1,
      "message": "I was thinking maybe you are interested in filling policy structure on return. So, you can unmarshal value and put it to \"expected\" struct as value. Looks like it can be more type safe way, e.g. you know the type of expected policy \tvalue.",
      "parentUuid": "8902e966_969545da",
      "range": {
        "startLine": 240,
        "startChar": 64,
        "endLine": 240,
        "endChar": 86
      },
      "revId": "5c45300d956c921cebd012e895cdcbaf4cfdc3ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d088371d_00686fc6",
        "filename": "src/chromiumos/tast/local/policyutil/verify.go",
        "patchSetId": 1
      },
      "lineNbr": 240,
      "author": {
        "id": 1124166
      },
      "writtenOn": "2020-05-08T17:35:52Z",
      "side": 1,
      "message": "Yeah, that\u0027s a great idea.\nTried to do that, but Policy is an interface and I couldn\u0027t find a way to set UntypedV() or Val for it.",
      "parentUuid": "6c396143_0210aed9",
      "range": {
        "startLine": 240,
        "startChar": 64,
        "endLine": 240,
        "endChar": 86
      },
      "revId": "5c45300d956c921cebd012e895cdcbaf4cfdc3ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ec137a6_b57ae192",
        "filename": "src/chromiumos/tast/local/policyutil/verify.go",
        "patchSetId": 1
      },
      "lineNbr": 240,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2020-05-08T18:12:24Z",
      "side": 1,
      "message": "Proposal:\n\nSince this only needed for JSONified policies, we can think about a bit different version of this function:\n\n\nfunc (dps *DUTPolicies) UnmarshalJSON(expected policy.Policy, out interface{}) error {\n  actual, ok :\u003d dps.Chrome[expected.Name()]\n  if !ok {\n    return errors.Errorf(\"policy %s is unset\", expected.Name())\n  }\n\n  // Flag any set policies with an error value, e.g. schema violations.\n  if actual.Error !\u003d \"\" {\n    return errors.Errorf(\"policy %s has an error: %s\", expected.Name(), actual.Error)\n  }\n\n  // Policy value.\n  actualValue, err :\u003d expected.UnmarshalAs(actual.ValueJSON)\n  if err !\u003d nil {\n    return err\n  }\n\n  actualValueStr, ok :\u003d actualValue.(string)\n  if !ok {\n    return errors.Errorf(\"policy value is not a JSON\")  \n  }\n        \n  if err :\u003d json.Unmarshal([]byte(actualValueStr), out); err !\u003d nil {\n    return err\n  }\n\n  return nil\n}\n\n\nWDYT?",
      "parentUuid": "d088371d_00686fc6",
      "range": {
        "startLine": 240,
        "startChar": 64,
        "endLine": 240,
        "endChar": 86
      },
      "revId": "5c45300d956c921cebd012e895cdcbaf4cfdc3ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "737d5ea3_e9a82e00",
        "filename": "src/chromiumos/tast/local/policyutil/verify.go",
        "patchSetId": 1
      },
      "lineNbr": 248,
      "author": {
        "id": 1368736
      },
      "writtenOn": "2020-05-07T08:26:50Z",
      "side": 1,
      "message": "\"policy %s is unset\", expected.Name()",
      "range": {
        "startLine": 248,
        "startChar": 25,
        "endLine": 248,
        "endChar": 34
      },
      "revId": "5c45300d956c921cebd012e895cdcbaf4cfdc3ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1762917f_e7e97d05",
        "filename": "src/chromiumos/tast/local/policyutil/verify.go",
        "patchSetId": 1
      },
      "lineNbr": 248,
      "author": {
        "id": 1124166
      },
      "writtenOn": "2020-05-08T15:45:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "737d5ea3_e9a82e00",
      "range": {
        "startLine": 248,
        "startChar": 25,
        "endLine": 248,
        "endChar": 34
      },
      "revId": "5c45300d956c921cebd012e895cdcbaf4cfdc3ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9500c5b_783308ec",
        "filename": "src/chromiumos/tast/local/policyutil/verify.go",
        "patchSetId": 1
      },
      "lineNbr": 253,
      "author": {
        "id": 1368736
      },
      "writtenOn": "2020-05-07T08:26:50Z",
      "side": 1,
      "message": "\"policy %s error: %v\", expected.Name(), actual.Error",
      "range": {
        "startLine": 253,
        "startChar": 28,
        "endLine": 253,
        "endChar": 37
      },
      "revId": "5c45300d956c921cebd012e895cdcbaf4cfdc3ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db31bebd_5a41d53b",
        "filename": "src/chromiumos/tast/local/policyutil/verify.go",
        "patchSetId": 1
      },
      "lineNbr": 253,
      "author": {
        "id": 1124166
      },
      "writtenOn": "2020-05-08T15:45:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d9500c5b_783308ec",
      "range": {
        "startLine": 253,
        "startChar": 28,
        "endLine": 253,
        "endChar": 37
      },
      "revId": "5c45300d956c921cebd012e895cdcbaf4cfdc3ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ca2b044_91c1ed8b",
        "filename": "src/chromiumos/tast/local/policyutil/verify.go",
        "patchSetId": 1
      },
      "lineNbr": 262,
      "author": {
        "id": 1368736
      },
      "writtenOn": "2020-05-07T08:26:50Z",
      "side": 1,
      "message": "Not all policies have a string value. This does not make sense for all policies. You can return an interface{} and do the specific handling in the caller.",
      "revId": "5c45300d956c921cebd012e895cdcbaf4cfdc3ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "069e0334_e52cb515",
        "filename": "src/chromiumos/tast/local/policyutil/verify.go",
        "patchSetId": 1
      },
      "lineNbr": 262,
      "author": {
        "id": 1124166
      },
      "writtenOn": "2020-05-08T15:45:40Z",
      "side": 1,
      "message": "Good catch, done",
      "parentUuid": "8ca2b044_91c1ed8b",
      "revId": "5c45300d956c921cebd012e895cdcbaf4cfdc3ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}