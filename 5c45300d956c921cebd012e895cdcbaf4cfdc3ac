{
  "comments": [
    {
      "key": {
        "uuid": "009c8732_2c03f174",
        "filename": "src/chromiumos/tast/local/policyutil/verify.go",
        "patchSetId": 1
      },
      "lineNbr": 237,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-05-07T08:47:26Z",
      "side": 1,
      "message": "I recommend making this function a method of DUTPolicies. Then we can use this method to extract two or more policies without calling autotestPrivate APIs.",
      "range": {
        "startLine": 237,
        "startChar": 3,
        "endLine": 237,
        "endChar": 16
      },
      "revId": "5c45300d956c921cebd012e895cdcbaf4cfdc3ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d1e2430_e604bd70",
        "filename": "src/chromiumos/tast/local/policyutil/verify.go",
        "patchSetId": 1
      },
      "lineNbr": 240,
      "author": {
        "id": 1197299
      },
      "writtenOn": "2020-05-06T22:26:48Z",
      "side": 1,
      "message": "where\u0027s the caller of the function?",
      "range": {
        "startLine": 240,
        "startChar": 5,
        "endLine": 240,
        "endChar": 18
      },
      "revId": "5c45300d956c921cebd012e895cdcbaf4cfdc3ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c575f4ed_e6b9b3ae",
        "filename": "src/chromiumos/tast/local/policyutil/verify.go",
        "patchSetId": 1
      },
      "lineNbr": 240,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2020-05-07T10:24:48Z",
      "side": 1,
      "message": "From your CL (1) it looks like you want to have a bit different interface:\n\n\np :\u003d policy.ArcPolicy{}\nif err :\u003d policyutil.PolicyFromDUT(ctx, tconn, \u0026p); err !\u003d nil {\n  ...\n}\n\n// here p is not empty anymore.\n\n// here you verify value.\n\n\n(1) https://chrome-internal-review.googlesource.com/c/chromeos/platform/tast-tests-private/+/2970975",
      "range": {
        "startLine": 240,
        "startChar": 64,
        "endLine": 240,
        "endChar": 86
      },
      "revId": "5c45300d956c921cebd012e895cdcbaf4cfdc3ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "737d5ea3_e9a82e00",
        "filename": "src/chromiumos/tast/local/policyutil/verify.go",
        "patchSetId": 1
      },
      "lineNbr": 248,
      "author": {
        "id": 1368736
      },
      "writtenOn": "2020-05-07T08:26:50Z",
      "side": 1,
      "message": "\"policy %s is unset\", expected.Name()",
      "range": {
        "startLine": 248,
        "startChar": 25,
        "endLine": 248,
        "endChar": 34
      },
      "revId": "5c45300d956c921cebd012e895cdcbaf4cfdc3ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9500c5b_783308ec",
        "filename": "src/chromiumos/tast/local/policyutil/verify.go",
        "patchSetId": 1
      },
      "lineNbr": 253,
      "author": {
        "id": 1368736
      },
      "writtenOn": "2020-05-07T08:26:50Z",
      "side": 1,
      "message": "\"policy %s error: %v\", expected.Name(), actual.Error",
      "range": {
        "startLine": 253,
        "startChar": 28,
        "endLine": 253,
        "endChar": 37
      },
      "revId": "5c45300d956c921cebd012e895cdcbaf4cfdc3ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ca2b044_91c1ed8b",
        "filename": "src/chromiumos/tast/local/policyutil/verify.go",
        "patchSetId": 1
      },
      "lineNbr": 262,
      "author": {
        "id": 1368736
      },
      "writtenOn": "2020-05-07T08:26:50Z",
      "side": 1,
      "message": "Not all policies have a string value. This does not make sense for all policies. You can return an interface{} and do the specific handling in the caller.",
      "revId": "5c45300d956c921cebd012e895cdcbaf4cfdc3ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}