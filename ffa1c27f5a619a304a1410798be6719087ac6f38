{
  "comments": [
    {
      "key": {
        "uuid": "e9ff3377_a64225a2",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/start_crosvm.go",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-10-06T16:16:00Z",
      "side": 1,
      "message": "this is the only caller of MustGetSystemBus now, which makes me wonder if it\u0027s even worth adding. maybe it would be better to call dbusutil.Connect below and discard everything except the error. we\u0027ll need to also duplicate the path constant here, since Connect needs it to create the object. what do you think?",
      "revId": "ffa1c27f5a619a304a1410798be6719087ac6f38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f62dd976_bbb95c0f",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/start_crosvm.go",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2018-10-06T17:06:15Z",
      "side": 1,
      "message": "If duplicating the path is allowed, it makes sense.\n\n(Optional): Moreover, I\u0027m thinking to introduce a small wrapper struct;\n\ntype ComponentUpdater struct {\n  obj dbus.BusObject\n}\n\nfunc NewComponentUpdater(ctx context.Context) (*ComponentUpdater, error) {\n  ...\n}\n\nfunc (c *ComponentUpdater) LoadComponent(ctx context.Context, name string) (string, error) {\n  ...\n}\n\nbecause there already are two callers of LoadComponent,\nand more will come, e.g. platform_AddPrinter.py which I\u0027m looking at (not high priority, because it is not a test running in CQ, though).\n\nThen, this code can be something like;\n\n// Wait for ComponentUpdaterService is up.\n_, err :\u003d NewComponentUpdater(ctx)\n\nWDYT?\n(This may be out of scope of this CL, and I\u0027m fine with the current CL to focus on SystemBus error clean up, though).",
      "parentUuid": "e9ff3377_a64225a2",
      "revId": "ffa1c27f5a619a304a1410798be6719087ac6f38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff40fb9c_d9324b02",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/start_crosvm.go",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-10-06T17:34:13Z",
      "side": 1,
      "message": "i\u0027m actually not sure that this WaitForService call is necessary. this test doesn\u0027t call the updater directly after waiting for it, and the only place i see it used in tast-tests is mountComponentUpdater in the vm package, which is only called by vm.SetUpComponent and already waits for the service itself.\n\nso i\u0027ll just delete this. if this test becomes flaky as a result, we should update whichever piece is failing to wait for the service instead of having an indirect dependency here.",
      "parentUuid": "f62dd976_bbb95c0f",
      "revId": "ffa1c27f5a619a304a1410798be6719087ac6f38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e513cb79_c34f1e51",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/start_crosvm.go",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2018-10-07T00:49:25Z",
      "side": 1,
      "message": "Good point! SGTM. I think this looks safe, but anyway let\u0027s see the trajectory.",
      "parentUuid": "ff40fb9c_d9324b02",
      "revId": "ffa1c27f5a619a304a1410798be6719087ac6f38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6270c17_2eec8ae6",
        "filename": "src/chromiumos/tast/local/vm/vm.go",
        "patchSetId": 3
      },
      "lineNbr": 63,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2018-10-06T17:06:15Z",
      "side": 1,
      "message": "nit/style: does\n\nif _, c.ciceroneObj, err :\u003d dbusutil.Connect(...); err !\u003d nil {\n}\n\nwork?",
      "range": {
        "startLine": 62,
        "startChar": 1,
        "endLine": 63,
        "endChar": 91
      },
      "revId": "ffa1c27f5a619a304a1410798be6719087ac6f38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b12c6c68_10ebdf69",
        "filename": "src/chromiumos/tast/local/vm/vm.go",
        "patchSetId": 3
      },
      "lineNbr": 63,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-10-06T17:34:13Z",
      "side": 1,
      "message": "nope, see e.g. https://play.golang.org/p/pjhHC0PxpIi\n\nusing \u0027:\u003d\u0027 within an if condition declares new scoped variables for everything on the left side, so struct fields aren\u0027t allowed.\n\nthis is easily one of my least favorite parts of go, and a very common source of bugs. see https://play.golang.org/p/CVVb2O_3TOP",
      "parentUuid": "a6270c17_2eec8ae6",
      "range": {
        "startLine": 62,
        "startChar": 1,
        "endLine": 63,
        "endChar": 91
      },
      "revId": "ffa1c27f5a619a304a1410798be6719087ac6f38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa609e4f_20c44257",
        "filename": "src/chromiumos/tast/local/vm/vm.go",
        "patchSetId": 3
      },
      "lineNbr": 63,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-10-06T17:41:42Z",
      "side": 1,
      "message": "iirc, when i complained about this to a go team member a while back the response was to avoid using \"if x :\u003d y; ...\" in favor of \"if x \u003d y; ...\" when possible... or maybe it was to avoid the single-line if formulation altogether, and assign on one line and test on the next? i forget. :-(",
      "parentUuid": "b12c6c68_10ebdf69",
      "range": {
        "startLine": 62,
        "startChar": 1,
        "endLine": 63,
        "endChar": 91
      },
      "revId": "ffa1c27f5a619a304a1410798be6719087ac6f38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52e13747_6dce7a0c",
        "filename": "src/chromiumos/tast/local/vm/vm.go",
        "patchSetId": 3
      },
      "lineNbr": 63,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2018-10-07T00:49:25Z",
      "side": 1,
      "message": "Oh, I didn\u0027t know that. Thank you for explanation and sharing the example.\nHmm... it looks inconsistent to me, and looks like a source of confusion... :\u0027-(",
      "parentUuid": "fa609e4f_20c44257",
      "range": {
        "startLine": 62,
        "startChar": 1,
        "endLine": 63,
        "endChar": 91
      },
      "revId": "ffa1c27f5a619a304a1410798be6719087ac6f38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}