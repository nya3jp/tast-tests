{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "351e9de8_e5ba9ff5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2021-01-15T10:37:01Z",
      "side": 1,
      "message": "LGTM % comments",
      "revId": "1b52f6a2b3246a6439a3919e0b6baa5b924aef81",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90245cff_b2314710",
        "filename": "src/chromiumos/tast/local/bundles/cros/video/platform_decoding.go",
        "patchSetId": 10
      },
      "lineNbr": 114,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2021-01-15T10:37:01Z",
      "side": 1,
      "message": "Maybe it\u0027s better to siplify it a bit:\n\n\n```\nif err !\u003d nil \u0026\u0026 (testOpt.failExpected \u003d\u003d nil || !testOpt.failExpected(output)) {\n   s.Fatalf(\"%v failed unexpectedly: %v\", exec, errors.Wrap(err, string(output)))\n}\nif err \u003d\u003d nil \u0026\u0026 testOpt.failExpected !\u003d nil {\n   s.Fatalf(\"%v passed when expected to fail\", exec)\n}\n```\n\nso we will have only 1 if conditions and 0 return",
      "range": {
        "startLine": 103,
        "startChar": 0,
        "endLine": 114,
        "endChar": 79
      },
      "revId": "1b52f6a2b3246a6439a3919e0b6baa5b924aef81",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06e5f65a_2929c7fb",
        "filename": "src/chromiumos/tast/local/bundles/cros/video/platform_decoding.go",
        "patchSetId": 10
      },
      "lineNbr": 114,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2021-01-15T10:37:01Z",
      "side": 1,
      "message": "usually errors.Wrap is used to give for context about the error\n\nfor example error after wrapping can be\n\n`failed to open /dev/null: not exist`\n\n\n\nIn your case output does not explain error, so it\u0027s better to don\u0027t use Wrap, but still log both error and output separately.",
      "range": {
        "startLine": 114,
        "startChar": 46,
        "endLine": 114,
        "endChar": 57
      },
      "revId": "1b52f6a2b3246a6439a3919e0b6baa5b924aef81",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}