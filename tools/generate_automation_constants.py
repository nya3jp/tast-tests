#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright 2020 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
"""Tool for generating go code from automation.js

Used to create src/chromiumos/tast/local/chrome/ui/constants.go.

Usage example:
# ./generate_automation_constants.py \
  /path/to/chromium/src/third_party/closure_compiler/externs/automation.js > \
  /path/to/chromeos/src/platform/tast-tests/src/chromiumos/tast/local/chrome/ui/constants.go

Make sure to apply gofmt to the output of this script.

TODO(hirokisato): Currently this script reads closure compiler's definition js
file, because it's easy to parse. But the automation IDL file is the source of
truth.
"""

import sys
import re

HEADER = """\
// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is generated by `tools/generate_automation_constants.py`.

package ui
"""

# Some hardcorded attributes.
FOOTER = """\
// CheckedState describes the checked state of a chrome.automation AutomationNode.
type CheckedState string

// As defined in https://chromium.googlesource.com/chromium/src/+/refs/heads/master/extensions/common/api/automation.idl
const (
\tCheckedStateTrue  CheckedState = "true"
\tCheckedStateFalse CheckedState = "false"
\tCheckedStateMixed CheckedState = "mixed"
)
"""


def to_camel_case(snake_case_str):
  """Converts a SNAKE_CASE string into a CamelCase string."""
  return ''.join(s.lower().title() for s in snake_case_str.split('_'))


def print_definitions(lines, defined_type_name, go_type_name, description):
  """Prints generated Golang type definitions.

  Args:
    lines: List of strings that is read from a js file.
    defined_type_name: Enum type name in a source file which is parsed here.
    go_type_name: Enum type name to be generated as Golang definition.
    description: A string that is used to generate a Go doc comment.
  """
  item_pattern = re.compile(r'\s*(\w*):\s\'(\w*)\'')
  defs = []
  reading = False
  for l in lines:
    if reading:
      match = item_pattern.match(l)
      if not match:
        reading = False
        break
      defs.append((to_camel_case(match.group(1)), match.group(2)))
    elif l.startswith('chrome.automation.%s' % defined_type_name):
      reading = True

  print('// %s describes %s.' % (go_type_name, description))
  print('type %s string' % go_type_name)
  print()
  print(
      '// As defined in https://chromium.googlesource.com/chromium/src/+/refs/heads/master/extensions/common/api/automation.idl'
  )
  print('const (')

  for r in defs:
    print('\t%s%s %s = "%s"' % (defined_type_name, r[0], go_type_name, r[1]))

  print(')')
  print()


def main(argv):
  f = open(argv[1], 'r')
  lines = f.readlines()
  f.close()

  print(HEADER)
  print_definitions(lines, 'StateType', 'StateType',
                    'characteristics of a chrome.automation AutomationNode')
  print_definitions(lines, 'RoleType', 'RoleType',
                    'the purpose of a chrome.automation AutomationNode')
  print_definitions(lines, 'EventType', 'EventType',
                    'the type of a chrome.automation AutomationEvent')
  print_definitions(
      lines, 'Restriction', 'RestrictionState',
      'the restriction state of a chrome.automation AutomationNode')
  print(FOOTER)


if __name__ == '__main__':
  main(sys.argv)
