{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0d343686_fece8a3b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1001646
      },
      "writtenOn": "2022-05-25T10:15:37Z",
      "side": 1,
      "message": "Adding chinglin@ in case he has some insights to share.",
      "revId": "8ff77d2fd49e78a17ae63363ea7849d5310870c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99f0427b_b1ee0aa0",
        "filename": "src/chromiumos/tast/local/profiler/perf.go",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2022-05-26T08:23:00Z",
      "side": 1,
      "message": "Can you export this type? We export its values below, but sometimes they\u0027re difficult to use when the type is unexported.\n\nFor example, we cannot write a function that returns perfRecordSamplingType according to an argument, like:\n\n```\npackage some_other_package\n\nfunc SamplingTypeByName(name string) profiler.perfRecordSamplingType // error!\n```",
      "range": {
        "startLine": 59,
        "startChar": 5,
        "endLine": 59,
        "endChar": 27
      },
      "revId": "8ff77d2fd49e78a17ae63363ea7849d5310870c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3eb5c305_f6016eda",
        "filename": "src/chromiumos/tast/local/profiler/perf.go",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1347075
      },
      "writtenOn": "2022-05-27T07:57:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "99f0427b_b1ee0aa0",
      "range": {
        "startLine": 59,
        "startChar": 5,
        "endLine": 59,
        "endChar": 27
      },
      "revId": "8ff77d2fd49e78a17ae63363ea7849d5310870c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b49c332_e127952b",
        "filename": "src/chromiumos/tast/local/profiler/perf.go",
        "patchSetId": 4
      },
      "lineNbr": 88,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2022-05-26T08:23:00Z",
      "side": 1,
      "message": "This struct has got many members but only a few of them are valid at a time.\n\nFor better compile-time safety, I\u0027d suggest splitting it to multiple structs that hold only valid fields for a particular mode.\n\nExample:\n\n```\ntype PerfOpts struct {\n  // Exactly one of these fields is non-nil.\n  record *perfRecordOpts\n  statRecord *perfStatRecordOpts\n  stat *perfStatOpts\n  sched *perfSchedOpts\n}\n```",
      "range": {
        "startLine": 88,
        "startChar": 5,
        "endLine": 88,
        "endChar": 13
      },
      "revId": "8ff77d2fd49e78a17ae63363ea7849d5310870c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c962caaa_48861f06",
        "filename": "src/chromiumos/tast/local/profiler/perf.go",
        "patchSetId": 4
      },
      "lineNbr": 88,
      "author": {
        "id": 1347075
      },
      "writtenOn": "2022-05-27T07:57:02Z",
      "side": 1,
      "message": "Good point. Thanks for the suggestion.",
      "parentUuid": "0b49c332_e127952b",
      "range": {
        "startLine": 88,
        "startChar": 5,
        "endLine": 88,
        "endChar": 13
      },
      "revId": "8ff77d2fd49e78a17ae63363ea7849d5310870c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d134a873_221243ee",
        "filename": "src/chromiumos/tast/local/profiler/perf.go",
        "patchSetId": 4
      },
      "lineNbr": 209,
      "author": {
        "id": 1001646
      },
      "writtenOn": "2022-05-25T10:15:37Z",
      "side": 1,
      "message": "In many other places we use sampling frequency (with `-F`) to throttle the perf sampling rate. Since `cycles` can be varying, depending on the use-case the `-F` can be a better representation of the system state than `-c`, as you\u0027ll get fewer samples with `-c` if the CPU is sleeping or running at low frequency.\n\nThe default frequency perf uses is 4000 and we often use 499. For example this is the command we use to capture perf data in feedback report:\nhttps://source.chromium.org/chromiumos/chromiumos/codesearch/+/main:src/platform2/debugd/src/log_tool.cc;drc\u003d93df5034a52481f2113511a3ea7fa55263f857f5;l\u003d653\n\nNot to say we shouldn\u0027t add `-c` here. I just want to see if `-F` would be a useful arg to support.",
      "range": {
        "startLine": 207,
        "startChar": 0,
        "endLine": 209,
        "endChar": 3
      },
      "revId": "8ff77d2fd49e78a17ae63363ea7849d5310870c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8ee89d1_9528f3e0",
        "filename": "src/chromiumos/tast/local/profiler/perf.go",
        "patchSetId": 4
      },
      "lineNbr": 209,
      "author": {
        "id": 1347075
      },
      "writtenOn": "2022-05-26T06:15:55Z",
      "side": 1,
      "message": "That\u0027s an interesting point. I never heard about it.\nCWP team uses only the `-c` option in the field: https://source.chromium.org/chromium/chromium/src/+/main:chrome/browser/metrics/perf/perf_events_collector.cc;l\u003d134-192;drc\u003dbdd68018e8248518e988b1ee5515cd34b96ef8b3\nIt could be because they intentionally want to collect less samples and hence have lower overhead on slower devices.\n\nThinking about \"running at low frequency\". If the CPU frequency drops by some reason the same workload (for example a benchmark) will take longer to execute. Profiles with `-c` will have approximately the same size and will inflate with `-F`.\nOn the other hand, tests with the fixed duration will benefit from `-F`.\n\nI think there are different use cases for `-c` and `-F` and maybe it makes sense to support both.",
      "parentUuid": "d134a873_221243ee",
      "range": {
        "startLine": 207,
        "startChar": 0,
        "endLine": 209,
        "endChar": 3
      },
      "revId": "8ff77d2fd49e78a17ae63363ea7849d5310870c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}