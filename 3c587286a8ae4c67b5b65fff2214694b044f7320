{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6f594edc_077bad85",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2021-08-12T07:15:15Z",
      "side": 1,
      "message": "Drive-by.\n",
      "revId": "3c587286a8ae4c67b5b65fff2214694b044f7320",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2cc6aa4f_c082098c",
        "filename": "src/chromiumos/tast/local/bundles/cros/health/utils/utils.go",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2021-08-09T13:56:29Z",
      "side": 1,
      "message": "If you want to keep this method, it should be well unit tested.",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 60,
        "endChar": 47
      },
      "revId": "3c587286a8ae4c67b5b65fff2214694b044f7320",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96b5c71a_3dfac24e",
        "filename": "src/chromiumos/tast/local/bundles/cros/health/utils/utils.go",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2021-08-12T07:15:15Z",
      "side": 1,
      "message": "I strongly recommend using github.com/google/go-cmp/cmp for comparison. It\u0027s battle-tested, customizable, and diffs are readable.\n\n if diff :\u003d cmp.Diff(got, want); diff !\u003d \"\" { ... }",
      "parentUuid": "2cc6aa4f_c082098c",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 60,
        "endChar": 47
      },
      "revId": "3c587286a8ae4c67b5b65fff2214694b044f7320",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21aed3ca_a3baed7c",
        "filename": "src/chromiumos/tast/local/bundles/cros/health/utils/utils.go",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 1240396
      },
      "writtenOn": "2021-08-13T07:37:37Z",
      "side": 1,
      "message": "Sure, thanks for the info. I will try it out.",
      "parentUuid": "96b5c71a_3dfac24e",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 60,
        "endChar": 47
      },
      "revId": "3c587286a8ae4c67b5b65fff2214694b044f7320",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3168a0b_19df37f9",
        "filename": "src/chromiumos/tast/local/bundles/cros/health/utils/utils.go",
        "patchSetId": 3
      },
      "lineNbr": 70,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2021-08-12T07:15:15Z",
      "side": 1,
      "message": "Output parameters are rare in Go, and it\u0027s even more rare when it comes to errors (actually I have never seen such usage before). It\u0027s idiomatic to return an error as multiple return values.\nhttps://golang.org/doc/effective_go#multiple-returns\n\nAlso we should return string as a value. Copying a string does not copy memory region.\nhttps://github.com/golang/go/wiki/CodeReviewComments#pass-values\n\nIn the end, the signature will be:\n\n func ReadFile(fpath string) (string, error)",
      "range": {
        "startLine": 70,
        "startChar": 28,
        "endLine": 70,
        "endChar": 41
      },
      "revId": "3c587286a8ae4c67b5b65fff2214694b044f7320",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b4732ea_d316ed8d",
        "filename": "src/chromiumos/tast/local/bundles/cros/health/utils/utils.go",
        "patchSetId": 3
      },
      "lineNbr": 70,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2021-08-12T10:55:48Z",
      "side": 1,
      "message": "This was my idea to try avoid a lot of boilerplate in error checking:\nhttps://chromium-review.googlesource.com/c/chromiumos/platform/tast-tests/+/3066791/3..5/src/chromiumos/tast/local/bundles/cros/health/probe_system_info_v2.go#190\n\nWe have to either do smth like:\n\n```\n\tif err :\u003d utils.CompareStringPtrWithFile(path.Join(dmi, \"bios_vendor\"), info.BiosVendor); err !\u003d nil {\n\t\treturn errors.Wrap(err, \"BiosVendor\")\n\t}\n\tif err :\u003d utils.CompareStringPtrWithFile(path.Join(dmi, \"bios_version\"), info.BiosVersion); err !\u003d nil {\n\t\treturn errors.Wrap(err, \"BiosVersion\")\n\t}\n\tif err :\u003d utils.CompareStringPtrWithFile(path.Join(dmi, \"board_name\"), info.BoardName); err !\u003d nil {\n\t\treturn errors.Wrap(err, \"BoardName\")\n\t}\n\tif err :\u003d utils.CompareStringPtrWithFile(path.Join(dmi, \"board_vendor\"), info.BoardVender); err !\u003d nil {\n\t\treturn errors.Wrap(err, \"BoardVender\")\n\t}\n\tif err :\u003d utils.CompareStringPtrWithFile(path.Join(dmi, \"board_version\"), info.BoardVersion); err !\u003d nil {\n\t\treturn errors.Wrap(err, \"BoardVersion\")\n\t}\n\n``` \n\nor \n\n```\n\tvar err error\n\te :\u003d dmiInfo{\n\t\tBiosVendor:     utils.ReadFile(path.Join(dmi, \"bios_vendor\"), errOut),\n\t\tBiosVersion:    utils.ReadFile(path.Join(dmi, \"bios_version\"), errOut),\n\t\tBoardName:      utils.ReadFile(path.Join(dmi, \"board_name\"), errOut),\n\t\tBoardVender:    utils.ReadFile(path.Join(dmi, \"board_vendor\"), errOut),\n\t\tBoardVersion:   utils.ReadFile(path.Join(dmi, \"board_version\"), errOut),\n\t}\n\tif err !\u003d nil {\n\t\t// handler error\n\t}\n```",
      "parentUuid": "e3168a0b_19df37f9",
      "range": {
        "startLine": 70,
        "startChar": 28,
        "endLine": 70,
        "endChar": 41
      },
      "revId": "3c587286a8ae4c67b5b65fff2214694b044f7320",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2270c67b_5121ebb1",
        "filename": "src/chromiumos/tast/local/bundles/cros/health/utils/utils.go",
        "patchSetId": 3
      },
      "lineNbr": 70,
      "author": {
        "id": 1240396
      },
      "writtenOn": "2021-08-13T07:37:37Z",
      "side": 1,
      "message": "For the string part, the *string is for optional string field. The json lib use pointer to parse optional json fields. Return *string so if the file doesn\u0027t exist the expected value will be nil.\n\nOr maybe there is any other thing which can represent optional string in golang?",
      "parentUuid": "2b4732ea_d316ed8d",
      "range": {
        "startLine": 70,
        "startChar": 28,
        "endLine": 70,
        "endChar": 41
      },
      "revId": "3c587286a8ae4c67b5b65fff2214694b044f7320",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}