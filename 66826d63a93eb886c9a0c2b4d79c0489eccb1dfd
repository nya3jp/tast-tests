{
  "comments": [
    {
      "key": {
        "uuid": "c2c49210_4cbe68e9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1345639
      },
      "writtenOn": "2020-07-17T22:57:25Z",
      "side": 1,
      "message": "Ready for review but not ready for landing",
      "revId": "66826d63a93eb886c9a0c2b4d79c0489eccb1dfd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "71cf86b6_e7550bb5",
        "filename": "src/chromiumos/tast/local/bundles/cros/firmware/data/fpmcu-unittest-bloonchipper-rsa-20200717.bin.external",
        "patchSetId": 2
      },
      "lineNbr": 5,
      "author": {
        "id": 1314845
      },
      "writtenOn": "2020-07-22T17:12:54Z",
      "side": 1,
      "message": "I think this will be good for prototyping that the flashing and test execution part works.\n\nDid you have any thoughts on how this would work for testing a commit in the CQ?\n\nIt looks like the external data files requires Tast to know about the names in advance: https://chromium.googlesource.com/chromiumos/platform/tast-tests/+/refs/heads/master/src/chromiumos/tast/local/bundles/cros/example/data_files.go#39\n\nI think it should be straightforward to have our custom builder would build the firmware at a given commit and upload the firmware artifacts to GS, but we still need Tast to be able to fetch those artifacts.\n\nIt looks like Tast has some concept of fetching build artifacts, but the comment says that it can only fetch them from an official build: https://chromium.googlesource.com/chromiumos/platform/tast-tests/+/refs/heads/master/src/chromiumos/tast/local/bundles/cros/example/artifact_files.go#25. I think we will need to ask the Tast team for some advice on how to fetch artifacts from a CQ (unofficial) build.",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 5,
        "endChar": 1
      },
      "revId": "66826d63a93eb886c9a0c2b4d79c0489eccb1dfd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ab93615_db7cc9ed",
        "filename": "src/chromiumos/tast/local/bundles/cros/firmware/fpmcu_unittest.go",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1345639
      },
      "writtenOn": "2020-07-17T22:57:25Z",
      "side": 1,
      "message": "Tom, will we be able to pack all unittests for bloonchipper into one binary? Will it fit in size? And should we check in Makefile code to build this all-in-one test binary?",
      "range": {
        "startLine": 31,
        "startChar": 46,
        "endLine": 31,
        "endChar": 49
      },
      "revId": "66826d63a93eb886c9a0c2b4d79c0489eccb1dfd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77c3da87_b8d6121c",
        "filename": "src/chromiumos/tast/local/bundles/cros/firmware/fpmcu_unittest.go",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1314845
      },
      "writtenOn": "2020-07-22T17:12:54Z",
      "side": 1,
      "message": "We may be able to do this eventually, but for now I think it will be easier to keep them as separate binaries since we know that works.",
      "parentUuid": "3ab93615_db7cc9ed",
      "range": {
        "startLine": 31,
        "startChar": 46,
        "endLine": 31,
        "endChar": 49
      },
      "revId": "66826d63a93eb886c9a0c2b4d79c0489eccb1dfd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7429c5ff_0acf781f",
        "filename": "src/chromiumos/tast/local/bundles/cros/firmware/fpmcu_unittest.go",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1345639
      },
      "writtenOn": "2020-07-17T22:57:25Z",
      "side": 1,
      "message": "We should probably include the EC commit that the binary is built from.",
      "range": {
        "startLine": 48,
        "startChar": 86,
        "endLine": 48,
        "endChar": 94
      },
      "revId": "66826d63a93eb886c9a0c2b4d79c0489eccb1dfd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8c64344_f9b44abb",
        "filename": "src/chromiumos/tast/local/bundles/cros/firmware/fpmcu_unittest.go",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1314845
      },
      "writtenOn": "2020-07-22T17:12:54Z",
      "side": 1,
      "message": "Yes, that would be good.",
      "parentUuid": "7429c5ff_0acf781f",
      "range": {
        "startLine": 48,
        "startChar": 86,
        "endLine": 48,
        "endChar": 94
      },
      "revId": "66826d63a93eb886c9a0c2b4d79c0489eccb1dfd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec11e1dc_51a2d2fc",
        "filename": "src/chromiumos/tast/local/bundles/cros/firmware/fpmcu_unittest.go",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1345639
      },
      "writtenOn": "2020-07-17T22:57:25Z",
      "side": 1,
      "message": "This argument can be extracted from the DUT or from the image file name.",
      "range": {
        "startLine": 49,
        "startChar": 55,
        "endLine": 49,
        "endChar": 75
      },
      "revId": "66826d63a93eb886c9a0c2b4d79c0489eccb1dfd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}