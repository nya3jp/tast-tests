{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "65fa5ec5_109671e8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1403852
      },
      "writtenOn": "2021-07-08T04:59:47Z",
      "side": 1,
      "message": "Thanks for reviewing!\n\nWe might use different accounts for tast-test(ie. \"arc.childUser\" and \"unicorn.ChildUser\"). Maybe adding the variable PolicyUser to policy_blob.go would be cleaner.",
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b086b823_0693e3ec",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1351120
      },
      "writtenOn": "2021-07-09T23:30:10Z",
      "side": 1,
      "message": "Yes, we\u0027ll probably end up using a different account for ARC tests. \n\nPolicyBlob already has a variable called PolicyUser.",
      "parentUuid": "65fa5ec5_109671e8",
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f68bafcd_b035b7c7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1403852
      },
      "writtenOn": "2021-07-13T00:36:42Z",
      "side": 1,
      "message": "Thank you for replies!!!\n\nNo updates for CL. \nJust reply for some confusion first. ðŸ˜Š",
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc2b0e37_4744ce68",
        "filename": "src/chromiumos/tast/common/policy/fakedms/policy_blob.go",
        "patchSetId": 10
      },
      "lineNbr": 26,
      "author": {
        "id": 1351120
      },
      "writtenOn": "2021-07-09T23:30:10Z",
      "side": 1,
      "message": "Not needed.",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 26,
        "endChar": 34
      },
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3813506_9e7fe62d",
        "filename": "src/chromiumos/tast/common/policy/fakedms/policy_blob.go",
        "patchSetId": 10
      },
      "lineNbr": 83,
      "author": {
        "id": 1351120
      },
      "writtenOn": "2021-07-09T23:30:10Z",
      "side": 1,
      "message": "I don\u0027t think a change is needed here. You can modify the returned policy blob afterwards.",
      "range": {
        "startLine": 83,
        "startChar": 2,
        "endLine": 83,
        "endChar": 31
      },
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "465757f1_ce7e7890",
        "filename": "src/chromiumos/tast/common/policy/fakedms/policy_blob.go",
        "patchSetId": 10
      },
      "lineNbr": 83,
      "author": {
        "id": 1403852
      },
      "writtenOn": "2021-07-13T00:36:42Z",
      "side": 1,
      "message": "NewPolicyBlob() is used in policyutil[1] and fakedms fixture[2].\n\nIt has at least 2 benefits to change here:\n1 We could use policyutil.ServeAndVerify() for child account with no change for policyutil[1]. Otherwise, we need to be very careful when using policyutil. For example, ServeAndVerify(), ResetChrome() or ServeAndRefresh() should not be used directly. The only thing work is ServeBlobAndRefresh(). For ResetChrome(), We may need a work around. When people write child account policy test, they don\u0027t need to learn which function in policyutil works, and they could just follow other policy tests in tast.\n\n2 Keep a global policyUser account so that no need to updates the return of NewPolicyBlob() every time. In the fakedms fixture[2], we might not able to pass testing.FixtState to Reset() so that we might need to find other way to retrieve user account and then update the returned of NewPolicyBlob(). \n\n\n[1] http://cs/chromeos_public/src/platform/tast-tests/src/chromiumos/tast/local/policyutil/policyutil.go?l\u003d33\u0026rcl\u003dae0a459f8cb291bfe36ef3fce44573d90ba50b27\n[2] http://cs/chromeos_public/src/platform/tast-tests/src/chromiumos/tast/local/policyutil/fixtures/fakedms.go?l\u003d109\u0026rcl\u003d03b1d8d64180a8e6f5c073c683cd3ba070adf1f8",
      "parentUuid": "d3813506_9e7fe62d",
      "range": {
        "startLine": 83,
        "startChar": 2,
        "endLine": 83,
        "endChar": 31
      },
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9a2d567_76f0aa8e",
        "filename": "src/chromiumos/tast/common/policy/fakedms/policy_blob.go",
        "patchSetId": 10
      },
      "lineNbr": 83,
      "author": {
        "id": 1368736
      },
      "writtenOn": "2021-07-13T10:02:09Z",
      "side": 1,
      "message": "I\u0027m strongly against using a global here and changing it between tests. It will make reasoning about tests very difficult as this is never done in tast.\n\nSince child accounts are a special case, I don\u0027t mind if not all of the existing functions work as expected (but still work as designed).",
      "parentUuid": "465757f1_ce7e7890",
      "range": {
        "startLine": 83,
        "startChar": 2,
        "endLine": 83,
        "endChar": 31
      },
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75563596_03540897",
        "filename": "src/chromiumos/tast/local/bundles/cros/familylink/policy_login.go",
        "patchSetId": 10
      },
      "lineNbr": 26,
      "author": {
        "id": 1351120
      },
      "writtenOn": "2021-07-09T23:30:10Z",
      "side": 1,
      "message": "The fixture run time is not included in the test timeout, so you can remove this.",
      "range": {
        "startLine": 26,
        "startChar": 16,
        "endLine": 26,
        "endChar": 39
      },
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7ade1de_580b6cec",
        "filename": "src/chromiumos/tast/local/bundles/cros/familylink/policy_login.go",
        "patchSetId": 10
      },
      "lineNbr": 37,
      "author": {
        "id": 1351120
      },
      "writtenOn": "2021-07-09T23:30:10Z",
      "side": 1,
      "message": "Test different values for the policy like this test [1], and verify safe search is actually enabled or disabled. However, don\u0027t copy and paste the code to avoid duplication. Create a library function in a new file in src/platform/tast-tests/src/chromiumos/tast/local/policyutil/ to share the test logic.\n\n[1] https://osscs.corp.google.com/chromiumos/chromiumos/codesearch/+/main:src/platform/tast-tests/src/chromiumos/tast/local/bundles/cros/policy/force_google_safe_search.go;l\u003d19?q\u003dForceGoogleSafeSearch",
      "range": {
        "startLine": 37,
        "startChar": 37,
        "endLine": 37,
        "endChar": 41
      },
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64f950d7_82b038d5",
        "filename": "src/chromiumos/tast/local/bundles/cros/familylink/policy_login.go",
        "patchSetId": 10
      },
      "lineNbr": 37,
      "author": {
        "id": 1368736
      },
      "writtenOn": "2021-07-12T08:10:04Z",
      "side": 1,
      "message": "Verify below does check if the policy is set.",
      "parentUuid": "a7ade1de_580b6cec",
      "range": {
        "startLine": 37,
        "startChar": 37,
        "endLine": 37,
        "endChar": 41
      },
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58f17cce_41ab0fdf",
        "filename": "src/chromiumos/tast/local/bundles/cros/familylink/policy_login.go",
        "patchSetId": 10
      },
      "lineNbr": 37,
      "author": {
        "id": 1351120
      },
      "writtenOn": "2021-07-12T18:34:23Z",
      "side": 1,
      "message": "I still think it\u0027s useful to have a version of the ForceGoogleSafeSearch test for Unicorn users, considering how important safe search is for this type of users.",
      "parentUuid": "64f950d7_82b038d5",
      "range": {
        "startLine": 37,
        "startChar": 37,
        "endLine": 37,
        "endChar": 41
      },
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec047c94_22cfbe46",
        "filename": "src/chromiumos/tast/local/bundles/cros/familylink/policy_login.go",
        "patchSetId": 10
      },
      "lineNbr": 47,
      "author": {
        "id": 1351120
      },
      "writtenOn": "2021-07-09T23:30:10Z",
      "side": 1,
      "message": "Nit: were or just remove this word.",
      "range": {
        "startLine": 47,
        "startChar": 27,
        "endLine": 47,
        "endChar": 30
      },
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ec2bdf7_89582166",
        "filename": "src/chromiumos/tast/local/chrome/familylink/fixture.go",
        "patchSetId": 10
      },
      "lineNbr": 162,
      "author": {
        "id": 1351120
      },
      "writtenOn": "2021-07-09T23:30:10Z",
      "side": 1,
      "message": "Nit: extra space",
      "range": {
        "startLine": 162,
        "startChar": 30,
        "endLine": 162,
        "endChar": 32
      },
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92330554_da297e58",
        "filename": "src/chromiumos/tast/local/chrome/familylink/fixture.go",
        "patchSetId": 10
      },
      "lineNbr": 173,
      "author": {
        "id": 1403852
      },
      "writtenOn": "2021-07-08T04:59:47Z",
      "side": 1,
      "message": "Not used anywhere. I will update it in the next patch.",
      "range": {
        "startLine": 173,
        "startChar": 1,
        "endLine": 173,
        "endChar": 13
      },
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d770de59_b5ebeddf",
        "filename": "src/chromiumos/tast/local/chrome/familylink/fixture.go",
        "patchSetId": 10
      },
      "lineNbr": 190,
      "author": {
        "id": 1351120
      },
      "writtenOn": "2021-07-09T23:30:10Z",
      "side": 1,
      "message": "How do you pull two values out of this cast? Does the bool isFLPolicytTest just mean that fdms is not null?",
      "range": {
        "startLine": 190,
        "startChar": 1,
        "endLine": 190,
        "endChar": 59
      },
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68650330_67f8a464",
        "filename": "src/chromiumos/tast/local/chrome/familylink/fixture.go",
        "patchSetId": 10
      },
      "lineNbr": 190,
      "author": {
        "id": 1368736
      },
      "writtenOn": "2021-07-12T08:10:04Z",
      "side": 1,
      "message": "The second flag indicates whether the cast is successful. It will panic for an unsuccessful cast otherwise.",
      "parentUuid": "d770de59_b5ebeddf",
      "range": {
        "startLine": 190,
        "startChar": 1,
        "endLine": 190,
        "endChar": 59
      },
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "39e494b6_63245890",
        "filename": "src/chromiumos/tast/local/chrome/familylink/fixture.go",
        "patchSetId": 10
      },
      "lineNbr": 190,
      "author": {
        "id": 1351120
      },
      "writtenOn": "2021-07-12T18:34:23Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "68650330_67f8a464",
      "range": {
        "startLine": 190,
        "startChar": 1,
        "endLine": 190,
        "endChar": 59
      },
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a47ea40_247a5b45",
        "filename": "src/chromiumos/tast/local/chrome/familylink/fixture.go",
        "patchSetId": 10
      },
      "lineNbr": 194,
      "author": {
        "id": 1351120
      },
      "writtenOn": "2021-07-09T23:30:10Z",
      "side": 1,
      "message": "Doesn\u0027t fixtures/fakedms.go already do this Ping in SetUp() on line 107? So is this duplicate call needed?",
      "range": {
        "startLine": 192,
        "startChar": 2,
        "endLine": 194,
        "endChar": 3
      },
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34653932_5d758836",
        "filename": "src/chromiumos/tast/local/chrome/familylink/fixture.go",
        "patchSetId": 10
      },
      "lineNbr": 194,
      "author": {
        "id": 1368736
      },
      "writtenOn": "2021-07-12T08:10:04Z",
      "side": 1,
      "message": "Ping is cheap ðŸ˜Š. I don\u0027t mind this liveness check.",
      "parentUuid": "6a47ea40_247a5b45",
      "range": {
        "startLine": 192,
        "startChar": 2,
        "endLine": 194,
        "endChar": 3
      },
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "52b39935_2a7185f0",
        "filename": "src/chromiumos/tast/local/chrome/familylink/fixture.go",
        "patchSetId": 10
      },
      "lineNbr": 194,
      "author": {
        "id": 1351120
      },
      "writtenOn": "2021-07-12T18:34:23Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "34653932_5d758836",
      "range": {
        "startLine": 192,
        "startChar": 2,
        "endLine": 194,
        "endChar": 3
      },
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "370b1582_20f271ed",
        "filename": "src/chromiumos/tast/local/chrome/familylink/fixture.go",
        "patchSetId": 10
      },
      "lineNbr": 231,
      "author": {
        "id": 1351120
      },
      "writtenOn": "2021-07-09T23:30:10Z",
      "side": 1,
      "message": "Isn\u0027t this also already done in fixtures/fakedms.go on line 117 in SetUp()?",
      "range": {
        "startLine": 227,
        "startChar": 1,
        "endLine": 231,
        "endChar": 2
      },
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74afd701_06f4a0ce",
        "filename": "src/chromiumos/tast/local/chrome/familylink/fixture.go",
        "patchSetId": 10
      },
      "lineNbr": 237,
      "author": {
        "id": 1351120
      },
      "writtenOn": "2021-07-09T23:30:10Z",
      "side": 1,
      "message": "Nit: just fdms, not f.fdms",
      "range": {
        "startLine": 237,
        "startChar": 12,
        "endLine": 237,
        "endChar": 18
      },
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa3f39e9_9a1bd060",
        "filename": "src/chromiumos/tast/local/chrome/familylink/fixture.go",
        "patchSetId": 10
      },
      "lineNbr": 269,
      "author": {
        "id": 1351120
      },
      "writtenOn": "2021-07-09T23:30:10Z",
      "side": 1,
      "message": "Just call policyutil.ResetChrome(ctx, f.fdms, f.cr) here, as vsavu suggested, and skip the call to f.cr.ResetState below.",
      "range": {
        "startLine": 263,
        "startChar": 1,
        "endLine": 269,
        "endChar": 2
      },
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcc79a47_bbb1b191",
        "filename": "src/chromiumos/tast/local/chrome/option.go",
        "patchSetId": 10
      },
      "lineNbr": 70,
      "author": {
        "id": 1368736
      },
      "writtenOn": "2021-07-12T08:10:04Z",
      "side": 1,
      "message": "nit: in Chrome",
      "range": {
        "startLine": 70,
        "startChar": 16,
        "endLine": 70,
        "endChar": 28
      },
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8b30653_476deb38",
        "filename": "src/chromiumos/tast/local/policyutil/fixtures/fakedms.go",
        "patchSetId": 10
      },
      "lineNbr": 55,
      "author": {
        "id": 1403852
      },
      "writtenOn": "2021-07-08T04:59:47Z",
      "side": 1,
      "message": "Is there any way to pass this variable from it\u0027s descendant fixture (in this case, familyLinkUnicornPolicyLogin) so that we don\u0027t have to create another fixture when using a different account?\n\nunfortunately I couldn\u0027t find any. Do you know anything?",
      "range": {
        "startLine": 55,
        "startChar": 39,
        "endLine": 55,
        "endChar": 58
      },
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3465ae2_cfb67844",
        "filename": "src/chromiumos/tast/local/policyutil/fixtures/fakedms.go",
        "patchSetId": 10
      },
      "lineNbr": 55,
      "author": {
        "id": 1351120
      },
      "writtenOn": "2021-07-09T23:30:10Z",
      "side": 1,
      "message": "It\u0027s very unclear what this fakedms refers to. Either pass it as a parameter, or just store the policy user directly (see comment below).",
      "range": {
        "startLine": 55,
        "startChar": 4,
        "endLine": 55,
        "endChar": 11
      },
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ce9153b_4acd5e7e",
        "filename": "src/chromiumos/tast/local/policyutil/fixtures/fakedms.go",
        "patchSetId": 10
      },
      "lineNbr": 55,
      "author": {
        "id": 1351120
      },
      "writtenOn": "2021-07-09T23:30:10Z",
      "side": 1,
      "message": "I would just create another fixture for a different account. Notice how familylink/fixture.go has a fixture for familyLinkUnicornLogin and another one for familyLinkUnicornArcLogin, where the difference is just the account and the chrome.ARCSupported() supported flag.",
      "parentUuid": "e8b30653_476deb38",
      "range": {
        "startLine": 55,
        "startChar": 39,
        "endLine": 55,
        "endChar": 58
      },
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cf555c3_b8df11d8",
        "filename": "src/chromiumos/tast/local/policyutil/fixtures/fakedms.go",
        "patchSetId": 10
      },
      "lineNbr": 80,
      "author": {
        "id": 1351120
      },
      "writtenOn": "2021-07-09T23:30:10Z",
      "side": 1,
      "message": "Is this necessary? Can we just store the policy user directly like before?",
      "range": {
        "startLine": 76,
        "startChar": 1,
        "endLine": 80,
        "endChar": 32
      },
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ccaf5cf_f89a22b7",
        "filename": "src/chromiumos/tast/local/policyutil/fixtures/fakedms.go",
        "patchSetId": 10
      },
      "lineNbr": 80,
      "author": {
        "id": 1403852
      },
      "writtenOn": "2021-07-13T00:36:42Z",
      "side": 1,
      "message": "We could only call s.RequiredVar() in SetUp(). If no Vars was set (like fakeDMSEnrolled or fakeDMS), the program will be panic if calling s.RequiredVar() in SetUp() directly. \n\nI didn\u0027t find any ways to differentiate fixtures in SetUp(). If we don\u0027t use callback, we might need 2 variables in fakeDMSFixture. One records the policyUserVar(like \"unicorn.ChildUser\"), which will be used to called s.RequiredVar(policyUserVar) in SetUp(). The other records policyUser(\"xxxx@gmail.com\"), as you suggested above, used in Reset(). Also, we may need to do some if-else in SetUp() to differentiate whether it has vars or not.\n\nBy using a call back here, we don\u0027t need to modify SetUp() for the policyUser when adding new fixture. It\u0027s more general.",
      "parentUuid": "3cf555c3_b8df11d8",
      "range": {
        "startLine": 76,
        "startChar": 1,
        "endLine": 80,
        "endChar": 32
      },
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3bca045_b3a64e83",
        "filename": "src/chromiumos/tast/local/policyutil/fixtures/fakedms.go",
        "patchSetId": 10
      },
      "lineNbr": 80,
      "author": {
        "id": 1368736
      },
      "writtenOn": "2021-07-13T10:02:09Z",
      "side": 1,
      "message": "As noted above I am strongly against using a global.\n\nI think the 2 variables are a better solution in this case. We can think about abstracting things away once we have more cases to handle, but I don\u0027t expect that many to exist.",
      "parentUuid": "2ccaf5cf_f89a22b7",
      "range": {
        "startLine": 76,
        "startChar": 1,
        "endLine": 80,
        "endChar": 32
      },
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d787b5b0_d3d29d93",
        "filename": "src/chromiumos/tast/local/policyutil/fixtures/fakedms.go",
        "patchSetId": 10
      },
      "lineNbr": 115,
      "author": {
        "id": 1351120
      },
      "writtenOn": "2021-07-09T23:30:10Z",
      "side": 1,
      "message": "Instead of doing this, why not store the policy blob in a variable like\n\npolicyBlob :\u003d fakedms.NewPolicyBlob()\n\nAnd then modify the policyBlob.PolicyUser? This userCallBack is not very readable and it\u0027s very unclear that the purpose is to modify the call to NewPolicyBlob() below.",
      "range": {
        "startLine": 111,
        "startChar": 1,
        "endLine": 115,
        "endChar": 2
      },
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7adb16e_376f1d55",
        "filename": "src/chromiumos/tast/local/policyutil/fixtures/fakedms.go",
        "patchSetId": 10
      },
      "lineNbr": 115,
      "author": {
        "id": 1403852
      },
      "writtenOn": "2021-07-13T00:36:42Z",
      "side": 1,
      "message": "The purpose of userCallBack is to set the policyUser for global. fakedms.NewPolicyBlob() is also used in policyutil. I just want to make policyutil simple to used with less change.\n \nPeople used callback in fixture before, for example chrome.OptionsCallback[1]. I think we could use here if it\u0027s needed.\n\n[1]http://cs/chromeos_public/src/platform/tast-tests/src/chromiumos/tast/local/chrome/fixture.go?l\u003d141\u0026rcl\u003d5d70f1c7b86633f10058f85fd378e0fc68fbd34c",
      "parentUuid": "d787b5b0_d3d29d93",
      "range": {
        "startLine": 111,
        "startChar": 1,
        "endLine": 115,
        "endChar": 2
      },
      "revId": "eab3c6299517c5eb57703c42955da3b9941d3878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}