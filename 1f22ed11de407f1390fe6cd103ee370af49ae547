{
  "comments": [
    {
      "key": {
        "uuid": "bbeacadc_022de8ac",
        "filename": "src/chromiumos/tast/local/bundles/cros/camera/cca/cca.go",
        "patchSetId": 5
      },
      "lineNbr": 1106,
      "author": {
        "id": 1001886
      },
      "writtenOn": "2020-05-14T03:36:20Z",
      "side": 1,
      "message": "Should we wait \"tablet\" state back to the original in cleanup too?",
      "revId": "1f22ed11de407f1390fe6cd103ee370af49ae547",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d325e28b_c0f74ef4",
        "filename": "src/chromiumos/tast/local/bundles/cros/camera/cca/cca.go",
        "patchSetId": 5
      },
      "lineNbr": 1106,
      "author": {
        "id": 1271173
      },
      "writtenOn": "2020-05-14T07:20:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bbeacadc_022de8ac",
      "revId": "1f22ed11de407f1390fe6cd103ee370af49ae547",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a9ddba6_b5a0f492",
        "filename": "src/chromiumos/tast/local/bundles/cros/camera/cca_ui_volume_shutter.go",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1001886
      },
      "writtenOn": "2020-05-14T03:36:20Z",
      "side": 1,
      "message": "Do we need to call cras.WaitForDevice() before doing this?",
      "revId": "1f22ed11de407f1390fe6cd103ee370af49ae547",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d379cc1_579c7122",
        "filename": "src/chromiumos/tast/local/bundles/cros/camera/cca_ui_volume_shutter.go",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1269379
      },
      "writtenOn": "2020-05-14T03:48:27Z",
      "side": 1,
      "message": "Right, it\u0027s better to use WaitForDevice or the active node may not be selected when UI just starts.",
      "parentUuid": "7a9ddba6_b5a0f492",
      "revId": "1f22ed11de407f1390fe6cd103ee370af49ae547",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91e00889_9fb9ccb5",
        "filename": "src/chromiumos/tast/local/bundles/cros/camera/cca_ui_volume_shutter.go",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1271173
      },
      "writtenOn": "2020-05-14T04:00:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5d379cc1_579c7122",
      "revId": "1f22ed11de407f1390fe6cd103ee370af49ae547",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "430a1995_c4f9f3b5",
        "filename": "src/chromiumos/tast/local/bundles/cros/camera/cca_ui_volume_shutter.go",
        "patchSetId": 5
      },
      "lineNbr": 81,
      "author": {
        "id": 1001886
      },
      "writtenOn": "2020-05-14T03:36:20Z",
      "side": 1,
      "message": "dumb question: why we need to set activeNode here, given the IDs are the same?",
      "revId": "1f22ed11de407f1390fe6cd103ee370af49ae547",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1852702_bfcde581",
        "filename": "src/chromiumos/tast/local/bundles/cros/camera/cca_ui_volume_shutter.go",
        "patchSetId": 5
      },
      "lineNbr": 81,
      "author": {
        "id": 1271173
      },
      "writtenOn": "2020-05-14T04:00:58Z",
      "side": 1,
      "message": "The node itself contains the |activeNode.NodeVolume| information, so the it should be update together to track the latest volume.",
      "parentUuid": "430a1995_c4f9f3b5",
      "revId": "1f22ed11de407f1390fe6cd103ee370af49ae547",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd96c470_c6a63f7f",
        "filename": "src/chromiumos/tast/local/bundles/cros/camera/cca_ui_volume_shutter.go",
        "patchSetId": 5
      },
      "lineNbr": 81,
      "author": {
        "id": 1001886
      },
      "writtenOn": "2020-05-14T04:13:20Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e1852702_bfcde581",
      "revId": "1f22ed11de407f1390fe6cd103ee370af49ae547",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fb6cda9f_b11f809b",
        "filename": "src/chromiumos/tast/local/bundles/cros/camera/cca_ui_volume_shutter.go",
        "patchSetId": 5
      },
      "lineNbr": 132,
      "author": {
        "id": 1001886
      },
      "writtenOn": "2020-05-14T03:36:20Z",
      "side": 1,
      "message": "dumb question: Can we simply use cleanupCtx here instead of passing an argument to the defer func?",
      "range": {
        "startLine": 132,
        "startChar": 25,
        "endLine": 132,
        "endChar": 28
      },
      "revId": "1f22ed11de407f1390fe6cd103ee370af49ae547",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83dcfd18_154c8a9c",
        "filename": "src/chromiumos/tast/local/bundles/cros/camera/cca_ui_volume_shutter.go",
        "patchSetId": 5
      },
      "lineNbr": 132,
      "author": {
        "id": 1271173
      },
      "writtenOn": "2020-05-14T04:00:58Z",
      "side": 1,
      "message": "The tast owner lamzin@ prefer to pass in ctx as argument. See the lamzin\u0027s comment on PS1 PS4.",
      "parentUuid": "fb6cda9f_b11f809b",
      "range": {
        "startLine": 132,
        "startChar": 25,
        "endLine": 132,
        "endChar": 28
      },
      "revId": "1f22ed11de407f1390fe6cd103ee370af49ae547",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2cf90f60_969f4e7b",
        "filename": "src/chromiumos/tast/local/bundles/cros/camera/cca_ui_volume_shutter.go",
        "patchSetId": 5
      },
      "lineNbr": 132,
      "author": {
        "id": 1001886
      },
      "writtenOn": "2020-05-14T04:13:20Z",
      "side": 1,
      "message": "Hi lamzin@, could you help elaborate more on this? Thanks.",
      "parentUuid": "83dcfd18_154c8a9c",
      "range": {
        "startLine": 132,
        "startChar": 25,
        "endLine": 132,
        "endChar": 28
      },
      "revId": "1f22ed11de407f1390fe6cd103ee370af49ae547",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf063b80_a0fcc45c",
        "filename": "src/chromiumos/tast/local/bundles/cros/camera/cca_ui_volume_shutter.go",
        "patchSetId": 5
      },
      "lineNbr": 132,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2020-05-14T09:47:50Z",
      "side": 1,
      "message": "Let\u0027s take a look on Context documentation:\n\nDo not store Contexts inside a struct type; instead, pass a Context explicitly to each function that needs it. The Context should be the first parameter, typically named ctx.\nhttps://golang.org/pkg/context/\n\n--------\n\nWhen you directly use cleanupCtx (by reference) instead passing as an argument, you can face a bug:\n\n// initial cleanup context:\ncleanupCtx :\u003d ctx\nctx, cancel :\u003d ctxutil.Shorten(ctx, time.Second*5)\ndefer cancel()\n\ndefer func() {\n    vh.setVolume(cleanupCtx, originalVolume)   // \u003c-- direct use cleanupCtx\n}()\n\n// now we wanna give more time for cleanup for another operation:\ncleanupCtx \u003d ctx \nctx, cancel \u003d ctxutil.Shorten(ctx, time.Second*5)\ndefer cancel()\n\nAnd here we have a problem, you function in defer does not see first cleanup context as you assume, but instead it uses updated cleanup. If you pass context by value, you have a guarantee that your function will use correct context, you just make a copy of context for it.",
      "parentUuid": "2cf90f60_969f4e7b",
      "range": {
        "startLine": 132,
        "startChar": 25,
        "endLine": 132,
        "endChar": 28
      },
      "revId": "1f22ed11de407f1390fe6cd103ee370af49ae547",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98bcf1ca_d2db792e",
        "filename": "src/chromiumos/tast/local/bundles/cros/camera/cca_ui_volume_shutter.go",
        "patchSetId": 5
      },
      "lineNbr": 132,
      "author": {
        "id": 1001886
      },
      "writtenOn": "2020-05-14T10:18:35Z",
      "side": 1,
      "message": "Thanks for the detailed explanation! I am slightly leaning to not redefine cleanupCtx in that case, but it\u0027s a valid concern and copy the context would be safer.\n\nIt looks like the pattern is not enforced and there are many existing tests [1] using cleanupCtx directly without a copy. Maybe we should fix them and update the doc to make it more clear?\n\n[1] http://cs/search/?q\u003dpackage:chromeos+:%3D%5C+ctx$+ctxutil.Shorten\u0026m\u003d100\u0026type\u003dcs",
      "parentUuid": "bf063b80_a0fcc45c",
      "range": {
        "startLine": 132,
        "startChar": 25,
        "endLine": 132,
        "endChar": 28
      },
      "revId": "1f22ed11de407f1390fe6cd103ee370af49ae547",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f49311ac_bf55b6a8",
        "filename": "src/chromiumos/tast/local/bundles/cros/camera/cca_ui_volume_shutter.go",
        "patchSetId": 5
      },
      "lineNbr": 132,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2020-05-14T17:31:31Z",
      "side": 1,
      "message": "I\u0027ll discuss this idea with other Tast owners. Thanks!",
      "parentUuid": "98bcf1ca_d2db792e",
      "range": {
        "startLine": 132,
        "startChar": 25,
        "endLine": 132,
        "endChar": 28
      },
      "revId": "1f22ed11de407f1390fe6cd103ee370af49ae547",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8c27ee9c_9ce8911f",
        "filename": "src/chromiumos/tast/local/bundles/cros/camera/cca_ui_volume_shutter.go",
        "patchSetId": 5
      },
      "lineNbr": 192,
      "author": {
        "id": 1001886
      },
      "writtenOn": "2020-05-14T03:36:20Z",
      "side": 1,
      "message": "IIRC defer here would be stacked only run when the function returns. I guess this is not what you want?",
      "revId": "1f22ed11de407f1390fe6cd103ee370af49ae547",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e30096b_d444449a",
        "filename": "src/chromiumos/tast/local/bundles/cros/camera/cca_ui_volume_shutter.go",
        "patchSetId": 5
      },
      "lineNbr": 192,
      "author": {
        "id": 1271173
      },
      "writtenOn": "2020-05-14T04:00:58Z",
      "side": 1,
      "message": "Done, moved the whole section into a function",
      "parentUuid": "8c27ee9c_9ce8911f",
      "revId": "1f22ed11de407f1390fe6cd103ee370af49ae547",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}