{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d837e798_3365fd35",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1363139
      },
      "writtenOn": "2022-09-16T18:53:58Z",
      "side": 1,
      "message": "NIT don\u0027t we need tast: tag here?",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 3
      },
      "revId": "6ef703565341e4e490373a3a2f6c1907492cf26a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "782019d5_a7180b4a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1117055
      },
      "writtenOn": "2022-09-16T19:08:52Z",
      "side": 1,
      "message": "I mean, this is the tast-tests repo, so unless we\u0027re putting it on every CL...",
      "parentUuid": "d837e798_3365fd35",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 3
      },
      "revId": "6ef703565341e4e490373a3a2f6c1907492cf26a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bfb9dbb1_3b4bee00",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1363139
      },
      "writtenOn": "2022-09-16T19:21:03Z",
      "side": 1,
      "message": "Makes sense to me, thanks for the feedback. I\u0027ll wait for a tast owner to take a look.",
      "revId": "6ef703565341e4e490373a3a2f6c1907492cf26a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "594b4f65_a3012d7e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1411065
      },
      "writtenOn": "2022-09-19T09:46:52Z",
      "side": 1,
      "message": "LGTM",
      "revId": "6ef703565341e4e490373a3a2f6c1907492cf26a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "046f9fc3_61514ea7",
        "filename": "src/chromiumos/tast/local/bundles/cros/cellular/shill_cellular_disable_while_connecting.go",
        "patchSetId": 2
      },
      "lineNbr": 88,
      "author": {
        "id": 1363139
      },
      "writtenOn": "2022-09-16T18:53:58Z",
      "side": 1,
      "message": "How long do we expect to be in associating state? I think WaitForProperty is a 100ms poll, is there any risk that we miss this state?",
      "range": {
        "startLine": 88,
        "startChar": 34,
        "endLine": 88,
        "endChar": 45
      },
      "revId": "6ef703565341e4e490373a3a2f6c1907492cf26a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00abf56b_c08ba092",
        "filename": "src/chromiumos/tast/local/bundles/cros/cellular/shill_cellular_disable_while_connecting.go",
        "patchSetId": 2
      },
      "lineNbr": 88,
      "author": {
        "id": 1117055
      },
      "writtenOn": "2022-09-16T19:08:52Z",
      "side": 1,
      "message": "It\u0027s 100ms in this as well as in the version that used FindServiceForDeviceWithProps, so I figured it doesn\u0027t matter one way or the other.\n\nWe would often miss the state if the bearer were just disconnected rather than toggling disable/enable at the beginning of the test, but the latter seems to be reliable enough in my tests. We can also gather results from the flaky board once this is in to figure out if we need to be able to configure the interval.",
      "parentUuid": "046f9fc3_61514ea7",
      "range": {
        "startLine": 88,
        "startChar": 34,
        "endLine": 88,
        "endChar": 45
      },
      "revId": "6ef703565341e4e490373a3a2f6c1907492cf26a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6edca38c_d0bd4c6a",
        "filename": "src/chromiumos/tast/local/bundles/cros/cellular/shill_cellular_disable_while_connecting.go",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 1411065
      },
      "writtenOn": "2022-09-19T09:46:52Z",
      "side": 1,
      "message": "Shouldn\u0027t this be a Fatal if the connection fails?\nOtherwise the test would just wait until it times out.",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 103,
        "endChar": 2
      },
      "revId": "6ef703565341e4e490373a3a2f6c1907492cf26a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ad08b6a_75748bf3",
        "filename": "src/chromiumos/tast/local/bundles/cros/cellular/shill_cellular_disable_while_connecting.go",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 1117055
      },
      "writtenOn": "2022-09-19T13:24:50Z",
      "side": 1,
      "message": "We actually expect the connection to fail most of the time, as the disable operation in the goroutine will interrupt it. The fatal we really don\u0027t want is the one for the re-enable in L69, as this test is attempting to confirm that these sorts of simultaneous options don\u0027t leave us in a bad state.\n\nRegarding the timeout, we use a different context for this and it times out after 3 minutes on its own. I can use a shorter timeout for the connect if you would like, but figured that if the default connect parameters had a long timeout, we should just stick with those.",
      "parentUuid": "6edca38c_d0bd4c6a",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 103,
        "endChar": 2
      },
      "revId": "6ef703565341e4e490373a3a2f6c1907492cf26a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "6ef703565341e4e490373a3a2f6c1907492cf26a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "6ef703565341e4e490373a3a2f6c1907492cf26a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6ef703565341e4e490373a3a2f6c1907492cf26a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "6ef703565341e4e490373a3a2f6c1907492cf26a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}