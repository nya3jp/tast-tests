{
  "comments": [
    {
      "key": {
        "uuid": "b11df3bc_da46794f",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 175,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2019-10-23T16:11:28Z",
      "side": 1,
      "message": "Clar: does this work without explicit User()? If not, could you add a check in New()?\nAlso, nice to be commented here.",
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf2dc847_5030761d",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 175,
      "author": {
        "id": 1313390
      },
      "writtenOn": "2019-10-24T20:31:16Z",
      "side": 1,
      "message": "I added a comment to 1817190 about putting a fakeDMS flag, which would help this. But in general enrolling should be allowed for any user, and the flow would be the same.",
      "parentUuid": "b11df3bc_da46794f",
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b6ca361_9f9fa59f",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 175,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2019-10-28T15:20:55Z",
      "side": 1,
      "message": "Got it. Thank you for explanation.",
      "parentUuid": "bf2dc847_5030761d",
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "123ce5a7_3161c406",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 175,
      "author": {
        "id": 1313390
      },
      "writtenOn": "2019-10-31T16:45:08Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2b6ca361_9f9fa59f",
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3e73d5a_74a1de92",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 784,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2019-10-23T16:11:28Z",
      "side": 1,
      "message": "Why \"possible\"? is there any chance that the returned webview is not the EnterpriseEnrollTargets?\nIf so, how about setting more restrictive condition?\n\nI\u0027m guessing \"enroll target\" should be at most one, right?\nIf so, how about just return an Info instance by taking domain? (or nil if not found)",
      "range": {
        "startLine": 784,
        "startChar": 17,
        "endLine": 784,
        "endChar": 25
      },
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab041fbf_a0d06f9b",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 784,
      "author": {
        "id": 1313390
      },
      "writtenOn": "2019-10-24T20:31:16Z",
      "side": 1,
      "message": "This will return 2+ typically. We do not know for certain which target is correct until we run a command on it (see 874-879)",
      "parentUuid": "d3e73d5a_74a1de92",
      "range": {
        "startLine": 784,
        "startChar": 17,
        "endLine": 784,
        "endChar": 25
      },
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4765a1db_30710a94",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 784,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2019-10-28T15:20:55Z",
      "side": 1,
      "message": "I see. Thank you for explanation.\nIt\u0027s nice to be documented here, because \"possible\" is ambiguous.\n\nAlso, you\u0027re filtering by URL in two places. here and L859, that\u0027s nice to be consolidated here, I think.",
      "parentUuid": "ab041fbf_a0d06f9b",
      "range": {
        "startLine": 784,
        "startChar": 17,
        "endLine": 784,
        "endChar": 25
      },
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7a7f189_d7e4dce4",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 784,
      "author": {
        "id": 1313390
      },
      "writtenOn": "2019-10-31T16:45:08Z",
      "side": 1,
      "message": "Combined the filter here.",
      "parentUuid": "4765a1db_30710a94",
      "range": {
        "startLine": 784,
        "startChar": 17,
        "endLine": 784,
        "endChar": 25
      },
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6b64440_2dfd476f",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 796,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2019-10-23T16:11:28Z",
      "side": 1,
      "message": "return c.devsess.Findtargets(...)\n\nshould work.",
      "range": {
        "startLine": 789,
        "startChar": 1,
        "endLine": 796,
        "endChar": 20
      },
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4930979_95c1db31",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 796,
      "author": {
        "id": 1313390
      },
      "writtenOn": "2019-10-24T20:31:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b6b64440_2dfd476f",
      "range": {
        "startLine": 789,
        "startChar": 1,
        "endLine": 796,
        "endChar": 20
      },
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cb6fd169_ac492cf6",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 843,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2019-10-23T16:11:28Z",
      "side": 1,
      "message": "SplitN looks better because it does not matter if two or more \"@\" is contained.\nIt is necessary to handle the case where \"@\" is missing. In the case it panics.\nCould you return an error and let the callers handle it?",
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "769ddb32_995bdbf3",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 843,
      "author": {
        "id": 1313390
      },
      "writtenOn": "2019-10-24T20:31:16Z",
      "side": 1,
      "message": "I do not see a benefit to SplitN, as then we do not know where the last \"@\" will occur. AFAIK the only time multiple\"@\"\u0027s can be in an email (user ID) would if they are quoted, escaped, and must be prior to the \"final @.\n\n\nUnfortunately Go doesn\u0027t allow reverse indexing, so handling this gets kinda ugly.\n\n\nAssuming we want to be robust we would need to use a parser like so:\n\n\n\n    domainSplit :\u003d strings.Split(c.user, \"@\")\n    domain :\u003d domainSplit[len(domainSplit) - 1]\n\n    dotsplit :\u003d strings.Split(domain, \".\")\n    partialDomain :\u003d (strings.Join(dotsplit[0:len(dotsplit) - 1], \"\"))\n    return partialDomain\n\n\nIf a user is passed in without a domain (ie no @), we are not going to be able to enroll to begin with.\n\nI can change this method to do this, and add a c.user validation check. Thoughts?",
      "parentUuid": "cb6fd169_ac492cf6",
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a75e06b0_57e18373",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 843,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2019-10-28T15:20:55Z",
      "side": 1,
      "message": "Your current code is taking the \"second\" part if multiple \"@\" is contained in c.user.\nE.g.; if foo@bar.baz@abc -\u003e bar is returned.\n\nIf the behavior is necessary to be kept,\n\nstrings.SplitN(strings.SplitN(c.user, \"@\", 3)[1], \".\", 2)[0]\n\nshould return the same result.\n\nIf it is necessary to take the last component in case multiple @ is given, then as you said there\u0027s no good method defined in strings package, unfortunately, so you need to parse it by yourself.\nOr, alternatively, you can handle it as an error.\n\n\u003e If a user is passed in without a domain (ie no @), we are not going to be able to enroll to begin with.\n\nstrings.Split(c.user, \"@\")[1] would panic, which should be fixed.",
      "parentUuid": "769ddb32_995bdbf3",
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b0183b4_f1cec66e",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 843,
      "author": {
        "id": 1313390
      },
      "writtenOn": "2019-10-28T18:28:31Z",
      "side": 1,
      "message": "When I run your example\n\n\nstrings.SplitN(strings.SplitN(c.user, \"@\", 3)[1], \".\", 2)[0]\n\n\nwith foo@bar.baz@abc I am returned \"bar\", when I should be return \"abc\". My example returns nothing, because of the partialDomain :\u003d line (this is also wrong).\n\nMy intention is with an email like \"foo@bar.baz@abc\" --\u003e ABC is kept. With \"foo@bar.baz@abc.def\" --\u003e abc is also kept.\n\n\nProposal to change mine to something like \n\n\n\n    domainSplit :\u003d strings.Split(c.user, \"@\")\n    domain :\u003d domainSplit[len(domainSplit) - 1]\n    dotsplit :\u003d strings.Split(domain, \".\")\n    if len(dotsplit) \u003d\u003d 1 {\n        return dotsplit[0]\n    partialDomain :\u003d (strings.Join(dotsplit[0:len(dotsplit) - 1], \"\"))\n    return partialDomain\n\n\nI could simplify this into a 1 liner as well, but the readability is pretty bad, so I am open to opinions on 6 line vs 1 line. Also the above code chunk does not panic on the lack of an \"@\" or \".\".",
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64f41195_9df856f4",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 843,
      "author": {
        "id": 1313390
      },
      "writtenOn": "2019-10-28T18:29:14Z",
      "side": 1,
      "message": "When I run your example\n\n\nstrings.SplitN(strings.SplitN(c.user, \"@\", 3)[1], \".\", 2)[0]\n\n\nwith foo@bar.baz@abc I am returned \"bar\", when I should be return \"abc\". My example returns nothing, because of the partialDomain :\u003d line (this is also wrong).\n\nMy intention is with an email like \"foo@bar.baz@abc\" --\u003e ABC is kept. With \"foo@bar.baz@abc.def\" --\u003e abc is also kept.\n\n\nProposal to change mine to something like \n\n    domainSplit :\u003d strings.Split(c.user, \"@\")\n    domain :\u003d domainSplit[len(domainSplit) - 1]\n    dotsplit :\u003d strings.Split(domain, \".\")\n    if len(dotsplit) \u003d\u003d 1 {\n        return dotsplit[0]\n    partialDomain :\u003d (strings.Join(dotsplit[0:len(dotsplit) - 1], \"\"))\n    return partialDomain\n\nI could simplify this into a 1 liner as well, but the readability is pretty bad, so I am open to opinions on 6 line vs 1 line. Also the above code chunk does not panic on the lack of an \"@\" or \".\".",
      "parentUuid": "a75e06b0_57e18373",
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "913c5754_7cf90afe",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 843,
      "author": {
        "id": 1313390
      },
      "writtenOn": "2019-10-28T18:29:14Z",
      "side": 1,
      "message": "double paste. whoops.",
      "parentUuid": "1b0183b4_f1cec66e",
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa211da2_e8b1a926",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 843,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2019-11-01T15:18:28Z",
      "side": 1,
      "message": "Thank you for explanation.\nRecommendation: match with a regexp.\n\n\"([^@]+)\\.[^.@]*$\"",
      "parentUuid": "64f41195_9df856f4",
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd4d9d5b_ec0f2e72",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 843,
      "author": {
        "id": 1313390
      },
      "writtenOn": "2019-11-01T16:40:07Z",
      "side": 1,
      "message": "going to adjust it slightly for desired effect...\n\n\nr, _ :\u003d regexp.Compile(`([^@]+)\\.[.@]*`)\nstrings.Replace(r.FindString(c.user), \".\", \"\", -1))",
      "parentUuid": "fa211da2_e8b1a926",
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82c87d73_0c1884c6",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 843,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2019-11-06T04:48:14Z",
      "side": 1,
      "message": "1) My suggestion had a mistake. I meant `([^@]+)\\.[^@]*$`.\n2) Could you not ignore err at any time? In the case, regexp.MustCompile can help you.\n3) To avoid compiling regexp repeatedly, let\u0027s keep the regexp var as a package-scope variable.",
      "parentUuid": "cd4d9d5b_ec0f2e72",
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55e3ffc9_d860f393",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 843,
      "author": {
        "id": 1313390
      },
      "writtenOn": "2019-11-12T15:19:43Z",
      "side": 1,
      "message": "This regex still does not do as I want. I do not want the entire domain (eg managedchromecom) returned. \n\nIn the following example the one I gave as an example only returns \"managedchromecom\", while your regex will return \"managedchromecomcom\"\n\n\"example1@example2@managedchrome.com.com\"\n\nI do not want to include the final \".XYZ\".\n\nMy current regex + string split works exactly as desired. I am voting to leave it as is.\n\nFor #2.) Sounds good, changed\n#3.) I am guessing you mean not return the r.findstring()? If so I have adjusted the newest patch to reflect this. If it is not what you mean please comment on that patchset so its easier to track 😊",
      "parentUuid": "82c87d73_0c1884c6",
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94194dc9_4e7b5ab8",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 850,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-10-23T07:04:24Z",
      "side": 1,
      "message": "huge nit: mind removing this extra space?",
      "range": {
        "startLine": 850,
        "startChar": 55,
        "endLine": 850,
        "endChar": 56
      },
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "431cfebf_53b48a07",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 850,
      "author": {
        "id": 1313390
      },
      "writtenOn": "2019-10-24T20:31:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "94194dc9_4e7b5ab8",
      "range": {
        "startLine": 850,
        "startChar": 55,
        "endLine": 850,
        "endChar": 56
      },
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d06978d3_5c734f4d",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 851,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2019-10-23T16:11:28Z",
      "side": 1,
      "message": "for simple two string terms concat, could you use \u0027+\u0027?",
      "range": {
        "startLine": 851,
        "startChar": 13,
        "endLine": 851,
        "endChar": 87
      },
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73ed8af5_cfed1c76",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 851,
      "author": {
        "id": 1313390
      },
      "writtenOn": "2019-10-24T20:31:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d06978d3_5c734f4d",
      "range": {
        "startLine": 851,
        "startChar": 13,
        "endLine": 851,
        "endChar": 87
      },
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e778592e_9dfde6e4",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 869,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2019-10-23T16:11:28Z",
      "side": 1,
      "message": "defer should be set after if err check at L870.",
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07f232f5_3eff8fbe",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 869,
      "author": {
        "id": 1313390
      },
      "writtenOn": "2019-10-24T20:31:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e778592e_9dfde6e4",
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2589301_4cd663b3",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 879,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-10-23T07:04:24Z",
      "side": 1,
      "message": "Do we want to continue rather than returning immediately?",
      "range": {
        "startLine": 879,
        "startChar": 4,
        "endLine": 879,
        "endChar": 14
      },
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cde54582_1ecfd8a3",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 879,
      "author": {
        "id": 1313390
      },
      "writtenOn": "2019-10-24T20:31:16Z",
      "side": 1,
      "message": "I think an error is appropriate. If we querySelector errors out (and doesn\u0027t return 0), something likely went very wrong.",
      "parentUuid": "d2589301_4cd663b3",
      "range": {
        "startLine": 879,
        "startChar": 4,
        "endLine": 879,
        "endChar": 14
      },
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "06c2c582_9b1beaba",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 879,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-10-28T09:12:55Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "cde54582_1ecfd8a3",
      "range": {
        "startLine": 879,
        "startChar": 4,
        "endLine": 879,
        "endChar": 14
      },
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8af48df_405e5fb5",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 881,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2019-10-23T16:11:28Z",
      "side": 1,
      "message": "Missing period. (Sorry overlooked in the last iteration).",
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c08aef5_f352c1ec",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 881,
      "author": {
        "id": 1313390
      },
      "writtenOn": "2019-10-24T20:31:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f8af48df_405e5fb5",
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6045f3ee_03d09b24",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 885,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2019-10-23T16:11:28Z",
      "side": 1,
      "message": "nit: unnecessary empty line. Could you remove?",
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9269d57b_eb2b6dde",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 885,
      "author": {
        "id": 1313390
      },
      "writtenOn": "2019-10-24T20:31:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6045f3ee_03d09b24",
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "24d2c756_ed643f9c",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 906,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-10-23T07:04:24Z",
      "side": 1,
      "message": "I believe \"; 0;\" is not necessary.",
      "range": {
        "startLine": 906,
        "startChar": 84,
        "endLine": 906,
        "endChar": 88
      },
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d13bf74a_456a6d79",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 906,
      "author": {
        "id": 1313390
      },
      "writtenOn": "2019-10-24T20:31:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "24d2c756_ed643f9c",
      "range": {
        "startLine": 906,
        "startChar": 84,
        "endLine": 906,
        "endChar": 88
      },
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ddf8d1f_bca2c94a",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 940,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-10-23T07:04:24Z",
      "side": 1,
      "message": "Please check error returned from enterpriseOOBELogin.",
      "range": {
        "startLine": 940,
        "startChar": 2,
        "endLine": 940,
        "endChar": 34
      },
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8aa7545c_3726c0c1",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 10
      },
      "lineNbr": 940,
      "author": {
        "id": 1313390
      },
      "writtenOn": "2019-10-24T20:31:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2ddf8d1f_bca2c94a",
      "range": {
        "startLine": 940,
        "startChar": 2,
        "endLine": 940,
        "endChar": 34
      },
      "revId": "56e92fa60b1ac0da8ee4e04e9311de3564376d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}