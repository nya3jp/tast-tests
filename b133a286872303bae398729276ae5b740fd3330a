{
  "comments": [
    {
      "key": {
        "uuid": "ecbf814b_197d1b27",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 16,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2020-01-10T01:02:01Z",
      "side": 1,
      "message": "It\u0027s good practice to explain the \"why?\", not just the \"what?\"\n\nOne motivation: mocks ignore aspects of the implementation, and it\u0027s possible to observe the expected behaviors without a mock\n\nAnother: it was easier this way",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 16,
        "endChar": 69
      },
      "revId": "b133a286872303bae398729276ae5b740fd3330a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fdc787bb_22561596",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 16,
      "author": {
        "id": 1373754
      },
      "writtenOn": "2020-01-10T23:35:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ecbf814b_197d1b27",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 16,
        "endChar": 69
      },
      "revId": "b133a286872303bae398729276ae5b740fd3330a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b76d839_f9f3057c",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/shill_init_scripts.go",
        "patchSetId": 11
      },
      "lineNbr": 686,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2020-01-10T01:02:01Z",
      "side": 1,
      "message": "there\u0027s a non-zero chance my understanding was wrong, now that I\u0027m (re)rereading this function. But I think that means both that\n(a) I should learn to read better and\n(b) this function could use a longer description, to document exactly what it\u0027s doing.",
      "range": {
        "startLine": 686,
        "startChar": 5,
        "endLine": 686,
        "endChar": 21
      },
      "revId": "b133a286872303bae398729276ae5b740fd3330a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d3135c6_3bf0b709",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/shill_init_scripts.go",
        "patchSetId": 11
      },
      "lineNbr": 686,
      "author": {
        "id": 1373754
      },
      "writtenOn": "2020-01-10T23:35:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8b76d839_f9f3057c",
      "range": {
        "startLine": 686,
        "startChar": 5,
        "endLine": 686,
        "endChar": 21
      },
      "revId": "b133a286872303bae398729276ae5b740fd3330a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c882a3fb_619a90c3",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/shill_init_scripts.go",
        "patchSetId": 11
      },
      "lineNbr": 727,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-01-07T02:15:31Z",
      "side": 1,
      "message": "nit: typo",
      "range": {
        "startLine": 727,
        "startChar": 43,
        "endLine": 727,
        "endChar": 51
      },
      "revId": "b133a286872303bae398729276ae5b740fd3330a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "218fb3f8_41b7289d",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/shill_init_scripts.go",
        "patchSetId": 11
      },
      "lineNbr": 727,
      "author": {
        "id": 1373754
      },
      "writtenOn": "2020-01-07T20:28:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c882a3fb_619a90c3",
      "range": {
        "startLine": 727,
        "startChar": 43,
        "endLine": 727,
        "endChar": 51
      },
      "revId": "b133a286872303bae398729276ae5b740fd3330a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6b5c7eba_907434ae",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/shill_init_scripts.go",
        "patchSetId": 11
      },
      "lineNbr": 811,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-01-07T02:15:31Z",
      "side": 1,
      "message": "Hmm..., I think this means no related method call should be found in dbus-monitor?\nIf so, sorry that I forgot we also had to fail on unexpected method calls when writing the example in the previous comment.\n\nI guess adding back the whitelist filter ([]string{createUserProfile, insertUserProfile, popAllUserProfiles} ?) and emit error on not matching any expectedCalls in dbusEventMonitor might work somehow? e.g.\n\n  for scanner.Scan() {\n    line :\u003d scanner.Text()\n    if !inWhitelist(line) {\n      continue\n    }\n    match :\u003d false\n    for i, c :\u003d range expectedCalls {\n      if strings.Contains(line, c) {\n        expectedCalls \u003d append(expectedCalls[0:i], expectedCalls[i+1:]...)\n        match \u003d true\n        break\n      }\n    }\n    if !match {\n      ch \u003c- errors.New(\"unexpected call\")\n      return\n    }\n    ...\n  }",
      "revId": "b133a286872303bae398729276ae5b740fd3330a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f489c8a_7c840865",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/shill_init_scripts.go",
        "patchSetId": 11
      },
      "lineNbr": 811,
      "author": {
        "id": 1373754
      },
      "writtenOn": "2020-01-07T20:28:24Z",
      "side": 1,
      "message": "For this case I added a flag (expectNoCalls). Please look at the code and let me know if it LGTY.",
      "parentUuid": "6b5c7eba_907434ae",
      "revId": "b133a286872303bae398729276ae5b740fd3330a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "950b1e40_05eeac40",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/shill_init_scripts.go",
        "patchSetId": 11
      },
      "lineNbr": 811,
      "author": {
        "id": 1373754
      },
      "writtenOn": "2020-01-07T22:12:38Z",
      "side": 1,
      "message": "The code above will return an error if unexpected call happens. In testLoginMultiProfiles, we want to make sure that there are no method calls. In this case the dbusEventMonitor will continue monitoring until timeout that is why I added a flag expectNoCalls to check after a timeout. If the timeout is due to no expexted calls (expectNoCalls \u003d true) then return ch\u003c-nil and return error otherwise.",
      "parentUuid": "7f489c8a_7c840865",
      "revId": "b133a286872303bae398729276ae5b740fd3330a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74e6efea_1e4650fd",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/shill_init_scripts.go",
        "patchSetId": 11
      },
      "lineNbr": 811,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-01-08T01:32:41Z",
      "side": 1,
      "message": "Ack, but I guess the async \"dbus-monitor\" is not perfectly suitable for checking no unexpected call.\nIf we really care about unexpected call, the original way of mocking flimflam (which can be synchronous if login waits dbus method calls) might be a better solution, I guess.",
      "parentUuid": "950b1e40_05eeac40",
      "revId": "b133a286872303bae398729276ae5b740fd3330a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}