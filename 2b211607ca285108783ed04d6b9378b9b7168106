{
  "comments": [
    {
      "key": {
        "uuid": "997df06f_461cf5e3",
        "filename": "src/chromiumos/tast/local/bundles/cros/policy/allow_dinosaur_easter_egg.go",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1124166
      },
      "writtenOn": "2019-09-23T14:01:32Z",
      "side": 1,
      "message": "Will it be possible to change the policy on the fly and verify it? It would be very useful: checking that blocked apps get uninstalled once prohibited by policy!",
      "range": {
        "startLine": 19,
        "startChar": 12,
        "endLine": 19,
        "endChar": 34
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3f9e387_82f5e941",
        "filename": "src/chromiumos/tast/local/bundles/cros/policy/allow_dinosaur_easter_egg.go",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1002858
      },
      "writtenOn": "2019-09-24T06:18:43Z",
      "side": 1,
      "message": "dbeckett@ has been working on an AutotestPrivate function to trigger policy reload, though that won\u0027t work for policies which require reboot",
      "parentUuid": "997df06f_461cf5e3",
      "range": {
        "startLine": 19,
        "startChar": 12,
        "endLine": 19,
        "endChar": 34
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7d5d247_1ddbc564",
        "filename": "src/chromiumos/tast/local/bundles/cros/policy/allow_dinosaur_easter_egg.go",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-09-23T12:43:27Z",
      "side": 1,
      "message": "`!\u003d` instead of `!(a \u003d\u003d b)` ?",
      "range": {
        "startLine": 82,
        "startChar": 26,
        "endLine": 82,
        "endChar": 29
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69b361d5_88d76771",
        "filename": "src/chromiumos/tast/local/bundles/cros/policy/allow_dinosaur_easter_egg.go",
        "patchSetId": 1
      },
      "lineNbr": 86,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-09-23T12:43:27Z",
      "side": 1,
      "message": "p.Stat \u003d\u003d policy.UnsetStatus",
      "range": {
        "startLine": 86,
        "startChar": 19,
        "endLine": 86,
        "endChar": 49
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28cb1256_ae6d1d5a",
        "filename": "src/chromiumos/tast/local/policy/defs.go",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-09-23T12:43:27Z",
      "side": 1,
      "message": "I see a lot of duplication here and many of them we can avoid.\n\nWhat about next:\n\n1) To avoid Stat/Status field duplication use:\n    type PolicyBase struct{\n      Status Status\n    }\n\n    type CookiesAllowedForURLs struct {\n      PolicyBase\n      Value []string\n    }\n\n2) To avoid Scope() duplication:\n    type UserScopeBase struct {}\n    func (UserScopeBase) Scope() Scope {\n      return UserScope\n    }\n\n    type DeviceScopeBase struct {}\n    func (DeviceScopeBase) Scope() Scope {\n      return DeviceScope\n    }\n    \n    ....\n    type CookiesAllowedForURLs struct {\n      PolicyBase\n      UserScopeBase\n      Value []string\n    }\n    \n3) To avoid Type() let\u0027s use the same technique as for Scope()\n   Moreover we can have some base structs like:\n\n    type IntTypeBase struct {\n      Value int\n    }\n    func (b IntTypeBase) Type() Type {\n      return IntType\n    }\n    func (b IntTypeBase) UntypedV() interface{} {\n      return b.Value\n    }\n\n    ...\n\n    type IncognitoModeAvailability struct {\n\tPolicyBase\n        UserScopeBase\n        IntTypeBase\n    }\n \n4) Add EmptyField struct.",
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d4108ef_fe9b4b19",
        "filename": "src/chromiumos/tast/local/policy/defs.go",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1002858
      },
      "writtenOn": "2019-09-24T06:18:43Z",
      "side": 1,
      "message": "I\u0027ve added you to the doc where I explored some of the options for this, if that\u0027s easier for you.  I did consider using embedded structs, but it makes the policy struct creation more annoying.  E.g. in case 4) you\u0027d have to write it as \n\np :\u003d IncognitoModeAvailability{IntTypeBase: IntTypeBase{4}, PolicyBase: PolicyBase{status}}\ninstead of {Status: status, Val: 4}\n\nIt seems to me a matter of which code we want to be prettier",
      "parentUuid": "28cb1256_ae6d1d5a",
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a9dd4cc_718f9d47",
        "filename": "src/chromiumos/tast/local/policy/defs.go",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1124166
      },
      "writtenOn": "2019-09-23T14:01:32Z",
      "side": 1,
      "message": "Imagine how fast it will grow covering all policies, not only trivial ones.\n\nWill it be possible to have a separate folder with definition files (one per policy)?\n\nOr even better: having the script which pre-generates it from the existing templates might solve the problem.",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 77
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9434843b_e749ab14",
        "filename": "src/chromiumos/tast/local/policy/defs.go",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1002858
      },
      "writtenOn": "2019-09-24T06:18:43Z",
      "side": 1,
      "message": "I definitely agree that automating this from policy_templates is the best thing to do here",
      "parentUuid": "3a9dd4cc_718f9d47",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 77
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad168625_18c95543",
        "filename": "src/chromiumos/tast/local/policy/defs.go",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-09-23T12:43:27Z",
      "side": 1,
      "message": "Why do not use full name `Status`?",
      "range": {
        "startLine": 22,
        "startChar": 1,
        "endLine": 22,
        "endChar": 5
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9915534_6c181851",
        "filename": "src/chromiumos/tast/local/policy/defs.go",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1002858
      },
      "writtenOn": "2019-09-24T06:18:43Z",
      "side": 1,
      "message": "go prefers shorter names whenever reasonable",
      "parentUuid": "ad168625_18c95543",
      "range": {
        "startLine": 22,
        "startChar": 1,
        "endLine": 22,
        "endChar": 5
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "207d6b92_54259adf",
        "filename": "src/chromiumos/tast/local/policy/defs.go",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-09-23T12:43:27Z",
      "side": 1,
      "message": "Value?",
      "range": {
        "startLine": 23,
        "startChar": 1,
        "endLine": 23,
        "endChar": 4
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83f4b71d_8850b2bc",
        "filename": "src/chromiumos/tast/local/policy/defs.go",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-09-23T12:43:27Z",
      "side": 1,
      "message": "Why not CookiesAllowedForURLs? Or why CookiesAllowedForURLs is not equal to CookiesAllowedForUrls?\n\nDo we actually need this function?\n\n\n\nIf struct name will be the same as policy name then we can simply use golang reflections: `return reflect.TypeOf(value).Name()` ?",
      "range": {
        "startLine": 27,
        "startChar": 56,
        "endLine": 27,
        "endChar": 77
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdf773bc_175b9a95",
        "filename": "src/chromiumos/tast/local/policy/defs.go",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1002858
      },
      "writtenOn": "2019-09-24T06:18:43Z",
      "side": 1,
      "message": "URLs is the go standard way of writing the name and Urls is the policy name - but I think a case can be made here to stick with Urls.\n\nI\u0027m a little concerned about using reflect in this case since it\u0027s more complicated to understand/remember for test writers.  Though I suppose for the most part they shouldn\u0027t need the name at all.",
      "parentUuid": "83f4b71d_8850b2bc",
      "range": {
        "startLine": 27,
        "startChar": 56,
        "endLine": 27,
        "endChar": 77
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6aba4ff_e08bf117",
        "filename": "src/chromiumos/tast/local/policy/defs.go",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-09-23T12:43:27Z",
      "side": 1,
      "message": "Doe it mean Element?",
      "range": {
        "startLine": 94,
        "startChar": 22,
        "endLine": 94,
        "endChar": 25
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "516c6c6c_a2431fc9",
        "filename": "src/chromiumos/tast/local/policy/defs.go",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1002858
      },
      "writtenOn": "2019-09-24T06:18:43Z",
      "side": 1,
      "message": "yes",
      "parentUuid": "e6aba4ff_e08bf117",
      "range": {
        "startLine": 94,
        "startChar": 22,
        "endLine": 94,
        "endChar": 25
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2cb5fee6_21e3a8ba",
        "filename": "src/chromiumos/tast/local/policy/defs.go",
        "patchSetId": 1
      },
      "lineNbr": 188,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-09-23T12:43:27Z",
      "side": 1,
      "message": "Why do not pass two DeviceAutoUpdateTimeRestrictionsDayMinuteHour objects instead?",
      "range": {
        "startLine": 188,
        "startChar": 0,
        "endLine": 188,
        "endChar": 45
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c1c7f3d_c55d74e1",
        "filename": "src/chromiumos/tast/local/policy/defs.go",
        "patchSetId": 1
      },
      "lineNbr": 188,
      "author": {
        "id": 1002858
      },
      "writtenOn": "2019-09-24T06:18:43Z",
      "side": 1,
      "message": "I was trying to make adding an element easier in a test and/or illustrate that each policy could be somewhat tailored to whatever the test creator wanted to have, as long as it implements the Policy interface.  Agreed that it\u0027s not strictly necessary",
      "parentUuid": "2cb5fee6_21e3a8ba",
      "range": {
        "startLine": 188,
        "startChar": 0,
        "endLine": 188,
        "endChar": 45
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6f5c689_4b696ffe",
        "filename": "src/chromiumos/tast/local/policy/defs.go",
        "patchSetId": 1
      },
      "lineNbr": 228,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-09-23T12:43:27Z",
      "side": 1,
      "message": "for i, val :\u003d range mVal",
      "range": {
        "startLine": 228,
        "startChar": 0,
        "endLine": 228,
        "endChar": 20
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8d12aca_8bd0559b",
        "filename": "src/chromiumos/tast/local/policy/fakedms/fakedms.go",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1124166
      },
      "writtenOn": "2019-09-23T14:01:32Z",
      "side": 1,
      "message": "I still don\u0027t get where policyPath is initialized?",
      "range": {
        "startLine": 42,
        "startChar": 1,
        "endLine": 42,
        "endChar": 11
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2769995a_5a526233",
        "filename": "src/chromiumos/tast/local/policy/fakedms/fakedms.go",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1002858
      },
      "writtenOn": "2019-09-24T06:18:43Z",
      "side": 1,
      "message": "it is a file created in line 52/54 below.  Putting it in the results directory makes debugging easier, I think",
      "parentUuid": "c8d12aca_8bd0559b",
      "range": {
        "startLine": 42,
        "startChar": 1,
        "endLine": 42,
        "endChar": 11
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed8d21b3_3e04dab0",
        "filename": "src/chromiumos/tast/local/policy/fakedms/fakedms.go",
        "patchSetId": 1
      },
      "lineNbr": 165,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-09-23T12:43:27Z",
      "side": 1,
      "message": "Can you remove it since you do not change fdms in this function?",
      "range": {
        "startLine": 165,
        "startChar": 11,
        "endLine": 165,
        "endChar": 12
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16b8cbb2_8d49dca1",
        "filename": "src/chromiumos/tast/local/policy/fakedms/fakedms.go",
        "patchSetId": 1
      },
      "lineNbr": 165,
      "author": {
        "id": 1002858
      },
      "writtenOn": "2019-09-24T06:18:43Z",
      "side": 1,
      "message": "but this function uses a value from the fdms (policyPath)",
      "parentUuid": "ed8d21b3_3e04dab0",
      "range": {
        "startLine": 165,
        "startChar": 11,
        "endLine": 165,
        "endChar": 12
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99510f2d_c54f81b2",
        "filename": "src/chromiumos/tast/local/policy/fakedms/policy_blob.go",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1124166
      },
      "writtenOn": "2019-09-23T14:01:32Z",
      "side": 1,
      "message": "what\u0027s about other attributes?\nLike expected errors, initial enrollment state \u0026 etc.?",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 13,
        "endChar": 22
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f12042d3_be110b33",
        "filename": "src/chromiumos/tast/local/policy/fakedms/policy_blob.go",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1002858
      },
      "writtenOn": "2019-09-24T06:18:43Z",
      "side": 1,
      "message": "whoops, you\u0027re right I left those off.  I\u0027ll look over this list again",
      "parentUuid": "99510f2d_c54f81b2",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 13,
        "endChar": 22
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86db92ea_621fdacf",
        "filename": "src/chromiumos/tast/local/policy/fakedms/policy_blob.go",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1124166
      },
      "writtenOn": "2019-09-23T14:01:32Z",
      "side": 1,
      "message": "Does it make sense to be able to set PolicyUser via NewPolicyBlob()\u0027s parameter and make tast-user a default value if nothing is passed?",
      "range": {
        "startLine": 53,
        "startChar": 2,
        "endLine": 53,
        "endChar": 50
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a0d2e11_89898f9d",
        "filename": "src/chromiumos/tast/local/policy/fakedms/policy_blob.go",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1002858
      },
      "writtenOn": "2019-09-24T06:18:43Z",
      "side": 1,
      "message": "I was using this user while testing, but you\u0027re right that\u0027s better behavior here",
      "parentUuid": "86db92ea_621fdacf",
      "range": {
        "startLine": 53,
        "startChar": 2,
        "endLine": 53,
        "endChar": 50
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c5c637e_ea3090aa",
        "filename": "src/chromiumos/tast/local/policy/fakedms/policy_blob.go",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1124166
      },
      "writtenOn": "2019-09-23T14:01:32Z",
      "side": 1,
      "message": "Why suggested? It confuses me a bit, since there are mandatory\u0026recommended user policies...",
      "range": {
        "startLine": 87,
        "startChar": 22,
        "endLine": 87,
        "endChar": 44
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c80d9818_e573e782",
        "filename": "src/chromiumos/tast/local/policy/fakedms/policy_blob.go",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1002858
      },
      "writtenOn": "2019-09-24T06:18:43Z",
      "side": 1,
      "message": "I will change them all to be \"recommended\"",
      "parentUuid": "8c5c637e_ea3090aa",
      "range": {
        "startLine": 87,
        "startChar": 22,
        "endLine": 87,
        "endChar": 44
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e366a93d_b2083d7e",
        "filename": "src/chromiumos/tast/local/policy/policy.go",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-09-23T12:43:27Z",
      "side": 1,
      "message": "Struct name can be used as policy name.",
      "range": {
        "startLine": 18,
        "startChar": 1,
        "endLine": 18,
        "endChar": 7
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89d2cd07_3db99999",
        "filename": "src/chromiumos/tast/local/policy/policy.go",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-09-23T12:43:27Z",
      "side": 1,
      "message": "Can we avoid it using reflection?",
      "range": {
        "startLine": 26,
        "startChar": 1,
        "endLine": 26,
        "endChar": 39
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e3ceddd_9bf9a7e8",
        "filename": "src/chromiumos/tast/local/policy/policy.go",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1002858
      },
      "writtenOn": "2019-09-24T06:18:43Z",
      "side": 1,
      "message": "I did play around with reflection and it got very ugly - I\u0027m willing to look again, since there are some changes here since then that would make that easier",
      "parentUuid": "89d2cd07_3db99999",
      "range": {
        "startLine": 26,
        "startChar": 1,
        "endLine": 26,
        "endChar": 39
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a298709f_e9e53f28",
        "filename": "src/chromiumos/tast/local/policy/policy.go",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-09-23T12:43:27Z",
      "side": 1,
      "message": "StringType?",
      "range": {
        "startLine": 46,
        "startChar": 1,
        "endLine": 46,
        "endChar": 8
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75324f55_b1c615ca",
        "filename": "src/chromiumos/tast/local/policy/policy.go",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-09-23T12:43:27Z",
      "side": 1,
      "message": "Can we avoid all these functions since json.Unmarshal\u0027s second argument is empty interface?",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 64,
        "endChar": 59
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9b273c1_2af97f9b",
        "filename": "src/chromiumos/tast/local/policy/verify_policy.go",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1124166
      },
      "writtenOn": "2019-09-23T14:01:32Z",
      "side": 1,
      "message": "What\u0027s about converting DUTPolicy to Policy[], sort and compare with ps by some Policy.Compare or Policy.EqualsTo function?",
      "range": {
        "startLine": 44,
        "startChar": 1,
        "endLine": 44,
        "endChar": 37
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e0b426a_e9f79f39",
        "filename": "src/chromiumos/tast/local/policy/verify_policy.go",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1124166
      },
      "writtenOn": "2019-09-23T14:01:32Z",
      "side": 1,
      "message": "What if there are some additional not-checked policies left in dps?",
      "range": {
        "startLine": 49,
        "startChar": 1,
        "endLine": 49,
        "endChar": 30
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c7b0a5c_65ddb06e",
        "filename": "src/chromiumos/tast/local/policy/verify_policy.go",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1002858
      },
      "writtenOn": "2019-09-24T06:18:43Z",
      "side": 1,
      "message": "there definitely could be - if you\u0027re looking at a real login there will be many default policies in these results.  It made sense to me that if a test needs to check if a policy is not set it should pass that in here flagged as unset.\n\nI will make that clearer",
      "parentUuid": "7e0b426a_e9f79f39",
      "range": {
        "startLine": 49,
        "startChar": 1,
        "endLine": 49,
        "endChar": 30
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}