{
  "comments": [
    {
      "key": {
        "uuid": "997df06f_461cf5e3",
        "filename": "src/chromiumos/tast/local/bundles/cros/policy/allow_dinosaur_easter_egg.go",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1124166
      },
      "writtenOn": "2019-09-23T14:01:32Z",
      "side": 1,
      "message": "Will it be possible to change the policy on the fly and verify it? It would be very useful: checking that blocked apps get uninstalled once prohibited by policy!",
      "range": {
        "startLine": 19,
        "startChar": 12,
        "endLine": 19,
        "endChar": 34
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7d5d247_1ddbc564",
        "filename": "src/chromiumos/tast/local/bundles/cros/policy/allow_dinosaur_easter_egg.go",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-09-23T12:43:27Z",
      "side": 1,
      "message": "`!\u003d` instead of `!(a \u003d\u003d b)` ?",
      "range": {
        "startLine": 82,
        "startChar": 26,
        "endLine": 82,
        "endChar": 29
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69b361d5_88d76771",
        "filename": "src/chromiumos/tast/local/bundles/cros/policy/allow_dinosaur_easter_egg.go",
        "patchSetId": 1
      },
      "lineNbr": 86,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-09-23T12:43:27Z",
      "side": 1,
      "message": "p.Stat \u003d\u003d policy.UnsetStatus",
      "range": {
        "startLine": 86,
        "startChar": 19,
        "endLine": 86,
        "endChar": 49
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28cb1256_ae6d1d5a",
        "filename": "src/chromiumos/tast/local/policy/defs.go",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-09-23T12:43:27Z",
      "side": 1,
      "message": "I see a lot of duplication here and many of them we can avoid.\n\nWhat about next:\n\n1) To avoid Stat/Status field duplication use:\n    type PolicyBase struct{\n      Status Status\n    }\n\n    type CookiesAllowedForURLs struct {\n      PolicyBase\n      Value []string\n    }\n\n2) To avoid Scope() duplication:\n    type UserScopeBase struct {}\n    func (UserScopeBase) Scope() Scope {\n      return UserScope\n    }\n\n    type DeviceScopeBase struct {}\n    func (DeviceScopeBase) Scope() Scope {\n      return DeviceScope\n    }\n    \n    ....\n    type CookiesAllowedForURLs struct {\n      PolicyBase\n      UserScopeBase\n      Value []string\n    }\n    \n3) To avoid Type() let\u0027s use the same technique as for Scope()\n   Moreover we can have some base structs like:\n\n    type IntTypeBase struct {\n      Value int\n    }\n    func (b IntTypeBase) Type() Type {\n      return IntType\n    }\n    func (b IntTypeBase) UntypedV() interface{} {\n      return b.Value\n    }\n\n    ...\n\n    type IncognitoModeAvailability struct {\n\tPolicyBase\n        UserScopeBase\n        IntTypeBase\n    }\n \n4) Add EmptyField struct.",
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a9dd4cc_718f9d47",
        "filename": "src/chromiumos/tast/local/policy/defs.go",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1124166
      },
      "writtenOn": "2019-09-23T14:01:32Z",
      "side": 1,
      "message": "Imagine how fast it will grow covering all policies, not only trivial ones.\n\nWill it be possible to have a separate folder with definition files (one per policy)?\n\nOr even better: having the script which pre-generates it from the existing templates might solve the problem.",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 77
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad168625_18c95543",
        "filename": "src/chromiumos/tast/local/policy/defs.go",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-09-23T12:43:27Z",
      "side": 1,
      "message": "Why do not use full name `Status`?",
      "range": {
        "startLine": 22,
        "startChar": 1,
        "endLine": 22,
        "endChar": 5
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "207d6b92_54259adf",
        "filename": "src/chromiumos/tast/local/policy/defs.go",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-09-23T12:43:27Z",
      "side": 1,
      "message": "Value?",
      "range": {
        "startLine": 23,
        "startChar": 1,
        "endLine": 23,
        "endChar": 4
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83f4b71d_8850b2bc",
        "filename": "src/chromiumos/tast/local/policy/defs.go",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-09-23T12:43:27Z",
      "side": 1,
      "message": "Why not CookiesAllowedForURLs? Or why CookiesAllowedForURLs is not equal to CookiesAllowedForUrls?\n\nDo we actually need this function?\n\n\n\nIf struct name will be the same as policy name then we can simply use golang reflections: `return reflect.TypeOf(value).Name()` ?",
      "range": {
        "startLine": 27,
        "startChar": 56,
        "endLine": 27,
        "endChar": 77
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6aba4ff_e08bf117",
        "filename": "src/chromiumos/tast/local/policy/defs.go",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-09-23T12:43:27Z",
      "side": 1,
      "message": "Doe it mean Element?",
      "range": {
        "startLine": 94,
        "startChar": 22,
        "endLine": 94,
        "endChar": 25
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2cb5fee6_21e3a8ba",
        "filename": "src/chromiumos/tast/local/policy/defs.go",
        "patchSetId": 1
      },
      "lineNbr": 188,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-09-23T12:43:27Z",
      "side": 1,
      "message": "Why do not pass two DeviceAutoUpdateTimeRestrictionsDayMinuteHour objects instead?",
      "range": {
        "startLine": 188,
        "startChar": 0,
        "endLine": 188,
        "endChar": 45
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6f5c689_4b696ffe",
        "filename": "src/chromiumos/tast/local/policy/defs.go",
        "patchSetId": 1
      },
      "lineNbr": 228,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-09-23T12:43:27Z",
      "side": 1,
      "message": "for i, val :\u003d range mVal",
      "range": {
        "startLine": 228,
        "startChar": 0,
        "endLine": 228,
        "endChar": 20
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8d12aca_8bd0559b",
        "filename": "src/chromiumos/tast/local/policy/fakedms/fakedms.go",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1124166
      },
      "writtenOn": "2019-09-23T14:01:32Z",
      "side": 1,
      "message": "I still don\u0027t get where policyPath is initialized?",
      "range": {
        "startLine": 42,
        "startChar": 1,
        "endLine": 42,
        "endChar": 11
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed8d21b3_3e04dab0",
        "filename": "src/chromiumos/tast/local/policy/fakedms/fakedms.go",
        "patchSetId": 1
      },
      "lineNbr": 165,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-09-23T12:43:27Z",
      "side": 1,
      "message": "Can you remove it since you do not change fdms in this function?",
      "range": {
        "startLine": 165,
        "startChar": 11,
        "endLine": 165,
        "endChar": 12
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99510f2d_c54f81b2",
        "filename": "src/chromiumos/tast/local/policy/fakedms/policy_blob.go",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1124166
      },
      "writtenOn": "2019-09-23T14:01:32Z",
      "side": 1,
      "message": "what\u0027s about other attributes?\nLike expected errors, initial enrollment state \u0026 etc.?",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 13,
        "endChar": 22
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86db92ea_621fdacf",
        "filename": "src/chromiumos/tast/local/policy/fakedms/policy_blob.go",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1124166
      },
      "writtenOn": "2019-09-23T14:01:32Z",
      "side": 1,
      "message": "Does it make sense to be able to set PolicyUser via NewPolicyBlob()\u0027s parameter and make tast-user a default value if nothing is passed?",
      "range": {
        "startLine": 53,
        "startChar": 2,
        "endLine": 53,
        "endChar": 50
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c5c637e_ea3090aa",
        "filename": "src/chromiumos/tast/local/policy/fakedms/policy_blob.go",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1124166
      },
      "writtenOn": "2019-09-23T14:01:32Z",
      "side": 1,
      "message": "Why suggested? It confuses me a bit, since there are mandatory\u0026recommended user policies...",
      "range": {
        "startLine": 87,
        "startChar": 22,
        "endLine": 87,
        "endChar": 44
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e366a93d_b2083d7e",
        "filename": "src/chromiumos/tast/local/policy/policy.go",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-09-23T12:43:27Z",
      "side": 1,
      "message": "Struct name can be used as policy name.",
      "range": {
        "startLine": 18,
        "startChar": 1,
        "endLine": 18,
        "endChar": 7
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89d2cd07_3db99999",
        "filename": "src/chromiumos/tast/local/policy/policy.go",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-09-23T12:43:27Z",
      "side": 1,
      "message": "Can we avoid it using reflection?",
      "range": {
        "startLine": 26,
        "startChar": 1,
        "endLine": 26,
        "endChar": 39
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a298709f_e9e53f28",
        "filename": "src/chromiumos/tast/local/policy/policy.go",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-09-23T12:43:27Z",
      "side": 1,
      "message": "StringType?",
      "range": {
        "startLine": 46,
        "startChar": 1,
        "endLine": 46,
        "endChar": 8
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75324f55_b1c615ca",
        "filename": "src/chromiumos/tast/local/policy/policy.go",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2019-09-23T12:43:27Z",
      "side": 1,
      "message": "Can we avoid all these functions since json.Unmarshal\u0027s second argument is empty interface?",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 64,
        "endChar": 59
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9b273c1_2af97f9b",
        "filename": "src/chromiumos/tast/local/policy/verify_policy.go",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1124166
      },
      "writtenOn": "2019-09-23T14:01:32Z",
      "side": 1,
      "message": "What\u0027s about converting DUTPolicy to Policy[], sort and compare with ps by some Policy.Compare or Policy.EqualsTo function?",
      "range": {
        "startLine": 44,
        "startChar": 1,
        "endLine": 44,
        "endChar": 37
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e0b426a_e9f79f39",
        "filename": "src/chromiumos/tast/local/policy/verify_policy.go",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1124166
      },
      "writtenOn": "2019-09-23T14:01:32Z",
      "side": 1,
      "message": "What if there are some additional not-checked policies left in dps?",
      "range": {
        "startLine": 49,
        "startChar": 1,
        "endLine": 49,
        "endChar": 30
      },
      "revId": "2b211607ca285108783ed04d6b9378b9b7168106",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}