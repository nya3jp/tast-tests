{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7f56db3a_42e3b450",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1454332
      },
      "writtenOn": "2021-01-20T14:20:01Z",
      "side": 1,
      "message": "I think remaining battery capacity + energy before the test starts would always be helpful. (We could have a potential problem when the battery is worn out and stops giving sufficient voltage even when it\u0027s above the `power.LowBatteryShutdownPercent()`.)\n\nAdded logic to fail the tests by looking at the `lowBatteryMargin`, since it\u0027s already provided for all the tests. If you\u0027re ok with this I guess it\u0027d be best to rename it to `expectedMaxCapacityDischarge`.\n\nI tested the battery drain on my nami DUT and it discharged less than 1% when running test for 5 minutes with 100% CPU use. Default `lowBatteryMargin` value is 2%.",
      "revId": "84a69683d1144d6f8e6ba92989f9a2faec33ed47",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80d937bf_ff5c8695",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1412469
      },
      "writtenOn": "2021-01-22T05:02:57Z",
      "side": 1,
      "message": "Renaming to expectedMaxCapacityDischarge sounds good to me. (lowBatteryMargin is ambiguous...expectedMaxDischargePercent might be better?)",
      "parentUuid": "7f56db3a_42e3b450",
      "revId": "84a69683d1144d6f8e6ba92989f9a2faec33ed47",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e084aaf_1f17c0ea",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1454332
      },
      "writtenOn": "2021-02-01T14:18:27Z",
      "side": 1,
      "message": "Done!",
      "parentUuid": "80d937bf_ff5c8695",
      "revId": "84a69683d1144d6f8e6ba92989f9a2faec33ed47",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77f02d24_a577705c",
        "filename": "src/chromiumos/tast/local/power/setup/setup_battery.go",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 1412469
      },
      "writtenOn": "2021-01-22T04:59:34Z",
      "side": 1,
      "message": "This logic may make many tests failing since we don\u0027t know the default lowBatteryMargin is sufficient for all the tests.\nHow about introducing this in a later CL after we ensured that the margin is sufficient?",
      "revId": "84a69683d1144d6f8e6ba92989f9a2faec33ed47",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71e533d6_d81c3d54",
        "filename": "src/chromiumos/tast/local/power/setup/setup_battery.go",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 1454332
      },
      "writtenOn": "2021-02-01T14:18:27Z",
      "side": 1,
      "message": "Ack, removed this code for now.",
      "parentUuid": "77f02d24_a577705c",
      "revId": "84a69683d1144d6f8e6ba92989f9a2faec33ed47",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1ef0a19_32a20fce",
        "filename": "src/chromiumos/tast/local/power/sysfs_battery_metrics.go",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1412469
      },
      "writtenOn": "2021-01-22T04:59:34Z",
      "side": 1,
      "message": "Let\u0027s implement the same logic here (Use voltage_now if reading voltage_min_design failed).",
      "revId": "84a69683d1144d6f8e6ba92989f9a2faec33ed47",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0803ab0_ef2628e6",
        "filename": "src/chromiumos/tast/local/power/sysfs_battery_metrics.go",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1454332
      },
      "writtenOn": "2021-02-01T14:18:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a1ef0a19_32a20fce",
      "revId": "84a69683d1144d6f8e6ba92989f9a2faec33ed47",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62c47a86_0e69e133",
        "filename": "src/chromiumos/tast/local/power/sysfs_battery_metrics.go",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1412469
      },
      "writtenOn": "2021-01-22T04:59:34Z",
      "side": 1,
      "message": "How about adding a metric like `battery_usage` here instead of logging? (It can make easier to collect the battery usage using SQL)\nYou can use `values.Set(metric, values)` to set the value in Snapshot()\nhttps://source.corp.google.com/chromeos_public/src/platform/tast-tests/src/chromiumos/tast/common/perf/perf.go;l\u003d172\nand capture the initial capacity in Start().",
      "revId": "84a69683d1144d6f8e6ba92989f9a2faec33ed47",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7d6922b_e5c4a22d",
        "filename": "src/chromiumos/tast/local/power/sysfs_battery_metrics.go",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1454332
      },
      "writtenOn": "2021-02-01T14:18:27Z",
      "side": 1,
      "message": "I\u0027ve added a Stop() method to ensure that we\u0027re not averaging out the discharge. Please tell me what you think.",
      "parentUuid": "62c47a86_0e69e133",
      "revId": "84a69683d1144d6f8e6ba92989f9a2faec33ed47",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "837dbfe9_a98a1a2c",
        "filename": "src/chromiumos/tast/local/power/sysfs_battery_metrics.go",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1412469
      },
      "writtenOn": "2021-02-03T03:24:51Z",
      "side": 1,
      "message": "Thanks! Adding Stop() is exactly what I thought initially, but I think we can do the same thing with values.Set() in Start() and Snapshot() since values.Set() replaces the data points completely so we don\u0027t need to care about those values are averaged out.\n\nHowever, if we can add Stop() to Timeline, it is cleaner way to do that so I think both ways are acceptable. (+oka, +tast-owners any thoughts?)\n\nIf you go in this way, it is a good idea that separating this into 2 CLs: implement Stop() and add the battery logging. Also, we need to add some tests in timeline_test.go to ensure Stop() behaves as expected.",
      "parentUuid": "d7d6922b_e5c4a22d",
      "revId": "84a69683d1144d6f8e6ba92989f9a2faec33ed47",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}