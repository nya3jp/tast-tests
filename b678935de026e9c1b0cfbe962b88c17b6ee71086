{
  "comments": [
    {
      "key": {
        "uuid": "5a2bbae5_bfbd9da3",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/wifi_service.go",
        "patchSetId": 21
      },
      "lineNbr": 773,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2020-07-29T18:41:38Z",
      "side": 1,
      "message": "The doc says:\n\n                string WiFi.BSSID [readonly]\n\n                        (WiFi only) The BSSID of the associated AP.\n                        One can monitor this property for PropertyChanged\n                        signals to identify when roaming changes the\n                        current AP.\n\n\nBut that\u0027s misleading -- the property is also reported when not connected; it reports the \"representative\" BSS in that case. We should probably fix the documentation, but we should also be more stringent here, and make sure we\u0027re actually in a connected/associated state.\n\nBTW, you can easily see this with something like this:\n\n ### get fresh scan results\n /usr/local/lib/flimflam/test/start-scanning wifi\n ### wait a bit, then:\n connectivity show Services | grep \u0027WiFi\\.BSSID\u0027\n\nYou\u0027ll see plenty of non-connected networks reporting this property, if you\u0027re in open air.",
      "range": {
        "startLine": 773,
        "startChar": 46,
        "endLine": 773,
        "endChar": 70
      },
      "revId": "b678935de026e9c1b0cfbe962b88c17b6ee71086",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f53e9bbf_55ff41b3",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/wifi_service.go",
        "patchSetId": 21
      },
      "lineNbr": 773,
      "author": {
        "id": 1373754
      },
      "writtenOn": "2020-07-30T07:33:33Z",
      "side": 1,
      "message": "I changed the function RequestRoam() to do the following:\n1- create a shill property watcher.\n2- RequestRoam.\n3- Poll for the Freq to equal expected AP2 freq (2.4GHz).\n4- Wait for service to be connected.\n5- Check the BSSID  of the service.\n\nI tested this logic for 100 time and it was stable. \n\nAlso, I am working on another solution. Because, we request roam inside the pw (we assume that the DUT is still connected to AP1 before requesting roam), then I can wait for the expected states of ServicePropertyState until it is connected. After that I can check the BSSID.",
      "parentUuid": "5a2bbae5_bfbd9da3",
      "range": {
        "startLine": 773,
        "startChar": 46,
        "endLine": 773,
        "endChar": 70
      },
      "revId": "b678935de026e9c1b0cfbe962b88c17b6ee71086",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27016cb0_abd8a8a4",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/wifi_service.go",
        "patchSetId": 21
      },
      "lineNbr": 773,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2020-07-31T02:41:18Z",
      "side": 1,
      "message": "\u003e 3- Poll for the Freq to equal expected AP2 freq (2.4GHz).\n\nI\u0027m not really a fan of that. Frequency is very much an indirect measure of what we\u0027re testing. Also, I\u0027d avoid polling when we can help it.\n\n\u003e (we assume that the DUT is still connected to AP1 before requesting roam),\n\nThat\u0027s probably not a great assumption. It\u0027s pretty implementation specific how we choose to roam. It\u0027s quite possible to already be in the middle of a roam \"naturally,\" because wpa_supplicant thinks the other BSS has better throughput/signal/etc.\n\n\u003e then I can wait for the expected states of ServicePropertyState until it is connected. After that I can check the BSSID.\n\nIs it possible to wait until both conditions match?",
      "parentUuid": "f53e9bbf_55ff41b3",
      "range": {
        "startLine": 773,
        "startChar": 46,
        "endLine": 773,
        "endChar": 70
      },
      "revId": "b678935de026e9c1b0cfbe962b88c17b6ee71086",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2d73b5d_f2101f81",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/wifi_service.go",
        "patchSetId": 21
      },
      "lineNbr": 773,
      "author": {
        "id": 1373754
      },
      "writtenOn": "2020-08-04T03:02:15Z",
      "side": 1,
      "message": "I change the code, so now it does the fllowing:\n1- Connect to AP1.\n2- Setup a property watcher to make sure the DUT doesn\u0027t disconnect and go to \"idle\" state. Also, verify that the following expected props are received in order:\n    A) State \u003d configuration.\n    B) State \u003d connected.\n    C) BSSID \u003d AP2 BSSID. checks the prop before waiting for change.\n3- Configure AP2.\n4- Waite for AP2 to be on the BSS table.\n5- Send a request to roam.\n6- Wait for expected props in the pw.\n7- Verify connection with AP2.",
      "parentUuid": "27016cb0_abd8a8a4",
      "range": {
        "startLine": 773,
        "startChar": 46,
        "endLine": 773,
        "endChar": 70
      },
      "revId": "b678935de026e9c1b0cfbe962b88c17b6ee71086",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a908c622_20746695",
        "filename": "src/chromiumos/tast/remote/bundles/cros/wifi/roam_dbus.go",
        "patchSetId": 21
      },
      "lineNbr": 26,
      "author": {
        "id": 1243287
      },
      "writtenOn": "2020-07-29T04:44:15Z",
      "side": 1,
      "message": "Is there a way to check for driver-based roaming like we do here: https://source.corp.google.com/chromeos_public/src/third_party/autotest/files/server/site_tests/network_WiFi_RoamFT/network_WiFi_RoamFT.py;l\u003d201",
      "range": {
        "startLine": 26,
        "startChar": 15,
        "endLine": 26,
        "endChar": 17
      },
      "revId": "b678935de026e9c1b0cfbe962b88c17b6ee71086",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c143e8c_bfb7aec7",
        "filename": "src/chromiumos/tast/remote/bundles/cros/wifi/roam_dbus.go",
        "patchSetId": 21
      },
      "lineNbr": 26,
      "author": {
        "id": 1373754
      },
      "writtenOn": "2020-07-29T06:33:33Z",
      "side": 1,
      "message": "IIUC, this is using iw runner to check the caps and then skip the test based on that. Skipping inside the test is not recomended in Tast.\n\nIf the hwdeps for WiFi chips is implemented then we can skip all Broadcom chips here. \nhttps://bugs.chromium.org/p/chromium/issues/detail?id\u003d1070299\n\nI think we should have a hwdep on capabilities as well not just the type of WiFi chip.",
      "parentUuid": "a908c622_20746695",
      "range": {
        "startLine": 26,
        "startChar": 15,
        "endLine": 26,
        "endChar": 17
      },
      "revId": "b678935de026e9c1b0cfbe962b88c17b6ee71086",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b37d213_b7e9e089",
        "filename": "src/chromiumos/tast/remote/bundles/cros/wifi/roam_dbus.go",
        "patchSetId": 21
      },
      "lineNbr": 26,
      "author": {
        "id": 1243287
      },
      "writtenOn": "2020-07-29T17:00:43Z",
      "side": 1,
      "message": "Ah, gotcha.",
      "parentUuid": "4c143e8c_bfb7aec7",
      "range": {
        "startLine": 26,
        "startChar": 15,
        "endLine": 26,
        "endChar": 17
      },
      "revId": "b678935de026e9c1b0cfbe962b88c17b6ee71086",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9798d52a_67bc2bf2",
        "filename": "src/chromiumos/tast/remote/bundles/cros/wifi/roam_dbus.go",
        "patchSetId": 21
      },
      "lineNbr": 26,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2020-07-29T18:41:38Z",
      "side": 1,
      "message": "We could still throw an explicit Fail, if you want to call out the fact that the test is being run erroneously. (It could be nice to double-check that HardwareDeps/SoftwareDeps really match the actual SW feature flags. I\u0027m not sure that\u0027s required though.)",
      "parentUuid": "0b37d213_b7e9e089",
      "range": {
        "startLine": 26,
        "startChar": 15,
        "endLine": 26,
        "endChar": 17
      },
      "revId": "b678935de026e9c1b0cfbe962b88c17b6ee71086",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}