{
  "comments": [
    {
      "key": {
        "uuid": "7f3f56f1_5d1eb7b4",
        "filename": "src/chromiumos/tast/local/bundles/cros/example/profiler.go",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-08-16T12:56:44Z",
      "side": 1,
      "message": "This is a good exercise about API design in Go :)\n\nI see room for improvements in the current design. Namely:\n\n- We need to switch Start and StartWithOpts depending on whether we have extra options.\n- StartWithOpts can\u0027t accept multiple profilers while Start can.\n- StartWithOpts accepts interface{}, which introduces type unsafety in the API.\n\nAlternatively, I recommend passing options to profiler.Perf/VMStat/Top, rather than to profiler.Start. Just like:\n\n  p, err :\u003d profiler.Start(\n    ctx,\n    s.OutDir(),\n    profiler.Perf(nil),\n    profiler.Top(nil),\n    profiler.VMStat(\u0026profiler.VMStatOptions{Interval: 3}))\n\nwhere nil is considered as default (e.g. profiler.Perf(nil) \u003d\u003d profiler.Perf(\u0026profiler.PerfOptions{})).",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 91
      },
      "revId": "53373eb909621b666f1870169861ab3ec7aa80d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4fe1af45_adc61bb8",
        "filename": "src/chromiumos/tast/local/profiler/vmstat.go",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-08-16T12:56:44Z",
      "side": 1,
      "message": "Please use time.Duration to clarify the unit of time.",
      "range": {
        "startLine": 31,
        "startChar": 10,
        "endLine": 31,
        "endChar": 13
      },
      "revId": "53373eb909621b666f1870169861ab3ec7aa80d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}