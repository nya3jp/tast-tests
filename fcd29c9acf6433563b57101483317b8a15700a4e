{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "349e449b_5c836dd4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1310383
      },
      "writtenOn": "2022-11-03T16:41:22Z",
      "side": 1,
      "message": "Thank you for sending this change my way too! This is already looking pretty good, just have a couple questions and nits whenever you have a moment!",
      "revId": "fcd29c9acf6433563b57101483317b8a15700a4e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "742f8ab2_fefee325",
        "filename": "src/chromiumos/tast/common/chameleon/chameleond.go",
        "patchSetId": 1
      },
      "lineNbr": 1385,
      "author": {
        "id": 1310383
      },
      "writtenOn": "2022-11-03T16:41:22Z",
      "side": 1,
      "message": "Instead of constructing and indexing into a map on each call could we create a `const` array of the valid types for `deviceType`, and then use a `switch` here? If we take this approach we could just output the valid types that can be provided in the error below, too. WDYT?",
      "range": {
        "startLine": 1378,
        "startChar": 0,
        "endLine": 1385,
        "endChar": 2
      },
      "revId": "fcd29c9acf6433563b57101483317b8a15700a4e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da482c82_cb300033",
        "filename": "src/chromiumos/tast/remote/bluetooth/emulated_btpeer_device.go",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1310383
      },
      "writtenOn": "2022-11-03T16:41:22Z",
      "side": 1,
      "message": "Do we use `NoInputNoOutput` here and below since we aren\u0027t able to retrieve what the passkey would be for keyboards?",
      "range": {
        "startLine": 35,
        "startChar": 35,
        "endLine": 35,
        "endChar": 72
      },
      "revId": "fcd29c9acf6433563b57101483317b8a15700a4e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2ac64c0_e95b60a9",
        "filename": "src/chromiumos/tast/remote/bluetooth/emulated_btpeer_device.go",
        "patchSetId": 1
      },
      "lineNbr": 99,
      "author": {
        "id": 1310383
      },
      "writtenOn": "2022-11-03T16:41:22Z",
      "side": 1,
      "message": "Nit: Can we remove this since if `err` is `nil` then `success` must be `false` due to the checks by the outer `if`?",
      "range": {
        "startLine": 99,
        "startChar": 15,
        "endLine": 99,
        "endChar": 27
      },
      "revId": "fcd29c9acf6433563b57101483317b8a15700a4e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d536874_10aaddb7",
        "filename": "src/chromiumos/tast/remote/bluetooth/emulated_btpeer_device.go",
        "patchSetId": 1
      },
      "lineNbr": 112,
      "author": {
        "id": 1310383
      },
      "writtenOn": "2022-11-03T16:41:22Z",
      "side": 1,
      "message": "Nit: I think we may have lost a word here!",
      "range": {
        "startLine": 112,
        "startChar": 19,
        "endLine": 112,
        "endChar": 46
      },
      "revId": "fcd29c9acf6433563b57101483317b8a15700a4e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}