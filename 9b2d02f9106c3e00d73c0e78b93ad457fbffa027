{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ef14ad2e_41f0ea31",
        "filename": "src/chromiumos/tast/local/bluetooth/bluez.go",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 1390967
      },
      "writtenOn": "2022-08-12T19:03:28Z",
      "side": 1,
      "message": "Will Floss have a similar Adapter implementation? If so it could be a good candidate to have an interface for this too. If not, the way this CL wraps things needed for tests in `Bluetooth` also LGTM!",
      "revId": "9b2d02f9106c3e00d73c0e78b93ad457fbffa027",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c79f205_4f040301",
        "filename": "src/chromiumos/tast/local/bluetooth/bluez.go",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 1525637
      },
      "writtenOn": "2022-08-15T04:56:41Z",
      "side": 1,
      "message": "On Floss side we only need the manager object to enable adapters and check adapter status, thus we don\u0027t need to hold the object path for every adapters at least for now.",
      "parentUuid": "ef14ad2e_41f0ea31",
      "revId": "9b2d02f9106c3e00d73c0e78b93ad457fbffa027",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e22813e5_675577f8",
        "filename": "src/chromiumos/tast/local/bluetooth/floss.go",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1525637
      },
      "writtenOn": "2022-08-15T04:56:41Z",
      "side": 1,
      "message": "I\u0027d lean to placing these Floss implementation in another package (how about bluetooth/floss/ ?). There will be naming conflicts such as: bluetooth.Enable vs bluetooth.Bluez{}.Enable vs bluetooth.Floss{}.Enable. It is confusing because the first two are the same while the last one is not.",
      "revId": "9b2d02f9106c3e00d73c0e78b93ad457fbffa027",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df7ebb7b_a6884ac5",
        "filename": "src/chromiumos/tast/local/bluetooth/floss.go",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1310383
      },
      "writtenOn": "2022-08-15T20:42:53Z",
      "side": 1,
      "message": "That SGTM, perhaps to start we could have a Floss package but leave the BlueZ as-is and revisit it in the future?",
      "parentUuid": "e22813e5_675577f8",
      "revId": "9b2d02f9106c3e00d73c0e78b93ad457fbffa027",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "800d4fdc_c7c92188",
        "filename": "src/chromiumos/tast/local/bluetooth/floss.go",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1525637
      },
      "writtenOn": "2022-08-16T02:46:35Z",
      "side": 1,
      "message": "Sounds good!",
      "parentUuid": "df7ebb7b_a6884ac5",
      "revId": "9b2d02f9106c3e00d73c0e78b93ad457fbffa027",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "825c74ce_c2cd6c4a",
        "filename": "src/chromiumos/tast/local/bundles/cros/bluetooth/fixture.go",
        "patchSetId": 4
      },
      "lineNbr": 96,
      "author": {
        "id": 1525637
      },
      "writtenOn": "2022-08-15T04:56:41Z",
      "side": 1,
      "message": "It always calls Bluez\u0027s Enable(). Is it possible to init a bluetooth.TestParams in the parent fixture and get/use it from this fixture? The test body may call the bluetooth methods with the same approach then.",
      "range": {
        "startLine": 96,
        "startChar": 11,
        "endLine": 96,
        "endChar": 27
      },
      "revId": "9b2d02f9106c3e00d73c0e78b93ad457fbffa027",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64ec441b_0458ce36",
        "filename": "src/chromiumos/tast/local/bundles/cros/bluetooth/fixture.go",
        "patchSetId": 4
      },
      "lineNbr": 96,
      "author": {
        "id": 1310383
      },
      "writtenOn": "2022-08-15T20:42:53Z",
      "side": 1,
      "message": "Ah, thank you for catching this! We definitely can do that from the other fixture methods since they have access to the testing state, but it looks like this method doesn\u0027t. Kyle, do you think it would be reasonable to have the Reset() method of this fixture not enable Bluetooth? This would mean that tests using this fixture cannot assume that Bluetooth will be enabled, but that seems okay given that Tast tests already are written defensively.\n\nIf yes, then we could remove this snippet and then reach into the testing state in SetUp and TearDown. If this doesn\u0027t work, then I think the easiest approach will be to duplicate the fixtures and the tests for Floss.",
      "parentUuid": "825c74ce_c2cd6c4a",
      "range": {
        "startLine": 96,
        "startChar": 11,
        "endLine": 96,
        "endChar": 27
      },
      "revId": "9b2d02f9106c3e00d73c0e78b93ad457fbffa027",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5358f34d_59e8ec2c",
        "filename": "src/chromiumos/tast/local/bundles/cros/bluetooth/fixture.go",
        "patchSetId": 4
      },
      "lineNbr": 96,
      "author": {
        "id": 1390967
      },
      "writtenOn": "2022-08-18T17:32:23Z",
      "side": 1,
      "message": "I see two options here:\n\n1. Add the bluetooth params you need for bluez/floss distinction to the `chromeLoggedInWithBluetoothEnabled` struct, and assign the necessary values in the fixture `Setup` function. That way you can access whatever you need within this `Reset` function. You\u0027d probably need to unify the fixture `Impl`s to all use the same struct instead of directly reusing `chrome.NewLoggedInFixture`.\n\n2. Remove it from `Reset`, but deal with bluetooth state cleanup in `PreTest` and `PostTest` instead.\n\nI think either of these should be reasonable and accomplish what you need",
      "parentUuid": "64ec441b_0458ce36",
      "range": {
        "startLine": 96,
        "startChar": 11,
        "endLine": 96,
        "endChar": 27
      },
      "revId": "9b2d02f9106c3e00d73c0e78b93ad457fbffa027",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}