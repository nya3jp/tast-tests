{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "75686760_d6a5a606",
        "filename": "src/chromiumos/tast/local/bundles/cros/video/decode_encode_accel_perf.go",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1273510
      },
      "writtenOn": "2021-12-21T01:10:13Z",
      "side": 1,
      "message": "Hmm, it just occurred to me: this test starts two separate processes (one for decoding and one for encoding). Having/removing the lock should only have a significant impact for decodes and encodes that happen in the same process on different threads. When they\u0027re on different processes, having/removing the lock should make no significant difference because they are working on separate address spaces.\n\nTherefore, I would leave this file unchanged, and we can rely on the WebRTC tests for measuring the performance of simultaneous encodes and decodes.\n\nFor tast tests that use video_decode_accelerator_tests or video_encode_accelerator_tests (or the perf variants), the situation is a bit trickier. For example, take a look at [1] which gets invoked by tests like video.DecodeAccelVDPerf.*. It looks like this only runs two of the Chrome tests [2]:\n\n1) VideoDecoderTest_MeasureUncappedPerformance.\n2) VideoDecoderTest_MeasureCappedPerformance.\n\nHowever, the only test that\u0027s interesting for our purposes in that file is VideoDecoderTest_MeasureUncappedPerformance_MultipleConcurrentDecoders [3] which, AFAICT, is not currently being run by any tast test. Therefore, you would need to add code to run this and collect the results.\n\nYou can leave this for a follow-up CL though so that this CL doesn\u0027t depend on the Chromium one that you have in flight.\n\n[1] https://source.chromium.org/chromiumos/chromiumos/codesearch/+/main:src/platform/tast-tests/src/chromiumos/tast/local/media/decoding/accel_video.go;l\u003d174;drc\u003d5fcf25424fd4f5aa2968085cb7be57e2bbd1c9c0\n[2] https://source.chromium.org/chromium/chromium/src/+/main:media/gpu/video_decode_accelerator_perf_tests.cc;l\u003d352-383;drc\u003de11370bf5567b30ad117f5f20bc5d16e8e9cfaf2\n[3] https://source.chromium.org/chromium/chromium/src/+/main:media/gpu/video_decode_accelerator_perf_tests.cc;l\u003d385-422;drc\u003de11370bf5567b30ad117f5f20bc5d16e8e9cfaf2",
      "revId": "166575283f50bfd5b389423905b011e872d92467",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3be61ce3_658fc367",
        "filename": "src/chromiumos/tast/local/bundles/cros/webrtc/rtc_peer_connection_perf.go",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1273510
      },
      "writtenOn": "2021-12-21T01:10:13Z",
      "side": 1,
      "message": "We may not want to spend lab resources running the variants on devices that don\u0027t support removing the global lock. Also, any new variant will make noise for the video guard.\n\nWe can achieve that by introducing a new software dep based on the video_cards_iHD USE flag (this flag is set by all devices that use the iHD driver).\n\nTake a look at [1] for how to add such a new feature. I\u0027m thinking that the new feature could be named \"ihd\". Then, for each of the variants, you could specify:\n\n  ExtraSoftwareDeps: []string{\"ihd\"}\n\n[1] https://chromium.googlesource.com/chromiumos/platform/tast/+/HEAD/docs/test_dependencies.md#new-features",
      "revId": "166575283f50bfd5b389423905b011e872d92467",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43eb7012_58e7405a",
        "filename": "src/chromiumos/tast/local/media/pre/fixture.go",
        "patchSetId": 1
      },
      "lineNbr": 317,
      "author": {
        "id": 1273510
      },
      "writtenOn": "2021-12-21T01:10:13Z",
      "side": 1,
      "message": "disabled if applicable",
      "range": {
        "startLine": 317,
        "startChar": 95,
        "endLine": 317,
        "endChar": 102
      },
      "revId": "166575283f50bfd5b389423905b011e872d92467",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bf40f6e_2fc52647",
        "filename": "src/chromiumos/tast/local/media/pre/fixture.go",
        "patchSetId": 1
      },
      "lineNbr": 317,
      "author": {
        "id": 1273510
      },
      "writtenOn": "2021-12-21T01:10:13Z",
      "side": 1,
      "message": "s/vaapi-wrapper/VA-API/\n\n(because the lock also affects classes other than the VaapiWrapper).",
      "range": {
        "startLine": 317,
        "startChar": 73,
        "endLine": 317,
        "endChar": 85
      },
      "revId": "166575283f50bfd5b389423905b011e872d92467",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b0c9ede_01ea400b",
        "filename": "src/chromiumos/tast/local/media/pre/fixture.go",
        "patchSetId": 1
      },
      "lineNbr": 318,
      "author": {
        "id": 1273510
      },
      "writtenOn": "2021-12-21T01:10:13Z",
      "side": 1,
      "message": "chromeos-gfx-video",
      "range": {
        "startLine": 318,
        "startChar": 22,
        "endLine": 318,
        "endChar": 39
      },
      "revId": "166575283f50bfd5b389423905b011e872d92467",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}