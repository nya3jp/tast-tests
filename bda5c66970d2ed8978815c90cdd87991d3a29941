{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "055eecdc_f22fac06",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1496803
      },
      "writtenOn": "2022-06-14T17:18:51Z",
      "side": 1,
      "message": "Hi Matt,\nSorry that this fell through the crack. \nIt is smart that you moved the function to chrome package so we can leverage `cfg, err :\u003d config.NewConfig(opts)` to make ToOptions more testable.\nThanks,\nJonathan",
      "revId": "bda5c66970d2ed8978815c90cdd87991d3a29941",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e6d5356_5109a80e",
        "filename": "src/chromiumos/tast/local/chrome/options_converter.go",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2022-06-20T12:58:23Z",
      "side": 1,
      "message": "Could you move this to services/cros/ui package?\nI don\u0027t think chrome package would like to depend on it.",
      "revId": "bda5c66970d2ed8978815c90cdd87991d3a29941",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bab07231_785c1966",
        "filename": "src/chromiumos/tast/local/chrome/options_converter.go",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1450817
      },
      "writtenOn": "2022-06-21T01:41:51Z",
      "side": 1,
      "message": "The code was originally in the services/cros/ui package, but I moved it here because it was untestable in there. This is the comment that used to be in the code which I was resolving.\n\n// TODO(jonfan): Find a creative way to unit test this function. The underlying object Config and MutableConfig are private. chrome.Option are callback functions that work on Config, and they cannot be compared easily without having access to Config or its Mock Interface.",
      "parentUuid": "3e6d5356_5109a80e",
      "revId": "bda5c66970d2ed8978815c90cdd87991d3a29941",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8773b191_9b779d81",
        "filename": "src/chromiumos/tast/local/chrome/options_converter.go",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2022-06-21T02:30:05Z",
      "side": 1,
      "message": "I see. So it\u0027s a limitation of function.\nHow about switching it to wrapper struct?\nActually, we were thinking to do so for sharing the args with lacros.\nFYI: edcourtney@, hyungtaekim@, neis@.",
      "parentUuid": "bab07231_785c1966",
      "revId": "bda5c66970d2ed8978815c90cdd87991d3a29941",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df8f8408_a7cdf197",
        "filename": "src/chromiumos/tast/local/chrome/options_converter.go",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1450817
      },
      "writtenOn": "2022-06-21T03:11:24Z",
      "side": 1,
      "message": "IMO, a wrapper struct is also a hacky solution to this that avoids the underlying problem.\n\nIs there any reason why chrome.NewConfig / chrome.Config needs to be internal? There\u0027s nothing dangerous you can do with it, as it only contains getters (MutableConfig is a separate type).",
      "parentUuid": "8773b191_9b779d81",
      "revId": "bda5c66970d2ed8978815c90cdd87991d3a29941",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3ba1dd3_3bf4707d",
        "filename": "src/chromiumos/tast/local/chrome/options_converter.go",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2022-06-21T05:58:38Z",
      "side": 1,
      "message": "It\u0027s internal implementation details, rather than public API for chrome package.\nWhat cros/ui needs is public API i.e. chrome.Option, so making it testable sounds more reasonable to me. Thoughts?",
      "parentUuid": "df8f8408_a7cdf197",
      "revId": "bda5c66970d2ed8978815c90cdd87991d3a29941",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6a82334_2da14d41",
        "filename": "src/chromiumos/tast/local/chrome/options_converter.go",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1450817
      },
      "writtenOn": "2022-06-21T06:22:49Z",
      "side": 1,
      "message": "You\u0027re correct that what we only use public APIs for the non-test code. We only use the private stuff in the tests to validate that the options generated are correct.\n\nWhat we need is some way of retrieving the value of the config generated by a set of options, but we only need it for tests. I\u0027m happy to use whatever strategy will achieve this.\n\nI\u0027m not too familiar with go best practices, but IMO the best solution, if we were using java, for example, would be to expose chrome.Config with @VisibleForTesting. We could do something like \"type ConfigForTestingOnly \u003d internal.Config\", but I don\u0027t know if that\u0027s considered reasonable in go?\n\nWhich approach do you think is the most appropriate one to take?",
      "parentUuid": "b3ba1dd3_3bf4707d",
      "revId": "bda5c66970d2ed8978815c90cdd87991d3a29941",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6cdcb92_8ef4f9bd",
        "filename": "src/chromiumos/tast/local/chrome/options_converter.go",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2022-06-22T14:15:38Z",
      "side": 1,
      "message": "I\u0027d rather to avoid stepping into chrome package internals on testing cros/ui.\n\nThe responsibility of the cros/ui is to convert proto into chrome.Option.\nThus, my recommendation is to focus on it, i.e., introducing a way to check the equality of chrome.Option. Converting it into struct achieve it, and thus is my recommendation. If you can come up with other ideas, I\u0027m open to discuss.\nActually, proto API looks designed to be mapped into chrome.Option, i.e., it is just straightforward API conversion, and your utility looks focusing on it.\n\nConverting chrome.Option to chrome.Config, which is internal as you find, is the responsibility of the chrome package. If you\u0027d like to add tests to convert chrome.Option to chrome.Config, that can be added as a unittest of chrome package, without needing to export any internal stuff.",
      "parentUuid": "f6a82334_2da14d41",
      "revId": "bda5c66970d2ed8978815c90cdd87991d3a29941",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fc585e4_be7b24b3",
        "filename": "src/chromiumos/tast/local/chrome/options_converter.go",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1450817
      },
      "writtenOn": "2022-06-24T01:07:56Z",
      "side": 1,
      "message": "Checking the equality of chrome.Option won\u0027t work here. The type of chrome.Option is func(cfg *MutableConfig) error. There\u0027s no way to compare that without looking at the underlying MutableConfig type. Also, we don\u0027t output a single option, but a slice of options, and we don\u0027t guarantee the order.\n\nI think a more reasonable solution might be to simply access NewConfig. Then, in the test, we could assert that deepEqual(NewConfig(ToOptions(proto)), NewConfig(expected_opts)). This would avoid accessing any implementation details of Config, but still test it just as thoroughly, so it\u0027d be robust to any change to implementation of Config.",
      "parentUuid": "b6cdcb92_8ef4f9bd",
      "revId": "bda5c66970d2ed8978815c90cdd87991d3a29941",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1df7b59_b21e35d2",
        "filename": "src/chromiumos/tast/local/chrome/options_converter.go",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2022-06-24T12:49:39Z",
      "side": 1,
      "message": "\u003e Checking the equality of chrome.Option won\u0027t work here. The type of chrome.Option is func(cfg *MutableConfig) error. There\u0027s no way to compare that without looking at the underlying MutableConfig type. Also, we don\u0027t output a single option, but a slice of options, and we don\u0027t guarantee the order.\n\nYes, but it is implementation details of chrome.Option.\nAnd that\u0027s why I recommended to change the chrome.Option.\n\n\n\u003e \n\u003e I think a more reasonable solution might be to simply access NewConfig.\n\nAs long as chrome.Option can be compared (as recommended above), I think we should prefer encapsulation still.\n\n\u003e Then, in the test, we could assert that deepEqual(NewConfig(ToOptions(proto)), NewConfig(expected_opts)). This would avoid accessing any implementation details of Config, but still test it just as thoroughly, so it\u0027d be robust to any change to implementation of Config.\n\ncros/ui responsibility looks converting between proto and chrome.Option to me, still.",
      "parentUuid": "2fc585e4_be7b24b3",
      "revId": "bda5c66970d2ed8978815c90cdd87991d3a29941",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "662b5cb4_4401c145",
        "filename": "src/chromiumos/tast/local/chrome/options_converter.go",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1450817
      },
      "writtenOn": "2022-06-27T02:13:04Z",
      "side": 1,
      "message": "I\u0027d say that changing chrome.Option implementation details is well out of scope of this CL, and it\u0027s not something I\u0027m comfortable doing either. If someone else is gonna do it, I\u0027ll happily use it, but until then I\u0027d still like to be able to submit this code.\n\nI honestly don\u0027t think the fact that I\u0027m adding the tests in the chrome internal package actually matters that much - other than the principle of \"it\u0027s not really a part of that package\", which I don\u0027t believe really holds water since it doesn\u0027t actually affect anything. If it\u0027s really that much of a problem, I can just remove this test and bring it back into the old package.",
      "parentUuid": "b1df7b59_b21e35d2",
      "revId": "bda5c66970d2ed8978815c90cdd87991d3a29941",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d67a15d_f9140027",
        "filename": "src/chromiumos/tast/local/chrome/options_converter.go",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2022-06-30T07:16:41Z",
      "side": 1,
      "message": "\u003e I\u0027d say that changing chrome.Option implementation details is well out of scope of this CL, and it\u0027s not something I\u0027m comfortable doing either. If someone else is gonna do it, I\u0027ll happily use it, but until then I\u0027d still like to be able to submit this code.\n\u003e \n\nUnfortunately, I cannot say we can break the encapsulation comfortably, considering long term maintenance.\nI believe I provided the background of the problem of this approach, and how to solve it together. I couldn\u0027t find any blocker to make it happen. If you think you need further discussion, please let me know.\n\n\u003e I honestly don\u0027t think the fact that I\u0027m adding the tests in the chrome internal package actually matters that much - other than the principle of \"it\u0027s not really a part of that package\", which I don\u0027t believe really holds water since it doesn\u0027t actually affect anything. If it\u0027s really that much of a problem, I can just remove this test and bring it back into the old package.",
      "parentUuid": "662b5cb4_4401c145",
      "revId": "bda5c66970d2ed8978815c90cdd87991d3a29941",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4bef3ae_8a2abb11",
        "filename": "src/chromiumos/tast/local/chrome/options_converter.go",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1450817
      },
      "writtenOn": "2022-07-01T00:18:14Z",
      "side": 1,
      "message": "The option I proposed doesn\u0027t break encapsulation in a way that affects maintainence at all, though (assert that deepEqual(NewConfig(ToOptions(proto)), NewConfig(expected_opts))). The only private thing we require access to is NewConfig, and only in the test. While the implementation details of config might change, the existince of the NewConfig function is unlikely to change.\n\nIf you\u0027d like, I can put the test in the chrome internals package and the actual code outside of it.",
      "parentUuid": "7d67a15d_f9140027",
      "revId": "bda5c66970d2ed8978815c90cdd87991d3a29941",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}