{
  "comments": [
    {
      "key": {
        "uuid": "ba9d6c14_b01937ec",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 17
      },
      "lineNbr": 71,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2019-11-19T15:06:51Z",
      "side": 1,
      "message": "I don\u0027t think this pattern works. Could you find my comment in the PS10 again?",
      "range": {
        "startLine": 71,
        "startChar": 35,
        "endLine": 71,
        "endChar": 49
      },
      "revId": "37a948885bfbacbea6fb9a4256138f5bd22e8c7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "361c4656_7c62b1a9",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 17
      },
      "lineNbr": 71,
      "author": {
        "id": 1313390
      },
      "writtenOn": "2019-11-19T17:27:20Z",
      "side": 1,
      "message": "I have tested both many times and this works. I have enrolled with it locally many times. To be clear here are the two I am testing:\n\nYours:\n\n    re :\u003d regexp.MustCompile(`([^@]+)\\.[^@]*$`)\n    m :\u003d strings.Replace(re.FindStringSubmatch(s), \".\", \"\", -1)\n\n\nCurrent:\n\n    r2 :\u003d regexp.MustCompile(`([^@]+)\\.[.@]*`)\n    m :\u003d strings.Replace(r2.FindString(s), \".\", \"\", -1)\n\n\nWhen I test these with the following strings:\n\n    s :\u003d \"example1@example2@managedchrome.com.com\"\n    s2 :\u003d \"normal@something.com\"\n\n\nboth return:\n\n\"managedchromecom\" and \"something\"\n\n\nBoth work. The only difference I can tell is an string (ie no @ sign), your regex will panic and bomb, mine will return an empty str. IF this is the proper behavior I will change to yours.",
      "parentUuid": "ba9d6c14_b01937ec",
      "range": {
        "startLine": 71,
        "startChar": 35,
        "endLine": 71,
        "endChar": 49
      },
      "revId": "37a948885bfbacbea6fb9a4256138f5bd22e8c7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e761227e_e9f94412",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 17
      },
      "lineNbr": 71,
      "author": {
        "id": 1313390
      },
      "writtenOn": "2019-11-21T21:57:37Z",
      "side": 1,
      "message": "Clarification on the statement above:\n\n\nFor \"Yours\" I am running:\n\n\n    s2 :\u003d \"anexample\"\n    re :\u003d regexp.MustCompile(`([^@]+)\\.[^@]*$`)\n    m2 :\u003d re.FindStringSubmatch(s2)\n    fmt.Printf(\"h2: %s\\n\", strings.Replace(m2[1], \".\", \"\", -1))\n\nThe error is being caused by the indexing into an empty array.\n\nI can add an error check to quickly exit in this cause (ie if len \u003d\u003d 0).\nBetter, It might just be easier to add a quick error check in this function to reject domains without an \"@\" and \".\". Regardless if that happens either regex seems to work. E.g.:\n\n\n\n    s1 :\u003d \"normal@something.abc123.com\"\n    s2 :\u003d \"normal@something.com\"\n    r :\u003d regexp.MustCompile(`([^@]+)\\.[.@]*`)\n    fmt.Println(\"d1:\", strings.Replace(r.FindString(s1), \".\", \"\", -1))\n    fmt.Println(\"d2:\", strings.Replace(r.FindString(s2), \".\", \"\", -1))\n\u003e\u003e\u003ed1: somethingabc123\n\u003e\u003e\u003ed2: something",
      "parentUuid": "361c4656_7c62b1a9",
      "range": {
        "startLine": 71,
        "startChar": 35,
        "endLine": 71,
        "endChar": 49
      },
      "revId": "37a948885bfbacbea6fb9a4256138f5bd22e8c7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e34c1718_57a4f5a0",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 17
      },
      "lineNbr": 71,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2019-11-22T14:13:44Z",
      "side": 1,
      "message": "\u003e The error is being caused by the indexing into an empty array.\n\nyes, and actually I wrote that the error check is needed:\n\nhttps://chromium-review.googlesource.com/c/chromiumos/platform/tast-tests/+/1829297/18#message-6959e19879bb776003f70c732cf92c6f0e35da7d\n\n\u003e Better, It might just be easier to add a quick error check in this function to reject domains without an \"@\" and \".\". \n\nThat\u0027s fine, if you\u0027d like.\nIIUC, the expected input is exact one @. Actually, my first recommendation was to return an error if it is not the case (i.e., zero, two or more @ is contained).\n\n\u003e     r :\u003d regexp.MustCompile(`([^@]+)\\.[.@]*`)\n\nthis pattern is not the pattern you said anyways.\nIt is; non @ chars, followed by a dot, followed by arbitrary number of dot or @.\nCould you fix?",
      "parentUuid": "e761227e_e9f94412",
      "range": {
        "startLine": 71,
        "startChar": 35,
        "endLine": 71,
        "endChar": 49
      },
      "revId": "37a948885bfbacbea6fb9a4256138f5bd22e8c7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55108796_01687b63",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 17
      },
      "lineNbr": 793,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2019-11-19T15:06:51Z",
      "side": 1,
      "message": "you don\u0027t need \"str\" suffix. Could you remove for simplicity?",
      "range": {
        "startLine": 793,
        "startChar": 62,
        "endLine": 793,
        "endChar": 75
      },
      "revId": "37a948885bfbacbea6fb9a4256138f5bd22e8c7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "101ba150_30845e42",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 17
      },
      "lineNbr": 793,
      "author": {
        "id": 1313390
      },
      "writtenOn": "2019-11-19T17:27:20Z",
      "side": 1,
      "message": "Then it will fight with the func userDomain() for a name. It is more clear this way (esp on line 818) what is happening.",
      "parentUuid": "55108796_01687b63",
      "range": {
        "startLine": 793,
        "startChar": 62,
        "endLine": 793,
        "endChar": 75
      },
      "revId": "37a948885bfbacbea6fb9a4256138f5bd22e8c7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}