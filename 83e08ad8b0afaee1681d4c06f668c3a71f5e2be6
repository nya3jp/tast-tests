{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "dc2a2579_48c71d70",
        "filename": "src/chromiumos/tast/local/chrome/uiauto/automation.go",
        "patchSetId": 1
      },
      "lineNbr": 472,
      "author": {
        "id": 1508900
      },
      "writtenOn": "2022-07-25T01:37:41Z",
      "side": 1,
      "message": "It is better to use pointer to be consistent with other methods like `Location`",
      "range": {
        "startLine": 472,
        "startChar": 107,
        "endLine": 472,
        "endChar": 118
      },
      "revId": "83e08ad8b0afaee1681d4c06f668c3a71f5e2be6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "27bb0dd7_21a9fa85",
        "filename": "src/chromiumos/tast/local/chrome/uiauto/automation.go",
        "patchSetId": 1
      },
      "lineNbr": 472,
      "author": {
        "id": 1395692
      },
      "writtenOn": "2022-07-25T01:57:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dc2a2579_48c71d70",
      "range": {
        "startLine": 472,
        "startChar": 107,
        "endLine": 472,
        "endChar": 118
      },
      "revId": "83e08ad8b0afaee1681d4c06f668c3a71f5e2be6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32b6134f_320121ee",
        "filename": "src/chromiumos/tast/local/chrome/uiauto/automation.go",
        "patchSetId": 1
      },
      "lineNbr": 474,
      "author": {
        "id": 1508900
      },
      "writtenOn": "2022-07-25T01:37:41Z",
      "side": 1,
      "message": "in case of errors, returning `nil` makes more sense.",
      "range": {
        "startLine": 474,
        "startChar": 9,
        "endLine": 474,
        "endChar": 22
      },
      "revId": "83e08ad8b0afaee1681d4c06f668c3a71f5e2be6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9256f4cc_9cc89b73",
        "filename": "src/chromiumos/tast/local/chrome/uiauto/automation.go",
        "patchSetId": 1
      },
      "lineNbr": 474,
      "author": {
        "id": 1395692
      },
      "writtenOn": "2022-07-25T01:57:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "32b6134f_320121ee",
      "range": {
        "startLine": 474,
        "startChar": 9,
        "endLine": 474,
        "endChar": 22
      },
      "revId": "83e08ad8b0afaee1681d4c06f668c3a71f5e2be6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "605a5500_0604e738",
        "filename": "src/chromiumos/tast/local/chrome/uiauto/automation.go",
        "patchSetId": 1
      },
      "lineNbr": 484,
      "author": {
        "id": 1508900
      },
      "writtenOn": "2022-07-25T01:37:41Z",
      "side": 1,
      "message": "why the function only works with `inlineTextBox`? I didn\u0027t find the restriction in https://developer.chrome.com/docs/extensions/reference/automation/#type-AutomationNode",
      "range": {
        "startLine": 484,
        "startChar": 21,
        "endLine": 484,
        "endChar": 34
      },
      "revId": "83e08ad8b0afaee1681d4c06f668c3a71f5e2be6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c46442e9_2a714489",
        "filename": "src/chromiumos/tast/local/chrome/uiauto/automation.go",
        "patchSetId": 1
      },
      "lineNbr": 484,
      "author": {
        "id": 1395692
      },
      "writtenOn": "2022-07-25T01:57:40Z",
      "side": 1,
      "message": "Tested with BoundsForRange(ctx, inputField.Finder(), 0, 2), the js returns undefined. Have to explicitly call BoundsForRange(ctx, nodewith.Role(role.InlineTextBox).Ancestor(inputField.Finder()), 0, 2)\n\nTo avoid readers get confused how to use the function, hard limit the usage should be better.",
      "parentUuid": "605a5500_0604e738",
      "range": {
        "startLine": 484,
        "startChar": 21,
        "endLine": 484,
        "endChar": 34
      },
      "revId": "83e08ad8b0afaee1681d4c06f668c3a71f5e2be6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ead0e8f6_22eab33c",
        "filename": "src/chromiumos/tast/local/chrome/uiauto/automation.go",
        "patchSetId": 1
      },
      "lineNbr": 484,
      "author": {
        "id": 1508900
      },
      "writtenOn": "2022-07-25T02:33:31Z",
      "side": 1,
      "message": "This restriction is misleading to users that it sounds like an issue of the API while it is not.\n\nInstead of adding the restriction, how about returning the error with informative logs, something like:\n```\n\"boundsForRange returns undefined. Possibly the node is not a text role, considering explicitly using node with text-based roles, i.e., role.InlineTextBox, role.StaticText, etc.\"\n```\n\nI think the API should work for many other text-based roles as well.",
      "parentUuid": "c46442e9_2a714489",
      "range": {
        "startLine": 484,
        "startChar": 21,
        "endLine": 484,
        "endChar": 34
      },
      "revId": "83e08ad8b0afaee1681d4c06f668c3a71f5e2be6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0f754da_f3995198",
        "filename": "src/chromiumos/tast/local/chrome/uiauto/automation.go",
        "patchSetId": 1
      },
      "lineNbr": 484,
      "author": {
        "id": 1395692
      },
      "writtenOn": "2022-07-25T03:01:55Z",
      "side": 1,
      "message": "According to https://chromium.googlesource.com/chromium/src.git/+/HEAD/docs/accessibility/overview.md#text-bounding-boxes\n\nThe char offset information only exists on InlineTextBox. StaticText and other text nodes are broken down to InlineTextBox in my understanding. I reckon limiting the usage is better than leave the raw error message to users to do their own investigation.",
      "parentUuid": "ead0e8f6_22eab33c",
      "range": {
        "startLine": 484,
        "startChar": 21,
        "endLine": 484,
        "endChar": 34
      },
      "revId": "83e08ad8b0afaee1681d4c06f668c3a71f5e2be6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23789ece_4bd6eb04",
        "filename": "src/chromiumos/tast/local/chrome/uiauto/automation.go",
        "patchSetId": 1
      },
      "lineNbr": 484,
      "author": {
        "id": 1508900
      },
      "writtenOn": "2022-07-25T03:30:23Z",
      "side": 1,
      "message": "Not leaving row error message, it will be raw error message together with your suggestion (i.e., try using inlineText role).\n\nStaticText may or may not work, but there are still some other roles like labelText. Since you are providing the informative hints in case of errors, the user doesn\u0027t need to do their investigation if inlineText works for them.\n\nConsidering the following two scenarios, limiting the usage in Tast is actually bad:\n1, Assume the user is using a node role other than inlineText, and it is compatible with `boundForRange`. The expected behavior is that the user should not encounter any error, but your code here returns an error during the flight check. \n\n2, The API `boundForRange` might be improved to be compatible with more node roles. This could happen without any notice of the Tast method. Similar to 1, many WAI behaviors will be treated as errors.\n\nUnless you are sure (i.e. has a reference to the original API) that `inlineText` is the only option, I think returning whatever the original API returns is the way to do it, and providing informative logs in errors is as helpful as hard-limiting the usage, without jeopardizing the flexibility.",
      "parentUuid": "f0f754da_f3995198",
      "range": {
        "startLine": 484,
        "startChar": 21,
        "endLine": 484,
        "endChar": 34
      },
      "revId": "83e08ad8b0afaee1681d4c06f668c3a71f5e2be6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2ea4c34_4331b679",
        "filename": "src/chromiumos/tast/local/chrome/uiauto/automation.go",
        "patchSetId": 1
      },
      "lineNbr": 485,
      "author": {
        "id": 1508900
      },
      "writtenOn": "2022-07-25T01:37:41Z",
      "side": 1,
      "message": "adding an error field to the res struct looks weird, could you just throw an error with `throw`?",
      "range": {
        "startLine": 485,
        "startChar": 4,
        "endLine": 485,
        "endChar": 81
      },
      "revId": "83e08ad8b0afaee1681d4c06f668c3a71f5e2be6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06fd3119_a098daee",
        "filename": "src/chromiumos/tast/local/chrome/uiauto/automation.go",
        "patchSetId": 1
      },
      "lineNbr": 485,
      "author": {
        "id": 1395692
      },
      "writtenOn": "2022-07-25T01:57:40Z",
      "side": 1,
      "message": "Ye, I implemented the function in a new approach. LGTY?",
      "parentUuid": "e2ea4c34_4331b679",
      "range": {
        "startLine": 485,
        "startChar": 4,
        "endLine": 485,
        "endChar": 81
      },
      "revId": "83e08ad8b0afaee1681d4c06f668c3a71f5e2be6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6d73e0d8_8dbd81e0",
        "filename": "src/chromiumos/tast/local/chrome/uiauto/automation.go",
        "patchSetId": 1
      },
      "lineNbr": 485,
      "author": {
        "id": 1508900
      },
      "writtenOn": "2022-07-25T02:33:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "06fd3119_a098daee",
      "range": {
        "startLine": 485,
        "startChar": 4,
        "endLine": 485,
        "endChar": 81
      },
      "revId": "83e08ad8b0afaee1681d4c06f668c3a71f5e2be6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}