{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0479b716_f61a4440",
        "filename": "src/chromiumos/tast/remote/bundles/cros/autoupdate/util/updatelib.go",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1400492
      },
      "writtenOn": "2022-05-25T10:47:54Z",
      "side": 1,
      "message": "I think it\u0027d be safer and cleaner to use `defer` and add a cleanup function that compares current and previous version, and rolls back if they are not the same.\n\nOtherwise the next person adding a function call here that has an error case may miss to rollback before returning.",
      "range": {
        "startLine": 145,
        "startChar": 20,
        "endLine": 145,
        "endChar": 29
      },
      "revId": "1f2b9c38dc2b2f0671a26ca46acb16cee2ef81e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3f17b4e_f942e504",
        "filename": "src/chromiumos/tast/remote/bundles/cros/autoupdate/util/updatelib.go",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1404997
      },
      "writtenOn": "2022-05-27T03:17:37Z",
      "side": 1,
      "message": "one drama with that is that we then can\u0027t propagate rollback errors to the test level without bringing in the test the state dependency which tast folks are generally not happy with. given that this is supposed to be superseded by autoupdate fixture to reset the state in between the tests, is this really necessary to overcomplicate the current state until that is ready?",
      "parentUuid": "0479b716_f61a4440",
      "range": {
        "startLine": 145,
        "startChar": 20,
        "endLine": 145,
        "endChar": 29
      },
      "revId": "1f2b9c38dc2b2f0671a26ca46acb16cee2ef81e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e04bde66_9c5516f7",
        "filename": "src/chromiumos/tast/remote/bundles/cros/autoupdate/util/updatelib.go",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1400492
      },
      "writtenOn": "2022-05-30T08:51:48Z",
      "side": 1,
      "message": "I think you can use `testing.ContextLog` to log errors without passing state:\nhttps://source.corp.google.com/chromeos_public/src/platform/tast/docs/writing_tests.md;l\u003d1594?q\u003d%22testing.context%22\u0026sq\u003dpackage:chromeos_public\n\nNot sure if adding a deferred method would make it more complicated, but since it\u0027s just a temporary solution I\u0027m not going to insist on doing that. Maybe just add a comment then that we *must* call rollback before leaving the function?",
      "parentUuid": "b3f17b4e_f942e504",
      "range": {
        "startLine": 145,
        "startChar": 20,
        "endLine": 145,
        "endChar": 29
      },
      "revId": "1f2b9c38dc2b2f0671a26ca46acb16cee2ef81e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1523d88b_92dc579a",
        "filename": "src/chromiumos/tast/remote/bundles/cros/autoupdate/util/updatelib.go",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 1400492
      },
      "writtenOn": "2022-05-25T10:47:54Z",
      "side": 1,
      "message": "In order to have a cleanup function, you\u0027ll probably need to extract this one into a separate function that runs after your deferred cleanup function.",
      "range": {
        "startLine": 176,
        "startChar": 1,
        "endLine": 176,
        "endChar": 28
      },
      "revId": "1f2b9c38dc2b2f0671a26ca46acb16cee2ef81e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:approval_code-owners"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "1f2b9c38dc2b2f0671a26ca46acb16cee2ef81e6",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "1f2b9c38dc2b2f0671a26ca46acb16cee2ef81e6",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "1f2b9c38dc2b2f0671a26ca46acb16cee2ef81e6",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Verified=MAX","label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "1f2b9c38dc2b2f0671a26ca46acb16cee2ef81e6",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}