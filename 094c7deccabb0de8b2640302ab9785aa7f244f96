{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "19dafdde_d8c23425",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1293547
      },
      "writtenOn": "2021-01-25T09:51:27Z",
      "side": 1,
      "message": "Hello, please help me review this change. Thank you.",
      "revId": "094c7deccabb0de8b2640302ab9785aa7f244f96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6d9aa0b_927891ad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2021-01-25T17:59:55Z",
      "side": 1,
      "message": "BTW, could you run tryjobs on sending review?",
      "revId": "094c7deccabb0de8b2640302ab9785aa7f244f96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e2159da_c4f2726e",
        "filename": "src/chromiumos/tast/common/hwsec/tpm_manager_binary.go",
        "patchSetId": 16
      },
      "lineNbr": 100,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2021-01-25T17:57:26Z",
      "side": 1,
      "message": "In general added functions are conflicting with the explanation of TpmManagerBinary.\n\n\u003d\u003d quote \u003d\u003d\nTpmManagerBinary is used to interact with the tpm_managerd process over\n\u0027tpm_manager_client\u0027 executable.\n\u003d\u003d quote end \u003d\u003d\nbut these are not.\n\nAny alternative places to encapsulate them?",
      "revId": "094c7deccabb0de8b2640302ab9785aa7f244f96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08503c2c_11a2f1ed",
        "filename": "src/chromiumos/tast/common/hwsec/tpm_manager_binary.go",
        "patchSetId": 16
      },
      "lineNbr": 100,
      "author": {
        "id": 1293547
      },
      "writtenOn": "2021-01-26T04:08:05Z",
      "side": 1,
      "message": "Yeah, seems we should put all of these functions into utility_tpm_manager_binary.go",
      "parentUuid": "1e2159da_c4f2726e",
      "revId": "094c7deccabb0de8b2640302ab9785aa7f244f96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85e36917_39900a73",
        "filename": "src/chromiumos/tast/common/hwsec/tpm_manager_binary.go",
        "patchSetId": 16
      },
      "lineNbr": 101,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2021-01-25T17:57:26Z",
      "side": 1,
      "message": "nit: fmt.Sprintf is preferred to concat three or more terms.",
      "range": {
        "startLine": 101,
        "startChar": 41,
        "endLine": 101,
        "endChar": 64
      },
      "revId": "094c7deccabb0de8b2640302ab9785aa7f244f96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7cbcc246_5cb7f7b7",
        "filename": "src/chromiumos/tast/common/hwsec/tpm_manager_binary.go",
        "patchSetId": 16
      },
      "lineNbr": 101,
      "author": {
        "id": 1293547
      },
      "writtenOn": "2021-01-26T04:08:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "85e36917_39900a73",
      "range": {
        "startLine": 101,
        "startChar": 41,
        "endLine": 101,
        "endChar": 64
      },
      "revId": "094c7deccabb0de8b2640302ab9785aa7f244f96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e5ca112_02e5a8e5",
        "filename": "src/chromiumos/tast/common/hwsec/tpm_manager_binary.go",
        "patchSetId": 16
      },
      "lineNbr": 124,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2021-01-25T17:57:26Z",
      "side": 1,
      "message": "so, shutil.Escape cannot handle the case if it includes unprintable chars? Could you fix it instead?",
      "range": {
        "startLine": 124,
        "startChar": 52,
        "endLine": 124,
        "endChar": 76
      },
      "revId": "094c7deccabb0de8b2640302ab9785aa7f244f96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba77935b_ed741694",
        "filename": "src/chromiumos/tast/common/hwsec/tpm_manager_binary.go",
        "patchSetId": 16
      },
      "lineNbr": 124,
      "author": {
        "id": 1293547
      },
      "writtenOn": "2021-01-26T04:08:05Z",
      "side": 1,
      "message": "IIUC, a string must be printable after we base64 encode it, so we didn\u0027t passing unprintable chars into shutil.Escape.",
      "parentUuid": "0e5ca112_02e5a8e5",
      "range": {
        "startLine": 124,
        "startChar": 52,
        "endLine": 124,
        "endChar": 76
      },
      "revId": "094c7deccabb0de8b2640302ab9785aa7f244f96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11a3c8e1_966e7cda",
        "filename": "src/chromiumos/tast/common/hwsec/tpm_manager_binary.go",
        "patchSetId": 16
      },
      "lineNbr": 124,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2021-02-01T05:08:03Z",
      "side": 1,
      "message": "(Sorry, I overlooked the reply).\nI meant:\nwhy do you need base64 encoding here?\nIf it is just because shutil.Escape does not handle it correctly now, could you please fix the shutil.Escape, rather than workaround by introducing base64 here?",
      "parentUuid": "ba77935b_ed741694",
      "range": {
        "startLine": 124,
        "startChar": 52,
        "endLine": 124,
        "endChar": 76
      },
      "revId": "094c7deccabb0de8b2640302ab9785aa7f244f96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d211f39e_48ae7ff4",
        "filename": "src/chromiumos/tast/common/hwsec/tpm_manager_binary.go",
        "patchSetId": 16
      },
      "lineNbr": 124,
      "author": {
        "id": 1293547
      },
      "writtenOn": "2021-02-01T09:35:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "11a3c8e1_966e7cda",
      "range": {
        "startLine": 124,
        "startChar": 52,
        "endLine": 124,
        "endChar": 76
      },
      "revId": "094c7deccabb0de8b2640302ab9785aa7f244f96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c960e3b6_ff4e470c",
        "filename": "src/chromiumos/tast/common/hwsec/tpm_manager_binary.go",
        "patchSetId": 16
      },
      "lineNbr": 124,
      "author": {
        "id": 1314760
      },
      "writtenOn": "2021-02-01T11:21:15Z",
      "side": 1,
      "message": "After some investigation with this situation, it seemed that this could not be solved by improving the shutil.Escape() method.\n\nThe data that we want to write to the file in question is binary, that is, it could include the NULL character (\u0027\\0\u0027). However, the biggest problem here is that the shell is inherently incompatible with taking a raw NULL character in any of its parameters. The POSIX exec() series of system call takes NULL-terminated string for parameters, and executable receives char** argv for arguments, which is again, NULL-terminated strings. This precludes any chance for a string to contain NULL character and be passed around through the shell and piped into a file.\n\nThe shutil.Escape() is designed to escape string for shell\u0027s consumption, and given the shell\u0027s inherent incompatibility with the NULL character, it is certain that that limitation would carry over to the shutil.Escape(). Therefore, it would be unsuitable for us to use shutil.Escape() for data that contains the NULL character.\n\nSolutions to this problem will most likely include some form of input processing on the shell command\u0027s side. It could be \"echo -e\" that allows echo to enable interpretation of backslash, or \"printf\" that interprets the input format string by default. Alternatively, it could be the base64 that we are currently using.\n\nUsing any of those options will results in another converter/escape function, and would need extra work on our side to write and maintain. Except the base64, which is already a standard and require virtually no maintenance on our side.\n\nWhile there are certain drawbacks with using base64, but I believe the advantage to using base64 outweighs them. Here\u0027s the analysis on pros and cons.\n\nPros to using base64:\n- Virtually no need for maintenance.\n- No need for new code for \"escaping\".\n- Simple in terms of parsing/escaping and a proven, long track record for working with binary data.\n\nCons to using base64:\n- Extra dependency pulled in. This is not an issue because base64 is almost always available.\n- Larger data. This method is designed to work with small data, and we are passing them through the ssh as commands, so this is not an issue.\n- Not human readable. The data that this method is designed to work with is binary in nature and is not human readable to begin with, so this is not an issue.\n\nIn conclusion, I support the use of base64 in this context.",
      "parentUuid": "d211f39e_48ae7ff4",
      "range": {
        "startLine": 124,
        "startChar": 52,
        "endLine": 124,
        "endChar": 76
      },
      "revId": "094c7deccabb0de8b2640302ab9785aa7f244f96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8de676db_61b15edb",
        "filename": "src/chromiumos/tast/common/hwsec/tpm_manager_binary.go",
        "patchSetId": 16
      },
      "lineNbr": 124,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2021-02-01T15:51:21Z",
      "side": 1,
      "message": "Thank you for sharing the null-byte issue, and also thank you for investigation of solutions!\nHmm, I have different opinion, but at the same time, I don\u0027t think we should block the CL just by this.\nI found a bug in the latest PS, so anyways we need another turn. Let me use the turn to share from our point of view.\n\n\u003e Here\u0027s the analysis on pros and cons.\n\nInterestingly, I have some different view.\n\n\u003e Pros to using base64:\n\u003e Virtually no need for maintenance.\n\u003e No need for new code for \"escaping\".\n\nThen, I thought\n\nSprintf(\"echo -ne %s \u003e %s\", shutil.Escape(strconv.QuoteToASCII(string(data)), shutil.Escape(filename))\n\nis what you need? Or, does that approach has some another issue?\nAlso, what\u0027s the extra maintenance cost, if we use this?\n\n\u003e Simple in terms of parsing/escaping and a proven, long track record for working with binary data.\n\nI have counter opinion. You constructed a complicated command line. Actually you had an escape mistake there (commented inline).\nPlease, please, be aware that commandline execution, specifically shell work, is complicated.\n\n\u003e Cons to using base64:\n\n\u003e Extra dependency pulled in. This is not an issue because base64 is almost always available.\n\u003e Larger data. This method is designed to work with small data, and we are passing them through the ssh as commands, so this is not an issue.\n\u003e Not human readable. The data that this method is designed to work with is binary in nature and is not human readable to begin with, so this is not an issue.\n\nAgreed on those points. Though, as mentioned above, complexity introduced by the command construction was missing here, IMO.",
      "parentUuid": "c960e3b6_ff4e470c",
      "range": {
        "startLine": 124,
        "startChar": 52,
        "endLine": 124,
        "endChar": 76
      },
      "revId": "094c7deccabb0de8b2640302ab9785aa7f244f96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "371cc15f_e7696021",
        "filename": "src/chromiumos/tast/common/hwsec/tpm_manager_binary.go",
        "patchSetId": 16
      },
      "lineNbr": 124,
      "author": {
        "id": 1293547
      },
      "writtenOn": "2021-02-01T16:43:21Z",
      "side": 1,
      "message": "IMO, \"strconv.QuoteToASCII(string(data))\" wouldn\u0027t work in this case, because it would output something like \"Hello \\u4e16\\u754c\\uff01\".\n\n\"echo\"(both builtin version or /bin/echo) couldn\u0027t decode an escape character which is beginning with \u0027\\u\u0027. It only supports \"\\0NN\" \u0026 \"\\xHH\".\n\nPlus, strconv.QuoteToASCII(string(data)) would escape \u0027\"\u0027 to \u0027\\\"\u0027, and \"echo\" couldn\u0027t decode that correctly either.\n\n\"printf\"(both builtin version or /usr/bin/printf) could decode an escape character which is beginning with \u0027\\u\u0027. But we would also need to escape \"%\" to \"%%\".\n\nBTW,\nIf we want to use \"echo\", we would need to use this:\n```\nfmtStr :\u003d fmt.Sprintf(\"%q\",data)\nsubFmt :\u003d fmtStr[1:len(fmtStr)-1]\nescaped :\u003d strings.ReplaceAll(subFmt,\"\\\\\\\"\",\"\\\"\")\nSprintf(\"echo -ne %s \u003e %s\", shutil.Escape(escaped), shutil.Escape(filename))\n```\n\nIf we want to use \"printf\", we would need to use this:\n```\nqutStr :\u003d strconv.QuoteToASCII(string(data))\nsubQut :\u003d qutStr[1:len(qutStr)-1]\nescaped :\u003d strings.ReplaceAll(subQut,\"%\",\"%%\")\nSprintf(\"printf %s \u003e %s\", shutil.Escape(escaped), shutil.Escape(filename))\n```",
      "parentUuid": "8de676db_61b15edb",
      "range": {
        "startLine": 124,
        "startChar": 52,
        "endLine": 124,
        "endChar": 76
      },
      "revId": "094c7deccabb0de8b2640302ab9785aa7f244f96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b06d6a9_c511b991",
        "filename": "src/chromiumos/tast/common/hwsec/tpm_manager_binary.go",
        "patchSetId": 16
      },
      "lineNbr": 124,
      "author": {
        "id": 1293547
      },
      "writtenOn": "2021-02-01T16:47:56Z",
      "side": 1,
      "message": "Oh, BTW, the behavior of printf of dash(/bin/sh on DUT) is different to the printf of bash and /usr/bin/printf. It can\u0027t decode \"\\x\" correctly...",
      "parentUuid": "371cc15f_e7696021",
      "range": {
        "startLine": 124,
        "startChar": 52,
        "endLine": 124,
        "endChar": 76
      },
      "revId": "094c7deccabb0de8b2640302ab9785aa7f244f96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2acdbac3_99ed2ab6",
        "filename": "src/chromiumos/tast/common/hwsec/tpm_manager_binary.go",
        "patchSetId": 16
      },
      "lineNbr": 124,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2021-02-03T00:30:00Z",
      "side": 1,
      "message": "THanks. Now I\u0027m ok, but could you add comments about why you need base64?",
      "parentUuid": "5b06d6a9_c511b991",
      "range": {
        "startLine": 124,
        "startChar": 52,
        "endLine": 124,
        "endChar": 76
      },
      "revId": "094c7deccabb0de8b2640302ab9785aa7f244f96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}