{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "68fe422c_b677de5e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1395692
      },
      "writtenOn": "2021-11-10T02:35:52Z",
      "side": 1,
      "message": "Hi reviewers,\n\nThanks for reviewing the proposal go/tast-user-context-action. I will try to land the implementation if you do not have any further questions.",
      "revId": "679722c5278716e0df11afab156158d21e6a6f4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "519baa6c_2baf8775",
        "filename": "src/chromiumos/tast/local/chrome/useractions/user_actions.go",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1508900
      },
      "writtenOn": "2021-11-10T22:30:12Z",
      "side": 1,
      "message": "I am confused that UserContext, UserAction, UserActionCfg all have attributes and tags. Looks like you will merge them eventually, why not just store them in one place?",
      "range": {
        "startLine": 32,
        "startChar": 1,
        "endLine": 33,
        "endChar": 34
      },
      "revId": "679722c5278716e0df11afab156158d21e6a6f4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83d73a39_7bf74a2d",
        "filename": "src/chromiumos/tast/local/chrome/useractions/user_actions.go",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1395692
      },
      "writtenOn": "2021-11-10T22:48:17Z",
      "side": 1,
      "message": "UserContext will maintain the attributes and tags across the whole session as long as the UserContext is continuely used.\n\nUserAction attributes and tags are only used inside the specific action. It will not appear in the next action.\n\nUserActionCfg is a structure similar to testing.PollOptions. It just makes UserAction construction more convenient with optional parameters.",
      "parentUuid": "519baa6c_2baf8775",
      "range": {
        "startLine": 32,
        "startChar": 1,
        "endLine": 33,
        "endChar": 34
      },
      "revId": "679722c5278716e0df11afab156158d21e6a6f4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "67c87e22_435b8edd",
        "filename": "src/chromiumos/tast/local/chrome/useractions/user_actions.go",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1508900
      },
      "writtenOn": "2021-11-10T23:23:33Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "83d73a39_7bf74a2d",
      "range": {
        "startLine": 32,
        "startChar": 1,
        "endLine": 33,
        "endChar": 34
      },
      "revId": "679722c5278716e0df11afab156158d21e6a6f4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1f041d8_eef17d2e",
        "filename": "src/chromiumos/tast/local/chrome/useractions/user_actions.go",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 1508900
      },
      "writtenOn": "2021-11-10T22:30:12Z",
      "side": 1,
      "message": "Since passing testing.State is discouraged, is there a way to avoid this? e.g. this can be a function to create the subtest, and let the test ifself run it instead.",
      "range": {
        "startLine": 158,
        "startChar": 79,
        "endLine": 158,
        "endChar": 88
      },
      "revId": "679722c5278716e0df11afab156158d21e6a6f4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee39ed39_9d3746a0",
        "filename": "src/chromiumos/tast/local/chrome/useractions/user_actions.go",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 1395692
      },
      "writtenOn": "2021-11-10T22:48:17Z",
      "side": 1,
      "message": "I could not find a better solution. \n\nAccording to https://chromium.googlesource.com/chromiumos/platform/tast/+/HEAD/docs/writing_tests.md#test-subpackages, \"If a subpackage actually contains the test implementation (typically because it‘s shared across several tests), it’s okay to pass testing.State to it so it can report test errors itself.\" \n\nThis function aims to run UserAction independently as subtest and reports its own result.",
      "parentUuid": "c1f041d8_eef17d2e",
      "range": {
        "startLine": 158,
        "startChar": 79,
        "endLine": 158,
        "endChar": 88
      },
      "revId": "679722c5278716e0df11afab156158d21e6a6f4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed58dece_dc1c7bcc",
        "filename": "src/chromiumos/tast/local/chrome/useractions/user_actions.go",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 1508900
      },
      "writtenOn": "2021-11-10T23:23:33Z",
      "side": 1,
      "message": "But this is not a subpackage (\"subdirectories below test files\"). As mentioned, this could be a function that creates the subtest instead of running it. \n\n@nya may have a better idea on this.",
      "parentUuid": "ee39ed39_9d3746a0",
      "range": {
        "startLine": 158,
        "startChar": 79,
        "endLine": 158,
        "endChar": 88
      },
      "revId": "679722c5278716e0df11afab156158d21e6a6f4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eef0f433_231bb47f",
        "filename": "src/chromiumos/tast/local/chrome/useractions/user_actions.go",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2021-11-12T04:55:14Z",
      "side": 1,
      "message": "You can define an interface here that defines a subset of testing.State methods.",
      "parentUuid": "ed58dece_dc1c7bcc",
      "range": {
        "startLine": 158,
        "startChar": 79,
        "endLine": 158,
        "endChar": 88
      },
      "revId": "679722c5278716e0df11afab156158d21e6a6f4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ac78d09_ec92d3c1",
        "filename": "src/chromiumos/tast/local/chrome/useractions/user_actions.go",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 1395692
      },
      "writtenOn": "2021-11-12T05:50:58Z",
      "side": 1,
      "message": "Any code example I can refer to?",
      "parentUuid": "eef0f433_231bb47f",
      "range": {
        "startLine": 158,
        "startChar": 79,
        "endLine": 158,
        "endChar": 88
      },
      "revId": "679722c5278716e0df11afab156158d21e6a6f4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59f7b8ce_31d33b97",
        "filename": "src/chromiumos/tast/local/chrome/useractions/user_actions.go",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 1508900
      },
      "writtenOn": "2021-11-12T06:10:11Z",
      "side": 1,
      "message": "Something like:\n\ntype testRunner interface {\n    Run(ctx context.Context, name string, run func(context.Context, *testing.State)) bool\n}\n\nfunc (ua *UserAction) RunAsSubTest(ctx context.Context, r testRunner) bool {\n\treturn r.Run(ctx, ua.name, func(ctx context.Context, s *testing.State) {\n...",
      "parentUuid": "5ac78d09_ec92d3c1",
      "range": {
        "startLine": 158,
        "startChar": 79,
        "endLine": 158,
        "endChar": 88
      },
      "revId": "679722c5278716e0df11afab156158d21e6a6f4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1eb1026_8f00c801",
        "filename": "src/chromiumos/tast/local/chrome/useractions/user_actions.go",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 1395692
      },
      "writtenOn": "2021-11-12T06:42:25Z",
      "side": 1,
      "message": "Ye, in that case I have to something like below. testing.State is still used internally. \n\ntype testingState interface {\n\tOutDir() string\n\tHasError() bool\n\tRun(context.Context, string, func(ctx context.Context, s *testing.State)) bool\n}\n\nfunc (ua *UserAction) RunAsSubTest(ctx context.Context, s testingState) bool {\n\treturn s.Run(ctx, ua.name, func(ctx context.Context, s *testing.State) {\n\t\n\t\nPersonally I still prefer just to pass through *testing.State like below:\nhttp://cs/chromeos_public/src/platform/tast-tests/src/chromiumos/tast/local/bundles/cros/inputs/util/util.go?l\u003d201",
      "parentUuid": "59f7b8ce_31d33b97",
      "range": {
        "startLine": 158,
        "startChar": 79,
        "endLine": 158,
        "endChar": 88
      },
      "revId": "679722c5278716e0df11afab156158d21e6a6f4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ab54eeb_762bd3ea",
        "filename": "src/chromiumos/tast/local/chrome/useractions/user_actions.go",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 1508900
      },
      "writtenOn": "2021-11-12T08:10:09Z",
      "side": 1,
      "message": "The given example is in a subpackage (which you referred in the first reply), but the usage here is not in a subpackage. I don\u0027t think it is good practice to skip the lint check that has a good justification.\n\nBTW, do you really need RunAsSubTest and RunActionAsSubTest in the support package that is for general-purpose use? e.g. a userAction may not need faillog.DumpUITreeWithScreenshotOnError or may need additional clean-ups.  \n\nIf you are defining them for inputs testing, you can moving them to the subpackage: http://cs/chromeos_public/src/platform/tast-tests/src/chromiumos/tast/local/bundles/cros/inputs/util/util.go",
      "parentUuid": "d1eb1026_8f00c801",
      "range": {
        "startLine": 158,
        "startChar": 79,
        "endLine": 158,
        "endChar": 88
      },
      "revId": "679722c5278716e0df11afab156158d21e6a6f4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfa13bd0_3bd49cd9",
        "filename": "src/chromiumos/tast/local/chrome/useractions/user_actions.go",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 1395692
      },
      "writtenOn": "2021-11-12T09:53:15Z",
      "side": 1,
      "message": "It is okay not running UserAction as subtest. However, in some cases such as https://crrev.com/c/3276613, we might want them to be reported as subtest in the test result.\n\nI still reckon it is nice to have if we do not want to repeat below code snippet everywhere. Overall I think it is the only reason why I want to keep this function.\n\ncleanupCtx :\u003d ctx\nctx, cancel :\u003d ctxutil.Shorten(ctx, 5*time.Second)\ndefer cancel()\ndefer faillog.DumpUITreeWithScreenshotOnError(cleanupCtx, filepath.Join(s.OutDir(), ua.name), s.HasError, ua.userContext.cr, \"ui_tree_\"+ua.name)\n\nbtw, I have discussed offline this with @nya and he agrees to keep current approach with some comments.",
      "parentUuid": "9ab54eeb_762bd3ea",
      "range": {
        "startLine": 158,
        "startChar": 79,
        "endLine": 158,
        "endChar": 88
      },
      "revId": "679722c5278716e0df11afab156158d21e6a6f4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b1586d1d_e6d19919",
        "filename": "src/chromiumos/tast/local/chrome/useractions/user_actions.go",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 1395692
      },
      "writtenOn": "2021-11-12T10:12:09Z",
      "side": 1,
      "message": "After all, I pulled out these 2 functions from the cl. I think E14s will be the first client of this approach. We can probably use util.RunSubTest at the moment. We can always add these functions back it is required in future.",
      "parentUuid": "dfa13bd0_3bd49cd9",
      "range": {
        "startLine": 158,
        "startChar": 79,
        "endLine": 158,
        "endChar": 88
      },
      "revId": "679722c5278716e0df11afab156158d21e6a6f4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4dddf6b_4a47fddc",
        "filename": "src/chromiumos/tast/local/chrome/useractions/user_actions.go",
        "patchSetId": 1
      },
      "lineNbr": 250,
      "author": {
        "id": 1508900
      },
      "writtenOn": "2021-11-10T22:30:12Z",
      "side": 1,
      "message": "ctx is not used in this func.",
      "range": {
        "startLine": 250,
        "startChar": 36,
        "endLine": 250,
        "endChar": 39
      },
      "revId": "679722c5278716e0df11afab156158d21e6a6f4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "37bd9d56_6026d6b2",
        "filename": "src/chromiumos/tast/local/chrome/useractions/user_actions.go",
        "patchSetId": 1
      },
      "lineNbr": 250,
      "author": {
        "id": 1395692
      },
      "writtenOn": "2021-11-10T22:48:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a4dddf6b_4a47fddc",
      "range": {
        "startLine": 250,
        "startChar": 36,
        "endLine": 250,
        "endChar": 39
      },
      "revId": "679722c5278716e0df11afab156158d21e6a6f4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60e00c81_15774c60",
        "filename": "src/chromiumos/tast/local/chrome/useractions/user_actions.go",
        "patchSetId": 1
      },
      "lineNbr": 272,
      "author": {
        "id": 1508900
      },
      "writtenOn": "2021-11-10T22:30:12Z",
      "side": 1,
      "message": "You may want a function: func (ar *actionResult) String() string{} \nThis then becomes return w.Write(ar)",
      "range": {
        "startLine": 262,
        "startChar": 1,
        "endLine": 272,
        "endChar": 23
      },
      "revId": "679722c5278716e0df11afab156158d21e6a6f4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "10a46ff1_93f5f99e",
        "filename": "src/chromiumos/tast/local/chrome/useractions/user_actions.go",
        "patchSetId": 1
      },
      "lineNbr": 272,
      "author": {
        "id": 1395692
      },
      "writtenOn": "2021-11-10T22:48:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "60e00c81_15774c60",
      "range": {
        "startLine": 262,
        "startChar": 1,
        "endLine": 272,
        "endChar": 23
      },
      "revId": "679722c5278716e0df11afab156158d21e6a6f4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}