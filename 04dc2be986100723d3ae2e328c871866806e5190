{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9600dd23_4a4727a3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1003168
      },
      "writtenOn": "2022-05-21T11:53:51Z",
      "side": 1,
      "message": "LGTM. Thank you!",
      "revId": "04dc2be986100723d3ae2e328c871866806e5190",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b113717c_22ef41f3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2022-05-23T16:22:00Z",
      "side": 1,
      "message": "lgtm",
      "revId": "04dc2be986100723d3ae2e328c871866806e5190",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "584536fa_0938bbdd",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/common_metrics.go",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1401350
      },
      "writtenOn": "2022-05-24T12:37:12Z",
      "side": 1,
      "message": "Can this be a function of `Recorder`?\nSo instead of `cuj.AddPerformanceCUJMetrics(tconn, bTconn, recorder)`, it can be called like `recorder.AddPerformanceCUJMetrics(tconn, bTconn)`.\nFrom the current function, it wouldn\u0027t expect it to modify the `recorder` variable.",
      "revId": "04dc2be986100723d3ae2e328c871866806e5190",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44461e84_206d0958",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/common_metrics.go",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1400377
      },
      "writtenOn": "2022-05-24T15:04:00Z",
      "side": 1,
      "message": "Thanks Gabor for your review.\n\nThe `cuj.AddPerformanceCUJMetrics(tconn, bTconn, recorder)` covers the logic to ask the recorder to collect different metrics from different browsers for \"Performance CUJs\". Performance CUJs are the ones that are run by partners on moblab as part of SPERA project. Other CUJs, such as the TPS CUJs, may have different strategy to collect metrics from ash-Chrome or lacros-Chrome. The idea is to separate this logic from the recorder and let the CUJs themself to determine their own metrics collecting strategy.",
      "parentUuid": "584536fa_0938bbdd",
      "revId": "04dc2be986100723d3ae2e328c871866806e5190",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55bde515_8516beb0",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/common_metrics.go",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1003168
      },
      "writtenOn": "2022-05-24T15:37:37Z",
      "side": 1,
      "message": "\u003e this be a function of `Recorder` ?\n\u003e So instead of  `cuj.AddPerformanceCUJMetrics(tconn, bTconn, recorder)`,\n\u003e it can be called like  `recorder.AddPerformanceCUJMetrics(tconn, bTconn)` .\n\u003e From the current function, it wouldn\u0027t expect it to modify the  recorder  variable.\n\nI think that in general we do not want to collect the same set of browser metrics from both Lacros and Ash. Test should be specific about which set of metrics it needs from the specific instance. This is how Hidehiko suggested us to design the API here.\n\nI feel that this function is a compatibility layer because some tests were already implemented collecting the same set of metrics from all the browsers. So we need something before we migrate the actual tests and sort the metrics.",
      "parentUuid": "44461e84_206d0958",
      "revId": "04dc2be986100723d3ae2e328c871866806e5190",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}