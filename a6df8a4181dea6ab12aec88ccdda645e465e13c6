{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "58fa9180_6b1f1516",
        "filename": "src/chromiumos/tast/local/bundles/cros/health/probe_battery_metrics.go",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1150179
      },
      "writtenOn": "2021-12-08T02:15:55Z",
      "side": 1,
      "message": "It seems we are always conparing the string returned from this function with some expectation. Does it make sense to do the comparison in this function? e.g.\n\nfunc check...Property(path, want string) error {\n  ...\n  if got !\u003d want {\n    return errors.Errorf(\"unexpected value for %v: got %v; want %v, path, got, want)\n  }\n  return nil\n}\n\nSame for float version.",
      "range": {
        "startLine": 51,
        "startChar": 5,
        "endLine": 51,
        "endChar": 30
      },
      "revId": "a6df8a4181dea6ab12aec88ccdda645e465e13c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1dc1b00b_f10e3c3d",
        "filename": "src/chromiumos/tast/local/bundles/cros/health/probe_battery_metrics.go",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1150179
      },
      "writtenOn": "2021-12-08T02:22:14Z",
      "side": 1,
      "message": "optional: By the way, I think there is another way of comparing battery with expectation, which is constructing wanted batteryInfo.\n\nIn Go, it\u0027s preferred to use full structure comparison, so I think it\u0027s a better approach if possible.\nhttps://g3doc.corp.google.com/go/g3doc/style/decisions.md?cl\u003dhead\n\nwant :\u003d batteryInfo {\n  ...\n}\n\nif diff :\u003d cmp.Diff(battery, want); diff !\u003d \"\" {\n}",
      "range": {
        "startLine": 68,
        "startChar": 5,
        "endLine": 68,
        "endChar": 24
      },
      "revId": "a6df8a4181dea6ab12aec88ccdda645e465e13c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20553071_f27ef65a",
        "filename": "src/chromiumos/tast/local/bundles/cros/health/utils/utils.go",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 1150179
      },
      "writtenOn": "2021-12-08T02:15:55Z",
      "side": 1,
      "message": "nit: it looks 1e-1 is a big number. If we just want to avoid presision error, can we use smaller value like 1e-6 ? Also, if it\u0027s only used from one function, can we inline it in the function?",
      "range": {
        "startLine": 82,
        "startChar": 25,
        "endLine": 82,
        "endChar": 29
      },
      "revId": "a6df8a4181dea6ab12aec88ccdda645e465e13c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "901df3cc_191b8e7a",
        "filename": "src/chromiumos/tast/local/bundles/cros/health/utils/utils.go",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 1113505
      },
      "writtenOn": "2021-12-09T13:46:56Z",
      "side": 1,
      "message": "+1 for 1e-6.\n\nJust curious that is there any standard library handle this? I just found out there is something in \"cmp/cmpopts\" but not sure if they\u0027re available in Tast.\nhttps://godoc.corp.google.com/pkg/google3/third_party/golang/cmp/cmpopts/cmpopts#EquateApprox",
      "parentUuid": "20553071_f27ef65a",
      "range": {
        "startLine": 82,
        "startChar": 25,
        "endLine": 82,
        "endChar": 29
      },
      "revId": "a6df8a4181dea6ab12aec88ccdda645e465e13c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}