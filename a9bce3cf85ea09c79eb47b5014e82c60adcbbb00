{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3d6e64f3_15774ed5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2021-01-05T19:34:22Z",
      "side": 1,
      "message": "When you wrote \"The test failing on devices which do not implement SAR. The test should be changed to pass as NA in such cases.\" on $BUG, I expected that means devices with no SAR profiles at all, not devices that are not configured for dynamic SAR.",
      "revId": "a9bce3cf85ea09c79eb47b5014e82c60adcbbb00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ca236652_bb4cf997",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1360284
      },
      "writtenOn": "2021-01-05T22:20:46Z",
      "side": 1,
      "message": "You\u0027re totally correct. I\u0027ll scrap this implementation.\n\nDo you know of a better way of checking for the presence of Intel SAR tables other than parsing the ACPI output like is already being done in this test? My fear is that if I use the ACPI parsing and pass whenever we don\u0027t find any SAR tables, then if the parsing breaks for any reason (formatting changes etc.) then devices will begin passing spuriously without throwing an error. Ideally, we should be able to catch cases of \"the SAR table exists but we failed to find it in our ACPI parsing\".",
      "parentUuid": "3d6e64f3_15774ed5",
      "revId": "a9bce3cf85ea09c79eb47b5014e82c60adcbbb00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a682b283_53fc6cdb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2021-01-06T00:02:38Z",
      "side": 1,
      "message": "\u003e Do you know of a better way of checking for the presence of Intel SAR tables other than parsing the ACPI output like is already being done in this test?\n\nGood question, and that\u0027s a valid concern.\n\nMy first thought was \"no, there isn\u0027t\", but then if the goal is to double-check whether the parser matches what the driver thinks, then perhaps we could make use of the IWL_MVM_VENDOR_CMD_GET_SAR_PROFILE_INFO vendor command. It has a IWL_MVM_VENDOR_ATTR_SAR_ENABLED_PROFILE_NUM attribute, which I believe should tell us how many profiles the driver thinks it has. We could compare these results with our ACPI parse, to ensure things line up, I suppose.\n\nI think I\u0027d be OK with skipping non-existent profiles first, and later considering whether we want to augment things this way. For manual (e.g., Project Tracker) tests, I think people can read the log output. For lab testing, it\u0027s probably better to have the test in Green shape than it is to guard against all possible manners of error.",
      "parentUuid": "ca236652_bb4cf997",
      "revId": "a9bce3cf85ea09c79eb47b5014e82c60adcbbb00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f13b850_80c18936",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/wifi_check_intel_sar_table.go",
        "patchSetId": 1
      },
      "lineNbr": 386,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2021-01-05T19:34:22Z",
      "side": 1,
      "message": "that\u0027s not totally true as implemented here; dynamic SAR is different than static SAR, and static SAR tables don\u0027t require the cros-config setting below, yet we should still test the ACPI table.",
      "range": {
        "startLine": 386,
        "startChar": 0,
        "endLine": 386,
        "endChar": 73
      },
      "revId": "a9bce3cf85ea09c79eb47b5014e82c60adcbbb00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe25b177_493245dc",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/wifi_check_intel_sar_table.go",
        "patchSetId": 1
      },
      "lineNbr": 386,
      "author": {
        "id": 1360284
      },
      "writtenOn": "2021-01-05T22:20:46Z",
      "side": 1,
      "message": "Good catch.",
      "parentUuid": "7f13b850_80c18936",
      "range": {
        "startLine": 386,
        "startChar": 0,
        "endLine": 386,
        "endChar": 73
      },
      "revId": "a9bce3cf85ea09c79eb47b5014e82c60adcbbb00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3fbd256c_9886c9a4",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/wifi_check_intel_sar_table.go",
        "patchSetId": 1
      },
      "lineNbr": 387,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2021-01-05T19:34:22Z",
      "side": 1,
      "message": "I would naturally think that using the cros-config libraries or shell utilities would be preferred to bare filesystem access, but I\u0027m not sure. Anyway, other tests use check_powerd_config:\n\nhttps://source.chromium.org/chromiumos/chromiumos/codesearch/+/main:src/platform/tast-tests/src/chromiumos/tast/local/bundles/cros/network/wifi_set_tx_power.go;l\u003d47?q\u003dcheck_powerd_config%20file:tast-tests%20file:wifi_set_tx_power.go\u0026sq\u003d",
      "range": {
        "startLine": 387,
        "startChar": 0,
        "endLine": 387,
        "endChar": 109
      },
      "revId": "a9bce3cf85ea09c79eb47b5014e82c60adcbbb00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c7cb0bd6_4b191b58",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/wifi_check_intel_sar_table.go",
        "patchSetId": 1
      },
      "lineNbr": 387,
      "author": {
        "id": 1360284
      },
      "writtenOn": "2021-01-05T22:20:46Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3fbd256c_9886c9a4",
      "range": {
        "startLine": 387,
        "startChar": 0,
        "endLine": 387,
        "endChar": 109
      },
      "revId": "a9bce3cf85ea09c79eb47b5014e82c60adcbbb00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c8f7ad9_6fa20f42",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/wifi_check_intel_sar_table.go",
        "patchSetId": 1
      },
      "lineNbr": 389,
      "author": {
        "id": 1360284
      },
      "writtenOn": "2020-12-30T23:07:45Z",
      "side": 1,
      "message": "Is there are better way to pass as NA in Tast than what I\u0027m doing here (logging and returning)?\n\nAutotest has a special error for this (http://cs/chromeos_public/src/third_party/autotest/files/client/common_lib/error.py?l\u003d79), but I couldn\u0027t find anything similar for Tast. Perhaps I could find a way to translate this into a softwareDep?",
      "revId": "a9bce3cf85ea09c79eb47b5014e82c60adcbbb00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8acefab_3bacb821",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/wifi_check_intel_sar_table.go",
        "patchSetId": 1
      },
      "lineNbr": 389,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2021-01-05T19:34:22Z",
      "side": 1,
      "message": "Hmm, Tast very intentionally doesn\u0027t have a \"N/A\" status, because we\u0027re not supposed to do \"skip\" testing:\n\nhttps://chromium.googlesource.com/chromiumos/platform/tast/+/HEAD/docs/writing_tests.md#device-dependencies\n\nSo either we convincingly argue that this is positively testing something, and so just \"return\" (like you\u0027re doing), or we need to declare a failure and skip the test some other way (through dependencies).\n\nPer my other comment, other tests are already doing this though... Anyway, I think we probably don\u0027t want to take this approach (testing only dynamic SAR tables).",
      "parentUuid": "2c8f7ad9_6fa20f42",
      "revId": "a9bce3cf85ea09c79eb47b5014e82c60adcbbb00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "745a9a9a_820d4e05",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/wifi_check_intel_sar_table.go",
        "patchSetId": 1
      },
      "lineNbr": 389,
      "author": {
        "id": 1360284
      },
      "writtenOn": "2021-01-05T22:20:46Z",
      "side": 1,
      "message": "Do you think it would be possible to define a dependency that tracks whether a device has any SAR tables at all. I don\u0027t personally know how that could be done. (There aren\u0027t any USE flags for SAR right?)",
      "parentUuid": "f8acefab_3bacb821",
      "revId": "a9bce3cf85ea09c79eb47b5014e82c60adcbbb00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97881bb4_6a623b06",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/wifi_check_intel_sar_table.go",
        "patchSetId": 1
      },
      "lineNbr": 389,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2021-01-06T00:02:38Z",
      "side": 1,
      "message": "Right, no USE flags.\n\nTechnically, Intel SAR tables are a software dependency (which could theoretically turn into a useful dependency here), but they are built up very indirectly, as they go into the BIOS binary, which is built very differently from the rest of the OS, and so wouldn\u0027t be as easy to track as a traditional SoftwareDep. It would also still vary per-Hardware, because one OS may contain many BIOS binaries, applying the correct one to the local hardware. In other words, this gets complicated, and is bordering on impossible.\n\n(We *could* probably add some kind of test-only metadata to the lab database or some per-model cros-config variable [*], I suppose. But that sounds just as error-prone as doing the skip-testing in the first place, I think.)\n\nI think our best bet is do our best to test something for all Intel WiFi systems, to the best of our ability.\n\n[*] And then plumb that into the Dependency system? Notably, we don\u0027t yet have that for bare cros-config, I think. But maybe the new Starlark stuff helps that?",
      "parentUuid": "745a9a9a_820d4e05",
      "revId": "a9bce3cf85ea09c79eb47b5014e82c60adcbbb00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}