{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5f40b95f_68af04a4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1539138
      },
      "writtenOn": "2022-09-21T06:16:55Z",
      "side": 1,
      "message": "Please take a look~",
      "revId": "b58fec5ffcb59cd068454e41c456b0becc86513e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2b951160_6a9eb506",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1413870
      },
      "writtenOn": "2022-10-03T02:35:00Z",
      "side": 1,
      "message": "LGTM from ARC perspective. Please add tast-owners@ for tast/golang reviewðŸ˜Š",
      "revId": "b58fec5ffcb59cd068454e41c456b0becc86513e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "85c00b73_45c0ae88",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1539138
      },
      "writtenOn": "2022-10-03T04:49:53Z",
      "side": 1,
      "message": "Please take a look~",
      "revId": "b58fec5ffcb59cd068454e41c456b0becc86513e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1088dd03_ec2628bc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1539138
      },
      "writtenOn": "2022-10-04T01:33:24Z",
      "side": 1,
      "message": "Thanks a lot for the reviews!",
      "revId": "b58fec5ffcb59cd068454e41c456b0becc86513e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c6b30da_25f7a856",
        "filename": "src/chromiumos/tast/local/arc/dumpsys.go",
        "patchSetId": 4
      },
      "lineNbr": 313,
      "author": {
        "id": 1413870
      },
      "writtenOn": "2022-09-26T00:33:49Z",
      "side": 1,
      "message": "is it possible to gather all `traverse()`s here? I think it improves readability.",
      "revId": "b58fec5ffcb59cd068454e41c456b0becc86513e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3233afca_a4c44b4e",
        "filename": "src/chromiumos/tast/local/arc/dumpsys.go",
        "patchSetId": 4
      },
      "lineNbr": 313,
      "author": {
        "id": 1539138
      },
      "writtenOn": "2022-09-27T07:18:24Z",
      "side": 1,
      "message": "I can\u0027t really figure out a clean way to do that, since the two `traverse()`\u0027s I added(for `root_display_area` and `task_fragment`) are not really under `window_container.children`. You can check my [comment](https://b.corp.google.com/issues/245647771#comment2) in the bug to see a simplied structure of the proto.\n\nThings we are traversing in this block should be all listed [here](https://source.corp.google.com/android/frameworks/base/core/proto/android/server/windowmanagerservice.proto;l\u003d514?q\u003dcore%2Fproto%2Fandroid%2Fserver%2Fwindowmanagerservice.proto\u0026ct\u003dos\u0026sq\u003dpackage:android) that\u0027s why I added `traverse(c.GetTaskFragment())`.\n\nIf we want to put all the `traverse()`\u0027s around the same place, the only way seems to be adding another two blocks:\n```\ntraverse \u003d func(wc windowContainer) { // [base L247]\n\tif d, ok :\u003d wc.(*server.DisplayContentProto); ok \u0026\u0026 d !\u003d nil {\n\t\tfocusedActivity \u003d d.GetFocusedApp()\n\t}\n\n\tif t, ok :\u003d wc.(*server.TaskProto); ok \u0026\u0026 t !\u003d nil {\n\t\t// generate basic taskinfo ..\n\n\t\tvar ac windowContainer\n\t\tif t.GetTaskFragment() !\u003d nil {\n\t\t\tac \u003d t.GetTaskFragment()\n\t\t} else {\n\t\t\tac \u003d t\n\t\t}\n\t\t// go through ac to extract activities ..\n\t}\n\t\n\tfor _, c :\u003d range wc.GetWindowContainer().GetChildren() {// [base L290]\n\t        // traverse the windowContainerChildren\n\t}\n\n\tif d, ok :\u003d wc.(*server.DisplayContentProto); ok \u0026\u0026 d !\u003d nil {\n\t\tif rda :\u003d d.GetRootDisplayArea(); rda !\u003d nil {\n\t\t\ttraverse(rda)\n\t\t}\n\t}\n\tif t, ok :\u003d wc.(*server.TaskProto); ok \u0026\u0026 t !\u003d nil {\n\t\tif t.GetTaskFragment() !\u003d nil {\n\t\t\ttraverse(t.GetTaskFragment())\n\t\t}\n\t}\n} // [base L298]\n```\n\nI kinda prefer the current way though, since it separetes the handling of the cases when wc is a display_content or when wc is a task, then traverse the wc\u0027s windowContainerChildren.\n\nWhat do you think?",
      "parentUuid": "7c6b30da_25f7a856",
      "revId": "b58fec5ffcb59cd068454e41c456b0becc86513e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e6afb97_110d60ea",
        "filename": "src/chromiumos/tast/local/arc/dumpsys.go",
        "patchSetId": 4
      },
      "lineNbr": 313,
      "author": {
        "id": 1413870
      },
      "writtenOn": "2022-10-03T02:35:00Z",
      "side": 1,
      "message": "Thank you for the explanation! Either way looks good to me without any strong reason. Please go ahead!",
      "parentUuid": "3233afca_a4c44b4e",
      "revId": "b58fec5ffcb59cd068454e41c456b0becc86513e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "b58fec5ffcb59cd068454e41c456b0becc86513e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "b58fec5ffcb59cd068454e41c456b0becc86513e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "b58fec5ffcb59cd068454e41c456b0becc86513e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "b58fec5ffcb59cd068454e41c456b0becc86513e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}