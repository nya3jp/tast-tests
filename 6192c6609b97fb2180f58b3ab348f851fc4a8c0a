{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c6bcc4bf_b2f5d526",
        "filename": "src/chromiumos/tast/local/cpu/cooldown.go",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2022-01-07T18:12:06Z",
      "side": 1,
      "message": "As for skipping condition implementation, I think we don\u0027t want to depend of media from here. Also, it\u0027s better to check via software dependency. Could you write the check instead? You can refer https://source.chromium.org/chromium/chromiumos/platform/tast-tests/+/HEAD:src/chromiumos/tast/local/chrome/internal/setup/preflight.go;l\u003d46\n\nAlso, could you make this configurable by tests, and let callers set it?\nIn general, it is not a good idea to behave tests differently per board.\nI think this specific case makes sense, but it\u0027s better to make it reponsibility of callers, so that new users can be aware that this may behave differently on VM environment.",
      "revId": "6192c6609b97fb2180f58b3ab348f851fc4a8c0a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f84436eb_eef5d4fe",
        "filename": "src/chromiumos/tast/local/cpu/cooldown.go",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1113039
      },
      "writtenOn": "2022-01-07T19:52:26Z",
      "side": 1,
      "message": "I agree this may have unintended consequences and so requiring callers to opt-in is safer. I don\u0027t understand how to implement a \"check via software dependency.\" Can you tell me more?\n\nIn terms of making configurable by tests, would it make sense to add a boolean to CoolDownConfig, something to the effect of ThermalReadFailureNonFatal, default false? If I did that, would it be to just set that to true if on a VM in the Lacros testing code?",
      "parentUuid": "c6bcc4bf_b2f5d526",
      "revId": "6192c6609b97fb2180f58b3ab348f851fc4a8c0a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f494a94_87484da6",
        "filename": "src/chromiumos/tast/local/cpu/cooldown.go",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2022-01-12T00:18:03Z",
      "side": 1,
      "message": "\u003e I agree this may have unintended consequences and so requiring callers to opt-in is safer. I don\u0027t understand how to implement a \"check via software dependency.\" Can you tell me more?\n\u003e \n\nCould you check the function I linked from the above reply?\nThe function checks software dependency in Tast on runtime.\n\n\u003e In terms of making configurable by tests, would it make sense to add a boolean to CoolDownConfig, something to the effect of ThermalReadFailureNonFatal, default false? If I did that, would it be to just set that to true if on a VM in the Lacros testing code?\n\nYes, I think so.",
      "parentUuid": "f84436eb_eef5d4fe",
      "revId": "6192c6609b97fb2180f58b3ab348f851fc4a8c0a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:approval_code-owners"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "6192c6609b97fb2180f58b3ab348f851fc4a8c0a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "6192c6609b97fb2180f58b3ab348f851fc4a8c0a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Verified=MAX","label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "6192c6609b97fb2180f58b3ab348f851fc4a8c0a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}