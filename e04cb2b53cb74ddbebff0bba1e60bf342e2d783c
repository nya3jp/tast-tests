{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "430ad132_30f09032",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2021-01-16T00:04:24Z",
      "side": 1,
      "message": "Dean, how can I ensure that the wifi / wpasupplicant tests are run?",
      "revId": "e04cb2b53cb74ddbebff0bba1e60bf342e2d783c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e750b0cb_83654a36",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1373754
      },
      "writtenOn": "2021-01-16T01:16:10Z",
      "side": 1,
      "message": "I think you are referring to wifi remote tests that uses wpasupplicant. These test usually use wpasupplicant package in the gRPC calls defined in the file tast/local/bundles/cros/network/wifi_service.go",
      "parentUuid": "430ad132_30f09032",
      "revId": "e04cb2b53cb74ddbebff0bba1e60bf342e2d783c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "933bed0b_9e0e28f4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2021-01-18T09:24:09Z",
      "side": 1,
      "message": "Yenlin, please help take a look.",
      "revId": "e04cb2b53cb74ddbebff0bba1e60bf342e2d783c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "490f2808_870dc224",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2021-01-18T10:08:40Z",
      "side": 1,
      "message": "It is kind of awkward that wpasupplicant is currently only used in remote WiFi tests that needs a wificell setup. One stabler test uses it: wifi.PMKSACaching.\n\nFor shill part, network.WifiCaps might be a simple sanity check.\n\nTo run all stable remote WiFi tests, you can try: `tast run $DUT \u0027(\"group:wificell\" \u0026\u0026 wificell_func \u0026\u0026 !wificell_unstable)\u0027` but it will take much more time.",
      "parentUuid": "e750b0cb_83654a36",
      "revId": "e04cb2b53cb74ddbebff0bba1e60bf342e2d783c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5003f0a9_973c6a55",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2021-01-18T10:08:40Z",
      "side": 1,
      "message": "only nits",
      "revId": "e04cb2b53cb74ddbebff0bba1e60bf342e2d783c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2563d1d9_50d82653",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2021-01-19T16:20:39Z",
      "side": 1,
      "message": "Will those tests run locally? Or are you referring to a remote $DUT? (I haven\u0027t run tests on a remote DUT before, but I think I have a doc for that bookmarked somewhere). I was hoping we could do that with a specialized tryjob like we do with Chrome, but I don\u0027t see any UI for that.",
      "parentUuid": "490f2808_870dc224",
      "revId": "e04cb2b53cb74ddbebff0bba1e60bf342e2d783c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7099a73b_45adfee0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1373754
      },
      "writtenOn": "2021-01-19T18:14:15Z",
      "side": 1,
      "message": "I am notfamiliar with the specialized tryjob with chrome. For running remote tests, I lease a DUT from label-pool:wificell/label-pool:wificell-cq and run the remote tests on it such as (tast run $DUT wifi.RoamDbus)",
      "parentUuid": "2563d1d9_50d82653",
      "revId": "e04cb2b53cb74ddbebff0bba1e60bf342e2d783c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa3185f7_5431bf43",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2021-01-20T02:44:28Z",
      "side": 1,
      "message": "\u003e Will those tests run locally? Or are you referring to a remote $DUT?\n\nYes, you\u0027ll need a DUT to run the tests and even more complex for wificell setup (need test gale AP). Leasing DUT in wificell-cq pool as Arowa said is possibly the easiest way.\n\nIn any case, I ran some minimum sanity check for this commit with my setup. :)",
      "parentUuid": "7099a73b_45adfee0",
      "revId": "e04cb2b53cb74ddbebff0bba1e60bf342e2d783c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b14dd40_c0d1d004",
        "filename": "src/chromiumos/tast/local/dbusutil/dbus_object.go",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2021-01-18T10:08:40Z",
      "side": 1,
      "message": "nit: I just noticed that there\u0027s a similar function in local/dbusutil/property.go but with different prototype (return value instead of assign to pointer). They can share the same dbusGetPropsMethod.\n\nWe might also re-organize the similar functions a little bit but it should be another CL.",
      "revId": "e04cb2b53cb74ddbebff0bba1e60bf342e2d783c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64f0312c_39e91623",
        "filename": "src/chromiumos/tast/local/dbusutil/dbus_object.go",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2021-01-19T16:20:39Z",
      "side": 1,
      "message": "Agreed that property.go could likely be re-factored to use this, but also that it should be done separately :-)",
      "parentUuid": "4b14dd40_c0d1d004",
      "revId": "e04cb2b53cb74ddbebff0bba1e60bf342e2d783c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b38a3ee_2c35a5dc",
        "filename": "src/chromiumos/tast/local/shill/property.go",
        "patchSetId": 3
      },
      "lineNbr": 233,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2021-01-18T10:08:40Z",
      "side": 1,
      "message": "nit: Not sure if this change is needed (for consistency?). But with this change, it is slightly more straightforward to me to embed PropertyHolder pointer in child objects instead of dereference+copy. Copy is safe here but need to check PropertyHolder for sure when reading. The downside is bad performance with multiple layer of pointer.",
      "range": {
        "startLine": 233,
        "startChar": 81,
        "endLine": 233,
        "endChar": 82
      },
      "revId": "e04cb2b53cb74ddbebff0bba1e60bf342e2d783c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a143005e_d17f509c",
        "filename": "src/chromiumos/tast/local/shill/property.go",
        "patchSetId": 3
      },
      "lineNbr": 233,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2021-01-19T16:20:39Z",
      "side": 1,
      "message": "I did this during the refactoring process and left it for consistency and so that we can return nil on error, but it\u0027s not necessary and I\u0027m not sure which pattern is better so I will revert this here.\n\n(The child objects, e.g. Service, use anonymous embedding, so I\u0027m not sure that holding a pointer would be as convenient. I\u0027m not really concerned with performance in the test code, compared to the other overhead it will be negligible, but readability and maintainability certainly matter, and I\u0027m new to go).",
      "parentUuid": "7b38a3ee_2c35a5dc",
      "range": {
        "startLine": 233,
        "startChar": 81,
        "endLine": 233,
        "endChar": 82
      },
      "revId": "e04cb2b53cb74ddbebff0bba1e60bf342e2d783c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d1a284e2_74a0eae6",
        "filename": "src/chromiumos/tast/local/shill/property.go",
        "patchSetId": 3
      },
      "lineNbr": 233,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2021-01-20T02:44:28Z",
      "side": 1,
      "message": "Thanks. I had written this non-pointer to reduce multiple layer of pointer as it is only used by embed. But I should have PropertyHolder private and better comments for it. I\u0027ll see how I can do better here and upload a CL later.\n\nAlso, I think embed pointer or not does not affect our usage as the child structs, e.g. Manager, are always accessed with pointer.\n\nref: https://golang.org/ref/spec#Struct_types\n- If S contains an embedded field T, the method sets of S and *S both include promoted methods with receiver T. The method set of *S also includes promoted methods with receiver *T.\n- If S contains an embedded field *T, the method sets of S and *S both include promoted methods with receiver T or *T.\n\nIn short, *S will always include promoted methods with receiver T and *T regardless T or *T is embedded.",
      "parentUuid": "a143005e_d17f509c",
      "range": {
        "startLine": 233,
        "startChar": 81,
        "endLine": 233,
        "endChar": 82
      },
      "revId": "e04cb2b53cb74ddbebff0bba1e60bf342e2d783c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de41bcb1_1d414c83",
        "filename": "src/chromiumos/tast/local/shill/property.go",
        "patchSetId": 3
      },
      "lineNbr": 233,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2021-01-20T05:52:32Z",
      "side": 1,
      "message": "Huh, interesting. Regardless, better I think to change that separately.",
      "parentUuid": "d1a284e2_74a0eae6",
      "range": {
        "startLine": 233,
        "startChar": 81,
        "endLine": 233,
        "endChar": 82
      },
      "revId": "e04cb2b53cb74ddbebff0bba1e60bf342e2d783c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}