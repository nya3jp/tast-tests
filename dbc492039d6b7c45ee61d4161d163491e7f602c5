{
  "comments": [
    {
      "key": {
        "uuid": "a506eacf_86858664",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_cpu_perf.go",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2019-05-23T23:52:48Z",
      "side": 1,
      "message": "just to mention it, top-level identifiers can appear in any order. moving this down below the main CrostiniCPUPerf function may make it easier to see the overall flow of the test.",
      "revId": "dbc492039d6b7c45ee61d4161d163491e7f602c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21c6ad7b_c516ec52",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_cpu_perf.go",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1002188
      },
      "writtenOn": "2019-05-24T01:45:55Z",
      "side": 1,
      "message": "I remember Dan suggests not to pass down *testing.State and returns error instead if possible. Not sure if it\u0027s still the recommended way?",
      "revId": "dbc492039d6b7c45ee61d4161d163491e7f602c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecf3e04f_09ef6e79",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_cpu_perf.go",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2019-05-24T01:52:02Z",
      "side": 1,
      "message": "this is kind of hand-wavy, but in general, i\u0027d say it depends on whether the function is actually performing testing, or performing some discrete task where failures can be reported with a single error value.\n\nin this case, i think that this function is performing testing. on L174, for example, it looks like it wants to be able to potentially report multiple testing errors. that\u0027s hard to do using error return values instead of a testing.State, so it\u0027s an argument for using testing.State here.\n\non the other hand, if there were a function that e.g. just started a sysbench process, or just parsed sysbench\u0027s result, that feels more like a discrete task that should return an error instead of taking a testing.State.\n\nsorry that i can\u0027t provide precise guidelines here, but such is the nature of code. :-)",
      "parentUuid": "21c6ad7b_c516ec52",
      "revId": "dbc492039d6b7c45ee61d4161d163491e7f602c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28527eda_deaccfcd",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_cpu_perf.go",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1002188
      },
      "writtenOn": "2019-05-24T02:11:54Z",
      "side": 1,
      "message": "Ok it sounds reasonable and clear enough.\n\n(Off the topic)\nMaybe put it into somewhere in go/tast-writing ?\nThe \"Test subpackages\" section has some words describing \"Avoid passing testing.State when it’s not actually necessary: ...\"\nAlthough it\u0027s talking about subpackages, the concept is similar. Adding more explanation to explain the allowed case may be useful.",
      "parentUuid": "ecf3e04f_09ef6e79",
      "revId": "dbc492039d6b7c45ee61d4161d163491e7f602c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f50c2c3_cf9b0610",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_cpu_perf.go",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2019-05-24T02:24:01Z",
      "side": 1,
      "message": "perhaps, although i\u0027ve found it hard to keep go/tast-writing from getting even larger than it is already. :-)\n\ndid you see https://chromium.googlesource.com/chromiumos/platform/tast/+/HEAD/docs/codelab_2.md#creating-the-filesystem? it touches on this topic too.",
      "parentUuid": "28527eda_deaccfcd",
      "revId": "dbc492039d6b7c45ee61d4161d163491e7f602c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01f2589f_5d2199e6",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_cpu_perf.go",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1002188
      },
      "writtenOn": "2019-05-24T03:43:41Z",
      "side": 1,
      "message": "Good to see it. But may I raise some questions about the rationale:\n\n1. testing.State carries a lot of additional information that this function doesn‘t need. It’s often better to practice information hiding and give a function only the information that it needs.\n\nMaybe we can refactor the code and single out something like \"logger\" since it\u0027s so widely used.\n\n2. If errors are reported directly using testing.State\u0027s Error, Fatal, etc. methods, the caller loses the ability to decide how to deal with errors.\n\nYes so I think it backs to your theory. If it\u0027s part of the test it\u0027s fine to pass a testing.State. But there\u0027re gray area. For example in my previous CL\nhttps://chromium-review.googlesource.com/c/chromiumos/platform/tast-tests/+/1539424/19/src/chromiumos/tast/local/bundles/cros/vm/crostini_input_latency.go\nI think functions like startInputLatencyServer() or startEvtest() could also be deemed as part of the test (?) Also it returns a cleanup function, and the cleanup function may report (or return) errors. So by the end it becomes more complicated.\nMy point if view is that if one function is meant to be called in multiple places (like a util function), then we should make it returns an error. If it\u0027s meant to be called in only one place, it\u0027s tend to be part of the test and we may relax the rule a bit.\n\n3. When errors are reported directly by helper functions, the overall flow of the test becomes \nharder to see. Every call to a helper function could potentially result in a fatal test error.\n\nI remember we can get stack trace of an error. Although one can argue it\u0027s harder to read...\n\njust my 2 cents. :)",
      "parentUuid": "4f50c2c3_cf9b0610",
      "revId": "dbc492039d6b7c45ee61d4161d163491e7f602c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a5f040b_46db9d74",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_cpu_perf.go",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2019-05-24T05:42:34Z",
      "side": 1,
      "message": "\u003e Good to see it. But may I raise some questions about the rationale:\n\nthanks for the details!\n\n\u003e 1. testing.State carries a lot of additional information that this function doesn‘t need. It’s often better to practice information hiding and give a function only the information that it needs.\n\u003e \n\u003e Maybe we can refactor the code and single out something like \"logger\" since it\u0027s so widely used.\n\nmaybe the doc needs to make it clearer, but you don\u0027t need a testing.State for logging. you can pass a context (which most functions end up needing anyway) to testing.ContextLog or testing.ContextLogf.\n\n\u003e 2. If errors are reported directly using testing.State\u0027s Error, Fatal, etc. methods, the caller loses the ability to decide how to deal with errors.\n\u003e \n\u003e Yes so I think it backs to your theory. If it\u0027s part of the test it\u0027s fine to pass a testing.State. But there\u0027re gray area. For example in my previous CL\n\u003e https://chromium-review.googlesource.com/c/chromiumos/platform/tast-tests/+/1539424/19/src/chromiumos/tast/local/bundles/cros/vm/crostini_input_latency.go\n\u003e I think functions like startInputLatencyServer() or startEvtest() could also be deemed as part of the test (?) Also it returns a cleanup function, and the cleanup function may report (or return) errors. So by the end it becomes more complicated.\n\u003e My point if view is that if one function is meant to be called in multiple places (like a util function), then we should make it returns an error. If it\u0027s meant to be called in only one place, it\u0027s tend to be part of the test and we may relax the rule a bit.\n\u003e \n\u003e 3. When errors are reported directly by helper functions, the overall flow of the test becomes \n\u003e harder to see. Every call to a helper function could potentially result in a fatal test error.\n\u003e \n\u003e I remember we can get stack trace of an error. Although one can argue it\u0027s harder to read...\n\u003e \n\u003e just my 2 cents. :)\n\ni think my main feeling here is that code becomes easier to read when you can (safely) make assumptions about what a function will and won\u0027t do. the main things that dictate those assumptions are the function\u0027s name and its arguments (both in and out).\n\nwhen a testing.State is passed, it\u0027s easy for the function to both perform actions and verify assertions. it can be hard to choose a name that expresses the full scope of what the function does.\n\non the other hand, if the function just returns an error, it encourages code authors to choose a narrower scope: the function is likelier to just perform a single, clear operation, which often has the effect of making the calling code easier to reason about.",
      "parentUuid": "01f2589f_5d2199e6",
      "revId": "dbc492039d6b7c45ee61d4161d163491e7f602c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c17e497e_e98c880d",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_cpu_perf.go",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2019-05-23T23:52:48Z",
      "side": 1,
      "message": "nit: how about moving this (down to L101) to the top of this function to get it out of the way first? right now, it feels a bit hard to read since it seems to be:\n\n* parseSysbenchOutput function definition\n* some initialization code that runs inline\n* measureSysBench function definition\n* main code that runs inline and calls measureSysBench",
      "revId": "dbc492039d6b7c45ee61d4161d163491e7f602c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2eb6caa_ddb96fb7",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_cpu_perf.go",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2019-05-23T23:52:48Z",
      "side": 1,
      "message": "please be consistent with \"sysbench\" vs. \"sysBench\" throughout this function; there\u0027s a mix of both, which makes it harder to modify the code. i\u0027d recommend just sticking with the uniform-case \"sysbench\" (or \"Sysbench\" when in the middle of a camel-cased identifier) throughout since that\u0027s the literal binary name.",
      "range": {
        "startLine": 98,
        "startChar": 1,
        "endLine": 98,
        "endChar": 15
      },
      "revId": "dbc492039d6b7c45ee61d4161d163491e7f602c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d733f7f4_5d2319de",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_cpu_perf.go",
        "patchSetId": 2
      },
      "lineNbr": 180,
      "author": {
        "id": 1297374
      },
      "writtenOn": "2019-05-23T23:42:07Z",
      "side": 1,
      "message": "The diff looks odd here because this function was split in half, but really none of this is new - just moved around.",
      "revId": "dbc492039d6b7c45ee61d4161d163491e7f602c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52d245e0_8c1c9aa2",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_cpu_perf.go",
        "patchSetId": 2
      },
      "lineNbr": 180,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2019-05-23T23:52:48Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d733f7f4_5d2319de",
      "revId": "dbc492039d6b7c45ee61d4161d163491e7f602c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "69584105_47e03b71",
        "filename": "src/chromiumos/tast/local/bundles/cros/vm/crostini_cpu_perf.go",
        "patchSetId": 2
      },
      "lineNbr": 230,
      "author": {
        "id": 1002188
      },
      "writtenOn": "2019-05-24T01:45:55Z",
      "side": 1,
      "message": "Since you move sysbench logic out, how about moving lmbench logic to another function as well to be consistent?",
      "revId": "dbc492039d6b7c45ee61d4161d163491e7f602c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}