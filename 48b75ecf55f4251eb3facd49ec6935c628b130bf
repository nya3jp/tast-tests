{
  "comments": [
    {
      "key": {
        "uuid": "a74635c3_0bf08f61",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2018-09-13T14:25:52Z",
      "side": 1,
      "message": "Do you need to log this? Could you make the failure logs more verbose (like include \"checking cyptohomed\") and skip this one?\n\nIn general, what\u0027s the log philosophy in Tast? Our autotests are way too spammy with logs about normal operation.",
      "revId": "48b75ecf55f4251eb3facd49ec6935c628b130bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "deae77a8_98839ec3",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-09-13T16:07:05Z",
      "side": 1,
      "message": "https://chromium.googlesource.com/chromiumos/platform/tast/+/HEAD/docs/writing_tests.md#How-and-when\n\n\"When you‘re about to do something that could take a while or even hang, log a message using Log or Logf first. This both lets developers know what’s happening when they run your test interactively and helps when looking at logs to investigate timeout failures.\n\nOn the other hand, avoid logging unnecessary information that would clutter the logs. If you want to log a verbose piece of information to help determine the cause of an error, only do it after the error has occurred.\"\n\nbasically, \"log things that may be slow\"",
      "parentUuid": "a74635c3_0bf08f61",
      "revId": "48b75ecf55f4251eb3facd49ec6935c628b130bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd9474e8_6dbd8473",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2018-09-13T16:12:59Z",
      "side": 1,
      "message": "That philosophy makes a lot of sense. Kudos for having it documented!",
      "parentUuid": "deae77a8_98839ec3",
      "revId": "48b75ecf55f4251eb3facd49ec6935c628b130bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "60fba0f5_50e5fd28",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2018-09-13T14:25:52Z",
      "side": 1,
      "message": "What happens if cryptohome doesn\u0027t come up for some reason, or comes up really slowly? Is there a timeout? It wasn\u0027t obvious to me from reading WaitForService.",
      "revId": "48b75ecf55f4251eb3facd49ec6935c628b130bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c395a30f_deca3753",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-09-13T16:07:05Z",
      "side": 1,
      "message": "every blocking function that takes a context.Context should abort when that context\u0027s deadline is reached, and s.Context() expires when the test\u0027s timeout is reached. see https://golang.org/pkg/context/ for more about contexts.\n\ni\u0027ll add something about this to the \"writing tests\" doc.",
      "parentUuid": "60fba0f5_50e5fd28",
      "revId": "48b75ecf55f4251eb3facd49ec6935c628b130bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1b19762_97847c99",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2018-09-13T16:12:59Z",
      "side": 1,
      "message": "Wow, context.Context is cool. It\u0027s nice that go has primitives for these sorts of operations -- it\u0027s like people have learned from writing servers for 20 years!",
      "parentUuid": "c395a30f_deca3753",
      "revId": "48b75ecf55f4251eb3facd49ec6935c628b130bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "815ad8ed_68b82f68",
        "filename": "src/chromiumos/tast/local/chrome/chrome.go",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2018-09-13T16:19:41Z",
      "side": 1,
      "message": "i\u0027ll conveniently avoid mentioning the contingent of people who think that context.Context is a travesty and should be deleted in go 2. :-P\n\n(well, i think the main argument is that it inappropriately combines cancelation and attaching random untyped data to a given request. i haven\u0027t been bothered by this, fwiw.)",
      "parentUuid": "f1b19762_97847c99",
      "revId": "48b75ecf55f4251eb3facd49ec6935c628b130bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}