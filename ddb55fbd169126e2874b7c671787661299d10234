{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0aa31391_8dd74a31",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1400492
      },
      "writtenOn": "2021-08-16T10:17:47Z",
      "side": 1,
      "message": "Hi Gabor!\n\nWhile we can\u0027t really test anything after a real update (right?), I already wrote a test basically faking a rollback by triggering the respective script and faking clobber_state. So far it only checks whether the enrollment screen is automatically reached but we can extend it in the future.",
      "revId": "ddb55fbd169126e2874b7c671787661299d10234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c2690e8_0591db05",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1401350
      },
      "writtenOn": "2021-08-16T12:12:51Z",
      "side": 1,
      "message": "Right, right now we cannot test anything after a real update.",
      "parentUuid": "0aa31391_8dd74a31",
      "revId": "ddb55fbd169126e2874b7c671787661299d10234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f444429_17cf35f1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1401350
      },
      "writtenOn": "2021-08-16T12:12:51Z",
      "side": 1,
      "message": "Is it urgent to merge this test, or can we wait until Victor is back?\nAs it touches enrollment, and it is a remote test, I\u0027d rather wait for him.",
      "revId": "ddb55fbd169126e2874b7c671787661299d10234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad7d9bfb_dfe7649c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1400492
      },
      "writtenOn": "2021-08-16T12:49:45Z",
      "side": 1,
      "message": "I would prefer to merge it before, because when Victor is back I will be gone until roughly end of September. That would make catching any errors in M94 tricky and we plan to start TT again with M96 -\u003e M94.\nI\u0027d say if you think the test may be problematic for infrastructure / break device, we should wait for Victor. If it\u0027s just a matter of how to write the test I\u0027d prefer to merge now and then ask Victor when I\u0027m back. Up to you.",
      "parentUuid": "1f444429_17cf35f1",
      "revId": "ddb55fbd169126e2874b7c671787661299d10234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da3bf6d5_61ffc1f8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1401350
      },
      "writtenOn": "2021-08-16T13:34:59Z",
      "side": 1,
      "message": "Do you think it has a possibility to break a device?\nThe test can stop at any point because of a timeout. Can any command without the cleanup leave the DUT in an undesirable state?",
      "parentUuid": "ad7d9bfb_dfe7649c",
      "revId": "ddb55fbd169126e2874b7c671787661299d10234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab569801_0f8b2c92",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1401350
      },
      "writtenOn": "2021-08-16T13:34:59Z",
      "side": 1,
      "message": "As this test has an unusual structure, just a few function calls in the main functions, I add Kamil and Oleh as reviewers as well.\nI am adding Kamil as he likes these kinds of structures.\nOleh, can you check the exec.Commands? Do you think some should be replaced by Go calls? Like the file deletion.",
      "revId": "ddb55fbd169126e2874b7c671787661299d10234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "034e077e_e06ae971",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1400492
      },
      "writtenOn": "2021-08-16T13:53:54Z",
      "side": 1,
      "message": "I don\u0027t think so, as I am not doing anything with a device that\u0027s not already done apart form starting oobe_config_save. I will investigate what happens if oobe_config_save does not terminate, i.e. wether it wil still be running on the device after the context timeout, if that is the case one should probably do \"stop oobe_config_save\" on the cleanup task.",
      "parentUuid": "da3bf6d5_61ffc1f8",
      "revId": "ddb55fbd169126e2874b7c671787661299d10234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c702b499_7a9b7eec",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1400492
      },
      "writtenOn": "2021-08-17T08:29:12Z",
      "side": 1,
      "message": "If and how do I best replace the CommandContext calls? Either by using existing services, e.g. daemon_control and dutfs or is it better to implement those myslef in rollback_service?",
      "parentUuid": "ab569801_0f8b2c92",
      "revId": "ddb55fbd169126e2874b7c671787661299d10234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "df4dad2f_5bac665a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1400492
      },
      "writtenOn": "2021-08-17T08:29:12Z",
      "side": 1,
      "message": "Added some more cleanup.",
      "parentUuid": "034e077e_e06ae971",
      "revId": "ddb55fbd169126e2874b7c671787661299d10234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4737602_ec643d52",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2021-08-17T17:16:21Z",
      "side": 1,
      "message": "I think it might be OK and simplest way to use exec.Commands to remove files in remote tests",
      "parentUuid": "c702b499_7a9b7eec",
      "revId": "ddb55fbd169126e2874b7c671787661299d10234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3a771d3_3bcc33b8",
        "filename": "src/chromiumos/tast/remote/bundles/cros/policy/enterprise_rollback_in_place.go",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1401350
      },
      "writtenOn": "2021-08-16T12:12:51Z",
      "side": 1,
      "message": "You shouldn\u0027t pass testing.State to a helper function.\nIf you have an error, you should Wrap() it, and return with it, and you can raise s.Error() or s.Fatal() in the main function.",
      "range": {
        "startLine": 51,
        "startChar": 35,
        "endLine": 51,
        "endChar": 51
      },
      "revId": "ddb55fbd169126e2874b7c671787661299d10234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0282e6cc_ce05835a",
        "filename": "src/chromiumos/tast/remote/bundles/cros/policy/enterprise_rollback_in_place.go",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1400492
      },
      "writtenOn": "2021-08-16T12:49:45Z",
      "side": 1,
      "message": "Am I allowed to not add anything to the error, i.e. just call s.Error(err.Error()) in the main test function?\n\nOut of curiousity, why shouldn\u0027t I do that?",
      "parentUuid": "f3a771d3_3bcc33b8",
      "range": {
        "startLine": 51,
        "startChar": 35,
        "endLine": 51,
        "endChar": 51
      },
      "revId": "ddb55fbd169126e2874b7c671787661299d10234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c34d22b_2382cc16",
        "filename": "src/chromiumos/tast/remote/bundles/cros/policy/enterprise_rollback_in_place.go",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1401350
      },
      "writtenOn": "2021-08-16T13:34:59Z",
      "side": 1,
      "message": "https://chromium.googlesource.com/chromiumos/platform/tast/+/HEAD/docs/writing_tests.md#test-subpackages\nIt is not forbidden if it is not an exported function, just better to avoid it.\nAnd yes, it is possible to raise an error with s.Error(err).",
      "parentUuid": "0282e6cc_ce05835a",
      "range": {
        "startLine": 51,
        "startChar": 35,
        "endLine": 51,
        "endChar": 51
      },
      "revId": "ddb55fbd169126e2874b7c671787661299d10234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1bc7fdca_2b1bb50e",
        "filename": "src/chromiumos/tast/remote/bundles/cros/policy/enterprise_rollback_in_place.go",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1400492
      },
      "writtenOn": "2021-08-16T13:53:54Z",
      "side": 1,
      "message": "I see, so the argument is information hiding. For example here I could pass s.DUT() and return an error instead. That sounds very reasonable.\nMy original motiviation to pass testing.State was avoiding the additional boilerplate code for the errors, but I suppose that\u0027s something one has to live with when writing go code.",
      "parentUuid": "4c34d22b_2382cc16",
      "range": {
        "startLine": 51,
        "startChar": 35,
        "endLine": 51,
        "endChar": 51
      },
      "revId": "ddb55fbd169126e2874b7c671787661299d10234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1aeabfb_2349ed2e",
        "filename": "src/chromiumos/tast/remote/bundles/cros/policy/enterprise_rollback_in_place.go",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1400492
      },
      "writtenOn": "2021-08-17T08:29:12Z",
      "side": 1,
      "message": "About the functions that receive *testing.State: I tried to rewrite that and really looks wrong. Also I found some examples in the code that do something similar: e.g. https://source.corp.google.com/chromeos_public/src/platform/tast-tests/src/chromiumos/tast/local/bundles/cros/firmware/flashrom_perf.go;l\u003d99?q\u003d%22s%20*testing.State%22\u0026sq\u003dpackage:chromeos_public\u0026start\u003d71\n\nI think the documentation also rather speaks for passing *testing.State:\n\"If a subpackage actually contains the test implementation (typically because it‘s shared across several tests), it’s okay to pass testing.State to it so it can report test errors itself.\" Here we don\u0027t even have a subpackages. The function is really in a test file. So I would argue that passing the state is fine.",
      "parentUuid": "1bc7fdca_2b1bb50e",
      "range": {
        "startLine": 51,
        "startChar": 35,
        "endLine": 51,
        "endChar": 51
      },
      "revId": "ddb55fbd169126e2874b7c671787661299d10234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3805b4c5_b96a2ab9",
        "filename": "src/chromiumos/tast/remote/bundles/cros/policy/enterprise_rollback_in_place.go",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1306673
      },
      "writtenOn": "2021-08-17T17:16:21Z",
      "side": 1,
      "message": "Some tests ignore that rule, but you shouldn\u0027t follow that way. You should pass testing state to only \"main\" test functions.\n\nPassing testing state everywhere also makes harder to understand test failures especially if you call some function multiple times.",
      "parentUuid": "f1aeabfb_2349ed2e",
      "range": {
        "startLine": 51,
        "startChar": 35,
        "endLine": 51,
        "endChar": 51
      },
      "revId": "ddb55fbd169126e2874b7c671787661299d10234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b538ae27_73ce4129",
        "filename": "src/chromiumos/tast/remote/bundles/cros/policy/enterprise_rollback_in_place.go",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1400492
      },
      "writtenOn": "2021-08-18T10:03:18Z",
      "side": 1,
      "message": "Ack, the \"calling function multiple times\" argument makes a lot of sense. I don\u0027t do that or plan to do it though. The functions are merely there to group the test into building blocks. This makes it much more readable for someone reading the file top to bottom to understand what the test is doing.\n\nYou all agree on this point so I\u0027ll rewrite it now. I had to move cleanup out of its own function because I want to call s.Error for each error. I\u0027d say this is another indicator that stricly following this rule here is too rigid. The last thing a style guide should do is prohibit clean code that separates different concerns into different functions.\n\nI\u0027d still like to discuss it for the sake of understanding. Is there any concrete reason for doing it this way?",
      "parentUuid": "3805b4c5_b96a2ab9",
      "range": {
        "startLine": 51,
        "startChar": 35,
        "endLine": 51,
        "endChar": 51
      },
      "revId": "ddb55fbd169126e2874b7c671787661299d10234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2de80a23_a2487f5f",
        "filename": "src/chromiumos/tast/remote/bundles/cros/policy/enterprise_rollback_in_place.go",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1459973
      },
      "writtenOn": "2021-08-19T09:49:26Z",
      "side": 1,
      "message": "When it comes to passing testing state it may create confusion - since that object is passed one could expect that function uses various data/calls from it. I know that passing state and then calling s.Fatal() is very convenient - I\u0027ve done it myself that way when I started writing tests in Tast.\n\nCurrent calls\u0027 signatures covey clearly what they do and what they need.\n\n\n\u003e\u003e You all agree on this point so I\u0027ll rewrite it now. I had to move cleanup out of its own function because I want to call s.Error for each error. I\u0027d say this is another indicator that stricly following this rule here is too rigid. The last thing a style guide should do is prohibit clean code that separates different concerns into different functions.\n\nI faced the same situation Miriam. I always try to arrange tests into Arrange/Act/Asserts blocks with a high level functions describing the execution flow - so, the person looking at the functions that are called knows what a test does. It also makes test following single layer of abstraction principle.\nThough the convention in Tast (or golang) does not make it easy to follow clean code principles.\nAt the same time I heard that tests in Autotest were difficult to maintain due to too much abstraction in them.",
      "parentUuid": "b538ae27_73ce4129",
      "range": {
        "startLine": 51,
        "startChar": 35,
        "endLine": 51,
        "endChar": 51
      },
      "revId": "ddb55fbd169126e2874b7c671787661299d10234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fef521a5_64305e29",
        "filename": "src/chromiumos/tast/remote/bundles/cros/policy/enterprise_rollback_in_place.go",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1401350
      },
      "writtenOn": "2021-08-16T12:12:51Z",
      "side": 1,
      "message": "Can you Dial once in the main function, and pass client as a parameter?",
      "range": {
        "startLine": 58,
        "startChar": 1,
        "endLine": 58,
        "endChar": 7
      },
      "revId": "ddb55fbd169126e2874b7c671787661299d10234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fdef576d_88a0be14",
        "filename": "src/chromiumos/tast/remote/bundles/cros/policy/enterprise_rollback_in_place.go",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1400492
      },
      "writtenOn": "2021-08-16T12:49:45Z",
      "side": 1,
      "message": "No because I lose the connection during reboot, I actually need to dial twice.",
      "parentUuid": "fef521a5_64305e29",
      "range": {
        "startLine": 58,
        "startChar": 1,
        "endLine": 58,
        "endChar": 7
      },
      "revId": "ddb55fbd169126e2874b7c671787661299d10234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f091aae1_fd3aea9d",
        "filename": "src/chromiumos/tast/remote/bundles/cros/policy/enterprise_rollback_in_place.go",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1401350
      },
      "writtenOn": "2021-08-16T13:34:59Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "fdef576d_88a0be14",
      "range": {
        "startLine": 58,
        "startChar": 1,
        "endLine": 58,
        "endChar": 7
      },
      "revId": "ddb55fbd169126e2874b7c671787661299d10234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ac5c2bd_f4777f6f",
        "filename": "src/chromiumos/tast/remote/bundles/cros/policy/enterprise_rollback_in_place.go",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1401350
      },
      "writtenOn": "2021-08-16T12:12:51Z",
      "side": 1,
      "message": "Use CommandContext() for every call.",
      "range": {
        "startLine": 80,
        "startChar": 26,
        "endLine": 80,
        "endChar": 33
      },
      "revId": "ddb55fbd169126e2874b7c671787661299d10234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb853d1e_71105a95",
        "filename": "src/chromiumos/tast/remote/bundles/cros/policy/enterprise_rollback_in_place.go",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1400492
      },
      "writtenOn": "2021-08-17T08:29:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7ac5c2bd_f4777f6f",
      "range": {
        "startLine": 80,
        "startChar": 26,
        "endLine": 80,
        "endChar": 33
      },
      "revId": "ddb55fbd169126e2874b7c671787661299d10234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b07b080_652eccf9",
        "filename": "src/chromiumos/tast/services/cros/policy/rollback_service.proto",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1401350
      },
      "writtenOn": "2021-08-16T12:12:51Z",
      "side": 1,
      "message": "nit: add newline to the end of the file.",
      "revId": "ddb55fbd169126e2874b7c671787661299d10234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b27a89b5_4cd83dfa",
        "filename": "src/chromiumos/tast/services/cros/policy/rollback_service.proto",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1400492
      },
      "writtenOn": "2021-08-18T10:03:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3b07b080_652eccf9",
      "revId": "ddb55fbd169126e2874b7c671787661299d10234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}