{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ee980db0_6a6af9be",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1113991
      },
      "writtenOn": "2022-05-26T00:25:49Z",
      "side": 1,
      "message": "pwang@ WDYT? I tried it on a number of devices and\nreadings look sound.\n\nOthers FYI",
      "revId": "e4d00303d8a05f81a59a34e57a5d4346ff8d86b9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed091c76_8112616f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1113991
      },
      "writtenOn": "2022-06-02T19:03:19Z",
      "side": 1,
      "message": "pwang@ PTAL",
      "revId": "e4d00303d8a05f81a59a34e57a5d4346ff8d86b9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "505648b0_701b7d0b",
        "filename": "src/chromiumos/tast/local/graphics/perf.go",
        "patchSetId": 3
      },
      "lineNbr": 451,
      "author": {
        "id": 1197299
      },
      "writtenOn": "2022-05-26T21:20:41Z",
      "side": 1,
      "message": "Why we have ignoreErr set to true here? Should we check Err() instead?",
      "range": {
        "startLine": 451,
        "startChar": 47,
        "endLine": 451,
        "endChar": 51
      },
      "revId": "e4d00303d8a05f81a59a34e57a5d4346ff8d86b9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e9b16cd_2b7e3174",
        "filename": "src/chromiumos/tast/local/graphics/perf.go",
        "patchSetId": 3
      },
      "lineNbr": 451,
      "author": {
        "id": 1113991
      },
      "writtenOn": "2022-06-02T19:03:19Z",
      "side": 1,
      "message": "Hmm the only other use of TryBatteryDischarge() looks like this [1]\nand I\u0027m not even sure how it works since the signature of that\nmethod is \n  func TryBatteryDischarge(errp *error) BatteryDischargeMode\n\n:) -- can you instruct how to \"check Err() instead\"?\n\n\n\n[1] https://source.chromium.org/chromiumos/chromiumos/codesearch/+/main:src/platform/tast-tests/src/chromiumos/tast/local/ui/cujrecorder/recorder.go;l\u003d267?q\u003dTryBatteryDischarge\u0026ss\u003dchromiumos%2Fchromiumos%2Fcodesearch:src%2Fplatform%2Ftast-tests%2Fsrc%2Fchromiumos%2Ftast%2F",
      "parentUuid": "505648b0_701b7d0b",
      "range": {
        "startLine": 451,
        "startChar": 47,
        "endLine": 451,
        "endChar": 51
      },
      "revId": "e4d00303d8a05f81a59a34e57a5d4346ff8d86b9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "441d5e56_d08ece77",
        "filename": "src/chromiumos/tast/local/graphics/perf.go",
        "patchSetId": 3
      },
      "lineNbr": 451,
      "author": {
        "id": 1197299
      },
      "writtenOn": "2022-06-02T21:48:43Z",
      "side": 1,
      "message": "By setting ignoreErr to false, it returns advancedBatteryDischargeMode.\nLooking at advancedBatteryDischargeMode, it has an Err method[1].\n\nI can\u0027t find where the signature of the method you mentioned. I found the following signature instead. \n```\nfunc TryBatteryDischarge(ignoreErr bool, threshold float64) BatteryDischargeMode\n```\n\n[1] http://cs/chromeos_public/src/platform/tast-tests/src/chromiumos/tast/local/power/setup/setup.go;l\u003d187;rcl\u003ddc2b2a29086968a702c24474362d782196096390",
      "parentUuid": "7e9b16cd_2b7e3174",
      "range": {
        "startLine": 451,
        "startChar": 47,
        "endLine": 451,
        "endChar": 51
      },
      "revId": "e4d00303d8a05f81a59a34e57a5d4346ff8d86b9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b985258_1379caf4",
        "filename": "src/chromiumos/tast/local/graphics/perf.go",
        "patchSetId": 3
      },
      "lineNbr": 451,
      "author": {
        "id": 1113991
      },
      "writtenOn": "2022-06-03T19:08:07Z",
      "side": 1,
      "message": "Oh thanks for finding the reference. I remember my reasoning now.\nThe help says:\n\n  // TryBatteryDischarge option requests setup to try battery discharge. If the\n  // ignoreErr flag is false, TryBatteryDischarge returns basicBatteryDischargeMode\n  // which forces the discharge and will cause power test setup to fail on error.\n  // Otherwise, the advancedBatteryDischargeMode is returned, with which the discharge\n  // error is omitted from the power test setup but can be obtained via Err() interface.\n \nHaving an |ignoreErr| \u003d\u003d true basically instructs setup.PowerTest()\nin l.453 to report the error in |err| there, whereas not ignoring \nthe error means it\u0027ll be provided via a different point (a callback).\nBut both cases would be the same from our perf.go perspective,\nIIUC, the only difference is the error reporting, which would be\nmore cumbersome with |ignoreErr| \u003d\u003d true.  IOW |ignoreErr| is a\nbad name for what it really does.\n\nFrom my readings of the existing code, a handful of devices don\u0027t \nsupport battery discharge, and in my runs also my hana had some \nsort of \"permission denied\" error. In either case we don\u0027t care\nmuch from the graphics perf.go perspective: it\u0027s an error, we cannot\ncollect system power consumption, and we don\u0027t want to interrupt\nthe test because of it. \n\nWDYT?",
      "parentUuid": "441d5e56_d08ece77",
      "range": {
        "startLine": 451,
        "startChar": 47,
        "endLine": 451,
        "endChar": 51
      },
      "revId": "e4d00303d8a05f81a59a34e57a5d4346ff8d86b9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19a67976_b1837a97",
        "filename": "src/chromiumos/tast/local/graphics/perf.go",
        "patchSetId": 3
      },
      "lineNbr": 459,
      "author": {
        "id": 1197299
      },
      "writtenOn": "2022-05-26T21:20:41Z",
      "side": 1,
      "message": "measurement,",
      "range": {
        "startLine": 459,
        "startChar": 36,
        "endLine": 459,
        "endChar": 40
      },
      "revId": "e4d00303d8a05f81a59a34e57a5d4346ff8d86b9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "18861920_55763203",
        "filename": "src/chromiumos/tast/local/graphics/perf.go",
        "patchSetId": 3
      },
      "lineNbr": 459,
      "author": {
        "id": 1113991
      },
      "writtenOn": "2022-06-02T19:03:19Z",
      "side": 1,
      "message": "I think \"meas\" is widely accepted, but done.",
      "parentUuid": "19a67976_b1837a97",
      "range": {
        "startLine": 459,
        "startChar": 36,
        "endLine": 459,
        "endChar": 40
      },
      "revId": "e4d00303d8a05f81a59a34e57a5d4346ff8d86b9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10e11613_87c925be",
        "filename": "src/chromiumos/tast/local/graphics/perf.go",
        "patchSetId": 3
      },
      "lineNbr": 475,
      "author": {
        "id": 1197299
      },
      "writtenOn": "2022-05-26T21:20:41Z",
      "side": 1,
      "message": "Let\u0027s check if the remaining time of ctx is greater than t. So that we won\u0027t hit by timeout.",
      "revId": "e4d00303d8a05f81a59a34e57a5d4346ff8d86b9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3928e004_78822f65",
        "filename": "src/chromiumos/tast/local/graphics/perf.go",
        "patchSetId": 3
      },
      "lineNbr": 475,
      "author": {
        "id": 1113991
      },
      "writtenOn": "2022-06-02T19:03:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "10e11613_87c925be",
      "revId": "e4d00303d8a05f81a59a34e57a5d4346ff8d86b9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}