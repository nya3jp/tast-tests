{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d8126d66_a2f34053",
        "filename": "src/chromiumos/tast/local/android/ui/object.go",
        "patchSetId": 3
      },
      "lineNbr": 165,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2021-06-24T03:20:06Z",
      "side": 1,
      "message": "I\u0027m not sure I understand this correctly. Let say I passed n\u003d10 to this function, and it could perform 5 scroll steps. What is returned in this case? It\u0027s nice to clarify this in comments.",
      "range": {
        "startLine": 165,
        "startChar": 5,
        "endLine": 165,
        "endChar": 74
      },
      "revId": "4ab2a5098864dd714dc1196885e07bcdb7608663",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cd27bcc_baca7d3c",
        "filename": "src/chromiumos/tast/local/android/ui/object.go",
        "patchSetId": 3
      },
      "lineNbr": 184,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2021-06-24T03:20:06Z",
      "side": 1,
      "message": "I recommend designing this method to either (1) focus on methods returning a bool, or (2) focus on scroll-related methods. The current signature is somewhere between the two.\n\n- In the case of (1), I\u0027d name this method callSimpleBool and don\u0027t mention \"scrolling\" in comments.\n- In the case of (2), I\u0027d change the signature of this method to callScroll(ctx context.Context, method string, n int) (bool, error) (i.e. don\u0027t pass o.s and true from callers).\n\nI don\u0027t have strong opinion on which of the two approaches to take though.",
      "range": {
        "startLine": 184,
        "startChar": 17,
        "endLine": 184,
        "endChar": 36
      },
      "revId": "4ab2a5098864dd714dc1196885e07bcdb7608663",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2f5e0be_6168b039",
        "filename": "src/chromiumos/tast/local/bundles/cros/arcappcompat/testutil/testutil.go",
        "patchSetId": 3
      },
      "lineNbr": 466,
      "author": {
        "id": 1474010
      },
      "writtenOn": "2021-06-19T06:35:41Z",
      "side": 1,
      "message": "Can we check if scrollToEnd or scrollTo will works here?",
      "range": {
        "startLine": 466,
        "startChar": 46,
        "endLine": 466,
        "endChar": 59
      },
      "revId": "4ab2a5098864dd714dc1196885e07bcdb7608663",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f62732f7_c3c47b70",
        "filename": "src/chromiumos/tast/local/bundles/cros/arcappcompat/testutil/testutil.go",
        "patchSetId": 3
      },
      "lineNbr": 466,
      "author": {
        "id": 1287257
      },
      "writtenOn": "2021-06-21T18:12:35Z",
      "side": 1,
      "message": "yes, I did check it when I added UIAutomator scrollForward (crrev.com/c/2691327) and scrollBackward (crrev.com/c/2704626) methods in tast. Both scrollToEnd and scrollTo methods are app specific. TouchScreenScroll testcase requires UIAutomator scrollForward method as it is a  common method which can be used for all 100 apps. So scrollForward method is needed here.",
      "parentUuid": "c2f5e0be_6168b039",
      "range": {
        "startLine": 466,
        "startChar": 46,
        "endLine": 466,
        "endChar": 59
      },
      "revId": "4ab2a5098864dd714dc1196885e07bcdb7608663",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13ec8017_743b1aa0",
        "filename": "src/chromiumos/tast/local/bundles/cros/arcappcompat/testutil/testutil.go",
        "patchSetId": 3
      },
      "lineNbr": 473,
      "author": {
        "id": 1474010
      },
      "writtenOn": "2021-06-19T06:35:41Z",
      "side": 1,
      "message": "But how are we ensuring that it scrolled as there is no verification here. Suppose when scroll doesn\u0027t work and returns false then scrollForwdInfo will be false and the test just logs and passes and doesn\u0027t assert anything.",
      "range": {
        "startLine": 470,
        "startChar": 1,
        "endLine": 473,
        "endChar": 0
      },
      "revId": "4ab2a5098864dd714dc1196885e07bcdb7608663",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5480b62f_56ef446b",
        "filename": "src/chromiumos/tast/local/bundles/cros/arcappcompat/testutil/testutil.go",
        "patchSetId": 3
      },
      "lineNbr": 473,
      "author": {
        "id": 1287257
      },
      "writtenOn": "2021-06-21T18:12:35Z",
      "side": 1,
      "message": "yes, it does throw an error if it didn\u0027t perform scroll, \nscrollForwdInfo, err :\u003d checkForScrollLayout.ScrollForward(ctx, 50)\n\tif err !\u003d nil {\n\t\ts.Fatal(\"Failed to scroll forward: \", err)\n\t}\n\t\nCode snippet for ScrollForward method from object.go,\nfunc (o *Object) ScrollForward(ctx context.Context, n int) (bool, error) {\n\treturn o.callSimpleForScroll(ctx, \"scrollForward\", o.s, true, n)\n}\n\nThe above method returns boolean and error and the same error will be captured here, \nscrollForwdInfo, err :\u003d checkForScrollLayout.ScrollForward(ctx, 50)\n\tif err !\u003d nil {\n\t\ts.Fatal(\"Failed to scroll forward: \", err)\n\t\t}\n\t\t\nRegarding scrollForwardInfo returning false,\nLet me give some context, scrollForward and scrollBackward in object.go are wrappers in tast and using scrollForward and scrollBackward method in UIAutomator server (https://github.com/xiaocong/android-uiautomator-server/blob/master/app/src/androidTest/java/com/github/uiautomator/stub/AutomatorService.java#L572). \nAs per scrollForward and scrollBackward method in UIAutomator server (https://github.com/xiaocong/android-uiautomator-server/blob/master/app/src/androidTest/java/com/github/uiautomator/stub/AutomatorService.java#L572), scrollForward or scrollBackward will return output as true if it is scrolled or false if page is not scrollable any more. \nCurrently tast UI Object doesn\u0027t have support to interpret the the outputs of scrollForward and scrollBackward methods in UIAutomator server. This CL has added a new \"callSimpleForScroll\" method in tast, which will interprets the output of scrollForward and scrollBackward methods correctly. So flaky failures will be fixed.\n// callSimpleForScroll is a method to call a RPC method that returns output as true if scrolled, false if can\u0027t scroll anymore.\nfunc (o *Object) callSimpleForScroll(ctx context.Context, method string, params ...interface{}) (bool, error) {\n\tvar output bool\n\tif err :\u003d o.d.call(ctx, method, \u0026output, params...); err !\u003d nil {\n\t\treturn output, wrapMethodError(method, o.s, err)\n\t}\n\treturn output, nil\n}",
      "parentUuid": "13ec8017_743b1aa0",
      "range": {
        "startLine": 470,
        "startChar": 1,
        "endLine": 473,
        "endChar": 0
      },
      "revId": "4ab2a5098864dd714dc1196885e07bcdb7608663",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}