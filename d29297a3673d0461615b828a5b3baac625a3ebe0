{
  "comments": [
    {
      "key": {
        "uuid": "febbcd1f_d52c1eb9",
        "filename": "src/chromiumos/tast/remote/wificell/security/interface.go",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-03-26T02:56:19Z",
      "side": 1,
      "message": "I see some golang packages defines the interfaces in interface.go but I\u0027m not sure if it\u0027s a good practice. (or maybe config.go? as we move implementation into sub-package)",
      "revId": "d29297a3673d0461615b828a5b3baac625a3ebe0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "565c25b1_9dd56bda",
        "filename": "src/chromiumos/tast/remote/wificell/security/interface.go",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2020-03-26T02:58:04Z",
      "side": 1,
      "message": "Configurer\n\nThough the interface contains more than one method. Let\u0027s apply single method interface\u0027 naming rule: suffix \"er\". \n\nAlso, consider renaming interface.go to configurer.go.",
      "revId": "d29297a3673d0461615b828a5b3baac625a3ebe0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e3ee394_db20b016",
        "filename": "src/chromiumos/tast/remote/wificell/security/interface.go",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-03-26T03:47:26Z",
      "side": 1,
      "message": "Nice suggestion, but let me defer the rename for now. Spreading the comments in multiple patchset is kind of hard for discussion thread to be found.\n\nOr should I duplicate some codes into a google doc for discussion, and keep the cl updated?",
      "parentUuid": "565c25b1_9dd56bda",
      "revId": "d29297a3673d0461615b828a5b3baac625a3ebe0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26d374ab_bdfca7ee",
        "filename": "src/chromiumos/tast/remote/wificell/security/interface.go",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2020-03-26T09:24:28Z",
      "side": 1,
      "message": "I think we can just discuss here and you don\u0027t need to modify the code here (if it is originated from Hsin-chen, he can take the action to modify the code in another CL). Or do you think Google docs is a better place to discuss?",
      "parentUuid": "0e3ee394_db20b016",
      "revId": "d29297a3673d0461615b828a5b3baac625a3ebe0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd7680c0_24868310",
        "filename": "src/chromiumos/tast/remote/wificell/security/interface.go",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-03-27T04:39:10Z",
      "side": 1,
      "message": "If we\u0027re just marking TODOs and let it be done in other cls, then I\u0027m find with gerrit.\nThe problem I want to avoid is that some not yet resolved comment might be buried in old patchsets.",
      "parentUuid": "26d374ab_bdfca7ee",
      "revId": "d29297a3673d0461615b828a5b3baac625a3ebe0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03561666_50ebe530",
        "filename": "src/chromiumos/tast/remote/wificell/security/interface.go",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2020-03-26T02:58:04Z",
      "side": 1,
      "message": "Remove stop word \"Get\".",
      "range": {
        "startLine": 11,
        "startChar": 1,
        "endLine": 11,
        "endChar": 9
      },
      "revId": "d29297a3673d0461615b828a5b3baac625a3ebe0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "964c4ef5_9d154457",
        "filename": "src/chromiumos/tast/remote/wificell/security/interface.go",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-03-26T02:56:19Z",
      "side": 1,
      "message": "I suggested the name \"Generator\" but I guess that might not be a proper name for it.\n(generator seems to mean something else: https://en.wikipedia.org/wiki/Generator_(computer_programming) )\nMaybe just Factory?",
      "revId": "d29297a3673d0461615b828a5b3baac625a3ebe0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "661b3367_5bb0b83d",
        "filename": "src/chromiumos/tast/remote/wificell/security/interface.go",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1387481
      },
      "writtenOn": "2020-03-27T03:48:03Z",
      "side": 1,
      "message": "Good idea, I think Factory is at least better than Generator.",
      "parentUuid": "964c4ef5_9d154457",
      "revId": "d29297a3673d0461615b828a5b3baac625a3ebe0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eef252db_33eea06c",
        "filename": "src/chromiumos/tast/remote/wificell/security/security_test.go.bak",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-03-26T02:56:19Z",
      "side": 1,
      "message": "As the implementation is split into sub-packages, uni-tests should be moved into sub-package (which might increase many duplicated test codes.)\nThere are a lot of codes to move, so I skipped it by renaming now. :p",
      "revId": "d29297a3673d0461615b828a5b3baac625a3ebe0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1aa180e3_856b4b04",
        "filename": "src/chromiumos/tast/remote/wificell/security/tunneled1x/config.go",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1387481
      },
      "writtenOn": "2020-03-27T03:48:03Z",
      "side": 1,
      "message": "I don\u0027t think storing Options in Config is a good idea. Option is used for constructing Config, so it is weird that a Config contains an Option. I think it should be stored in Generator(Factory) instead.",
      "range": {
        "startLine": 80,
        "startChar": 1,
        "endLine": 80,
        "endChar": 26
      },
      "revId": "d29297a3673d0461615b828a5b3baac625a3ebe0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "203407c3_1eceb391",
        "filename": "src/chromiumos/tast/remote/wificell/security/tunneled1x/config.go",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-03-27T04:31:59Z",
      "side": 1,
      "message": "In this case, you can modify the Option to take something else as input instead of *Config, like if we\u0027re removing NewConfig, it can even take *Factory, then inheritOption can still work (by appending the option to factory.parentOps). Or a bigger object which embeds Config/*Config might also work.\n\nThe caller don\u0027t really care what function an Option is, I think. (We even want to prohibit the callers from defining Option)",
      "parentUuid": "1aa180e3_856b4b04",
      "range": {
        "startLine": 80,
        "startChar": 1,
        "endLine": 80,
        "endChar": 26
      },
      "revId": "d29297a3673d0461615b828a5b3baac625a3ebe0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0980c30b_0313726a",
        "filename": "src/chromiumos/tast/remote/wificell/security/tunneled1x/config.go",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-03-26T02:56:19Z",
      "side": 1,
      "message": "The required paramters in tunneled1x makes me think if it is simpler to only use Generator.Gen and remove NewConfig so that we can avoid defining the long required parameter list twice.\n\nIt might be harder to use in some other case but I\u0027m guess maybe it\u0027s OK?\ne.g. c, err :\u003d NewConfig(...) -\u003e c, err :\u003d NewGenerator(...).Gen()",
      "revId": "d29297a3673d0461615b828a5b3baac625a3ebe0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4383252d_a3cc3749",
        "filename": "src/chromiumos/tast/remote/wificell/security/tunneled1x/config.go",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-03-26T03:35:04Z",
      "side": 1,
      "message": "If we remove NewConfig, the list of parent Options may be moved into Generator and gain more control of the construction flow. And then Hsin-chen\u0027s design might also work. (i.e. can do something before and after parent construction)\nHowever, Hsin-chen\u0027s design will allow arbitrary option and reveals the inheritance details to caller. (the property has both pros and cons.)",
      "parentUuid": "0980c30b_0313726a",
      "revId": "d29297a3673d0461615b828a5b3baac625a3ebe0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb0e31a4_6d72d59f",
        "filename": "src/chromiumos/tast/remote/wificell/security/tunneled1x/config.go",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2020-03-26T09:24:28Z",
      "side": 1,
      "message": "Using generator, GenFoo(), instead of constructor, NewFoo(), to instantiate Config struct sounds like a good idea.",
      "parentUuid": "4383252d_a3cc3749",
      "revId": "d29297a3673d0461615b828a5b3baac625a3ebe0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5149b412_0c0c0edb",
        "filename": "src/chromiumos/tast/remote/wificell/security/tunneled1x/config.go",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1387481
      },
      "writtenOn": "2020-03-27T03:48:03Z",
      "side": 1,
      "message": "Removing NewConfig and just keeping Generator.Gen() is good. They actually do the same things. It\u0027s also good to define a NewGenerator since there are many required parameters.\n\nThe problem of my design, allowing arbitrary option to parent, is critical I think. An error of passing improper options to parent should be prevented and caught by this layer, or at least we should provide more info at here, but it\u0027s difficult. Perhaps not that good but we can define another option type like []ParentOption here in the struct.",
      "parentUuid": "eb0e31a4_6d72d59f",
      "revId": "d29297a3673d0461615b828a5b3baac625a3ebe0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "088762d6_6c0f8e38",
        "filename": "src/chromiumos/tast/remote/wificell/security/tunneled1x/config.go",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-03-27T04:31:59Z",
      "side": 1,
      "message": "Do you mean defining a new type ParentOption? Could you provide some more information on that? I\u0027m not yet sure how it might work.\n\nAnd if ParentOption is not Option, the interface might become NewFactory(requiredArg, []ParentOption, []Option) which is kind of hard to use.",
      "parentUuid": "5149b412_0c0c0edb",
      "revId": "d29297a3673d0461615b828a5b3baac625a3ebe0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42ff80fe_8dca9b94",
        "filename": "src/chromiumos/tast/remote/wificell/security/tunneled1x/config.go",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1387481
      },
      "writtenOn": "2020-03-27T08:26:08Z",
      "side": 1,
      "message": "After some discuss with Yen-lin, here is a PoC that include the ideas below:\n* Option applies values to Factory struct in NewFactory.\n* We can store some temporary stuff in Factory struct(such as options of parent).\n* Embed Config into Factory so Option is able to assign field of Config directly.\n\nhttps://paste.googleplex.com/4730173964419072",
      "parentUuid": "088762d6_6c0f8e38",
      "revId": "d29297a3673d0461615b828a5b3baac625a3ebe0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8227e0d_19ee6661",
        "filename": "src/chromiumos/tast/remote/wificell/security/tunneled1x/config.go",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-03-27T09:18:53Z",
      "side": 1,
      "message": "Hmm..., I\u0027m not sure if the Config embedded in Factory here is good. Two concerns:\n1. it\u0027s weird that someone outside the package can see factory.GetShillServiceProperties. (i.e. it\u0027s not a private intermediate structure)\n2. With current code, all generated *Config, i.e. the pointer, is the same. However, if one want to build the second Config for some unknown reason. Then the parent Config is created again which also means the first *Config is changed. So I think either we always return the same pointer to an immutable object or we allocate a new Config in every time.\n\nI personally will prefer just keeping a copy of (Password, Inner, Outer) in Factory and assigning them in \u0026Config{} allocation in New (Gen). Or keep a \"conf Config\", i.e. not embedded, in Factory and have Password Option to do `f.conf.Password \u003d p` instead in order to reduce some code in New. (e.g. do the assign with a single *newConf \u003d f.conf)\n\nThe fields are necessary ingredients for the Factory to generate Config, so I guess it\u0027s fine to keep one more copy of those.\n\n(btw as for var/type/package naming, I\u0027m really bad at that, so you might rename them to anything you think it\u0027s better in real cl. My PoC is only for demonstrating the concept.)",
      "parentUuid": "42ff80fe_8dca9b94",
      "revId": "d29297a3673d0461615b828a5b3baac625a3ebe0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}