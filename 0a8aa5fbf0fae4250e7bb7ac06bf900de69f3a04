{
  "comments": [
    {
      "key": {
        "uuid": "3548bac8_fe8d4397",
        "filename": "src/chromiumos/tast/local/bundles/cros/platform/memory_pressure_recorder.go",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2019-03-19T20:19:20Z",
      "side": 1,
      "message": "nit: just inline this on L38? it doesn\u0027t look like it\u0027s used anywhere outside of there, so i at least don\u0027t see any reason to declare it as a const outside of the test function",
      "revId": "0a8aa5fbf0fae4250e7bb7ac06bf900de69f3a04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c9ebc5a_084afda0",
        "filename": "src/chromiumos/tast/local/bundles/cros/platform/memory_pressure_recorder.go",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2019-03-19T21:05:22Z",
      "side": 1,
      "message": "I was \"taught\" in earlier C++ reviews that all string literals need to be named.  I suppose \"just in case\" they are reused.  :P",
      "parentUuid": "3548bac8_fe8d4397",
      "revId": "0a8aa5fbf0fae4250e7bb7ac06bf900de69f3a04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3db16f94_32d30b60",
        "filename": "src/chromiumos/tast/local/bundles/cros/platform/pressurizer/pressurizer.go",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2019-03-19T20:19:20Z",
      "side": 1,
      "message": "blegh, gerrit is showing all of this as a new file. if there\u0027s no way to convince it to show a diff, can you upload a unified diff between the old and new file via gpaste?",
      "revId": "0a8aa5fbf0fae4250e7bb7ac06bf900de69f3a04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3918740a_c1418679",
        "filename": "src/chromiumos/tast/local/bundles/cros/platform/pressurizer/pressurizer.go",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2019-03-19T21:05:22Z",
      "side": 1,
      "message": "See https://chromium-review.googlesource.com/c/chromiumos/platform/tast-tests/+/1531125",
      "parentUuid": "3db16f94_32d30b60",
      "revId": "0a8aa5fbf0fae4250e7bb7ac06bf900de69f3a04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96ad2216_efda1af7",
        "filename": "src/chromiumos/tast/local/bundles/cros/platform/pressurizer/pressurizer.go",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2019-03-19T20:19:20Z",
      "side": 1,
      "message": "nit: how about \"mempressure\"? that seems clearer and is the same number of characters :-P",
      "range": {
        "startLine": 7,
        "startChar": 8,
        "endLine": 7,
        "endChar": 19
      },
      "revId": "0a8aa5fbf0fae4250e7bb7ac06bf900de69f3a04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b88d403_fb53f76f",
        "filename": "src/chromiumos/tast/local/bundles/cros/platform/pressurizer/pressurizer.go",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2019-03-19T21:05:22Z",
      "side": 1,
      "message": "Oh man but \"pressurizer\" sounds so much better!",
      "parentUuid": "96ad2216_efda1af7",
      "range": {
        "startLine": 7,
        "startChar": 8,
        "endLine": 7,
        "endChar": 19
      },
      "revId": "0a8aa5fbf0fae4250e7bb7ac06bf900de69f3a04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "13b3e01a_259c4666",
        "filename": "src/chromiumos/tast/local/bundles/cros/platform/pressurizer/pressurizer.go",
        "patchSetId": 4
      },
      "lineNbr": 731,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2019-03-19T20:19:20Z",
      "side": 1,
      "message": "nit: mind just calling this Run or RunTest? see \"avoid stutter\" at https://blog.golang.org/package-names",
      "range": {
        "startLine": 731,
        "startChar": 5,
        "endLine": 731,
        "endChar": 19
      },
      "revId": "0a8aa5fbf0fae4250e7bb7ac06bf900de69f3a04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75d04eff_68fee84c",
        "filename": "src/chromiumos/tast/local/bundles/cros/platform/pressurizer/pressurizer.go",
        "patchSetId": 4
      },
      "lineNbr": 731,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2019-03-19T21:05:22Z",
      "side": 1,
      "message": "1. This doesn\u0027t stutter, because there\u0027s \"Run\" in between.  It only repeats.\n\n2. I worked on some infrastructure python code in the past where it was absurdly difficult to follow the code logic because every single method was called Run, and the types of the objects were not obvious.  I realize this one is a static method so I am OK with Run, exceptionally, but I have to at least point out that this rule can be disastrous.",
      "parentUuid": "13b3e01a_259c4666",
      "range": {
        "startLine": 731,
        "startChar": 5,
        "endLine": 731,
        "endChar": 19
      },
      "revId": "0a8aa5fbf0fae4250e7bb7ac06bf900de69f3a04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4aab9f55_cfc3b77b",
        "filename": "src/chromiumos/tast/local/bundles/cros/platform/pressurizer/pressurizer.go",
        "patchSetId": 4
      },
      "lineNbr": 731,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2019-03-19T22:34:29Z",
      "side": 1,
      "message": "that page says that the package name shouldn\u0027t be repeated in its contents, which is what\u0027s happening here.\n\ni agree that short or ambiguous names in python modules make code difficult to understand. that\u0027s one of the reasons that tast doesn\u0027t use python. it\u0027s straightforward to find the receiver\u0027s type in go.",
      "parentUuid": "75d04eff_68fee84c",
      "range": {
        "startLine": 731,
        "startChar": 5,
        "endLine": 731,
        "endChar": 19
      },
      "revId": "0a8aa5fbf0fae4250e7bb7ac06bf900de69f3a04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a9eb8a0_6d2477a4",
        "filename": "src/chromiumos/tast/local/bundles/cros/platform/pressurizer/pressurizer.go",
        "patchSetId": 4
      },
      "lineNbr": 731,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2019-03-19T23:42:17Z",
      "side": 1,
      "message": "I understand and it\u0027s OK, but I am ambivalent.  It\u0027s still easy to hide the type accidentally.\n\nx :\u003d someFunction(...)\nx.Run()\n\nsomeFunction() could even be in a different module, but not the module that defines the methods for x.\n\nThen again, I also appreciate Go\u0027s efforts at keeping names short.",
      "parentUuid": "4aab9f55_cfc3b77b",
      "range": {
        "startLine": 731,
        "startChar": 5,
        "endLine": 731,
        "endChar": 19
      },
      "revId": "0a8aa5fbf0fae4250e7bb7ac06bf900de69f3a04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}