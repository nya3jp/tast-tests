{
  "comments": [
    {
      "key": {
        "uuid": "d63a9da9_4581ea51",
        "filename": "src/chromiumos/tast/local/bundles/cros/security/selinux/files_test_internal_home.go",
        "patchSetId": 2
      },
      "lineNbr": 15,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2019-01-24T09:48:34Z",
      "side": 1,
      "message": "nit: please add a trailing period (godoc expects comments to start with a sentence).\n\nalso, please mention how this is used, e.g.\n\n  // This contains functionality shared between the security.SELinuxFilesARC\n  // and security.SELinuxFilesNonARC tests.",
      "revId": "088f61bb9c2d0a7f30bafb25e622131b63c7b816",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f7d63e6_f9efcb00",
        "filename": "src/chromiumos/tast/local/bundles/cros/security/selinux/files_test_internal_home.go",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2019-01-24T09:48:34Z",
      "side": 1,
      "message": "nit: please delete \u0027in string\u0027 from this and the next line. go is a statically-typed language, so this isn\u0027t necessary. :-)\n\nit would be useful to mention that ^ and $ are added later, though:\n\n  // path regexp; encapsulated in \u0027^\u0027 and \u0027$\u0027 later",
      "range": {
        "startLine": 18,
        "startChar": 32,
        "endLine": 18,
        "endChar": 41
      },
      "revId": "088f61bb9c2d0a7f30bafb25e622131b63c7b816",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d75f44a_a7ae4851",
        "filename": "src/chromiumos/tast/local/bundles/cros/security/selinux/files_test_internal_home.go",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2019-01-24T09:48:34Z",
      "side": 1,
      "message": "nit: context\n\nalso, does this actually need to be a regexp? it looks like all of the values are just fixed strings (or maybe substrings), except for \"^.*\" in some cases. assuming that that\u0027s because you don\u0027t actually want to test those contexts, why not just use an empty string to indicate that they should be stripped?\n\nalso, i find it a bit surprising that \u0027^\u0027 can be included here but not in path earlier. if this needs to be a regexp, please make sure that that\u0027s documented here so that one doesn\u0027t need to read through all of the code below to understand the expected format.",
      "range": {
        "startLine": 19,
        "startChar": 42,
        "endLine": 19,
        "endChar": 49
      },
      "revId": "088f61bb9c2d0a7f30bafb25e622131b63c7b816",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46260b64_199f5ab4",
        "filename": "src/chromiumos/tast/local/bundles/cros/security/selinux/files_test_internal_home.go",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2019-01-24T09:48:34Z",
      "side": 1,
      "message": "nit: i\u0027d recommend just using regexp.MustCompile here. an uncompilable regexp indicates a bug in this test.",
      "revId": "088f61bb9c2d0a7f30bafb25e622131b63c7b816",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dbc6049d_dd4b938b",
        "filename": "src/chromiumos/tast/local/bundles/cros/security/selinux/files_test_internal_home.go",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2019-01-24T09:48:34Z",
      "side": 1,
      "message": "nit: to reduce indenting, please do:\n\n  if !pathRegexp.MatchString(path) {\n      continue\n  }",
      "revId": "088f61bb9c2d0a7f30bafb25e622131b63c7b816",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6da17bbe_50325d15",
        "filename": "src/chromiumos/tast/local/bundles/cros/security/selinux/files_test_internal_home.go",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2019-01-24T09:48:34Z",
      "side": 1,
      "message": "please see earlier question about whether this actually needs to be a regular expression. if not, this can probably be something like:\n\n  if testCase.context \u003d\u003d \"\" {\n      break\n  }\n  re :\u003d FileContextRegexp(testCase.context)\n\notherwise, please avoid the FileContextRegexp call when you\u0027re going to replace the regexp later:\n\n  var re *regexp.Regexp\n  if testCase.context[0] \u003d\u003d \u0027^\u0027 {\n      re \u003d regexp.MustCompile(testCase.context)\n  } else {\n      if re, err \u003d FileContextRegexp(testCase.context); err !\u003d nil {\n          // handle error\n      }\n  }",
      "revId": "088f61bb9c2d0a7f30bafb25e622131b63c7b816",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4e9886e_8663e91d",
        "filename": "src/chromiumos/tast/local/bundles/cros/security/selinux/files_test_internal_home.go",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2019-01-24T09:48:34Z",
      "side": 1,
      "message": "nit: %v since you also log paths without quoting earlier, or just do s.Error(\"Unhandled file \", path)",
      "range": {
        "startLine": 70,
        "startChar": 26,
        "endLine": 70,
        "endChar": 28
      },
      "revId": "088f61bb9c2d0a7f30bafb25e622131b63c7b816",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}