{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7d784934_06d0a491",
        "filename": "src/chromiumos/tast/local/audio/cards.go",
        "patchSetId": 5
      },
      "lineNbr": 51,
      "author": {
        "id": 1319142
      },
      "writtenOn": "2022-04-22T17:01:45Z",
      "side": 1,
      "message": "[1] says \"Note that the order here is actual !\u003d expected, and the message uses that order too.\" You could write `\"got %d lines, expected even number\"`\n\n[1] https://github.com/golang/go/wiki/CodeReviewComments#useful-test-failures",
      "range": {
        "startLine": 51,
        "startChar": 28,
        "endLine": 51,
        "endChar": 67
      },
      "revId": "ee4ee216c49e3c3e79110e81ab61cbdecd625428",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8e066a1_7a91e31d",
        "filename": "src/chromiumos/tast/local/audio/cards.go",
        "patchSetId": 5
      },
      "lineNbr": 57,
      "author": {
        "id": 1319142
      },
      "writtenOn": "2022-04-22T17:01:45Z",
      "side": 1,
      "message": "You can simply write\n\tfor _, m :\u003d range cardRegexp.FindAllStringSubmatch(s, -1) {\n\nThen I would use no blank line between `var cards []Card` and the `for` loop. The absence of such a blank line will convey the close relationship where the `for` loop populates `cards`.",
      "range": {
        "startLine": 54,
        "startChar": 17,
        "endLine": 57,
        "endChar": 28
      },
      "revId": "ee4ee216c49e3c3e79110e81ab61cbdecd625428",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fefee72f_9598ad71",
        "filename": "src/chromiumos/tast/local/audio/cards.go",
        "patchSetId": 5
      },
      "lineNbr": 70,
      "author": {
        "id": 1319142
      },
      "writtenOn": "2022-04-22T17:01:45Z",
      "side": 1,
      "message": "Again, [1] asks for the order actual !\u003d expected, both in the `if` condition and in the error message. That means something like this:\n\tif expectedCards :\u003d lines/2; len(cards) !\u003d expectedCards {\n\t\treturn nil, errors.Errorf(\n\t\t\t\"unexpected number of cards parsed from %d lines: got %d; expected %d\",\n\t\t\tlines, len(cards), expectedCards)\n\t}\n\n[1] https://github.com/golang/go/wiki/CodeReviewComments#useful-test-failures",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 70,
        "endChar": 2
      },
      "revId": "ee4ee216c49e3c3e79110e81ab61cbdecd625428",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}