{
  "comments": [
    {
      "key": {
        "uuid": "cb05b318_587cfda5",
        "filename": "src/chromiumos/tast/local/bundles/cros/platform/memory_pressure.go",
        "patchSetId": 50
      },
      "lineNbr": 93,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-01-29T03:56:07Z",
      "side": 1,
      "message": "Let us make this function return time.Duration, and call .Seconds() in the caller. Then callers don\u0027t need to wonder about units. Same for stdDev.",
      "range": {
        "startLine": 93,
        "startChar": 34,
        "endLine": 93,
        "endChar": 41
      },
      "revId": "f5f024d679d154e341653a4012dc5b7d796b6515",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b06e69ac_41a68ff3",
        "filename": "src/chromiumos/tast/local/bundles/cros/platform/memory_pressure.go",
        "patchSetId": 50
      },
      "lineNbr": 93,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2019-01-30T01:39:32Z",
      "side": 1,
      "message": "Done, but I don\u0027t think this is right.  It may be convenient for the units---even though seconds as a float64 is pretty convenient.  I think that the time type is meant for time stamps and durations, but not really for more complex operations such as mean/stddev.",
      "parentUuid": "cb05b318_587cfda5",
      "range": {
        "startLine": 93,
        "startChar": 34,
        "endLine": 93,
        "endChar": 41
      },
      "revId": "f5f024d679d154e341653a4012dc5b7d796b6515",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fd63c701_11e291ef",
        "filename": "src/chromiumos/tast/local/bundles/cros/platform/memory_pressure.go",
        "patchSetId": 50
      },
      "lineNbr": 93,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-01-30T02:48:58Z",
      "side": 1,
      "message": "Generally, computation of mean and standard deviation are functions from dimension T to dimension T (for example, if the input is a list of mass weights, the output is also mass weights). So it sounds odd to define a function from []time.Duration (dimension \u003d time) to float64 (dimension \u003d none).\n\nOf course it\u0027s difficult to compute the value without casting to floating point values (especially standard deviation), so it\u0027s fine to do casting within the function.",
      "parentUuid": "b06e69ac_41a68ff3",
      "range": {
        "startLine": 93,
        "startChar": 34,
        "endLine": 93,
        "endChar": 41
      },
      "revId": "f5f024d679d154e341653a4012dc5b7d796b6515",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b85d59e_c4b1ca7d",
        "filename": "src/chromiumos/tast/local/bundles/cros/platform/memory_pressure.go",
        "patchSetId": 50
      },
      "lineNbr": 232,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-01-29T03:56:07Z",
      "side": 1,
      "message": "Seconds() returns float64, so cast is not necessary.",
      "revId": "f5f024d679d154e341653a4012dc5b7d796b6515",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aabcd9c3_8442bbca",
        "filename": "src/chromiumos/tast/local/bundles/cros/platform/memory_pressure.go",
        "patchSetId": 50
      },
      "lineNbr": 232,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2019-01-30T01:39:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5b85d59e_c4b1ca7d",
      "revId": "f5f024d679d154e341653a4012dc5b7d796b6515",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}