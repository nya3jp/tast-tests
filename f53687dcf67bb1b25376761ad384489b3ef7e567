{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "52b2d7cf_34997b52",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1549107
      },
      "writtenOn": "2022-10-19T08:06:07Z",
      "side": 1,
      "message": "Hi, could you ptal at the test logic? ðŸ˜Š",
      "revId": "f53687dcf67bb1b25376761ad384489b3ef7e567",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49d86c3c_6130e63e",
        "filename": "src/chromiumos/tast/local/chrome/option.go",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1349779
      },
      "writtenOn": "2022-10-19T08:59:08Z",
      "side": 1,
      "message": "@alexanderhartl@google.com WDYT if we extend this method to allow passing the SAML login implementation, and then move `handleMicrosoftLogin()` from chrome_saml.go to this file?\n\nThen we could do something like\n```\ncr, err :\u003d chrome.New(\n\t\tctx,\n\t\tchrome.SAMLLogin(chrome.Creds{...}, chrome.HandleMicrosoftLogin(...)))\n```\n\n(the method would be called [here](https://chromium-review.googlesource.com/c/chromiumos/platform/tast-tests/+/3871029/6/src/chromiumos/tast/local/chrome/internal/login/gaia.go#196) instead of early return)\n\nand then we would not need to call `WaitForCryptohome`, `WaitForOOBEConnectionToBeDismissed`, `RemoveNotifications` directly in the test - it will be easier to write new tests that depend on SAML.\n\nWould something like this work / make sense?\nAlternatively, we could just move the shared login code into a fixture when we will have more SAML tests.",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 109,
        "endChar": 1
      },
      "revId": "f53687dcf67bb1b25376761ad384489b3ef7e567",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "603ee2c5_5ac30fa0",
        "filename": "src/chromiumos/tast/local/chrome/option.go",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1411065
      },
      "writtenOn": "2022-10-19T11:03:28Z",
      "side": 1,
      "message": "Moving that logic out of the test would be good.\nI like the solution of adding it directly to the chrome package more than putting it into a fixture.\nIdeally the fixture and test should only contain code that is related to the test flow itself and everything else is placed in some libraries.",
      "parentUuid": "49d86c3c_6130e63e",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 109,
        "endChar": 1
      },
      "revId": "f53687dcf67bb1b25376761ad384489b3ef7e567",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d8fdeef_90b6a8fe",
        "filename": "src/chromiumos/tast/local/chrome/option.go",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1549107
      },
      "writtenOn": "2022-10-20T08:41:04Z",
      "side": 1,
      "message": "I am not sure, if I understand this correctly. Are you proposing to add a callback parameter to the SAMLLogin function and thus to the `MutableConfig`? Then, I am not sure if this can be easily implemented without a bigger refactoring, since the callback (rather the required parameters of the callback) will lead to dependency circles in `config.go`.\nOr would the idea be, to only add an enum to the config, which will then decide, which SAML login function will be called [here](https://chromium-review.googlesource.com/c/chromiumos/platform/tast-tests/+/3871029/6/src/chromiumos/tast/local/chrome/internal/login/gaia.go#196).",
      "parentUuid": "603ee2c5_5ac30fa0",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 109,
        "endChar": 1
      },
      "revId": "f53687dcf67bb1b25376761ad384489b3ef7e567",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82d75cea_11bd72d8",
        "filename": "src/chromiumos/tast/local/chrome/option.go",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1349779
      },
      "writtenOn": "2022-10-20T15:10:57Z",
      "side": 1,
      "message": "\u003e Then, I am not sure if this can be easily implemented without a bigger refactoring, since the callback (rather the required parameters of the callback) will lead to dependency circles in config.go.\n\nAh I see! In this case, I think we could add an enum and move the actual `handleMicrosoftLogin` function to some shared place. I think it would be great if we could run SAML login test with only a `chrome.New` call (similar to login.ChromeGAIA), if possible.",
      "parentUuid": "8d8fdeef_90b6a8fe",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 109,
        "endChar": 1
      },
      "revId": "f53687dcf67bb1b25376761ad384489b3ef7e567",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}