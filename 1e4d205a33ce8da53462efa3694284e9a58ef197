{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "20bdd5a2_3da82978",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/media_scan_time.go",
        "patchSetId": 7
      },
      "lineNbr": 31,
      "author": {
        "id": 1221932
      },
      "writtenOn": "2021-09-10T06:56:33Z",
      "side": 1,
      "message": "I think numberOfCopies can be put here. It will make it easier for us to spot that const if we want to quickly test this test with more or less number of files in the future.",
      "revId": "1e4d205a33ce8da53462efa3694284e9a58ef197",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b087faa5_6214dc23",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/media_scan_time.go",
        "patchSetId": 7
      },
      "lineNbr": 31,
      "author": {
        "id": 1519657
      },
      "writtenOn": "2021-09-10T07:52:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "20bdd5a2_3da82978",
      "revId": "1e4d205a33ce8da53462efa3694284e9a58ef197",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0be03ae8_c541d3d6",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/media_scan_time.go",
        "patchSetId": 7
      },
      "lineNbr": 149,
      "author": {
        "id": 1221932
      },
      "writtenOn": "2021-09-10T06:56:33Z",
      "side": 1,
      "message": "Can we use io.Copy? That will be more idiomatic and the code will be cleaner.",
      "range": {
        "startLine": 134,
        "startChar": 1,
        "endLine": 149,
        "endChar": 2
      },
      "revId": "1e4d205a33ce8da53462efa3694284e9a58ef197",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fbdc6a42_93639252",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/media_scan_time.go",
        "patchSetId": 7
      },
      "lineNbr": 149,
      "author": {
        "id": 1519657
      },
      "writtenOn": "2021-09-10T07:52:11Z",
      "side": 1,
      "message": "Is io.Copy used like the code in this link (https://qiita.com/cotrpepe/items/93e4a072c249a933e795#%E3%82%B3%E3%83%BC%E3%83%89)?\nUsing it, it looks that the code will be longer than now for me.",
      "parentUuid": "0be03ae8_c541d3d6",
      "range": {
        "startLine": 134,
        "startChar": 1,
        "endLine": 149,
        "endChar": 2
      },
      "revId": "1e4d205a33ce8da53462efa3694284e9a58ef197",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6aa76bd7_65d82e46",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/media_scan_time.go",
        "patchSetId": 7
      },
      "lineNbr": 149,
      "author": {
        "id": 1221932
      },
      "writtenOn": "2021-09-10T08:27:11Z",
      "side": 1,
      "message": "It\u0027s true that the downside is the code will be longer. But the meaning will be clearer. For example someone who knows go might be able to understand this: https://source.chromium.org/chromium/chromiumos/platform/tast-tests/+/HEAD:src/chromiumos/tast/common/cros/nearbyshare/nearbysetup/nearbysetup.go;l\u003d156;drc\u003dec19d5c2366dd3773e2c9a9512c9460a2fd58c44 as copying two files faster than if it is implemented as read -\u003e write just because go provides the io.Copy as part of its standard (widely known) library. This is what people call \"idiomatic\" (you can search \"idiomatic programming\").\n\nThe other benefit is, usually standard libraries are implemented as efficient as it makes sense so we automatically will get benefits from that. This point might be unclear in your case here since your implementation performs only 1 read while the golang\u0027s implementation will do read\u0026write for every iteration (https://cs.opensource.google/go/go/+/go1.17:src/io/io.go;l\u003d381) - but on the other hand, the golang implementation does not read all the file content in the memory but read and write one chunk at a time - which might save some memory. But I don\u0027t think this matters in this test.\n\nHowever, from the readability standpoint of view, adding a bit more code to write an idiomatic code should be preferred. Of course there are exceptions: if the cost of writing the idiomatic version is way too much if it is compared to the alternative - but in this case, the cost is just adding 3-4 lines which is quite small (you can check https://source.chromium.org/chromium/chromiumos/platform/tast-tests/+/HEAD:src/chromiumos/tast/common/cros/nearbyshare/nearbysetup/nearbysetup.go;l\u003d156;drc\u003dec19d5c2366dd3773e2c9a9512c9460a2fd58c44 as an example).",
      "parentUuid": "fbdc6a42_93639252",
      "range": {
        "startLine": 134,
        "startChar": 1,
        "endLine": 149,
        "endChar": 2
      },
      "revId": "1e4d205a33ce8da53462efa3694284e9a58ef197",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}