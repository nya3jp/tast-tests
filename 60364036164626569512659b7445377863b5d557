{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "076886e0_3f705911",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1398801
      },
      "writtenOn": "2021-05-24T00:10:10Z",
      "side": 1,
      "message": "I\u0027ll defer Matt to review.",
      "revId": "60364036164626569512659b7445377863b5d557",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b80a706_5df8d28d",
        "filename": "src/chromiumos/tast/local/chrome/uiauto/nodewith/nodewith.go",
        "patchSetId": 2
      },
      "lineNbr": 525,
      "author": {
        "id": 1450817
      },
      "writtenOn": "2021-05-24T01:33:41Z",
      "side": 1,
      "message": "Related to our discussion offline, I think we should do the following:\n* Add a HasClass method, and mark the ClassName method as deprecated\n* Create a CL that converts all ClassName uses to HasClass method. Since we\u0027re changing the code in the test cases, instead of in the nodewith package, that should make it far easier for the devs to blame this CL if their tests start breaking",
      "revId": "60364036164626569512659b7445377863b5d557",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd978e92_d65d71e4",
        "filename": "src/chromiumos/tast/local/chrome/uiauto/nodewith/nodewith.go",
        "patchSetId": 2
      },
      "lineNbr": 525,
      "author": {
        "id": 1508900
      },
      "writtenOn": "2021-05-24T02:52:13Z",
      "side": 1,
      "message": "It is nice to have a HasClass method, but what is  the reason to convert all ClassName uses to HasClass, since they are not really equivalent? IIUC, they are for different purposes. ClassName(x) is looking for an exact match of x (equivalent to \\^x$\\), while HasClass(x) is just a partial match (equivalent to \\.* x .*\\). It might cause problems after the migration, i.e., within a ui tree node A has class \"a b\", node B has class \"b\", ClassName(\"b\") works fine to find node B, but HasClass(\"b\") may return an error due to dual matches for both A and B. I think sometimes the exact match can be required.",
      "parentUuid": "9b80a706_5df8d28d",
      "revId": "60364036164626569512659b7445377863b5d557",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e803f26_e6e4b80c",
        "filename": "src/chromiumos/tast/local/chrome/uiauto/nodewith/nodewith.go",
        "patchSetId": 2
      },
      "lineNbr": 525,
      "author": {
        "id": 1450817
      },
      "writtenOn": "2021-05-24T03:57:36Z",
      "side": 1,
      "message": "TLDR: It is possible that we will break existing tast tests, but at least if we break them, it will be done so with a change to the test code, not the app code, which is much easier to debug, and will prevent future changes to the app code breaking the test (also, we can just run the tests locally after changing them, and it should pick up any issues before submit).\n\nSemantically, classes are the same as in HTML - a class is, semantically, a set of strings. There\u0027s a good reason that no-one ever writes HTML that says \"an element that matches this class, and has no other classes\".\n\nYou should never assert that the set of classes is *precisely* this, and *in this specific order*. The latter is unlikely to cause flakiness, but is stylistically bad. The former, on the other hand, is a significant concern.\n\nConsider a very plausible made-up example case here based on a real-world use case:\n* In the files app, when opening a directory, each file/subdirectory has the class table-row\n* When you open the app, there is just a single entry, the \"Downloads\" directory, so you create a selector Name(\"Downloads\").ClassName(\"table-row\")\n* UX decides that they want directories to look different to files, so each entry is given either the class \"directory\" or \"file\" to style it differently.\n* Your test breaks because someone added some styling to the element you were looking for.\n\nThis is a list of all the entries that currently search for multiple classes (there are only 4).\nhttps://source.chromium.org/search?q\u003dClassName%5C(%5C%22%5B%5E%22%5D%2B%5C%20\u0026ss\u003dchromiumos%2Fchromiumos%2Fcodesearch:src%2Fplatform%2Ftast-tests%2Fsrc%2Fchromiumos%2Ftast%2Flocal%2F",
      "parentUuid": "fd978e92_d65d71e4",
      "revId": "60364036164626569512659b7445377863b5d557",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5add1a0_09a71d3c",
        "filename": "src/chromiumos/tast/local/chrome/uiauto/nodewith/nodewith.go",
        "patchSetId": 2
      },
      "lineNbr": 535,
      "author": {
        "id": 1450817
      },
      "writtenOn": "2021-05-24T01:33:41Z",
      "side": 1,
      "message": "After talking offline, I think that we should expose a HasClass(x) method that just calls Attribute(\"className\", regexp.MustCompile(\"\\\\b\" + quotemeta(x) + \"\\\\b\") or similar.\n\nThe only potential issue I can see with that solution is if you have multiple HasClass(), then it won\u0027t work (since it will overwrite). If that\u0027s the case, we could have a list stored directly in the finder instead of in attributes like we have for Name()",
      "revId": "60364036164626569512659b7445377863b5d557",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83356f6e_67ffcab9",
        "filename": "src/chromiumos/tast/local/chrome/uiauto/nodewith/nodewith.go",
        "patchSetId": 2
      },
      "lineNbr": 535,
      "author": {
        "id": 1508900
      },
      "writtenOn": "2021-05-24T02:52:13Z",
      "side": 1,
      "message": "Just to be clear, are you suggesting to use only HasClass(x) and remove ClassNameRegex(r)?",
      "parentUuid": "d5add1a0_09a71d3c",
      "revId": "60364036164626569512659b7445377863b5d557",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e6c4bb2_07690671",
        "filename": "src/chromiumos/tast/local/chrome/uiauto/nodewith/nodewith.go",
        "patchSetId": 2
      },
      "lineNbr": 535,
      "author": {
        "id": 1450817
      },
      "writtenOn": "2021-05-24T03:57:36Z",
      "side": 1,
      "message": "I am - sorry, when I commented on this CL, I was under the impression that it was Jun\u0027s CL, so you may be missing some context.",
      "parentUuid": "83356f6e_67ffcab9",
      "revId": "60364036164626569512659b7445377863b5d557",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "399ee7e9_3dd95a60",
        "filename": "src/chromiumos/tast/local/chrome/uiauto/nodewith/nodewith.go",
        "patchSetId": 2
      },
      "lineNbr": 536,
      "author": {
        "id": 1450817
      },
      "writtenOn": "2021-05-24T01:33:41Z",
      "side": 1,
      "message": "We should use newFinder().method(args) when possible, to avoid code duplication",
      "revId": "60364036164626569512659b7445377863b5d557",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18e27a1c_321278fb",
        "filename": "src/chromiumos/tast/local/chrome/uiauto/nodewith/nodewith_test.go",
        "patchSetId": 2
      },
      "lineNbr": 54,
      "author": {
        "id": 1450817
      },
      "writtenOn": "2021-05-24T01:33:41Z",
      "side": 1,
      "message": "Please add a test to the pretty printer as well. I didn\u0027t confirm that it worked with regexes when I wrote it, since you couldn\u0027t add a regex.",
      "revId": "60364036164626569512659b7445377863b5d557",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9376ba50_4516f0f4",
        "filename": "src/chromiumos/tast/local/chrome/uiauto/nodewith/nodewith_test.go",
        "patchSetId": 2
      },
      "lineNbr": 54,
      "author": {
        "id": 1450817
      },
      "writtenOn": "2021-05-24T01:36:13Z",
      "side": 1,
      "message": "Note that you might need to sync to get those changes - I only submitted the pretty printer late last week, IIRC",
      "parentUuid": "18e27a1c_321278fb",
      "revId": "60364036164626569512659b7445377863b5d557",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}