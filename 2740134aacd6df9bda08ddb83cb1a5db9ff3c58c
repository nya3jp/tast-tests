{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "90659fcb_3a3bb5bf",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/wifi_service.go",
        "patchSetId": 5
      },
      "lineNbr": 68,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2021-01-07T02:14:54Z",
      "side": 1,
      "message": "The two vars should stay in WifiService struct. But it is a gRPC service, I doubt it is the right way to make the service stateful. If not, it is also not okay to have vars to keep the state.\n\nI think it is caller\u0027s responsibility to keep the original debug level and tags.",
      "revId": "2740134aacd6df9bda08ddb83cb1a5db9ff3c58c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cadbf7f2_0543ba24",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/wifi_service.go",
        "patchSetId": 5
      },
      "lineNbr": 68,
      "author": {
        "id": 1373754
      },
      "writtenOn": "2021-01-12T09:16:27Z",
      "side": 1,
      "message": "I moved the code to the test_fixture.go and instead of setting the initial values after the test is done, I just set the level\u003d0 and tags\u003d \"\". WDYT?\n\nAutotest sets the following default values:\nlevel\u003d4 and tags\u003d\"connection+dbus+device+link+manager+portal+service\"\nfor all connectivity tests, then depends on the test adds \"wifi\", \"vpn\" to the default tags.",
      "parentUuid": "90659fcb_3a3bb5bf",
      "revId": "2740134aacd6df9bda08ddb83cb1a5db9ff3c58c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8df7c507_8569c63c",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/wifi_service.go",
        "patchSetId": 5
      },
      "lineNbr": 68,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2021-01-12T09:53:04Z",
      "side": 1,
      "message": "Just to propose another possible alternative:\n- make InitDUT respond the initial state instead of empty\n- store the initial state in TestFixture.\n- feed the response of InitDUT to Teardown for restoration\n\nRestore back to the state before tests might be a little more friendly to users, but I don\u0027t have strong preference here.",
      "parentUuid": "cadbf7f2_0543ba24",
      "revId": "2740134aacd6df9bda08ddb83cb1a5db9ff3c58c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3818a17_7b597d39",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/wifi_service.go",
        "patchSetId": 5
      },
      "lineNbr": 68,
      "author": {
        "id": 1373754
      },
      "writtenOn": "2021-01-13T19:06:42Z",
      "side": 1,
      "message": "I did something similar to that, I added the following params to TestFixture:\nsetLogging       bool\nlogLevel         int\nlogTags          []string\noriginalLogLevel int\noriginalLogTags  []string\n\nIn test_fixture.go\nIn func NewTestFixture(): I get the initial/original configs and set the desired configs.\n\nIn func close(): I restored the original configs using the params (originalLogLevel \u0026 originalLogTags)\n\nI can move the setting and restoring to InitDUT/Teardown, I think the only benefit is removing the functions setLoggingConfig/getLoggingConfig from test_fixture if we are not planning to use them (such as: set different logging configs in a test and restore the old configs at the end of the test)",
      "parentUuid": "8df7c507_8569c63c",
      "revId": "2740134aacd6df9bda08ddb83cb1a5db9ff3c58c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd528d32_86445a9c",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/wifi_service.go",
        "patchSetId": 5
      },
      "lineNbr": 68,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2021-01-14T18:59:32Z",
      "side": 1,
      "message": "SGTM. However, why local pre does not store original log level and tags.",
      "parentUuid": "e3818a17_7b597d39",
      "revId": "2740134aacd6df9bda08ddb83cb1a5db9ff3c58c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9d06d39_a3abff32",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/wifi_service.go",
        "patchSetId": 5
      },
      "lineNbr": 68,
      "author": {
        "id": 1373754
      },
      "writtenOn": "2021-01-15T08:32:42Z",
      "side": 1,
      "message": "I just added the originalLogLevel and originalLogTags to preImpl and restored the initial values in Close().",
      "parentUuid": "bd528d32_86445a9c",
      "revId": "2740134aacd6df9bda08ddb83cb1a5db9ff3c58c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64eb6686_2f28a66f",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/wifi_service.go",
        "patchSetId": 5
      },
      "lineNbr": 171,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2021-01-07T02:14:54Z",
      "side": 1,
      "message": "The code block is sort of duplicate of line 90-108. Consider refactoring it. However, if it is caller\u0027s responsibility to keep the state, leave the logic in caller side.",
      "revId": "2740134aacd6df9bda08ddb83cb1a5db9ff3c58c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25038c8f_f33ef9f8",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/wifi_service.go",
        "patchSetId": 5
      },
      "lineNbr": 171,
      "author": {
        "id": 1373754
      },
      "writtenOn": "2021-01-12T09:16:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "64eb6686_2f28a66f",
      "revId": "2740134aacd6df9bda08ddb83cb1a5db9ff3c58c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}