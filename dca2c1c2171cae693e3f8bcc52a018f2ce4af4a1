{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d0578661_d986403a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1459973
      },
      "writtenOn": "2022-07-22T12:13:53Z",
      "side": 1,
      "message": "@Lance please set to verified that way indicating that tests were run.\n\nAdding Gabor to the review.",
      "revId": "dca2c1c2171cae693e3f8bcc52a018f2ce4af4a1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ea26d73_d14b82d7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1401350
      },
      "writtenOn": "2022-07-22T13:27:56Z",
      "side": 1,
      "message": "LGTM % nit\nCan you check if you make one subtest fail, the others will run?\nAt first I thought about wrapping the `RunTestCases()` calls in the tests into `s.Run()`, but I think this approach works as well. But it is better to try it out.",
      "revId": "dca2c1c2171cae693e3f8bcc52a018f2ce4af4a1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2d827c82_1f5dd86e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1525163
      },
      "writtenOn": "2022-07-22T13:57:45Z",
      "side": 1,
      "message": "LGTM, thanks!",
      "revId": "dca2c1c2171cae693e3f8bcc52a018f2ce4af4a1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e77d2b61_60efeffd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1477974
      },
      "writtenOn": "2022-07-25T02:56:14Z",
      "side": 1,
      "message": "`s.Fatal` will only fails the current subtest, verified by\n\ntest code:\n```\ns.Run(ctx, param.Name, func(ctx context.Context, s *testing.State) {\n\ts.Fatal(\"Failed, proceed next\")\n\t...\n```\nresult:\n```\n--------------------------------------------------------------------------------\npolicy.FileSystemWriteAskForUrls [ FAIL ] ask: Failed, proceed next\n                                          matching_defaultBlocked: Failed, proceed next\n                                          matching_defaultAsk: Failed, proceed next\n                                          matching_defaultUnset: Failed, proceed next\n                                          non_matching_defaultBlocked: Failed, proceed next\n                                          non_matching_defaultAsk: Failed, proceed next\n                                          non_matching_defaultUnset: Failed, proceed next\n                                          unset: Failed, proceed next\n--------------------------------------------------------------------------------\n```",
      "parentUuid": "3ea26d73_d14b82d7",
      "revId": "dca2c1c2171cae693e3f8bcc52a018f2ce4af4a1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8de47012_2a2ef213",
        "filename": "src/chromiumos/tast/local/bundles/cros/policy/file_system_read_write/file_system_read_write.go",
        "patchSetId": 1
      },
      "lineNbr": 143,
      "author": {
        "id": 1401350
      },
      "writtenOn": "2022-07-22T13:27:56Z",
      "side": 1,
      "message": "nit: `param.Name` is enough here.",
      "range": {
        "startLine": 143,
        "startChar": 12,
        "endLine": 143,
        "endChar": 46
      },
      "revId": "dca2c1c2171cae693e3f8bcc52a018f2ce4af4a1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f23c814d_9a1c4b5e",
        "filename": "src/chromiumos/tast/local/bundles/cros/policy/file_system_read_write/file_system_read_write.go",
        "patchSetId": 1
      },
      "lineNbr": 143,
      "author": {
        "id": 1477974
      },
      "writtenOn": "2022-07-25T02:56:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8de47012_2a2ef213",
      "range": {
        "startLine": 143,
        "startChar": 12,
        "endLine": 143,
        "endChar": 46
      },
      "revId": "dca2c1c2171cae693e3f8bcc52a018f2ce4af4a1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}