{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c355d9fd_d00798bc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1238096
      },
      "writtenOn": "2022-06-29T14:15:33Z",
      "side": 1,
      "message": "LGTM, but I just want to make sure we don\u0027t have an endianess issue.\n\nIn C the expecation is that we can jsut slam the int32 read from the proto into a struct in_addr s_addr field and be done: https://source.chromium.org/chromium/chromium/src/+/main:ash/components/arc/net/arc_net_host_impl.cc;l\u003d397?q\u003darc_net_host_impl\u0026ss\u003dchromium. This works regardless of the CPU endianess as long as the int32 bytes are never interpreted.",
      "revId": "4a78ef9da072f600c6111c8a4563595caebbd90e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4923e358_e3369368",
        "filename": "src/chromiumos/tast/local/bundles/cros/crostini/network_perf.go",
        "patchSetId": 5
      },
      "lineNbr": 71,
      "author": {
        "id": 1238096
      },
      "writtenOn": "2022-06-29T14:15:33Z",
      "side": 1,
      "message": "There maybe a problem here. Normally the IP address in binary should always be moved around in network order aka big endian, which allows to assign address literal in the \"natural reading order\" like:\n ipv4 :\u003d net.IP{192, 168, 0, 1}\n \nSo I am a little confused to see we have to use LittleEndian.PutUint32(). Does that mean that the code needs to be aware at runtime of the endianess of the CPU running the code ?",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 71,
        "endChar": 42
      },
      "revId": "4a78ef9da072f600c6111c8a4563595caebbd90e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55be0e6a_9e5cb713",
        "filename": "src/chromiumos/tast/local/bundles/cros/crostini/network_perf.go",
        "patchSetId": 5
      },
      "lineNbr": 71,
      "author": {
        "id": 1210615
      },
      "writtenOn": "2022-06-30T00:08:03Z",
      "side": 1,
      "message": "The field has already been unmarshalled into a platform specific uint32 by this point. At least on my hatch, I had to use binary.LittleEndian to get this to work. However, if the original field had been bytes instead of uint32, we could have gone directly to net.IP without worrying",
      "parentUuid": "4923e358_e3369368",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 71,
        "endChar": 42
      },
      "revId": "4a78ef9da072f600c6111c8a4563595caebbd90e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7836fa81_e2e884a5",
        "filename": "src/chromiumos/tast/local/bundles/cros/crostini/network_perf.go",
        "patchSetId": 5
      },
      "lineNbr": 71,
      "author": {
        "id": 1238096
      },
      "writtenOn": "2022-06-30T04:27:31Z",
      "side": 1,
      "message": "Thanks for raising this point, we ll discuss what it would entail to update the proto field type to byte and see if the migration is not too costly.\n\nCode LGTM with the limitations of the current proto.",
      "parentUuid": "55be0e6a_9e5cb713",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 71,
        "endChar": 42
      },
      "revId": "4a78ef9da072f600c6111c8a4563595caebbd90e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "4a78ef9da072f600c6111c8a4563595caebbd90e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "4a78ef9da072f600c6111c8a4563595caebbd90e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "4a78ef9da072f600c6111c8a4563595caebbd90e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "4a78ef9da072f600c6111c8a4563595caebbd90e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}