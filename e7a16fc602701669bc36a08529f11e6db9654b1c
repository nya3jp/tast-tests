{
  "comments": [
    {
      "key": {
        "uuid": "781bdacd_e641b4ab",
        "filename": "src/chromiumos/tast/local/bundles/cros/hwsec/challenge_response_mount.go",
        "patchSetId": 1
      },
      "lineNbr": 188,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2019-05-20T18:59:44Z",
      "side": 1,
      "message": "huge nit: in cases like this, where you\u0027re checking an error returned by a call and also don\u0027t need to assign any other variables that will be used after the error-handling, i\u0027d recommend this form:\n\n  if _, err :\u003d dbusConn.RequestName(...); err !\u003d nil {\n      ...\n  }\n\nthe main benefit (in addition to it being one line shorter :-P) is that you shadow any existing \u0027err\u0027 variable with one scoped to the inside of the if block, so you don\u0027t need to worry about accidentally using the error that was returned here later.",
      "revId": "e7a16fc602701669bc36a08529f11e6db9654b1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "089e93fa_be607475",
        "filename": "src/chromiumos/tast/local/bundles/cros/hwsec/challenge_response_mount.go",
        "patchSetId": 1
      },
      "lineNbr": 188,
      "author": {
        "id": 1126309
      },
      "writtenOn": "2019-05-20T19:11:43Z",
      "side": 1,
      "message": "Done, thanks for the detailed explanation!",
      "parentUuid": "781bdacd_e641b4ab",
      "revId": "e7a16fc602701669bc36a08529f11e6db9654b1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "88add19c_e7487a9d",
        "filename": "src/chromiumos/tast/local/bundles/cros/hwsec/challenge_response_mount.go",
        "patchSetId": 1
      },
      "lineNbr": 209,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2019-05-20T18:59:44Z",
      "side": 1,
      "message": "i take it that you can\u0027t take the address of the const on L226 later, right?",
      "revId": "e7a16fc602701669bc36a08529f11e6db9654b1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a0bc214_c139a1a0",
        "filename": "src/chromiumos/tast/local/bundles/cros/hwsec/challenge_response_mount.go",
        "patchSetId": 1
      },
      "lineNbr": 209,
      "author": {
        "id": 1126309
      },
      "writtenOn": "2019-05-20T19:11:43Z",
      "side": 1,
      "message": "Ack - yes, that\u0027s the reason.\n\n(To me that\u0027s the most annoying quirk in Go. Or in the Go protobuf library?..)",
      "parentUuid": "88add19c_e7487a9d",
      "revId": "e7a16fc602701669bc36a08529f11e6db9654b1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "015a314c_bc63266a",
        "filename": "src/chromiumos/tast/local/bundles/cros/hwsec/challenge_response_mount.go",
        "patchSetId": 1
      },
      "lineNbr": 209,
      "author": {
        "id": 1000042
      },
      "writtenOn": "2019-05-20T19:49:47Z",
      "side": 1,
      "message": "yeah, agreed that this is weird. i think it\u0027s ultimately the \"fault\" of the protobuf library, but at the same time, the alternative would be to not able to use struct literals at all and instead needing to do something like:\n\n  var authReq cpb.AuthorizationRequest\n  key :\u003d authReq.AddKey()\n  data :\u003d key.AddData()\n  data.SetType(keyType)\n  ...\n\ni think they ultimately made the right choice here. :-P",
      "parentUuid": "7a0bc214_c139a1a0",
      "revId": "e7a16fc602701669bc36a08529f11e6db9654b1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}