{
  "comments": [
    {
      "key": {
        "uuid": "ed606c84_31b1dc19",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/shill_init_login_script.go",
        "patchSetId": 39
      },
      "lineNbr": 26,
      "author": {
        "id": 1117055
      },
      "writtenOn": "2020-02-13T19:46:28Z",
      "side": 1,
      "message": "Looks like the body of this function is copy-pasted into all future tests with the exception of the test function used. If they are all going to be the same, you could add a function to shillscript that wraps the environment setup and takes a function to run within that environment:\n\nfunc RunTest(ctx context.Context, test func (context.Context, *shillscript.TestEnv) error) error {\n  // We lose connectivity ...\n  unlock, err :\u003d network.LockCheckNetworkHook(ctx)\n  if err !\u003d nil {\n    return error.Wrap(err, \"Failed locking the check network hook\")\n  }\n  defer unlock()\n  \n  var env shillscript.TestEnv\n  defer shillscript.TearDown(ctx, \u0026env)\n  err :\u003d shillscript.SetUp(ctx, \u0026env)\n  // handle err...\n\n  return test(ctx, \u0026env) // or maybe wrap errors in some fashion\n}\n\nwhich can then be called in this function as\n\n if err :\u003d RunTest(ctx, testLogin); err !\u003d nil...\n\nThen we don\u0027t have to worry about future test writers forgetting anything that is necessary for these tests in the environment, or proper cleanup, etc.",
      "revId": "4ded72b203f0cb1b80079d1431bde0c678a3e34a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e0bb193_f0c8e1b8",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/shill_init_login_script.go",
        "patchSetId": 39
      },
      "lineNbr": 26,
      "author": {
        "id": 1373754
      },
      "writtenOn": "2020-02-19T02:54:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ed606c84_31b1dc19",
      "revId": "4ded72b203f0cb1b80079d1431bde0c678a3e34a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}