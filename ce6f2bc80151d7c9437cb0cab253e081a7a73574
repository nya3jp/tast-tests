{
  "comments": [
    {
      "key": {
        "uuid": "733c8320_5585a415",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/memory/android.go",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-12-18T13:12:04Z",
      "side": 1,
      "message": "This can be assigned directly in the var above.\n\n var broadcastResultRegexp \u003d regexp.MustCompile(...)",
      "range": {
        "startLine": 27,
        "startChar": 1,
        "endLine": 27,
        "endChar": 101
      },
      "revId": "ce6f2bc80151d7c9437cb0cab253e081a7a73574",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc703fcf_4f4ad94b",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/memory/android.go",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1368712
      },
      "writtenOn": "2019-12-19T07:26:43Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "733c8320_5585a415",
      "range": {
        "startLine": 27,
        "startChar": 1,
        "endLine": 27,
        "endChar": 101
      },
      "revId": "ce6f2bc80151d7c9437cb0cab253e081a7a73574",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1659e6d5_f236958a",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/memory/android.go",
        "patchSetId": 6
      },
      "lineNbr": 32,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-12-18T13:12:04Z",
      "side": 1,
      "message": "Please avoid embedding something unless it\u0027s absolutely intended. By embedding, AndroidAllocator behaves just like arc.ARC, and I don\u0027t think it\u0027s an intended design.\n\n type AndroidAllocator struct {\n   a *arc.ARC\n }",
      "range": {
        "startLine": 32,
        "startChar": 1,
        "endLine": 32,
        "endChar": 9
      },
      "revId": "ce6f2bc80151d7c9437cb0cab253e081a7a73574",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a20b9c0_14e46611",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/memory/android.go",
        "patchSetId": 6
      },
      "lineNbr": 32,
      "author": {
        "id": 1368712
      },
      "writtenOn": "2019-12-19T07:26:43Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1659e6d5_f236958a",
      "range": {
        "startLine": 32,
        "startChar": 1,
        "endLine": 32,
        "endChar": 9
      },
      "revId": "ce6f2bc80151d7c9437cb0cab253e081a7a73574",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a85dee35_069166d1",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/memory/android.go",
        "patchSetId": 6
      },
      "lineNbr": 36,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-12-18T13:12:04Z",
      "side": 1,
      "message": "I think AndroidAllocator is not intended to be copyable, I recommend returning *AndroidAllocator and changing the receiver of all its methods to *AndroidAllocator.",
      "range": {
        "startLine": 36,
        "startChar": 37,
        "endLine": 36,
        "endChar": 53
      },
      "revId": "ce6f2bc80151d7c9437cb0cab253e081a7a73574",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a0b2a92_ac9c6903",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/memory/android.go",
        "patchSetId": 6
      },
      "lineNbr": 36,
      "author": {
        "id": 1368712
      },
      "writtenOn": "2019-12-19T07:26:43Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a85dee35_069166d1",
      "range": {
        "startLine": 36,
        "startChar": 37,
        "endLine": 36,
        "endChar": 53
      },
      "revId": "ce6f2bc80151d7c9437cb0cab253e081a7a73574",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0837db4_85d44d58",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/memory/android.go",
        "patchSetId": 6
      },
      "lineNbr": 94,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-12-18T13:12:04Z",
      "side": 1,
      "message": "More safer way to cleanup partially-initialized state is to capture the returning error.\n\n func (a *AndroidAllocator) Prepare(...) (f func() error, retErr error) {\n   ...\n   if err :\u003d a.Install(...); err !\u003d nil { .... }\n   defer func() {\n     if retErr !\u003d nil {\n       a.Uninstall(...)\n       // or if we want to log errors on cleanup...\n       if err :\u003d a.Uninstall(...); err !\u003d nil {\n         testing.ContextLog(ctx, \"Ignoring an error during cleanup: \", err)\n       }\n     }\n   }()\n   ...\n }",
      "range": {
        "startLine": 94,
        "startChar": 1,
        "endLine": 94,
        "endChar": 9
      },
      "revId": "ce6f2bc80151d7c9437cb0cab253e081a7a73574",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6ec4627_a18479ac",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/memory/android.go",
        "patchSetId": 6
      },
      "lineNbr": 94,
      "author": {
        "id": 1117055
      },
      "writtenOn": "2019-12-18T23:03:08Z",
      "side": 1,
      "message": "+1 to this -- this was what my comment on PS1 was aimed at.",
      "parentUuid": "f0837db4_85d44d58",
      "range": {
        "startLine": 94,
        "startChar": 1,
        "endLine": 94,
        "endChar": 9
      },
      "revId": "ce6f2bc80151d7c9437cb0cab253e081a7a73574",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1bf9dc8_abb230aa",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/memory/android.go",
        "patchSetId": 6
      },
      "lineNbr": 94,
      "author": {
        "id": 1368712
      },
      "writtenOn": "2019-12-19T07:26:43Z",
      "side": 1,
      "message": "When cleanup is called is determined by the caller (in this case with a defer in the caller\u0027s scope), so we can\u0027t just defer within Prepare\u0027s scope because those resources have to live longer.\n\nIs there a more idiomatic pattern for this? Just have a separate Close method than the caller is required to call? But that would require duplicating some of the cleanup code...\n\nI\u0027ve split the code into two helper functions to greatly reduce the number of manual cleanup() calls, but the resulting code is still not very satisfying.",
      "parentUuid": "f6ec4627_a18479ac",
      "range": {
        "startLine": 94,
        "startChar": 1,
        "endLine": 94,
        "endChar": 9
      },
      "revId": "ce6f2bc80151d7c9437cb0cab253e081a7a73574",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b1c2bab_c902bb57",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/memory/android.go",
        "patchSetId": 6
      },
      "lineNbr": 94,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-12-20T09:43:58Z",
      "side": 1,
      "message": "Current code looks good to me. That said, I think we can do as:\n\n func Something() (clean func() error, retErr error) {\n   DoFoo()\n   cleanFoo :\u003d func() error { ... }\n   defer func() {\n     if retErr !\u003d nil {\n       if err :\u003d cleanFoo(); err !\u003d nil { ... }\n     }\n   }()\n\n   DoBar()\n   cleanBar :\u003d func() error { ... }\n   defer func() {\n     if retErr !\u003d nil {\n       if err :\u003d cleanBar(); err !\u003d nil { ... }\n     }\n   }()\n\n   ...\n\n   return func() error {\n     var firstErr error\n     ...\n     if err :\u003d cleanBar(); err !\u003d nil \u0026\u0026 firstErr \u003d\u003d nil { firstErr \u003d err }\n     if err :\u003d cleanFoo(); err !\u003d nil \u0026\u0026 firstErr \u003d\u003d nil { firstErr \u003d err }\n     return firstErr\n   }, nil\n }\n\nBut in general, error handling in Go tends to be tedious. :(",
      "parentUuid": "f1bf9dc8_abb230aa",
      "range": {
        "startLine": 94,
        "startChar": 1,
        "endLine": 94,
        "endChar": 9
      },
      "revId": "ce6f2bc80151d7c9437cb0cab253e081a7a73574",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b5902bd_66ad7623",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/memory/android.go",
        "patchSetId": 6
      },
      "lineNbr": 107,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-12-18T13:12:04Z",
      "side": 1,
      "message": "When a function returns (X, error), usually the value of X is undefined if err !\u003d nil. So, while it\u0027s technically equivalent, I recommend rewriting this to:\n\n err !\u003d nil || vmEnabled\n\nThat said, looking inside the clause, I think it\u0027s better to write this as the following to reduce nesting:\n\n vmEnabled, err :\u003d arc.VMEnabled()\n if err !\u003d nil {\n   cleanup1()\n   return nil, ...\n }\n if vmEnabled {\n   return cleanup1, nil\n }\n\nSee also: https://github.com/golang/go/wiki/CodeReviewComments#indent-error-flow",
      "range": {
        "startLine": 107,
        "startChar": 39,
        "endLine": 107,
        "endChar": 64
      },
      "revId": "ce6f2bc80151d7c9437cb0cab253e081a7a73574",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b660e18_31468503",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/memory/android.go",
        "patchSetId": 6
      },
      "lineNbr": 107,
      "author": {
        "id": 1368712
      },
      "writtenOn": "2019-12-19T07:26:43Z",
      "side": 1,
      "message": "Yes, that is easier to follow, thanks",
      "parentUuid": "2b5902bd_66ad7623",
      "range": {
        "startLine": 107,
        "startChar": 39,
        "endLine": 107,
        "endChar": 64
      },
      "revId": "ce6f2bc80151d7c9437cb0cab253e081a7a73574",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e59ec339_1163a992",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/memory/android.go",
        "patchSetId": 6
      },
      "lineNbr": 134,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-12-18T13:12:04Z",
      "side": 1,
      "message": "Cleanup should be done in the reverse order of the initialization, so:\n\n if err :\u003d testexec.CommandContext(...); err !\u003d nil { ... }\n if err :\u003d cleanup1(); err !\u003d nil { ... }",
      "range": {
        "startLine": 129,
        "startChar": 0,
        "endLine": 134,
        "endChar": 3
      },
      "revId": "ce6f2bc80151d7c9437cb0cab253e081a7a73574",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09457271_451f30d8",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/memory/android.go",
        "patchSetId": 6
      },
      "lineNbr": 134,
      "author": {
        "id": 1368712
      },
      "writtenOn": "2019-12-19T07:26:43Z",
      "side": 1,
      "message": "Yes, it\u0027s much more important to re-enable SELinux enforcement than to uninstall the app.",
      "parentUuid": "e59ec339_1163a992",
      "range": {
        "startLine": 129,
        "startChar": 0,
        "endLine": 134,
        "endChar": 3
      },
      "revId": "ce6f2bc80151d7c9437cb0cab253e081a7a73574",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ede34de_73d37db5",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/memory/android.go",
        "patchSetId": 6
      },
      "lineNbr": 141,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-12-18T13:12:04Z",
      "side": 1,
      "message": "1.13 :)",
      "range": {
        "startLine": 141,
        "startChar": 49,
        "endLine": 141,
        "endChar": 52
      },
      "revId": "ce6f2bc80151d7c9437cb0cab253e081a7a73574",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb5b569c_3f1d677c",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/memory/android.go",
        "patchSetId": 6
      },
      "lineNbr": 141,
      "author": {
        "id": 1368712
      },
      "writtenOn": "2019-12-19T07:26:43Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2ede34de_73d37db5",
      "range": {
        "startLine": 141,
        "startChar": 49,
        "endLine": 141,
        "endChar": 52
      },
      "revId": "ce6f2bc80151d7c9437cb0cab253e081a7a73574",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f4acece_49c243a4",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/memory/android.go",
        "patchSetId": 6
      },
      "lineNbr": 170,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-12-18T13:12:04Z",
      "side": 1,
      "message": "Please check the return value of this call (it returns an error if ctx expires before the timeout)",
      "range": {
        "startLine": 170,
        "startChar": 2,
        "endLine": 170,
        "endChar": 35
      },
      "revId": "ce6f2bc80151d7c9437cb0cab253e081a7a73574",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9fa9c8a_ba0bab5e",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/memory/android.go",
        "patchSetId": 6
      },
      "lineNbr": 170,
      "author": {
        "id": 1368712
      },
      "writtenOn": "2019-12-19T07:26:43Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3f4acece_49c243a4",
      "range": {
        "startLine": 170,
        "startChar": 2,
        "endLine": 170,
        "endChar": 35
      },
      "revId": "ce6f2bc80151d7c9437cb0cab253e081a7a73574",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6b9aa903_d56628c0",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/memory/android.go",
        "patchSetId": 6
      },
      "lineNbr": 180,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-12-18T13:12:04Z",
      "side": 1,
      "message": "style: mind printing values in got-want order?\nhttps://github.com/golang/go/wiki/CodeReviewComments#useful-test-failures",
      "range": {
        "startLine": 180,
        "startChar": 73,
        "endLine": 180,
        "endChar": 93
      },
      "revId": "ce6f2bc80151d7c9437cb0cab253e081a7a73574",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e1f067a_9ef95b4a",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/memory/android.go",
        "patchSetId": 6
      },
      "lineNbr": 180,
      "author": {
        "id": 1368712
      },
      "writtenOn": "2019-12-19T07:26:43Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6b9aa903_d56628c0",
      "range": {
        "startLine": 180,
        "startChar": 73,
        "endLine": 180,
        "endChar": 93
      },
      "revId": "ce6f2bc80151d7c9437cb0cab253e081a7a73574",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9d91f1c0_20e02222",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/memory_android_perf.go",
        "patchSetId": 6
      },
      "lineNbr": 45,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-12-18T13:12:04Z",
      "side": 1,
      "message": "nit: a :\u003d ...",
      "range": {
        "startLine": 45,
        "startChar": 1,
        "endLine": 45,
        "endChar": 8
      },
      "revId": "ce6f2bc80151d7c9437cb0cab253e081a7a73574",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4404b294_4cbcdf82",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/memory_android_perf.go",
        "patchSetId": 6
      },
      "lineNbr": 45,
      "author": {
        "id": 1368712
      },
      "writtenOn": "2019-12-19T07:26:43Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9d91f1c0_20e02222",
      "range": {
        "startLine": 45,
        "startChar": 1,
        "endLine": 45,
        "endChar": 8
      },
      "revId": "ce6f2bc80151d7c9437cb0cab253e081a7a73574",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d3f556f_82b7c6a2",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/memory_android_perf.go",
        "patchSetId": 6
      },
      "lineNbr": 64,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-12-18T13:12:04Z",
      "side": 1,
      "message": "style: Mind trying to reduce nesting?\nhttps://github.com/golang/go/wiki/CodeReviewComments#indent-error-flow\n\n if ... {\n   s.Fatal(...)\n }\n ...",
      "range": {
        "startLine": 64,
        "startChar": 1,
        "endLine": 64,
        "endChar": 9
      },
      "revId": "ce6f2bc80151d7c9437cb0cab253e081a7a73574",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7df063de_b6630f6c",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/memory_android_perf.go",
        "patchSetId": 6
      },
      "lineNbr": 64,
      "author": {
        "id": 1368712
      },
      "writtenOn": "2019-12-19T07:26:43Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8d3f556f_82b7c6a2",
      "range": {
        "startLine": 64,
        "startChar": 1,
        "endLine": 64,
        "endChar": 9
      },
      "revId": "ce6f2bc80151d7c9437cb0cab253e081a7a73574",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ca18fb5_fbf68da1",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/memory_android_perf.go",
        "patchSetId": 6
      },
      "lineNbr": 65,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-12-18T13:12:04Z",
      "side": 1,
      "message": "nit: This can be 1024*1024 without any problem since constants in Go are untyped.",
      "range": {
        "startLine": 65,
        "startChar": 22,
        "endLine": 65,
        "endChar": 30
      },
      "revId": "ce6f2bc80151d7c9437cb0cab253e081a7a73574",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17be6c6e_5f79a494",
        "filename": "src/chromiumos/tast/local/bundles/cros/arc/memory_android_perf.go",
        "patchSetId": 6
      },
      "lineNbr": 65,
      "author": {
        "id": 1368712
      },
      "writtenOn": "2019-12-19T07:26:43Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9ca18fb5_fbf68da1",
      "range": {
        "startLine": 65,
        "startChar": 22,
        "endLine": 65,
        "endChar": 30
      },
      "revId": "ce6f2bc80151d7c9437cb0cab253e081a7a73574",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}