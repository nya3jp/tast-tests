{
  "comments": [
    {
      "key": {
        "uuid": "2e180474_d5f7935a",
        "filename": "src/chromiumos/tast/common/network/arping/regexps.go",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-07-01T07:58:56Z",
      "side": 1,
      "message": "I personally think it is easier to understand with these regexp definition right before its usage. e.g. know how many submatches could exist. (sorry that I didn\u0027t notice this in the cl moving ping to common)\n\nIf you want to avoid multiple compiles, maybe place these right before the parse function?",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 18,
        "endChar": 69
      },
      "revId": "7160d29d9aa1a8cb0379e1740f87888b61b5570e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf5870d3_8499c4f9",
        "filename": "src/chromiumos/tast/common/network/arping/runner.go",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2020-07-02T01:45:59Z",
      "side": 1,
      "message": "an",
      "range": {
        "startLine": 49,
        "startChar": 19,
        "endLine": 49,
        "endChar": 20
      },
      "revId": "7160d29d9aa1a8cb0379e1740f87888b61b5570e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6cf532cc_2313d249",
        "filename": "src/chromiumos/tast/common/network/arping/runner.go",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2020-07-02T01:45:59Z",
      "side": 1,
      "message": "For this case, shall we dump output to a file under s.OutDir and log the file path for debugging reference.",
      "revId": "7160d29d9aa1a8cb0379e1740f87888b61b5570e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c3a22e8_c388fc7a",
        "filename": "src/chromiumos/tast/common/network/arping/runner.go",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-07-01T07:58:56Z",
      "side": 1,
      "message": "As this is float, i.e. no restriction on the unit, do you think it might be better to use time.Duration here? (Duration has a function Seconds to obtain the same float64)",
      "range": {
        "startLine": 88,
        "startChar": 13,
        "endLine": 88,
        "endChar": 28
      },
      "revId": "7160d29d9aa1a8cb0379e1740f87888b61b5570e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e90de0ce_6910b92e",
        "filename": "src/chromiumos/tast/common/network/arping/runner.go",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1387481
      },
      "writtenOn": "2020-07-01T08:14:47Z",
      "side": 1,
      "message": "Not sure if we can simply use an int -- according to Autotest, there is no any test setting timeout.",
      "parentUuid": "7c3a22e8_c388fc7a",
      "range": {
        "startLine": 88,
        "startChar": 13,
        "endLine": 88,
        "endChar": 28
      },
      "revId": "7160d29d9aa1a8cb0379e1740f87888b61b5570e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3a9bead_b88787e6",
        "filename": "src/chromiumos/tast/common/network/arping/runner.go",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-07-01T08:44:31Z",
      "side": 1,
      "message": "According to the source of arping [1], the timeout is an integer in seconds, so yes, let\u0027s use int here to reflect the constraint of the binary.\n\n[1] https://github.com/iputils/iputils/blob/master/arping.c#L692",
      "parentUuid": "e90de0ce_6910b92e",
      "range": {
        "startLine": 88,
        "startChar": 13,
        "endLine": 88,
        "endChar": 28
      },
      "revId": "7160d29d9aa1a8cb0379e1740f87888b61b5570e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "079d731d_eb5fdc4f",
        "filename": "src/chromiumos/tast/common/network/arping/runner.go",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2020-07-02T01:45:59Z",
      "side": 1,
      "message": "In Golang world, I would prefer choosing time.Duration as the type for any duration or latency field. It is self explanatory, i.e. we no longer to denote the time unit in comment.\n\nLooks like we have several places to change in our code. How about starting from this CL?",
      "parentUuid": "d3a9bead_b88787e6",
      "range": {
        "startLine": 88,
        "startChar": 13,
        "endLine": 88,
        "endChar": 28
      },
      "revId": "7160d29d9aa1a8cb0379e1740f87888b61b5570e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92e06e7e_35784d81",
        "filename": "src/chromiumos/tast/common/network/arping/runner.go",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-07-02T02:10:14Z",
      "side": 1,
      "message": "The problem of time.Duration is that it have a more precise time precision that the tool does not really support which might cause some unexpected behavior. (e.g. passing a 0.5s timeout here) But I think it\u0027s OK if the truncate/rounding to seconds is well-documented.\n\nFor the other related usages, some duration related settings also have similar problem (or even harder to handle). e.g. beacon interval in hostapd has a 1024us unit which will make it hard to configure with time.Duration. But we can handle them case by case, I guess.",
      "parentUuid": "079d731d_eb5fdc4f",
      "range": {
        "startLine": 88,
        "startChar": 13,
        "endLine": 88,
        "endChar": 28
      },
      "revId": "7160d29d9aa1a8cb0379e1740f87888b61b5570e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aac82889_136e2769",
        "filename": "src/chromiumos/tast/common/network/arping/runner.go",
        "patchSetId": 1
      },
      "lineNbr": 110,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2020-07-02T01:45:59Z",
      "side": 1,
      "message": "failed to convert %q to integer",
      "revId": "7160d29d9aa1a8cb0379e1740f87888b61b5570e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c76a8ed_82d94cef",
        "filename": "src/chromiumos/tast/common/network/arping/runner.go",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2020-07-02T01:45:59Z",
      "side": 1,
      "message": "failed to parse unicast message; got %d submatches; want 5\n\nAlso, is it possible?",
      "range": {
        "startLine": 121,
        "startChar": 30,
        "endLine": 121,
        "endChar": 65
      },
      "revId": "7160d29d9aa1a8cb0379e1740f87888b61b5570e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81ed9ed3_a8e0bae1",
        "filename": "src/chromiumos/tast/common/network/arping/runner.go",
        "patchSetId": 1
      },
      "lineNbr": 150,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2020-07-02T01:45:59Z",
      "side": 1,
      "message": "It would be more semantically correct to use \"float(len(latencies))\".\n\nYou may assert len(latencies) \u003d\u003d received after the previous for-loop.",
      "range": {
        "startLine": 150,
        "startChar": 30,
        "endLine": 150,
        "endChar": 47
      },
      "revId": "7160d29d9aa1a8cb0379e1740f87888b61b5570e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53c4f79c_33d1b550",
        "filename": "src/chromiumos/tast/remote/bundles/cros/wifi/gtk.go",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-07-01T07:58:56Z",
      "side": 1,
      "message": "Add some comments for these configuration?",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 34,
        "endChar": 2
      },
      "revId": "7160d29d9aa1a8cb0379e1740f87888b61b5570e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "845e2132_5c0f6368",
        "filename": "src/chromiumos/tast/remote/wificell/test_fixture.go",
        "patchSetId": 1
      },
      "lineNbr": 488,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-07-01T07:58:56Z",
      "side": 1,
      "message": "The logic here seems to be the same as in PingFromServer. Maybe extract these into a utility method? (Or is it an overkill?)",
      "range": {
        "startLine": 480,
        "startChar": 0,
        "endLine": 488,
        "endChar": 2
      },
      "revId": "7160d29d9aa1a8cb0379e1740f87888b61b5570e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a79832b5_f232dd1c",
        "filename": "src/chromiumos/tast/remote/wificell/test_fixture.go",
        "patchSetId": 1
      },
      "lineNbr": 495,
      "author": {
        "id": 1371981
      },
      "writtenOn": "2020-07-01T07:58:56Z",
      "side": 1,
      "message": "I guess you want to avoid printing the long slice here.\n\nAs this is already quite verbose, do you think we can have this format as arping.Result.String ?",
      "range": {
        "startLine": 495,
        "startChar": 47,
        "endLine": 495,
        "endChar": 90
      },
      "revId": "7160d29d9aa1a8cb0379e1740f87888b61b5570e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}