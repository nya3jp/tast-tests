{
  "comments": [
    {
      "key": {
        "uuid": "b93e34df_337cfd90",
        "filename": "src/chromiumos/tast/local/bundles/cros/hwsec/recreate_user_vault.go",
        "patchSetId": 5
      },
      "lineNbr": 87,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2020-03-02T23:54:12Z",
      "side": 1,
      "message": "This makes me a bit nervous: the test seems to consist of multiple phases, and each phase calls MountVault and then Unmount/Remove should be done as the cleanup. I guess it comes to an unexpected state if the test fails at a preparation of the next state (like hwseclocal.RestartTPMDaemons() of Phase 2 below), because Unmount is already done and the next MountVault isn\u0027t called yet.\n\nConsidering that, I would like to propose as follows:\n* turn each phase as a different function: (i.e. func() { s.Log(\"Phase 1...\") ... }())\n* or use of s.Run (https://godoc.org/chromium.googlesource.com/chromiumos/platform/tast.git/src/chromiumos/tast/testing#State.Run)\n* in each of phase, have this defer, to make sure the cleanup is done at the end of each phase",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 87,
        "endChar": 4
      },
      "revId": "660e9c1e4d1a78b5a03ee1fadc56cc123f6d986b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b21bf14a_136cd18b",
        "filename": "src/chromiumos/tast/local/bundles/cros/hwsec/recreate_user_vault.go",
        "patchSetId": 5
      },
      "lineNbr": 87,
      "author": {
        "id": 1322146
      },
      "writtenOn": "2020-03-03T01:08:19Z",
      "side": 1,
      "message": "+1.",
      "parentUuid": "b93e34df_337cfd90",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 87,
        "endChar": 4
      },
      "revId": "660e9c1e4d1a78b5a03ee1fadc56cc123f6d986b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "233adb07_90712498",
        "filename": "src/chromiumos/tast/local/bundles/cros/hwsec/recreate_user_vault.go",
        "patchSetId": 5
      },
      "lineNbr": 87,
      "author": {
        "id": 1300049
      },
      "writtenOn": "2020-03-03T01:25:23Z",
      "side": 1,
      "message": "I thought about wrapping those phases into functions when creating the test, but per Tast guidance, such cleanup is discouraged since even w/o the cleanup, the test won\u0027t drive the system into a non-functional state anyways:\nhttps://chromium.googlesource.com/chromiumos/platform/tast/+/HEAD/docs/writing_tests.md#Startup-and-shutdown\n\nOther tests that need to mount the same user vault should try to unmount it first as an initialization, like what this test does, since we cannot safely guarantee user home to be at a desired state.\n\nFor those reasons above, I decided not to wrap them in separated functions.\n\nJohn, is there any reason you want to do the cleanup?",
      "parentUuid": "b21bf14a_136cd18b",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 87,
        "endChar": 4
      },
      "revId": "660e9c1e4d1a78b5a03ee1fadc56cc123f6d986b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ce514d2_4e731899",
        "filename": "src/chromiumos/tast/local/bundles/cros/hwsec/recreate_user_vault.go",
        "patchSetId": 5
      },
      "lineNbr": 87,
      "author": {
        "id": 1314760
      },
      "writtenOn": "2020-03-03T19:55:59Z",
      "side": 1,
      "message": "The reason why I added the cleanup is because this test will leave the user vault on the filesystem after running, and that can disrupt other tests.",
      "parentUuid": "233adb07_90712498",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 87,
        "endChar": 4
      },
      "revId": "660e9c1e4d1a78b5a03ee1fadc56cc123f6d986b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08f3a5cc_9a63f419",
        "filename": "src/chromiumos/tast/local/bundles/cros/hwsec/recreate_user_vault.go",
        "patchSetId": 5
      },
      "lineNbr": 87,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2020-03-03T21:26:23Z",
      "side": 1,
      "message": "It is a hard decision for choosing debuggability of leaving-the-state vs independence of tests / cleaning up properly to interfere other test cases. But the linked document also mentioned as follows:\n\n\u003e Note that tests should still undo atypical configuration that leaves the system in a non-fully-functional state, though. For example, if a test needs to temporarily stop a service, it should restart it before exiting.\n\nThis could be applied to this case, but I can\u0027t say. Please discuss among y\u0027all for whether this cleanup should be done or not. I\u0027ll respect your decision.\n\nMy comment above was rather for coding style. In other words, I\u0027m still wondering if this code works as intended with the assumption that this cleanup should be added:\n* if utility.Unmount in defer (line 81) fails, it will not remove the vault (utility.RemoveVault in line 84 will never be called). Is this intentional? Is it okay? That is my biggest question.\n* secondary, when the test fails after the filesystem is unmounted (e.g. failures around line 100, hwseclocal.RestartTPMDeamons()), the filesystem should be already unmounted (at line 94) yet this defer function runs, thus utility.Unmount will be invoked again. If that causes an error, my question will become much more realistic than hypothetical.\n* one way to deal with this is to check if it really needs to invoke utility.Unmount in defer function. That is reasonable to me.\n* or, another approach is my previous suggestion: ensuring cleanup at the end of each phase.\n* or, if utility.Unmount needs to be called but utility.RemoveVault doesn\u0027t have to be called, it makes sense to me to have utility.Unmount only in the defer function.",
      "parentUuid": "3ce514d2_4e731899",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 87,
        "endChar": 4
      },
      "revId": "660e9c1e4d1a78b5a03ee1fadc56cc123f6d986b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}