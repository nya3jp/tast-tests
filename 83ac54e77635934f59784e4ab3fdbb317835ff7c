{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c145ab25_2ba5ac2d",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/recorder.go",
        "patchSetId": 7
      },
      "lineNbr": 154,
      "author": {
        "id": 1508900
      },
      "writtenOn": "2022-02-20T09:38:02Z",
      "side": 1,
      "message": "Do not add `context.Context` to the struct, instead, explicitly pass it as a func argument. See go/go-style/decisions#contexts\n\nIn the case when the `cleanup` field needs a context, you may change it to `cleanup func(ctx context.Context) error`",
      "range": {
        "startLine": 152,
        "startChar": 2,
        "endLine": 154,
        "endChar": 23
      },
      "revId": "83ac54e77635934f59784e4ab3fdbb317835ff7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0b43f83_16461d71",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/recorder.go",
        "patchSetId": 7
      },
      "lineNbr": 154,
      "author": {
        "id": 1003168
      },
      "writtenOn": "2022-02-20T12:23:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c145ab25_2ba5ac2d",
      "range": {
        "startLine": 152,
        "startChar": 2,
        "endLine": 154,
        "endChar": 23
      },
      "revId": "83ac54e77635934f59784e4ab3fdbb317835ff7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd0e316a_d8b4bab0",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/recorder.go",
        "patchSetId": 7
      },
      "lineNbr": 402,
      "author": {
        "id": 1508900
      },
      "writtenOn": "2022-02-20T09:38:02Z",
      "side": 1,
      "message": "Pass the context explicitly, instead of using context field from the `Recorder` struct, see the other comment.",
      "range": {
        "startLine": 402,
        "startChar": 19,
        "endLine": 402,
        "endChar": 34
      },
      "revId": "83ac54e77635934f59784e4ab3fdbb317835ff7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3bd6b215_0099846b",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/recorder.go",
        "patchSetId": 7
      },
      "lineNbr": 402,
      "author": {
        "id": 1003168
      },
      "writtenOn": "2022-02-20T12:23:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fd0e316a_d8b4bab0",
      "range": {
        "startLine": 402,
        "startChar": 19,
        "endLine": 402,
        "endChar": 34
      },
      "revId": "83ac54e77635934f59784e4ab3fdbb317835ff7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e67c9c7_d0d89a05",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/recorder.go",
        "patchSetId": 7
      },
      "lineNbr": 486,
      "author": {
        "id": 1508900
      },
      "writtenOn": "2022-02-20T09:38:02Z",
      "side": 1,
      "message": "The use of context is still problematic. Simply speaking, when `f(runCtx)` at L468 reaches the timeout, the cleanup task (the deferred func) will not be executed if you are using `runCtx` for the StopRecording. \n\nIn the original file, a `closeCtx` (with longer timeout than `runCtx`) is created for cleanup tasks. \n\nYou may refactor this func to:\n```\n        cleanupCtx :\u003d ctx\n        // This also shortens the ctx to reserve time for cleanups.\n        ctx, err :\u003d r.StartRecording(ctx) \n\tif err !\u003d nil {\n\t\treturn err\n\t}\n\tdefer func(ctx context.Context) {\n\t\terr :\u003d r.StopRecording(ctx)\n\t\tif e \u003d\u003d nil \u0026\u0026 err !\u003d nil {\n\t\t\te \u003d err\n\t\t} else if err !\u003d nil {\n\t\t\ttesting.ContextLogf(ctx, \"Failed to stop recording: %s\", err)\n\t\t}\n\t}(cleanupCtx)\n\tif err :\u003d f(ctx); err !\u003d nil {\n\t\treturn err\n\t}\n\treturn nil\n```",
      "range": {
        "startLine": 474,
        "startChar": 1,
        "endLine": 486,
        "endChar": 4
      },
      "revId": "83ac54e77635934f59784e4ab3fdbb317835ff7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc2b6236_38163bdb",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/recorder.go",
        "patchSetId": 7
      },
      "lineNbr": 486,
      "author": {
        "id": 1003168
      },
      "writtenOn": "2022-02-20T12:23:00Z",
      "side": 1,
      "message": "\u003e The use of context is still problematic. Simply speaking, when `f(runCtx)` at L468 reaches the timeout, the cleanup task (the deferred func) will not be executed if you are using `runCtx` for the StopRecording. \n\nGood, point!\n\nBut using original context (i.e. unchanged copy called `cleanupCtx`) to collect metrics is likely problematic too, because we will fetch metrics even if the test timed out. The original code also used shorted context to collect metrics. It used extended context only to stop tracing, because it could be a system-wide process and may not stop automatically when Chrome is stopped.\n\nThis way `StopRecording()` likely needs both contexts. Shorted one to collect metrics and original one to stop tracing.\n\nI did not want to copy contexts in the `Run` function. The `Run()` function is basically a model for other developers to copy-paste its implementation into another existing test with its own \"Run\" infrastructure to also initialize CUJ and report statistics. So I wanted to avoid any modifications in the `Run()` function.",
      "parentUuid": "1e67c9c7_d0d89a05",
      "range": {
        "startLine": 474,
        "startChar": 1,
        "endLine": 486,
        "endChar": 4
      },
      "revId": "83ac54e77635934f59784e4ab3fdbb317835ff7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d82b02fc_5dca527b",
        "filename": "src/chromiumos/tast/local/bundles/cros/ui/cuj/recorder.go",
        "patchSetId": 7
      },
      "lineNbr": 486,
      "author": {
        "id": 1508900
      },
      "writtenOn": "2022-02-20T21:38:02Z",
      "side": 1,
      "message": "\u003e But using original context (i.e. unchanged copy called `cleanupCtx`) to collect metrics is likely problematic too, because we will fetch metrics even if the test timed out. The original code also used shorted context to collect metrics. It used extended context only to stop tracing, because it could be a system-wide process and may not stop automatically when Chrome is stopped.\n\nWhich is exactly why you need a context with a longer timeout for `StopRecording`. You don\u0027t need two contexts in `StopRecording`, you just need the longer one. So that the test will fetch metrics even if it timed out (with `runCtx`).",
      "parentUuid": "cc2b6236_38163bdb",
      "range": {
        "startLine": 474,
        "startChar": 1,
        "endLine": 486,
        "endChar": 4
      },
      "revId": "83ac54e77635934f59784e4ab3fdbb317835ff7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}