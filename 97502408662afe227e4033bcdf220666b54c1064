{
  "comments": [
    {
      "key": {
        "uuid": "c36e55ac_7a22a225",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/virtualethernet/veth.go",
        "patchSetId": 1
      },
      "lineNbr": 6,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-02-03T08:48:43Z",
      "side": 1,
      "message": "nit: The package name virtualethernet looks longer than average Go package names... how about just naming it veth?",
      "range": {
        "startLine": 6,
        "startChar": 8,
        "endLine": 6,
        "endChar": 23
      },
      "revId": "97502408662afe227e4033bcdf220666b54c1064",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88a56aa7_1a969601",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/virtualethernet/veth.go",
        "patchSetId": 1
      },
      "lineNbr": 6,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2020-02-05T21:08:49Z",
      "side": 1,
      "message": "SGTM. I was being conservative about abbreviations, but \u0027veth\u0027 is actually my preference anyway.",
      "parentUuid": "c36e55ac_7a22a225",
      "range": {
        "startLine": 6,
        "startChar": 8,
        "endLine": 6,
        "endChar": 23
      },
      "revId": "97502408662afe227e4033bcdf220666b54c1064",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c27a7921_70747c86",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/virtualethernet/veth.go",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-02-03T08:48:43Z",
      "side": 1,
      "message": "nit: I think it\u0027s more idiomatic to design this API in the following way:\n\n type Pair struct { ... }\n func NewPair(ctx context.Context, iface, peerIface string) (*Pair, error)\n func (p *Pair) Delete(ctx context.Context) error",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 22,
        "endChar": 1
      },
      "revId": "97502408662afe227e4033bcdf220666b54c1064",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9eacc0b9_be311c47",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/virtualethernet/veth.go",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2020-02-05T21:08:49Z",
      "side": 1,
      "message": "And still leave the members public? Or add \"getters\" (without the \"get\" name, of course)? I\u0027m a little weak on my Golang idioms still.",
      "parentUuid": "c27a7921_70747c86",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 22,
        "endChar": 1
      },
      "revId": "97502408662afe227e4033bcdf220666b54c1064",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dff27e5a_9544a81c",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/virtualethernet/veth.go",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2020-02-06T16:48:39Z",
      "side": 1,
      "message": "re: style question (seems Shuhei is OOO, I\u0027m a shadow reviewer):\n* it is absolutely fine to keep public members. That is idiomatic Go program\n* you can create getters if you want to prohibit updates of those members, but you don\u0027t have to",
      "parentUuid": "9eacc0b9_be311c47",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 22,
        "endChar": 1
      },
      "revId": "97502408662afe227e4033bcdf220666b54c1064",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71dfb53c_ddd7af46",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/virtualethernet/veth.go",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-02-18T12:40:50Z",
      "side": 1,
      "message": "+1 to Jun\u0027s comments.",
      "parentUuid": "dff27e5a_9544a81c",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 22,
        "endChar": 1
      },
      "revId": "97502408662afe227e4033bcdf220666b54c1064",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0bf12ee_3e3af533",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/virtualethernet/veth.go",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2020-02-24T22:45:05Z",
      "side": 1,
      "message": "Done.\n\nI think we\u0027ve seen some network APIs grow in ways where the New...() call does some basic initialization, and the real \"start doing things\" phase is in a Start() or similar. Is that \"non-idiomatic\", and it would be better to just do the New...() and {Delete,Stop,whatever}() pairing you\u0027ve suggested? Or is that a case-by-case thing?\n\nAnyway, I went with NewPair()+Delete() here, since I don\u0027t see a good reason to separate \"construct\" from \"do it\" in this case.",
      "parentUuid": "71dfb53c_ddd7af46",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 22,
        "endChar": 1
      },
      "revId": "97502408662afe227e4033bcdf220666b54c1064",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c208f62_0e477bca",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/virtualethernet/veth.go",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2020-02-27T05:52:08Z",
      "side": 1,
      "message": "In general (not specific to Go and Tast), I recommend trying to design APIs less likely to be misused.\n\nFor example, consider the following API to watch something on system:\n\n type SomeWatcher3 struct { ... } // three-state watcher\n func NewSomeWatcher3(...) (*SomeWatcher3, error)\n func (w *SomeWatcher3) Start(...) error\n func (w *SomeWatcher3) Close(...) error\n\nMy typical recommendation to this kind of API is to consider merging Start to NewSomeWatcher3, i.e.\n\n type SomeWatcher2 struct { ... } // two-state watcher\n func NewSomeWatcher2(...) (*SomeWatcher2, error)\n func (w *SomeWatcher2) Close(...) error\n\nSomeWatcher3 has three states (unstarted, started, closed) while SomeWatcher2 has only two states (started, closed). Less states \u003d less risk of misuse.\n\nIn fact, SomeWatcher3 has some ambiguity in API use, e.g.\n\n- Users can call Start twice, and it\u0027s not clear what happens\n- Users can call Start after Close, and it\u0027s not clear what happens\n- It is not clear if we should call Close when we decide to abandon SomeWatcher before calling Start\n\nBut those problems do not apply at all with SomeWatcher2. So I\u0027d say SomeWatcher2 is simpler, less likely to be misused, has better API design.",
      "parentUuid": "d0bf12ee_3e3af533",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 22,
        "endChar": 1
      },
      "revId": "97502408662afe227e4033bcdf220666b54c1064",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}