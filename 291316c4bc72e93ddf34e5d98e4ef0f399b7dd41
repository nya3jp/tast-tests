{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "450e7519_4774399c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2022-06-22T13:08:08Z",
      "side": 1,
      "message": "There are ~20 code doing the same.\nAlong with your original change, they need to be updated, too.\nCould you fix them, too?",
      "revId": "291316c4bc72e93ddf34e5d98e4ef0f399b7dd41",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "13b22fe6_2da3902d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1192536
      },
      "writtenOn": "2022-06-22T15:23:07Z",
      "side": 1,
      "message": "The only path in testexec that wraps an error is in SeparatedOutput.  I checked all the places that call testexec.SeparatedOutput, and none of them were calling ExitCode or GetWaitStatus on the result.  I think the other places that are casting the err to exec.ExitStatus are safe because they\u0027re operating directly on a non-wrapped error.\n\nHowever, I did notice that testexec has unit tests, so I added the output-capturing wrappers to make sure they\u0027re all handled.  PTAL.",
      "parentUuid": "450e7519_4774399c",
      "revId": "291316c4bc72e93ddf34e5d98e4ef0f399b7dd41",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6ea72a1_de2536e4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2022-06-23T13:14:41Z",
      "side": 1,
      "message": "Oh wait, it\u0027d be surprising behavior if it is different between SeparatedOutput and others, Wait(), Run(), Output(), and CombinedOutput().\nWhy was it only for SeparatedOutput, rather than making behavior consistent across methods?",
      "parentUuid": "13b22fe6_2da3902d",
      "revId": "291316c4bc72e93ddf34e5d98e4ef0f399b7dd41",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f5b7e8a_5ef195c0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1192536
      },
      "writtenOn": "2022-06-23T20:07:23Z",
      "side": 1,
      "message": "crrev.com/c/3157892 just added the wrapping to SeparatedOutput without touching the other functions.  I think the incompatibility wasn\u0027t noticed at the time because there weren\u0027t any existing code paths that called GetWaitStatus on the result.  We could add the same wrapper to all the other code paths that return an error from testexec, but I think that will be much more likely to break existing code.  We could also revert crrev.com/c/3157892 to bring back consistency, but it\u0027s been 9 months since that change landed and may cause its own incompatibilities at this point.\n\nSince we\u0027re already dealing with the two different types of errors being returned at this point, I don\u0027t think there\u0027s any way to restore consistency without scrutinizing all the callers.  My thought on the way forward here would be to submit this CL because it makes testexec itself handle both cases, and then optionally consider doing follow-up work to convert all the other callers to use similar `errors.As` logic to make them future-proof as well.  The new unit tests should catch if somebody adds a similar wrapper in the future, so we could also just wait and do that work at that future time.  What do you think?",
      "parentUuid": "a6ea72a1_de2536e4",
      "revId": "291316c4bc72e93ddf34e5d98e4ef0f399b7dd41",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "102ed23d_c14372c3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2022-06-24T13:10:43Z",
      "side": 1,
      "message": "Thank you for explanation of the background.\nI agreed on most of the points.\n\nOne thing I\u0027d like to add is, we should fix the inconsistency anyways, indeed although it looks beyond the goal of this CL.\nCould you file a bug and assign to the original author?\nActually the change looks incorrect, the error log says subcommand returned non zero status, but more variation of errors can be returned from Wait.\n\nThe correct way I think is to fix all \".(*ExitError)\" code by using errors.As,\nfollowed by moving the error wrapping code into (at the end of) Wait(), so that all cases can be covered.",
      "parentUuid": "2f5b7e8a_5ef195c0",
      "revId": "291316c4bc72e93ddf34e5d98e4ef0f399b7dd41",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}