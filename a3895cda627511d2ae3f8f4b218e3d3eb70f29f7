{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f8245929_1c101380",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2021-04-01T21:12:25Z",
      "side": 1,
      "message": "+deanliao@. I hate to pile on the reviewers, but I feel like this could be generally useful for WiFi tests and I want to make sure we do this in a way that will be consistent with existing / future WiFi tests.\n",
      "revId": "a3895cda627511d2ae3f8f4b218e3d3eb70f29f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b4d4847_a470959a",
        "filename": "src/chromiumos/tast/local/shill/wifi.go",
        "patchSetId": 7
      },
      "lineNbr": 66,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2021-04-01T21:12:25Z",
      "side": 1,
      "message": "We should be consistent with WifiInterface and make this WifiManager.",
      "revId": "a3895cda627511d2ae3f8f4b218e3d3eb70f29f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3e58c963_b2c6e74b",
        "filename": "src/chromiumos/tast/local/shill/wifi.go",
        "patchSetId": 7
      },
      "lineNbr": 66,
      "author": {
        "id": 1400377
      },
      "writtenOn": "2021-04-01T22:51:32Z",
      "side": 1,
      "message": "I added the Interface() method to WiFiManager for new code to use, but didn\u0027t change the the code where WiFiInterface() is called because shill manager is created by the caller and may be used to call other shill functions.",
      "parentUuid": "8b4d4847_a470959a",
      "revId": "a3895cda627511d2ae3f8f4b218e3d3eb70f29f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0fdf4248_883caf2b",
        "filename": "src/chromiumos/tast/local/shill/wifi.go",
        "patchSetId": 7
      },
      "lineNbr": 66,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2021-04-02T17:02:00Z",
      "side": 1,
      "message": "What I meant is that we should at least be consistent within this file using \"Wifi\" or \"WiFi\". (Ideally we should be consistent throughout tast and tast-tests, but that can be done separately).\n\nI would avoid duplicating code. Moving Interface() to WifiManager does make sense, but we should update the call sites when we do so (and that can be done separately).",
      "parentUuid": "3e58c963_b2c6e74b",
      "revId": "a3895cda627511d2ae3f8f4b218e3d3eb70f29f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8744f35_e4c8cbda",
        "filename": "src/chromiumos/tast/local/shill/wifi.go",
        "patchSetId": 7
      },
      "lineNbr": 77,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2021-04-01T21:12:25Z",
      "side": 1,
      "message": "nit: Since the interface is never used, I would omit this. (Future cleanup could save the interface in WifiManager and use that, but that can be done separately).",
      "revId": "a3895cda627511d2ae3f8f4b218e3d3eb70f29f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b263dc6f_a553c7bd",
        "filename": "src/chromiumos/tast/local/shill/wifi.go",
        "patchSetId": 7
      },
      "lineNbr": 77,
      "author": {
        "id": 1400377
      },
      "writtenOn": "2021-04-01T21:34:53Z",
      "side": 1,
      "message": "Hi Steven, this check makes sure the DUT has WiFi interface so the WiFiManager can be used for other wifi operations. Or do you think we have another property to check to see if WiFi is supported on this DUT model?",
      "parentUuid": "e8744f35_e4c8cbda",
      "revId": "a3895cda627511d2ae3f8f4b218e3d3eb70f29f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b96045c_202278bb",
        "filename": "src/chromiumos/tast/local/shill/wifi.go",
        "patchSetId": 7
      },
      "lineNbr": 77,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2021-04-01T21:48:08Z",
      "side": 1,
      "message": "Enable below will fail if WiFi is not available.\nWe could also test m.IsAvailable(ctx, TechnologyWifi) for a less expensive test of wifi availability.",
      "parentUuid": "b263dc6f_a553c7bd",
      "revId": "a3895cda627511d2ae3f8f4b218e3d3eb70f29f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa728e13_f90f1a11",
        "filename": "src/chromiumos/tast/local/shill/wifi.go",
        "patchSetId": 7
      },
      "lineNbr": 77,
      "author": {
        "id": 1400377
      },
      "writtenOn": "2021-04-01T22:51:32Z",
      "side": 1,
      "message": "Thanks! I used m.IsAvailable(ctx, TechnologyWifi) and returns error is wifi is not available.",
      "parentUuid": "0b96045c_202278bb",
      "revId": "a3895cda627511d2ae3f8f4b218e3d3eb70f29f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79acc407_dce3f175",
        "filename": "src/chromiumos/tast/local/shill/wifi.go",
        "patchSetId": 7
      },
      "lineNbr": 104,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2021-04-01T21:12:25Z",
      "side": 1,
      "message": "Combine lines (\u0027else if err:\u003d ...\u0027)",
      "revId": "a3895cda627511d2ae3f8f4b218e3d3eb70f29f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c73a0a8c_eac1600b",
        "filename": "src/chromiumos/tast/local/shill/wifi.go",
        "patchSetId": 7
      },
      "lineNbr": 104,
      "author": {
        "id": 1400377
      },
      "writtenOn": "2021-04-01T22:51:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "79acc407_dce3f175",
      "revId": "a3895cda627511d2ae3f8f4b218e3d3eb70f29f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a77856df_96ec8666",
        "filename": "src/chromiumos/tast/local/shill/wifi.go",
        "patchSetId": 7
      },
      "lineNbr": 112,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2021-04-01T21:12:25Z",
      "side": 1,
      "message": "I\u0027m still getting to know go, is an empty for like this a common pattern? Do we need it?",
      "revId": "a3895cda627511d2ae3f8f4b218e3d3eb70f29f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d96f4e3_d00648b6",
        "filename": "src/chromiumos/tast/local/shill/wifi.go",
        "patchSetId": 7
      },
      "lineNbr": 112,
      "author": {
        "id": 1400377
      },
      "writtenOn": "2021-04-01T21:34:53Z",
      "side": 1,
      "message": "I think the for loop is needed because the watcher might return when the monitored property is changed but it\u0027s value is not what we expected. Then we can do next round of watching. As long as we makes sure the for loop will exist we will be ok to use the empty for loop pattern. In our case, the for loop will exist either when the state has changed, or the wCtx times out.",
      "parentUuid": "a77856df_96ec8666",
      "revId": "a3895cda627511d2ae3f8f4b218e3d3eb70f29f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77c020d4_906ee32e",
        "filename": "src/chromiumos/tast/local/shill/wifi.go",
        "patchSetId": 7
      },
      "lineNbr": 112,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2021-04-01T21:48:08Z",
      "side": 1,
      "message": "I see, this is golang\u0027s while (1). So if the watcher succeeds, but enabled did not actually change, we repeat until wCtx times out.\n\nIn cellular_helper.go, I just use testing.Poll to wait for the state to change, which is a bit simpler, but maybe slightly less optimal in the success case, since the watcher would succeed as soon as the change event was fired?\n\nI don\u0027t feel strongly either way, but eventually we should converge on a single pattern, and we should probably put the logic in manager.go. I\u0027ll try to put together a cleanup CL for that, but we don\u0027t need to block this on that.",
      "parentUuid": "6d96f4e3_d00648b6",
      "revId": "a3895cda627511d2ae3f8f4b218e3d3eb70f29f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "01663921_d1a297ea",
        "filename": "src/chromiumos/tast/local/shill/wifi.go",
        "patchSetId": 7
      },
      "lineNbr": 112,
      "author": {
        "id": 1400377
      },
      "writtenOn": "2021-04-01T22:51:32Z",
      "side": 1,
      "message": "I originally used testing.Poll but changed to use watcher feeling watcher is more efficient by avoiding active polling. I checked the cellular one - it uses 100 * time.Millisecond interval which could introduce a lot of unnecessary queries if the enabling operations takes time.",
      "parentUuid": "77c020d4_906ee32e",
      "revId": "a3895cda627511d2ae3f8f4b218e3d3eb70f29f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4ae7737b_8b3f3ce9",
        "filename": "src/chromiumos/tast/local/shill/wifi.go",
        "patchSetId": 7
      },
      "lineNbr": 112,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2021-04-02T17:02:00Z",
      "side": 1,
      "message": "Agreed that the success case here is better, but IIUC the failure case will wait for the entire test timeout, which may be much longer than wifiDefaultTimeout.",
      "parentUuid": "01663921_d1a297ea",
      "revId": "a3895cda627511d2ae3f8f4b218e3d3eb70f29f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}