{
  "comments": [
    {
      "key": {
        "uuid": "597bb227_cb62db7e",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/iw/iw_runner_test.go",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 1158909
      },
      "writtenOn": "2019-10-30T02:32:45Z",
      "side": 1,
      "message": "I don\u0027t understand how this works. Or why you chose this over other ways to do an empty string. \n\u003cthinking out aloud\u003e \nWhat I gather from stack overflow: \n- backticks \u003d uninterpreted string\n- C++-style comments are ok in golang. \nBut this nested evaluation (you have backticks within backticks) smells like Bash - is that common in golang?\n\u003c/thinking out aloud\u003e",
      "range": {
        "startLine": 89,
        "startChar": 1,
        "endLine": 89,
        "endChar": 60
      },
      "revId": "ac899a8ef92626db9d33e3bb323c02c4db341379",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "224bb4c1_a5affa32",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/iw/iw_runner_test.go",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2019-10-30T03:24:40Z",
      "side": 1,
      "message": "I would have just written this line with no backticks as:\n\n\u003ctab\u003eSSID:\u003cspace\u003e\u003cend of line\u003e\n\nbut I\u0027m not allowed to end the line in a space, per \u0027cros lint\u0027. So I terminated the string (`), added a comment, and started a new concatenated string (+ `) that continues onto a new line.\n\nMaybe there\u0027s some better way to do this while still mostly using uninterpreted strings (i.e., `backticks`).",
      "parentUuid": "597bb227_cb62db7e",
      "range": {
        "startLine": 89,
        "startChar": 1,
        "endLine": 89,
        "endChar": 60
      },
      "revId": "ac899a8ef92626db9d33e3bb323c02c4db341379",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21e0fbec_9e1857fc",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/iw/iw_runner_test.go",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2019-10-30T04:06:54Z",
      "side": 1,
      "message": "My first eye interpretation was the same as Kirtika: I thought it is a nested backtick. However, it is a concatenation of two multi-line backtick string literals.  I think this is an acceptable solution to produce \"...\u003cspace\u003e\u003cend of line\u003e...\" string.\n\nHow about changing the comment like:\n/* concatenate two multi-line backtick strings to produce ...\u003cspace\u003e\u003cend of line\u003e... without linter error */",
      "parentUuid": "224bb4c1_a5affa32",
      "range": {
        "startLine": 89,
        "startChar": 1,
        "endLine": 89,
        "endChar": 60
      },
      "revId": "ac899a8ef92626db9d33e3bb323c02c4db341379",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f5bff52_9e9026c5",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/iw/iw_runner_test.go",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2019-10-30T19:55:08Z",
      "side": 1,
      "message": "Done, more or less.",
      "parentUuid": "21e0fbec_9e1857fc",
      "range": {
        "startLine": 89,
        "startChar": 1,
        "endLine": 89,
        "endChar": 60
      },
      "revId": "ac899a8ef92626db9d33e3bb323c02c4db341379",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "081704aa_58ffa186",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/iw/iw_runner_test.go",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 1202079
      },
      "writtenOn": "2019-10-30T19:57:58Z",
      "side": 1,
      "message": "summoning nya@ / hidehiko@:\nIs this something that we should fix in the linter?\nHow do you recommened to fix this?",
      "parentUuid": "9f5bff52_9e9026c5",
      "range": {
        "startLine": 89,
        "startChar": 1,
        "endLine": 89,
        "endChar": 60
      },
      "revId": "ac899a8ef92626db9d33e3bb323c02c4db341379",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55728757_28a0a2f8",
        "filename": "src/chromiumos/tast/local/bundles/cros/network/iw/iw_runner_test.go",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 1132414
      },
      "writtenOn": "2019-10-30T20:01:35Z",
      "side": 1,
      "message": "I was thinking about this: could we disable \u0027cros lint\u0027 and just go (pun!) with a more golang-oriented linter instead? (e.g., does tast-lint / Golint do all the linting we need?) \u0027cros lint\u0027 is a bit too dumb sometimes.",
      "parentUuid": "081704aa_58ffa186",
      "range": {
        "startLine": 89,
        "startChar": 1,
        "endLine": 89,
        "endChar": 60
      },
      "revId": "ac899a8ef92626db9d33e3bb323c02c4db341379",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}