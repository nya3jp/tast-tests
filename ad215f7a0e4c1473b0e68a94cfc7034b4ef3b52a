{
  "comments": [
    {
      "key": {
        "uuid": "49207845_1c2fe19a",
        "filename": "src/chromiumos/tast/local/power/max_load.go",
        "patchSetId": 1
      },
      "lineNbr": 6,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-07-31T03:42:41Z",
      "side": 1,
      "message": "Until we find out this function is useful in multiple tests, would you mind keeping it in a test main file (e.g. charge_scheduling.go)?\n\nWe recommend promoting utility functions progressively as we find out they\u0027re useful in broader tests. Tiers are:\n\n1. chromiumos/local/foolib/foolib.go\n2. chromiumos/local/bundles/cros/category/foolib/foolib.go\n3. chromiumos/local/bundles/cros/category/footest.go\n\nLet us start from 3.",
      "range": {
        "startLine": 5,
        "startChar": 0,
        "endLine": 6,
        "endChar": 13
      },
      "revId": "ad215f7a0e4c1473b0e68a94cfc7034b4ef3b52a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f24139d_e2ebd607",
        "filename": "src/chromiumos/tast/local/power/max_load.go",
        "patchSetId": 1
      },
      "lineNbr": 6,
      "author": {
        "id": 1311094
      },
      "writtenOn": "2019-07-31T15:17:08Z",
      "side": 1,
      "message": "I\u0027ll do this, and this isn\u0027t a critique, I\u0027m just curious what the process is to avoid duplicated utility functions. Say someone else wants to use this function in the future, they aren\u0027t going to know to look in charge_scheduling.go. Are we relying on them to grep the codebase for some relevant keywords? Or are reviewers supposed to be familiar enough that they can catch the duplicate?",
      "parentUuid": "49207845_1c2fe19a",
      "range": {
        "startLine": 5,
        "startChar": 0,
        "endLine": 6,
        "endChar": 13
      },
      "revId": "ad215f7a0e4c1473b0e68a94cfc7034b4ef3b52a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b653d3e4_1419def1",
        "filename": "src/chromiumos/tast/local/power/max_load.go",
        "patchSetId": 1
      },
      "lineNbr": 6,
      "author": {
        "id": 1311094
      },
      "writtenOn": "2019-07-31T20:36:33Z",
      "side": 1,
      "message": "Moved to https://crrev.com/c/1724807/2",
      "parentUuid": "1f24139d_e2ebd607",
      "range": {
        "startLine": 5,
        "startChar": 0,
        "endLine": 6,
        "endChar": 13
      },
      "revId": "ad215f7a0e4c1473b0e68a94cfc7034b4ef3b52a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18a4a263_5d6f0567",
        "filename": "src/chromiumos/tast/local/power/max_load.go",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-07-31T03:42:41Z",
      "side": 1,
      "message": "style: FullyLoadCPUs\n\nhttps://github.com/golang/go/wiki/CodeReviewComments#initialisms",
      "range": {
        "startLine": 19,
        "startChar": 5,
        "endLine": 19,
        "endChar": 18
      },
      "revId": "ad215f7a0e4c1473b0e68a94cfc7034b4ef3b52a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2ebc4ad_4fe25e8c",
        "filename": "src/chromiumos/tast/local/power/max_load.go",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1311094
      },
      "writtenOn": "2019-07-31T20:36:33Z",
      "side": 1,
      "message": "Done and moved to https://crrev.com/c/1724807/2",
      "parentUuid": "18a4a263_5d6f0567",
      "range": {
        "startLine": 19,
        "startChar": 5,
        "endLine": 19,
        "endChar": 18
      },
      "revId": "ad215f7a0e4c1473b0e68a94cfc7034b4ef3b52a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2578d10c_d14d6d56",
        "filename": "src/chromiumos/tast/local/power/max_load.go",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1118346
      },
      "writtenOn": "2019-07-31T03:42:41Z",
      "side": 1,
      "message": "How long it takes to finish this loop depends on the device speed, and if the device is slow, ctx deadline is not really honored. This is really bad since it can affect later tests.\n\nMy personal recommendation is to start \"yes\" Linux command on every CPU. It uses up the whole CPU when stdout is connected to /dev/null. You can make sure they don\u0027t affect later tests by killing them before finishing the current test.",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 27,
        "endChar": 5
      },
      "revId": "ad215f7a0e4c1473b0e68a94cfc7034b4ef3b52a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad25a548_6c5ffe7f",
        "filename": "src/chromiumos/tast/local/power/max_load.go",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1311094
      },
      "writtenOn": "2019-07-31T20:36:33Z",
      "side": 1,
      "message": "Good idea, much cleaner too. Done and moved to https://crrev.com/c/1724807/2",
      "parentUuid": "2578d10c_d14d6d56",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 27,
        "endChar": 5
      },
      "revId": "ad215f7a0e4c1473b0e68a94cfc7034b4ef3b52a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}